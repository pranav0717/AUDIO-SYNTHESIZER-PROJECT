
usb_host_final.elf:     file format elf32-littlenios2
usb_host_final.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000184

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00021e1c memsz 0x00021e1c flags r-x
    LOAD off    0x00022e3c vaddr 0x04021e3c paddr 0x04025010 align 2**12
         filesz 0x000031d4 memsz 0x000031d4 flags rw-
    LOAD off    0x000261e4 vaddr 0x040281e4 paddr 0x040281e4 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000164  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b02c  04000184  04000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00006c8c  0401b1b0  0401b1b0  0001c1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000031d4  04021e3c  04025010  00022e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  040281e4  040281e4  000261e4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  040284c4  040284c4  00026010  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00026010  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000017a8  00000000  00000000  00026038  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0004d64a  00000000  00000000  000277e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000face  00000000  00000000  00074e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00012f40  00000000  00000000  000848f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000048c8  00000000  00000000  00097838  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000f29f  00000000  00000000  0009c100  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000215e5  00000000  00000000  000ab39f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000070  00000000  00000000  000cc984  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000029f8  00000000  00000000  000cc9f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000e6fea  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000e6fed  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000e6ff9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000e6ffa  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000e6ffb  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000e6fff  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000e7003  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000e7007  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000e7010  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000e7019  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000e  00000000  00000000  000e7022  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001c  00000000  00000000  000e7030  2**0
                  CONTENTS, READONLY
 29 .jdi          0000545e  00000000  00000000  000e704c  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00083265  00000000  00000000  000ec4aa  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000184 l    d  .text	00000000 .text
0401b1b0 l    d  .rodata	00000000 .rodata
04021e3c l    d  .rwdata	00000000 .rwdata
040281e4 l    d  .bss	00000000 .bss
040284c4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_host_final_bsp//obj/HAL/src/crt0.o
040001bc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Port.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
04023920 l     O .rwdata	00000001 _ZL9SPI_MODE0
04023921 l     O .rwdata	00000001 _ZL9SPI_MODE1
04023922 l     O .rwdata	00000001 _ZL9SPI_MODE2
04023923 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 Usb.cpp
04023924 l     O .rwdata	00000001 _ZL9SPI_MODE0
04023925 l     O .rwdata	00000001 _ZL9SPI_MODE1
04023926 l     O .rwdata	00000001 _ZL9SPI_MODE2
04023927 l     O .rwdata	00000001 _ZL9SPI_MODE3
040281e4 l     O .bss	00000001 _ZL9usb_error
040281e5 l     O .bss	00000001 _ZL14usb_task_state
040281e8 l     O .bss	00000004 _ZZN3USB4TaskEvE5delay
00000000 l    df *ABS*	00000000 XBOXONE.cpp
04023930 l     O .rwdata	00000001 _ZL9SPI_MODE0
04023931 l     O .rwdata	00000001 _ZL9SPI_MODE1
04023932 l     O .rwdata	00000001 _ZL9SPI_MODE2
04023933 l     O .rwdata	00000001 _ZL9SPI_MODE3
04023934 l     O .rwdata	00000006 _ZL9XBOX_LEDS
0401b2ba l     O .rodata	00000024 _ZL12XBOX_BUTTONS
04003c58 l     F .text	0000013c .LTHUNK0
00000000 l    df *ABS*	00000000 hidboot.cpp
04023954 l     O .rwdata	00000001 _ZL9SPI_MODE0
04023955 l     O .rwdata	00000001 _ZL9SPI_MODE1
04023956 l     O .rwdata	00000001 _ZL9SPI_MODE2
04023957 l     O .rwdata	00000001 _ZL9SPI_MODE3
04023958 l     O .rwdata	00000002 _ZL9pstrSpace
0402395c l     O .rwdata	00000003 _ZL8pstrCRLF
04023960 l     O .rwdata	00000002 _ZL13pstrSingleTab
04023964 l     O .rwdata	00000003 _ZL13pstrDoubleTab
04023968 l     O .rwdata	00000004 _ZL13pstrTripleTab
0402396c l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
0401b408 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
0401b41c l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
0401b428 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
0401b434 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
0401b440 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
0401b44c l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
0401b45c l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
04023974 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
0402397c l     O .rwdata	00000007 _ZL19pstrUsagePageButton
04023984 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
0402398c l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
0401b468 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
0401b474 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
04023990 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
04023994 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
0401b480 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
0401b490 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
0402399c l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
040239a4 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
0401b4a0 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
040239ac l     O .rwdata	00000006 _ZL18pstrUsagePageScale
0401b4b0 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
040239b4 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
0401b4c8 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
040239b8 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
0401b4d4 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
0401b4e0 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
040239c0 l     O .rwdata	00000008 _ZL16pstrUsagePointer
040239c8 l     O .rwdata	00000006 _ZL14pstrUsageMouse
0401b4ec l     O .rodata	00000009 _ZL17pstrUsageJoystick
0401b4f8 l     O .rodata	00000009 _ZL16pstrUsageGamePad
040239d0 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
040239d8 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
0401b504 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
0401b514 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
040239e0 l     O .rwdata	00000002 _ZL10pstrUsageX
040239e4 l     O .rwdata	00000002 _ZL10pstrUsageY
040239e8 l     O .rwdata	00000002 _ZL10pstrUsageZ
040239ec l     O .rwdata	00000003 _ZL11pstrUsageRx
040239f0 l     O .rwdata	00000003 _ZL11pstrUsageRy
040239f4 l     O .rwdata	00000003 _ZL11pstrUsageRz
040239f8 l     O .rwdata	00000007 _ZL15pstrUsageSlider
04023a00 l     O .rwdata	00000005 _ZL13pstrUsageDial
04023a08 l     O .rwdata	00000006 _ZL14pstrUsageWheel
0401b528 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
0401b534 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
0401b540 l     O .rodata	0000000b _ZL18pstrUsageByteCount
0401b54c l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
04023a10 l     O .rwdata	00000006 _ZL14pstrUsageStart
04023a18 l     O .rwdata	00000004 _ZL15pstrUsageSelect
04023a1c l     O .rwdata	00000003 _ZL11pstrUsageVx
04023a20 l     O .rwdata	00000003 _ZL11pstrUsageVy
04023a24 l     O .rwdata	00000003 _ZL11pstrUsageVz
04023a28 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
04023a30 l     O .rwdata	00000005 _ZL13pstrUsageVbry
04023a38 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
04023a40 l     O .rwdata	00000004 _ZL12pstrUsageVno
0401b55c l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
0401b56c l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
0401b578 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
0401b584 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
0401b594 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
0401b5a0 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
0401b5ac l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
0401b5c0 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
0401b5d0 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
0401b5e0 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
0401b5f0 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
0401b600 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
0401b610 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
0401b620 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
0401b630 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
0401b63c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
0401b64c l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
0401b660 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
0401b674 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
0401b680 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
0401b68c l     O .rodata	0000000c _ZL18pstrUsageDPadRight
0401b698 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
0401b6a4 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
0401b6b0 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
0401b6bc l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
0401b6c8 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
0401b6d4 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
0401b6e0 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
0401b6ec l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
0401b6f8 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
0401b708 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
0401b714 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
0401b724 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
0401b734 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
0401b744 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
0401b754 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
0401b764 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
0401b77c l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
0401b794 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
0401b7ac l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
0401b7bc l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
0401b7cc l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
0401b7dc l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
0401b7ec l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
0401b7fc l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
0401b80c l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
0401b81c l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
0401b82c l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
0401b83c l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
0401b84c l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
0401b864 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
0401b874 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
0401b888 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
0401b898 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
0401b8a4 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
0401b8b0 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
0401b8bc l     O .rodata	0000000b _ZL21pstrUsageTrackControl
04023a44 l     O .rwdata	00000008 _ZL16pstrUsageAileron
0401b8c8 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
0401b8d8 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
0401b8ec l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
0401b900 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
0401b910 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
0401b920 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
0401b92c l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
0401b940 l     O .rodata	00000009 _ZL17pstrUsageElevator
0401b94c l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
04023a4c l     O .rwdata	00000007 _ZL15pstrUsageRudder
0401b95c l     O .rodata	00000009 _ZL17pstrUsageThrottle
0401b968 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
0401b974 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
0401b984 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
0401b994 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
04023a54 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
0401b9a0 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
0401b9ac l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
0401b9b8 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
04023a5c l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
04023a64 l     O .rwdata	00000006 _ZL14pstrUsageBrake
04023a6c l     O .rwdata	00000007 _ZL15pstrUsageClutch
04023a74 l     O .rwdata	00000008 _ZL16pstrUsageShifter
0401b9c4 l     O .rodata	00000009 _ZL17pstrUsageSteering
0401b9d0 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
0401b9dc l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
0401b9e8 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
04023a7c l     O .rwdata	00000008 _ZL16pstrUsageBallast
0401b9f4 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
0401ba04 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
0401ba10 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
0401ba1c l     O .rodata	0000000b _ZL18pstrUsageRearBrake
04023a84 l     O .rwdata	00000005 _ZL13pstrUsageBelt
0401ba28 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
04023a8c l     O .rwdata	00000007 _ZL15pstrUsageFlexor
04023a94 l     O .rwdata	00000006 _ZL14pstrUsageGlove
0401ba34 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
0401ba40 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
0401ba4c l     O .rodata	0000000b _ZL20pstrUsageHandTracker
0401ba58 l     O .rodata	0000000b _ZL19pstrUsageOculometer
04023a9c l     O .rwdata	00000005 _ZL13pstrUsageVest
0401ba64 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
0401ba70 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
0401ba7c l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
0401ba8c l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
0401ba9c l     O .rodata	0000000a _ZL17pstrUsageGolfClub
0401baa8 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
0401bab4 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
04023aa4 l     O .rwdata	00000004 _ZL12pstrUsageOar
04023aa8 l     O .rwdata	00000006 _ZL14pstrUsageSlope
04023ab0 l     O .rwdata	00000005 _ZL13pstrUsageRate
0401bac0 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
0401bacc l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
0401badc l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
0401baec l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
0401bafc l     O .rodata	0000000c _ZL19pstrUsageStickTempo
0401bb08 l     O .rodata	0000000b _ZL18pstrUsageStickType
0401bb14 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
04023ab8 l     O .rwdata	00000007 _ZL15pstrUsagePutter
04023ac0 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
04023ac8 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
04023ad0 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
04023ad8 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
04023ae0 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
04023ae8 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
04023af0 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
04023af8 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
04023b00 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
04023b08 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
04023b10 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
0401bb20 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
0401bb2c l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
0401bb38 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
04023b18 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
04023b20 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
04023b28 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
04023b30 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
04023b38 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
0401bb44 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
0401bb54 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
04023b40 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
04023b48 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
0401bb60 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
0401bb70 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
0401bb80 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
0401bb90 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
0401bba0 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
0401bbb0 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
0401bbc0 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
0401bbd0 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
0401bbe0 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
04023b4c l     O .rwdata	00000008 _ZL16pstrUsageFlipper
0401bbf0 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
04023b54 l     O .rwdata	00000005 _ZL13pstrUsageBump
0401bc00 l     O .rodata	00000009 _ZL16pstrUsageNewGame
0401bc0c l     O .rodata	0000000b _ZL18pstrUsageShootBall
04023b5c l     O .rwdata	00000007 _ZL15pstrUsagePlayer
0401bc18 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
0401bc24 l     O .rodata	00000009 _ZL16pstrUsageGunClip
04023b64 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
0401bc30 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
0401bc40 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
0401bc4c l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
0401bc58 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
0401bc64 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
0401bc78 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
0401bc88 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
0401bc98 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
0401bca4 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
0401bcb0 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
0401bcc8 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
0401bcdc l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
0401bcf4 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
0401bd08 l     O .rodata	00000009 _ZL16pstrUsageNumLock
0401bd14 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
0401bd20 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
04023b6c l     O .rwdata	00000008 _ZL16pstrUsageCompose
04023b74 l     O .rwdata	00000005 _ZL13pstrUsageKana
04023b7c l     O .rwdata	00000004 _ZL14pstrUsagePower
04023b80 l     O .rwdata	00000006 _ZL14pstrUsageShift
04023b88 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
04023b8c l     O .rwdata	00000005 _ZL13pstrUsageMute
0401bd2c l     O .rodata	0000000a _ZL19pstrUsageToneEnable
0401bd38 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
0401bd48 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
04023b94 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
0401bd58 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
0401bd68 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
04023b9c l     O .rwdata	00000007 _ZL15pstrUsageRepeat
04023ba4 l     O .rwdata	00000007 _ZL15pstrUsageStereo
0401bd74 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
0401bd88 l     O .rodata	00000009 _ZL17pstrUsageSpinning
04023bac l     O .rwdata	00000004 _ZL12pstrUsageCAV
04023bb0 l     O .rwdata	00000004 _ZL12pstrUsageCLV
0401bd94 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
0401bda8 l     O .rodata	00000009 _ZL16pstrUsageOffHook
04023bb4 l     O .rwdata	00000005 _ZL13pstrUsageRing
0401bdb4 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
0401bdc0 l     O .rodata	0000000a _ZL17pstrUsageDataMode
04023bbc l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
04023bc4 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
04023bcc l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
04023bd4 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
0401bdcc l     O .rodata	00000009 _ZL16pstrUsageHeadSet
04023bdc l     O .rwdata	00000005 _ZL13pstrUsageHold
04023be4 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
0401bdd8 l     O .rodata	00000009 _ZL17pstrUsageCoverage
0401bde4 l     O .rodata	0000000b _ZL18pstrUsageNightMode
0401bdf0 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
0401bdfc l     O .rodata	0000000c _ZL19pstrUsageCallPickup
04023be8 l     O .rwdata	00000005 _ZL19pstrUsageConference
0401be08 l     O .rodata	00000009 _ZL16pstrUsageStandBy
04023bf0 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
04023bf8 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
04023c00 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
0401be14 l     O .rodata	00000009 _ZL16pstrUsageOffLine
04023c08 l     O .rwdata	00000005 _ZL13pstrUsageBusy
04023c10 l     O .rwdata	00000006 _ZL14pstrUsageReady
0401be20 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
0401be2c l     O .rodata	0000000a _ZL17pstrUsagePaperJam
04023c18 l     O .rwdata	00000007 _ZL15pstrUsageRemote
04023c20 l     O .rwdata	00000004 _ZL16pstrUsageForward
04023c24 l     O .rwdata	00000004 _ZL16pstrUsageReverse
04023c28 l     O .rwdata	00000005 _ZL13pstrUsageStop
04023c30 l     O .rwdata	00000007 _ZL15pstrUsageRewind
0401be38 l     O .rodata	00000009 _ZL20pstrUsageFastForward
04023c38 l     O .rwdata	00000005 _ZL13pstrUsagePlay
04023c40 l     O .rwdata	00000006 _ZL14pstrUsagePause
04023c48 l     O .rwdata	00000004 _ZL15pstrUsageRecord
04023c4c l     O .rwdata	00000006 _ZL14pstrUsageError
0401be44 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
0401be54 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
0401be68 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
04023c54 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
0401be80 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
0401be8c l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
0401be9c l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
04023c5c l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
0401beac l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
0401bebc l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
0401bed0 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
0401bee4 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
0401bef8 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
0401bf0c l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
04023c64 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
0401bf1c l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
0401bf28 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
04023c6c l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
0401bf34 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
0401bf40 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
04023c74 l     O .rwdata	00000006 _ZL14pstrUsagePhone
0401bf50 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
0401bf5c l     O .rodata	0000000a _ZL24pstrUsageMessageControls
04023c7c l     O .rwdata	00000008 _ZL16pstrUsageHandset
04023c84 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
0401bf68 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
0401bf74 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
04023c8c l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
04023c94 l     O .rwdata	00000006 _ZL14pstrUsageFlash
04023c9c l     O .rwdata	00000008 _ZL16pstrUsageFeature
04023ca4 l     O .rwdata	00000007 _ZL15pstrUsageRedial
0401bf80 l     O .rodata	00000009 _ZL17pstrUsageTransfer
04023cac l     O .rwdata	00000005 _ZL13pstrUsageDrop
04023cb4 l     O .rwdata	00000005 _ZL13pstrUsagePark
0401bf8c l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
0401bf98 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
04023cbc l     O .rwdata	00000005 _ZL13pstrUsageLine
0401bfa4 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
0401bfb0 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
0401bfbc l     O .rodata	00000009 _ZL19pstrUsageRingSelect
0401bfc8 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
0401bfd4 l     O .rodata	0000000a _ZL17pstrUsageCallerID
04023cc4 l     O .rwdata	00000005 _ZL13pstrUsageSend
0401bfe0 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
0401bfec l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
0401bff8 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
0401c004 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
0401c010 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
0401c01c l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
04023ccc l     O .rwdata	00000004 _ZL16pstrUsageMessage
0401c02c l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
0401c03c l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
0401c050 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
0401c064 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
0401c078 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
0401c08c l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
0401c09c l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
0401c0ac l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
0401c0c0 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
0401c0d0 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
0401c0e0 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
0401c0f0 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
0401c0fc l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
0401c108 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
0401c114 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
04023cd0 l     O .rwdata	00000007 _ZL15pstrUsageRinger
04023cd8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
04023cdc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
04023ce0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
04023ce4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
04023ce8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
04023cec l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
04023cf0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
04023cf4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
04023cf8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
04023cfc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
04023d00 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
04023d04 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
04023d08 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
04023d0c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
04023d10 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
04023d14 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
0401c128 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
0401c138 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
0401c144 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
0401c150 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
04023d18 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
04023d1c l     O .rwdata	00000005 _ZL16pstrUsagePlus100
04023d24 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
04023d2c l     O .rwdata	00000006 _ZL14pstrUsageReset
04023d34 l     O .rwdata	00000006 _ZL14pstrUsageSleep
0401c15c l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
0401c168 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
04023d3c l     O .rwdata	00000008 _ZL21pstrUsageIllumination
0401c174 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
04023d44 l     O .rwdata	00000005 _ZL13pstrUsageMenu
0401c180 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
04023d4c l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
0401c18c l     O .rodata	0000000a _ZL17pstrUsageMenuDown
0401c198 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
0401c1a4 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
0401c1b0 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
0401c1bc l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
0401c1cc l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
0401c1dc l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
0401c1e8 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
0401c1f4 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
04023d54 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
0401c204 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
0401c214 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
04023d5c l     O .rwdata	00000006 _ZL14pstrUsageStill
04023d64 l     O .rwdata	00000004 _ZL18pstrUsageSelection
0401c220 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
0401c22c l     O .rodata	0000000a _ZL17pstrUsageModeStep
0401c238 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
0401c244 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
0401c254 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
04023d68 l     O .rwdata	00000008 _ZL16pstrUsageChannel
04023d70 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
0401c260 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
0401c270 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
0401c27c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
0401c288 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
0401c294 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
0401c2a0 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
0401c2ac l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
0401c2b8 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
0401c2c8 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
0401c2d4 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
0401c2e0 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
0401c2ec l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
04023d78 l     O .rwdata	00000005 _ZL13pstrUsageQuit
04023d80 l     O .rwdata	00000005 _ZL13pstrUsageHelp
0401c2fc l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
0401c30c l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
0401c318 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
0401c324 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
0401c334 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
0401c344 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
04023d88 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
04023d90 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
0401c354 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
04023d98 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
04023da0 l     O .rwdata	00000005 _ZL13pstrUsageOnce
04023da8 l     O .rwdata	00000006 _ZL14pstrUsageDaily
04023db0 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
04023db8 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
0401c360 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
0401c36c l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
04023dc0 l     O .rwdata	00000006 _ZL14pstrUsageEject
04023dc8 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
0401c378 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
0401c384 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
0401c390 l     O .rodata	00000009 _ZL17pstrUsageTracking
0401c39c l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
0401c3a8 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
04023dd0 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
0401c3b4 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
04023dd8 l     O .rwdata	00000005 _ZL13pstrUsageMark
0401c3c0 l     O .rodata	00000009 _ZL18pstrUsageClearMark
0401c3cc l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
0401c3d8 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
0401c3e4 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
0401c3f4 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
0401c408 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
0401c418 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
0401c428 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
0401c434 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
0401c440 l     O .rodata	0000000b _ZL18pstrUsageStopEject
0401c44c l     O .rodata	0000000b _ZL18pstrUsagePlayPause
0401c458 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
04023de0 l     O .rwdata	00000004 _ZL15pstrUsageVolume
04023de4 l     O .rwdata	00000008 _ZL16pstrUsageBalance
04023dec l     O .rwdata	00000005 _ZL13pstrUsageBass
04023df4 l     O .rwdata	00000007 _ZL15pstrUsageTreble
0401c464 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
0401c470 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
04023dfc l     O .rwdata	00000005 _ZL17pstrUsageLoudness
04023e04 l     O .rwdata	00000004 _ZL12pstrUsageMPX
04023e08 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
04023e10 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
04023e18 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
0401c47c l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
0401c488 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
0401c494 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
0401c4a0 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
04023e20 l     O .rwdata	00000005 _ZL13pstrUsageSlow
0401c4ac l     O .rodata	00000009 _ZL18pstrUsageFanEnable
0401c4b8 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
0401c4c4 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
0401c4d0 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
0401c4e0 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
0401c4f0 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
0401c4fc l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
0401c508 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
0401c514 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
04023e28 l     O .rwdata	00000005 _ZL18pstrUsageProximity
04023e30 l     O .rwdata	00000007 _ZL15pstrUsageMotion
0401c520 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
0401c52c l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
04023e38 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
0401c538 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
0401c548 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
0401c558 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
0401c564 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
0401c570 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
0401c57c l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
04023e40 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
04023e48 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
0401c588 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
0401c594 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
0401c5a0 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
0401c5ac l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
04023e50 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
0401c5bc l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
0401c5c8 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
04023e58 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
04023e60 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
04023e68 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
0401c5d8 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
0401c5e4 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
0401c5f0 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
0401c5fc l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
0401c608 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
0401c618 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
0401c62c l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
0401c638 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
0401c64c l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
0401c65c l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
0401c668 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
0401c678 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
0401c688 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
0401c698 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
0401c6a4 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
0401c6b4 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
0401c6c0 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
0401c6d0 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
0401c6e0 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
0401c6f0 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
0401c700 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
0401c714 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
04023e70 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
0401c724 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
0401c738 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
0401c74c l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
0401c75c l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
0401c76c l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
0401c77c l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
0401c788 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
0401c794 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
0401c7a0 l     O .rodata	00000009 _ZL16pstrUsageALLogon
0401c7ac l     O .rodata	0000000a _ZL17pstrUsageALLogoff
0401c7b8 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
0401c7c8 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
0401c7e0 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
0401c7ec l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
0401c7f8 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
0401c804 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
0401c810 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
0401c81c l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
0401c828 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
0401c83c l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
04023e78 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
0401c848 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
04023e80 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
0401c854 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
0401c860 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
0401c870 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
0401c87c l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
0401c88c l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
0401c89c l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
0401c8ac l     O .rodata	0000000b _ZL21pstrUsageALEncryption
0401c8b8 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
0401c8c4 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
0401c8d0 l     O .rodata	00000009 _ZL16pstrUsageALClock
0401c8dc l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
0401c8ec l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
0401c8f8 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
0401c904 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
0401c910 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
0401c91c l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
0401c930 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
0401c940 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
0401c94c l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
0401c960 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
0401c96c l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
0401c97c l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
0401c990 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
0401c9a4 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
0401c9b8 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
0401c9c8 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
0401c9e0 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
0401c9f4 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
0401ca04 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
0401ca14 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
04023e88 l     O .rwdata	00000007 _ZL14pstrUsageACNew
04023e90 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
0401ca28 l     O .rodata	00000009 _ZL16pstrUsageACClose
04023e98 l     O .rwdata	00000008 _ZL15pstrUsageACExit
04023ea0 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
04023ea8 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
04023eb0 l     O .rwdata	00000008 _ZL15pstrUsageACSave
0401ca34 l     O .rodata	00000009 _ZL16pstrUsageACPrint
04023eb8 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
04023ec0 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
04023ec8 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
04023ed0 l     O .rwdata	00000007 _ZL14pstrUsageACCut
0401ca40 l     O .rodata	00000009 _ZL16pstrUsageACPaste
0401ca4c l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
04023ed8 l     O .rwdata	00000008 _ZL15pstrUsageACFind
0401ca58 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
0401ca68 l     O .rodata	0000000a _ZL17pstrUsageACSearch
04023ee0 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
04023ee8 l     O .rwdata	00000008 _ZL15pstrUsageACHome
04023ef0 l     O .rwdata	00000008 _ZL15pstrUsageACBack
04023ef8 l     O .rwdata	00000007 _ZL18pstrUsageACForward
04023f00 l     O .rwdata	00000008 _ZL15pstrUsageACStop
0401ca74 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
0401ca80 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
0401ca90 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
0401caa0 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
04023f08 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
0401caac l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
0401cab8 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
0401cac4 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
04023f10 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
0401cad0 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
0401cadc l     O .rodata	0000000d _ZL21pstrUsageACNormalView
0401caec l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
0401caf8 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
0401cb08 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
0401cb18 l     O .rodata	0000000a _ZL17pstrUsageACScroll
0401cb24 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
0401cb30 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
04023f18 l     O .rwdata	00000007 _ZL14pstrUsageACPan
0401cb40 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
0401cb4c l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
0401cb5c l     O .rodata	0000000d _ZL19pstrUsageACTileVert
04023f20 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
04023f28 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
04023f30 l     O .rwdata	00000008 _ZL15pstrUsageACBold
04023f38 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
0401cb6c l     O .rodata	00000009 _ZL20pstrUsageACUnderline
0401cb78 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
04023f40 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
0401cb84 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
0401cb90 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
0401cb9c l     O .rodata	0000000a _ZL17pstrUsageACRotate
0401cba8 l     O .rodata	0000000a _ZL17pstrUsageACResize
0401cbb4 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
0401cbc0 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
0401cbcc l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
0401cbd8 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
0401cbe4 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
0401cbf0 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
0401cbfc l     O .rodata	0000000c _ZL19pstrUsageACFontSize
0401cc08 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
0401cc18 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
0401cc28 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
0401cc38 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
0401cc48 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
0401cc54 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
0401cc64 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
0401cc70 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
0401cc80 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
0401cc90 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
0401cca0 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
0401ccac l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
0401ccb8 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
0401ccc4 l     O .rodata	0000000b _ZL18pstrUsageACPromote
0401ccd0 l     O .rodata	0000000a _ZL17pstrUsageACDemote
04023f48 l     O .rwdata	00000007 _ZL14pstrUsageACYes
04023f50 l     O .rwdata	00000006 _ZL13pstrUsageACNo
0401ccdc l     O .rodata	0000000a _ZL17pstrUsageACCancel
04023f58 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
04023f60 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
0401cce8 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
04023f68 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
0401ccf4 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
0401cd04 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
0401cd10 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
0401cd20 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
0401cd30 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
0401cd40 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
04023f70 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
04023f78 l     O .rwdata	00000008 _ZL15pstrUsageACLock
0401cd4c l     O .rodata	0000000a _ZL17pstrUsageACUnlock
04023f80 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
0401cd58 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
0401cd64 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
0401cd74 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
0401cd80 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
0401cd90 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
0401cd9c l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
0401cda8 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
0401cdb4 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
0401cdc0 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
0401cdcc l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
0401cdd8 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
04023f88 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
04023f90 l     O .rwdata	00000008 _ZL15pstrUsageACSort
0401cde4 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
0401cdf0 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
04023f98 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
0401ce00 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
0401ce0c l     O .rodata	0000000c _ZL20pstrUsageACViewClock
0401ce18 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
0401ce28 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
0401ce38 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
0401ce44 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
0401ce50 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
0401ce5c l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
04023fa0 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
0401ce68 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
0401ce74 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
0401ce80 l     O .rodata	00000009 _ZL16pstrUsageACReply
0401ce8c l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
0401ce9c l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
04023fa8 l     O .rwdata	00000007 _ZL15pstrUsageACSend
0401cea8 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
04023fb0 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
04023fb8 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
0401ceb4 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
0401cec0 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
0401cecc l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
0401ced8 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
0401cee4 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
0401cef0 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
0401cefc l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
0401cf08 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
0401cf14 l     O .rodata	0000000a _ZL17pstrUsageACRename
0401cf20 l     O .rodata	00000009 _ZL16pstrUsageACMerge
0401cf2c l     O .rodata	00000009 _ZL16pstrUsageACSplit
0401cf38 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
0401cf44 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
0401cf50 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
04023fc0 l     O .rwdata	00000004 _ZL12pstrUsagePen
0401cf5c l     O .rodata	0000000a _ZL17pstrUsageLightPen
0401cf68 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
0401cf74 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
0401cf80 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
0401cf8c l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
04023fc4 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
0401cf9c l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
04023fcc l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
0401cfa8 l     O .rodata	00000009 _ZL17pstrUsageArmature
0401cfb4 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
0401cfc8 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
04023fd4 l     O .rwdata	00000007 _ZL15pstrUsageStylus
04023fdc l     O .rwdata	00000005 _ZL13pstrUsagePuck
04023fe4 l     O .rwdata	00000007 _ZL15pstrUsageFinger
0401cfd8 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
0401cfe4 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
0401cff0 l     O .rodata	00000009 _ZL16pstrUsageInRange
04023fec l     O .rwdata	00000006 _ZL14pstrUsageTouch
04023ff4 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
04023ffc l     O .rwdata	00000004 _ZL12pstrUsageTap
04024000 l     O .rwdata	00000005 _ZL16pstrUsageQuality
0401cffc l     O .rodata	0000000b _ZL18pstrUsageDataValid
0401d008 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
0401d018 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
0401d028 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
04024008 l     O .rwdata	00000007 _ZL15pstrUsageInvert
04024010 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
04024018 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
04024020 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
0401d038 l     O .rodata	00000009 _ZL17pstrUsageAltitude
04024028 l     O .rwdata	00000006 _ZL14pstrUsageTwist
04024030 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
0401d044 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
04024038 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
04024040 l     O .rwdata	00000007 _ZL15pstrUsageEraser
0401d050 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
0401d05c l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
0401d06c l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
0401d078 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
0401d088 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
0401d094 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
0401d0a4 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
0401d0b0 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
0401d0c0 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
0401d0cc l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
0401d0dc l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
0401d0ec l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
0401d0f8 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
0401d104 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
0401d110 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
0401d11c l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
0401d128 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
0401d134 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
0401d140 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
0401d150 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
0401d160 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
04024048 l     O .rwdata	00000004 _ZL12pstrUsageRow
0402404c l     O .rwdata	00000004 _ZL15pstrUsageColumn
04024050 l     O .rwdata	00000005 _ZL13pstrUsageRows
04024058 l     O .rwdata	00000005 _ZL16pstrUsageColumns
0401d16c l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
0401d178 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
0401d184 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
0401d190 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
04024060 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
0401d19c l     O .rodata	00000009 _ZL17pstrUsageFontData
0401d1a8 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
0401d1b4 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
0401d1c0 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
0401d1d0 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
0401d1e0 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
0401d1f0 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
0401d1fc l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
0401d208 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
0401d214 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
0401d220 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
0401d22c l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
0401d238 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
0401d244 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
0401d250 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
0401d25c l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
0401d26c l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
0401d27c l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
0401d28c l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
0401d298 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
0401d2a4 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
0401d2b4 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
04024068 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
0401d2c0 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
0401d2d0 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
0401d2e0 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
0401d2ec l     O .rodata	00000009 _ZL19pstrUsageBlitReport
0401d2f8 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
0401d308 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
0401d318 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
0401d328 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
0401d338 l     O .rodata	0000000a _ZL17pstrUsageBlitData
0401d344 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
0401d350 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
0401d35c l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
0401d36c l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
0401d37c l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
0401d38c l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
0401d39c l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
04024070 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
04024078 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
0401d3ac l     O .rodata	0000000b _ZL18pstrUsageClipStore
04024080 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
04024088 l     O .rwdata	00000005 _ZL13pstrUsageNext
04024090 l     O .rwdata	00000005 _ZL13pstrUsageSave
04024098 l     O .rwdata	00000006 _ZL14pstrUsagePrint
0401d3b8 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
040240a0 l     O .rwdata	00000005 _ZL13pstrUsageCine
0401d3c4 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
040240a8 l     O .rwdata	00000006 _ZL14pstrUsageFocus
040240b0 l     O .rwdata	00000006 _ZL14pstrUsageDepth
0401d3d0 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
0401d3e0 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
0401d3f0 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
0401d400 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
0401d40c l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
0401d418 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
0401d42c l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
0401d440 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
0401d454 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
0401d468 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
0401d478 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
0401d488 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
0401d494 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
0401d4a0 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
0401d4b0 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 message.cpp
040240c4 l     O .rwdata	00000001 _ZL9SPI_MODE0
040240c5 l     O .rwdata	00000001 _ZL9SPI_MODE1
040240c6 l     O .rwdata	00000001 _ZL9SPI_MODE2
040240c7 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 parsetools.cpp
040240cc l     O .rwdata	00000001 _ZL9SPI_MODE0
040240cd l     O .rwdata	00000001 _ZL9SPI_MODE1
040240ce l     O .rwdata	00000001 _ZL9SPI_MODE2
040240cf l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 usbhid.cpp
040240d0 l     O .rwdata	00000001 _ZL9SPI_MODE0
040240d1 l     O .rwdata	00000001 _ZL9SPI_MODE1
040240d2 l     O .rwdata	00000001 _ZL9SPI_MODE2
040240d3 l     O .rwdata	00000001 _ZL9SPI_MODE3
040240d4 l     O .rwdata	00000002 _ZL9pstrSpace
040240d8 l     O .rwdata	00000003 _ZL8pstrCRLF
040240dc l     O .rwdata	00000002 _ZL13pstrSingleTab
040240e0 l     O .rwdata	00000003 _ZL13pstrDoubleTab
040240e4 l     O .rwdata	00000004 _ZL13pstrTripleTab
040240e8 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
0401d58c l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
0401d5a0 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
0401d5ac l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
0401d5b8 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
0401d5c4 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
0401d5d0 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
0401d5e0 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
040240f0 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
040240f8 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
04024100 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
04024108 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
0401d5ec l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
0401d5f8 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
0402410c l     O .rwdata	00000004 _ZL16pstrUsagePagePID
04024110 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
0401d604 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
0401d614 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
04024118 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
04024120 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
0401d624 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
04024128 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
0401d634 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
04024130 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
0401d64c l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
04024134 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
0401d658 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
0401d664 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0402413c l     O .rwdata	00000008 _ZL16pstrUsagePointer
04024144 l     O .rwdata	00000006 _ZL14pstrUsageMouse
0401d670 l     O .rodata	00000009 _ZL17pstrUsageJoystick
0401d67c l     O .rodata	00000009 _ZL16pstrUsageGamePad
0402414c l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
04024154 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
0401d688 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
0401d698 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0402415c l     O .rwdata	00000002 _ZL10pstrUsageX
04024160 l     O .rwdata	00000002 _ZL10pstrUsageY
04024164 l     O .rwdata	00000002 _ZL10pstrUsageZ
04024168 l     O .rwdata	00000003 _ZL11pstrUsageRx
0402416c l     O .rwdata	00000003 _ZL11pstrUsageRy
04024170 l     O .rwdata	00000003 _ZL11pstrUsageRz
04024174 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0402417c l     O .rwdata	00000005 _ZL13pstrUsageDial
04024184 l     O .rwdata	00000006 _ZL14pstrUsageWheel
0401d6ac l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
0401d6b8 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
0401d6c4 l     O .rodata	0000000b _ZL18pstrUsageByteCount
0401d6d0 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0402418c l     O .rwdata	00000006 _ZL14pstrUsageStart
04024194 l     O .rwdata	00000004 _ZL15pstrUsageSelect
04024198 l     O .rwdata	00000003 _ZL11pstrUsageVx
0402419c l     O .rwdata	00000003 _ZL11pstrUsageVy
040241a0 l     O .rwdata	00000003 _ZL11pstrUsageVz
040241a4 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
040241ac l     O .rwdata	00000005 _ZL13pstrUsageVbry
040241b4 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
040241bc l     O .rwdata	00000004 _ZL12pstrUsageVno
0401d6e0 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
0401d6f0 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
0401d6fc l     O .rodata	00000009 _ZL22pstrUsageSystemControl
0401d708 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
0401d718 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
0401d724 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
0401d730 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
0401d744 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
0401d754 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
0401d764 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
0401d774 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
0401d784 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
0401d794 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
0401d7a4 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
0401d7b4 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
0401d7c0 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
0401d7d0 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
0401d7e4 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
0401d7f8 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
0401d804 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
0401d810 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
0401d81c l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
0401d828 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
0401d834 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
0401d840 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
0401d84c l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
0401d858 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
0401d864 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
0401d870 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
0401d87c l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
0401d88c l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
0401d898 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
0401d8a8 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
0401d8b8 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
0401d8c8 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
0401d8d8 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
0401d8e8 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
0401d900 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
0401d918 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
0401d930 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
0401d940 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
0401d950 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
0401d960 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
0401d970 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
0401d980 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
0401d990 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
0401d9a0 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
0401d9b0 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
0401d9c0 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
0401d9d0 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
0401d9e8 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
0401d9f8 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
0401da0c l     O .rodata	0000000d _ZL20pstrUsageFlightStick
0401da1c l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
0401da28 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
0401da34 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
0401da40 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
040241c0 l     O .rwdata	00000008 _ZL16pstrUsageAileron
0401da4c l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
0401da5c l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
0401da70 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
0401da84 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
0401da94 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
0401daa4 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
0401dab0 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
0401dac4 l     O .rodata	00000009 _ZL17pstrUsageElevator
0401dad0 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
040241c8 l     O .rwdata	00000007 _ZL15pstrUsageRudder
0401dae0 l     O .rodata	00000009 _ZL17pstrUsageThrottle
0401daec l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
0401daf8 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
0401db08 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
0401db18 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
040241d0 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
0401db24 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
0401db30 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
0401db3c l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
040241d8 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
040241e0 l     O .rwdata	00000006 _ZL14pstrUsageBrake
040241e8 l     O .rwdata	00000007 _ZL15pstrUsageClutch
040241f0 l     O .rwdata	00000008 _ZL16pstrUsageShifter
0401db48 l     O .rodata	00000009 _ZL17pstrUsageSteering
0401db54 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
0401db60 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
0401db6c l     O .rodata	0000000b _ZL18pstrUsageDivePlane
040241f8 l     O .rwdata	00000008 _ZL16pstrUsageBallast
0401db78 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
0401db88 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
0401db94 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
0401dba0 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
04024200 l     O .rwdata	00000005 _ZL13pstrUsageBelt
0401dbac l     O .rodata	0000000a _ZL17pstrUsageBodySuit
04024208 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
04024210 l     O .rwdata	00000006 _ZL14pstrUsageGlove
0401dbb8 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
0401dbc4 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
0401dbd0 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
0401dbdc l     O .rodata	0000000b _ZL19pstrUsageOculometer
04024218 l     O .rwdata	00000005 _ZL13pstrUsageVest
0401dbe8 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
0401dbf4 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
0401dc00 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
0401dc10 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
0401dc20 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
0401dc2c l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
0401dc38 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
04024220 l     O .rwdata	00000004 _ZL12pstrUsageOar
04024224 l     O .rwdata	00000006 _ZL14pstrUsageSlope
0402422c l     O .rwdata	00000005 _ZL13pstrUsageRate
0401dc44 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
0401dc50 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
0401dc60 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
0401dc70 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
0401dc80 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
0401dc8c l     O .rodata	0000000b _ZL18pstrUsageStickType
0401dc98 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
04024234 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0402423c l     O .rwdata	00000007 _ZL14pstrUsage1Iron
04024244 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0402424c l     O .rwdata	00000007 _ZL14pstrUsage3Iron
04024254 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0402425c l     O .rwdata	00000007 _ZL14pstrUsage5Iron
04024264 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0402426c l     O .rwdata	00000007 _ZL14pstrUsage7Iron
04024274 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0402427c l     O .rwdata	00000007 _ZL14pstrUsage9Iron
04024284 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0402428c l     O .rwdata	00000008 _ZL15pstrUsage11Iron
0401dca4 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
0401dcb0 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
0401dcbc l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
04024294 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0402429c l     O .rwdata	00000007 _ZL14pstrUsage3Wood
040242a4 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
040242ac l     O .rwdata	00000007 _ZL14pstrUsage7Wood
040242b4 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
0401dcc8 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
0401dcd8 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
040242bc l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
040242c4 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
0401dce4 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
0401dcf4 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
0401dd04 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
0401dd14 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
0401dd24 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
0401dd34 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
0401dd44 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
0401dd54 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
0401dd64 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
040242c8 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
0401dd74 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
040242d0 l     O .rwdata	00000005 _ZL13pstrUsageBump
0401dd84 l     O .rodata	00000009 _ZL16pstrUsageNewGame
0401dd90 l     O .rodata	0000000b _ZL18pstrUsageShootBall
040242d8 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
0401dd9c l     O .rodata	00000009 _ZL16pstrUsageGunBolt
0401dda8 l     O .rodata	00000009 _ZL16pstrUsageGunClip
040242e0 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
0401ddb4 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
0401ddc4 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
0401ddd0 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
0401dddc l     O .rodata	0000000b _ZL18pstrUsageGunSafety
0401dde8 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
0401ddfc l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
0401de0c l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
0401de1c l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
0401de28 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
0401de34 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
0401de4c l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
0401de60 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
0401de78 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
0401de8c l     O .rodata	00000009 _ZL16pstrUsageNumLock
0401de98 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
0401dea4 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
040242e8 l     O .rwdata	00000008 _ZL16pstrUsageCompose
040242f0 l     O .rwdata	00000005 _ZL13pstrUsageKana
040242f8 l     O .rwdata	00000004 _ZL14pstrUsagePower
040242fc l     O .rwdata	00000006 _ZL14pstrUsageShift
04024304 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
04024308 l     O .rwdata	00000005 _ZL13pstrUsageMute
0401deb0 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
0401debc l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
0401decc l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
04024310 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
0401dedc l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
0401deec l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
04024318 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
04024320 l     O .rwdata	00000007 _ZL15pstrUsageStereo
0401def8 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
0401df0c l     O .rodata	00000009 _ZL17pstrUsageSpinning
04024328 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0402432c l     O .rwdata	00000004 _ZL12pstrUsageCLV
0401df18 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
0401df2c l     O .rodata	00000009 _ZL16pstrUsageOffHook
04024330 l     O .rwdata	00000005 _ZL13pstrUsageRing
0401df38 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
0401df44 l     O .rodata	0000000a _ZL17pstrUsageDataMode
04024338 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
04024340 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
04024348 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
04024350 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
0401df50 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
04024358 l     O .rwdata	00000005 _ZL13pstrUsageHold
04024360 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
0401df5c l     O .rodata	00000009 _ZL17pstrUsageCoverage
0401df68 l     O .rodata	0000000b _ZL18pstrUsageNightMode
0401df74 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
0401df80 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
04024364 l     O .rwdata	00000005 _ZL19pstrUsageConference
0401df8c l     O .rodata	00000009 _ZL16pstrUsageStandBy
0402436c l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
04024374 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0402437c l     O .rwdata	00000008 _ZL15pstrUsageOnLine
0401df98 l     O .rodata	00000009 _ZL16pstrUsageOffLine
04024384 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0402438c l     O .rwdata	00000006 _ZL14pstrUsageReady
0401dfa4 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
0401dfb0 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
04024394 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0402439c l     O .rwdata	00000004 _ZL16pstrUsageForward
040243a0 l     O .rwdata	00000004 _ZL16pstrUsageReverse
040243a4 l     O .rwdata	00000005 _ZL13pstrUsageStop
040243ac l     O .rwdata	00000007 _ZL15pstrUsageRewind
0401dfbc l     O .rodata	00000009 _ZL20pstrUsageFastForward
040243b4 l     O .rwdata	00000005 _ZL13pstrUsagePlay
040243bc l     O .rwdata	00000006 _ZL14pstrUsagePause
040243c4 l     O .rwdata	00000004 _ZL15pstrUsageRecord
040243c8 l     O .rwdata	00000006 _ZL14pstrUsageError
0401dfc8 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
0401dfd8 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
0401dfec l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
040243d0 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
0401e004 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
0401e010 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
0401e020 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
040243d8 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
0401e030 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
0401e040 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
0401e054 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
0401e068 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
0401e07c l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
0401e090 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
040243e0 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
0401e0a0 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
0401e0ac l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
040243e8 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
0401e0b8 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
0401e0c4 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
040243f0 l     O .rwdata	00000006 _ZL14pstrUsagePhone
0401e0d4 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
0401e0e0 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
040243f8 l     O .rwdata	00000008 _ZL16pstrUsageHandset
04024400 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
0401e0ec l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
0401e0f8 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
04024408 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
04024410 l     O .rwdata	00000006 _ZL14pstrUsageFlash
04024418 l     O .rwdata	00000008 _ZL16pstrUsageFeature
04024420 l     O .rwdata	00000007 _ZL15pstrUsageRedial
0401e104 l     O .rodata	00000009 _ZL17pstrUsageTransfer
04024428 l     O .rwdata	00000005 _ZL13pstrUsageDrop
04024430 l     O .rwdata	00000005 _ZL13pstrUsagePark
0401e110 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
0401e11c l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
04024438 l     O .rwdata	00000005 _ZL13pstrUsageLine
0401e128 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
0401e134 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
0401e140 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
0401e14c l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
0401e158 l     O .rodata	0000000a _ZL17pstrUsageCallerID
04024440 l     O .rwdata	00000005 _ZL13pstrUsageSend
0401e164 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
0401e170 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
0401e17c l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
0401e188 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
0401e194 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
0401e1a0 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
04024448 l     O .rwdata	00000004 _ZL16pstrUsageMessage
0401e1b0 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
0401e1c0 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
0401e1d4 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
0401e1e8 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
0401e1fc l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
0401e210 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
0401e220 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
0401e230 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
0401e244 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
0401e254 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
0401e264 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
0401e274 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
0401e280 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
0401e28c l     O .rodata	0000000a _ZL17pstrUsageTonesOff
0401e298 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0402444c l     O .rwdata	00000007 _ZL15pstrUsageRinger
04024454 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
04024458 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0402445c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
04024460 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
04024464 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
04024468 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0402446c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
04024470 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
04024474 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
04024478 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0402447c l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
04024480 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
04024484 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
04024488 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0402448c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
04024490 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
0401e2ac l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
0401e2bc l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
0401e2c8 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
0401e2d4 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
04024494 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
04024498 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
040244a0 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
040244a8 l     O .rwdata	00000006 _ZL14pstrUsageReset
040244b0 l     O .rwdata	00000006 _ZL14pstrUsageSleep
0401e2e0 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
0401e2ec l     O .rodata	0000000b _ZL18pstrUsageSleepMode
040244b8 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
0401e2f8 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
040244c0 l     O .rwdata	00000005 _ZL13pstrUsageMenu
0401e304 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
040244c8 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
0401e310 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
0401e31c l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
0401e328 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
0401e334 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
0401e340 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
0401e350 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
0401e360 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
0401e36c l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
0401e378 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
040244d0 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
0401e388 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
0401e398 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
040244d8 l     O .rwdata	00000006 _ZL14pstrUsageStill
040244e0 l     O .rwdata	00000004 _ZL18pstrUsageSelection
0401e3a4 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
0401e3b0 l     O .rodata	0000000a _ZL17pstrUsageModeStep
0401e3bc l     O .rodata	0000000c _ZL19pstrUsageRecallLast
0401e3c8 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
0401e3d8 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
040244e4 l     O .rwdata	00000008 _ZL16pstrUsageChannel
040244ec l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
0401e3e4 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
0401e3f4 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
0401e400 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
0401e40c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
0401e418 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
0401e424 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
0401e430 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
0401e43c l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
0401e44c l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
0401e458 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
0401e464 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
0401e470 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
040244f4 l     O .rwdata	00000005 _ZL13pstrUsageQuit
040244fc l     O .rwdata	00000005 _ZL13pstrUsageHelp
0401e480 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
0401e490 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
0401e49c l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
0401e4a8 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
0401e4b8 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
0401e4c8 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
04024504 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0402450c l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
0401e4d8 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
04024514 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0402451c l     O .rwdata	00000005 _ZL13pstrUsageOnce
04024524 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0402452c l     O .rwdata	00000007 _ZL15pstrUsageWeekly
04024534 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
0401e4e4 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
0401e4f0 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0402453c l     O .rwdata	00000006 _ZL14pstrUsageEject
04024544 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
0401e4fc l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
0401e508 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
0401e514 l     O .rodata	00000009 _ZL17pstrUsageTracking
0401e520 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
0401e52c l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0402454c l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
0401e538 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
04024554 l     O .rwdata	00000005 _ZL13pstrUsageMark
0401e544 l     O .rodata	00000009 _ZL18pstrUsageClearMark
0401e550 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
0401e55c l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
0401e568 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
0401e578 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
0401e58c l     O .rodata	0000000e _ZL21pstrUsageCounterReset
0401e59c l     O .rodata	0000000d _ZL20pstrUsageShowCounter
0401e5ac l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
0401e5b8 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
0401e5c4 l     O .rodata	0000000b _ZL18pstrUsageStopEject
0401e5d0 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
0401e5dc l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0402455c l     O .rwdata	00000004 _ZL15pstrUsageVolume
04024560 l     O .rwdata	00000008 _ZL16pstrUsageBalance
04024568 l     O .rwdata	00000005 _ZL13pstrUsageBass
04024570 l     O .rwdata	00000007 _ZL15pstrUsageTreble
0401e5e8 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
0401e5f4 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
04024578 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
04024580 l     O .rwdata	00000004 _ZL12pstrUsageMPX
04024584 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0402458c l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
04024594 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
0401e600 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
0401e60c l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
0401e618 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
0401e624 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0402459c l     O .rwdata	00000005 _ZL13pstrUsageSlow
0401e630 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
0401e63c l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
0401e648 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
0401e654 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
0401e664 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
0401e674 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
0401e680 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
0401e68c l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
0401e698 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
040245a4 l     O .rwdata	00000005 _ZL18pstrUsageProximity
040245ac l     O .rwdata	00000007 _ZL15pstrUsageMotion
0401e6a4 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
0401e6b0 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
040245b4 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
0401e6bc l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
0401e6cc l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
0401e6dc l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
0401e6e8 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
0401e6f4 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
0401e700 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
040245bc l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
040245c4 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
0401e70c l     O .rodata	00000009 _ZL21pstrUsageChannelRight
0401e718 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
0401e724 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
0401e730 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
040245cc l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
0401e740 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
0401e74c l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
040245d4 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
040245dc l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
040245e4 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
0401e75c l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
0401e768 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
0401e774 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
0401e780 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
0401e78c l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
0401e79c l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
0401e7b0 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
0401e7bc l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
0401e7d0 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
0401e7e0 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
0401e7ec l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
0401e7fc l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
0401e80c l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
0401e81c l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
0401e828 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
0401e838 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
0401e844 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
0401e854 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
0401e864 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
0401e874 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
0401e884 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
0401e898 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
040245ec l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
0401e8a8 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
0401e8bc l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
0401e8d0 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
0401e8e0 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
0401e8f0 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
0401e900 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
0401e90c l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
0401e918 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
0401e924 l     O .rodata	00000009 _ZL16pstrUsageALLogon
0401e930 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
0401e93c l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
0401e94c l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
0401e964 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
0401e970 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
0401e97c l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
0401e988 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
0401e994 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
0401e9a0 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
0401e9ac l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
0401e9c0 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
040245f4 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
0401e9cc l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
040245fc l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
0401e9d8 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
0401e9e4 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
0401e9f4 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
0401ea00 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
0401ea10 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
0401ea20 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
0401ea30 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
0401ea3c l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
0401ea48 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
0401ea54 l     O .rodata	00000009 _ZL16pstrUsageALClock
0401ea60 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
0401ea70 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
0401ea7c l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
0401ea88 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
0401ea94 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
0401eaa0 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
0401eab4 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
0401eac4 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
0401ead0 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
0401eae4 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
0401eaf0 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
0401eb00 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
0401eb14 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
0401eb28 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
0401eb3c l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
0401eb4c l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
0401eb64 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
0401eb78 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
0401eb88 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
0401eb98 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
04024604 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0402460c l     O .rwdata	00000008 _ZL15pstrUsageACOpen
0401ebac l     O .rodata	00000009 _ZL16pstrUsageACClose
04024614 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0402461c l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
04024624 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0402462c l     O .rwdata	00000008 _ZL15pstrUsageACSave
0401ebb8 l     O .rodata	00000009 _ZL16pstrUsageACPrint
04024634 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0402463c l     O .rwdata	00000008 _ZL15pstrUsageACUndo
04024644 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0402464c l     O .rwdata	00000007 _ZL14pstrUsageACCut
0401ebc4 l     O .rodata	00000009 _ZL16pstrUsageACPaste
0401ebd0 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
04024654 l     O .rwdata	00000008 _ZL15pstrUsageACFind
0401ebdc l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
0401ebec l     O .rodata	0000000a _ZL17pstrUsageACSearch
0402465c l     O .rwdata	00000008 _ZL15pstrUsageACGoto
04024664 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0402466c l     O .rwdata	00000008 _ZL15pstrUsageACBack
04024674 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0402467c l     O .rwdata	00000008 _ZL15pstrUsageACStop
0401ebf8 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
0401ec04 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
0401ec14 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
0401ec24 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
04024684 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
0401ec30 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
0401ec3c l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
0401ec48 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0402468c l     O .rwdata	00000008 _ZL15pstrUsageACZoom
0401ec54 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
0401ec60 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
0401ec70 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
0401ec7c l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
0401ec8c l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
0401ec9c l     O .rodata	0000000a _ZL17pstrUsageACScroll
0401eca8 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
0401ecb4 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
04024694 l     O .rwdata	00000007 _ZL14pstrUsageACPan
0401ecc4 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
0401ecd0 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
0401ece0 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0402469c l     O .rwdata	00000008 _ZL17pstrUsageACFormat
040246a4 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
040246ac l     O .rwdata	00000008 _ZL15pstrUsageACBold
040246b4 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
0401ecf0 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
0401ecfc l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
040246bc l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
0401ed08 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
0401ed14 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
0401ed20 l     O .rodata	0000000a _ZL17pstrUsageACRotate
0401ed2c l     O .rodata	0000000a _ZL17pstrUsageACResize
0401ed38 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
0401ed44 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
0401ed50 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
0401ed5c l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
0401ed68 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
0401ed74 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
0401ed80 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
0401ed8c l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
0401ed9c l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
0401edac l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
0401edbc l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
0401edcc l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
0401edd8 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
0401ede8 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
0401edf4 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
0401ee04 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
0401ee14 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
0401ee24 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
0401ee30 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
0401ee3c l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
0401ee48 l     O .rodata	0000000b _ZL18pstrUsageACPromote
0401ee54 l     O .rodata	0000000a _ZL17pstrUsageACDemote
040246c4 l     O .rwdata	00000007 _ZL14pstrUsageACYes
040246cc l     O .rwdata	00000006 _ZL13pstrUsageACNo
0401ee60 l     O .rodata	0000000a _ZL17pstrUsageACCancel
040246d4 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
040246dc l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
0401ee6c l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
040246e4 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
0401ee78 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
0401ee88 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
0401ee94 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
0401eea4 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
0401eeb4 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
0401eec4 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
040246ec l     O .rwdata	00000007 _ZL17pstrUsageACDelete
040246f4 l     O .rwdata	00000008 _ZL15pstrUsageACLock
0401eed0 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
040246fc l     O .rwdata	00000008 _ZL18pstrUsageACProtect
0401eedc l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
0401eee8 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
0401eef8 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
0401ef04 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
0401ef14 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
0401ef20 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
0401ef2c l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
0401ef38 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
0401ef44 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
0401ef50 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
0401ef5c l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
04024704 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0402470c l     O .rwdata	00000008 _ZL15pstrUsageACSort
0401ef68 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
0401ef74 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
04024714 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
0401ef84 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
0401ef90 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
0401ef9c l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
0401efac l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
0401efbc l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
0401efc8 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
0401efd4 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
0401efe0 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0402471c l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
0401efec l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
0401eff8 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
0401f004 l     O .rodata	00000009 _ZL16pstrUsageACReply
0401f010 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
0401f020 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
04024724 l     O .rwdata	00000007 _ZL15pstrUsageACSend
0401f02c l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0402472c l     O .rwdata	00000008 _ZL17pstrUsageACUpload
04024734 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
0401f038 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
0401f044 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
0401f050 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
0401f05c l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
0401f068 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
0401f074 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
0401f080 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
0401f08c l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
0401f098 l     O .rodata	0000000a _ZL17pstrUsageACRename
0401f0a4 l     O .rodata	00000009 _ZL16pstrUsageACMerge
0401f0b0 l     O .rodata	00000009 _ZL16pstrUsageACSplit
0401f0bc l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
0401f0c8 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
0401f0d4 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0402473c l     O .rwdata	00000004 _ZL12pstrUsagePen
0401f0e0 l     O .rodata	0000000a _ZL17pstrUsageLightPen
0401f0ec l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
0401f0f8 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
0401f104 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
0401f110 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
04024740 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
0401f120 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
04024748 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
0401f12c l     O .rodata	00000009 _ZL17pstrUsageArmature
0401f138 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
0401f14c l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
04024750 l     O .rwdata	00000007 _ZL15pstrUsageStylus
04024758 l     O .rwdata	00000005 _ZL13pstrUsagePuck
04024760 l     O .rwdata	00000007 _ZL15pstrUsageFinger
0401f15c l     O .rodata	0000000a _ZL20pstrUsageTipPressure
0401f168 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
0401f174 l     O .rodata	00000009 _ZL16pstrUsageInRange
04024768 l     O .rwdata	00000006 _ZL14pstrUsageTouch
04024770 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
04024778 l     O .rwdata	00000004 _ZL12pstrUsageTap
0402477c l     O .rwdata	00000005 _ZL16pstrUsageQuality
0401f180 l     O .rodata	0000000b _ZL18pstrUsageDataValid
0401f18c l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
0401f19c l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
0401f1ac l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
04024784 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0402478c l     O .rwdata	00000007 _ZL14pstrUsageXTilt
04024794 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0402479c l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
0401f1bc l     O .rodata	00000009 _ZL17pstrUsageAltitude
040247a4 l     O .rwdata	00000006 _ZL14pstrUsageTwist
040247ac l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
0401f1c8 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
040247b4 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
040247bc l     O .rwdata	00000007 _ZL15pstrUsageEraser
0401f1d4 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
0401f1e0 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
0401f1f0 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
0401f1fc l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
0401f20c l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
0401f218 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
0401f228 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
0401f234 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
0401f244 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
0401f250 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
0401f260 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
0401f270 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
0401f27c l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
0401f288 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
0401f294 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
0401f2a0 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
0401f2ac l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
0401f2b8 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
0401f2c4 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
0401f2d4 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
0401f2e4 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
040247c4 l     O .rwdata	00000004 _ZL12pstrUsageRow
040247c8 l     O .rwdata	00000004 _ZL15pstrUsageColumn
040247cc l     O .rwdata	00000005 _ZL13pstrUsageRows
040247d4 l     O .rwdata	00000005 _ZL16pstrUsageColumns
0401f2f0 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
0401f2fc l     O .rodata	00000009 _ZL19pstrUsageCursorMode
0401f308 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
0401f314 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
040247dc l     O .rwdata	00000008 _ZL19pstrUsageFontReport
0401f320 l     O .rodata	00000009 _ZL17pstrUsageFontData
0401f32c l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
0401f338 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
0401f344 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
0401f354 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
0401f364 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
0401f374 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
0401f380 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
0401f38c l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
0401f398 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
0401f3a4 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
0401f3b0 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
0401f3bc l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
0401f3c8 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
0401f3d4 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
0401f3e0 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
0401f3f0 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
0401f400 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
0401f410 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
0401f41c l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
0401f428 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
0401f438 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
040247e4 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
0401f444 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
0401f454 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
0401f464 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
0401f470 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
0401f47c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
0401f48c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
0401f49c l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
0401f4ac l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
0401f4bc l     O .rodata	0000000a _ZL17pstrUsageBlitData
0401f4c8 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
0401f4d4 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
0401f4e0 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
0401f4f0 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
0401f500 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
0401f510 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
0401f520 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
040247ec l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
040247f4 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
0401f530 l     O .rodata	0000000b _ZL18pstrUsageClipStore
040247fc l     O .rwdata	00000007 _ZL15pstrUsageUpdate
04024804 l     O .rwdata	00000005 _ZL13pstrUsageNext
0402480c l     O .rwdata	00000005 _ZL13pstrUsageSave
04024814 l     O .rwdata	00000006 _ZL14pstrUsagePrint
0401f53c l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0402481c l     O .rwdata	00000005 _ZL13pstrUsageCine
0401f548 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
04024824 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0402482c l     O .rwdata	00000006 _ZL14pstrUsageDepth
0401f554 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
0401f564 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
0401f574 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
0401f584 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
0401f590 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
0401f59c l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
0401f5b0 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
0401f5c4 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
0401f5d8 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
0401f5ec l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
0401f5fc l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
0401f60c l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
0401f618 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
0401f624 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
0401f634 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 usbhost.cpp
04024832 l     O .rwdata	00000001 _ZL9SPI_MODE0
04024833 l     O .rwdata	00000001 _ZL9SPI_MODE1
04024834 l     O .rwdata	00000001 _ZL9SPI_MODE2
04024835 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 main.cpp
04024838 l     O .rwdata	00000001 _ZL9SPI_MODE0
04024839 l     O .rwdata	00000001 _ZL9SPI_MODE1
0402483a l     O .rwdata	00000001 _ZL9SPI_MODE2
0402483b l     O .rwdata	00000001 _ZL9SPI_MODE3
0402483c l     O .rwdata	00000002 _ZL9pstrSpace
04024840 l     O .rwdata	00000003 _ZL8pstrCRLF
04024844 l     O .rwdata	00000002 _ZL13pstrSingleTab
04024848 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0402484c l     O .rwdata	00000004 _ZL13pstrTripleTab
04024850 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
0401f714 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
0401f728 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
0401f734 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
0401f740 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
0401f74c l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
0401f758 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
0401f768 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
04024858 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
04024860 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
04024868 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
04024870 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
0401f774 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
0401f780 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
04024874 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
04024878 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
0401f78c l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
0401f79c l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
04024880 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
04024888 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
0401f7ac l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
04024890 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
0401f7bc l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
04024898 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
0401f7d4 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0402489c l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
0401f7e0 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
0401f7ec l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
040248a4 l     O .rwdata	00000008 _ZL16pstrUsagePointer
040248ac l     O .rwdata	00000006 _ZL14pstrUsageMouse
0401f7f8 l     O .rodata	00000009 _ZL17pstrUsageJoystick
0401f804 l     O .rodata	00000009 _ZL16pstrUsageGamePad
040248b4 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
040248bc l     O .rwdata	00000007 _ZL15pstrUsageKeypad
0401f810 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
0401f820 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
040248c4 l     O .rwdata	00000002 _ZL10pstrUsageX
040248c8 l     O .rwdata	00000002 _ZL10pstrUsageY
040248cc l     O .rwdata	00000002 _ZL10pstrUsageZ
040248d0 l     O .rwdata	00000003 _ZL11pstrUsageRx
040248d4 l     O .rwdata	00000003 _ZL11pstrUsageRy
040248d8 l     O .rwdata	00000003 _ZL11pstrUsageRz
040248dc l     O .rwdata	00000007 _ZL15pstrUsageSlider
040248e4 l     O .rwdata	00000005 _ZL13pstrUsageDial
040248ec l     O .rwdata	00000006 _ZL14pstrUsageWheel
0401f834 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
0401f840 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
0401f84c l     O .rodata	0000000b _ZL18pstrUsageByteCount
0401f858 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
040248f4 l     O .rwdata	00000006 _ZL14pstrUsageStart
040248fc l     O .rwdata	00000004 _ZL15pstrUsageSelect
04024900 l     O .rwdata	00000003 _ZL11pstrUsageVx
04024904 l     O .rwdata	00000003 _ZL11pstrUsageVy
04024908 l     O .rwdata	00000003 _ZL11pstrUsageVz
0402490c l     O .rwdata	00000005 _ZL13pstrUsageVbrx
04024914 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0402491c l     O .rwdata	00000005 _ZL13pstrUsageVbrz
04024924 l     O .rwdata	00000004 _ZL12pstrUsageVno
0401f868 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
0401f878 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
0401f884 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
0401f890 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
0401f8a0 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
0401f8ac l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
0401f8b8 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
0401f8cc l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
0401f8dc l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
0401f8ec l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
0401f8fc l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
0401f90c l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
0401f91c l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
0401f92c l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
0401f93c l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
0401f948 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
0401f958 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
0401f96c l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
0401f980 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
0401f98c l     O .rodata	0000000b _ZL17pstrUsageDPadDown
0401f998 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
0401f9a4 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
0401f9b0 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
0401f9bc l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
0401f9c8 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
0401f9d4 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
0401f9e0 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
0401f9ec l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
0401f9f8 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
0401fa04 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
0401fa14 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
0401fa20 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
0401fa30 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
0401fa40 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
0401fa50 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
0401fa60 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
0401fa70 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
0401fa88 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
0401faa0 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
0401fab8 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
0401fac8 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
0401fad8 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
0401fae8 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
0401faf8 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
0401fb08 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
0401fb18 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
0401fb28 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
0401fb38 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
0401fb48 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
0401fb58 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
0401fb70 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
0401fb80 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
0401fb94 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
0401fba4 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
0401fbb0 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
0401fbbc l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
0401fbc8 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
04024928 l     O .rwdata	00000008 _ZL16pstrUsageAileron
0401fbd4 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
0401fbe4 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
0401fbf8 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
0401fc0c l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
0401fc1c l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
0401fc2c l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
0401fc38 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
0401fc4c l     O .rodata	00000009 _ZL17pstrUsageElevator
0401fc58 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
04024930 l     O .rwdata	00000007 _ZL15pstrUsageRudder
0401fc68 l     O .rodata	00000009 _ZL17pstrUsageThrottle
0401fc74 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
0401fc80 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
0401fc90 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
0401fca0 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
04024938 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
0401fcac l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
0401fcb8 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
0401fcc4 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
04024940 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
04024948 l     O .rwdata	00000006 _ZL14pstrUsageBrake
04024950 l     O .rwdata	00000007 _ZL15pstrUsageClutch
04024958 l     O .rwdata	00000008 _ZL16pstrUsageShifter
0401fcd0 l     O .rodata	00000009 _ZL17pstrUsageSteering
0401fcdc l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
0401fce8 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
0401fcf4 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
04024960 l     O .rwdata	00000008 _ZL16pstrUsageBallast
0401fd00 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
0401fd10 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
0401fd1c l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
0401fd28 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
04024968 l     O .rwdata	00000005 _ZL13pstrUsageBelt
0401fd34 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
04024970 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
04024978 l     O .rwdata	00000006 _ZL14pstrUsageGlove
0401fd40 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
0401fd4c l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
0401fd58 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
0401fd64 l     O .rodata	0000000b _ZL19pstrUsageOculometer
04024980 l     O .rwdata	00000005 _ZL13pstrUsageVest
0401fd70 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
0401fd7c l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
0401fd88 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
0401fd98 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
0401fda8 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
0401fdb4 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
0401fdc0 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
04024988 l     O .rwdata	00000004 _ZL12pstrUsageOar
0402498c l     O .rwdata	00000006 _ZL14pstrUsageSlope
04024994 l     O .rwdata	00000005 _ZL13pstrUsageRate
0401fdcc l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
0401fdd8 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
0401fde8 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
0401fdf8 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
0401fe08 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
0401fe14 l     O .rodata	0000000b _ZL18pstrUsageStickType
0401fe20 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0402499c l     O .rwdata	00000007 _ZL15pstrUsagePutter
040249a4 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
040249ac l     O .rwdata	00000007 _ZL14pstrUsage2Iron
040249b4 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
040249bc l     O .rwdata	00000007 _ZL14pstrUsage4Iron
040249c4 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
040249cc l     O .rwdata	00000007 _ZL14pstrUsage6Iron
040249d4 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
040249dc l     O .rwdata	00000007 _ZL14pstrUsage8Iron
040249e4 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
040249ec l     O .rwdata	00000008 _ZL15pstrUsage10Iron
040249f4 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
0401fe2c l     O .rodata	0000000b _ZL18pstrUsageSandWedge
0401fe38 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
0401fe44 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
040249fc l     O .rwdata	00000007 _ZL14pstrUsage1Wood
04024a04 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
04024a0c l     O .rwdata	00000007 _ZL14pstrUsage5Wood
04024a14 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
04024a1c l     O .rwdata	00000007 _ZL14pstrUsage9Wood
0401fe50 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
0401fe60 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
04024a24 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
04024a2c l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
0401fe6c l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
0401fe7c l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
0401fe8c l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
0401fe9c l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
0401feac l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
0401febc l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
0401fecc l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
0401fedc l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
0401feec l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
04024a30 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
0401fefc l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
04024a38 l     O .rwdata	00000005 _ZL13pstrUsageBump
0401ff0c l     O .rodata	00000009 _ZL16pstrUsageNewGame
0401ff18 l     O .rodata	0000000b _ZL18pstrUsageShootBall
04024a40 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
0401ff24 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
0401ff30 l     O .rodata	00000009 _ZL16pstrUsageGunClip
04024a48 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
0401ff3c l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
0401ff4c l     O .rodata	0000000a _ZL17pstrUsageGunBurst
0401ff58 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
0401ff64 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
0401ff70 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
0401ff84 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
0401ff94 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
0401ffa4 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
0401ffb0 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
0401ffbc l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
0401ffd4 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
0401ffe8 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
04020000 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
04020014 l     O .rodata	00000009 _ZL16pstrUsageNumLock
04020020 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
0402002c l     O .rodata	0000000c _ZL19pstrUsageScrollLock
04024a50 l     O .rwdata	00000008 _ZL16pstrUsageCompose
04024a58 l     O .rwdata	00000005 _ZL13pstrUsageKana
04024a60 l     O .rwdata	00000004 _ZL14pstrUsagePower
04024a64 l     O .rwdata	00000006 _ZL14pstrUsageShift
04024a6c l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
04024a70 l     O .rwdata	00000005 _ZL13pstrUsageMute
04020038 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
04020044 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
04020054 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
04024a78 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
04020064 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
04020074 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
04024a80 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
04024a88 l     O .rwdata	00000007 _ZL15pstrUsageStereo
04020080 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
04020094 l     O .rodata	00000009 _ZL17pstrUsageSpinning
04024a90 l     O .rwdata	00000004 _ZL12pstrUsageCAV
04024a94 l     O .rwdata	00000004 _ZL12pstrUsageCLV
040200a0 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
040200b4 l     O .rodata	00000009 _ZL16pstrUsageOffHook
04024a98 l     O .rwdata	00000005 _ZL13pstrUsageRing
040200c0 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
040200cc l     O .rodata	0000000a _ZL17pstrUsageDataMode
04024aa0 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
04024aa8 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
04024ab0 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
04024ab8 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
040200d8 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
04024ac0 l     O .rwdata	00000005 _ZL13pstrUsageHold
04024ac8 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
040200e4 l     O .rodata	00000009 _ZL17pstrUsageCoverage
040200f0 l     O .rodata	0000000b _ZL18pstrUsageNightMode
040200fc l     O .rodata	0000000b _ZL18pstrUsageSendCalls
04020108 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
04024acc l     O .rwdata	00000005 _ZL19pstrUsageConference
04020114 l     O .rodata	00000009 _ZL16pstrUsageStandBy
04024ad4 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
04024adc l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
04024ae4 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
04020120 l     O .rodata	00000009 _ZL16pstrUsageOffLine
04024aec l     O .rwdata	00000005 _ZL13pstrUsageBusy
04024af4 l     O .rwdata	00000006 _ZL14pstrUsageReady
0402012c l     O .rodata	0000000a _ZL17pstrUsagePaperOut
04020138 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
04024afc l     O .rwdata	00000007 _ZL15pstrUsageRemote
04024b04 l     O .rwdata	00000004 _ZL16pstrUsageForward
04024b08 l     O .rwdata	00000004 _ZL16pstrUsageReverse
04024b0c l     O .rwdata	00000005 _ZL13pstrUsageStop
04024b14 l     O .rwdata	00000007 _ZL15pstrUsageRewind
04020144 l     O .rodata	00000009 _ZL20pstrUsageFastForward
04024b1c l     O .rwdata	00000005 _ZL13pstrUsagePlay
04024b24 l     O .rwdata	00000006 _ZL14pstrUsagePause
04024b2c l     O .rwdata	00000004 _ZL15pstrUsageRecord
04024b30 l     O .rwdata	00000006 _ZL14pstrUsageError
04020150 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
04020160 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
04020174 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
04024b38 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
0402018c l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
04020198 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
040201a8 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
04024b40 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
040201b8 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
040201c8 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
040201dc l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
040201f0 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
04020204 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
04020218 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
04024b48 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
04020228 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
04020234 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
04024b50 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
04020240 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
0402024c l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
04024b58 l     O .rwdata	00000006 _ZL14pstrUsagePhone
0402025c l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
04020268 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
04024b60 l     O .rwdata	00000008 _ZL16pstrUsageHandset
04024b68 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
04020274 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
04020280 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
04024b70 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
04024b78 l     O .rwdata	00000006 _ZL14pstrUsageFlash
04024b80 l     O .rwdata	00000008 _ZL16pstrUsageFeature
04024b88 l     O .rwdata	00000007 _ZL15pstrUsageRedial
0402028c l     O .rodata	00000009 _ZL17pstrUsageTransfer
04024b90 l     O .rwdata	00000005 _ZL13pstrUsageDrop
04024b98 l     O .rwdata	00000005 _ZL13pstrUsagePark
04020298 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
040202a4 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
04024ba0 l     O .rwdata	00000005 _ZL13pstrUsageLine
040202b0 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
040202bc l     O .rodata	0000000a _ZL19pstrUsageRingEnable
040202c8 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
040202d4 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
040202e0 l     O .rodata	0000000a _ZL17pstrUsageCallerID
04024ba8 l     O .rwdata	00000005 _ZL13pstrUsageSend
040202ec l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
040202f8 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
04020304 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
04020310 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
0402031c l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
04020328 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
04024bb0 l     O .rwdata	00000004 _ZL16pstrUsageMessage
04020338 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
04020348 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
0402035c l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
04020370 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
04020384 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
04020398 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
040203a8 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
040203b8 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
040203cc l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
040203dc l     O .rodata	0000000d _ZL20pstrUsageReorderTone
040203ec l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
040203fc l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
04020408 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
04020414 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
04020420 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
04024bb4 l     O .rwdata	00000007 _ZL15pstrUsageRinger
04024bbc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
04024bc0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
04024bc4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
04024bc8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
04024bcc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
04024bd0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
04024bd4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
04024bd8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
04024bdc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
04024be0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
04024be4 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
04024be8 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
04024bec l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
04024bf0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
04024bf4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
04024bf8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
04020434 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
04020444 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
04020450 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
0402045c l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
04024bfc l     O .rwdata	00000004 _ZL15pstrUsagePlus10
04024c00 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
04024c08 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
04024c10 l     O .rwdata	00000006 _ZL14pstrUsageReset
04024c18 l     O .rwdata	00000006 _ZL14pstrUsageSleep
04020468 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
04020474 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
04024c20 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
04020480 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
04024c28 l     O .rwdata	00000005 _ZL13pstrUsageMenu
0402048c l     O .rodata	0000000a _ZL17pstrUsageMenuPick
04024c30 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
04020498 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
040204a4 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
040204b0 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
040204bc l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
040204c8 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
040204d8 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
040204e8 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
040204f4 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
04020500 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
04024c38 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
04020510 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
04020520 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
04024c40 l     O .rwdata	00000006 _ZL14pstrUsageStill
04024c48 l     O .rwdata	00000004 _ZL18pstrUsageSelection
0402052c l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
04020538 l     O .rodata	0000000a _ZL17pstrUsageModeStep
04020544 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
04020550 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
04020560 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
04024c4c l     O .rwdata	00000008 _ZL16pstrUsageChannel
04024c54 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
0402056c l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
0402057c l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
04020588 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
04020594 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
040205a0 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
040205ac l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
040205b8 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
040205c4 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
040205d4 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
040205e0 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
040205ec l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
040205f8 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
04024c5c l     O .rwdata	00000005 _ZL13pstrUsageQuit
04024c64 l     O .rwdata	00000005 _ZL13pstrUsageHelp
04020608 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
04020618 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
04020624 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
04020630 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
04020640 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
04020650 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
04024c6c l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
04024c74 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
04020660 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
04024c7c l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
04024c84 l     O .rwdata	00000005 _ZL13pstrUsageOnce
04024c8c l     O .rwdata	00000006 _ZL14pstrUsageDaily
04024c94 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
04024c9c l     O .rwdata	00000008 _ZL16pstrUsageMonthly
0402066c l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
04020678 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
04024ca4 l     O .rwdata	00000006 _ZL14pstrUsageEject
04024cac l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
04020684 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
04020690 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
0402069c l     O .rodata	00000009 _ZL17pstrUsageTracking
040206a8 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
040206b4 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
04024cb4 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
040206c0 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
04024cbc l     O .rwdata	00000005 _ZL13pstrUsageMark
040206cc l     O .rodata	00000009 _ZL18pstrUsageClearMark
040206d8 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
040206e4 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
040206f0 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
04020700 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
04020714 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
04020724 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
04020734 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
04020740 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
0402074c l     O .rodata	0000000b _ZL18pstrUsageStopEject
04020758 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
04020764 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
04024cc4 l     O .rwdata	00000004 _ZL15pstrUsageVolume
04024cc8 l     O .rwdata	00000008 _ZL16pstrUsageBalance
04024cd0 l     O .rwdata	00000005 _ZL13pstrUsageBass
04024cd8 l     O .rwdata	00000007 _ZL15pstrUsageTreble
04020770 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
0402077c l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
04024ce0 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
04024ce8 l     O .rwdata	00000004 _ZL12pstrUsageMPX
04024cec l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
04024cf4 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
04024cfc l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
04020788 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
04020794 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
040207a0 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
040207ac l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
04024d04 l     O .rwdata	00000005 _ZL13pstrUsageSlow
040207b8 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
040207c4 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
040207d0 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
040207dc l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
040207ec l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
040207fc l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
04020808 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
04020814 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
04020820 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
04024d0c l     O .rwdata	00000005 _ZL18pstrUsageProximity
04024d14 l     O .rwdata	00000007 _ZL15pstrUsageMotion
0402082c l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
04020838 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
04024d1c l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
04020844 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
04020854 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
04020864 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
04020870 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
0402087c l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
04020888 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
04024d24 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
04024d2c l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
04020894 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
040208a0 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
040208ac l     O .rodata	00000009 _ZL21pstrUsageChannelFront
040208b8 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
04024d34 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
040208c8 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
040208d4 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
04024d3c l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
04024d44 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
04024d4c l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
040208e4 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
040208f0 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
040208fc l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
04020908 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
04020914 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
04020924 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
04020938 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
04020944 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
04020958 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
04020968 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
04020974 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
04020984 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
04020994 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
040209a4 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
040209b0 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
040209c0 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
040209cc l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
040209dc l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
040209ec l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
040209fc l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
04020a0c l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
04020a20 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
04024d54 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
04020a30 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
04020a44 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
04020a58 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
04020a68 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
04020a78 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
04020a88 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
04020a94 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
04020aa0 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
04020aac l     O .rodata	00000009 _ZL16pstrUsageALLogon
04020ab8 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
04020ac4 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
04020ad4 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
04020aec l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
04020af8 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
04020b04 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
04020b10 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
04020b1c l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
04020b28 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
04020b34 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
04020b48 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
04024d5c l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
04020b54 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
04024d64 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
04020b60 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
04020b6c l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
04020b7c l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
04020b88 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
04020b98 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
04020ba8 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
04020bb8 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
04020bc4 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
04020bd0 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
04020bdc l     O .rodata	00000009 _ZL16pstrUsageALClock
04020be8 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
04020bf8 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
04020c04 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
04020c10 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
04020c1c l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
04020c28 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
04020c3c l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
04020c4c l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
04020c58 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
04020c6c l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
04020c78 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
04020c88 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
04020c9c l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
04020cb0 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
04020cc4 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
04020cd4 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
04020cec l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
04020d00 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
04020d10 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
04020d20 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
04024d6c l     O .rwdata	00000007 _ZL14pstrUsageACNew
04024d74 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
04020d34 l     O .rodata	00000009 _ZL16pstrUsageACClose
04024d7c l     O .rwdata	00000008 _ZL15pstrUsageACExit
04024d84 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
04024d8c l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
04024d94 l     O .rwdata	00000008 _ZL15pstrUsageACSave
04020d40 l     O .rodata	00000009 _ZL16pstrUsageACPrint
04024d9c l     O .rwdata	00000008 _ZL21pstrUsageACProperties
04024da4 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
04024dac l     O .rwdata	00000008 _ZL15pstrUsageACCopy
04024db4 l     O .rwdata	00000007 _ZL14pstrUsageACCut
04020d4c l     O .rodata	00000009 _ZL16pstrUsageACPaste
04020d58 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
04024dbc l     O .rwdata	00000008 _ZL15pstrUsageACFind
04020d64 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
04020d74 l     O .rodata	0000000a _ZL17pstrUsageACSearch
04024dc4 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
04024dcc l     O .rwdata	00000008 _ZL15pstrUsageACHome
04024dd4 l     O .rwdata	00000008 _ZL15pstrUsageACBack
04024ddc l     O .rwdata	00000007 _ZL18pstrUsageACForward
04024de4 l     O .rwdata	00000008 _ZL15pstrUsageACStop
04020d80 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
04020d8c l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
04020d9c l     O .rodata	0000000d _ZL19pstrUsageACNextLink
04020dac l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
04024dec l     O .rwdata	00000008 _ZL18pstrUsageACHistory
04020db8 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
04020dc4 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
04020dd0 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
04024df4 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
04020ddc l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
04020de8 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
04020df8 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
04020e04 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
04020e14 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
04020e24 l     O .rodata	0000000a _ZL17pstrUsageACScroll
04020e30 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
04020e3c l     O .rodata	0000000d _ZL19pstrUsageACPanRight
04024dfc l     O .rwdata	00000007 _ZL14pstrUsageACPan
04020e4c l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
04020e58 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
04020e68 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
04024e04 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
04024e0c l     O .rwdata	00000008 _ZL15pstrUsageACEdit
04024e14 l     O .rwdata	00000008 _ZL15pstrUsageACBold
04024e1c l     O .rwdata	00000008 _ZL18pstrUsageACItalics
04020e78 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
04020e84 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
04024e24 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
04020e90 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
04020e9c l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
04020ea8 l     O .rodata	0000000a _ZL17pstrUsageACRotate
04020eb4 l     O .rodata	0000000a _ZL17pstrUsageACResize
04020ec0 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
04020ecc l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
04020ed8 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
04020ee4 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
04020ef0 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
04020efc l     O .rodata	0000000b _ZL20pstrUsageACFontColor
04020f08 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
04020f14 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
04020f24 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
04020f34 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
04020f44 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
04020f54 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
04020f60 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
04020f70 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
04020f7c l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
04020f8c l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
04020f9c l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
04020fac l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
04020fb8 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
04020fc4 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
04020fd0 l     O .rodata	0000000b _ZL18pstrUsageACPromote
04020fdc l     O .rodata	0000000a _ZL17pstrUsageACDemote
04024e2c l     O .rwdata	00000007 _ZL14pstrUsageACYes
04024e34 l     O .rwdata	00000006 _ZL13pstrUsageACNo
04020fe8 l     O .rodata	0000000a _ZL17pstrUsageACCancel
04024e3c l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
04024e44 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
04020ff4 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
04024e4c l     O .rwdata	00000008 _ZL17pstrUsageACExpand
04021000 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
04021010 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
0402101c l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
0402102c l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
0402103c l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
0402104c l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
04024e54 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
04024e5c l     O .rwdata	00000008 _ZL15pstrUsageACLock
04021058 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
04024e64 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
04021064 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
04021070 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
04021080 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
0402108c l     O .rodata	0000000d _ZL22pstrUsageACViewComment
0402109c l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
040210a8 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
040210b4 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
040210c0 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
040210cc l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
040210d8 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
040210e4 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
04024e6c l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
04024e74 l     O .rwdata	00000008 _ZL15pstrUsageACSort
040210f0 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
040210fc l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
04024e7c l     O .rwdata	00000008 _ZL17pstrUsageACFilter
0402110c l     O .rodata	0000000b _ZL19pstrUsageACSetClock
04021118 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
04021124 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
04021134 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
04021144 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
04021150 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
0402115c l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
04021168 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
04024e84 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
04021174 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
04021180 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
0402118c l     O .rodata	00000009 _ZL16pstrUsageACReply
04021198 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
040211a8 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
04024e8c l     O .rwdata	00000007 _ZL15pstrUsageACSend
040211b4 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
04024e94 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
04024e9c l     O .rwdata	00000008 _ZL19pstrUsageACDownload
040211c0 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
040211cc l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
040211d8 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
040211e4 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
040211f0 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
040211fc l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
04021208 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
04021214 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
04021220 l     O .rodata	0000000a _ZL17pstrUsageACRename
0402122c l     O .rodata	00000009 _ZL16pstrUsageACMerge
04021238 l     O .rodata	00000009 _ZL16pstrUsageACSplit
04021244 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
04021250 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
0402125c l     O .rodata	0000000a _ZL18pstrUsageDigitizer
04024ea4 l     O .rwdata	00000004 _ZL12pstrUsagePen
04021268 l     O .rodata	0000000a _ZL17pstrUsageLightPen
04021274 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
04021280 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
0402128c l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
04021298 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
04024ea8 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
040212a8 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
04024eb0 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
040212b4 l     O .rodata	00000009 _ZL17pstrUsageArmature
040212c0 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
040212d4 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
04024eb8 l     O .rwdata	00000007 _ZL15pstrUsageStylus
04024ec0 l     O .rwdata	00000005 _ZL13pstrUsagePuck
04024ec8 l     O .rwdata	00000007 _ZL15pstrUsageFinger
040212e4 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
040212f0 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
040212fc l     O .rodata	00000009 _ZL16pstrUsageInRange
04024ed0 l     O .rwdata	00000006 _ZL14pstrUsageTouch
04024ed8 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
04024ee0 l     O .rwdata	00000004 _ZL12pstrUsageTap
04024ee4 l     O .rwdata	00000005 _ZL16pstrUsageQuality
04021308 l     O .rodata	0000000b _ZL18pstrUsageDataValid
04021314 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
04021324 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
04021334 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
04024eec l     O .rwdata	00000007 _ZL15pstrUsageInvert
04024ef4 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
04024efc l     O .rwdata	00000007 _ZL14pstrUsageYTilt
04024f04 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
04021344 l     O .rodata	00000009 _ZL17pstrUsageAltitude
04024f0c l     O .rwdata	00000006 _ZL14pstrUsageTwist
04024f14 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
04021350 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
04024f1c l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
04024f24 l     O .rwdata	00000007 _ZL15pstrUsageEraser
0402135c l     O .rodata	00000009 _ZL19pstrUsageTabletPick
04021368 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
04021378 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
04021384 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
04021394 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
040213a0 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
040213b0 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
040213bc l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
040213cc l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
040213d8 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
040213e8 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
040213f8 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
04021404 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
04021410 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
0402141c l     O .rodata	0000000a _ZL20pstrUsageDisplayData
04021428 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
04021434 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
04021440 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
0402144c l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
0402145c l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
0402146c l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
04024f2c l     O .rwdata	00000004 _ZL12pstrUsageRow
04024f30 l     O .rwdata	00000004 _ZL15pstrUsageColumn
04024f34 l     O .rwdata	00000005 _ZL13pstrUsageRows
04024f3c l     O .rwdata	00000005 _ZL16pstrUsageColumns
04021478 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
04021484 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
04021490 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
0402149c l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
04024f44 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
040214a8 l     O .rodata	00000009 _ZL17pstrUsageFontData
040214b4 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
040214c0 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
040214cc l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
040214dc l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
040214ec l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
040214fc l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
04021508 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
04021514 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
04021520 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
0402152c l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
04021538 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
04021544 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
04021550 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
0402155c l     O .rodata	0000000a _ZL22pstrUsageAttributeData
04021568 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
04021578 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
04021588 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
04021598 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
040215a4 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
040215b0 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
040215c0 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
04024f4c l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
040215cc l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
040215dc l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
040215ec l     O .rodata	00000009 _ZL20pstrUsagePaletteData
040215f8 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
04021604 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
04021614 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
04021624 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
04021634 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
04021644 l     O .rodata	0000000a _ZL17pstrUsageBlitData
04021650 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
0402165c l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
04021668 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
04021678 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
04021688 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
04021698 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
040216a8 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
04024f54 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
04024f5c l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
040216b8 l     O .rodata	0000000b _ZL18pstrUsageClipStore
04024f64 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
04024f6c l     O .rwdata	00000005 _ZL13pstrUsageNext
04024f74 l     O .rwdata	00000005 _ZL13pstrUsageSave
04024f7c l     O .rwdata	00000006 _ZL14pstrUsagePrint
040216c4 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
04024f84 l     O .rwdata	00000005 _ZL13pstrUsageCine
040216d0 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
04024f8c l     O .rwdata	00000006 _ZL14pstrUsageFocus
04024f94 l     O .rwdata	00000006 _ZL14pstrUsageDepth
040216dc l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
040216ec l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
040216fc l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
0402170c l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
04021718 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
04021724 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
04021738 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
0402174c l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
04021760 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
04021774 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
04021784 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
04021794 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
040217a0 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
040217ac l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
040217bc l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
04024f9a l     O .rwdata	00000006 _ZL9XBOX_LEDS
040217ca l     O .rodata	00000024 _ZL12XBOX_BUTTONS
040281f2 l     O .bss	00000002 _ZZ9xbox_loopvE10oldL2Value
040281f4 l     O .bss	00000002 _ZZ9xbox_loopvE10oldR2Value
04007fec l     F .text	00000068 _Z41__static_initialization_and_destruction_0ii
04008054 l     F .text	00000030 _GLOBAL__sub_I_rcode
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 vmi_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
040091dc l     F .text	000000a4 _ZL21size_of_encoded_valueh
04009280 l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
0400948c l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
040094e0 l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
0400956c l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
040096a0 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
04009728 l     F .text	0000022c _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
04009954 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_throw.cc
0400a22c l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
0400a514 l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
0402838c l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
0400a5cc l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
0400a77c l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
040281f8 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0400aa5c l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
04028200 l     O .bss	00000004 fc_static
0400ab74 l     F .text	000000c0 _Unwind_RaiseException_Phase2
0400ac34 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
04021e3c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
04021b92 l     O .rodata	00000010 zeroes.4404
0400e3b0 l     F .text	000000bc __sbprintf
04021ba2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0400e5c0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04010118 l     F .text	00000008 __fp_unlock
0401012c l     F .text	0000019c __sinit.part.1
040102c8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
04022688 l     O .rwdata	00000020 lc_ctype_charset
04022668 l     O .rwdata	00000020 lc_message_charset
040226a8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
04021bd0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
04012d58 l     F .text	000000fc __sprint_r.part.0
04021cf4 l     O .rodata	00000010 zeroes.4349
04014394 l     F .text	000000bc __sbprintf
04021d04 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
040182c0 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_kill.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04024ff8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
040238e8 l     O .rwdata	00000038 i2c_0
04022888 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
04018b38 l     F .text	00000058 alt_avalon_i2c_irq
04018b90 l     F .text	000000dc optional_irq_callback
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04019e24 l     F .text	0000004c altera_avalon_jtag_uart_timeout
04019e70 l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0401a47c l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0401a8b0 l     F .text	0000008c alt_open_fd.constprop.0
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
04028238 g     O .bss	00000004 alt_instruction_exception_handler
0400a6d4 g     F .text	00000028 __cxa_free_exception
0401b320  w    O .rodata	0000000c _ZTV16ConfigDescParserILh0ELh0ELh0ELh0EE
0400baf8 g     F .text	00000018 putchar
04008d30 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
04012364 g     F .text	00000074 _mprec_log10
04004794  w    F .text	0000003c _ZN20MultiByteValueParserC2Ev
0400917c g     F .text	00000018 _ZSt10unexpectedv
04012450 g     F .text	0000008c __any_on
04014aa0 g     F .text	00000054 _isatty_r
04021bdc g     O .rodata	00000028 __mprec_tinytens
04018720 g     F .text	00000060 alt_main
0400bb10 g     F .text	000000c0 _puts_r
04000658 g     F .text	00000058 _ZN3USBC1Ev
040283c4 g     O .bss	00000100 alt_irq
0400a870 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
04006a6c g     F .text	000000f0 _ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR
04014af4 g     F .text	00000060 _lseek_r
0400acf0 g     F .text	00000020 .hidden _Unwind_GetIPInfo
04025010 g       *ABS*	00000000 __flash_rwdata_start
040061fc g     F .text	00000108 _ZN20MultiByteValueParser5ParseEPPhPt
04016bd8 g     F .text	00000088 .hidden __eqdf2
04004794  w    F .text	0000003c _ZN20MultiByteValueParserC1Ev
04002820 g     F .text	00000094 _ZN3USB12getConfDescrEhhthPh
0400a300 g     F .text	00000084 __cxa_rethrow
0400ac7c g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
040091b8 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
0400ace0 g     F .text	00000010 .hidden _Unwind_GetIP
040284c4 g       *ABS*	00000000 __alt_heap_start
0400bedc g     F .text	0000005c _kill_r
0400bab4 g     F .text	0000003c printf
0401b344  w    O .rodata	0000002c _ZTV15USBDeviceConfig
04014bb4 g     F .text	0000009c _wcrtomb_r
0400bca4 g     F .text	00000084 _signal_r
04005f84  w    F .text	00000034 _ZN20KeyboardReportParser7OnKeyUpEhh
04012cf4 g     F .text	0000005c __sseek
04010478 g     F .text	00000010 __sinit
04014450 g     F .text	00000140 __swbuf_r
0400710c g     F .text	000000e4 _ZN8MAX3421e4InitEv
0400a750 g     F .text	0000002c __cxa_free_dependent_exception
04008084 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
04004734  w    F .text	00000060 _ZN16MultiValueBufferC1Ev
04010f4c g     F .text	0000007c _setlocale_r
040218d8  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
040102d0 g     F .text	00000078 __sfmoreglue
04018fa8 g     F .text	0000008c alt_avalon_i2c_rx_read
04018784 g     F .text	00000004 __malloc_unlock
0400a870 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
04008ab8 g     F .text	00000274 _ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
04001f50 g     F .text	00000710 _ZN3USB11ConfiguringEhhb
0400a4f4 g     F .text	00000020 _ZSt18uncaught_exceptionv
04007ef4 g     F .text	000000f8 _Z9print_hexii
04019d50 g     F .text	00000014 alt_avalon_i2c_enabled_ints_get
04001cc0 g     F .text	00000290 _ZN3USB13AttemptConfigEhhhb
040074e0 g     F .text	00000074 _ZN8MAX3421e10IntHandlerEv
040281f0 g     O .bss	00000001 laststate
04008dac g     F .text	00000020 __cxa_deleted_virtual
04018e88 g     F .text	0000004c alt_avalon_i2c_master_config_speed_get
04002c90  w    F .text	0000008c _ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh
04006558 g     F .text	000000a0 _ZN6USBHID14GetReportDescrEtP13USBReadParser
04006f1c g     F .text	00000080 _ZN8MAX3421e6gpioRdEv
040112c8 g     F .text	0000015c memmove
04005ca0  w    F .text	00000028 _ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO
0400a848 g     F .text	00000004 _ZNSt9exceptionD2Ev
04010460 g     F .text	00000018 _cleanup
0401947c g     F .text	000001c4 alt_avalon_i2c_master_transmit_using_interrupts
04011424 g     F .text	000000a8 _Balloc
04003d94 g     F .text	00000008 _ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
04016c60 g     F .text	000000dc .hidden __gtdf2
04003e58 g     F .text	000000f8 _ZN7XBOXONE4PollEv
04021b0c  w    O .rodata	00000014 _ZTVSt13bad_exception
0401ac60 g     F .text	00000008 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000000c __reset
04018944 g     F .text	00000060 times
0400ad2c g     F .text	00000008 .hidden _Unwind_GetRegionStart
0402393c  w    O .rwdata	00000008 _ZTI17UsbConfigXtracter
04000020 g       *ABS*	00000000 __flash_exceptions_start
040002e4 g     F .text	0000003c _ZN6SPI_SS3SetEh
04004c60  w    F .text	00000028 _ZN7XBOXONE10GetAddressEv
04014a44 g     F .text	0000005c _fstat_r
04006be8 g     F .text	0000008c _ZN8MAX3421e5regWrEhh
04000964 g     F .text	0000018c _ZN3USB10SetAddressEhhPP6EpInfoPt
04028210 g     O .bss	00000004 errno
040059e0 g     F .text	00000298 _ZN20KeyboardReportParser10OemToAsciiEhh
04012c70 g     F .text	00000008 __seofread
04006768 g     F .text	00000098 _ZN6USBHID7GetIdleEhhPh
0400af08 g     F .text	00000074 .hidden _Unwind_Backtrace
04028224 g     O .bss	00000004 alt_argv
04003420 g     F .text	000001e4 _ZN7XBOXONEC1EP3USB
0402b920 g       *ABS*	00000000 _gp
040189a4 g     F .text	00000004 usleep
04019d64 g     F .text	00000018 alt_avalon_i2c_rx_fifo_threshold_get
040183a4 g     F .text	00000008 getpid
04009ffc g     F .text	00000230 __cxa_call_unexpected
0400a384 g     F .text	00000008 __cxa_get_exception_ptr
04018f60 g     F .text	00000010 alt_avalon_i2c_is_busy
040226e0 g     O .rwdata	00000180 alt_fd_list
04006918 g     F .text	00000088 _ZN6USBHID11GetProtocolEhPh
0401b290  w    O .rodata	00000019 _ZTS15AddressPoolImplILh16EE
040005d8 g     F .text	00000058 _Z5delaym
0400456c g     F .text	000000a4 _ZN7XBOXONE6onInitEv
0400baf0 g     F .text	00000008 _putchar_r
0400ae1c g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
04018d4c g     F .text	00000058 alt_avalon_i2c_master_config_set
04001b60 g     F .text	00000160 _ZN3USB17DefaultAddressingEhhb
0400acac g     F .text	00000018 .hidden _Unwind_GetCFA
04009194 g     F .text	00000014 _ZSt13set_terminatePFvvE
0401a740 g     F .text	00000078 alt_find_dev
0401b284  w    O .rodata	0000000c _ZTI15AddressPoolImplILh16EE
0400c0b0 g     F .text	00000008 _times_r
0400b814 g     F .text	00000148 memcpy
040006dc g     F .text	00000024 _ZN3USB15getUsbTaskStateEv
04005d68  w    F .text	00000028 _ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO
04000320 g     F .text	0000003c _ZN6SPI_SS5ClearEh
0400a6fc g     F .text	00000054 __cxa_allocate_dependent_exception
04010120 g     F .text	0000000c _cleanup_r
04008e44 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
04018018 g     F .text	000000dc .hidden __floatsidf
0401b338  w    O .rodata	0000000c _ZTV13USBReadParser
0401a93c g     F .text	00000074 alt_io_redirect
04016d3c g     F .text	000000f4 .hidden __ltdf2
04004ab4  w    F .text	00000024 _ZN15USBDeviceConfig10GetAddressEv
04000700 g     F .text	00000034 _ZN3USB15setUsbTaskStateEh
0401b1b0 g       *ABS*	00000000 __DTOR_END__
04008e5c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
04019310 g     F .text	0000016c alt_avalon_i2c_master_transmit
0400bbd0 g     F .text	00000014 puts
04021960  w    O .rodata	0000000c _ZTIN10__cxxabiv121__vmi_class_type_infoE
0401ad9c g     F .text	00000074 alt_exception_cause_generated_bad_addr
040069a0 g     F .text	000000cc _ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
04012ba8 g     F .text	00000074 __fpclassifyd
040122c0 g     F .text	000000a4 __ratio
040075f0 g     F .text	00000064 _Z10xbox_setupv
04014378 g     F .text	0000001c __vfiprintf_internal
0401a098 g     F .text	00000154 altera_avalon_jtag_uart_read
0400afe0 g     F .text	00000014 malloc
0400ba84 g     F .text	00000030 _printf_r
0400a978 g     F .text	00000064 .hidden __udivsi3
040183ac g     F .text	000000a0 isatty
0400bd28 g     F .text	000000bc _raise_r
04006b88 g     F .text	0000003c _ZN8MAX3421eC2Ev
04021c2c g     O .rodata	000000c8 __mprec_tens
04010fc8 g     F .text	0000000c __locale_charset
04000658 g     F .text	00000058 _ZN3USBC2Ev
04004a6c  w    F .text	00000024 _ZN15USBDeviceConfig7ReleaseEv
04018ca0 g     F .text	0000004c alt_avalon_i2c_enable
0402820c g     O .bss	00000004 __malloc_top_pad
0400bf38 g     F .text	00000004 _getpid_r
04019d14 g     F .text	00000020 alt_avalon_i2c_int_disable
040281ec g     O .bss	00000001 usb_task_state
04024fd8 g     O .rwdata	00000004 __mb_cur_max
04010ff8 g     F .text	0000000c _localeconv_r
04008348 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD1Ev
04003dc4 g     F .text	00000094 _ZN7XBOXONE7ReleaseEv
04011858 g     F .text	0000003c __i2b
040108fc g     F .text	000004c8 __sfvwrite_r
04008fdc g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0400bde4 g     F .text	000000a8 __sigtramp_r
04002d48  w    F .text	00000260 _ZN15AddressPoolImplILh16EE12AllocAddressEhbh
0400bbe4 g     F .text	00000054 _sbrk_r
040219a8  w    O .rodata	00000020 _ZTVSt9type_info
04004b64  w    F .text	0000002c _ZN15USBDeviceConfig13DEVSUBCLASSOKEh
04006800 g     F .text	00000094 _ZN6USBHID7SetIdleEhhh
04014b54 g     F .text	00000060 _read_r
0400a850 g     F .text	0000000c _ZNKSt9exception4whatEv
04024fe0 g     O .rwdata	00000004 alt_max_fd
04006054 g     F .text	00000050 _Z9E_Notifycci
04014738 g     F .text	000000f0 _fclose_r
040100e8 g     F .text	00000030 fflush
04028208 g     O .bss	00000004 __malloc_max_sbrked_mem
04006e94 g     F .text	00000088 _ZN8MAX3421e7bytesRdEhhPh
04019720 g     F .text	000001d0 alt_avalon_i2c_master_receive
0401595c g     F .text	000008ac .hidden __adddf3
0402190c  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
04004b90  w    F .text	00000090 _ZN3USB19RegisterDeviceClassEP15USBDeviceConfig
04012068 g     F .text	0000010c __b2d
04015398 g     F .text	000005c4 .hidden __umoddi3
04018658 g     F .text	000000c8 lseek
04005d90  w    F .text	0000018c _ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh
04008ea0 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
040061ac g     F .text	00000028 _Z8E_Notifyhi
04008d88 g     F .text	00000004 _ZdlPv
04019d34 g     F .text	0000001c alt_avalon_i2c_int_enable
04024fc8 g     O .rwdata	00000004 _global_impure_ptr
04008358 g     F .text	00000034 _ZN10__cxxabiv121__vmi_class_type_infoD0Ev
04012644 g     F .text	00000564 _realloc_r
040284c4 g       *ABS*	00000000 __bss_end
0401a848 g     F .text	00000068 alt_iic_isr_register
0401ab6c g     F .text	000000f4 alt_tick
040002b0 g     F .text	00000034 _ZN6SPI_SS7DirReadEv
0400ac64 g     F .text	00000018 .hidden _Unwind_SjLj_Register
04014d9c g     F .text	000005fc .hidden __udivdi3
04019ce0 g     F .text	00000018 alt_avalon_i2c_int_status_get
040149a0 g     F .text	00000024 _fputwc_r
04021c04 g     O .rodata	00000028 __mprec_bigtens
0401163c g     F .text	00000104 __s2b
0400af7c g     F .text	00000018 abort
040180f4 g     F .text	000000a8 .hidden __floatunsidf
0401d564  w    O .rodata	00000014 _ZTS17MouseReportParser
04011da8 g     F .text	00000060 __mcmp
04000630 g     F .text	00000028 _Z6millisv
04003604 g     F .text	00000654 _ZN7XBOXONE4InitEhhb
0400a440 g     F .text	000000b4 __cxa_end_catch
04006894 g     F .text	00000084 _ZN6USBHID11SetProtocolEhh
04010498 g     F .text	00000018 __fp_lock_all
0401b37c  w    O .rodata	00000025 _ZTS16ConfigDescParserILh0ELh0ELh0ELh0EE
0401a830 g     F .text	00000018 alt_ic_irq_enabled
0400a84c g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
04003014  w    F .text	00000144 _ZN15AddressPoolImplILh16EE9InitEntryEh
04005d40  w    F .text	00000028 _ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO
0401ab38 g     F .text	00000034 alt_alarm_stop
04000274 g     F .text	0000003c _ZN6SPI_SS8DirWriteEh
04000734 g     F .text	00000114 _ZN3USB14getEpInfoEntryEhh
04018c88 g     F .text	00000010 alt_avalon_i2c_register_callback
0402822c g     O .bss	00000004 alt_irq_active
04018da4 g     F .text	000000e4 alt_avalon_i2c_init
04009154 g     F .text	00000018 _ZSt9terminatev
040000fc g     F .exceptions	00000064 alt_irq_handler
04022860 g     O .rwdata	00000028 alt_dev_null
0400838c g     F .text	00000128 _ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
04005fb8  w    F .text	00000028 _ZN20KeyboardReportParser10getNumKeysEv
0400a878 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
04004e10  w    F .text	00000034 _ZN17UsbConfigXtracterC2Ev
040031c0  w    F .text	00000094 _ZN15AddressPoolImplILh16EE16FindAddressIndexEh
04002ae8 g     F .text	00000084 _ZN3USB7setConfEhhh
04021a04  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
04000848 g     F .text	0000011c _ZN3USB14setEpInfoEntryEhhP6EpInfo
0401a608 g     F .text	00000004 alt_dcache_flush_all
04011740 g     F .text	00000068 __hi0bits
040070e4 g     F .text	00000028 _Z10Vbus_powerb
04024fb0  w    O .rwdata	00000008 _ZTISt9exception
04017f98 g     F .text	00000080 .hidden __fixdfsi
0401d578  w    O .rodata	00000012 _ZTS15HIDReportParser
04001194 g     F .text	000000b0 _ZN3USB11outTransferEhhtPh
04025010 g       *ABS*	00000000 __ram_rwdata_end
04008d2c g     F .text	00000004 _ZNSt9type_infoD1Ev
04024fe4 g     O .rwdata	00000008 alt_dev_list
0400a878 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
040189a8 g     F .text	00000110 write
040124dc g     F .text	000000a0 _putc_r
04007554 g     F .text	00000024 _ZN8MAX3421e10GpxHandlerEv
040191c4 g     F .text	0000001c alt_avalon_i2c_check_arblost
04008d40 g     F .text	00000004 _ZNSt9type_infoD0Ev
04004c88  w    F .text	00000028 _ZN7XBOXONE7isReadyEv
04019d08 g     F .text	0000000c alt_avalon_i2c_int_clear
04006b5c  w    F .text	0000002c _Z10D_PrintHexItEvT_i
0401b270  w    O .rodata	00000014 _ZTV11AddressPool
04021e3c g       *ABS*	00000000 __ram_rodata_end
040182dc g     F .text	000000c8 fstat
04002bc4  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC2Ev
0401844c g     F .text	000000f8 kill
04006030  w    F .text	00000024 _ZN20KeyboardReportParser10getPadKeysEv
04016d3c g     F .text	000000f4 .hidden __ledf2
0401b3a4  w    O .rodata	00000020 _ZTI7XBOXONE
04024ffc g     O .rwdata	00000008 alt_avalon_i2c_list
040049f4  w    F .text	0000003c _ZN15USBDeviceConfig4InitEhhb
0401d4be g     O .rodata	0000000a _ZN20KeyboardReportParser7numKeysE
04011b20 g     F .text	00000140 __pow5mult
04004fdc  w    F .text	0000007c _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt
04012e6c g     F .text	0000150c ___vfiprintf_internal_r
0402821c g     O .bss	00000004 __nlocale_changed
0400a9dc g     F .text	00000058 .hidden __umodsi3
04008d38 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
040047d0  w    F .text	00000080 _ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer
04002660 g     F .text	00000138 _ZN3USB13ReleaseDeviceEh
040091a8 g     F .text	00000010 _ZSt13get_terminatev
040284c4 g       *ABS*	00000000 end
0401b32c  w    O .rodata	0000000c _ZTV17UsbConfigXtracter
04004ddc  w    F .text	00000034 _ZN15USBDeviceConfigC2Ev
04006da8 g     F .text	00000074 _ZN8MAX3421e6gpioWrEh
04007654 g     F .text	00000884 _Z9xbox_loopv
04005f50  w    F .text	00000034 _ZN20KeyboardReportParser9OnKeyDownEhh
0400aef0 g     F .text	00000018 .hidden _Unwind_DeleteException
04019f78 g     F .text	00000078 altera_avalon_jtag_uart_init
04005d18  w    F .text	00000028 _ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO
04000160 g     F .exceptions	00000024 alt_instruction_exception_entry
04018c98 g     F .text	00000008 alt_avalon_i2c_open
0401d4d4 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysLoE
04008f0c g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
04008348 g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD2Ev
040240c8 g     O .rwdata	00000004 UsbDEBUGlvl
0401b1a8 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04019640 g     F .text	000000e0 alt_avalon_i2c_master_tx
0401a4b8 g     F .text	00000048 alt_avalon_timer_sc_init
0401819c g     F .text	00000064 .hidden __clzsi2
04008dcc g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
0401a1ec g     F .text	000001a8 altera_avalon_jtag_uart_write
04010488 g     F .text	00000004 __sfp_lock_acquire
04021a94  w    O .rodata	00000012 _ZTSSt13bad_exception
040111e4 g     F .text	000000e4 memchr
0400c0b8 g     F .text	000022dc ___vfprintf_internal_r
04004734  w    F .text	00000060 _ZN16MultiValueBufferC2Ev
040105ec g     F .text	00000310 _free_r
04010fd4 g     F .text	00000010 __locale_mb_cur_max
0401aff0 g     F .text	00000180 __call_exitprocs
0400035c g     F .text	0000003c _ZN6SPI_SS6ToggleEh
04028218 g     O .bss	00000004 __mlocale_changed
04018c6c g     F .text	0000001c alt_avalon_i2c_register_optional_irq_handler
04024fd0 g     O .rwdata	00000004 __malloc_sbrk_base
04000184 g     F .text	0000003c _start
04003d9c g     F .text	00000028 _ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
04028234 g     O .bss	00000004 _alt_tick_rate
04021998  w    O .rodata	0000000d _ZTSSt9type_info
040198f0 g     F .text	000001c8 alt_avalon_i2c_master_receive_using_interrupts
04008d8c g     F .text	00000020 __cxa_pure_virtual
0401b25c  w    O .rodata	00000014 _ZTV15AddressPoolImplILh16EE
0401b3e4  w    O .rodata	00000010 _ZTS13USBReadParser
04019d7c g     F .text	00000028 alt_avalon_i2c_rx_fifo_threshold_set
04011c60 g     F .text	00000148 __lshift
0401a394 g     F .text	000000e8 alt_avalon_spi_command
04028230 g     O .bss	00000004 _alt_nticks
0400bea0 g     F .text	00000018 signal
04018788 g     F .text	00000114 read
04005508 g     F .text	0000021c _ZN17MouseReportParser5ParseEP6USBHIDbhPh
04018ad8 g     F .text	00000060 alt_sys_init
0401b2e0  w    O .rodata	00000040 _ZTV7XBOXONE
04001244 g     F .text	000003ac _ZN3USB11OutTransferEP6EpInfottPh
04000480 g     F .text	00000158 _Z14alt_busy_sleepj
0401aed8 g     F .text	00000118 __register_exitproc
04002a54 g     F .text	00000094 _ZN3USB7setAddrEhhh
040060a4 g     F .text	00000084 _Z8E_NotifyPKci
04003254  w    F .text	00000104 _ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh
040080c8 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
04005f1c  w    F .text	00000034 _ZN20KeyboardReportParser20OnControlKeysChangedEhh
04004c20  w    F .text	00000040 _ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
04019ba4 g     F .text	0000013c alt_avalon_i2c_master_tx_rx
04011894 g     F .text	0000028c __multiply
040029ac g     F .text	000000a8 _ZN3USB11getStrDescrEhhthtPh
040240b6 g     O .rwdata	00000005 _ZN20KeyboardReportParser7padKeysE
04019ff0 g     F .text	00000034 altera_avalon_jtag_uart_close
04002bc4  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC1Ev
0400aa34 g     F .text	00000028 .hidden __mulsi3
04021e3c g       *ABS*	00000000 __ram_rwdata_start
0400ad4c g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
0401b1b0 g       *ABS*	00000000 __ram_rodata_start
0402839c g     O .bss	00000028 __malloc_current_mallinfo
04004e78  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter
0400ae60 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
04012174 g     F .text	0000014c __d2b
04021b34  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
04008d2c g     F .text	00000004 _ZNSt9type_infoD2Ev
0400488c  w    F .text	00000068 _ZN11ByteSkipper10InitializeEP16MultiValueBuffer
04023928  w    O .rwdata	00000008 _ZTI11AddressPool
0400a87c g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
040082c4 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
04021938  w    O .rodata	00000026 _ZTSN10__cxxabiv121__vmi_class_type_infoE
04019de8 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
0401ad14 g     F .text	00000088 alt_get_fd
04005724 g     F .text	000002bc _ZN20KeyboardReportParser5ParseEP6USBHIDbhPh
0401a580 g     F .text	00000088 alt_busy_sleep
04024fc0  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
04014608 g     F .text	00000054 _close_r
0401ae5c g     F .text	0000007c memcmp
04018f70 g     F .text	00000038 alt_avalon_i2c_rx_read_available
04019e08 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
040284c4 g       *ABS*	00000000 __alt_stack_base
04019e18 g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
04008084 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
040044cc g     F .text	000000a0 _ZN7XBOXONE11XboxCommandEPht
0400e46c g     F .text	00000154 __swsetup_r
0400aea4 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
04016208 g     F .text	000009d0 .hidden __divdf3
04010348 g     F .text	00000118 __sfp
040123d8 g     F .text	00000078 __copybits
04008d30 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
04022260 g     O .rwdata	00000408 __malloc_av_
04004850  w    F .text	0000003c _ZN11ByteSkipperC1Ev
04000398 g     F .text	0000003c _ZN6SPI_SS6DirSetEh
04010494 g     F .text	00000004 __sinit_lock_release
04016e30 g     F .text	0000086c .hidden __muldf3
04012c1c g     F .text	00000054 __sread
04004e44  w    F .text	00000034 _ZN13USBReadParserC2Ev
04021af8  w    O .rodata	00000014 _ZTVSt9exception
0400a874 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
04002b90  w    F .text	00000034 _ZN11AddressPoolC2Ev
0401ac68 g     F .text	000000ac alt_find_file
04004b38  w    F .text	0000002c _ZN15USBDeviceConfig10DEVCLASSOKEh
0401a60c g     F .text	0000006c alt_dev_llist_insert
04018780 g     F .text	00000004 __malloc_lock
040188f8 g     F .text	0000004c sbrk
040191e0 g     F .text	00000130 alt_avalon_i2c_interrupt_transaction_status
040191a8 g     F .text	0000001c alt_avalon_i2c_check_nack
04021a34  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0400a270 g     F .text	00000090 __cxa_throw
0401008c g     F .text	0000005c _fflush_r
0400ad10 g     F .text	00000010 .hidden _Unwind_SetIP
04000af0 g     F .text	00000310 _ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser
0401465c g     F .text	000000dc _calloc_r
0401b3d0  w    O .rodata	00000014 _ZTS17UsbConfigXtracter
040061d4 g     F .text	00000028 _Z8E_Notifydi
040281e4 g       *ABS*	00000000 __bss_start
0402394c  w    O .rwdata	00000008 _ZTI15USBDeviceConfig
0400b95c g     F .text	00000128 memset
04005058  w    F .text	000004b0 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt
04007ed8 g     F .text	0000001c main
04006e1c g     F .text	00000078 _ZN8MAX3421e5regRdEh
04007018 g     F .text	000000cc _ZN8MAX3421e5resetEv
040191a0 g     F .text	00000008 alt_avalon_i2c_master_target_set
04028220 g     O .bss	00000004 alt_envp
0401b3f4  w    O .rodata	00000012 _ZTS15USBDeviceConfig
04028204 g     O .bss	00000004 __malloc_max_total_mem
04019df8 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
040281ed g     O .bss	00000001 _ZN8MAX3421e9vbusStateE
04014590 g     F .text	00000018 __swbuf
0400a830 g     F .text	0000000c __cxa_get_globals_fast
04019cf8 g     F .text	00000010 alt_avalon_i2c_int_raw_status_get
04006b88 g     F .text	0000003c _ZN8MAX3421eC1Ev
04004e10  w    F .text	00000034 _ZN17UsbConfigXtracterC1Ev
04002b6c  w    F .text	00000024 _ZN3USB14GetAddressPoolEv
04012d50 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
04014828 g     F .text	00000014 fclose
040043a0 g     F .text	000000f0 _ZN7XBOXONE14getButtonClickE10ButtonEnum
04006128 g     F .text	00000084 _Z11E_NotifyStrPKci
040003d4 g     F .text	0000003c _ZN6SPI_SS8DirClearEh
0400e7e8 g     F .text	00001688 _dtoa_r
0400b008 g     F .text	0000080c _malloc_r
04014d10 g     F .text	00000030 __ascii_wctomb
0400a85c g     F .text	0000000c _ZNKSt13bad_exception4whatEv
04024ff4 g     O .rwdata	00000004 alt_errno
0401d558  w    O .rodata	0000000c _ZTI17MouseReportParser
0400beb8 g     F .text	00000010 _init_signal
040028b4 g     F .text	000000f8 _ZN3USB12getConfDescrEhhhP13USBReadParser
04021a28  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
04004610 g     F .text	00000078 _ZN7XBOXONE12setRumbleOffEv
04010dc4 g     F .text	000000c4 _fwalk
04006bc4 g     F .text	00000024 _ZN8MAX3421e12getVbusStateEv
04003158  w    F .text	00000068 _ZN15AddressPoolImplILh16EE16InitAllAddressesEv
0400a84c g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
0401257c g     F .text	000000c8 putc
0400a880 g     F .text	00000084 .hidden __divsi3
040104c8 g     F .text	00000124 _malloc_trim_r
0401b1b0 g       *ABS*	00000000 __CTOR_END__
04004a30  w    F .text	0000003c _ZN15USBDeviceConfig15ConfigureDeviceEhhb
0401d50c  w    O .rodata	00000028 _ZTV17MouseReportParser
0400bf3c g     F .text	000000dc strcmp
04003420 g     F .text	000001e4 _ZN7XBOXONEC2EP3USB
0401b1b0 g       *ABS*	00000000 __flash_rodata_start
04021b20  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
0401b1b0 g       *ABS*	00000000 __DTOR_LIST__
0402830c g     O .bss	00000080 Xbox
040281ef g     O .bss	00000001 usbstate
04016bd8 g     F .text	00000088 .hidden __nedf2
04018ab8 g     F .text	00000020 alt_irq_init
0401889c g     F .text	0000005c alt_release_fd
04008094 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
0401b3c4  w    O .rodata	00000009 _ZTS7XBOXONE
04021d14 g     O .rodata	00000100 .hidden __clz_tab
04028214 g     O .bss	00000004 _PathLocale
0401ae10 g     F .text	00000014 atexit
040145a8 g     F .text	00000060 _write_r
04002798 g     F .text	00000088 _ZN3USB11getDevDescrEhhtPh
04002d1c  w    F .text	0000002c _Z10D_PrintHexIhEvT_i
04011004 g     F .text	00000018 setlocale
0400044c g     F .text	00000034 _ZN6SPI_SS7PinReadEv
0401d4e0  w    O .rodata	0000002c _ZTV20KeyboardReportParser
04006f9c g     F .text	0000007c _ZN8MAX3421e12gpioRdOutputEv
0400ad44 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
0402196c  w    O .rodata	0000002c _ZTVN10__cxxabiv121__vmi_class_type_infoE
0400a7d8 g     F .text	00000058 __cxa_call_terminate
04024fcc g     O .rwdata	00000004 _impure_ptr
04024fb8  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
0401b2ac  w    O .rodata	0000000e _ZTS11AddressPool
04028228 g     O .bss	00000004 alt_argc
04003358  w    F .text	000000c8 _ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh
0400fe70 g     F .text	0000021c __sflush_r
04002fa8  w    F .text	0000006c _ZN15AddressPoolImplILh16EE11FreeAddressEh
0401a6dc g     F .text	00000064 _do_dtors
04010ff0 g     F .text	00000008 __locale_cjk_lang
04019194 g     F .text	0000000c alt_avalon_i2c_master_target_get
04019114 g     F .text	00000080 alt_avalon_i2c_send_address
0402823c g     O .bss	00000012 buf
040091cc g     F .text	00000010 _ZSt14get_unexpectedv
04000020 g       .exceptions	00000000 alt_irq_entry
04002b90  w    F .text	00000034 _ZN11AddressPoolC1Ev
040006b0 g     F .text	0000002c _ZN3USB4initEv
04012004 g     F .text	00000064 __ulp
0400ad34 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
040104b0 g     F .text	00000018 __fp_unlock_all
04004e78  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC2EP17UsbConfigXtracter
04004490 g     F .text	0000003c _ZN7XBOXONE12getAnalogHatE13AnalogHatEnum
04004ad8  w    F .text	0000002c _ZN15USBDeviceConfig12ResetHubPortEh
04024fec g     O .rwdata	00000008 alt_fs_list
04021ad4  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
0401d540  w    O .rodata	00000017 _ZTS20KeyboardReportParser
04004e44  w    F .text	00000034 _ZN13USBReadParserC1Ev
0400ad20 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
04004b04  w    F .text	00000034 _ZN15USBDeviceConfig8VIDPIDOKEtt
0400a38c g     F .text	000000b4 __cxa_begin_catch
04004688 g     F .text	000000ac _ZN7XBOXONE11setRumbleOnEhhhh
04008e5c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0400916c g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
04005cf0  w    F .text	00000028 _ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO
04000020 g       *ABS*	00000000 __ram_exceptions_start
0401101c g     F .text	0000000c localeconv
04007308 g     F .text	00000174 _ZN8MAX3421e8busprobeEv
040001c0 g     F .text	0000003c _ZN6SPI_SS5WriteEh
04004cb0  w    F .text	0000012c _ZN7XBOXONE8VIDPIDOKEtt
0400a86c g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
04019dbc g     F .text	0000002c alt_avalon_i2c_tfr_cmd_fifo_threshold_set
04024fac g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
04000410 g     F .text	0000003c _ZN6SPI_SS9DirToggleEh
040065f8 g     F .text	000000b8 _ZN6USBHID9SetReportEhhhhtPh
0401a7bc g     F .text	00000004 alt_ic_isr_register
04018cec g     F .text	0000001c alt_avalon_i2c_disable
0400a674 g     F .text	00000060 __cxa_allocate_exception
04021900  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
04025010 g       *ABS*	00000000 _edata
04004ddc  w    F .text	00000034 _ZN15USBDeviceConfigC1Ev
040284c4 g       *ABS*	00000000 _end
040084b4 g     F .text	00000604 _ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
040099fc g     F .text	00000600 __gxx_personality_sj0
0401483c g     F .text	00000164 __fputwc
04000184 g       *ABS*	00000000 __ram_exceptions_end
04001770 g     F .text	000003f0 _ZN3USB4TaskEv
0401a024 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
040001fc g     F .text	00000044 _ZN6SPI_SS11ClearAndSetEhh
04023944  w    O .rwdata	00000008 _ZTI13USBReadParser
04018d08 g     F .text	00000044 alt_avalon_i2c_master_config_get
0400a848 g     F .text	00000004 _ZNSt9exceptionD1Ev
0401a7f8 g     F .text	00000038 alt_ic_irq_disable
04005c78  w    F .text	00000028 _ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO
04012c78 g     F .text	0000007c __swrite
04024fd4 g     O .rwdata	00000004 __malloc_trim_threshold
04010fe4 g     F .text	0000000c __locale_msgcharset
0401ae24 g     F .text	00000038 exit
0400acc4 g     F .text	0000001c .hidden _Unwind_SetGR
04005cc8  w    F .text	00000028 _ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO
04010e88 g     F .text	000000c4 _fwalk_reent
04008228 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
04011e08 g     F .text	000001fc __mdiff
04009094 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
0400a904 g     F .text	00000074 .hidden __modsi3
04000ee8 g     F .text	000002ac _ZN3USB10InTransferEP6EpInfotPtPhh
08000000 g       *ABS*	00000000 __alt_data_end
04007578 g     F .text	00000078 _Z3maplllll
04000020 g     F .exceptions	00000000 alt_exception
040281ee g     O .bss	00000001 rcode
0401048c g     F .text	00000004 __sfp_lock_release
04021aa8  w    O .rodata	0000000c _ZTISt13bad_exception
04000000 g       *ABS*	00000000 __alt_mem_sdram
04005fe0  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysUpEv
04003f50 g     F .text	000003c8 _ZN7XBOXONE10readReportEv
04018ed4 g     F .text	0000008c alt_avalon_i2c_master_config_speed_set
040071f0 g     F .text	00000118 _ZN8MAX3421e4InitEi
040015f0 g     F .text	00000180 _ZN3USB11dispatchPktEhht
04019034 g     F .text	000000e0 alt_avalon_i2c_cmd_write
04004318 g     F .text	00000088 _ZN7XBOXONE14getButtonPressE10ButtonEnum
040182c8 g     F .text	00000014 _exit
0401a500 g     F .text	00000080 alt_alarm_start
0401d534  w    O .rodata	0000000c _ZTI20KeyboardReportParser
0400ac90 g     F .text	0000001c .hidden _Unwind_GetGR
0400a83c g     F .text	0000000c __cxa_get_globals
04006304 g     F .text	00000254 _ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_
04011028 g     F .text	000001bc __smakebuf_r
04024fa8 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
04004a90  w    F .text	00000024 _ZN15USBDeviceConfig4PollEv
0400c018 g     F .text	00000098 strlen
0400bc38 g     F .text	0000006c _init_signal_r
04024fa0  w    O .rwdata	00000008 _ZTISt9type_info
0401a9b0 g     F .text	00000188 open
04016c60 g     F .text	000000dc .hidden __gedf2
04021a84  w    O .rodata	0000000d _ZTSSt9exception
0400af94 g     F .text	0000004c clock
04006008  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysLoEv
0400747c g     F .text	00000064 _ZN8MAX3421e4TaskEv
0401d4c8 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysUpE
04006c74 g     F .text	00000134 _ZN8MAX3421e7bytesWrEhhPh
04024fdc g     O .rwdata	00000004 __wctomb
0400a868 g     F .text	00000004 _ZNSt9exceptionD0Ev
04012e54 g     F .text	00000018 __sprint_r
0401a7b8 g     F .text	00000004 alt_icache_flush_all
0400ad3c g     F .text	00000008 .hidden _Unwind_GetDataRelBase
04028250 g     O .bss	000000bc Usb
04025004 g     O .rwdata	00000004 alt_priority_mask
04004850  w    F .text	0000003c _ZN11ByteSkipperC2Ev
0401a7c0 g     F .text	00000038 alt_ic_irq_enable
0400e394 g     F .text	0000001c __vfprintf_internal
04000240 g     F .text	00000034 _ZN6SPI_SS4ReadEv
04014d40 g     F .text	0000005c _wctomb_r
0401769c g     F .text	000008fc .hidden __subdf3
04000e00 g     F .text	000000e8 _ZN3USB10inTransferEhhPtPhh
04003c58 g     F .text	0000013c _ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
040117a8 g     F .text	000000b0 __lo0bits
04025008 g     O .rwdata	00000008 alt_alarm_list
0401a678 g     F .text	00000064 _do_ctors
0401b370  w    O .rodata	0000000c _ZTI16ConfigDescParserILh0ELh0ELh0ELh0EE
0400bec8 g     F .text	00000014 __sigtramp
040066b0 g     F .text	000000b8 _ZN6USBHID9GetReportEhhhhtPh
04014c50 g     F .text	000000c0 wcrtomb
04018200 g     F .text	000000c0 close
04019da4 g     F .text	00000018 alt_avalon_i2c_tfr_cmd_fifo_threshold_get
04021ab4  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
04018544 g     F .text	00000114 alt_load
04019ab8 g     F .text	000000ec alt_avalon_i2c_master_rx
04008d44 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
040048f4  w    F .text	00000100 _ZN11ByteSkipper4SkipEPPhPtt
040149c4 g     F .text	00000080 fputwc
0400be8c g     F .text	00000014 raise
040240bc  w    O .rwdata	00000008 _ZTI15HIDReportParser
0400aff4 g     F .text	00000014 free
04010490 g     F .text	00000004 __sinit_lock_acquire
040114f4 g     F .text	00000148 __multadd
04008e6c g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
040114cc g     F .text	00000028 _Bfree



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08406114 	ori	at,at,388
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001600 	call	4000160 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defffe04 	addi	sp,sp,-8
 4000100:	dfc00115 	stw	ra,4(sp)
 4000104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000108:	000b313a 	rdctl	r5,ipending
 400010c:	040100f4 	movhi	r16,1027
 4000110:	8420f104 	addi	r16,r16,-31804
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 4000114:	2880004c 	andi	r2,r5,1

  active = alt_irq_pending ();

  do
  {
    i = 0;
 4000118:	0007883a 	mov	r3,zero
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400011c:	1000051e 	bne	r2,zero,4000134 <alt_irq_handler+0x38>
 4000120:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 4000124:	1085883a 	add	r2,r2,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 4000128:	2888703a 	and	r4,r5,r2
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
 400012c:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 4000130:	203ffc26 	beq	r4,zero,4000124 <__alt_data_end+0xfc000124>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 4000134:	180690fa 	slli	r3,r3,3
 4000138:	80c7883a 	add	r3,r16,r3
 400013c:	18800017 	ldw	r2,0(r3)
 4000140:	19000117 	ldw	r4,4(r3)
 4000144:	103ee83a 	callr	r2
 4000148:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 400014c:	283ff11e 	bne	r5,zero,4000114 <__alt_data_end+0xfc000114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 4000150:	dfc00117 	ldw	ra,4(sp)
 4000154:	dc000017 	ldw	r16,0(sp)
 4000158:	dec00204 	addi	sp,sp,8
 400015c:	f800283a 	ret

04000160 <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4000160:	d0b24617 	ldw	r2,-14056(gp)
 4000164:	10000426 	beq	r2,zero,4000178 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 4000168:	200b883a 	mov	r5,r4
 400016c:	000d883a 	mov	r6,zero
 4000170:	013fffc4 	movi	r4,-1
 4000174:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000178:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 400017c:	0005883a 	mov	r2,zero
 4000180:	f800283a 	ret

Disassembly of section .text:

04000184 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000184:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000188:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400018c:	068100b4 	movhi	gp,1026
    ori gp, gp, %lo(_gp)
 4000190:	d6ae4814 	ori	gp,gp,47392
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000194:	008100b4 	movhi	r2,1026
    ori r2, r2, %lo(__bss_start)
 4000198:	10a07914 	ori	r2,r2,33252

    movhi r3, %hi(__bss_end)
 400019c:	00c100b4 	movhi	r3,1026
    ori r3, r3, %lo(__bss_end)
 40001a0:	18e13114 	ori	r3,r3,33988

    beq r2, r3, 1f
 40001a4:	10c00326 	beq	r2,r3,40001b4 <_start+0x30>

0:
    stw zero, (r2)
 40001a8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001ac:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001b0:	10fffd36 	bltu	r2,r3,40001a8 <__alt_data_end+0xfc0001a8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40001b4:	40185440 	call	4018544 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001b8:	40187200 	call	4018720 <alt_main>

040001bc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001bc:	003fff06 	br	40001bc <__alt_data_end+0xfc0001bc>

040001c0 <_ZN6SPI_SS5WriteEh>:
#include "../include/Port.h"
#include <stdio.h>
typedef uint8_t DataT;
void SPI_SS::Write(DataT value) {
 40001c0:	defffd04 	addi	sp,sp,-12
 40001c4:	dfc00215 	stw	ra,8(sp)
 40001c8:	df000115 	stw	fp,4(sp)
 40001cc:	df000104 	addi	fp,sp,4
 40001d0:	2005883a 	mov	r2,r4
 40001d4:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Write\n");
 40001d8:	010100b4 	movhi	r4,1026
 40001dc:	212c6c04 	addi	r4,r4,-20048
 40001e0:	400bbd00 	call	400bbd0 <puts>
}
 40001e4:	0001883a 	nop
 40001e8:	e037883a 	mov	sp,fp
 40001ec:	dfc00117 	ldw	ra,4(sp)
 40001f0:	df000017 	ldw	fp,0(sp)
 40001f4:	dec00204 	addi	sp,sp,8
 40001f8:	f800283a 	ret

040001fc <_ZN6SPI_SS11ClearAndSetEhh>:
void SPI_SS::ClearAndSet(DataT clearMask, DataT value) {
 40001fc:	defffc04 	addi	sp,sp,-16
 4000200:	dfc00315 	stw	ra,12(sp)
 4000204:	df000215 	stw	fp,8(sp)
 4000208:	df000204 	addi	fp,sp,8
 400020c:	2007883a 	mov	r3,r4
 4000210:	2805883a 	mov	r2,r5
 4000214:	e0fffe05 	stb	r3,-8(fp)
 4000218:	e0bfff05 	stb	r2,-4(fp)
	printf("Port ClearAndSet\n");
 400021c:	010100b4 	movhi	r4,1026
 4000220:	212c6f04 	addi	r4,r4,-20036
 4000224:	400bbd00 	call	400bbd0 <puts>
}
 4000228:	0001883a 	nop
 400022c:	e037883a 	mov	sp,fp
 4000230:	dfc00117 	ldw	ra,4(sp)
 4000234:	df000017 	ldw	fp,0(sp)
 4000238:	dec00204 	addi	sp,sp,8
 400023c:	f800283a 	ret

04000240 <_ZN6SPI_SS4ReadEv>:
DataT SPI_SS::Read() {
 4000240:	defffe04 	addi	sp,sp,-8
 4000244:	dfc00115 	stw	ra,4(sp)
 4000248:	df000015 	stw	fp,0(sp)
 400024c:	d839883a 	mov	fp,sp
	printf("Port Read\n");
 4000250:	010100b4 	movhi	r4,1026
 4000254:	212c7404 	addi	r4,r4,-20016
 4000258:	400bbd00 	call	400bbd0 <puts>
}
 400025c:	0001883a 	nop
 4000260:	e037883a 	mov	sp,fp
 4000264:	dfc00117 	ldw	ra,4(sp)
 4000268:	df000017 	ldw	fp,0(sp)
 400026c:	dec00204 	addi	sp,sp,8
 4000270:	f800283a 	ret

04000274 <_ZN6SPI_SS8DirWriteEh>:
void SPI_SS::DirWrite(DataT value) {
 4000274:	defffd04 	addi	sp,sp,-12
 4000278:	dfc00215 	stw	ra,8(sp)
 400027c:	df000115 	stw	fp,4(sp)
 4000280:	df000104 	addi	fp,sp,4
 4000284:	2005883a 	mov	r2,r4
 4000288:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirWrite\n");
 400028c:	010100b4 	movhi	r4,1026
 4000290:	212c7704 	addi	r4,r4,-20004
 4000294:	400bbd00 	call	400bbd0 <puts>
}
 4000298:	0001883a 	nop
 400029c:	e037883a 	mov	sp,fp
 40002a0:	dfc00117 	ldw	ra,4(sp)
 40002a4:	df000017 	ldw	fp,0(sp)
 40002a8:	dec00204 	addi	sp,sp,8
 40002ac:	f800283a 	ret

040002b0 <_ZN6SPI_SS7DirReadEv>:
DataT SPI_SS::DirRead() {
 40002b0:	defffe04 	addi	sp,sp,-8
 40002b4:	dfc00115 	stw	ra,4(sp)
 40002b8:	df000015 	stw	fp,0(sp)
 40002bc:	d839883a 	mov	fp,sp
	printf("Port DirRead\n");
 40002c0:	010100b4 	movhi	r4,1026
 40002c4:	212c7b04 	addi	r4,r4,-19988
 40002c8:	400bbd00 	call	400bbd0 <puts>
}
 40002cc:	0001883a 	nop
 40002d0:	e037883a 	mov	sp,fp
 40002d4:	dfc00117 	ldw	ra,4(sp)
 40002d8:	df000017 	ldw	fp,0(sp)
 40002dc:	dec00204 	addi	sp,sp,8
 40002e0:	f800283a 	ret

040002e4 <_ZN6SPI_SS3SetEh>:
void SPI_SS::Set(DataT value) {
 40002e4:	defffd04 	addi	sp,sp,-12
 40002e8:	dfc00215 	stw	ra,8(sp)
 40002ec:	df000115 	stw	fp,4(sp)
 40002f0:	df000104 	addi	fp,sp,4
 40002f4:	2005883a 	mov	r2,r4
 40002f8:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Set\n");
 40002fc:	010100b4 	movhi	r4,1026
 4000300:	212c7f04 	addi	r4,r4,-19972
 4000304:	400bbd00 	call	400bbd0 <puts>
}
 4000308:	0001883a 	nop
 400030c:	e037883a 	mov	sp,fp
 4000310:	dfc00117 	ldw	ra,4(sp)
 4000314:	df000017 	ldw	fp,0(sp)
 4000318:	dec00204 	addi	sp,sp,8
 400031c:	f800283a 	ret

04000320 <_ZN6SPI_SS5ClearEh>:
void SPI_SS::Clear(DataT value) {
 4000320:	defffd04 	addi	sp,sp,-12
 4000324:	dfc00215 	stw	ra,8(sp)
 4000328:	df000115 	stw	fp,4(sp)
 400032c:	df000104 	addi	fp,sp,4
 4000330:	2005883a 	mov	r2,r4
 4000334:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Clear\n");
 4000338:	010100b4 	movhi	r4,1026
 400033c:	212c8204 	addi	r4,r4,-19960
 4000340:	400bbd00 	call	400bbd0 <puts>
}
 4000344:	0001883a 	nop
 4000348:	e037883a 	mov	sp,fp
 400034c:	dfc00117 	ldw	ra,4(sp)
 4000350:	df000017 	ldw	fp,0(sp)
 4000354:	dec00204 	addi	sp,sp,8
 4000358:	f800283a 	ret

0400035c <_ZN6SPI_SS6ToggleEh>:
void SPI_SS::Toggle(DataT value) {
 400035c:	defffd04 	addi	sp,sp,-12
 4000360:	dfc00215 	stw	ra,8(sp)
 4000364:	df000115 	stw	fp,4(sp)
 4000368:	df000104 	addi	fp,sp,4
 400036c:	2005883a 	mov	r2,r4
 4000370:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Toggle\n");
 4000374:	010100b4 	movhi	r4,1026
 4000378:	212c8504 	addi	r4,r4,-19948
 400037c:	400bbd00 	call	400bbd0 <puts>
}
 4000380:	0001883a 	nop
 4000384:	e037883a 	mov	sp,fp
 4000388:	dfc00117 	ldw	ra,4(sp)
 400038c:	df000017 	ldw	fp,0(sp)
 4000390:	dec00204 	addi	sp,sp,8
 4000394:	f800283a 	ret

04000398 <_ZN6SPI_SS6DirSetEh>:
void SPI_SS::DirSet(DataT value) {
 4000398:	defffd04 	addi	sp,sp,-12
 400039c:	dfc00215 	stw	ra,8(sp)
 40003a0:	df000115 	stw	fp,4(sp)
 40003a4:	df000104 	addi	fp,sp,4
 40003a8:	2005883a 	mov	r2,r4
 40003ac:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirSet\n");
 40003b0:	010100b4 	movhi	r4,1026
 40003b4:	212c8804 	addi	r4,r4,-19936
 40003b8:	400bbd00 	call	400bbd0 <puts>
}
 40003bc:	0001883a 	nop
 40003c0:	e037883a 	mov	sp,fp
 40003c4:	dfc00117 	ldw	ra,4(sp)
 40003c8:	df000017 	ldw	fp,0(sp)
 40003cc:	dec00204 	addi	sp,sp,8
 40003d0:	f800283a 	ret

040003d4 <_ZN6SPI_SS8DirClearEh>:
void SPI_SS::DirClear(DataT value) {
 40003d4:	defffd04 	addi	sp,sp,-12
 40003d8:	dfc00215 	stw	ra,8(sp)
 40003dc:	df000115 	stw	fp,4(sp)
 40003e0:	df000104 	addi	fp,sp,4
 40003e4:	2005883a 	mov	r2,r4
 40003e8:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirClear\n");
 40003ec:	010100b4 	movhi	r4,1026
 40003f0:	212c8b04 	addi	r4,r4,-19924
 40003f4:	400bbd00 	call	400bbd0 <puts>
}
 40003f8:	0001883a 	nop
 40003fc:	e037883a 	mov	sp,fp
 4000400:	dfc00117 	ldw	ra,4(sp)
 4000404:	df000017 	ldw	fp,0(sp)
 4000408:	dec00204 	addi	sp,sp,8
 400040c:	f800283a 	ret

04000410 <_ZN6SPI_SS9DirToggleEh>:
void SPI_SS::DirToggle(DataT value) {
 4000410:	defffd04 	addi	sp,sp,-12
 4000414:	dfc00215 	stw	ra,8(sp)
 4000418:	df000115 	stw	fp,4(sp)
 400041c:	df000104 	addi	fp,sp,4
 4000420:	2005883a 	mov	r2,r4
 4000424:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirToggle\n");
 4000428:	010100b4 	movhi	r4,1026
 400042c:	212c8f04 	addi	r4,r4,-19908
 4000430:	400bbd00 	call	400bbd0 <puts>
}
 4000434:	0001883a 	nop
 4000438:	e037883a 	mov	sp,fp
 400043c:	dfc00117 	ldw	ra,4(sp)
 4000440:	df000017 	ldw	fp,0(sp)
 4000444:	dec00204 	addi	sp,sp,8
 4000448:	f800283a 	ret

0400044c <_ZN6SPI_SS7PinReadEv>:
DataT SPI_SS::PinRead() {
 400044c:	defffe04 	addi	sp,sp,-8
 4000450:	dfc00115 	stw	ra,4(sp)
 4000454:	df000015 	stw	fp,0(sp)
 4000458:	d839883a 	mov	fp,sp
	printf("Port PinRead\n");
 400045c:	010100b4 	movhi	r4,1026
 4000460:	212c9304 	addi	r4,r4,-19892
 4000464:	400bbd00 	call	400bbd0 <puts>
}
 4000468:	0001883a 	nop
 400046c:	e037883a 	mov	sp,fp
 4000470:	dfc00117 	ldw	ra,4(sp)
 4000474:	df000017 	ldw	fp,0(sp)
 4000478:	dec00204 	addi	sp,sp,8
 400047c:	f800283a 	ret

04000480 <_Z14alt_busy_sleepj>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4000480:	defffa04 	addi	sp,sp,-24
 4000484:	dfc00515 	stw	ra,20(sp)
 4000488:	df000415 	stw	fp,16(sp)
 400048c:	df000404 	addi	fp,sp,16
 4000490:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;

  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 4000494:	00800244 	movi	r2,9
 4000498:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 400049c:	014003f4 	movhi	r5,15
 40004a0:	29509004 	addi	r5,r5,16960
 40004a4:	e13ffd17 	ldw	r4,-12(fp)
 40004a8:	400aa340 	call	400aa34 <__mulsi3>
 40004ac:	100b883a 	mov	r5,r2
 40004b0:	0101fb74 	movhi	r4,2029
 40004b4:	211ad004 	addi	r4,r4,27456
 40004b8:	400a9780 	call	400a978 <__udivsi3>
  {
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
 40004bc:	100b883a 	mov	r5,r2
 40004c0:	01200034 	movhi	r4,32768
 40004c4:	213fffc4 	addi	r4,r4,-1
 40004c8:	400a9780 	call	400a978 <__udivsi3>
 40004cc:	100b883a 	mov	r5,r2
 40004d0:	e13fff17 	ldw	r4,-4(fp)
 40004d4:	400a9780 	call	400a978 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 40004d8:	e0bffe15 	stw	r2,-8(fp)

  if (big_loops)
 40004dc:	e0bffe17 	ldw	r2,-8(fp)
 40004e0:	10002a26 	beq	r2,zero,400058c <_Z14alt_busy_sleepj+0x10c>
  {
    for(i=0;i<big_loops;i++)
 40004e4:	e03ffc15 	stw	zero,-16(fp)
 40004e8:	e0fffc17 	ldw	r3,-16(fp)
 40004ec:	e0bffe17 	ldw	r2,-8(fp)
 40004f0:	1880180e 	bge	r3,r2,4000554 <_Z14alt_busy_sleepj+0xd4>
        "\n\tbne %0,zero,0b"
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
 40004f4:	00a00034 	movhi	r2,32768
 40004f8:	10bfffc4 	addi	r2,r2,-1
 40004fc:	10bfffc4 	addi	r2,r2,-1
 4000500:	103ffe1e 	bne	r2,zero,40004fc <__alt_data_end+0xfc0004fc>
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4000504:	014003f4 	movhi	r5,15
 4000508:	29509004 	addi	r5,r5,16960
 400050c:	e13ffd17 	ldw	r4,-12(fp)
 4000510:	400aa340 	call	400aa34 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4000514:	100b883a 	mov	r5,r2
 4000518:	0101fb74 	movhi	r4,2029
 400051c:	211ad004 	addi	r4,r4,27456
 4000520:	400a9780 	call	400a978 <__udivsi3>
 4000524:	100b883a 	mov	r5,r2
 4000528:	01200034 	movhi	r4,32768
 400052c:	213fffc4 	addi	r4,r4,-1
 4000530:	400a9780 	call	400a978 <__udivsi3>
 4000534:	1007883a 	mov	r3,r2
      (cycles_per_loop * 1000000)));
 4000538:	e0bfff17 	ldw	r2,-4(fp)
 400053c:	10c5c83a 	sub	r2,r2,r3
 4000540:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4000544:	e0bffc17 	ldw	r2,-16(fp)
 4000548:	10800044 	addi	r2,r2,1
 400054c:	e0bffc15 	stw	r2,-16(fp)
 4000550:	003fe506 	br	40004e8 <__alt_data_end+0xfc0004e8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4000554:	014003f4 	movhi	r5,15
 4000558:	29509004 	addi	r5,r5,16960
 400055c:	e13ffd17 	ldw	r4,-12(fp)
 4000560:	400aa340 	call	400aa34 <__mulsi3>
 4000564:	100b883a 	mov	r5,r2
 4000568:	0101fb74 	movhi	r4,2029
 400056c:	211ad004 	addi	r4,r4,27456
 4000570:	400a9780 	call	400a978 <__udivsi3>
 4000574:	e17fff17 	ldw	r5,-4(fp)
 4000578:	1009883a 	mov	r4,r2
 400057c:	400aa340 	call	400aa34 <__mulsi3>
 4000580:	10bfffc4 	addi	r2,r2,-1
 4000584:	103ffe1e 	bne	r2,zero,4000580 <__alt_data_end+0xfc000580>
 4000588:	00000d06 	br	40005c0 <_Z14alt_busy_sleepj+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 400058c:	014003f4 	movhi	r5,15
 4000590:	29509004 	addi	r5,r5,16960
 4000594:	e13ffd17 	ldw	r4,-12(fp)
 4000598:	400aa340 	call	400aa34 <__mulsi3>
 400059c:	100b883a 	mov	r5,r2
 40005a0:	0101fb74 	movhi	r4,2029
 40005a4:	211ad004 	addi	r4,r4,27456
 40005a8:	400a9780 	call	400a978 <__udivsi3>
 40005ac:	e17fff17 	ldw	r5,-4(fp)
 40005b0:	1009883a 	mov	r4,r2
 40005b4:	400aa340 	call	400aa34 <__mulsi3>
 40005b8:	10bfffc4 	addi	r2,r2,-1
 40005bc:	00bffe16 	blt	zero,r2,40005b8 <__alt_data_end+0xfc0005b8>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 40005c0:	0005883a 	mov	r2,zero
}
 40005c4:	e037883a 	mov	sp,fp
 40005c8:	dfc00117 	ldw	ra,4(sp)
 40005cc:	df000017 	ldw	fp,0(sp)
 40005d0:	dec00204 	addi	sp,sp,8
 40005d4:	f800283a 	ret

040005d8 <_Z5delaym>:

void delay(uint32_t a) {
 40005d8:	defffc04 	addi	sp,sp,-16
 40005dc:	dfc00315 	stw	ra,12(sp)
 40005e0:	df000215 	stw	fp,8(sp)
 40005e4:	df000204 	addi	fp,sp,8
 40005e8:	e13fff15 	stw	r4,-4(fp)
//	alt_busy_sleep(1000*a);
	clock_t start = clock();
 40005ec:	400af940 	call	400af94 <clock>
 40005f0:	e0bffe15 	stw	r2,-8(fp)
	while (clock() - start < a) {}
 40005f4:	400af940 	call	400af94 <clock>
 40005f8:	1007883a 	mov	r3,r2
 40005fc:	e0bffe17 	ldw	r2,-8(fp)
 4000600:	1887c83a 	sub	r3,r3,r2
 4000604:	e0bfff17 	ldw	r2,-4(fp)
 4000608:	1885803a 	cmpltu	r2,r3,r2
 400060c:	10803fcc 	andi	r2,r2,255
 4000610:	10000126 	beq	r2,zero,4000618 <_Z5delaym+0x40>
 4000614:	003ff706 	br	40005f4 <__alt_data_end+0xfc0005f4>
}
 4000618:	0001883a 	nop
 400061c:	e037883a 	mov	sp,fp
 4000620:	dfc00117 	ldw	ra,4(sp)
 4000624:	df000017 	ldw	fp,0(sp)
 4000628:	dec00204 	addi	sp,sp,8
 400062c:	f800283a 	ret

04000630 <_Z6millisv>:
uint32_t millis() {
 4000630:	defffe04 	addi	sp,sp,-8
 4000634:	dfc00115 	stw	ra,4(sp)
 4000638:	df000015 	stw	fp,0(sp)
 400063c:	d839883a 	mov	fp,sp
	return (uint32_t) clock();
 4000640:	400af940 	call	400af94 <clock>
}
 4000644:	e037883a 	mov	sp,fp
 4000648:	dfc00117 	ldw	ra,4(sp)
 400064c:	df000017 	ldw	fp,0(sp)
 4000650:	dec00204 	addi	sp,sp,8
 4000654:	f800283a 	ret

04000658 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 4000658:	defffd04 	addi	sp,sp,-12
 400065c:	dfc00215 	stw	ra,8(sp)
 4000660:	df000115 	stw	fp,4(sp)
 4000664:	df000104 	addi	fp,sp,4
 4000668:	e13fff15 	stw	r4,-4(fp)
 400066c:	e13fff17 	ldw	r4,-4(fp)
 4000670:	4006b880 	call	4006b88 <_ZN8MAX3421eC1Ev>
 4000674:	e0bfff17 	ldw	r2,-4(fp)
 4000678:	1009883a 	mov	r4,r2
 400067c:	4002bc40 	call	4002bc4 <_ZN15AddressPoolImplILh16EEC1Ev>
 4000680:	e0bfff17 	ldw	r2,-4(fp)
 4000684:	10002e05 	stb	zero,184(r2)
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 4000688:	00800444 	movi	r2,17
 400068c:	d0b23145 	stb	r2,-14139(gp)
        init();
 4000690:	e13fff17 	ldw	r4,-4(fp)
 4000694:	40006b00 	call	40006b0 <_ZN3USB4initEv>
}
 4000698:	0001883a 	nop
 400069c:	e037883a 	mov	sp,fp
 40006a0:	dfc00117 	ldw	ra,4(sp)
 40006a4:	df000017 	ldw	fp,0(sp)
 40006a8:	dec00204 	addi	sp,sp,8
 40006ac:	f800283a 	ret

040006b0 <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 40006b0:	defffe04 	addi	sp,sp,-8
 40006b4:	df000115 	stw	fp,4(sp)
 40006b8:	df000104 	addi	fp,sp,4
 40006bc:	e13fff15 	stw	r4,-4(fp)
        //devConfigIndex = 0;
        bmHubPre = 0;
 40006c0:	e0bfff17 	ldw	r2,-4(fp)
 40006c4:	10002e05 	stb	zero,184(r2)
}
 40006c8:	0001883a 	nop
 40006cc:	e037883a 	mov	sp,fp
 40006d0:	df000017 	ldw	fp,0(sp)
 40006d4:	dec00104 	addi	sp,sp,4
 40006d8:	f800283a 	ret

040006dc <_ZN3USB15getUsbTaskStateEv>:

uint8_t USB::getUsbTaskState(void) {
 40006dc:	defffe04 	addi	sp,sp,-8
 40006e0:	df000115 	stw	fp,4(sp)
 40006e4:	df000104 	addi	fp,sp,4
 40006e8:	e13fff15 	stw	r4,-4(fp)
        return ( usb_task_state);
 40006ec:	d0b23143 	ldbu	r2,-14139(gp)
}
 40006f0:	e037883a 	mov	sp,fp
 40006f4:	df000017 	ldw	fp,0(sp)
 40006f8:	dec00104 	addi	sp,sp,4
 40006fc:	f800283a 	ret

04000700 <_ZN3USB15setUsbTaskStateEh>:

void USB::setUsbTaskState(uint8_t state) {
 4000700:	defffd04 	addi	sp,sp,-12
 4000704:	df000215 	stw	fp,8(sp)
 4000708:	df000204 	addi	fp,sp,8
 400070c:	e13ffe15 	stw	r4,-8(fp)
 4000710:	2805883a 	mov	r2,r5
 4000714:	e0bfff05 	stb	r2,-4(fp)
        usb_task_state = state;
 4000718:	e0bfff03 	ldbu	r2,-4(fp)
 400071c:	d0b23145 	stb	r2,-14139(gp)
}
 4000720:	0001883a 	nop
 4000724:	e037883a 	mov	sp,fp
 4000728:	df000017 	ldw	fp,0(sp)
 400072c:	dec00104 	addi	sp,sp,4
 4000730:	f800283a 	ret

04000734 <_ZN3USB14getEpInfoEntryEhh>:

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 4000734:	defff804 	addi	sp,sp,-32
 4000738:	dfc00715 	stw	ra,28(sp)
 400073c:	df000615 	stw	fp,24(sp)
 4000740:	df000604 	addi	fp,sp,24
 4000744:	e13ffd15 	stw	r4,-12(fp)
 4000748:	2807883a 	mov	r3,r5
 400074c:	3005883a 	mov	r2,r6
 4000750:	e0fffe05 	stb	r3,-8(fp)
 4000754:	e0bfff05 	stb	r2,-4(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 4000758:	e0bffd17 	ldw	r2,-12(fp)
 400075c:	e0fffe03 	ldbu	r3,-8(fp)
 4000760:	180b883a 	mov	r5,r3
 4000764:	1009883a 	mov	r4,r2
 4000768:	4002c900 	call	4002c90 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 400076c:	e0bffc15 	stw	r2,-16(fp)

        if(!p || !p->epinfo)
 4000770:	e0bffc17 	ldw	r2,-16(fp)
 4000774:	10000c26 	beq	r2,zero,40007a8 <_ZN3USB14getEpInfoEntryEhh+0x74>
 4000778:	e0bffc17 	ldw	r2,-16(fp)
 400077c:	10c00003 	ldbu	r3,0(r2)
 4000780:	11000043 	ldbu	r4,1(r2)
 4000784:	2008923a 	slli	r4,r4,8
 4000788:	20c6b03a 	or	r3,r4,r3
 400078c:	11000083 	ldbu	r4,2(r2)
 4000790:	2008943a 	slli	r4,r4,16
 4000794:	20c6b03a 	or	r3,r4,r3
 4000798:	108000c3 	ldbu	r2,3(r2)
 400079c:	1004963a 	slli	r2,r2,24
 40007a0:	10c4b03a 	or	r2,r2,r3
 40007a4:	1000021e 	bne	r2,zero,40007b0 <_ZN3USB14getEpInfoEntryEhh+0x7c>
                return NULL;
 40007a8:	0005883a 	mov	r2,zero
 40007ac:	00002106 	br	4000834 <_ZN3USB14getEpInfoEntryEhh+0x100>

        EpInfo *pep = p->epinfo;
 40007b0:	e0bffc17 	ldw	r2,-16(fp)
 40007b4:	10c00003 	ldbu	r3,0(r2)
 40007b8:	11000043 	ldbu	r4,1(r2)
 40007bc:	2008923a 	slli	r4,r4,8
 40007c0:	20c6b03a 	or	r3,r4,r3
 40007c4:	11000083 	ldbu	r4,2(r2)
 40007c8:	2008943a 	slli	r4,r4,16
 40007cc:	20c6b03a 	or	r3,r4,r3
 40007d0:	108000c3 	ldbu	r2,3(r2)
 40007d4:	1004963a 	slli	r2,r2,24
 40007d8:	10c4b03a 	or	r2,r2,r3
 40007dc:	e0bffa15 	stw	r2,-24(fp)

        for(uint8_t i = 0; i < p->epcount; i++) {
 40007e0:	e03ffb05 	stb	zero,-20(fp)
 40007e4:	e0bffc17 	ldw	r2,-16(fp)
 40007e8:	10800143 	ldbu	r2,5(r2)
 40007ec:	10803fcc 	andi	r2,r2,255
 40007f0:	e0fffb03 	ldbu	r3,-20(fp)
 40007f4:	18800e2e 	bgeu	r3,r2,4000830 <_ZN3USB14getEpInfoEntryEhh+0xfc>
                if((pep)->epAddr == ep)
 40007f8:	e0bffa17 	ldw	r2,-24(fp)
 40007fc:	10800003 	ldbu	r2,0(r2)
 4000800:	10c03fcc 	andi	r3,r2,255
 4000804:	e0bfff03 	ldbu	r2,-4(fp)
 4000808:	1880021e 	bne	r3,r2,4000814 <_ZN3USB14getEpInfoEntryEhh+0xe0>
                        return pep;
 400080c:	e0bffa17 	ldw	r2,-24(fp)
 4000810:	00000806 	br	4000834 <_ZN3USB14getEpInfoEntryEhh+0x100>

                pep++;
 4000814:	e0bffa17 	ldw	r2,-24(fp)
 4000818:	108000c4 	addi	r2,r2,3
 400081c:	e0bffa15 	stw	r2,-24(fp)
        if(!p || !p->epinfo)
                return NULL;

        EpInfo *pep = p->epinfo;

        for(uint8_t i = 0; i < p->epcount; i++) {
 4000820:	e0bffb03 	ldbu	r2,-20(fp)
 4000824:	10800044 	addi	r2,r2,1
 4000828:	e0bffb05 	stb	r2,-20(fp)
 400082c:	003fed06 	br	40007e4 <__alt_data_end+0xfc0007e4>
                if((pep)->epAddr == ep)
                        return pep;

                pep++;
        }
        return NULL;
 4000830:	0005883a 	mov	r2,zero
}
 4000834:	e037883a 	mov	sp,fp
 4000838:	dfc00117 	ldw	ra,4(sp)
 400083c:	df000017 	ldw	fp,0(sp)
 4000840:	dec00204 	addi	sp,sp,8
 4000844:	f800283a 	ret

04000848 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 4000848:	defff904 	addi	sp,sp,-28
 400084c:	dfc00615 	stw	ra,24(sp)
 4000850:	df000515 	stw	fp,20(sp)
 4000854:	df000504 	addi	fp,sp,20
 4000858:	e13ffc15 	stw	r4,-16(fp)
 400085c:	2807883a 	mov	r3,r5
 4000860:	3005883a 	mov	r2,r6
 4000864:	e1ffff15 	stw	r7,-4(fp)
 4000868:	e0fffd05 	stb	r3,-12(fp)
 400086c:	e0bffe05 	stb	r2,-8(fp)
        if(!eprecord_ptr)
 4000870:	e0bfff17 	ldw	r2,-4(fp)
 4000874:	1000021e 	bne	r2,zero,4000880 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x38>
                return USB_ERROR_INVALID_ARGUMENT;
 4000878:	00bff604 	movi	r2,-40
 400087c:	00003406 	br	4000950 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 4000880:	e0bffc17 	ldw	r2,-16(fp)
 4000884:	e0fffd03 	ldbu	r3,-12(fp)
 4000888:	180b883a 	mov	r5,r3
 400088c:	1009883a 	mov	r4,r2
 4000890:	4002c900 	call	4002c90 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 4000894:	e0bffb15 	stw	r2,-20(fp)

        if(!p)
 4000898:	e0bffb17 	ldw	r2,-20(fp)
 400089c:	1000021e 	bne	r2,zero,40008a8 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x60>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 40008a0:	00bff584 	movi	r2,-42
 40008a4:	00002a06 	br	4000950 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        p->address.devAddress = addr;
 40008a8:	e0bffb17 	ldw	r2,-20(fp)
 40008ac:	e0fffd03 	ldbu	r3,-12(fp)
 40008b0:	10c00105 	stb	r3,4(r2)
        p->epinfo = eprecord_ptr;
 40008b4:	e0bffb17 	ldw	r2,-20(fp)
 40008b8:	e0ffff17 	ldw	r3,-4(fp)
 40008bc:	19403fcc 	andi	r5,r3,255
 40008c0:	10c00003 	ldbu	r3,0(r2)
 40008c4:	1806703a 	and	r3,r3,zero
 40008c8:	1809883a 	mov	r4,r3
 40008cc:	2807883a 	mov	r3,r5
 40008d0:	20c6b03a 	or	r3,r4,r3
 40008d4:	10c00005 	stb	r3,0(r2)
 40008d8:	e0ffff17 	ldw	r3,-4(fp)
 40008dc:	1806d23a 	srli	r3,r3,8
 40008e0:	19403fcc 	andi	r5,r3,255
 40008e4:	10c00043 	ldbu	r3,1(r2)
 40008e8:	1806703a 	and	r3,r3,zero
 40008ec:	1809883a 	mov	r4,r3
 40008f0:	2807883a 	mov	r3,r5
 40008f4:	20c6b03a 	or	r3,r4,r3
 40008f8:	10c00045 	stb	r3,1(r2)
 40008fc:	e0ffff17 	ldw	r3,-4(fp)
 4000900:	1806d43a 	srli	r3,r3,16
 4000904:	19403fcc 	andi	r5,r3,255
 4000908:	10c00083 	ldbu	r3,2(r2)
 400090c:	1806703a 	and	r3,r3,zero
 4000910:	1809883a 	mov	r4,r3
 4000914:	2807883a 	mov	r3,r5
 4000918:	20c6b03a 	or	r3,r4,r3
 400091c:	10c00085 	stb	r3,2(r2)
 4000920:	e0ffff17 	ldw	r3,-4(fp)
 4000924:	180ad63a 	srli	r5,r3,24
 4000928:	10c000c3 	ldbu	r3,3(r2)
 400092c:	1806703a 	and	r3,r3,zero
 4000930:	1809883a 	mov	r4,r3
 4000934:	2807883a 	mov	r3,r5
 4000938:	20c6b03a 	or	r3,r4,r3
 400093c:	10c000c5 	stb	r3,3(r2)
        p->epcount = epcount;
 4000940:	e0bffb17 	ldw	r2,-20(fp)
 4000944:	e0fffe03 	ldbu	r3,-8(fp)
 4000948:	10c00145 	stb	r3,5(r2)

        return 0;
 400094c:	0005883a 	mov	r2,zero
}
 4000950:	e037883a 	mov	sp,fp
 4000954:	dfc00117 	ldw	ra,4(sp)
 4000958:	df000017 	ldw	fp,0(sp)
 400095c:	dec00204 	addi	sp,sp,8
 4000960:	f800283a 	ret

04000964 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 4000964:	defff804 	addi	sp,sp,-32
 4000968:	dfc00715 	stw	ra,28(sp)
 400096c:	df000615 	stw	fp,24(sp)
 4000970:	df000604 	addi	fp,sp,24
 4000974:	e13ffc15 	stw	r4,-16(fp)
 4000978:	2807883a 	mov	r3,r5
 400097c:	3005883a 	mov	r2,r6
 4000980:	e1ffff15 	stw	r7,-4(fp)
 4000984:	e0fffd05 	stb	r3,-12(fp)
 4000988:	e0bffe05 	stb	r2,-8(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 400098c:	e0bffc17 	ldw	r2,-16(fp)
 4000990:	e0fffd03 	ldbu	r3,-12(fp)
 4000994:	180b883a 	mov	r5,r3
 4000998:	1009883a 	mov	r4,r2
 400099c:	4002c900 	call	4002c90 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 40009a0:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
 40009a4:	e0bffa17 	ldw	r2,-24(fp)
 40009a8:	1000021e 	bne	r2,zero,40009b4 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x50>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 40009ac:	00bff584 	movi	r2,-42
 40009b0:	00004a06 	br	4000adc <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        if(!p->epinfo)
 40009b4:	e0bffa17 	ldw	r2,-24(fp)
 40009b8:	10c00003 	ldbu	r3,0(r2)
 40009bc:	11000043 	ldbu	r4,1(r2)
 40009c0:	2008923a 	slli	r4,r4,8
 40009c4:	20c6b03a 	or	r3,r4,r3
 40009c8:	11000083 	ldbu	r4,2(r2)
 40009cc:	2008943a 	slli	r4,r4,16
 40009d0:	20c6b03a 	or	r3,r4,r3
 40009d4:	108000c3 	ldbu	r2,3(r2)
 40009d8:	1004963a 	slli	r2,r2,24
 40009dc:	10c4b03a 	or	r2,r2,r3
 40009e0:	1000021e 	bne	r2,zero,40009ec <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x88>
                return USB_ERROR_EPINFO_IS_NULL;
 40009e4:	00bff5c4 	movi	r2,-41
 40009e8:	00003c06 	br	4000adc <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *ppep = getEpInfoEntry(addr, ep);
 40009ec:	e0bffd03 	ldbu	r2,-12(fp)
 40009f0:	e0fffe03 	ldbu	r3,-8(fp)
 40009f4:	180d883a 	mov	r6,r3
 40009f8:	100b883a 	mov	r5,r2
 40009fc:	e13ffc17 	ldw	r4,-16(fp)
 4000a00:	40007340 	call	4000734 <_ZN3USB14getEpInfoEntryEhh>
 4000a04:	1007883a 	mov	r3,r2
 4000a08:	e0bfff17 	ldw	r2,-4(fp)
 4000a0c:	10c00015 	stw	r3,0(r2)

        if(!*ppep)
 4000a10:	e0bfff17 	ldw	r2,-4(fp)
 4000a14:	10800017 	ldw	r2,0(r2)
 4000a18:	1000021e 	bne	r2,zero,4000a24 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc0>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 4000a1c:	00bff6c4 	movi	r2,-37
 4000a20:	00002e06 	br	4000adc <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 4000a24:	e0bfff17 	ldw	r2,-4(fp)
 4000a28:	10800017 	ldw	r2,0(r2)
 4000a2c:	10800083 	ldbu	r2,2(r2)
 4000a30:	1004d0ba 	srli	r2,r2,2
 4000a34:	10803fcc 	andi	r2,r2,255
 4000a38:	10c00410 	cmplti	r3,r2,16
 4000a3c:	1800011e 	bne	r3,zero,4000a44 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xe0>
 4000a40:	008003c4 	movi	r2,15
 4000a44:	00c00044 	movi	r3,1
 4000a48:	1884983a 	sll	r2,r3,r2
 4000a4c:	1007883a 	mov	r3,r2
 4000a50:	e0800217 	ldw	r2,8(fp)
 4000a54:	10c0000d 	sth	r3,0(r2)
        (*nak_limit)--;
 4000a58:	e0800217 	ldw	r2,8(fp)
 4000a5c:	1080000b 	ldhu	r2,0(r2)
 4000a60:	10bfffc4 	addi	r2,r2,-1
 4000a64:	1007883a 	mov	r3,r2
 4000a68:	e0800217 	ldw	r2,8(fp)
 4000a6c:	10c0000d 	sth	r3,0(r2)
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 4000a70:	e0bffd03 	ldbu	r2,-12(fp)
 4000a74:	100d883a 	mov	r6,r2
 4000a78:	01403804 	movi	r5,224
 4000a7c:	e13ffc17 	ldw	r4,-16(fp)
 4000a80:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>

        uint8_t mode = regRd(rMODE);
 4000a84:	01403604 	movi	r5,216
 4000a88:	e13ffc17 	ldw	r4,-16(fp)
 4000a8c:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 4000a90:	e0bffb05 	stb	r2,-20(fp)
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 4000a94:	e0bffa17 	ldw	r2,-24(fp)
 4000a98:	10800183 	ldbu	r2,6(r2)
 4000a9c:	10803fcc 	andi	r2,r2,255
 4000aa0:	10000726 	beq	r2,zero,4000ac0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x15c>
 4000aa4:	e0bffc17 	ldw	r2,-16(fp)
 4000aa8:	10c02e03 	ldbu	r3,184(r2)
 4000aac:	e0bffb03 	ldbu	r2,-20(fp)
 4000ab0:	1884b03a 	or	r2,r3,r2
 4000ab4:	10800094 	ori	r2,r2,2
 4000ab8:	10803fcc 	andi	r2,r2,255
 4000abc:	00000206 	br	4000ac8 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x164>
 4000ac0:	e0bffb03 	ldbu	r2,-20(fp)
 4000ac4:	10803e4c 	andi	r2,r2,249
 4000ac8:	100d883a 	mov	r6,r2
 4000acc:	01403604 	movi	r5,216
 4000ad0:	e13ffc17 	ldw	r4,-16(fp)
 4000ad4:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>

        return 0;
 4000ad8:	0005883a 	mov	r2,zero
}
 4000adc:	e037883a 	mov	sp,fp
 4000ae0:	dfc00117 	ldw	ra,4(sp)
 4000ae4:	df000017 	ldw	fp,0(sp)
 4000ae8:	dec00204 	addi	sp,sp,8
 4000aec:	f800283a 	ret

04000af0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 4000af0:	deffeb04 	addi	sp,sp,-84
 4000af4:	dfc01415 	stw	ra,80(sp)
 4000af8:	df001315 	stw	fp,76(sp)
 4000afc:	dc001215 	stw	r16,72(sp)
 4000b00:	df001304 	addi	fp,sp,76
 4000b04:	e13ff515 	stw	r4,-44(fp)
 4000b08:	2815883a 	mov	r10,r5
 4000b0c:	3013883a 	mov	r9,r6
 4000b10:	3811883a 	mov	r8,r7
 4000b14:	e1c00217 	ldw	r7,8(fp)
 4000b18:	e1800317 	ldw	r6,12(fp)
 4000b1c:	e1400417 	ldw	r5,16(fp)
 4000b20:	e1000517 	ldw	r4,20(fp)
 4000b24:	e0c00617 	ldw	r3,24(fp)
 4000b28:	e0800717 	ldw	r2,28(fp)
 4000b2c:	e2bff605 	stb	r10,-40(fp)
 4000b30:	e27ff705 	stb	r9,-36(fp)
 4000b34:	e23ff805 	stb	r8,-32(fp)
 4000b38:	e1fff905 	stb	r7,-28(fp)
 4000b3c:	e1bffa05 	stb	r6,-24(fp)
 4000b40:	e17ffb05 	stb	r5,-20(fp)
 4000b44:	e13ffc0d 	sth	r4,-16(fp)
 4000b48:	e0fffd0d 	sth	r3,-12(fp)
 4000b4c:	e0bffe0d 	sth	r2,-8(fp)
        bool direction = false; //request direction, IN or OUT
 4000b50:	e03ff005 	stb	zero,-64(fp)
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 4000b54:	e03ff315 	stw	zero,-52(fp)
        uint16_t nak_limit = 0;
 4000b58:	e03ff40d 	sth	zero,-48(fp)

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 4000b5c:	e0fff603 	ldbu	r3,-40(fp)
 4000b60:	e13ff703 	ldbu	r4,-36(fp)
 4000b64:	e17ff304 	addi	r5,fp,-52
 4000b68:	e0bff404 	addi	r2,fp,-48
 4000b6c:	d8800015 	stw	r2,0(sp)
 4000b70:	280f883a 	mov	r7,r5
 4000b74:	200d883a 	mov	r6,r4
 4000b78:	180b883a 	mov	r5,r3
 4000b7c:	e13ff517 	ldw	r4,-44(fp)
 4000b80:	40009640 	call	4000964 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 4000b84:	e0bfef05 	stb	r2,-68(fp)

        if(rcode)
 4000b88:	e0bfef03 	ldbu	r2,-68(fp)
 4000b8c:	10000226 	beq	r2,zero,4000b98 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa8>
                return rcode;
 4000b90:	e0bfef03 	ldbu	r2,-68(fp)
 4000b94:	00009406 	br	4000de8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        direction = ((bmReqType & 0x80) > 0);
 4000b98:	e0bff803 	ldbu	r2,-32(fp)
 4000b9c:	1080200c 	andi	r2,r2,128
 4000ba0:	0084803a 	cmplt	r2,zero,r2
 4000ba4:	e0bff005 	stb	r2,-64(fp)

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 4000ba8:	e0bff803 	ldbu	r2,-32(fp)
 4000bac:	e0bff105 	stb	r2,-60(fp)
        setup_pkt.bRequest = bRequest;
 4000bb0:	e0bff903 	ldbu	r2,-28(fp)
 4000bb4:	e0bff145 	stb	r2,-59(fp)
        setup_pkt.wVal_u.wValueLo = wValLo;
 4000bb8:	e0bffa03 	ldbu	r2,-24(fp)
 4000bbc:	e0bff185 	stb	r2,-58(fp)
        setup_pkt.wVal_u.wValueHi = wValHi;
 4000bc0:	e0bffb03 	ldbu	r2,-20(fp)
 4000bc4:	e0bff1c5 	stb	r2,-57(fp)
        setup_pkt.wIndex = wInd;
 4000bc8:	e0bffc0b 	ldhu	r2,-16(fp)
 4000bcc:	e0bff20d 	sth	r2,-56(fp)
        setup_pkt.wLength = total;
 4000bd0:	e0bffd0b 	ldhu	r2,-12(fp)
 4000bd4:	e0bff28d 	sth	r2,-54(fp)

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 4000bd8:	e0bff104 	addi	r2,fp,-60
 4000bdc:	100f883a 	mov	r7,r2
 4000be0:	01800204 	movi	r6,8
 4000be4:	01400804 	movi	r5,32
 4000be8:	e13ff517 	ldw	r4,-44(fp)
 4000bec:	4006c740 	call	4006c74 <_ZN8MAX3421e7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 4000bf0:	e0bff703 	ldbu	r2,-36(fp)
 4000bf4:	e0fff40b 	ldhu	r3,-48(fp)
 4000bf8:	18ffffcc 	andi	r3,r3,65535
 4000bfc:	180f883a 	mov	r7,r3
 4000c00:	100d883a 	mov	r6,r2
 4000c04:	01400404 	movi	r5,16
 4000c08:	e13ff517 	ldw	r4,-44(fp)
 4000c0c:	40015f00 	call	40015f0 <_ZN3USB11dispatchPktEhht>
 4000c10:	e0bfef05 	stb	r2,-68(fp)

        if(rcode) //return HRSLT if not zero
 4000c14:	e0bfef03 	ldbu	r2,-68(fp)
 4000c18:	10000226 	beq	r2,zero,4000c24 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x134>
                return ( rcode);
 4000c1c:	e0bfef03 	ldbu	r2,-68(fp)
 4000c20:	00007106 	br	4000de8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        if(dataptr != NULL) //data stage, if present
 4000c24:	e0800817 	ldw	r2,32(fp)
 4000c28:	10006226 	beq	r2,zero,4000db4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
        {
                if(direction) //IN transfer
 4000c2c:	e0bff003 	ldbu	r2,-64(fp)
 4000c30:	10004a26 	beq	r2,zero,4000d5c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x26c>
                {
                        uint16_t left = total;
 4000c34:	e0bffd0b 	ldhu	r2,-12(fp)
 4000c38:	e0bfef8d 	sth	r2,-66(fp)

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 4000c3c:	e0bff317 	ldw	r2,-52(fp)
 4000c40:	10c00083 	ldbu	r3,2(r2)
 4000c44:	18c00094 	ori	r3,r3,2
 4000c48:	10c00085 	stb	r3,2(r2)

                        while(left) {
 4000c4c:	e0bfef8b 	ldhu	r2,-66(fp)
 4000c50:	10005426 	beq	r2,zero,4000da4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 4000c54:	e0bffe0b 	ldhu	r2,-8(fp)
 4000c58:	e0bff48d 	sth	r2,-46(fp)
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 4000c5c:	e0fff317 	ldw	r3,-52(fp)
 4000c60:	e0bff40b 	ldhu	r2,-48(fp)
 4000c64:	113fffcc 	andi	r4,r2,65535
 4000c68:	e17ff484 	addi	r5,fp,-46
 4000c6c:	d8000115 	stw	zero,4(sp)
 4000c70:	e0800817 	ldw	r2,32(fp)
 4000c74:	d8800015 	stw	r2,0(sp)
 4000c78:	280f883a 	mov	r7,r5
 4000c7c:	200d883a 	mov	r6,r4
 4000c80:	180b883a 	mov	r5,r3
 4000c84:	e13ff517 	ldw	r4,-44(fp)
 4000c88:	4000ee80 	call	4000ee8 <_ZN3USB10InTransferEP6EpInfotPtPhh>
 4000c8c:	e0bfef05 	stb	r2,-68(fp)
                                if(rcode == hrTOGERR) {
 4000c90:	e0bfef03 	ldbu	r2,-68(fp)
 4000c94:	10800198 	cmpnei	r2,r2,6
 4000c98:	1000111e 	bne	r2,zero,4000ce0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1f0>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 4000c9c:	e43ff317 	ldw	r16,-52(fp)
 4000ca0:	01403e04 	movi	r5,248
 4000ca4:	e13ff517 	ldw	r4,-44(fp)
 4000ca8:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 4000cac:	10803fcc 	andi	r2,r2,255
 4000cb0:	1080080c 	andi	r2,r2,32
 4000cb4:	1005003a 	cmpeq	r2,r2,zero
 4000cb8:	1080004c 	andi	r2,r2,1
 4000cbc:	1089883a 	add	r4,r2,r2
 4000cc0:	80c00083 	ldbu	r3,2(r16)
 4000cc4:	00bfff44 	movi	r2,-3
 4000cc8:	1884703a 	and	r2,r3,r2
 4000ccc:	1007883a 	mov	r3,r2
 4000cd0:	2005883a 	mov	r2,r4
 4000cd4:	1884b03a 	or	r2,r3,r2
 4000cd8:	80800085 	stb	r2,2(r16)
 4000cdc:	003fdb06 	br	4000c4c <__alt_data_end+0xfc000c4c>
                                        continue;
                                }

                                if(rcode)
 4000ce0:	e0bfef03 	ldbu	r2,-68(fp)
 4000ce4:	10000226 	beq	r2,zero,4000cf0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x200>
                                        return rcode;
 4000ce8:	e0bfef03 	ldbu	r2,-68(fp)
 4000cec:	00003e06 	br	4000de8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 4000cf0:	e0bfef03 	ldbu	r2,-68(fp)
 4000cf4:	1000101e 	bne	r2,zero,4000d38 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
 4000cf8:	e0800917 	ldw	r2,36(fp)
 4000cfc:	10000e26 	beq	r2,zero,4000d38 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 4000d00:	e0800917 	ldw	r2,36(fp)
 4000d04:	10800017 	ldw	r2,0(r2)
 4000d08:	10800017 	ldw	r2,0(r2)
 4000d0c:	e0fff48b 	ldhu	r3,-46(fp)
 4000d10:	197fffcc 	andi	r5,r3,65535
 4000d14:	e13ffd0b 	ldhu	r4,-12(fp)
 4000d18:	e0ffef8b 	ldhu	r3,-66(fp)
 4000d1c:	20c7c83a 	sub	r3,r4,r3
 4000d20:	e0fff08d 	sth	r3,-62(fp)
 4000d24:	e0fff084 	addi	r3,fp,-62
 4000d28:	180f883a 	mov	r7,r3
 4000d2c:	e1800817 	ldw	r6,32(fp)
 4000d30:	e1000917 	ldw	r4,36(fp)
 4000d34:	103ee83a 	callr	r2

                                left -= read;
 4000d38:	e0bff48b 	ldhu	r2,-46(fp)
 4000d3c:	e0ffef8b 	ldhu	r3,-66(fp)
 4000d40:	1885c83a 	sub	r2,r3,r2
 4000d44:	e0bfef8d 	sth	r2,-66(fp)

                                if(read < nbytes)
 4000d48:	e0bff48b 	ldhu	r2,-46(fp)
 4000d4c:	10ffffcc 	andi	r3,r2,65535
 4000d50:	e0bffe0b 	ldhu	r2,-8(fp)
 4000d54:	18801236 	bltu	r3,r2,4000da0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b0>
                {
                        uint16_t left = total;

                        pep->bmRcvToggle = 1; //bmRCVTOG1;

                        while(left) {
 4000d58:	003fbc06 	br	4000c4c <__alt_data_end+0xfc000c4c>
                                if(read < nbytes)
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 4000d5c:	e0bff317 	ldw	r2,-52(fp)
 4000d60:	10c00083 	ldbu	r3,2(r2)
 4000d64:	18c00054 	ori	r3,r3,1
 4000d68:	10c00085 	stb	r3,2(r2)
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 4000d6c:	e0fff317 	ldw	r3,-52(fp)
 4000d70:	e0bff40b 	ldhu	r2,-48(fp)
 4000d74:	113fffcc 	andi	r4,r2,65535
 4000d78:	e17ffe0b 	ldhu	r5,-8(fp)
 4000d7c:	e0800817 	ldw	r2,32(fp)
 4000d80:	d8800015 	stw	r2,0(sp)
 4000d84:	280f883a 	mov	r7,r5
 4000d88:	200d883a 	mov	r6,r4
 4000d8c:	180b883a 	mov	r5,r3
 4000d90:	e13ff517 	ldw	r4,-44(fp)
 4000d94:	40012440 	call	4001244 <_ZN3USB11OutTransferEP6EpInfottPh>
 4000d98:	e0bfef05 	stb	r2,-68(fp)
 4000d9c:	00000106 	br	4000da4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);

                                left -= read;

                                if(read < nbytes)
                                        break;
 4000da0:	0001883a 	nop
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
                }
                if(rcode) //return error
 4000da4:	e0bfef03 	ldbu	r2,-68(fp)
 4000da8:	10000226 	beq	r2,zero,4000db4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
                        return ( rcode);
 4000dac:	e0bfef03 	ldbu	r2,-68(fp)
 4000db0:	00000d06 	br	4000de8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 4000db4:	e0bff003 	ldbu	r2,-64(fp)
 4000db8:	10000226 	beq	r2,zero,4000dc4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d4>
 4000dbc:	00802804 	movi	r2,160
 4000dc0:	00000106 	br	4000dc8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d8>
 4000dc4:	00802004 	movi	r2,128
 4000dc8:	e0fff703 	ldbu	r3,-36(fp)
 4000dcc:	e13ff40b 	ldhu	r4,-48(fp)
 4000dd0:	213fffcc 	andi	r4,r4,65535
 4000dd4:	200f883a 	mov	r7,r4
 4000dd8:	180d883a 	mov	r6,r3
 4000ddc:	100b883a 	mov	r5,r2
 4000de0:	e13ff517 	ldw	r4,-44(fp)
 4000de4:	40015f00 	call	40015f0 <_ZN3USB11dispatchPktEhht>
}
 4000de8:	e6ffff04 	addi	sp,fp,-4
 4000dec:	dfc00217 	ldw	ra,8(sp)
 4000df0:	df000117 	ldw	fp,4(sp)
 4000df4:	dc000017 	ldw	r16,0(sp)
 4000df8:	dec00304 	addi	sp,sp,12
 4000dfc:	f800283a 	ret

04000e00 <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 4000e00:	defff404 	addi	sp,sp,-48
 4000e04:	dfc00b15 	stw	ra,44(sp)
 4000e08:	df000a15 	stw	fp,40(sp)
 4000e0c:	df000a04 	addi	fp,sp,40
 4000e10:	e13ffb15 	stw	r4,-20(fp)
 4000e14:	2809883a 	mov	r4,r5
 4000e18:	3007883a 	mov	r3,r6
 4000e1c:	e1fffe15 	stw	r7,-8(fp)
 4000e20:	e0800317 	ldw	r2,12(fp)
 4000e24:	e13ffc05 	stb	r4,-16(fp)
 4000e28:	e0fffd05 	stb	r3,-12(fp)
 4000e2c:	e0bfff05 	stb	r2,-4(fp)
        EpInfo *pep = NULL;
 4000e30:	e03ff915 	stw	zero,-28(fp)
        uint16_t nak_limit = 0;
 4000e34:	e03ffa0d 	sth	zero,-24(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 4000e38:	e0fffc03 	ldbu	r3,-16(fp)
 4000e3c:	e13ffd03 	ldbu	r4,-12(fp)
 4000e40:	e17ff904 	addi	r5,fp,-28
 4000e44:	e0bffa04 	addi	r2,fp,-24
 4000e48:	d8800015 	stw	r2,0(sp)
 4000e4c:	280f883a 	mov	r7,r5
 4000e50:	200d883a 	mov	r6,r4
 4000e54:	180b883a 	mov	r5,r3
 4000e58:	e13ffb17 	ldw	r4,-20(fp)
 4000e5c:	40009640 	call	4000964 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 4000e60:	e0bff805 	stb	r2,-32(fp)

        if(rcode) {
 4000e64:	e0bff803 	ldbu	r2,-32(fp)
 4000e68:	10000e26 	beq	r2,zero,4000ea4 <_ZN3USB10inTransferEhhPtPhh+0xa4>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 4000e6c:	e0bff803 	ldbu	r2,-32(fp)
 4000e70:	01402044 	movi	r5,129
 4000e74:	1009883a 	mov	r4,r2
 4000e78:	4002d1c0 	call	4002d1c <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 4000e7c:	e0bffc03 	ldbu	r2,-16(fp)
 4000e80:	01402044 	movi	r5,129
 4000e84:	1009883a 	mov	r4,r2
 4000e88:	4002d1c0 	call	4002d1c <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 4000e8c:	e0bffd03 	ldbu	r2,-12(fp)
 4000e90:	01402044 	movi	r5,129
 4000e94:	1009883a 	mov	r4,r2
 4000e98:	4002d1c0 	call	4002d1c <_Z10D_PrintHexIhEvT_i>
                return rcode;
 4000e9c:	e0bff803 	ldbu	r2,-32(fp)
 4000ea0:	00000c06 	br	4000ed4 <_ZN3USB10inTransferEhhPtPhh+0xd4>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 4000ea4:	e0fff917 	ldw	r3,-28(fp)
 4000ea8:	e0bffa0b 	ldhu	r2,-24(fp)
 4000eac:	113fffcc 	andi	r4,r2,65535
 4000eb0:	e0bfff03 	ldbu	r2,-4(fp)
 4000eb4:	d8800115 	stw	r2,4(sp)
 4000eb8:	e0800217 	ldw	r2,8(fp)
 4000ebc:	d8800015 	stw	r2,0(sp)
 4000ec0:	e1fffe17 	ldw	r7,-8(fp)
 4000ec4:	200d883a 	mov	r6,r4
 4000ec8:	180b883a 	mov	r5,r3
 4000ecc:	e13ffb17 	ldw	r4,-20(fp)
 4000ed0:	4000ee80 	call	4000ee8 <_ZN3USB10InTransferEP6EpInfotPtPhh>
}
 4000ed4:	e037883a 	mov	sp,fp
 4000ed8:	dfc00117 	ldw	ra,4(sp)
 4000edc:	df000017 	ldw	fp,0(sp)
 4000ee0:	dec00204 	addi	sp,sp,8
 4000ee4:	f800283a 	ret

04000ee8 <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 4000ee8:	defff704 	addi	sp,sp,-36
 4000eec:	dfc00815 	stw	ra,32(sp)
 4000ef0:	df000715 	stw	fp,28(sp)
 4000ef4:	df000704 	addi	fp,sp,28
 4000ef8:	e13ffb15 	stw	r4,-20(fp)
 4000efc:	e17ffc15 	stw	r5,-16(fp)
 4000f00:	3007883a 	mov	r3,r6
 4000f04:	e1fffe15 	stw	r7,-8(fp)
 4000f08:	e0800317 	ldw	r2,12(fp)
 4000f0c:	e0fffd0d 	sth	r3,-12(fp)
 4000f10:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;
 4000f14:	e03ff905 	stb	zero,-28(fp)
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 4000f18:	e0bffe17 	ldw	r2,-8(fp)
 4000f1c:	1080000b 	ldhu	r2,0(r2)
 4000f20:	e0bffa0d 	sth	r2,-24(fp)
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 4000f24:	e0bffc17 	ldw	r2,-16(fp)
 4000f28:	10800043 	ldbu	r2,1(r2)
 4000f2c:	e0bffa85 	stb	r2,-22(fp)

        *nbytesptr = 0;
 4000f30:	e0bffe17 	ldw	r2,-8(fp)
 4000f34:	1000000d 	sth	zero,0(r2)
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 4000f38:	e0bffc17 	ldw	r2,-16(fp)
 4000f3c:	10800083 	ldbu	r2,2(r2)
 4000f40:	1080008c 	andi	r2,r2,2
 4000f44:	10803fcc 	andi	r2,r2,255
 4000f48:	10000226 	beq	r2,zero,4000f54 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x6c>
 4000f4c:	00800804 	movi	r2,32
 4000f50:	00000106 	br	4000f58 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x70>
 4000f54:	00800404 	movi	r2,16
 4000f58:	100d883a 	mov	r6,r2
 4000f5c:	01403a04 	movi	r5,232
 4000f60:	e13ffb17 	ldw	r4,-20(fp)
 4000f64:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 4000f68:	e0bffc17 	ldw	r2,-16(fp)
 4000f6c:	10800003 	ldbu	r2,0(r2)
 4000f70:	10803fcc 	andi	r2,r2,255
 4000f74:	e0fffd0b 	ldhu	r3,-12(fp)
 4000f78:	180f883a 	mov	r7,r3
 4000f7c:	100d883a 	mov	r6,r2
 4000f80:	000b883a 	mov	r5,zero
 4000f84:	e13ffb17 	ldw	r4,-20(fp)
 4000f88:	40015f00 	call	40015f0 <_ZN3USB11dispatchPktEhht>
 4000f8c:	e0bff905 	stb	r2,-28(fp)
                if(rcode == hrTOGERR) {
 4000f90:	e0bff903 	ldbu	r2,-28(fp)
 4000f94:	10800198 	cmpnei	r2,r2,6
 4000f98:	10001e1e 	bne	r2,zero,4001014 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x12c>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 4000f9c:	01403e04 	movi	r5,248
 4000fa0:	e13ffb17 	ldw	r4,-20(fp)
 4000fa4:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 4000fa8:	10803fcc 	andi	r2,r2,255
 4000fac:	1080040c 	andi	r2,r2,16
 4000fb0:	1005003a 	cmpeq	r2,r2,zero
 4000fb4:	1007883a 	mov	r3,r2
 4000fb8:	e0bffc17 	ldw	r2,-16(fp)
 4000fbc:	18c0004c 	andi	r3,r3,1
 4000fc0:	18cb883a 	add	r5,r3,r3
 4000fc4:	11000083 	ldbu	r4,2(r2)
 4000fc8:	00ffff44 	movi	r3,-3
 4000fcc:	20c6703a 	and	r3,r4,r3
 4000fd0:	1809883a 	mov	r4,r3
 4000fd4:	2807883a 	mov	r3,r5
 4000fd8:	20c6b03a 	or	r3,r4,r3
 4000fdc:	10c00085 	stb	r3,2(r2)
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 4000fe0:	e0bffc17 	ldw	r2,-16(fp)
 4000fe4:	10800083 	ldbu	r2,2(r2)
 4000fe8:	1080008c 	andi	r2,r2,2
 4000fec:	10803fcc 	andi	r2,r2,255
 4000ff0:	10000226 	beq	r2,zero,4000ffc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x114>
 4000ff4:	00800804 	movi	r2,32
 4000ff8:	00000106 	br	4001000 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x118>
 4000ffc:	00800404 	movi	r2,16
 4001000:	100d883a 	mov	r6,r2
 4001004:	01403a04 	movi	r5,232
 4001008:	e13ffb17 	ldw	r4,-20(fp)
 400100c:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
                        continue;
 4001010:	00005806 	br	4001174 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x28c>
                }
                if(rcode) {
 4001014:	e0bff903 	ldbu	r2,-28(fp)
 4001018:	1000571e 	bne	r2,zero,4001178 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x290>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 400101c:	01403204 	movi	r5,200
 4001020:	e13ffb17 	ldw	r4,-20(fp)
 4001024:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 4001028:	10803fcc 	andi	r2,r2,255
 400102c:	1080010c 	andi	r2,r2,4
 4001030:	1005003a 	cmpeq	r2,r2,zero
 4001034:	10803fcc 	andi	r2,r2,255
 4001038:	10000326 	beq	r2,zero,4001048 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x160>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 400103c:	00bffc04 	movi	r2,-16
 4001040:	e0bff905 	stb	r2,-28(fp)
                        break;
 4001044:	00004d06 	br	400117c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 4001048:	01400c04 	movi	r5,48
 400104c:	e13ffb17 	ldw	r4,-20(fp)
 4001050:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 4001054:	e0bff945 	stb	r2,-27(fp)
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 4001058:	e0bff943 	ldbu	r2,-27(fp)
 400105c:	10bfffcc 	andi	r2,r2,65535
 4001060:	e0fffa0b 	ldhu	r3,-24(fp)
 4001064:	1880022e 	bgeu	r3,r2,4001070 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x188>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 4001068:	e0bffa0b 	ldhu	r2,-24(fp)
 400106c:	e0bff945 	stb	r2,-27(fp)
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 4001070:	e0bffe17 	ldw	r2,-8(fp)
 4001074:	1080000b 	ldhu	r2,0(r2)
 4001078:	1007883a 	mov	r3,r2
 400107c:	e0bffa0b 	ldhu	r2,-24(fp)
 4001080:	10c5c83a 	sub	r2,r2,r3
 4001084:	e0bff98d 	sth	r2,-26(fp)

                if(mem_left < 0)
 4001088:	e0bff98f 	ldh	r2,-26(fp)
 400108c:	1000010e 	bge	r2,zero,4001094 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1ac>
                        mem_left = 0;
 4001090:	e03ff98d 	sth	zero,-26(fp)

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 4001094:	e0bff943 	ldbu	r2,-27(fp)
 4001098:	e0fff98f 	ldh	r3,-26(fp)
 400109c:	1880010e 	bge	r3,r2,40010a4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
 40010a0:	1805883a 	mov	r2,r3
 40010a4:	10803fcc 	andi	r2,r2,255
 40010a8:	e1c00217 	ldw	r7,8(fp)
 40010ac:	100d883a 	mov	r6,r2
 40010b0:	01400204 	movi	r5,8
 40010b4:	e13ffb17 	ldw	r4,-20(fp)
 40010b8:	4006e940 	call	4006e94 <_ZN8MAX3421e7bytesRdEhhPh>
 40010bc:	e0800215 	stw	r2,8(fp)

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 40010c0:	01800104 	movi	r6,4
 40010c4:	01403204 	movi	r5,200
 40010c8:	e13ffb17 	ldw	r4,-20(fp)
 40010cc:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 40010d0:	e0bffe17 	ldw	r2,-8(fp)
 40010d4:	10c0000b 	ldhu	r3,0(r2)
 40010d8:	e0bff943 	ldbu	r2,-27(fp)
 40010dc:	1885883a 	add	r2,r3,r2
 40010e0:	1007883a 	mov	r3,r2
 40010e4:	e0bffe17 	ldw	r2,-8(fp)
 40010e8:	10c0000d 	sth	r3,0(r2)

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 40010ec:	e0fff943 	ldbu	r3,-27(fp)
 40010f0:	e0bffa83 	ldbu	r2,-22(fp)
 40010f4:	18800536 	bltu	r3,r2,400110c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x224>
 40010f8:	e0bffe17 	ldw	r2,-8(fp)
 40010fc:	1080000b 	ldhu	r2,0(r2)
 4001100:	10ffffcc 	andi	r3,r2,65535
 4001104:	e0bffa0b 	ldhu	r2,-24(fp)
 4001108:	18801536 	bltu	r3,r2,4001160 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x278>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 400110c:	01403e04 	movi	r5,248
 4001110:	e13ffb17 	ldw	r4,-20(fp)
 4001114:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 4001118:	10803fcc 	andi	r2,r2,255
 400111c:	1080040c 	andi	r2,r2,16
 4001120:	10000226 	beq	r2,zero,400112c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x244>
 4001124:	00c00044 	movi	r3,1
 4001128:	00000106 	br	4001130 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x248>
 400112c:	0007883a 	mov	r3,zero
 4001130:	e0bffc17 	ldw	r2,-16(fp)
 4001134:	18c0004c 	andi	r3,r3,1
 4001138:	18cb883a 	add	r5,r3,r3
 400113c:	11000083 	ldbu	r4,2(r2)
 4001140:	00ffff44 	movi	r3,-3
 4001144:	20c6703a 	and	r3,r4,r3
 4001148:	1809883a 	mov	r4,r3
 400114c:	2807883a 	mov	r3,r5
 4001150:	20c6b03a 	or	r3,r4,r3
 4001154:	10c00085 	stb	r3,2(r2)
                        //printf("\r\n");
                        rcode = 0;
 4001158:	e03ff905 	stb	zero,-28(fp)
                        break;
 400115c:	00000706 	br	400117c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                } else if(bInterval > 0)
 4001160:	e0bfff03 	ldbu	r2,-4(fp)
 4001164:	103f8026 	beq	r2,zero,4000f68 <__alt_data_end+0xfc000f68>
                        delay(bInterval); // Delay according to polling interval
 4001168:	e0bfff03 	ldbu	r2,-4(fp)
 400116c:	1009883a 	mov	r4,r2
 4001170:	40005d80 	call	40005d8 <_Z5delaym>

        *nbytesptr = 0;
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value

        // use a 'break' to exit this loop
        while(1) {
 4001174:	003f7c06 	br	4000f68 <__alt_data_end+0xfc000f68>
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
                        continue;
                }
                if(rcode) {
                        //printf(">>>>>>>> Problem! dispatchPkt %2.2x\r\n", rcode);
                        break; //should be 0, indicating ACK. Else return error code.
 4001178:	0001883a 	nop
                        rcode = 0;
                        break;
                } else if(bInterval > 0)
                        delay(bInterval); // Delay according to polling interval
        } //while( 1 )
        return ( rcode);
 400117c:	e0bff903 	ldbu	r2,-28(fp)
}
 4001180:	e037883a 	mov	sp,fp
 4001184:	dfc00117 	ldw	ra,4(sp)
 4001188:	df000017 	ldw	fp,0(sp)
 400118c:	dec00204 	addi	sp,sp,8
 4001190:	f800283a 	ret

04001194 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 4001194:	defff604 	addi	sp,sp,-40
 4001198:	dfc00915 	stw	ra,36(sp)
 400119c:	df000815 	stw	fp,32(sp)
 40011a0:	df000804 	addi	fp,sp,32
 40011a4:	e13ffc15 	stw	r4,-16(fp)
 40011a8:	2809883a 	mov	r4,r5
 40011ac:	3007883a 	mov	r3,r6
 40011b0:	3805883a 	mov	r2,r7
 40011b4:	e13ffd05 	stb	r4,-12(fp)
 40011b8:	e0fffe05 	stb	r3,-8(fp)
 40011bc:	e0bfff0d 	sth	r2,-4(fp)
        EpInfo *pep = NULL;
 40011c0:	e03ffa15 	stw	zero,-24(fp)
        uint16_t nak_limit = 0;
 40011c4:	e03ffb0d 	sth	zero,-20(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 40011c8:	e0fffd03 	ldbu	r3,-12(fp)
 40011cc:	e13ffe03 	ldbu	r4,-8(fp)
 40011d0:	e17ffa04 	addi	r5,fp,-24
 40011d4:	e0bffb04 	addi	r2,fp,-20
 40011d8:	d8800015 	stw	r2,0(sp)
 40011dc:	280f883a 	mov	r7,r5
 40011e0:	200d883a 	mov	r6,r4
 40011e4:	180b883a 	mov	r5,r3
 40011e8:	e13ffc17 	ldw	r4,-16(fp)
 40011ec:	40009640 	call	4000964 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 40011f0:	e0bff905 	stb	r2,-28(fp)

        if(rcode)
 40011f4:	e0bff903 	ldbu	r2,-28(fp)
 40011f8:	10000226 	beq	r2,zero,4001204 <_ZN3USB11outTransferEhhtPh+0x70>
                return rcode;
 40011fc:	e0bff903 	ldbu	r2,-28(fp)
 4001200:	00000b06 	br	4001230 <_ZN3USB11outTransferEhhtPh+0x9c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 4001204:	e0fffa17 	ldw	r3,-24(fp)
 4001208:	e0bffb0b 	ldhu	r2,-20(fp)
 400120c:	113fffcc 	andi	r4,r2,65535
 4001210:	e17fff0b 	ldhu	r5,-4(fp)
 4001214:	e0800217 	ldw	r2,8(fp)
 4001218:	d8800015 	stw	r2,0(sp)
 400121c:	280f883a 	mov	r7,r5
 4001220:	200d883a 	mov	r6,r4
 4001224:	180b883a 	mov	r5,r3
 4001228:	e13ffc17 	ldw	r4,-16(fp)
 400122c:	40012440 	call	4001244 <_ZN3USB11OutTransferEP6EpInfottPh>
}
 4001230:	e037883a 	mov	sp,fp
 4001234:	dfc00117 	ldw	ra,4(sp)
 4001238:	df000017 	ldw	fp,0(sp)
 400123c:	dec00204 	addi	sp,sp,8
 4001240:	f800283a 	ret

04001244 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 4001244:	defff404 	addi	sp,sp,-48
 4001248:	dfc00b15 	stw	ra,44(sp)
 400124c:	df000a15 	stw	fp,40(sp)
 4001250:	df000a04 	addi	fp,sp,40
 4001254:	e13ffc15 	stw	r4,-16(fp)
 4001258:	e17ffd15 	stw	r5,-12(fp)
 400125c:	3007883a 	mov	r3,r6
 4001260:	3805883a 	mov	r2,r7
 4001264:	e0fffe0d 	sth	r3,-8(fp)
 4001268:	e0bfff0d 	sth	r2,-4(fp)
        uint8_t rcode = hrSUCCESS, retry_count;
 400126c:	e03ff605 	stb	zero,-40(fp)
        uint8_t *data_p = data; //local copy of the data pointer
 4001270:	e0800217 	ldw	r2,8(fp)
 4001274:	e0bff715 	stw	r2,-36(fp)
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 4001278:	e0bfff0b 	ldhu	r2,-4(fp)
 400127c:	e0bff88d 	sth	r2,-30(fp)

        uint8_t maxpktsize = pep->maxPktSize;
 4001280:	e0bffd17 	ldw	r2,-12(fp)
 4001284:	10800043 	ldbu	r2,1(r2)
 4001288:	e0bff905 	stb	r2,-28(fp)

        if(maxpktsize < 1 || maxpktsize > 64)
 400128c:	e0bff903 	ldbu	r2,-28(fp)
 4001290:	10000326 	beq	r2,zero,40012a0 <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
 4001294:	e0bff903 	ldbu	r2,-28(fp)
 4001298:	10801070 	cmpltui	r2,r2,65
 400129c:	1000021e 	bne	r2,zero,40012a8 <_ZN3USB11OutTransferEP6EpInfottPh+0x64>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 40012a0:	00bff684 	movi	r2,-38
 40012a4:	0000cd06 	br	40015dc <_ZN3USB11OutTransferEP6EpInfottPh+0x398>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 40012a8:	40006300 	call	4000630 <_Z6millisv>
 40012ac:	1084e204 	addi	r2,r2,5000
 40012b0:	e0bffa15 	stw	r2,-24(fp)

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 40012b4:	e0bffd17 	ldw	r2,-12(fp)
 40012b8:	10800083 	ldbu	r2,2(r2)
 40012bc:	1080004c 	andi	r2,r2,1
 40012c0:	10803fcc 	andi	r2,r2,255
 40012c4:	10000226 	beq	r2,zero,40012d0 <_ZN3USB11OutTransferEP6EpInfottPh+0x8c>
 40012c8:	00802004 	movi	r2,128
 40012cc:	00000106 	br	40012d4 <_ZN3USB11OutTransferEP6EpInfottPh+0x90>
 40012d0:	00801004 	movi	r2,64
 40012d4:	100d883a 	mov	r6,r2
 40012d8:	01403a04 	movi	r5,232
 40012dc:	e13ffc17 	ldw	r4,-16(fp)
 40012e0:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>

        while(bytes_left) {
 40012e4:	e0bff88b 	ldhu	r2,-30(fp)
 40012e8:	1000a926 	beq	r2,zero,4001590 <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 40012ec:	e03ff645 	stb	zero,-39(fp)
                nak_count = 0;
 40012f0:	e03ff80d 	sth	zero,-32(fp)
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 40012f4:	e0bff903 	ldbu	r2,-28(fp)
 40012f8:	e17ff88b 	ldhu	r5,-30(fp)
 40012fc:	10ffffcc 	andi	r3,r2,65535
 4001300:	293fffcc 	andi	r4,r5,65535
 4001304:	20c0012e 	bgeu	r4,r3,400130c <_ZN3USB11OutTransferEP6EpInfottPh+0xc8>
 4001308:	2805883a 	mov	r2,r5
 400130c:	e0bffb0d 	sth	r2,-20(fp)
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 4001310:	e0bffb0b 	ldhu	r2,-20(fp)
 4001314:	10803fcc 	andi	r2,r2,255
 4001318:	e1fff717 	ldw	r7,-36(fp)
 400131c:	100d883a 	mov	r6,r2
 4001320:	01400404 	movi	r5,16
 4001324:	e13ffc17 	ldw	r4,-16(fp)
 4001328:	4006c740 	call	4006c74 <_ZN8MAX3421e7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 400132c:	e0bffb0b 	ldhu	r2,-20(fp)
 4001330:	10803fcc 	andi	r2,r2,255
 4001334:	100d883a 	mov	r6,r2
 4001338:	01400e04 	movi	r5,56
 400133c:	e13ffc17 	ldw	r4,-16(fp)
 4001340:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 4001344:	e0bffd17 	ldw	r2,-12(fp)
 4001348:	10800003 	ldbu	r2,0(r2)
 400134c:	10800814 	ori	r2,r2,32
 4001350:	10803fcc 	andi	r2,r2,255
 4001354:	100d883a 	mov	r6,r2
 4001358:	01403c04 	movi	r5,240
 400135c:	e13ffc17 	ldw	r4,-16(fp)
 4001360:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 4001364:	01403204 	movi	r5,200
 4001368:	e13ffc17 	ldw	r4,-16(fp)
 400136c:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 4001370:	0084303a 	nor	r2,zero,r2
 4001374:	10803fcc 	andi	r2,r2,255
 4001378:	1004d1fa 	srli	r2,r2,7
 400137c:	10803fcc 	andi	r2,r2,255
 4001380:	10000126 	beq	r2,zero,4001388 <_ZN3USB11OutTransferEP6EpInfottPh+0x144>
 4001384:	003ff706 	br	4001364 <__alt_data_end+0xfc001364>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 4001388:	01802004 	movi	r6,128
 400138c:	01403204 	movi	r5,200
 4001390:	e13ffc17 	ldw	r4,-16(fp)
 4001394:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 4001398:	01403e04 	movi	r5,248
 400139c:	e13ffc17 	ldw	r4,-16(fp)
 40013a0:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 40013a4:	108003cc 	andi	r2,r2,15
 40013a8:	e0bff605 	stb	r2,-40(fp)

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 40013ac:	e0bff603 	ldbu	r2,-40(fp)
 40013b0:	10000726 	beq	r2,zero,40013d0 <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 40013b4:	40006300 	call	4000630 <_Z6millisv>
 40013b8:	1007883a 	mov	r3,r2
 40013bc:	e0bffa17 	ldw	r2,-24(fp)
 40013c0:	1885c83a 	sub	r2,r3,r2
 40013c4:	1000020e 	bge	r2,zero,40013d0 <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 40013c8:	00800044 	movi	r2,1
 40013cc:	00000106 	br	40013d4 <_ZN3USB11OutTransferEP6EpInfottPh+0x190>
 40013d0:	0005883a 	mov	r2,zero
 40013d4:	10803fcc 	andi	r2,r2,255
 40013d8:	10006426 	beq	r2,zero,400156c <_ZN3USB11OutTransferEP6EpInfottPh+0x328>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 40013dc:	e0bff603 	ldbu	r2,-40(fp)
 40013e0:	10c001a0 	cmpeqi	r3,r2,6
 40013e4:	1800151e 	bne	r3,zero,400143c <_ZN3USB11OutTransferEP6EpInfottPh+0x1f8>
 40013e8:	10c003a0 	cmpeqi	r3,r2,14
 40013ec:	18000c1e 	bne	r3,zero,4001420 <_ZN3USB11OutTransferEP6EpInfottPh+0x1dc>
 40013f0:	10800120 	cmpeqi	r2,r2,4
 40013f4:	1000011e 	bne	r2,zero,40013fc <_ZN3USB11OutTransferEP6EpInfottPh+0x1b8>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 40013f8:	00006506 	br	4001590 <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
                                case hrNAK:
                                        nak_count++;
 40013fc:	e0bff80b 	ldhu	r2,-32(fp)
 4001400:	10800044 	addi	r2,r2,1
 4001404:	e0bff80d 	sth	r2,-32(fp)
                                        if(nak_limit && (nak_count == nak_limit))
 4001408:	e0bffe0b 	ldhu	r2,-8(fp)
 400140c:	10002826 	beq	r2,zero,40014b0 <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
 4001410:	e0fff80b 	ldhu	r3,-32(fp)
 4001414:	e0bffe0b 	ldhu	r2,-8(fp)
 4001418:	1880251e 	bne	r3,r2,40014b0 <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
                                                goto breakout;
 400141c:	00005c06 	br	4001590 <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTIMEOUT:
                                        retry_count++;
 4001420:	e0bff643 	ldbu	r2,-39(fp)
 4001424:	10800044 	addi	r2,r2,1
 4001428:	e0bff645 	stb	r2,-39(fp)
                                        if(retry_count == USB_RETRY_LIMIT)
 400142c:	e0bff643 	ldbu	r2,-39(fp)
 4001430:	108000d8 	cmpnei	r2,r2,3
 4001434:	1000201e 	bne	r2,zero,40014b8 <_ZN3USB11OutTransferEP6EpInfottPh+0x274>
                                                goto breakout;
 4001438:	00005506 	br	4001590 <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTOGERR:
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 400143c:	01403e04 	movi	r5,248
 4001440:	e13ffc17 	ldw	r4,-16(fp)
 4001444:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 4001448:	10803fcc 	andi	r2,r2,255
 400144c:	1080080c 	andi	r2,r2,32
 4001450:	1005003a 	cmpeq	r2,r2,zero
 4001454:	1007883a 	mov	r3,r2
 4001458:	e0bffd17 	ldw	r2,-12(fp)
 400145c:	1940004c 	andi	r5,r3,1
 4001460:	11000083 	ldbu	r4,2(r2)
 4001464:	00ffff84 	movi	r3,-2
 4001468:	20c6703a 	and	r3,r4,r3
 400146c:	1809883a 	mov	r4,r3
 4001470:	2807883a 	mov	r3,r5
 4001474:	20c6b03a 	or	r3,r4,r3
 4001478:	10c00085 	stb	r3,2(r2)
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 400147c:	e0bffd17 	ldw	r2,-12(fp)
 4001480:	10800083 	ldbu	r2,2(r2)
 4001484:	1080004c 	andi	r2,r2,1
 4001488:	10803fcc 	andi	r2,r2,255
 400148c:	10000226 	beq	r2,zero,4001498 <_ZN3USB11OutTransferEP6EpInfottPh+0x254>
 4001490:	00802004 	movi	r2,128
 4001494:	00000106 	br	400149c <_ZN3USB11OutTransferEP6EpInfottPh+0x258>
 4001498:	00801004 	movi	r2,64
 400149c:	100d883a 	mov	r6,r2
 40014a0:	01403a04 	movi	r5,232
 40014a4:	e13ffc17 	ldw	r4,-16(fp)
 40014a8:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
                                        break;
 40014ac:	00000306 	br	40014bc <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrNAK:
                                        nak_count++;
                                        if(nak_limit && (nak_count == nak_limit))
                                                goto breakout;
                                        //return ( rcode);
                                        break;
 40014b0:	0001883a 	nop
 40014b4:	00000106 	br	40014bc <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrTIMEOUT:
                                        retry_count++;
                                        if(retry_count == USB_RETRY_LIMIT)
                                                goto breakout;
                                        //return ( rcode);
                                        break;
 40014b8:	0001883a 	nop
                                default:
                                        goto breakout;
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 40014bc:	000d883a 	mov	r6,zero
 40014c0:	01400e04 	movi	r5,56
 40014c4:	e13ffc17 	ldw	r4,-16(fp)
 40014c8:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 40014cc:	e0bff717 	ldw	r2,-36(fp)
 40014d0:	10800003 	ldbu	r2,0(r2)
 40014d4:	10803fcc 	andi	r2,r2,255
 40014d8:	100d883a 	mov	r6,r2
 40014dc:	01400404 	movi	r5,16
 40014e0:	e13ffc17 	ldw	r4,-16(fp)
 40014e4:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 40014e8:	e0bffb0b 	ldhu	r2,-20(fp)
 40014ec:	10803fcc 	andi	r2,r2,255
 40014f0:	100d883a 	mov	r6,r2
 40014f4:	01400e04 	movi	r5,56
 40014f8:	e13ffc17 	ldw	r4,-16(fp)
 40014fc:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 4001500:	e0bffd17 	ldw	r2,-12(fp)
 4001504:	10800003 	ldbu	r2,0(r2)
 4001508:	10800814 	ori	r2,r2,32
 400150c:	10803fcc 	andi	r2,r2,255
 4001510:	100d883a 	mov	r6,r2
 4001514:	01403c04 	movi	r5,240
 4001518:	e13ffc17 	ldw	r4,-16(fp)
 400151c:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 4001520:	01403204 	movi	r5,200
 4001524:	e13ffc17 	ldw	r4,-16(fp)
 4001528:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 400152c:	0084303a 	nor	r2,zero,r2
 4001530:	10803fcc 	andi	r2,r2,255
 4001534:	1004d1fa 	srli	r2,r2,7
 4001538:	10803fcc 	andi	r2,r2,255
 400153c:	10000126 	beq	r2,zero,4001544 <_ZN3USB11OutTransferEP6EpInfottPh+0x300>
 4001540:	003ff706 	br	4001520 <__alt_data_end+0xfc001520>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 4001544:	01802004 	movi	r6,128
 4001548:	01403204 	movi	r5,200
 400154c:	e13ffc17 	ldw	r4,-16(fp)
 4001550:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 4001554:	01403e04 	movi	r5,248
 4001558:	e13ffc17 	ldw	r4,-16(fp)
 400155c:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 4001560:	108003cc 	andi	r2,r2,15
 4001564:	e0bff605 	stb	r2,-40(fp)
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                rcode = (regRd(rHRSL) & 0x0f);

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 4001568:	003f9006 	br	40013ac <__alt_data_end+0xfc0013ac>
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                        rcode = (regRd(rHRSL) & 0x0f);
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 400156c:	e0fff88b 	ldhu	r3,-30(fp)
 4001570:	e0bffb0b 	ldhu	r2,-20(fp)
 4001574:	1885c83a 	sub	r2,r3,r2
 4001578:	e0bff88d 	sth	r2,-30(fp)
                data_p += bytes_tosend;
 400157c:	e0bffb0b 	ldhu	r2,-20(fp)
 4001580:	e0fff717 	ldw	r3,-36(fp)
 4001584:	1885883a 	add	r2,r3,r2
 4001588:	e0bff715 	stw	r2,-36(fp)

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value

        while(bytes_left) {
 400158c:	003f5506 	br	40012e4 <__alt_data_end+0xfc0012e4>
                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }//while( bytes_left...
breakout:

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 4001590:	01403e04 	movi	r5,248
 4001594:	e13ffc17 	ldw	r4,-16(fp)
 4001598:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 400159c:	10803fcc 	andi	r2,r2,255
 40015a0:	1080080c 	andi	r2,r2,32
 40015a4:	10000226 	beq	r2,zero,40015b0 <_ZN3USB11OutTransferEP6EpInfottPh+0x36c>
 40015a8:	00c00044 	movi	r3,1
 40015ac:	00000106 	br	40015b4 <_ZN3USB11OutTransferEP6EpInfottPh+0x370>
 40015b0:	0007883a 	mov	r3,zero
 40015b4:	e0bffd17 	ldw	r2,-12(fp)
 40015b8:	1940004c 	andi	r5,r3,1
 40015bc:	11000083 	ldbu	r4,2(r2)
 40015c0:	00ffff84 	movi	r3,-2
 40015c4:	20c6703a 	and	r3,r4,r3
 40015c8:	1809883a 	mov	r4,r3
 40015cc:	2807883a 	mov	r3,r5
 40015d0:	20c6b03a 	or	r3,r4,r3
 40015d4:	10c00085 	stb	r3,2(r2)
        return ( rcode); //should be 0 in all cases
 40015d8:	e0bff603 	ldbu	r2,-40(fp)
}
 40015dc:	e037883a 	mov	sp,fp
 40015e0:	dfc00117 	ldw	ra,4(sp)
 40015e4:	df000017 	ldw	fp,0(sp)
 40015e8:	dec00204 	addi	sp,sp,8
 40015ec:	f800283a 	ret

040015f0 <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 40015f0:	defff704 	addi	sp,sp,-36
 40015f4:	dfc00815 	stw	ra,32(sp)
 40015f8:	df000715 	stw	fp,28(sp)
 40015fc:	df000704 	addi	fp,sp,28
 4001600:	e13ffc15 	stw	r4,-16(fp)
 4001604:	2809883a 	mov	r4,r5
 4001608:	3007883a 	mov	r3,r6
 400160c:	3805883a 	mov	r2,r7
 4001610:	e13ffd05 	stb	r4,-12(fp)
 4001614:	e0fffe05 	stb	r3,-8(fp)
 4001618:	e0bfff0d 	sth	r2,-4(fp)
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 400161c:	40006300 	call	4000630 <_Z6millisv>
 4001620:	1084e204 	addi	r2,r2,5000
 4001624:	e0bffa15 	stw	r2,-24(fp)
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 4001628:	e03ff905 	stb	zero,-28(fp)
        uint8_t retry_count = 0;
 400162c:	e03ff945 	stb	zero,-27(fp)
        uint16_t nak_count = 0;
 4001630:	e03ff98d 	sth	zero,-26(fp)

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 4001634:	40006300 	call	4000630 <_Z6millisv>
 4001638:	1007883a 	mov	r3,r2
 400163c:	e0bffa17 	ldw	r2,-24(fp)
 4001640:	1885c83a 	sub	r2,r3,r2
 4001644:	1004d7fa 	srli	r2,r2,31
 4001648:	10803fcc 	andi	r2,r2,255
 400164c:	10004226 	beq	r2,zero,4001758 <_ZN3USB11dispatchPktEhht+0x168>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 4001650:	e0fffd03 	ldbu	r3,-12(fp)
 4001654:	e0bffe03 	ldbu	r2,-8(fp)
 4001658:	1884b03a 	or	r2,r3,r2
 400165c:	10803fcc 	andi	r2,r2,255
 4001660:	100d883a 	mov	r6,r2
 4001664:	01403c04 	movi	r5,240
 4001668:	e13ffc17 	ldw	r4,-16(fp)
 400166c:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 4001670:	00bfffc4 	movi	r2,-1
 4001674:	e0bff905 	stb	r2,-28(fp)

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 4001678:	40006300 	call	4000630 <_Z6millisv>
 400167c:	1007883a 	mov	r3,r2
 4001680:	e0bffa17 	ldw	r2,-24(fp)
 4001684:	1885c83a 	sub	r2,r3,r2
 4001688:	1004d7fa 	srli	r2,r2,31
 400168c:	10803fcc 	andi	r2,r2,255
 4001690:	10000e26 	beq	r2,zero,40016cc <_ZN3USB11dispatchPktEhht+0xdc>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 4001694:	01403204 	movi	r5,200
 4001698:	e13ffc17 	ldw	r4,-16(fp)
 400169c:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 40016a0:	e0bffb05 	stb	r2,-20(fp)

                        if(tmpdata & bmHXFRDNIRQ) {
 40016a4:	e0bffb03 	ldbu	r2,-20(fp)
 40016a8:	10803fcc 	andi	r2,r2,255
 40016ac:	1080201c 	xori	r2,r2,128
 40016b0:	10bfe004 	addi	r2,r2,-128
 40016b4:	103ff00e 	bge	r2,zero,4001678 <__alt_data_end+0xfc001678>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 40016b8:	01802004 	movi	r6,128
 40016bc:	01403204 	movi	r5,200
 40016c0:	e13ffc17 	ldw	r4,-16(fp)
 40016c4:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
                                rcode = 0x00;
 40016c8:	e03ff905 	stb	zero,-28(fp)
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 40016cc:	01403e04 	movi	r5,248
 40016d0:	e13ffc17 	ldw	r4,-16(fp)
 40016d4:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 40016d8:	108003cc 	andi	r2,r2,15
 40016dc:	e0bff905 	stb	r2,-28(fp)

                switch(rcode) {
 40016e0:	e0bff903 	ldbu	r2,-28(fp)
 40016e4:	10c00120 	cmpeqi	r3,r2,4
 40016e8:	1800031e 	bne	r3,zero,40016f8 <_ZN3USB11dispatchPktEhht+0x108>
 40016ec:	108003a0 	cmpeqi	r2,r2,14
 40016f0:	10000b1e 	bne	r2,zero,4001720 <_ZN3USB11dispatchPktEhht+0x130>
 40016f4:	00001206 	br	4001740 <_ZN3USB11dispatchPktEhht+0x150>
                        case hrNAK:
                                nak_count++;
 40016f8:	e0bff98b 	ldhu	r2,-26(fp)
 40016fc:	10800044 	addi	r2,r2,1
 4001700:	e0bff98d 	sth	r2,-26(fp)
                                if(nak_limit && (nak_count == nak_limit))
 4001704:	e0bfff0b 	ldhu	r2,-4(fp)
 4001708:	10000f26 	beq	r2,zero,4001748 <_ZN3USB11dispatchPktEhht+0x158>
 400170c:	e0fff98b 	ldhu	r3,-26(fp)
 4001710:	e0bfff0b 	ldhu	r2,-4(fp)
 4001714:	18800c1e 	bne	r3,r2,4001748 <_ZN3USB11dispatchPktEhht+0x158>
                                        return (rcode);
 4001718:	e0bff903 	ldbu	r2,-28(fp)
 400171c:	00000f06 	br	400175c <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 4001720:	e0bff943 	ldbu	r2,-27(fp)
 4001724:	10800044 	addi	r2,r2,1
 4001728:	e0bff945 	stb	r2,-27(fp)
                                if(retry_count == USB_RETRY_LIMIT)
 400172c:	e0bff943 	ldbu	r2,-27(fp)
 4001730:	108000d8 	cmpnei	r2,r2,3
 4001734:	1000061e 	bne	r2,zero,4001750 <_ZN3USB11dispatchPktEhht+0x160>
                                        return (rcode);
 4001738:	e0bff903 	ldbu	r2,-28(fp)
 400173c:	00000706 	br	400175c <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        default:
                                return (rcode);
 4001740:	e0bff903 	ldbu	r2,-28(fp)
 4001744:	00000506 	br	400175c <_ZN3USB11dispatchPktEhht+0x16c>
                switch(rcode) {
                        case hrNAK:
                                nak_count++;
                                if(nak_limit && (nak_count == nak_limit))
                                        return (rcode);
                                break;
 4001748:	0001883a 	nop
 400174c:	003fb906 	br	4001634 <__alt_data_end+0xfc001634>
                        case hrTIMEOUT:
                                retry_count++;
                                if(retry_count == USB_RETRY_LIMIT)
                                        return (rcode);
                                break;
 4001750:	0001883a 	nop
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
        uint8_t retry_count = 0;
        uint16_t nak_count = 0;

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 4001754:	003fb706 	br	4001634 <__alt_data_end+0xfc001634>
                        default:
                                return (rcode);
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 4001758:	e0bff903 	ldbu	r2,-28(fp)
}
 400175c:	e037883a 	mov	sp,fp
 4001760:	dfc00117 	ldw	ra,4(sp)
 4001764:	df000017 	ldw	fp,0(sp)
 4001768:	dec00204 	addi	sp,sp,8
 400176c:	f800283a 	ret

04001770 <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 4001770:	defffa04 	addi	sp,sp,-24
 4001774:	dfc00515 	stw	ra,20(sp)
 4001778:	df000415 	stw	fp,16(sp)
 400177c:	df000404 	addi	fp,sp,16
 4001780:	e13ffe15 	stw	r4,-8(fp)
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 4001784:	e03ffc05 	stb	zero,-16(fp)

        MAX3421e::Task();
 4001788:	e13ffe17 	ldw	r4,-8(fp)
 400178c:	400747c0 	call	400747c <_ZN8MAX3421e4TaskEv>

        tmpdata = getVbusState();
 4001790:	e13ffe17 	ldw	r4,-8(fp)
 4001794:	4006bc40 	call	4006bc4 <_ZN8MAX3421e12getVbusStateEv>
 4001798:	e0bffcc5 	stb	r2,-13(fp)

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 400179c:	e0bffcc3 	ldbu	r2,-13(fp)
 40017a0:	10c00060 	cmpeqi	r3,r2,1
 40017a4:	1800091e 	bne	r3,zero,40017cc <_ZN3USB4TaskEv+0x5c>
 40017a8:	10c00088 	cmpgei	r3,r2,2
 40017ac:	1800021e 	bne	r3,zero,40017b8 <_ZN3USB4TaskEv+0x48>
 40017b0:	10000a26 	beq	r2,zero,40017dc <_ZN3USB4TaskEv+0x6c>
 40017b4:	00001f06 	br	4001834 <_ZN3USB4TaskEv+0xc4>
 40017b8:	10c000a0 	cmpeqi	r3,r2,2
 40017bc:	1800121e 	bne	r3,zero,4001808 <_ZN3USB4TaskEv+0x98>
 40017c0:	108000e0 	cmpeqi	r2,r2,3
 40017c4:	10000e1e 	bne	r2,zero,4001800 <_ZN3USB4TaskEv+0x90>
 40017c8:	00001a06 	br	4001834 <_ZN3USB4TaskEv+0xc4>
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 40017cc:	008004c4 	movi	r2,19
 40017d0:	d0b23145 	stb	r2,-14139(gp)
                        lowspeed = false;
 40017d4:	e03ffc05 	stb	zero,-16(fp)
                        break;
 40017d8:	00001606 	br	4001834 <_ZN3USB4TaskEv+0xc4>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 40017dc:	d0b23143 	ldbu	r2,-14139(gp)
 40017e0:	10803fcc 	andi	r2,r2,255
 40017e4:	10803c0c 	andi	r2,r2,240
 40017e8:	10800420 	cmpeqi	r2,r2,16
 40017ec:	1000021e 	bne	r2,zero,40017f8 <_ZN3USB4TaskEv+0x88>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 40017f0:	00800444 	movi	r2,17
 40017f4:	d0b23145 	stb	r2,-14139(gp)
                        lowspeed = false;
 40017f8:	e03ffc05 	stb	zero,-16(fp)
                        break;
 40017fc:	00000d06 	br	4001834 <_ZN3USB4TaskEv+0xc4>
                case LSHOST:

                        lowspeed = true;
 4001800:	00800044 	movi	r2,1
 4001804:	e0bffc05 	stb	r2,-16(fp)
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 4001808:	d0b23143 	ldbu	r2,-14139(gp)
 400180c:	10803fcc 	andi	r2,r2,255
 4001810:	10803c0c 	andi	r2,r2,240
 4001814:	10800418 	cmpnei	r2,r2,16
 4001818:	1000051e 	bne	r2,zero,4001830 <_ZN3USB4TaskEv+0xc0>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 400181c:	40006300 	call	4000630 <_Z6millisv>
 4001820:	10803204 	addi	r2,r2,200
 4001824:	d0b23215 	stw	r2,-14136(gp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 4001828:	00800804 	movi	r2,32
 400182c:	d0b23145 	stb	r2,-14139(gp)
                        }
                        break;
 4001830:	0001883a 	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 4001834:	e03ffc45 	stb	zero,-15(fp)
 4001838:	e0bffc43 	ldbu	r2,-15(fp)
 400183c:	10800428 	cmpgeui	r2,r2,16
 4001840:	1000201e 	bne	r2,zero,40018c4 <_ZN3USB4TaskEv+0x154>
                if(devConfig[i])
 4001844:	e0bffc43 	ldbu	r2,-15(fp)
 4001848:	e0fffe17 	ldw	r3,-8(fp)
 400184c:	10800784 	addi	r2,r2,30
 4001850:	1085883a 	add	r2,r2,r2
 4001854:	1085883a 	add	r2,r2,r2
 4001858:	1885883a 	add	r2,r3,r2
 400185c:	10800017 	ldw	r2,0(r2)
 4001860:	10001426 	beq	r2,zero,40018b4 <_ZN3USB4TaskEv+0x144>
                        rcode = devConfig[i]->Poll();
 4001864:	e0bffc43 	ldbu	r2,-15(fp)
 4001868:	e0fffe17 	ldw	r3,-8(fp)
 400186c:	10800784 	addi	r2,r2,30
 4001870:	1085883a 	add	r2,r2,r2
 4001874:	1085883a 	add	r2,r2,r2
 4001878:	1885883a 	add	r2,r3,r2
 400187c:	10800017 	ldw	r2,0(r2)
 4001880:	10800017 	ldw	r2,0(r2)
 4001884:	10800304 	addi	r2,r2,12
 4001888:	10c00017 	ldw	r3,0(r2)
 400188c:	e0bffc43 	ldbu	r2,-15(fp)
 4001890:	e13ffe17 	ldw	r4,-8(fp)
 4001894:	10800784 	addi	r2,r2,30
 4001898:	1085883a 	add	r2,r2,r2
 400189c:	1085883a 	add	r2,r2,r2
 40018a0:	2085883a 	add	r2,r4,r2
 40018a4:	10800017 	ldw	r2,0(r2)
 40018a8:	1009883a 	mov	r4,r2
 40018ac:	183ee83a 	callr	r3
 40018b0:	e0bffd05 	stb	r2,-12(fp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
                        }
                        break;
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 40018b4:	e0bffc43 	ldbu	r2,-15(fp)
 40018b8:	10800044 	addi	r2,r2,1
 40018bc:	e0bffc45 	stb	r2,-15(fp)
 40018c0:	003fdd06 	br	4001838 <__alt_data_end+0xfc001838>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
 40018c4:	d0b23143 	ldbu	r2,-14139(gp)
 40018c8:	10803fcc 	andi	r2,r2,255
 40018cc:	10c01020 	cmpeqi	r3,r2,64
 40018d0:	1800511e 	bne	r3,zero,4001a18 <_ZN3USB4TaskEv+0x2a8>
 40018d4:	10c01048 	cmpgei	r3,r2,65
 40018d8:	18000c1e 	bne	r3,zero,400190c <_ZN3USB4TaskEv+0x19c>
 40018dc:	10c004e0 	cmpeqi	r3,r2,19
 40018e0:	18008e1e 	bne	r3,zero,4001b1c <_ZN3USB4TaskEv+0x3ac>
 40018e4:	10c00508 	cmpgei	r3,r2,20
 40018e8:	1800031e 	bne	r3,zero,40018f8 <_ZN3USB4TaskEv+0x188>
 40018ec:	10800460 	cmpeqi	r2,r2,17
 40018f0:	10000f1e 	bne	r2,zero,4001930 <_ZN3USB4TaskEv+0x1c0>
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
 40018f4:	00009406 	br	4001b48 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
 40018f8:	10c00820 	cmpeqi	r3,r2,32
 40018fc:	1800351e 	bne	r3,zero,40019d4 <_ZN3USB4TaskEv+0x264>
 4001900:	10800c20 	cmpeqi	r2,r2,48
 4001904:	10003d1e 	bne	r2,zero,40019fc <_ZN3USB4TaskEv+0x28c>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 4001908:	00008f06 	br	4001b48 <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
 400190c:	10c02020 	cmpeqi	r3,r2,128
 4001910:	18006e1e 	bne	r3,zero,4001acc <_ZN3USB4TaskEv+0x35c>
 4001914:	10c02048 	cmpgei	r3,r2,129
 4001918:	18008b1e 	bne	r3,zero,4001b48 <_ZN3USB4TaskEv+0x3d8>
 400191c:	10c01420 	cmpeqi	r3,r2,80
 4001920:	1800521e 	bne	r3,zero,4001a6c <_ZN3USB4TaskEv+0x2fc>
 4001924:	10801460 	cmpeqi	r2,r2,81
 4001928:	10005e1e 	bne	r2,zero,4001aa4 <_ZN3USB4TaskEv+0x334>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 400192c:	00008606 	br	4001b48 <_ZN3USB4TaskEv+0x3d8>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();
 4001930:	e13ffe17 	ldw	r4,-8(fp)
 4001934:	40006b00 	call	40006b0 <_ZN3USB4initEv>

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 4001938:	e03ffc85 	stb	zero,-14(fp)
 400193c:	e0bffc83 	ldbu	r2,-14(fp)
 4001940:	10800428 	cmpgeui	r2,r2,16
 4001944:	1000201e 	bne	r2,zero,40019c8 <_ZN3USB4TaskEv+0x258>
                                if(devConfig[i])
 4001948:	e0bffc83 	ldbu	r2,-14(fp)
 400194c:	e0fffe17 	ldw	r3,-8(fp)
 4001950:	10800784 	addi	r2,r2,30
 4001954:	1085883a 	add	r2,r2,r2
 4001958:	1085883a 	add	r2,r2,r2
 400195c:	1885883a 	add	r2,r3,r2
 4001960:	10800017 	ldw	r2,0(r2)
 4001964:	10001426 	beq	r2,zero,40019b8 <_ZN3USB4TaskEv+0x248>
                                        rcode = devConfig[i]->Release();
 4001968:	e0bffc83 	ldbu	r2,-14(fp)
 400196c:	e0fffe17 	ldw	r3,-8(fp)
 4001970:	10800784 	addi	r2,r2,30
 4001974:	1085883a 	add	r2,r2,r2
 4001978:	1085883a 	add	r2,r2,r2
 400197c:	1885883a 	add	r2,r3,r2
 4001980:	10800017 	ldw	r2,0(r2)
 4001984:	10800017 	ldw	r2,0(r2)
 4001988:	10800204 	addi	r2,r2,8
 400198c:	10c00017 	ldw	r3,0(r2)
 4001990:	e0bffc83 	ldbu	r2,-14(fp)
 4001994:	e13ffe17 	ldw	r4,-8(fp)
 4001998:	10800784 	addi	r2,r2,30
 400199c:	1085883a 	add	r2,r2,r2
 40019a0:	1085883a 	add	r2,r2,r2
 40019a4:	2085883a 	add	r2,r4,r2
 40019a8:	10800017 	ldw	r2,0(r2)
 40019ac:	1009883a 	mov	r4,r2
 40019b0:	183ee83a 	callr	r3
 40019b4:	e0bffd05 	stb	r2,-12(fp)

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 40019b8:	e0bffc83 	ldbu	r2,-14(fp)
 40019bc:	10800044 	addi	r2,r2,1
 40019c0:	e0bffc85 	stb	r2,-14(fp)
 40019c4:	003fdd06 	br	400193c <__alt_data_end+0xfc00193c>
                                if(devConfig[i])
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 40019c8:	00800484 	movi	r2,18
 40019cc:	d0b23145 	stb	r2,-14139(gp)
                        break;
 40019d0:	00005d06 	br	4001b48 <_ZN3USB4TaskEv+0x3d8>
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 40019d4:	40006300 	call	4000630 <_Z6millisv>
 40019d8:	1007883a 	mov	r3,r2
 40019dc:	d0b23217 	ldw	r2,-14136(gp)
 40019e0:	1885c83a 	sub	r2,r3,r2
 40019e4:	0084303a 	nor	r2,zero,r2
 40019e8:	1004d7fa 	srli	r2,r2,31
 40019ec:	10803fcc 	andi	r2,r2,255
 40019f0:	10004c26 	beq	r2,zero,4001b24 <_ZN3USB4TaskEv+0x3b4>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 40019f4:	00800c04 	movi	r2,48
 40019f8:	d0b23145 	stb	r2,-14139(gp)
                        else break; // don't fall through
                case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 40019fc:	01800044 	movi	r6,1
 4001a00:	01403a04 	movi	r5,232
 4001a04:	e13ffe17 	ldw	r4,-8(fp)
 4001a08:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 4001a0c:	00801004 	movi	r2,64
 4001a10:	d0b23145 	stb	r2,-14139(gp)
                        break;
 4001a14:	00004c06 	br	4001b48 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 4001a18:	01403a04 	movi	r5,232
 4001a1c:	e13ffe17 	ldw	r4,-8(fp)
 4001a20:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 4001a24:	10803fcc 	andi	r2,r2,255
 4001a28:	1080004c 	andi	r2,r2,1
 4001a2c:	1005003a 	cmpeq	r2,r2,zero
 4001a30:	10803fcc 	andi	r2,r2,255
 4001a34:	10003d26 	beq	r2,zero,4001b2c <_ZN3USB4TaskEv+0x3bc>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 4001a38:	01403604 	movi	r5,216
 4001a3c:	e13ffe17 	ldw	r4,-8(fp)
 4001a40:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 4001a44:	10800214 	ori	r2,r2,8
 4001a48:	e0bffcc5 	stb	r2,-13(fp)
                                regWr(rMODE, tmpdata);
 4001a4c:	e0bffcc3 	ldbu	r2,-13(fp)
 4001a50:	100d883a 	mov	r6,r2
 4001a54:	01403604 	movi	r5,216
 4001a58:	e13ffe17 	ldw	r4,-8(fp)
 4001a5c:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 4001a60:	00801404 	movi	r2,80
 4001a64:	d0b23145 	stb	r2,-14139(gp)
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
 4001a68:	00003006 	br	4001b2c <_ZN3USB4TaskEv+0x3bc>
                case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 4001a6c:	01403204 	movi	r5,200
 4001a70:	e13ffe17 	ldw	r4,-8(fp)
 4001a74:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 4001a78:	10803fcc 	andi	r2,r2,255
 4001a7c:	1080100c 	andi	r2,r2,64
 4001a80:	1004c03a 	cmpne	r2,r2,zero
 4001a84:	10803fcc 	andi	r2,r2,255
 4001a88:	10002a26 	beq	r2,zero,4001b34 <_ZN3USB4TaskEv+0x3c4>
                                //when first SOF received _and_ 20ms has passed we can continue
                                /*
                                if (delay < (uint32_t)millis()) //20ms passed
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 4001a8c:	00801444 	movi	r2,81
 4001a90:	d0b23145 	stb	r2,-14139(gp)
                                delay = (uint32_t)millis() + 20;
 4001a94:	40006300 	call	4000630 <_Z6millisv>
 4001a98:	10800504 	addi	r2,r2,20
 4001a9c:	d0b23215 	stw	r2,-14136(gp)
                        }
                        break;
 4001aa0:	00002406 	br	4001b34 <_ZN3USB4TaskEv+0x3c4>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 4001aa4:	40006300 	call	4000630 <_Z6millisv>
 4001aa8:	1007883a 	mov	r3,r2
 4001aac:	d0b23217 	ldw	r2,-14136(gp)
 4001ab0:	1885c83a 	sub	r2,r3,r2
 4001ab4:	0084303a 	nor	r2,zero,r2
 4001ab8:	1004d7fa 	srli	r2,r2,31
 4001abc:	10803fcc 	andi	r2,r2,255
 4001ac0:	10001e26 	beq	r2,zero,4001b3c <_ZN3USB4TaskEv+0x3cc>
 4001ac4:	00bfe004 	movi	r2,-128
 4001ac8:	d0b23145 	stb	r2,-14139(gp)
                case USB_STATE_CONFIGURING:

                        //Serial.print("\r\nConf.LS: ");
                        //Serial.println(lowspeed, HEX);

                        rcode = Configuring(0, 0, lowspeed);
 4001acc:	e0bffc03 	ldbu	r2,-16(fp)
 4001ad0:	100f883a 	mov	r7,r2
 4001ad4:	000d883a 	mov	r6,zero
 4001ad8:	000b883a 	mov	r5,zero
 4001adc:	e13ffe17 	ldw	r4,-8(fp)
 4001ae0:	4001f500 	call	4001f50 <_ZN3USB11ConfiguringEhhb>
 4001ae4:	e0bffd05 	stb	r2,-12(fp)

                        if(rcode) {
 4001ae8:	e0bffd03 	ldbu	r2,-12(fp)
 4001aec:	10000826 	beq	r2,zero,4001b10 <_ZN3USB4TaskEv+0x3a0>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 4001af0:	e0bffd03 	ldbu	r2,-12(fp)
 4001af4:	108034a0 	cmpeqi	r2,r2,210
 4001af8:	1000121e 	bne	r2,zero,4001b44 <_ZN3USB4TaskEv+0x3d4>
                                        usb_error = rcode;
 4001afc:	e0bffd03 	ldbu	r2,-12(fp)
 4001b00:	d0b23105 	stb	r2,-14140(gp)
                                        usb_task_state = USB_STATE_ERROR;
 4001b04:	00bfe804 	movi	r2,-96
 4001b08:	d0b23145 	stb	r2,-14139(gp)
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
 4001b0c:	00000d06 	br	4001b44 <_ZN3USB4TaskEv+0x3d4>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
 4001b10:	00bfe404 	movi	r2,-112
 4001b14:	d0b23145 	stb	r2,-14139(gp)
                        break;
 4001b18:	00000a06 	br	4001b44 <_ZN3USB4TaskEv+0x3d4>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
 4001b1c:	0001883a 	nop
 4001b20:	00000906 	br	4001b48 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                        else break; // don't fall through
 4001b24:	0001883a 	nop
 4001b28:	00000706 	br	4001b48 <_ZN3USB4TaskEv+0x3d8>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
                                regWr(rMODE, tmpdata);
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
 4001b2c:	0001883a 	nop
 4001b30:	00000506 	br	4001b48 <_ZN3USB4TaskEv+0x3d8>
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
                                delay = (uint32_t)millis() + 20;
                        }
                        break;
 4001b34:	0001883a 	nop
 4001b38:	00000306 	br	4001b48 <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
                        else break; // don't fall through
 4001b3c:	0001883a 	nop
 4001b40:	00000106 	br	4001b48 <_ZN3USB4TaskEv+0x3d8>
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
 4001b44:	0001883a 	nop
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 4001b48:	0001883a 	nop
 4001b4c:	e037883a 	mov	sp,fp
 4001b50:	dfc00117 	ldw	ra,4(sp)
 4001b54:	df000017 	ldw	fp,0(sp)
 4001b58:	dec00204 	addi	sp,sp,8
 4001b5c:	f800283a 	ret

04001b60 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 4001b60:	defff704 	addi	sp,sp,-36
 4001b64:	dfc00815 	stw	ra,32(sp)
 4001b68:	df000715 	stw	fp,28(sp)
 4001b6c:	df000704 	addi	fp,sp,28
 4001b70:	e13ffc15 	stw	r4,-16(fp)
 4001b74:	2809883a 	mov	r4,r5
 4001b78:	3007883a 	mov	r3,r6
 4001b7c:	3805883a 	mov	r2,r7
 4001b80:	e13ffd05 	stb	r4,-12(fp)
 4001b84:	e0fffe05 	stb	r3,-8(fp)
 4001b88:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 4001b8c:	e03ff915 	stw	zero,-28(fp)
 4001b90:	e03ffa15 	stw	zero,-24(fp)

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 4001b94:	e0bffc17 	ldw	r2,-16(fp)
 4001b98:	000b883a 	mov	r5,zero
 4001b9c:	1009883a 	mov	r4,r2
 4001ba0:	4002c900 	call	4002c90 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 4001ba4:	e0bff915 	stw	r2,-28(fp)

        if(!p0)
 4001ba8:	e0bff917 	ldw	r2,-28(fp)
 4001bac:	1000021e 	bne	r2,zero,4001bb8 <_ZN3USB17DefaultAddressingEhhb+0x58>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 4001bb0:	00bff584 	movi	r2,-42
 4001bb4:	00003d06 	br	4001cac <_ZN3USB17DefaultAddressingEhhb+0x14c>

        if(!p0->epinfo)
 4001bb8:	e0bff917 	ldw	r2,-28(fp)
 4001bbc:	10c00003 	ldbu	r3,0(r2)
 4001bc0:	11000043 	ldbu	r4,1(r2)
 4001bc4:	2008923a 	slli	r4,r4,8
 4001bc8:	20c6b03a 	or	r3,r4,r3
 4001bcc:	11000083 	ldbu	r4,2(r2)
 4001bd0:	2008943a 	slli	r4,r4,16
 4001bd4:	20c6b03a 	or	r3,r4,r3
 4001bd8:	108000c3 	ldbu	r2,3(r2)
 4001bdc:	1004963a 	slli	r2,r2,24
 4001be0:	10c4b03a 	or	r2,r2,r3
 4001be4:	1000021e 	bne	r2,zero,4001bf0 <_ZN3USB17DefaultAddressingEhhb+0x90>
                return USB_ERROR_EPINFO_IS_NULL;
 4001be8:	00bff5c4 	movi	r2,-41
 4001bec:	00002f06 	br	4001cac <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p0->lowspeed = (lowspeed) ? true : false;
 4001bf0:	e0bff917 	ldw	r2,-28(fp)
 4001bf4:	e0ffff03 	ldbu	r3,-4(fp)
 4001bf8:	10c00185 	stb	r3,6(r2)

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 4001bfc:	e0bffc17 	ldw	r2,-16(fp)
 4001c00:	e0fffd03 	ldbu	r3,-12(fp)
 4001c04:	e13ffe03 	ldbu	r4,-8(fp)
 4001c08:	200f883a 	mov	r7,r4
 4001c0c:	000d883a 	mov	r6,zero
 4001c10:	180b883a 	mov	r5,r3
 4001c14:	1009883a 	mov	r4,r2
 4001c18:	4002d480 	call	4002d48 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 4001c1c:	e0bffb05 	stb	r2,-20(fp)

        if(!bAddress)
 4001c20:	e0bffb03 	ldbu	r2,-20(fp)
 4001c24:	1000021e 	bne	r2,zero,4001c30 <_ZN3USB17DefaultAddressingEhhb+0xd0>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 4001c28:	00bff504 	movi	r2,-44
 4001c2c:	00001f06 	br	4001cac <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p = addrPool.GetUsbDevicePtr(bAddress);
 4001c30:	e0bffc17 	ldw	r2,-16(fp)
 4001c34:	e0fffb03 	ldbu	r3,-20(fp)
 4001c38:	180b883a 	mov	r5,r3
 4001c3c:	1009883a 	mov	r4,r2
 4001c40:	4002c900 	call	4002c90 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 4001c44:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
 4001c48:	e0bffa17 	ldw	r2,-24(fp)
 4001c4c:	1000021e 	bne	r2,zero,4001c58 <_ZN3USB17DefaultAddressingEhhb+0xf8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 4001c50:	00bff584 	movi	r2,-42
 4001c54:	00001506 	br	4001cac <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p->lowspeed = lowspeed;
 4001c58:	e0bffa17 	ldw	r2,-24(fp)
 4001c5c:	e0ffff03 	ldbu	r3,-4(fp)
 4001c60:	10c00185 	stb	r3,6(r2)

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 4001c64:	e0bffb03 	ldbu	r2,-20(fp)
 4001c68:	100f883a 	mov	r7,r2
 4001c6c:	000d883a 	mov	r6,zero
 4001c70:	000b883a 	mov	r5,zero
 4001c74:	e13ffc17 	ldw	r4,-16(fp)
 4001c78:	4002a540 	call	4002a54 <_ZN3USB7setAddrEhhh>
 4001c7c:	e0bffb45 	stb	r2,-19(fp)

        if(rcode) {
 4001c80:	e0bffb43 	ldbu	r2,-19(fp)
 4001c84:	10000826 	beq	r2,zero,4001ca8 <_ZN3USB17DefaultAddressingEhhb+0x148>
                addrPool.FreeAddress(bAddress);
 4001c88:	e0bffc17 	ldw	r2,-16(fp)
 4001c8c:	e0fffb03 	ldbu	r3,-20(fp)
 4001c90:	180b883a 	mov	r5,r3
 4001c94:	1009883a 	mov	r4,r2
 4001c98:	4002fa80 	call	4002fa8 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 4001c9c:	e03ffb05 	stb	zero,-20(fp)
                return rcode;
 4001ca0:	e0bffb43 	ldbu	r2,-19(fp)
 4001ca4:	00000106 	br	4001cac <_ZN3USB17DefaultAddressingEhhb+0x14c>
        }
        return 0;
 4001ca8:	0005883a 	mov	r2,zero
};
 4001cac:	e037883a 	mov	sp,fp
 4001cb0:	dfc00117 	ldw	ra,4(sp)
 4001cb4:	df000017 	ldw	fp,0(sp)
 4001cb8:	dec00204 	addi	sp,sp,8
 4001cbc:	f800283a 	ret

04001cc0 <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 4001cc0:	defff804 	addi	sp,sp,-32
 4001cc4:	dfc00715 	stw	ra,28(sp)
 4001cc8:	df000615 	stw	fp,24(sp)
 4001ccc:	df000604 	addi	fp,sp,24
 4001cd0:	e13ffb15 	stw	r4,-20(fp)
 4001cd4:	3009883a 	mov	r4,r6
 4001cd8:	3807883a 	mov	r3,r7
 4001cdc:	e0800217 	ldw	r2,8(fp)
 4001ce0:	e17ffc05 	stb	r5,-16(fp)
 4001ce4:	e13ffd05 	stb	r4,-12(fp)
 4001ce8:	e0fffe05 	stb	r3,-8(fp)
 4001cec:	e0bfff05 	stb	r2,-4(fp)
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 4001cf0:	e03ffa05 	stb	zero,-24(fp)

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 4001cf4:	e0bffc03 	ldbu	r2,-16(fp)
 4001cf8:	e0fffb17 	ldw	r3,-20(fp)
 4001cfc:	10800784 	addi	r2,r2,30
 4001d00:	1085883a 	add	r2,r2,r2
 4001d04:	1085883a 	add	r2,r2,r2
 4001d08:	1885883a 	add	r2,r3,r2
 4001d0c:	10800017 	ldw	r2,0(r2)
 4001d10:	10800017 	ldw	r2,0(r2)
 4001d14:	10800104 	addi	r2,r2,4
 4001d18:	10c00017 	ldw	r3,0(r2)
 4001d1c:	e0bffc03 	ldbu	r2,-16(fp)
 4001d20:	e13ffb17 	ldw	r4,-20(fp)
 4001d24:	10800784 	addi	r2,r2,30
 4001d28:	1085883a 	add	r2,r2,r2
 4001d2c:	1085883a 	add	r2,r2,r2
 4001d30:	2085883a 	add	r2,r4,r2
 4001d34:	10800017 	ldw	r2,0(r2)
 4001d38:	e13ffd03 	ldbu	r4,-12(fp)
 4001d3c:	e17ffe03 	ldbu	r5,-8(fp)
 4001d40:	e1bfff03 	ldbu	r6,-4(fp)
 4001d44:	300f883a 	mov	r7,r6
 4001d48:	280d883a 	mov	r6,r5
 4001d4c:	200b883a 	mov	r5,r4
 4001d50:	1009883a 	mov	r4,r2
 4001d54:	183ee83a 	callr	r3
 4001d58:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 4001d5c:	e0bffa43 	ldbu	r2,-23(fp)
 4001d60:	10803818 	cmpnei	r2,r2,224
 4001d64:	10001f1e 	bne	r2,zero,4001de4 <_ZN3USB13AttemptConfigEhhhb+0x124>
                if(parent == 0) {
 4001d68:	e0bffd03 	ldbu	r2,-12(fp)
 4001d6c:	1000071e 	bne	r2,zero,4001d8c <_ZN3USB13AttemptConfigEhhhb+0xcc>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 4001d70:	01800044 	movi	r6,1
 4001d74:	01403a04 	movi	r5,232
 4001d78:	e13ffb17 	ldw	r4,-20(fp)
 4001d7c:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 4001d80:	01001984 	movi	r4,102
 4001d84:	40005d80 	call	40005d8 <_Z5delaym>
 4001d88:	00002606 	br	4001e24 <_ZN3USB13AttemptConfigEhhhb+0x164>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 4001d8c:	e0bffd03 	ldbu	r2,-12(fp)
 4001d90:	e0fffb17 	ldw	r3,-20(fp)
 4001d94:	10800784 	addi	r2,r2,30
 4001d98:	1085883a 	add	r2,r2,r2
 4001d9c:	1085883a 	add	r2,r2,r2
 4001da0:	1885883a 	add	r2,r3,r2
 4001da4:	10800017 	ldw	r2,0(r2)
 4001da8:	10800017 	ldw	r2,0(r2)
 4001dac:	10800504 	addi	r2,r2,20
 4001db0:	10c00017 	ldw	r3,0(r2)
 4001db4:	e0bffd03 	ldbu	r2,-12(fp)
 4001db8:	e13ffb17 	ldw	r4,-20(fp)
 4001dbc:	10800784 	addi	r2,r2,30
 4001dc0:	1085883a 	add	r2,r2,r2
 4001dc4:	1085883a 	add	r2,r2,r2
 4001dc8:	2085883a 	add	r2,r4,r2
 4001dcc:	10800017 	ldw	r2,0(r2)
 4001dd0:	e13ffe03 	ldbu	r4,-8(fp)
 4001dd4:	200b883a 	mov	r5,r4
 4001dd8:	1009883a 	mov	r4,r2
 4001ddc:	183ee83a 	callr	r3
 4001de0:	00001006 	br	4001e24 <_ZN3USB13AttemptConfigEhhhb+0x164>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 4001de4:	e0bffa43 	ldbu	r2,-23(fp)
 4001de8:	10800358 	cmpnei	r2,r2,13
 4001dec:	1000091e 	bne	r2,zero,4001e14 <_ZN3USB13AttemptConfigEhhhb+0x154>
 4001df0:	e0bffa03 	ldbu	r2,-24(fp)
 4001df4:	108000e8 	cmpgeui	r2,r2,3
 4001df8:	1000061e 	bne	r2,zero,4001e14 <_ZN3USB13AttemptConfigEhhhb+0x154>
                delay(100);
 4001dfc:	01001904 	movi	r4,100
 4001e00:	40005d80 	call	40005d8 <_Z5delaym>
                retries++;
 4001e04:	e0bffa03 	ldbu	r2,-24(fp)
 4001e08:	10800044 	addi	r2,r2,1
 4001e0c:	e0bffa05 	stb	r2,-24(fp)
                goto again;
 4001e10:	003fb806 	br	4001cf4 <__alt_data_end+0xfc001cf4>
        } else if(rcode)
 4001e14:	e0bffa43 	ldbu	r2,-23(fp)
 4001e18:	10000226 	beq	r2,zero,4001e24 <_ZN3USB13AttemptConfigEhhhb+0x164>
                return rcode;
 4001e1c:	e0bffa43 	ldbu	r2,-23(fp)
 4001e20:	00004606 	br	4001f3c <_ZN3USB13AttemptConfigEhhhb+0x27c>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 4001e24:	e0bffc03 	ldbu	r2,-16(fp)
 4001e28:	e0fffb17 	ldw	r3,-20(fp)
 4001e2c:	10800784 	addi	r2,r2,30
 4001e30:	1085883a 	add	r2,r2,r2
 4001e34:	1085883a 	add	r2,r2,r2
 4001e38:	1885883a 	add	r2,r3,r2
 4001e3c:	10800017 	ldw	r2,0(r2)
 4001e40:	10800017 	ldw	r2,0(r2)
 4001e44:	10c00017 	ldw	r3,0(r2)
 4001e48:	e0bffc03 	ldbu	r2,-16(fp)
 4001e4c:	e13ffb17 	ldw	r4,-20(fp)
 4001e50:	10800784 	addi	r2,r2,30
 4001e54:	1085883a 	add	r2,r2,r2
 4001e58:	1085883a 	add	r2,r2,r2
 4001e5c:	2085883a 	add	r2,r4,r2
 4001e60:	10800017 	ldw	r2,0(r2)
 4001e64:	e13ffd03 	ldbu	r4,-12(fp)
 4001e68:	e17ffe03 	ldbu	r5,-8(fp)
 4001e6c:	e1bfff03 	ldbu	r6,-4(fp)
 4001e70:	300f883a 	mov	r7,r6
 4001e74:	280d883a 	mov	r6,r5
 4001e78:	200b883a 	mov	r5,r4
 4001e7c:	1009883a 	mov	r4,r2
 4001e80:	183ee83a 	callr	r3
 4001e84:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 4001e88:	e0bffa43 	ldbu	r2,-23(fp)
 4001e8c:	10800358 	cmpnei	r2,r2,13
 4001e90:	1000091e 	bne	r2,zero,4001eb8 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
 4001e94:	e0bffa03 	ldbu	r2,-24(fp)
 4001e98:	108000e8 	cmpgeui	r2,r2,3
 4001e9c:	1000061e 	bne	r2,zero,4001eb8 <_ZN3USB13AttemptConfigEhhhb+0x1f8>
                delay(100);
 4001ea0:	01001904 	movi	r4,100
 4001ea4:	40005d80 	call	40005d8 <_Z5delaym>
                retries++;
 4001ea8:	e0bffa03 	ldbu	r2,-24(fp)
 4001eac:	10800044 	addi	r2,r2,1
 4001eb0:	e0bffa05 	stb	r2,-24(fp)
                goto again;
 4001eb4:	003f8f06 	br	4001cf4 <__alt_data_end+0xfc001cf4>
        }
        if(rcode) {
 4001eb8:	e0bffa43 	ldbu	r2,-23(fp)
 4001ebc:	10001e26 	beq	r2,zero,4001f38 <_ZN3USB13AttemptConfigEhhhb+0x278>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 4001ec0:	e0bffd03 	ldbu	r2,-12(fp)
 4001ec4:	1000071e 	bne	r2,zero,4001ee4 <_ZN3USB13AttemptConfigEhhhb+0x224>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 4001ec8:	01800044 	movi	r6,1
 4001ecc:	01403a04 	movi	r5,232
 4001ed0:	e13ffb17 	ldw	r4,-20(fp)
 4001ed4:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 4001ed8:	01001984 	movi	r4,102
 4001edc:	40005d80 	call	40005d8 <_Z5delaym>
 4001ee0:	00001506 	br	4001f38 <_ZN3USB13AttemptConfigEhhhb+0x278>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 4001ee4:	e0bffd03 	ldbu	r2,-12(fp)
 4001ee8:	e0fffb17 	ldw	r3,-20(fp)
 4001eec:	10800784 	addi	r2,r2,30
 4001ef0:	1085883a 	add	r2,r2,r2
 4001ef4:	1085883a 	add	r2,r2,r2
 4001ef8:	1885883a 	add	r2,r3,r2
 4001efc:	10800017 	ldw	r2,0(r2)
 4001f00:	10800017 	ldw	r2,0(r2)
 4001f04:	10800504 	addi	r2,r2,20
 4001f08:	10c00017 	ldw	r3,0(r2)
 4001f0c:	e0bffd03 	ldbu	r2,-12(fp)
 4001f10:	e13ffb17 	ldw	r4,-20(fp)
 4001f14:	10800784 	addi	r2,r2,30
 4001f18:	1085883a 	add	r2,r2,r2
 4001f1c:	1085883a 	add	r2,r2,r2
 4001f20:	2085883a 	add	r2,r4,r2
 4001f24:	10800017 	ldw	r2,0(r2)
 4001f28:	e13ffe03 	ldbu	r4,-8(fp)
 4001f2c:	200b883a 	mov	r5,r4
 4001f30:	1009883a 	mov	r4,r2
 4001f34:	183ee83a 	callr	r3
                }
        }
        return rcode;
 4001f38:	e0bffa43 	ldbu	r2,-23(fp)
}
 4001f3c:	e037883a 	mov	sp,fp
 4001f40:	dfc00117 	ldw	ra,4(sp)
 4001f44:	df000017 	ldw	fp,0(sp)
 4001f48:	dec00204 	addi	sp,sp,8
 4001f4c:	f800283a 	ret

04001f50 <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 4001f50:	deffed04 	addi	sp,sp,-76
 4001f54:	dfc01215 	stw	ra,72(sp)
 4001f58:	df001115 	stw	fp,68(sp)
 4001f5c:	df001104 	addi	fp,sp,68
 4001f60:	e13ffc15 	stw	r4,-16(fp)
 4001f64:	2809883a 	mov	r4,r5
 4001f68:	3007883a 	mov	r3,r6
 4001f6c:	3805883a 	mov	r2,r7
 4001f70:	e13ffd05 	stb	r4,-12(fp)
 4001f74:	e0fffe05 	stb	r3,-8(fp)
 4001f78:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 4001f7c:	e03ff045 	stb	zero,-63(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 4001f80:	e0bff684 	addi	r2,fp,-38
 4001f84:	e0bff115 	stw	r2,-60(fp)
        UsbDevice *p = NULL;
 4001f88:	e03ff215 	stw	zero,-56(fp)
        EpInfo *oldep_ptr = NULL;
 4001f8c:	e03ff315 	stw	zero,-52(fp)
        EpInfo epInfo;

        epInfo.epAddr = 0;
 4001f90:	e03ffb05 	stb	zero,-20(fp)
        epInfo.maxPktSize = 8;
 4001f94:	00800204 	movi	r2,8
 4001f98:	e0bffb45 	stb	r2,-19(fp)
        epInfo.bmSndToggle = 0;
 4001f9c:	e0fffb83 	ldbu	r3,-18(fp)
 4001fa0:	00bfff84 	movi	r2,-2
 4001fa4:	1884703a 	and	r2,r3,r2
 4001fa8:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmRcvToggle = 0;
 4001fac:	e0fffb83 	ldbu	r3,-18(fp)
 4001fb0:	00bfff44 	movi	r2,-3
 4001fb4:	1884703a 	and	r2,r3,r2
 4001fb8:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 4001fbc:	e0bffb83 	ldbu	r2,-18(fp)
 4001fc0:	108000cc 	andi	r2,r2,3
 4001fc4:	10800f14 	ori	r2,r2,60
 4001fc8:	e0bffb85 	stb	r2,-18(fp)

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 4001fcc:	e13ffc17 	ldw	r4,-16(fp)
 4001fd0:	4002b6c0 	call	4002b6c <_ZN3USB14GetAddressPoolEv>
 4001fd4:	e0bff415 	stw	r2,-48(fp)
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 4001fd8:	e0bff417 	ldw	r2,-48(fp)
 4001fdc:	10800017 	ldw	r2,0(r2)
 4001fe0:	10800017 	ldw	r2,0(r2)
 4001fe4:	000b883a 	mov	r5,zero
 4001fe8:	e13ff417 	ldw	r4,-48(fp)
 4001fec:	103ee83a 	callr	r2
 4001ff0:	e0bff215 	stw	r2,-56(fp)
        if(!p) {
 4001ff4:	e0bff217 	ldw	r2,-56(fp)
 4001ff8:	1000021e 	bne	r2,zero,4002004 <_ZN3USB11ConfiguringEhhb+0xb4>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 4001ffc:	00bff584 	movi	r2,-42
 4002000:	00019206 	br	400264c <_ZN3USB11ConfiguringEhhb+0x6fc>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 4002004:	e0bff217 	ldw	r2,-56(fp)
 4002008:	10c00003 	ldbu	r3,0(r2)
 400200c:	11000043 	ldbu	r4,1(r2)
 4002010:	2008923a 	slli	r4,r4,8
 4002014:	20c6b03a 	or	r3,r4,r3
 4002018:	11000083 	ldbu	r4,2(r2)
 400201c:	2008943a 	slli	r4,r4,16
 4002020:	20c6b03a 	or	r3,r4,r3
 4002024:	108000c3 	ldbu	r2,3(r2)
 4002028:	1004963a 	slli	r2,r2,24
 400202c:	10c4b03a 	or	r2,r2,r3
 4002030:	e0bff315 	stw	r2,-52(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 4002034:	e0bff217 	ldw	r2,-56(fp)
 4002038:	e0fffb04 	addi	r3,fp,-20
 400203c:	19803fcc 	andi	r6,r3,255
 4002040:	11000003 	ldbu	r4,0(r2)
 4002044:	2008703a 	and	r4,r4,zero
 4002048:	200b883a 	mov	r5,r4
 400204c:	3009883a 	mov	r4,r6
 4002050:	2908b03a 	or	r4,r5,r4
 4002054:	11000005 	stb	r4,0(r2)
 4002058:	1808d23a 	srli	r4,r3,8
 400205c:	21803fcc 	andi	r6,r4,255
 4002060:	11000043 	ldbu	r4,1(r2)
 4002064:	2008703a 	and	r4,r4,zero
 4002068:	200b883a 	mov	r5,r4
 400206c:	3009883a 	mov	r4,r6
 4002070:	2908b03a 	or	r4,r5,r4
 4002074:	11000045 	stb	r4,1(r2)
 4002078:	1808d43a 	srli	r4,r3,16
 400207c:	21803fcc 	andi	r6,r4,255
 4002080:	11000083 	ldbu	r4,2(r2)
 4002084:	2008703a 	and	r4,r4,zero
 4002088:	200b883a 	mov	r5,r4
 400208c:	3009883a 	mov	r4,r6
 4002090:	2908b03a 	or	r4,r5,r4
 4002094:	11000085 	stb	r4,2(r2)
 4002098:	180ad63a 	srli	r5,r3,24
 400209c:	10c000c3 	ldbu	r3,3(r2)
 40020a0:	1806703a 	and	r3,r3,zero
 40020a4:	1809883a 	mov	r4,r3
 40020a8:	2807883a 	mov	r3,r5
 40020ac:	20c6b03a 	or	r3,r4,r3
 40020b0:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
 40020b4:	e0bff217 	ldw	r2,-56(fp)
 40020b8:	e0ffff03 	ldbu	r3,-4(fp)
 40020bc:	10c00185 	stb	r3,6(r2)
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 40020c0:	00800484 	movi	r2,18
 40020c4:	10ffffcc 	andi	r3,r2,65535
 40020c8:	e0bff684 	addi	r2,fp,-38
 40020cc:	d8800015 	stw	r2,0(sp)
 40020d0:	180f883a 	mov	r7,r3
 40020d4:	000d883a 	mov	r6,zero
 40020d8:	000b883a 	mov	r5,zero
 40020dc:	e13ffc17 	ldw	r4,-16(fp)
 40020e0:	40027980 	call	4002798 <_ZN3USB11getDevDescrEhhtPh>
 40020e4:	e0bff045 	stb	r2,-63(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 40020e8:	e0bff217 	ldw	r2,-56(fp)
 40020ec:	e0fff317 	ldw	r3,-52(fp)
 40020f0:	19403fcc 	andi	r5,r3,255
 40020f4:	10c00003 	ldbu	r3,0(r2)
 40020f8:	1806703a 	and	r3,r3,zero
 40020fc:	1809883a 	mov	r4,r3
 4002100:	2807883a 	mov	r3,r5
 4002104:	20c6b03a 	or	r3,r4,r3
 4002108:	10c00005 	stb	r3,0(r2)
 400210c:	e0fff317 	ldw	r3,-52(fp)
 4002110:	1806d23a 	srli	r3,r3,8
 4002114:	19403fcc 	andi	r5,r3,255
 4002118:	10c00043 	ldbu	r3,1(r2)
 400211c:	1806703a 	and	r3,r3,zero
 4002120:	1809883a 	mov	r4,r3
 4002124:	2807883a 	mov	r3,r5
 4002128:	20c6b03a 	or	r3,r4,r3
 400212c:	10c00045 	stb	r3,1(r2)
 4002130:	e0fff317 	ldw	r3,-52(fp)
 4002134:	1806d43a 	srli	r3,r3,16
 4002138:	19403fcc 	andi	r5,r3,255
 400213c:	10c00083 	ldbu	r3,2(r2)
 4002140:	1806703a 	and	r3,r3,zero
 4002144:	1809883a 	mov	r4,r3
 4002148:	2807883a 	mov	r3,r5
 400214c:	20c6b03a 	or	r3,r4,r3
 4002150:	10c00085 	stb	r3,2(r2)
 4002154:	e0fff317 	ldw	r3,-52(fp)
 4002158:	180ad63a 	srli	r5,r3,24
 400215c:	10c000c3 	ldbu	r3,3(r2)
 4002160:	1806703a 	and	r3,r3,zero
 4002164:	1809883a 	mov	r4,r3
 4002168:	2807883a 	mov	r3,r5
 400216c:	20c6b03a 	or	r3,r4,r3
 4002170:	10c000c5 	stb	r3,3(r2)

        if(rcode) {
 4002174:	e0bff043 	ldbu	r2,-63(fp)
 4002178:	10000226 	beq	r2,zero,4002184 <_ZN3USB11ConfiguringEhhb+0x234>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 400217c:	e0bff043 	ldbu	r2,-63(fp)
 4002180:	00013206 	br	400264c <_ZN3USB11ConfiguringEhhb+0x6fc>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 4002184:	e0bff117 	ldw	r2,-60(fp)
 4002188:	10c00203 	ldbu	r3,8(r2)
 400218c:	10800243 	ldbu	r2,9(r2)
 4002190:	1004923a 	slli	r2,r2,8
 4002194:	10c4b03a 	or	r2,r2,r3
 4002198:	e0bff50d 	sth	r2,-44(fp)
        uint16_t pid = udd->idProduct;
 400219c:	e0bff117 	ldw	r2,-60(fp)
 40021a0:	10c00283 	ldbu	r3,10(r2)
 40021a4:	108002c3 	ldbu	r2,11(r2)
 40021a8:	1004923a 	slli	r2,r2,8
 40021ac:	10c4b03a 	or	r2,r2,r3
 40021b0:	e0bff58d 	sth	r2,-42(fp)
        uint8_t klass = udd->bDeviceClass;
 40021b4:	e0bff117 	ldw	r2,-60(fp)
 40021b8:	10800103 	ldbu	r2,4(r2)
 40021bc:	e0bff605 	stb	r2,-40(fp)
        uint8_t subklass = udd->bDeviceSubClass;
 40021c0:	e0bff117 	ldw	r2,-60(fp)
 40021c4:	10800143 	ldbu	r2,5(r2)
 40021c8:	e0bff645 	stb	r2,-39(fp)
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 40021cc:	e03ff005 	stb	zero,-64(fp)
 40021d0:	e0bff003 	ldbu	r2,-64(fp)
 40021d4:	10800428 	cmpgeui	r2,r2,16
 40021d8:	1000821e 	bne	r2,zero,40023e4 <_ZN3USB11ConfiguringEhhb+0x494>
                if(!devConfig[devConfigIndex]) continue; // no driver
 40021dc:	e0bff003 	ldbu	r2,-64(fp)
 40021e0:	e0fffc17 	ldw	r3,-16(fp)
 40021e4:	10800784 	addi	r2,r2,30
 40021e8:	1085883a 	add	r2,r2,r2
 40021ec:	1085883a 	add	r2,r2,r2
 40021f0:	1885883a 	add	r2,r3,r2
 40021f4:	10800017 	ldw	r2,0(r2)
 40021f8:	10007226 	beq	r2,zero,40023c4 <_ZN3USB11ConfiguringEhhb+0x474>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 40021fc:	e0bff003 	ldbu	r2,-64(fp)
 4002200:	e0fffc17 	ldw	r3,-16(fp)
 4002204:	10800784 	addi	r2,r2,30
 4002208:	1085883a 	add	r2,r2,r2
 400220c:	1085883a 	add	r2,r2,r2
 4002210:	1885883a 	add	r2,r3,r2
 4002214:	10800017 	ldw	r2,0(r2)
 4002218:	10800017 	ldw	r2,0(r2)
 400221c:	10800404 	addi	r2,r2,16
 4002220:	10c00017 	ldw	r3,0(r2)
 4002224:	e0bff003 	ldbu	r2,-64(fp)
 4002228:	e13ffc17 	ldw	r4,-16(fp)
 400222c:	10800784 	addi	r2,r2,30
 4002230:	1085883a 	add	r2,r2,r2
 4002234:	1085883a 	add	r2,r2,r2
 4002238:	2085883a 	add	r2,r4,r2
 400223c:	10800017 	ldw	r2,0(r2)
 4002240:	1009883a 	mov	r4,r2
 4002244:	183ee83a 	callr	r3
 4002248:	10803fcc 	andi	r2,r2,255
 400224c:	1004c03a 	cmpne	r2,r2,zero
 4002250:	10803fcc 	andi	r2,r2,255
 4002254:	10005d1e 	bne	r2,zero,40023cc <_ZN3USB11ConfiguringEhhb+0x47c>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 4002258:	e0bff003 	ldbu	r2,-64(fp)
 400225c:	e0fffc17 	ldw	r3,-16(fp)
 4002260:	10800784 	addi	r2,r2,30
 4002264:	1085883a 	add	r2,r2,r2
 4002268:	1085883a 	add	r2,r2,r2
 400226c:	1885883a 	add	r2,r3,r2
 4002270:	10800017 	ldw	r2,0(r2)
 4002274:	10800017 	ldw	r2,0(r2)
 4002278:	10800804 	addi	r2,r2,32
 400227c:	10c00017 	ldw	r3,0(r2)
 4002280:	e0bff003 	ldbu	r2,-64(fp)
 4002284:	e13ffc17 	ldw	r4,-16(fp)
 4002288:	10800784 	addi	r2,r2,30
 400228c:	1085883a 	add	r2,r2,r2
 4002290:	1085883a 	add	r2,r2,r2
 4002294:	2085883a 	add	r2,r4,r2
 4002298:	10800017 	ldw	r2,0(r2)
 400229c:	e13ff643 	ldbu	r4,-39(fp)
 40022a0:	200b883a 	mov	r5,r4
 40022a4:	1009883a 	mov	r4,r2
 40022a8:	183ee83a 	callr	r3
 40022ac:	10803fcc 	andi	r2,r2,255
 40022b0:	10003226 	beq	r2,zero,400237c <_ZN3USB11ConfiguringEhhb+0x42c>
 40022b4:	e0bff003 	ldbu	r2,-64(fp)
 40022b8:	e0fffc17 	ldw	r3,-16(fp)
 40022bc:	10800784 	addi	r2,r2,30
 40022c0:	1085883a 	add	r2,r2,r2
 40022c4:	1085883a 	add	r2,r2,r2
 40022c8:	1885883a 	add	r2,r3,r2
 40022cc:	10800017 	ldw	r2,0(r2)
 40022d0:	10800017 	ldw	r2,0(r2)
 40022d4:	10800604 	addi	r2,r2,24
 40022d8:	10c00017 	ldw	r3,0(r2)
 40022dc:	e0bff003 	ldbu	r2,-64(fp)
 40022e0:	e13ffc17 	ldw	r4,-16(fp)
 40022e4:	10800784 	addi	r2,r2,30
 40022e8:	1085883a 	add	r2,r2,r2
 40022ec:	1085883a 	add	r2,r2,r2
 40022f0:	2085883a 	add	r2,r4,r2
 40022f4:	10800017 	ldw	r2,0(r2)
 40022f8:	e13ff50b 	ldhu	r4,-44(fp)
 40022fc:	e17ff58b 	ldhu	r5,-42(fp)
 4002300:	280d883a 	mov	r6,r5
 4002304:	200b883a 	mov	r5,r4
 4002308:	1009883a 	mov	r4,r2
 400230c:	183ee83a 	callr	r3
 4002310:	10803fcc 	andi	r2,r2,255
 4002314:	1000171e 	bne	r2,zero,4002374 <_ZN3USB11ConfiguringEhhb+0x424>
 4002318:	e0bff003 	ldbu	r2,-64(fp)
 400231c:	e0fffc17 	ldw	r3,-16(fp)
 4002320:	10800784 	addi	r2,r2,30
 4002324:	1085883a 	add	r2,r2,r2
 4002328:	1085883a 	add	r2,r2,r2
 400232c:	1885883a 	add	r2,r3,r2
 4002330:	10800017 	ldw	r2,0(r2)
 4002334:	10800017 	ldw	r2,0(r2)
 4002338:	10800704 	addi	r2,r2,28
 400233c:	10c00017 	ldw	r3,0(r2)
 4002340:	e0bff003 	ldbu	r2,-64(fp)
 4002344:	e13ffc17 	ldw	r4,-16(fp)
 4002348:	10800784 	addi	r2,r2,30
 400234c:	1085883a 	add	r2,r2,r2
 4002350:	1085883a 	add	r2,r2,r2
 4002354:	2085883a 	add	r2,r4,r2
 4002358:	10800017 	ldw	r2,0(r2)
 400235c:	e13ff603 	ldbu	r4,-40(fp)
 4002360:	200b883a 	mov	r5,r4
 4002364:	1009883a 	mov	r4,r2
 4002368:	183ee83a 	callr	r3
 400236c:	10803fcc 	andi	r2,r2,255
 4002370:	10000226 	beq	r2,zero,400237c <_ZN3USB11ConfiguringEhhb+0x42c>
 4002374:	00800044 	movi	r2,1
 4002378:	00000106 	br	4002380 <_ZN3USB11ConfiguringEhhb+0x430>
 400237c:	0005883a 	mov	r2,zero
 4002380:	10803fcc 	andi	r2,r2,255
 4002384:	10001226 	beq	r2,zero,40023d0 <_ZN3USB11ConfiguringEhhb+0x480>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 4002388:	e0fff003 	ldbu	r3,-64(fp)
 400238c:	e13ffd03 	ldbu	r4,-12(fp)
 4002390:	e17ffe03 	ldbu	r5,-8(fp)
 4002394:	e0bfff03 	ldbu	r2,-4(fp)
 4002398:	d8800015 	stw	r2,0(sp)
 400239c:	280f883a 	mov	r7,r5
 40023a0:	200d883a 	mov	r6,r4
 40023a4:	180b883a 	mov	r5,r3
 40023a8:	e13ffc17 	ldw	r4,-16(fp)
 40023ac:	4001cc00 	call	4001cc0 <_ZN3USB13AttemptConfigEhhhb>
 40023b0:	e0bff045 	stb	r2,-63(fp)
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 40023b4:	e0bff043 	ldbu	r2,-63(fp)
 40023b8:	10803460 	cmpeqi	r2,r2,209
 40023bc:	10000826 	beq	r2,zero,40023e0 <_ZN3USB11ConfiguringEhhb+0x490>
 40023c0:	00000306 	br	40023d0 <_ZN3USB11ConfiguringEhhb+0x480>
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue; // no driver
 40023c4:	0001883a 	nop
 40023c8:	00000106 	br	40023d0 <_ZN3USB11ConfiguringEhhb+0x480>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 40023cc:	0001883a 	nop
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 40023d0:	e0bff003 	ldbu	r2,-64(fp)
 40023d4:	10800044 	addi	r2,r2,1
 40023d8:	e0bff005 	stb	r2,-64(fp)
 40023dc:	003f7c06 	br	40021d0 <__alt_data_end+0xfc0021d0>
                if(!devConfig[devConfigIndex]) continue; // no driver
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
                                break;
 40023e0:	0001883a 	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 40023e4:	e0bff003 	ldbu	r2,-64(fp)
 40023e8:	10800428 	cmpgeui	r2,r2,16
 40023ec:	1000021e 	bne	r2,zero,40023f8 <_ZN3USB11ConfiguringEhhb+0x4a8>
                return rcode;
 40023f0:	e0bff043 	ldbu	r2,-63(fp)
 40023f4:	00009506 	br	400264c <_ZN3USB11ConfiguringEhhb+0x6fc>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 40023f8:	e03ff005 	stb	zero,-64(fp)
 40023fc:	e0bff003 	ldbu	r2,-64(fp)
 4002400:	10800428 	cmpgeui	r2,r2,16
 4002404:	1000871e 	bne	r2,zero,4002624 <_ZN3USB11ConfiguringEhhb+0x6d4>
                if(!devConfig[devConfigIndex]) continue;
 4002408:	e0bff003 	ldbu	r2,-64(fp)
 400240c:	e0fffc17 	ldw	r3,-16(fp)
 4002410:	10800784 	addi	r2,r2,30
 4002414:	1085883a 	add	r2,r2,r2
 4002418:	1085883a 	add	r2,r2,r2
 400241c:	1885883a 	add	r2,r3,r2
 4002420:	10800017 	ldw	r2,0(r2)
 4002424:	10007626 	beq	r2,zero,4002600 <_ZN3USB11ConfiguringEhhb+0x6b0>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 4002428:	e0bff003 	ldbu	r2,-64(fp)
 400242c:	e0fffc17 	ldw	r3,-16(fp)
 4002430:	10800784 	addi	r2,r2,30
 4002434:	1085883a 	add	r2,r2,r2
 4002438:	1085883a 	add	r2,r2,r2
 400243c:	1885883a 	add	r2,r3,r2
 4002440:	10800017 	ldw	r2,0(r2)
 4002444:	10800017 	ldw	r2,0(r2)
 4002448:	10800404 	addi	r2,r2,16
 400244c:	10c00017 	ldw	r3,0(r2)
 4002450:	e0bff003 	ldbu	r2,-64(fp)
 4002454:	e13ffc17 	ldw	r4,-16(fp)
 4002458:	10800784 	addi	r2,r2,30
 400245c:	1085883a 	add	r2,r2,r2
 4002460:	1085883a 	add	r2,r2,r2
 4002464:	2085883a 	add	r2,r4,r2
 4002468:	10800017 	ldw	r2,0(r2)
 400246c:	1009883a 	mov	r4,r2
 4002470:	183ee83a 	callr	r3
 4002474:	10803fcc 	andi	r2,r2,255
 4002478:	1004c03a 	cmpne	r2,r2,zero
 400247c:	10803fcc 	andi	r2,r2,255
 4002480:	1000611e 	bne	r2,zero,4002608 <_ZN3USB11ConfiguringEhhb+0x6b8>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 4002484:	e0bff003 	ldbu	r2,-64(fp)
 4002488:	e0fffc17 	ldw	r3,-16(fp)
 400248c:	10800784 	addi	r2,r2,30
 4002490:	1085883a 	add	r2,r2,r2
 4002494:	1085883a 	add	r2,r2,r2
 4002498:	1885883a 	add	r2,r3,r2
 400249c:	10800017 	ldw	r2,0(r2)
 40024a0:	10800017 	ldw	r2,0(r2)
 40024a4:	10800804 	addi	r2,r2,32
 40024a8:	10c00017 	ldw	r3,0(r2)
 40024ac:	e0bff003 	ldbu	r2,-64(fp)
 40024b0:	e13ffc17 	ldw	r4,-16(fp)
 40024b4:	10800784 	addi	r2,r2,30
 40024b8:	1085883a 	add	r2,r2,r2
 40024bc:	1085883a 	add	r2,r2,r2
 40024c0:	2085883a 	add	r2,r4,r2
 40024c4:	10800017 	ldw	r2,0(r2)
 40024c8:	e13ff643 	ldbu	r4,-39(fp)
 40024cc:	200b883a 	mov	r5,r4
 40024d0:	1009883a 	mov	r4,r2
 40024d4:	183ee83a 	callr	r3
 40024d8:	10803fcc 	andi	r2,r2,255
 40024dc:	10003226 	beq	r2,zero,40025a8 <_ZN3USB11ConfiguringEhhb+0x658>
 40024e0:	e0bff003 	ldbu	r2,-64(fp)
 40024e4:	e0fffc17 	ldw	r3,-16(fp)
 40024e8:	10800784 	addi	r2,r2,30
 40024ec:	1085883a 	add	r2,r2,r2
 40024f0:	1085883a 	add	r2,r2,r2
 40024f4:	1885883a 	add	r2,r3,r2
 40024f8:	10800017 	ldw	r2,0(r2)
 40024fc:	10800017 	ldw	r2,0(r2)
 4002500:	10800604 	addi	r2,r2,24
 4002504:	10c00017 	ldw	r3,0(r2)
 4002508:	e0bff003 	ldbu	r2,-64(fp)
 400250c:	e13ffc17 	ldw	r4,-16(fp)
 4002510:	10800784 	addi	r2,r2,30
 4002514:	1085883a 	add	r2,r2,r2
 4002518:	1085883a 	add	r2,r2,r2
 400251c:	2085883a 	add	r2,r4,r2
 4002520:	10800017 	ldw	r2,0(r2)
 4002524:	e13ff50b 	ldhu	r4,-44(fp)
 4002528:	e17ff58b 	ldhu	r5,-42(fp)
 400252c:	280d883a 	mov	r6,r5
 4002530:	200b883a 	mov	r5,r4
 4002534:	1009883a 	mov	r4,r2
 4002538:	183ee83a 	callr	r3
 400253c:	10803fcc 	andi	r2,r2,255
 4002540:	1000171e 	bne	r2,zero,40025a0 <_ZN3USB11ConfiguringEhhb+0x650>
 4002544:	e0bff003 	ldbu	r2,-64(fp)
 4002548:	e0fffc17 	ldw	r3,-16(fp)
 400254c:	10800784 	addi	r2,r2,30
 4002550:	1085883a 	add	r2,r2,r2
 4002554:	1085883a 	add	r2,r2,r2
 4002558:	1885883a 	add	r2,r3,r2
 400255c:	10800017 	ldw	r2,0(r2)
 4002560:	10800017 	ldw	r2,0(r2)
 4002564:	10800704 	addi	r2,r2,28
 4002568:	10c00017 	ldw	r3,0(r2)
 400256c:	e0bff003 	ldbu	r2,-64(fp)
 4002570:	e13ffc17 	ldw	r4,-16(fp)
 4002574:	10800784 	addi	r2,r2,30
 4002578:	1085883a 	add	r2,r2,r2
 400257c:	1085883a 	add	r2,r2,r2
 4002580:	2085883a 	add	r2,r4,r2
 4002584:	10800017 	ldw	r2,0(r2)
 4002588:	e13ff603 	ldbu	r4,-40(fp)
 400258c:	200b883a 	mov	r5,r4
 4002590:	1009883a 	mov	r4,r2
 4002594:	183ee83a 	callr	r3
 4002598:	10803fcc 	andi	r2,r2,255
 400259c:	10000226 	beq	r2,zero,40025a8 <_ZN3USB11ConfiguringEhhb+0x658>
 40025a0:	00800044 	movi	r2,1
 40025a4:	00000106 	br	40025ac <_ZN3USB11ConfiguringEhhb+0x65c>
 40025a8:	0005883a 	mov	r2,zero
 40025ac:	10803fcc 	andi	r2,r2,255
 40025b0:	1000171e 	bne	r2,zero,4002610 <_ZN3USB11ConfiguringEhhb+0x6c0>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 40025b4:	e0fff003 	ldbu	r3,-64(fp)
 40025b8:	e13ffd03 	ldbu	r4,-12(fp)
 40025bc:	e17ffe03 	ldbu	r5,-8(fp)
 40025c0:	e0bfff03 	ldbu	r2,-4(fp)
 40025c4:	d8800015 	stw	r2,0(sp)
 40025c8:	280f883a 	mov	r7,r5
 40025cc:	200d883a 	mov	r6,r4
 40025d0:	180b883a 	mov	r5,r3
 40025d4:	e13ffc17 	ldw	r4,-16(fp)
 40025d8:	4001cc00 	call	4001cc0 <_ZN3USB13AttemptConfigEhhhb>
 40025dc:	e0bff045 	stb	r2,-63(fp)

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 40025e0:	e0bff043 	ldbu	r2,-63(fp)
 40025e4:	10803460 	cmpeqi	r2,r2,209
 40025e8:	10000a1e 	bne	r2,zero,4002614 <_ZN3USB11ConfiguringEhhb+0x6c4>
 40025ec:	e0bff043 	ldbu	r2,-63(fp)
 40025f0:	10803660 	cmpeqi	r2,r2,217
 40025f4:	1000071e 	bne	r2,zero,4002614 <_ZN3USB11ConfiguringEhhb+0x6c4>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 40025f8:	e0bff043 	ldbu	r2,-63(fp)
 40025fc:	00001306 	br	400264c <_ZN3USB11ConfiguringEhhb+0x6fc>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue;
 4002600:	0001883a 	nop
 4002604:	00000306 	br	4002614 <_ZN3USB11ConfiguringEhhb+0x6c4>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 4002608:	0001883a 	nop
 400260c:	00000106 	br	4002614 <_ZN3USB11ConfiguringEhhb+0x6c4>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 4002610:	0001883a 	nop
                return rcode;
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 4002614:	e0bff003 	ldbu	r2,-64(fp)
 4002618:	10800044 	addi	r2,r2,1
 400261c:	e0bff005 	stb	r2,-64(fp)
 4002620:	003f7606 	br	40023fc <__alt_data_end+0xfc0023fc>
                        //        devConfigIndex = 0;
                        return rcode;
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 4002624:	e0bffd03 	ldbu	r2,-12(fp)
 4002628:	e0fffe03 	ldbu	r3,-8(fp)
 400262c:	e13fff03 	ldbu	r4,-4(fp)
 4002630:	200f883a 	mov	r7,r4
 4002634:	180d883a 	mov	r6,r3
 4002638:	100b883a 	mov	r5,r2
 400263c:	e13ffc17 	ldw	r4,-16(fp)
 4002640:	4001b600 	call	4001b60 <_ZN3USB17DefaultAddressingEhhb>
 4002644:	e0bff045 	stb	r2,-63(fp)

        return rcode;
 4002648:	e0bff043 	ldbu	r2,-63(fp)
}
 400264c:	e037883a 	mov	sp,fp
 4002650:	dfc00117 	ldw	ra,4(sp)
 4002654:	df000017 	ldw	fp,0(sp)
 4002658:	dec00204 	addi	sp,sp,8
 400265c:	f800283a 	ret

04002660 <_ZN3USB13ReleaseDeviceEh>:

uint8_t USB::ReleaseDevice(uint8_t addr) {
 4002660:	defffb04 	addi	sp,sp,-20
 4002664:	dfc00415 	stw	ra,16(sp)
 4002668:	df000315 	stw	fp,12(sp)
 400266c:	df000304 	addi	fp,sp,12
 4002670:	e13ffe15 	stw	r4,-8(fp)
 4002674:	2805883a 	mov	r2,r5
 4002678:	e0bfff05 	stb	r2,-4(fp)
        if(!addr)
 400267c:	e0bfff03 	ldbu	r2,-4(fp)
 4002680:	1000021e 	bne	r2,zero,400268c <_ZN3USB13ReleaseDeviceEh+0x2c>
                return 0;
 4002684:	0005883a 	mov	r2,zero
 4002688:	00003e06 	br	4002784 <_ZN3USB13ReleaseDeviceEh+0x124>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 400268c:	e03ffd05 	stb	zero,-12(fp)
 4002690:	e0bffd03 	ldbu	r2,-12(fp)
 4002694:	10800428 	cmpgeui	r2,r2,16
 4002698:	1000391e 	bne	r2,zero,4002780 <_ZN3USB13ReleaseDeviceEh+0x120>
                if(!devConfig[i]) continue;
 400269c:	e0bffd03 	ldbu	r2,-12(fp)
 40026a0:	e0fffe17 	ldw	r3,-8(fp)
 40026a4:	10800784 	addi	r2,r2,30
 40026a8:	1085883a 	add	r2,r2,r2
 40026ac:	1085883a 	add	r2,r2,r2
 40026b0:	1885883a 	add	r2,r3,r2
 40026b4:	10800017 	ldw	r2,0(r2)
 40026b8:	10002c26 	beq	r2,zero,400276c <_ZN3USB13ReleaseDeviceEh+0x10c>
                if(devConfig[i]->GetAddress() == addr)
 40026bc:	e0bffd03 	ldbu	r2,-12(fp)
 40026c0:	e0fffe17 	ldw	r3,-8(fp)
 40026c4:	10800784 	addi	r2,r2,30
 40026c8:	1085883a 	add	r2,r2,r2
 40026cc:	1085883a 	add	r2,r2,r2
 40026d0:	1885883a 	add	r2,r3,r2
 40026d4:	10800017 	ldw	r2,0(r2)
 40026d8:	10800017 	ldw	r2,0(r2)
 40026dc:	10800404 	addi	r2,r2,16
 40026e0:	10c00017 	ldw	r3,0(r2)
 40026e4:	e0bffd03 	ldbu	r2,-12(fp)
 40026e8:	e13ffe17 	ldw	r4,-8(fp)
 40026ec:	10800784 	addi	r2,r2,30
 40026f0:	1085883a 	add	r2,r2,r2
 40026f4:	1085883a 	add	r2,r2,r2
 40026f8:	2085883a 	add	r2,r4,r2
 40026fc:	10800017 	ldw	r2,0(r2)
 4002700:	1009883a 	mov	r4,r2
 4002704:	183ee83a 	callr	r3
 4002708:	10c03fcc 	andi	r3,r2,255
 400270c:	e0bfff03 	ldbu	r2,-4(fp)
 4002710:	1885003a 	cmpeq	r2,r3,r2
 4002714:	10803fcc 	andi	r2,r2,255
 4002718:	10001526 	beq	r2,zero,4002770 <_ZN3USB13ReleaseDeviceEh+0x110>
                        return devConfig[i]->Release();
 400271c:	e0bffd03 	ldbu	r2,-12(fp)
 4002720:	e0fffe17 	ldw	r3,-8(fp)
 4002724:	10800784 	addi	r2,r2,30
 4002728:	1085883a 	add	r2,r2,r2
 400272c:	1085883a 	add	r2,r2,r2
 4002730:	1885883a 	add	r2,r3,r2
 4002734:	10800017 	ldw	r2,0(r2)
 4002738:	10800017 	ldw	r2,0(r2)
 400273c:	10800204 	addi	r2,r2,8
 4002740:	10c00017 	ldw	r3,0(r2)
 4002744:	e0bffd03 	ldbu	r2,-12(fp)
 4002748:	e13ffe17 	ldw	r4,-8(fp)
 400274c:	10800784 	addi	r2,r2,30
 4002750:	1085883a 	add	r2,r2,r2
 4002754:	1085883a 	add	r2,r2,r2
 4002758:	2085883a 	add	r2,r4,r2
 400275c:	10800017 	ldw	r2,0(r2)
 4002760:	1009883a 	mov	r4,r2
 4002764:	183ee83a 	callr	r3
 4002768:	00000606 	br	4002784 <_ZN3USB13ReleaseDeviceEh+0x124>
uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
                if(!devConfig[i]) continue;
 400276c:	0001883a 	nop

uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 4002770:	e0bffd03 	ldbu	r2,-12(fp)
 4002774:	10800044 	addi	r2,r2,1
 4002778:	e0bffd05 	stb	r2,-12(fp)
 400277c:	003fc406 	br	4002690 <__alt_data_end+0xfc002690>
                if(!devConfig[i]) continue;
                if(devConfig[i]->GetAddress() == addr)
                        return devConfig[i]->Release();
        }
        return 0;
 4002780:	0005883a 	mov	r2,zero
}
 4002784:	e037883a 	mov	sp,fp
 4002788:	dfc00117 	ldw	ra,4(sp)
 400278c:	df000017 	ldw	fp,0(sp)
 4002790:	dec00204 	addi	sp,sp,8
 4002794:	f800283a 	ret

04002798 <_ZN3USB11getDevDescrEhhtPh>:

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 4002798:	defff204 	addi	sp,sp,-56
 400279c:	dfc00d15 	stw	ra,52(sp)
 40027a0:	df000c15 	stw	fp,48(sp)
 40027a4:	df000c04 	addi	fp,sp,48
 40027a8:	e13ffc15 	stw	r4,-16(fp)
 40027ac:	2809883a 	mov	r4,r5
 40027b0:	3007883a 	mov	r3,r6
 40027b4:	3805883a 	mov	r2,r7
 40027b8:	e13ffd05 	stb	r4,-12(fp)
 40027bc:	e0fffe05 	stb	r3,-8(fp)
 40027c0:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 40027c4:	e17ffd03 	ldbu	r5,-12(fp)
 40027c8:	e1bffe03 	ldbu	r6,-8(fp)
 40027cc:	e0bfff0b 	ldhu	r2,-4(fp)
 40027d0:	e0ffff0b 	ldhu	r3,-4(fp)
 40027d4:	d8000715 	stw	zero,28(sp)
 40027d8:	e1000217 	ldw	r4,8(fp)
 40027dc:	d9000615 	stw	r4,24(sp)
 40027e0:	d8c00515 	stw	r3,20(sp)
 40027e4:	d8800415 	stw	r2,16(sp)
 40027e8:	d8000315 	stw	zero,12(sp)
 40027ec:	00800044 	movi	r2,1
 40027f0:	d8800215 	stw	r2,8(sp)
 40027f4:	d8000115 	stw	zero,4(sp)
 40027f8:	00800184 	movi	r2,6
 40027fc:	d8800015 	stw	r2,0(sp)
 4002800:	01c02004 	movi	r7,128
 4002804:	e13ffc17 	ldw	r4,-16(fp)
 4002808:	4000af00 	call	4000af0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 400280c:	e037883a 	mov	sp,fp
 4002810:	dfc00117 	ldw	ra,4(sp)
 4002814:	df000017 	ldw	fp,0(sp)
 4002818:	dec00204 	addi	sp,sp,8
 400281c:	f800283a 	ret

04002820 <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 4002820:	defff104 	addi	sp,sp,-60
 4002824:	dfc00e15 	stw	ra,56(sp)
 4002828:	df000d15 	stw	fp,52(sp)
 400282c:	df000d04 	addi	fp,sp,52
 4002830:	e13ffb15 	stw	r4,-20(fp)
 4002834:	3009883a 	mov	r4,r6
 4002838:	3807883a 	mov	r3,r7
 400283c:	e0800217 	ldw	r2,8(fp)
 4002840:	e17ffc05 	stb	r5,-16(fp)
 4002844:	e13ffd05 	stb	r4,-12(fp)
 4002848:	e0fffe0d 	sth	r3,-8(fp)
 400284c:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 4002850:	e23ffc03 	ldbu	r8,-16(fp)
 4002854:	e1bffd03 	ldbu	r6,-12(fp)
 4002858:	e0bfff03 	ldbu	r2,-4(fp)
 400285c:	e0fffe0b 	ldhu	r3,-8(fp)
 4002860:	e13ffe0b 	ldhu	r4,-8(fp)
 4002864:	d8000715 	stw	zero,28(sp)
 4002868:	e1400317 	ldw	r5,12(fp)
 400286c:	d9400615 	stw	r5,24(sp)
 4002870:	d9000515 	stw	r4,20(sp)
 4002874:	d8c00415 	stw	r3,16(sp)
 4002878:	d8000315 	stw	zero,12(sp)
 400287c:	00c00084 	movi	r3,2
 4002880:	d8c00215 	stw	r3,8(sp)
 4002884:	d8800115 	stw	r2,4(sp)
 4002888:	00800184 	movi	r2,6
 400288c:	d8800015 	stw	r2,0(sp)
 4002890:	01c02004 	movi	r7,128
 4002894:	400b883a 	mov	r5,r8
 4002898:	e13ffb17 	ldw	r4,-20(fp)
 400289c:	4000af00 	call	4000af0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 40028a0:	e037883a 	mov	sp,fp
 40028a4:	dfc00117 	ldw	ra,4(sp)
 40028a8:	df000017 	ldw	fp,0(sp)
 40028ac:	dec00204 	addi	sp,sp,8
 40028b0:	f800283a 	ret

040028b4 <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 40028b4:	deffdf04 	addi	sp,sp,-132
 40028b8:	dfc02015 	stw	ra,128(sp)
 40028bc:	df001f15 	stw	fp,124(sp)
 40028c0:	df001f04 	addi	fp,sp,124
 40028c4:	e13ffc15 	stw	r4,-16(fp)
 40028c8:	2809883a 	mov	r4,r5
 40028cc:	3007883a 	mov	r3,r6
 40028d0:	3805883a 	mov	r2,r7
 40028d4:	e13ffd05 	stb	r4,-12(fp)
 40028d8:	e0fffe05 	stb	r3,-8(fp)
 40028dc:	e0bfff05 	stb	r2,-4(fp)
        const uint8_t bufSize = 64;
 40028e0:	00801004 	movi	r2,64
 40028e4:	e0bfe905 	stb	r2,-92(fp)
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 40028e8:	e0bfec04 	addi	r2,fp,-80
 40028ec:	e0bfea15 	stw	r2,-88(fp)

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 40028f0:	e13ffd03 	ldbu	r4,-12(fp)
 40028f4:	e17ffe03 	ldbu	r5,-8(fp)
 40028f8:	e0bfff03 	ldbu	r2,-4(fp)
 40028fc:	e0ffec04 	addi	r3,fp,-80
 4002900:	d8c00115 	stw	r3,4(sp)
 4002904:	d8800015 	stw	r2,0(sp)
 4002908:	01c00244 	movi	r7,9
 400290c:	280d883a 	mov	r6,r5
 4002910:	200b883a 	mov	r5,r4
 4002914:	e13ffc17 	ldw	r4,-16(fp)
 4002918:	40028200 	call	4002820 <_ZN3USB12getConfDescrEhhthPh>
 400291c:	e0bfeb05 	stb	r2,-84(fp)

        if(ret)
 4002920:	e0bfeb03 	ldbu	r2,-84(fp)
 4002924:	10000226 	beq	r2,zero,4002930 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x7c>
                return ret;
 4002928:	e0bfeb03 	ldbu	r2,-84(fp)
 400292c:	00001a06 	br	4002998 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0xe4>

        uint16_t total = ucd->wTotalLength;
 4002930:	e0bfea17 	ldw	r2,-88(fp)
 4002934:	10c00083 	ldbu	r3,2(r2)
 4002938:	108000c3 	ldbu	r2,3(r2)
 400293c:	1004923a 	slli	r2,r2,8
 4002940:	10c4b03a 	or	r2,r2,r3
 4002944:	e0bfeb8d 	sth	r2,-82(fp)

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 4002948:	e17ffd03 	ldbu	r5,-12(fp)
 400294c:	e1bffe03 	ldbu	r6,-8(fp)
 4002950:	e0bfff03 	ldbu	r2,-4(fp)
 4002954:	e0ffeb8b 	ldhu	r3,-82(fp)
 4002958:	e1000217 	ldw	r4,8(fp)
 400295c:	d9000715 	stw	r4,28(sp)
 4002960:	e13fec04 	addi	r4,fp,-80
 4002964:	d9000615 	stw	r4,24(sp)
 4002968:	01001004 	movi	r4,64
 400296c:	d9000515 	stw	r4,20(sp)
 4002970:	d8c00415 	stw	r3,16(sp)
 4002974:	d8000315 	stw	zero,12(sp)
 4002978:	00c00084 	movi	r3,2
 400297c:	d8c00215 	stw	r3,8(sp)
 4002980:	d8800115 	stw	r2,4(sp)
 4002984:	00800184 	movi	r2,6
 4002988:	d8800015 	stw	r2,0(sp)
 400298c:	01c02004 	movi	r7,128
 4002990:	e13ffc17 	ldw	r4,-16(fp)
 4002994:	4000af00 	call	4000af0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4002998:	e037883a 	mov	sp,fp
 400299c:	dfc00117 	ldw	ra,4(sp)
 40029a0:	df000017 	ldw	fp,0(sp)
 40029a4:	dec00204 	addi	sp,sp,8
 40029a8:	f800283a 	ret

040029ac <_ZN3USB11getStrDescrEhhthtPh>:

//get string descriptor

uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
 40029ac:	defff004 	addi	sp,sp,-64
 40029b0:	dfc00f15 	stw	ra,60(sp)
 40029b4:	df000e15 	stw	fp,56(sp)
 40029b8:	df000e04 	addi	fp,sp,56
 40029bc:	e13ffa15 	stw	r4,-24(fp)
 40029c0:	2811883a 	mov	r8,r5
 40029c4:	300b883a 	mov	r5,r6
 40029c8:	3809883a 	mov	r4,r7
 40029cc:	e0c00217 	ldw	r3,8(fp)
 40029d0:	e0800317 	ldw	r2,12(fp)
 40029d4:	e23ffb05 	stb	r8,-20(fp)
 40029d8:	e17ffc05 	stb	r5,-16(fp)
 40029dc:	e13ffd0d 	sth	r4,-12(fp)
 40029e0:	e0fffe05 	stb	r3,-8(fp)
 40029e4:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
 40029e8:	e23ffb03 	ldbu	r8,-20(fp)
 40029ec:	e27ffc03 	ldbu	r9,-16(fp)
 40029f0:	e0bffe03 	ldbu	r2,-8(fp)
 40029f4:	e0ffff0b 	ldhu	r3,-4(fp)
 40029f8:	e13ffd0b 	ldhu	r4,-12(fp)
 40029fc:	e17ffd0b 	ldhu	r5,-12(fp)
 4002a00:	d8000715 	stw	zero,28(sp)
 4002a04:	e1800417 	ldw	r6,16(fp)
 4002a08:	d9800615 	stw	r6,24(sp)
 4002a0c:	d9400515 	stw	r5,20(sp)
 4002a10:	d9000415 	stw	r4,16(sp)
 4002a14:	d8c00315 	stw	r3,12(sp)
 4002a18:	00c000c4 	movi	r3,3
 4002a1c:	d8c00215 	stw	r3,8(sp)
 4002a20:	d8800115 	stw	r2,4(sp)
 4002a24:	00800184 	movi	r2,6
 4002a28:	d8800015 	stw	r2,0(sp)
 4002a2c:	01c02004 	movi	r7,128
 4002a30:	480d883a 	mov	r6,r9
 4002a34:	400b883a 	mov	r5,r8
 4002a38:	e13ffa17 	ldw	r4,-24(fp)
 4002a3c:	4000af00 	call	4000af0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4002a40:	e037883a 	mov	sp,fp
 4002a44:	dfc00117 	ldw	ra,4(sp)
 4002a48:	df000017 	ldw	fp,0(sp)
 4002a4c:	dec00204 	addi	sp,sp,8
 4002a50:	f800283a 	ret

04002a54 <_ZN3USB7setAddrEhhh>:
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 4002a54:	defff104 	addi	sp,sp,-60
 4002a58:	dfc00e15 	stw	ra,56(sp)
 4002a5c:	df000d15 	stw	fp,52(sp)
 4002a60:	df000d04 	addi	fp,sp,52
 4002a64:	e13ffc15 	stw	r4,-16(fp)
 4002a68:	2809883a 	mov	r4,r5
 4002a6c:	3007883a 	mov	r3,r6
 4002a70:	3805883a 	mov	r2,r7
 4002a74:	e13ffd05 	stb	r4,-12(fp)
 4002a78:	e0fffe05 	stb	r3,-8(fp)
 4002a7c:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 4002a80:	e0fffd03 	ldbu	r3,-12(fp)
 4002a84:	e13ffe03 	ldbu	r4,-8(fp)
 4002a88:	e0bfff03 	ldbu	r2,-4(fp)
 4002a8c:	d8000715 	stw	zero,28(sp)
 4002a90:	d8000615 	stw	zero,24(sp)
 4002a94:	d8000515 	stw	zero,20(sp)
 4002a98:	d8000415 	stw	zero,16(sp)
 4002a9c:	d8000315 	stw	zero,12(sp)
 4002aa0:	d8000215 	stw	zero,8(sp)
 4002aa4:	d8800115 	stw	r2,4(sp)
 4002aa8:	00800144 	movi	r2,5
 4002aac:	d8800015 	stw	r2,0(sp)
 4002ab0:	000f883a 	mov	r7,zero
 4002ab4:	200d883a 	mov	r6,r4
 4002ab8:	180b883a 	mov	r5,r3
 4002abc:	e13ffc17 	ldw	r4,-16(fp)
 4002ac0:	4000af00 	call	4000af0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 4002ac4:	e0bffb05 	stb	r2,-20(fp)
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 4002ac8:	01004b04 	movi	r4,300
 4002acc:	40005d80 	call	40005d8 <_Z5delaym>
        return rcode;
 4002ad0:	e0bffb03 	ldbu	r2,-20(fp)
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 4002ad4:	e037883a 	mov	sp,fp
 4002ad8:	dfc00117 	ldw	ra,4(sp)
 4002adc:	df000017 	ldw	fp,0(sp)
 4002ae0:	dec00204 	addi	sp,sp,8
 4002ae4:	f800283a 	ret

04002ae8 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 4002ae8:	defff204 	addi	sp,sp,-56
 4002aec:	dfc00d15 	stw	ra,52(sp)
 4002af0:	df000c15 	stw	fp,48(sp)
 4002af4:	df000c04 	addi	fp,sp,48
 4002af8:	e13ffc15 	stw	r4,-16(fp)
 4002afc:	2809883a 	mov	r4,r5
 4002b00:	3007883a 	mov	r3,r6
 4002b04:	3805883a 	mov	r2,r7
 4002b08:	e13ffd05 	stb	r4,-12(fp)
 4002b0c:	e0fffe05 	stb	r3,-8(fp)
 4002b10:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 4002b14:	e0fffd03 	ldbu	r3,-12(fp)
 4002b18:	e13ffe03 	ldbu	r4,-8(fp)
 4002b1c:	e0bfff03 	ldbu	r2,-4(fp)
 4002b20:	d8000715 	stw	zero,28(sp)
 4002b24:	d8000615 	stw	zero,24(sp)
 4002b28:	d8000515 	stw	zero,20(sp)
 4002b2c:	d8000415 	stw	zero,16(sp)
 4002b30:	d8000315 	stw	zero,12(sp)
 4002b34:	d8000215 	stw	zero,8(sp)
 4002b38:	d8800115 	stw	r2,4(sp)
 4002b3c:	00800244 	movi	r2,9
 4002b40:	d8800015 	stw	r2,0(sp)
 4002b44:	000f883a 	mov	r7,zero
 4002b48:	200d883a 	mov	r6,r4
 4002b4c:	180b883a 	mov	r5,r3
 4002b50:	e13ffc17 	ldw	r4,-16(fp)
 4002b54:	4000af00 	call	4000af0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4002b58:	e037883a 	mov	sp,fp
 4002b5c:	dfc00117 	ldw	ra,4(sp)
 4002b60:	df000017 	ldw	fp,0(sp)
 4002b64:	dec00204 	addi	sp,sp,8
 4002b68:	f800283a 	ret

04002b6c <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 4002b6c:	defffe04 	addi	sp,sp,-8
 4002b70:	df000115 	stw	fp,4(sp)
 4002b74:	df000104 	addi	fp,sp,4
 4002b78:	e13fff15 	stw	r4,-4(fp)
                return (AddressPool&)addrPool;
 4002b7c:	e0bfff17 	ldw	r2,-4(fp)
        };
 4002b80:	e037883a 	mov	sp,fp
 4002b84:	df000017 	ldw	fp,0(sp)
 4002b88:	dec00104 	addi	sp,sp,4
 4002b8c:	f800283a 	ret

04002b90 <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 4002b90:	defffe04 	addi	sp,sp,-8
 4002b94:	df000115 	stw	fp,4(sp)
 4002b98:	df000104 	addi	fp,sp,4
 4002b9c:	e13fff15 	stw	r4,-4(fp)
 4002ba0:	008100b4 	movhi	r2,1026
 4002ba4:	10ac9e04 	addi	r2,r2,-19848
 4002ba8:	e0ffff17 	ldw	r3,-4(fp)
 4002bac:	18800015 	stw	r2,0(r3)
 4002bb0:	0001883a 	nop
 4002bb4:	e037883a 	mov	sp,fp
 4002bb8:	df000017 	ldw	fp,0(sp)
 4002bbc:	dec00104 	addi	sp,sp,4
 4002bc0:	f800283a 	ret

04002bc4 <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 4002bc4:	defffd04 	addi	sp,sp,-12
 4002bc8:	dfc00215 	stw	ra,8(sp)
 4002bcc:	df000115 	stw	fp,4(sp)
 4002bd0:	df000104 	addi	fp,sp,4
 4002bd4:	e13fff15 	stw	r4,-4(fp)
 4002bd8:	e0bfff17 	ldw	r2,-4(fp)
 4002bdc:	1009883a 	mov	r4,r2
 4002be0:	4002b900 	call	4002b90 <_ZN11AddressPoolC1Ev>
 4002be4:	008100b4 	movhi	r2,1026
 4002be8:	10ac9904 	addi	r2,r2,-19868
 4002bec:	e0ffff17 	ldw	r3,-4(fp)
 4002bf0:	18800015 	stw	r2,0(r3)
 4002bf4:	e0bfff17 	ldw	r2,-4(fp)
 4002bf8:	100001c5 	stb	zero,7(r2)
                // Zero address is reserved
                InitEntry(0);
 4002bfc:	000b883a 	mov	r5,zero
 4002c00:	e13fff17 	ldw	r4,-4(fp)
 4002c04:	40030140 	call	4003014 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 4002c08:	e0bfff17 	ldw	r2,-4(fp)
 4002c0c:	10000305 	stb	zero,12(r2)
                thePool[0].epinfo = &dev0ep;
 4002c10:	e0bfff17 	ldw	r2,-4(fp)
 4002c14:	10c00104 	addi	r3,r2,4
 4002c18:	e0bfff17 	ldw	r2,-4(fp)
 4002c1c:	10c00215 	stw	r3,8(r2)
                dev0ep.epAddr = 0;
 4002c20:	e0bfff17 	ldw	r2,-4(fp)
 4002c24:	10000105 	stb	zero,4(r2)
                dev0ep.maxPktSize = 8;
 4002c28:	e0bfff17 	ldw	r2,-4(fp)
 4002c2c:	00c00204 	movi	r3,8
 4002c30:	10c00145 	stb	r3,5(r2)
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 4002c34:	e0bfff17 	ldw	r2,-4(fp)
 4002c38:	11000183 	ldbu	r4,6(r2)
 4002c3c:	00ffff84 	movi	r3,-2
 4002c40:	20c6703a 	and	r3,r4,r3
 4002c44:	10c00185 	stb	r3,6(r2)
                dev0ep.bmRcvToggle = 0;
 4002c48:	e0bfff17 	ldw	r2,-4(fp)
 4002c4c:	11000183 	ldbu	r4,6(r2)
 4002c50:	00ffff44 	movi	r3,-3
 4002c54:	20c6703a 	and	r3,r4,r3
 4002c58:	10c00185 	stb	r3,6(r2)
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 4002c5c:	e0bfff17 	ldw	r2,-4(fp)
 4002c60:	10c00183 	ldbu	r3,6(r2)
 4002c64:	18c000cc 	andi	r3,r3,3
 4002c68:	18c00f14 	ori	r3,r3,60
 4002c6c:	10c00185 	stb	r3,6(r2)

                InitAllAddresses();
 4002c70:	e13fff17 	ldw	r4,-4(fp)
 4002c74:	40031580 	call	4003158 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 4002c78:	0001883a 	nop
 4002c7c:	e037883a 	mov	sp,fp
 4002c80:	dfc00117 	ldw	ra,4(sp)
 4002c84:	df000017 	ldw	fp,0(sp)
 4002c88:	dec00204 	addi	sp,sp,8
 4002c8c:	f800283a 	ret

04002c90 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 4002c90:	defffa04 	addi	sp,sp,-24
 4002c94:	dfc00515 	stw	ra,20(sp)
 4002c98:	df000415 	stw	fp,16(sp)
 4002c9c:	dc000315 	stw	r16,12(sp)
 4002ca0:	df000404 	addi	fp,sp,16
 4002ca4:	e13ffd15 	stw	r4,-12(fp)
 4002ca8:	2805883a 	mov	r2,r5
 4002cac:	e0bffe05 	stb	r2,-8(fp)
                if(!addr)
 4002cb0:	e0bffe03 	ldbu	r2,-8(fp)
 4002cb4:	1000031e 	bne	r2,zero,4002cc4 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x34>
                        return thePool;
 4002cb8:	e0bffd17 	ldw	r2,-12(fp)
 4002cbc:	10800204 	addi	r2,r2,8
 4002cc0:	00001006 	br	4002d04 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>

                uint8_t index = FindAddressIndex(addr);
 4002cc4:	e0bffe03 	ldbu	r2,-8(fp)
 4002cc8:	100b883a 	mov	r5,r2
 4002ccc:	e13ffd17 	ldw	r4,-12(fp)
 4002cd0:	40031c00 	call	40031c0 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 4002cd4:	e0bffc05 	stb	r2,-16(fp)

                return (!index) ? NULL : thePool + index;
 4002cd8:	e0bffc03 	ldbu	r2,-16(fp)
 4002cdc:	10000826 	beq	r2,zero,4002d00 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x70>
 4002ce0:	e0bffd17 	ldw	r2,-12(fp)
 4002ce4:	14000204 	addi	r16,r2,8
 4002ce8:	e0bffc03 	ldbu	r2,-16(fp)
 4002cec:	014001c4 	movi	r5,7
 4002cf0:	1009883a 	mov	r4,r2
 4002cf4:	400aa340 	call	400aa34 <__mulsi3>
 4002cf8:	8085883a 	add	r2,r16,r2
 4002cfc:	00000106 	br	4002d04 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>
 4002d00:	0005883a 	mov	r2,zero
        };
 4002d04:	e6ffff04 	addi	sp,fp,-4
 4002d08:	dfc00217 	ldw	ra,8(sp)
 4002d0c:	df000117 	ldw	fp,4(sp)
 4002d10:	dc000017 	ldw	r16,0(sp)
 4002d14:	dec00304 	addi	sp,sp,12
 4002d18:	f800283a 	ret

04002d1c <_Z10D_PrintHexIhEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 4002d1c:	defffd04 	addi	sp,sp,-12
 4002d20:	df000215 	stw	fp,8(sp)
 4002d24:	df000204 	addi	fp,sp,8
 4002d28:	2005883a 	mov	r2,r4
 4002d2c:	e17fff15 	stw	r5,-4(fp)
 4002d30:	e0bffe05 	stb	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 4002d34:	0001883a 	nop
 4002d38:	e037883a 	mov	sp,fp
 4002d3c:	df000017 	ldw	fp,0(sp)
 4002d40:	dec00104 	addi	sp,sp,4
 4002d44:	f800283a 	ret

04002d48 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 4002d48:	defff804 	addi	sp,sp,-32
 4002d4c:	dfc00715 	stw	ra,28(sp)
 4002d50:	df000615 	stw	fp,24(sp)
 4002d54:	dc000515 	stw	r16,20(sp)
 4002d58:	df000604 	addi	fp,sp,24
 4002d5c:	e13ffb15 	stw	r4,-20(fp)
 4002d60:	2809883a 	mov	r4,r5
 4002d64:	3007883a 	mov	r3,r6
 4002d68:	3805883a 	mov	r2,r7
 4002d6c:	e13ffc05 	stb	r4,-16(fp)
 4002d70:	e0fffd05 	stb	r3,-12(fp)
 4002d74:	e0bffe05 	stb	r2,-8(fp)
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 4002d78:	e0bffc03 	ldbu	r2,-16(fp)
 4002d7c:	e0bffa45 	stb	r2,-23(fp)
                if(_parent.bmReserved || port > 7)
 4002d80:	e0fffa43 	ldbu	r3,-23(fp)
 4002d84:	00bfe004 	movi	r2,-128
 4002d88:	1884703a 	and	r2,r3,r2
 4002d8c:	10803fcc 	andi	r2,r2,255
 4002d90:	1000031e 	bne	r2,zero,4002da0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x58>
 4002d94:	e0bffe03 	ldbu	r2,-8(fp)
 4002d98:	10800230 	cmpltui	r2,r2,8
 4002d9c:	1000021e 	bne	r2,zero,4002da8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x60>
                        //if(parent > 127 || port > 7)
                        return 0;
 4002da0:	0005883a 	mov	r2,zero
 4002da4:	00007a06 	br	4002f90 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(is_hub && hubCounter == 7)
 4002da8:	e0bffd03 	ldbu	r2,-12(fp)
 4002dac:	10000726 	beq	r2,zero,4002dcc <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
 4002db0:	e0bffb17 	ldw	r2,-20(fp)
 4002db4:	108001c3 	ldbu	r2,7(r2)
 4002db8:	10803fcc 	andi	r2,r2,255
 4002dbc:	108001d8 	cmpnei	r2,r2,7
 4002dc0:	1000021e 	bne	r2,zero,4002dcc <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
                        return 0;
 4002dc4:	0005883a 	mov	r2,zero
 4002dc8:	00007106 	br	4002f90 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 4002dcc:	000b883a 	mov	r5,zero
 4002dd0:	e13ffb17 	ldw	r4,-20(fp)
 4002dd4:	40031c00 	call	40031c0 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 4002dd8:	e0bffa05 	stb	r2,-24(fp)

                if(!index) // if empty entry is not found
 4002ddc:	e0bffa03 	ldbu	r2,-24(fp)
 4002de0:	1000021e 	bne	r2,zero,4002dec <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xa4>
                        return 0;
 4002de4:	0005883a 	mov	r2,zero
 4002de8:	00006906 	br	4002f90 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(_parent.devAddress == 0) {
 4002dec:	e0bffa43 	ldbu	r2,-23(fp)
 4002df0:	10803fcc 	andi	r2,r2,255
 4002df4:	1000241e 	bne	r2,zero,4002e88 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x140>
                        if(is_hub) {
 4002df8:	e0bffd03 	ldbu	r2,-12(fp)
 4002dfc:	10001026 	beq	r2,zero,4002e40 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xf8>
                                thePool[index].address.devAddress = 0x41;
 4002e00:	e0bffa03 	ldbu	r2,-24(fp)
 4002e04:	e43ffb17 	ldw	r16,-20(fp)
 4002e08:	014001c4 	movi	r5,7
 4002e0c:	1009883a 	mov	r4,r2
 4002e10:	400aa340 	call	400aa34 <__mulsi3>
 4002e14:	8085883a 	add	r2,r16,r2
 4002e18:	10800304 	addi	r2,r2,12
 4002e1c:	00c01044 	movi	r3,65
 4002e20:	10c00005 	stb	r3,0(r2)
                                hubCounter++;
 4002e24:	e0bffb17 	ldw	r2,-20(fp)
 4002e28:	108001c3 	ldbu	r2,7(r2)
 4002e2c:	10800044 	addi	r2,r2,1
 4002e30:	1007883a 	mov	r3,r2
 4002e34:	e0bffb17 	ldw	r2,-20(fp)
 4002e38:	10c001c5 	stb	r3,7(r2)
 4002e3c:	00000906 	br	4002e64 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x11c>
                        } else
                                thePool[index].address.devAddress = 1;
 4002e40:	e0bffa03 	ldbu	r2,-24(fp)
 4002e44:	e43ffb17 	ldw	r16,-20(fp)
 4002e48:	014001c4 	movi	r5,7
 4002e4c:	1009883a 	mov	r4,r2
 4002e50:	400aa340 	call	400aa34 <__mulsi3>
 4002e54:	8085883a 	add	r2,r16,r2
 4002e58:	10800304 	addi	r2,r2,12
 4002e5c:	00c00044 	movi	r3,1
 4002e60:	10c00005 	stb	r3,0(r2)

                        return thePool[index].address.devAddress;
 4002e64:	e0bffa03 	ldbu	r2,-24(fp)
 4002e68:	e43ffb17 	ldw	r16,-20(fp)
 4002e6c:	014001c4 	movi	r5,7
 4002e70:	1009883a 	mov	r4,r2
 4002e74:	400aa340 	call	400aa34 <__mulsi3>
 4002e78:	8085883a 	add	r2,r16,r2
 4002e7c:	10800304 	addi	r2,r2,12
 4002e80:	10800003 	ldbu	r2,0(r2)
 4002e84:	00004206 	br	4002f90 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 4002e88:	e03ffa85 	stb	zero,-22(fp)
                addr.bmParent = _parent.bmAddress;
 4002e8c:	e0bffa43 	ldbu	r2,-23(fp)
 4002e90:	108001cc 	andi	r2,r2,7
 4002e94:	108001cc 	andi	r2,r2,7
 4002e98:	100890fa 	slli	r4,r2,3
 4002e9c:	e0fffa83 	ldbu	r3,-22(fp)
 4002ea0:	00bff1c4 	movi	r2,-57
 4002ea4:	1884703a 	and	r2,r3,r2
 4002ea8:	1007883a 	mov	r3,r2
 4002eac:	2005883a 	mov	r2,r4
 4002eb0:	1884b03a 	or	r2,r3,r2
 4002eb4:	e0bffa85 	stb	r2,-22(fp)
                if(is_hub) {
 4002eb8:	e0bffd03 	ldbu	r2,-12(fp)
 4002ebc:	10001526 	beq	r2,zero,4002f14 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x1cc>
                        addr.bmHub = 1;
 4002ec0:	e0bffa83 	ldbu	r2,-22(fp)
 4002ec4:	10801014 	ori	r2,r2,64
 4002ec8:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = ++hubCounter;
 4002ecc:	e0bffb17 	ldw	r2,-20(fp)
 4002ed0:	108001c3 	ldbu	r2,7(r2)
 4002ed4:	10800044 	addi	r2,r2,1
 4002ed8:	1007883a 	mov	r3,r2
 4002edc:	e0bffb17 	ldw	r2,-20(fp)
 4002ee0:	10c001c5 	stb	r3,7(r2)
 4002ee4:	e0bffb17 	ldw	r2,-20(fp)
 4002ee8:	108001c3 	ldbu	r2,7(r2)
 4002eec:	108001cc 	andi	r2,r2,7
 4002ef0:	110001cc 	andi	r4,r2,7
 4002ef4:	e0fffa83 	ldbu	r3,-22(fp)
 4002ef8:	00bffe04 	movi	r2,-8
 4002efc:	1884703a 	and	r2,r3,r2
 4002f00:	1007883a 	mov	r3,r2
 4002f04:	2005883a 	mov	r2,r4
 4002f08:	1884b03a 	or	r2,r3,r2
 4002f0c:	e0bffa85 	stb	r2,-22(fp)
 4002f10:	00000e06 	br	4002f4c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x204>
                } else {
                        addr.bmHub = 0;
 4002f14:	e0fffa83 	ldbu	r3,-22(fp)
 4002f18:	00bfefc4 	movi	r2,-65
 4002f1c:	1884703a 	and	r2,r3,r2
 4002f20:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = port;
 4002f24:	e0bffe03 	ldbu	r2,-8(fp)
 4002f28:	108001cc 	andi	r2,r2,7
 4002f2c:	110001cc 	andi	r4,r2,7
 4002f30:	e0fffa83 	ldbu	r3,-22(fp)
 4002f34:	00bffe04 	movi	r2,-8
 4002f38:	1884703a 	and	r2,r3,r2
 4002f3c:	1007883a 	mov	r3,r2
 4002f40:	2005883a 	mov	r2,r4
 4002f44:	1884b03a 	or	r2,r3,r2
 4002f48:	e0bffa85 	stb	r2,-22(fp)
                }
                thePool[index].address = addr;
 4002f4c:	e0bffa03 	ldbu	r2,-24(fp)
 4002f50:	e43ffb17 	ldw	r16,-20(fp)
 4002f54:	014001c4 	movi	r5,7
 4002f58:	1009883a 	mov	r4,r2
 4002f5c:	400aa340 	call	400aa34 <__mulsi3>
 4002f60:	8085883a 	add	r2,r16,r2
 4002f64:	10800304 	addi	r2,r2,12
 4002f68:	e0fffa83 	ldbu	r3,-22(fp)
 4002f6c:	10c00005 	stb	r3,0(r2)
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 4002f70:	e0bffa03 	ldbu	r2,-24(fp)
 4002f74:	e43ffb17 	ldw	r16,-20(fp)
 4002f78:	014001c4 	movi	r5,7
 4002f7c:	1009883a 	mov	r4,r2
 4002f80:	400aa340 	call	400aa34 <__mulsi3>
 4002f84:	8085883a 	add	r2,r16,r2
 4002f88:	10800304 	addi	r2,r2,12
 4002f8c:	10800003 	ldbu	r2,0(r2)
        };
 4002f90:	e6ffff04 	addi	sp,fp,-4
 4002f94:	dfc00217 	ldw	ra,8(sp)
 4002f98:	df000117 	ldw	fp,4(sp)
 4002f9c:	dc000017 	ldw	r16,0(sp)
 4002fa0:	dec00304 	addi	sp,sp,12
 4002fa4:	f800283a 	ret

04002fa8 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 4002fa8:	defffb04 	addi	sp,sp,-20
 4002fac:	dfc00415 	stw	ra,16(sp)
 4002fb0:	df000315 	stw	fp,12(sp)
 4002fb4:	df000304 	addi	fp,sp,12
 4002fb8:	e13ffe15 	stw	r4,-8(fp)
 4002fbc:	2805883a 	mov	r2,r5
 4002fc0:	e0bfff05 	stb	r2,-4(fp)
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 4002fc4:	e0bfff03 	ldbu	r2,-4(fp)
 4002fc8:	10801058 	cmpnei	r2,r2,65
 4002fcc:	1000031e 	bne	r2,zero,4002fdc <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x34>
                        InitAllAddresses();
 4002fd0:	e13ffe17 	ldw	r4,-8(fp)
 4002fd4:	40031580 	call	4003158 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 4002fd8:	00000906 	br	4003000 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x58>
                }
                uint8_t index = FindAddressIndex(addr);
 4002fdc:	e0bfff03 	ldbu	r2,-4(fp)
 4002fe0:	100b883a 	mov	r5,r2
 4002fe4:	e13ffe17 	ldw	r4,-8(fp)
 4002fe8:	40031c00 	call	40031c0 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 4002fec:	e0bffd05 	stb	r2,-12(fp)
                FreeAddressByIndex(index);
 4002ff0:	e0bffd03 	ldbu	r2,-12(fp)
 4002ff4:	100b883a 	mov	r5,r2
 4002ff8:	e13ffe17 	ldw	r4,-8(fp)
 4002ffc:	40032540 	call	4003254 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 4003000:	e037883a 	mov	sp,fp
 4003004:	dfc00117 	ldw	ra,4(sp)
 4003008:	df000017 	ldw	fp,0(sp)
 400300c:	dec00204 	addi	sp,sp,8
 4003010:	f800283a 	ret

04003014 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:

        UsbDevice thePool[MAX_DEVICES_ALLOWED];

        // Initializes address pool entry

        void InitEntry(uint8_t index) {
 4003014:	defffa04 	addi	sp,sp,-24
 4003018:	dfc00515 	stw	ra,20(sp)
 400301c:	df000415 	stw	fp,16(sp)
 4003020:	dc400315 	stw	r17,12(sp)
 4003024:	dc000215 	stw	r16,8(sp)
 4003028:	df000404 	addi	fp,sp,16
 400302c:	e13ffc15 	stw	r4,-16(fp)
 4003030:	2805883a 	mov	r2,r5
 4003034:	e0bffd05 	stb	r2,-12(fp)
                thePool[index].address.devAddress = 0;
 4003038:	e0bffd03 	ldbu	r2,-12(fp)
 400303c:	e43ffc17 	ldw	r16,-16(fp)
 4003040:	014001c4 	movi	r5,7
 4003044:	1009883a 	mov	r4,r2
 4003048:	400aa340 	call	400aa34 <__mulsi3>
 400304c:	8085883a 	add	r2,r16,r2
 4003050:	10800304 	addi	r2,r2,12
 4003054:	10000005 	stb	zero,0(r2)
                thePool[index].epcount = 1;
 4003058:	e0bffd03 	ldbu	r2,-12(fp)
 400305c:	e43ffc17 	ldw	r16,-16(fp)
 4003060:	014001c4 	movi	r5,7
 4003064:	1009883a 	mov	r4,r2
 4003068:	400aa340 	call	400aa34 <__mulsi3>
 400306c:	8085883a 	add	r2,r16,r2
 4003070:	10800344 	addi	r2,r2,13
 4003074:	00c00044 	movi	r3,1
 4003078:	10c00005 	stb	r3,0(r2)
                thePool[index].lowspeed = 0;
 400307c:	e0bffd03 	ldbu	r2,-12(fp)
 4003080:	e43ffc17 	ldw	r16,-16(fp)
 4003084:	014001c4 	movi	r5,7
 4003088:	1009883a 	mov	r4,r2
 400308c:	400aa340 	call	400aa34 <__mulsi3>
 4003090:	8085883a 	add	r2,r16,r2
 4003094:	10800384 	addi	r2,r2,14
 4003098:	10000005 	stb	zero,0(r2)
                thePool[index].epinfo = &dev0ep;
 400309c:	e0fffd03 	ldbu	r3,-12(fp)
 40030a0:	e0bffc17 	ldw	r2,-16(fp)
 40030a4:	14000104 	addi	r16,r2,4
 40030a8:	e47ffc17 	ldw	r17,-16(fp)
 40030ac:	014001c4 	movi	r5,7
 40030b0:	1809883a 	mov	r4,r3
 40030b4:	400aa340 	call	400aa34 <__mulsi3>
 40030b8:	8885883a 	add	r2,r17,r2
 40030bc:	10800204 	addi	r2,r2,8
 40030c0:	81403fcc 	andi	r5,r16,255
 40030c4:	10c00003 	ldbu	r3,0(r2)
 40030c8:	1806703a 	and	r3,r3,zero
 40030cc:	1809883a 	mov	r4,r3
 40030d0:	2807883a 	mov	r3,r5
 40030d4:	20c6b03a 	or	r3,r4,r3
 40030d8:	10c00005 	stb	r3,0(r2)
 40030dc:	8006d23a 	srli	r3,r16,8
 40030e0:	19403fcc 	andi	r5,r3,255
 40030e4:	10c00043 	ldbu	r3,1(r2)
 40030e8:	1806703a 	and	r3,r3,zero
 40030ec:	1809883a 	mov	r4,r3
 40030f0:	2807883a 	mov	r3,r5
 40030f4:	20c6b03a 	or	r3,r4,r3
 40030f8:	10c00045 	stb	r3,1(r2)
 40030fc:	8006d43a 	srli	r3,r16,16
 4003100:	19403fcc 	andi	r5,r3,255
 4003104:	10c00083 	ldbu	r3,2(r2)
 4003108:	1806703a 	and	r3,r3,zero
 400310c:	1809883a 	mov	r4,r3
 4003110:	2807883a 	mov	r3,r5
 4003114:	20c6b03a 	or	r3,r4,r3
 4003118:	10c00085 	stb	r3,2(r2)
 400311c:	800ad63a 	srli	r5,r16,24
 4003120:	10c000c3 	ldbu	r3,3(r2)
 4003124:	1806703a 	and	r3,r3,zero
 4003128:	1809883a 	mov	r4,r3
 400312c:	2807883a 	mov	r3,r5
 4003130:	20c6b03a 	or	r3,r4,r3
 4003134:	10c000c5 	stb	r3,3(r2)
        };
 4003138:	0001883a 	nop
 400313c:	e6fffe04 	addi	sp,fp,-8
 4003140:	dfc00317 	ldw	ra,12(sp)
 4003144:	df000217 	ldw	fp,8(sp)
 4003148:	dc400117 	ldw	r17,4(sp)
 400314c:	dc000017 	ldw	r16,0(sp)
 4003150:	dec00404 	addi	sp,sp,16
 4003154:	f800283a 	ret

04003158 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
                InitEntry(index);
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
 4003158:	defffc04 	addi	sp,sp,-16
 400315c:	dfc00315 	stw	ra,12(sp)
 4003160:	df000215 	stw	fp,8(sp)
 4003164:	df000204 	addi	fp,sp,8
 4003168:	e13fff15 	stw	r4,-4(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 400316c:	00800044 	movi	r2,1
 4003170:	e0bffe05 	stb	r2,-8(fp)
 4003174:	e0bffe03 	ldbu	r2,-8(fp)
 4003178:	10800428 	cmpgeui	r2,r2,16
 400317c:	1000081e 	bne	r2,zero,40031a0 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x48>
                        InitEntry(i);
 4003180:	e0bffe03 	ldbu	r2,-8(fp)
 4003184:	100b883a 	mov	r5,r2
 4003188:	e13fff17 	ldw	r4,-4(fp)
 400318c:	40030140 	call	4003014 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 4003190:	e0bffe03 	ldbu	r2,-8(fp)
 4003194:	10800044 	addi	r2,r2,1
 4003198:	e0bffe05 	stb	r2,-8(fp)
 400319c:	003ff506 	br	4003174 <__alt_data_end+0xfc003174>
                        InitEntry(i);

                hubCounter = 0;
 40031a0:	e0bfff17 	ldw	r2,-4(fp)
 40031a4:	100001c5 	stb	zero,7(r2)
        };
 40031a8:	0001883a 	nop
 40031ac:	e037883a 	mov	sp,fp
 40031b0:	dfc00117 	ldw	ra,4(sp)
 40031b4:	df000017 	ldw	fp,0(sp)
 40031b8:	dec00204 	addi	sp,sp,8
 40031bc:	f800283a 	ret

040031c0 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
                thePool[index].epinfo = &dev0ep;
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
 40031c0:	defffa04 	addi	sp,sp,-24
 40031c4:	dfc00515 	stw	ra,20(sp)
 40031c8:	df000415 	stw	fp,16(sp)
 40031cc:	dc000315 	stw	r16,12(sp)
 40031d0:	df000404 	addi	fp,sp,16
 40031d4:	e13ffd15 	stw	r4,-12(fp)
 40031d8:	2805883a 	mov	r2,r5
 40031dc:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 40031e0:	00800044 	movi	r2,1
 40031e4:	e0bffc05 	stb	r2,-16(fp)
 40031e8:	e0bffc03 	ldbu	r2,-16(fp)
 40031ec:	10800428 	cmpgeui	r2,r2,16
 40031f0:	1000111e 	bne	r2,zero,4003238 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x78>
                        if(thePool[i].address.devAddress == address)
 40031f4:	e0bffc03 	ldbu	r2,-16(fp)
 40031f8:	e43ffd17 	ldw	r16,-12(fp)
 40031fc:	014001c4 	movi	r5,7
 4003200:	1009883a 	mov	r4,r2
 4003204:	400aa340 	call	400aa34 <__mulsi3>
 4003208:	8085883a 	add	r2,r16,r2
 400320c:	10800304 	addi	r2,r2,12
 4003210:	10800003 	ldbu	r2,0(r2)
 4003214:	10c03fcc 	andi	r3,r2,255
 4003218:	e0bffe03 	ldbu	r2,-8(fp)
 400321c:	1880021e 	bne	r3,r2,4003228 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x68>
                                return i;
 4003220:	e0bffc03 	ldbu	r2,-16(fp)
 4003224:	00000506 	br	400323c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x7c>
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 4003228:	e0bffc03 	ldbu	r2,-16(fp)
 400322c:	10800044 	addi	r2,r2,1
 4003230:	e0bffc05 	stb	r2,-16(fp)
 4003234:	003fec06 	br	40031e8 <__alt_data_end+0xfc0031e8>
                        if(thePool[i].address.devAddress == address)
                                return i;
                }
                return 0;
 4003238:	0005883a 	mov	r2,zero
        };
 400323c:	e6ffff04 	addi	sp,fp,-4
 4003240:	dfc00217 	ldw	ra,8(sp)
 4003244:	df000117 	ldw	fp,4(sp)
 4003248:	dc000017 	ldw	r16,0(sp)
 400324c:	dec00304 	addi	sp,sp,12
 4003250:	f800283a 	ret

04003254 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
                return 0;
        };

        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
 4003254:	defffa04 	addi	sp,sp,-24
 4003258:	dfc00515 	stw	ra,20(sp)
 400325c:	df000415 	stw	fp,16(sp)
 4003260:	dc000315 	stw	r16,12(sp)
 4003264:	df000404 	addi	fp,sp,16
 4003268:	e13ffd15 	stw	r4,-12(fp)
 400326c:	2805883a 	mov	r2,r5
 4003270:	e0bffe05 	stb	r2,-8(fp)
                // Zero field is reserved and should not be affected
                if(index == 0)
 4003274:	e0bffe03 	ldbu	r2,-8(fp)
 4003278:	10003026 	beq	r2,zero,400333c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xe8>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
 400327c:	e0bffe03 	ldbu	r2,-8(fp)
 4003280:	e43ffd17 	ldw	r16,-12(fp)
 4003284:	014001c4 	movi	r5,7
 4003288:	1009883a 	mov	r4,r2
 400328c:	400aa340 	call	400aa34 <__mulsi3>
 4003290:	8085883a 	add	r2,r16,r2
 4003294:	10800304 	addi	r2,r2,12
 4003298:	10800003 	ldbu	r2,0(r2)
 400329c:	e0bffc45 	stb	r2,-15(fp)
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
 40032a0:	e0bffc43 	ldbu	r2,-15(fp)
 40032a4:	1080100c 	andi	r2,r2,64
 40032a8:	10803fcc 	andi	r2,r2,255
 40032ac:	10001e26 	beq	r2,zero,4003328 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 40032b0:	00800044 	movi	r2,1
 40032b4:	e0bffc05 	stb	r2,-16(fp)
 40032b8:	e0bffc03 	ldbu	r2,-16(fp)
 40032bc:	100d883a 	mov	r6,r2
 40032c0:	e17ffc43 	ldbu	r5,-15(fp)
 40032c4:	e13ffd17 	ldw	r4,-12(fp)
 40032c8:	40033580 	call	4003358 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 40032cc:	e0bffc05 	stb	r2,-16(fp)
 40032d0:	e0bffc03 	ldbu	r2,-16(fp)
 40032d4:	1004c03a 	cmpne	r2,r2,zero
 40032d8:	10803fcc 	andi	r2,r2,255
 40032dc:	10000526 	beq	r2,zero,40032f4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xa0>
                                FreeAddressByIndex(i);
 40032e0:	e0bffc03 	ldbu	r2,-16(fp)
 40032e4:	100b883a 	mov	r5,r2
 40032e8:	e13ffd17 	ldw	r4,-12(fp)
 40032ec:	40032540 	call	4003254 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 40032f0:	003ff106 	br	40032b8 <__alt_data_end+0xfc0032b8>
                                FreeAddressByIndex(i);

                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
 40032f4:	e0bffd17 	ldw	r2,-12(fp)
 40032f8:	10c001c3 	ldbu	r3,7(r2)
 40032fc:	e0bffc43 	ldbu	r2,-15(fp)
 4003300:	108001cc 	andi	r2,r2,7
 4003304:	18c03fcc 	andi	r3,r3,255
 4003308:	10803fcc 	andi	r2,r2,255
 400330c:	1880061e 	bne	r3,r2,4003328 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                                hubCounter--;
 4003310:	e0bffd17 	ldw	r2,-12(fp)
 4003314:	108001c3 	ldbu	r2,7(r2)
 4003318:	10bfffc4 	addi	r2,r2,-1
 400331c:	1007883a 	mov	r3,r2
 4003320:	e0bffd17 	ldw	r2,-12(fp)
 4003324:	10c001c5 	stb	r3,7(r2)
                }
                InitEntry(index);
 4003328:	e0bffe03 	ldbu	r2,-8(fp)
 400332c:	100b883a 	mov	r5,r2
 4003330:	e13ffd17 	ldw	r4,-12(fp)
 4003334:	40030140 	call	4003014 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 4003338:	00000106 	br	4003340 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xec>
        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
                // Zero field is reserved and should not be affected
                if(index == 0)
                        return;
 400333c:	0001883a 	nop
                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
                                hubCounter--;
                }
                InitEntry(index);
        }
 4003340:	e6ffff04 	addi	sp,fp,-4
 4003344:	dfc00217 	ldw	ra,8(sp)
 4003348:	df000117 	ldw	fp,4(sp)
 400334c:	dc000017 	ldw	r16,0(sp)
 4003350:	dec00304 	addi	sp,sp,12
 4003354:	f800283a 	ret

04003358 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
                return 0;
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 4003358:	defff904 	addi	sp,sp,-28
 400335c:	dfc00615 	stw	ra,24(sp)
 4003360:	df000515 	stw	fp,20(sp)
 4003364:	dc000415 	stw	r16,16(sp)
 4003368:	df000504 	addi	fp,sp,20
 400336c:	e13ffc15 	stw	r4,-16(fp)
 4003370:	e17ffd05 	stb	r5,-12(fp)
 4003374:	3005883a 	mov	r2,r6
 4003378:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 400337c:	e0bffe03 	ldbu	r2,-8(fp)
 4003380:	10000526 	beq	r2,zero,4003398 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
 4003384:	e0bffe03 	ldbu	r2,-8(fp)
 4003388:	10800428 	cmpgeui	r2,r2,16
 400338c:	1000021e 	bne	r2,zero,4003398 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
 4003390:	e0bffe03 	ldbu	r2,-8(fp)
 4003394:	00000106 	br	400339c <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x44>
 4003398:	00800044 	movi	r2,1
 400339c:	e0bffb05 	stb	r2,-20(fp)
 40033a0:	e0bffb03 	ldbu	r2,-20(fp)
 40033a4:	10800428 	cmpgeui	r2,r2,16
 40033a8:	1000161e 	bne	r2,zero,4003404 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xac>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 40033ac:	e0bffb03 	ldbu	r2,-20(fp)
 40033b0:	e43ffc17 	ldw	r16,-16(fp)
 40033b4:	014001c4 	movi	r5,7
 40033b8:	1009883a 	mov	r4,r2
 40033bc:	400aa340 	call	400aa34 <__mulsi3>
 40033c0:	8085883a 	add	r2,r16,r2
 40033c4:	10800304 	addi	r2,r2,12
 40033c8:	10800003 	ldbu	r2,0(r2)
 40033cc:	1004d0fa 	srli	r2,r2,3
 40033d0:	108001cc 	andi	r2,r2,7
 40033d4:	1007883a 	mov	r3,r2
 40033d8:	e0bffd03 	ldbu	r2,-12(fp)
 40033dc:	108001cc 	andi	r2,r2,7
 40033e0:	18c03fcc 	andi	r3,r3,255
 40033e4:	10803fcc 	andi	r2,r2,255
 40033e8:	1880021e 	bne	r3,r2,40033f4 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x9c>
                                return i;
 40033ec:	e0bffb03 	ldbu	r2,-20(fp)
 40033f0:	00000506 	br	4003408 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xb0>
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 40033f4:	e0bffb03 	ldbu	r2,-20(fp)
 40033f8:	10800044 	addi	r2,r2,1
 40033fc:	e0bffb05 	stb	r2,-20(fp)
 4003400:	003fe706 	br	40033a0 <__alt_data_end+0xfc0033a0>
                        if(thePool[i].address.bmParent == addr.bmAddress)
                                return i;
                }
                return 0;
 4003404:	0005883a 	mov	r2,zero
        };
 4003408:	e6ffff04 	addi	sp,fp,-4
 400340c:	dfc00217 	ldw	ra,8(sp)
 4003410:	df000117 	ldw	fp,4(sp)
 4003414:	dc000017 	ldw	r16,0(sp)
 4003418:	dec00304 	addi	sp,sp,12
 400341c:	f800283a 	ret

04003420 <_ZN7XBOXONEC1EP3USB>:
#include "XBOXONE.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the Xbox ONE Controller

XBOXONE::XBOXONE(USB *p) :
 4003420:	defffb04 	addi	sp,sp,-20
 4003424:	dfc00415 	stw	ra,16(sp)
 4003428:	df000315 	stw	fp,12(sp)
 400342c:	df000304 	addi	fp,sp,12
 4003430:	e13ffe15 	stw	r4,-8(fp)
 4003434:	e17fff15 	stw	r5,-4(fp)
pUsb(p), // pointer to USB class instance - mandatory
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
 4003438:	e0bffe17 	ldw	r2,-8(fp)
 400343c:	1009883a 	mov	r4,r2
 4003440:	4004ddc0 	call	4004ddc <_ZN15USBDeviceConfigC1Ev>
 4003444:	e0bffe17 	ldw	r2,-8(fp)
 4003448:	10800104 	addi	r2,r2,4
 400344c:	1009883a 	mov	r4,r2
 4003450:	4004e100 	call	4004e10 <_ZN17UsbConfigXtracterC1Ev>
 4003454:	008100b4 	movhi	r2,1026
 4003458:	10acba04 	addi	r2,r2,-19736
 400345c:	e0fffe17 	ldw	r3,-8(fp)
 4003460:	18800015 	stw	r2,0(r3)
 4003464:	008100b4 	movhi	r2,1026
 4003468:	10acc704 	addi	r2,r2,-19684
 400346c:	e0fffe17 	ldw	r3,-8(fp)
 4003470:	18800115 	stw	r2,4(r3)
 4003474:	e0bffe17 	ldw	r2,-8(fp)
 4003478:	e0ffff17 	ldw	r3,-4(fp)
 400347c:	10c00315 	stw	r3,12(r2)
 4003480:	e0bffe17 	ldw	r2,-8(fp)
 4003484:	10000405 	stb	zero,16(r2)
 4003488:	e0bffe17 	ldw	r2,-8(fp)
 400348c:	00c00044 	movi	r3,1
 4003490:	10c006c5 	stb	r3,27(r2)
 4003494:	e0bffe17 	ldw	r2,-8(fp)
 4003498:	10000715 	stw	zero,28(r2)
 400349c:	e0bffe17 	ldw	r2,-8(fp)
 40034a0:	10000905 	stb	zero,36(r2)
 40034a4:	e0bffe17 	ldw	r2,-8(fp)
 40034a8:	10000945 	stb	zero,37(r2)
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
 40034ac:	e03ffd05 	stb	zero,-12(fp)
 40034b0:	e0bffd03 	ldbu	r2,-12(fp)
 40034b4:	108000e8 	cmpgeui	r2,r2,3
 40034b8:	1000431e 	bne	r2,zero,40035c8 <_ZN7XBOXONEC1EP3USB+0x1a8>
                epInfo[i].epAddr = 0;
 40034bc:	e0fffd03 	ldbu	r3,-12(fp)
 40034c0:	e13ffe17 	ldw	r4,-8(fp)
 40034c4:	1805883a 	mov	r2,r3
 40034c8:	1085883a 	add	r2,r2,r2
 40034cc:	10c5883a 	add	r2,r2,r3
 40034d0:	2085883a 	add	r2,r4,r2
 40034d4:	10800444 	addi	r2,r2,17
 40034d8:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 40034dc:	e13ffd03 	ldbu	r4,-12(fp)
 40034e0:	e0bffd03 	ldbu	r2,-12(fp)
 40034e4:	10000226 	beq	r2,zero,40034f0 <_ZN7XBOXONEC1EP3USB+0xd0>
 40034e8:	0007883a 	mov	r3,zero
 40034ec:	00000106 	br	40034f4 <_ZN7XBOXONEC1EP3USB+0xd4>
 40034f0:	00c00204 	movi	r3,8
 40034f4:	e17ffe17 	ldw	r5,-8(fp)
 40034f8:	2005883a 	mov	r2,r4
 40034fc:	1085883a 	add	r2,r2,r2
 4003500:	1105883a 	add	r2,r2,r4
 4003504:	2885883a 	add	r2,r5,r2
 4003508:	10800484 	addi	r2,r2,18
 400350c:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmSndToggle = 0;
 4003510:	e0fffd03 	ldbu	r3,-12(fp)
 4003514:	e13ffe17 	ldw	r4,-8(fp)
 4003518:	1805883a 	mov	r2,r3
 400351c:	1085883a 	add	r2,r2,r2
 4003520:	10c5883a 	add	r2,r2,r3
 4003524:	2085883a 	add	r2,r4,r2
 4003528:	10800404 	addi	r2,r2,16
 400352c:	110000c3 	ldbu	r4,3(r2)
 4003530:	00ffff84 	movi	r3,-2
 4003534:	20c6703a 	and	r3,r4,r3
 4003538:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmRcvToggle = 0;
 400353c:	e0fffd03 	ldbu	r3,-12(fp)
 4003540:	e13ffe17 	ldw	r4,-8(fp)
 4003544:	1805883a 	mov	r2,r3
 4003548:	1085883a 	add	r2,r2,r2
 400354c:	10c5883a 	add	r2,r2,r3
 4003550:	2085883a 	add	r2,r4,r2
 4003554:	10800404 	addi	r2,r2,16
 4003558:	110000c3 	ldbu	r4,3(r2)
 400355c:	00ffff44 	movi	r3,-3
 4003560:	20c6703a 	and	r3,r4,r3
 4003564:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 4003568:	e13ffd03 	ldbu	r4,-12(fp)
 400356c:	e0bffd03 	ldbu	r2,-12(fp)
 4003570:	10000226 	beq	r2,zero,400357c <_ZN7XBOXONEC1EP3USB+0x15c>
 4003574:	00c00044 	movi	r3,1
 4003578:	00000106 	br	4003580 <_ZN7XBOXONEC1EP3USB+0x160>
 400357c:	00c003c4 	movi	r3,15
 4003580:	e17ffe17 	ldw	r5,-8(fp)
 4003584:	2005883a 	mov	r2,r4
 4003588:	1085883a 	add	r2,r2,r2
 400358c:	1105883a 	add	r2,r2,r4
 4003590:	2885883a 	add	r2,r5,r2
 4003594:	10800404 	addi	r2,r2,16
 4003598:	18c7883a 	add	r3,r3,r3
 400359c:	18cb883a 	add	r5,r3,r3
 40035a0:	10c000c3 	ldbu	r3,3(r2)
 40035a4:	18c000cc 	andi	r3,r3,3
 40035a8:	1809883a 	mov	r4,r3
 40035ac:	2807883a 	mov	r3,r5
 40035b0:	20c6b03a 	or	r3,r4,r3
 40035b4:	10c000c5 	stb	r3,3(r2)
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
 40035b8:	e0bffd03 	ldbu	r2,-12(fp)
 40035bc:	10800044 	addi	r2,r2,1
 40035c0:	e0bffd05 	stb	r2,-12(fp)
 40035c4:	003fba06 	br	40034b0 <__alt_data_end+0xfc0034b0>
                epInfo[i].bmSndToggle = 0;
                epInfo[i].bmRcvToggle = 0;
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }

        if(pUsb) // register in USB subsystem
 40035c8:	e0bffe17 	ldw	r2,-8(fp)
 40035cc:	10800317 	ldw	r2,12(r2)
 40035d0:	10000626 	beq	r2,zero,40035ec <_ZN7XBOXONEC1EP3USB+0x1cc>
                pUsb->RegisterDeviceClass(this); //set devConfig[] entry
 40035d4:	e0bffe17 	ldw	r2,-8(fp)
 40035d8:	10800317 	ldw	r2,12(r2)
 40035dc:	e0fffe17 	ldw	r3,-8(fp)
 40035e0:	180b883a 	mov	r5,r3
 40035e4:	1009883a 	mov	r4,r2
 40035e8:	4004b900 	call	4004b90 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 40035ec:	0001883a 	nop
 40035f0:	e037883a 	mov	sp,fp
 40035f4:	dfc00117 	ldw	ra,4(sp)
 40035f8:	df000017 	ldw	fp,0(sp)
 40035fc:	dec00204 	addi	sp,sp,8
 4003600:	f800283a 	ret

04003604 <_ZN7XBOXONE4InitEhhb>:

uint8_t XBOXONE::Init(uint8_t parent, uint8_t port, bool lowspeed) {
 4003604:	deffde04 	addi	sp,sp,-136
 4003608:	dfc02115 	stw	ra,132(sp)
 400360c:	df002015 	stw	fp,128(sp)
 4003610:	df002004 	addi	fp,sp,128
 4003614:	e13ffc15 	stw	r4,-16(fp)
 4003618:	2809883a 	mov	r4,r5
 400361c:	3007883a 	mov	r3,r6
 4003620:	3805883a 	mov	r2,r7
 4003624:	e13ffd05 	stb	r4,-12(fp)
 4003628:	e0fffe05 	stb	r3,-8(fp)
 400362c:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 4003630:	e0bfe744 	addi	r2,fp,-99
 4003634:	e0bfe215 	stw	r2,-120(fp)
        uint8_t rcode;
        UsbDevice *p = NULL;
 4003638:	e03fe315 	stw	zero,-116(fp)
        EpInfo *oldep_ptr = NULL;
 400363c:	e03fe415 	stw	zero,-112(fp)
        uint16_t PID, VID;
        uint8_t num_of_conf; // Number of configurations

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
 4003640:	e0bffc17 	ldw	r2,-16(fp)
 4003644:	10800317 	ldw	r2,12(r2)
 4003648:	1009883a 	mov	r4,r2
 400364c:	4002b6c0 	call	4002b6c <_ZN3USB14GetAddressPoolEv>
 4003650:	e0bfe515 	stw	r2,-108(fp)
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nXBOXONE Init"), 0x80);
#endif
        // check if address has already been assigned to an instance
        if(bAddress) {
 4003654:	e0bffc17 	ldw	r2,-16(fp)
 4003658:	10800403 	ldbu	r2,16(r2)
 400365c:	10803fcc 	andi	r2,r2,255
 4003660:	10000226 	beq	r2,zero,400366c <_ZN7XBOXONE4InitEhhb+0x68>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 4003664:	00bff644 	movi	r2,-39
 4003668:	00017606 	br	4003c44 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 400366c:	e0bfe517 	ldw	r2,-108(fp)
 4003670:	10800017 	ldw	r2,0(r2)
 4003674:	10800017 	ldw	r2,0(r2)
 4003678:	000b883a 	mov	r5,zero
 400367c:	e13fe517 	ldw	r4,-108(fp)
 4003680:	103ee83a 	callr	r2
 4003684:	e0bfe315 	stw	r2,-116(fp)

        if(!p) {
 4003688:	e0bfe317 	ldw	r2,-116(fp)
 400368c:	1000021e 	bne	r2,zero,4003698 <_ZN7XBOXONE4InitEhhb+0x94>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 4003690:	00bff584 	movi	r2,-42
 4003694:	00016b06 	br	4003c44 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        if(!p->epinfo) {
 4003698:	e0bfe317 	ldw	r2,-116(fp)
 400369c:	10c00003 	ldbu	r3,0(r2)
 40036a0:	11000043 	ldbu	r4,1(r2)
 40036a4:	2008923a 	slli	r4,r4,8
 40036a8:	20c6b03a 	or	r3,r4,r3
 40036ac:	11000083 	ldbu	r4,2(r2)
 40036b0:	2008943a 	slli	r4,r4,16
 40036b4:	20c6b03a 	or	r3,r4,r3
 40036b8:	108000c3 	ldbu	r2,3(r2)
 40036bc:	1004963a 	slli	r2,r2,24
 40036c0:	10c4b03a 	or	r2,r2,r3
 40036c4:	1000021e 	bne	r2,zero,40036d0 <_ZN7XBOXONE4InitEhhb+0xcc>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 40036c8:	00bff5c4 	movi	r2,-41
 40036cc:	00015d06 	br	4003c44 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 40036d0:	e0bfe317 	ldw	r2,-116(fp)
 40036d4:	10c00003 	ldbu	r3,0(r2)
 40036d8:	11000043 	ldbu	r4,1(r2)
 40036dc:	2008923a 	slli	r4,r4,8
 40036e0:	20c6b03a 	or	r3,r4,r3
 40036e4:	11000083 	ldbu	r4,2(r2)
 40036e8:	2008943a 	slli	r4,r4,16
 40036ec:	20c6b03a 	or	r3,r4,r3
 40036f0:	108000c3 	ldbu	r2,3(r2)
 40036f4:	1004963a 	slli	r2,r2,24
 40036f8:	10c4b03a 	or	r2,r2,r3
 40036fc:	e0bfe415 	stw	r2,-112(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
 4003700:	e0bffc17 	ldw	r2,-16(fp)
 4003704:	10c00444 	addi	r3,r2,17
 4003708:	e0bfe317 	ldw	r2,-116(fp)
 400370c:	19803fcc 	andi	r6,r3,255
 4003710:	11000003 	ldbu	r4,0(r2)
 4003714:	2008703a 	and	r4,r4,zero
 4003718:	200b883a 	mov	r5,r4
 400371c:	3009883a 	mov	r4,r6
 4003720:	2908b03a 	or	r4,r5,r4
 4003724:	11000005 	stb	r4,0(r2)
 4003728:	1808d23a 	srli	r4,r3,8
 400372c:	21803fcc 	andi	r6,r4,255
 4003730:	11000043 	ldbu	r4,1(r2)
 4003734:	2008703a 	and	r4,r4,zero
 4003738:	200b883a 	mov	r5,r4
 400373c:	3009883a 	mov	r4,r6
 4003740:	2908b03a 	or	r4,r5,r4
 4003744:	11000045 	stb	r4,1(r2)
 4003748:	1808d43a 	srli	r4,r3,16
 400374c:	21803fcc 	andi	r6,r4,255
 4003750:	11000083 	ldbu	r4,2(r2)
 4003754:	2008703a 	and	r4,r4,zero
 4003758:	200b883a 	mov	r5,r4
 400375c:	3009883a 	mov	r4,r6
 4003760:	2908b03a 	or	r4,r5,r4
 4003764:	11000085 	stb	r4,2(r2)
 4003768:	180ad63a 	srli	r5,r3,24
 400376c:	10c000c3 	ldbu	r3,3(r2)
 4003770:	1806703a 	and	r3,r3,zero
 4003774:	1809883a 	mov	r4,r3
 4003778:	2807883a 	mov	r3,r5
 400377c:	20c6b03a 	or	r3,r4,r3
 4003780:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
 4003784:	e0bfe317 	ldw	r2,-116(fp)
 4003788:	e0ffff03 	ldbu	r3,-4(fp)
 400378c:	10c00185 	stb	r3,6(r2)

        // Get device descriptor
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 4003790:	e0bffc17 	ldw	r2,-16(fp)
 4003794:	10c00317 	ldw	r3,12(r2)
 4003798:	00800484 	movi	r2,18
 400379c:	113fffcc 	andi	r4,r2,65535
 40037a0:	e0bfe744 	addi	r2,fp,-99
 40037a4:	d8800015 	stw	r2,0(sp)
 40037a8:	200f883a 	mov	r7,r4
 40037ac:	000d883a 	mov	r6,zero
 40037b0:	000b883a 	mov	r5,zero
 40037b4:	1809883a 	mov	r4,r3
 40037b8:	40027980 	call	4002798 <_ZN3USB11getDevDescrEhhtPh>
 40037bc:	e0bfe105 	stb	r2,-124(fp)
        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 40037c0:	e0bfe317 	ldw	r2,-116(fp)
 40037c4:	e0ffe417 	ldw	r3,-112(fp)
 40037c8:	19403fcc 	andi	r5,r3,255
 40037cc:	10c00003 	ldbu	r3,0(r2)
 40037d0:	1806703a 	and	r3,r3,zero
 40037d4:	1809883a 	mov	r4,r3
 40037d8:	2807883a 	mov	r3,r5
 40037dc:	20c6b03a 	or	r3,r4,r3
 40037e0:	10c00005 	stb	r3,0(r2)
 40037e4:	e0ffe417 	ldw	r3,-112(fp)
 40037e8:	1806d23a 	srli	r3,r3,8
 40037ec:	19403fcc 	andi	r5,r3,255
 40037f0:	10c00043 	ldbu	r3,1(r2)
 40037f4:	1806703a 	and	r3,r3,zero
 40037f8:	1809883a 	mov	r4,r3
 40037fc:	2807883a 	mov	r3,r5
 4003800:	20c6b03a 	or	r3,r4,r3
 4003804:	10c00045 	stb	r3,1(r2)
 4003808:	e0ffe417 	ldw	r3,-112(fp)
 400380c:	1806d43a 	srli	r3,r3,16
 4003810:	19403fcc 	andi	r5,r3,255
 4003814:	10c00083 	ldbu	r3,2(r2)
 4003818:	1806703a 	and	r3,r3,zero
 400381c:	1809883a 	mov	r4,r3
 4003820:	2807883a 	mov	r3,r5
 4003824:	20c6b03a 	or	r3,r4,r3
 4003828:	10c00085 	stb	r3,2(r2)
 400382c:	e0ffe417 	ldw	r3,-112(fp)
 4003830:	180ad63a 	srli	r5,r3,24
 4003834:	10c000c3 	ldbu	r3,3(r2)
 4003838:	1806703a 	and	r3,r3,zero
 400383c:	1809883a 	mov	r4,r3
 4003840:	2807883a 	mov	r3,r5
 4003844:	20c6b03a 	or	r3,r4,r3
 4003848:	10c000c5 	stb	r3,3(r2)

        if(rcode)
 400384c:	e0bfe103 	ldbu	r2,-124(fp)
 4003850:	1000e61e 	bne	r2,zero,4003bec <_ZN7XBOXONE4InitEhhb+0x5e8>
                goto FailGetDevDescr;

        VID = udd->idVendor;
 4003854:	e0bfe217 	ldw	r2,-120(fp)
 4003858:	10c00203 	ldbu	r3,8(r2)
 400385c:	10800243 	ldbu	r2,9(r2)
 4003860:	1004923a 	slli	r2,r2,8
 4003864:	10c4b03a 	or	r2,r2,r3
 4003868:	e0bfe60d 	sth	r2,-104(fp)
        PID = udd->idProduct;
 400386c:	e0bfe217 	ldw	r2,-120(fp)
 4003870:	10c00283 	ldbu	r3,10(r2)
 4003874:	108002c3 	ldbu	r2,11(r2)
 4003878:	1004923a 	slli	r2,r2,8
 400387c:	10c4b03a 	or	r2,r2,r3
 4003880:	e0bfe68d 	sth	r2,-102(fp)

        if(!VIDPIDOK(VID, PID)) // Check VID
 4003884:	e0bffc17 	ldw	r2,-16(fp)
 4003888:	10800017 	ldw	r2,0(r2)
 400388c:	10800604 	addi	r2,r2,24
 4003890:	10800017 	ldw	r2,0(r2)
 4003894:	e0ffe60b 	ldhu	r3,-104(fp)
 4003898:	e13fe68b 	ldhu	r4,-102(fp)
 400389c:	200d883a 	mov	r6,r4
 40038a0:	180b883a 	mov	r5,r3
 40038a4:	e13ffc17 	ldw	r4,-16(fp)
 40038a8:	103ee83a 	callr	r2
 40038ac:	1080005c 	xori	r2,r2,1
 40038b0:	10803fcc 	andi	r2,r2,255
 40038b4:	1000d51e 	bne	r2,zero,4003c0c <_ZN7XBOXONE4InitEhhb+0x608>
                goto FailUnknownDevice;

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
 40038b8:	e0bfe517 	ldw	r2,-108(fp)
 40038bc:	10800017 	ldw	r2,0(r2)
 40038c0:	10800104 	addi	r2,r2,4
 40038c4:	10800017 	ldw	r2,0(r2)
 40038c8:	e0fffd03 	ldbu	r3,-12(fp)
 40038cc:	e13ffe03 	ldbu	r4,-8(fp)
 40038d0:	200f883a 	mov	r7,r4
 40038d4:	000d883a 	mov	r6,zero
 40038d8:	180b883a 	mov	r5,r3
 40038dc:	e13fe517 	ldw	r4,-108(fp)
 40038e0:	103ee83a 	callr	r2
 40038e4:	1007883a 	mov	r3,r2
 40038e8:	e0bffc17 	ldw	r2,-16(fp)
 40038ec:	10c00405 	stb	r3,16(r2)

        if(!bAddress)
 40038f0:	e0bffc17 	ldw	r2,-16(fp)
 40038f4:	10800403 	ldbu	r2,16(r2)
 40038f8:	10803fcc 	andi	r2,r2,255
 40038fc:	1000021e 	bne	r2,zero,4003908 <_ZN7XBOXONE4InitEhhb+0x304>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 4003900:	00bff504 	movi	r2,-44
 4003904:	0000cf06 	br	4003c44 <_ZN7XBOXONE4InitEhhb+0x640>

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
 4003908:	e0bfe217 	ldw	r2,-120(fp)
 400390c:	10c001c3 	ldbu	r3,7(r2)
 4003910:	e0bffc17 	ldw	r2,-16(fp)
 4003914:	10c00485 	stb	r3,18(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr(0, 0, bAddress);
 4003918:	e0bffc17 	ldw	r2,-16(fp)
 400391c:	10c00317 	ldw	r3,12(r2)
 4003920:	e0bffc17 	ldw	r2,-16(fp)
 4003924:	10800403 	ldbu	r2,16(r2)
 4003928:	10803fcc 	andi	r2,r2,255
 400392c:	100f883a 	mov	r7,r2
 4003930:	000d883a 	mov	r6,zero
 4003934:	000b883a 	mov	r5,zero
 4003938:	1809883a 	mov	r4,r3
 400393c:	4002a540 	call	4002a54 <_ZN3USB7setAddrEhhh>
 4003940:	e0bfe105 	stb	r2,-124(fp)
        if(rcode) {
 4003944:	e0bfe103 	ldbu	r2,-124(fp)
 4003948:	10001026 	beq	r2,zero,400398c <_ZN7XBOXONE4InitEhhb+0x388>
                p->lowspeed = false;
 400394c:	e0bfe317 	ldw	r2,-116(fp)
 4003950:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
 4003954:	e0bfe517 	ldw	r2,-108(fp)
 4003958:	10800017 	ldw	r2,0(r2)
 400395c:	10800204 	addi	r2,r2,8
 4003960:	10800017 	ldw	r2,0(r2)
 4003964:	e0fffc17 	ldw	r3,-16(fp)
 4003968:	18c00403 	ldbu	r3,16(r3)
 400396c:	18c03fcc 	andi	r3,r3,255
 4003970:	180b883a 	mov	r5,r3
 4003974:	e13fe517 	ldw	r4,-108(fp)
 4003978:	103ee83a 	callr	r2
                bAddress = 0;
 400397c:	e0bffc17 	ldw	r2,-16(fp)
 4003980:	10000405 	stb	zero,16(r2)
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                return rcode;
 4003984:	e0bfe103 	ldbu	r2,-124(fp)
 4003988:	0000ae06 	br	4003c44 <_ZN7XBOXONE4InitEhhb+0x640>
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif
        //delay(300); // Spec says you should wait at least 200ms

        p->lowspeed = false;
 400398c:	e0bfe317 	ldw	r2,-116(fp)
 4003990:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
 4003994:	e0bfe517 	ldw	r2,-108(fp)
 4003998:	10800017 	ldw	r2,0(r2)
 400399c:	10800017 	ldw	r2,0(r2)
 40039a0:	e0fffc17 	ldw	r3,-16(fp)
 40039a4:	18c00403 	ldbu	r3,16(r3)
 40039a8:	18c03fcc 	andi	r3,r3,255
 40039ac:	180b883a 	mov	r5,r3
 40039b0:	e13fe517 	ldw	r4,-108(fp)
 40039b4:	103ee83a 	callr	r2
 40039b8:	e0bfe315 	stw	r2,-116(fp)
        if(!p)
 40039bc:	e0bfe317 	ldw	r2,-116(fp)
 40039c0:	1000021e 	bne	r2,zero,40039cc <_ZN7XBOXONE4InitEhhb+0x3c8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 40039c4:	00bff584 	movi	r2,-42
 40039c8:	00009e06 	br	4003c44 <_ZN7XBOXONE4InitEhhb+0x640>

        p->lowspeed = lowspeed;
 40039cc:	e0bfe317 	ldw	r2,-116(fp)
 40039d0:	e0ffff03 	ldbu	r3,-4(fp)
 40039d4:	10c00185 	stb	r3,6(r2)

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
 40039d8:	e0bffc17 	ldw	r2,-16(fp)
 40039dc:	10c00317 	ldw	r3,12(r2)
 40039e0:	e0bffc17 	ldw	r2,-16(fp)
 40039e4:	10800403 	ldbu	r2,16(r2)
 40039e8:	11003fcc 	andi	r4,r2,255
 40039ec:	e0bffc17 	ldw	r2,-16(fp)
 40039f0:	10800444 	addi	r2,r2,17
 40039f4:	100f883a 	mov	r7,r2
 40039f8:	01800044 	movi	r6,1
 40039fc:	200b883a 	mov	r5,r4
 4003a00:	1809883a 	mov	r4,r3
 4003a04:	40008480 	call	4000848 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 4003a08:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
 4003a0c:	e0bfe103 	ldbu	r2,-124(fp)
 4003a10:	1000781e 	bne	r2,zero,4003bf4 <_ZN7XBOXONE4InitEhhb+0x5f0>
                goto FailSetDevTblEntry;

        num_of_conf = udd->bNumConfigurations; // Number of configurations
 4003a14:	e0bfe217 	ldw	r2,-120(fp)
 4003a18:	10800443 	ldbu	r2,17(r2)
 4003a1c:	e0bfe705 	stb	r2,-100(fp)

        USBTRACE2("NC:", num_of_conf);
 4003a20:	e0bfe703 	ldbu	r2,-100(fp)
 4003a24:	01402004 	movi	r5,128
 4003a28:	1009883a 	mov	r4,r2
 4003a2c:	4002d1c0 	call	4002d1c <_Z10D_PrintHexIhEvT_i>

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
 4003a30:	e03fe145 	stb	zero,-123(fp)
 4003a34:	e0ffe143 	ldbu	r3,-123(fp)
 4003a38:	e0bfe703 	ldbu	r2,-100(fp)
 4003a3c:	1880222e 	bgeu	r3,r2,4003ac8 <_ZN7XBOXONE4InitEhhb+0x4c4>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
 4003a40:	e0bffc17 	ldw	r2,-16(fp)
 4003a44:	10c00104 	addi	r3,r2,4
 4003a48:	e0bfed04 	addi	r2,fp,-76
 4003a4c:	180b883a 	mov	r5,r3
 4003a50:	1009883a 	mov	r4,r2
 4003a54:	4004e780 	call	4004e78 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 4003a58:	e0bffc17 	ldw	r2,-16(fp)
 4003a5c:	10c00317 	ldw	r3,12(r2)
 4003a60:	e0bffc17 	ldw	r2,-16(fp)
 4003a64:	10800403 	ldbu	r2,16(r2)
 4003a68:	11003fcc 	andi	r4,r2,255
 4003a6c:	e17fe143 	ldbu	r5,-123(fp)
 4003a70:	e0bfed04 	addi	r2,fp,-76
 4003a74:	d8800015 	stw	r2,0(sp)
 4003a78:	280f883a 	mov	r7,r5
 4003a7c:	000d883a 	mov	r6,zero
 4003a80:	200b883a 	mov	r5,r4
 4003a84:	1809883a 	mov	r4,r3
 4003a88:	40028b40 	call	40028b4 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 4003a8c:	e0bfe105 	stb	r2,-124(fp)
                if(rcode) // Check error code
 4003a90:	e0bfe103 	ldbu	r2,-124(fp)
 4003a94:	10000226 	beq	r2,zero,4003aa0 <_ZN7XBOXONE4InitEhhb+0x49c>
                        goto FailGetConfDescr;
 4003a98:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 4003a9c:	00006206 	br	4003c28 <_ZN7XBOXONE4InitEhhb+0x624>
        for(uint8_t i = 0; i < num_of_conf; i++) {
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
 4003aa0:	e0bffc17 	ldw	r2,-16(fp)
 4003aa4:	108006c3 	ldbu	r2,27(r2)
 4003aa8:	10803fcc 	andi	r2,r2,255
 4003aac:	108000f0 	cmpltui	r2,r2,3
 4003ab0:	10000426 	beq	r2,zero,4003ac4 <_ZN7XBOXONE4InitEhhb+0x4c0>
        num_of_conf = udd->bNumConfigurations; // Number of configurations

        USBTRACE2("NC:", num_of_conf);

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
 4003ab4:	e0bfe143 	ldbu	r2,-123(fp)
 4003ab8:	10800044 	addi	r2,r2,1
 4003abc:	e0bfe145 	stb	r2,-123(fp)
 4003ac0:	003fdc06 	br	4003a34 <__alt_data_end+0xfc003a34>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
 4003ac4:	0001883a 	nop
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
 4003ac8:	e0bffc17 	ldw	r2,-16(fp)
 4003acc:	108006c3 	ldbu	r2,27(r2)
 4003ad0:	10803fcc 	andi	r2,r2,255
 4003ad4:	108000e8 	cmpgeui	r2,r2,3
 4003ad8:	10004e26 	beq	r2,zero,4003c14 <_ZN7XBOXONE4InitEhhb+0x610>
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 4003adc:	e0bffc17 	ldw	r2,-16(fp)
 4003ae0:	10c00317 	ldw	r3,12(r2)
 4003ae4:	e0bffc17 	ldw	r2,-16(fp)
 4003ae8:	10800403 	ldbu	r2,16(r2)
 4003aec:	11003fcc 	andi	r4,r2,255
 4003af0:	e0bffc17 	ldw	r2,-16(fp)
 4003af4:	108006c3 	ldbu	r2,27(r2)
 4003af8:	11403fcc 	andi	r5,r2,255
 4003afc:	e0bffc17 	ldw	r2,-16(fp)
 4003b00:	10800444 	addi	r2,r2,17
 4003b04:	100f883a 	mov	r7,r2
 4003b08:	280d883a 	mov	r6,r5
 4003b0c:	200b883a 	mov	r5,r4
 4003b10:	1809883a 	mov	r4,r3
 4003b14:	40008480 	call	4000848 <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 4003b18:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
 4003b1c:	e0bfe103 	ldbu	r2,-124(fp)
 4003b20:	1000361e 	bne	r2,zero,4003bfc <_ZN7XBOXONE4InitEhhb+0x5f8>
                goto FailSetDevTblEntry;

        delay(200); // Give time for address change
 4003b24:	01003204 	movi	r4,200
 4003b28:	40005d80 	call	40005d8 <_Z5delaym>

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
 4003b2c:	e0bffc17 	ldw	r2,-16(fp)
 4003b30:	10c00317 	ldw	r3,12(r2)
 4003b34:	e0bffc17 	ldw	r2,-16(fp)
 4003b38:	10800403 	ldbu	r2,16(r2)
 4003b3c:	11003fcc 	andi	r4,r2,255
 4003b40:	e0bffc17 	ldw	r2,-16(fp)
 4003b44:	10800443 	ldbu	r2,17(r2)
 4003b48:	11403fcc 	andi	r5,r2,255
 4003b4c:	e0bffc17 	ldw	r2,-16(fp)
 4003b50:	10800683 	ldbu	r2,26(r2)
 4003b54:	10803fcc 	andi	r2,r2,255
 4003b58:	100f883a 	mov	r7,r2
 4003b5c:	280d883a 	mov	r6,r5
 4003b60:	200b883a 	mov	r5,r4
 4003b64:	1809883a 	mov	r4,r3
 4003b68:	4002ae80 	call	4002ae8 <_ZN3USB7setConfEhhh>
 4003b6c:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
 4003b70:	e0bfe103 	ldbu	r2,-124(fp)
 4003b74:	1000231e 	bne	r2,zero,4003c04 <_ZN7XBOXONE4InitEhhb+0x600>

#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Connected\r\n"), 0x80);
#endif

        delay(200); // let things settle
 4003b78:	01003204 	movi	r4,200
 4003b7c:	40005d80 	call	40005d8 <_Z5delaym>

        // Initialize the controller for input
        cmdCounter = 0; // Reset the counter used when sending out the commands
 4003b80:	e0bffc17 	ldw	r2,-16(fp)
 4003b84:	10001f85 	stb	zero,126(r2)
        uint8_t writeBuf[5];
        writeBuf[0] = 0x05;
 4003b88:	00800144 	movi	r2,5
 4003b8c:	e0bfebc5 	stb	r2,-81(fp)
        writeBuf[1] = 0x20;
 4003b90:	00800804 	movi	r2,32
 4003b94:	e0bfec05 	stb	r2,-80(fp)
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
 4003b98:	00800044 	movi	r2,1
 4003b9c:	e0bfec85 	stb	r2,-78(fp)
        writeBuf[4] = 0x00;
 4003ba0:	e03fecc5 	stb	zero,-77(fp)
        rcode = XboxCommand(writeBuf, 5);
 4003ba4:	e0bfebc4 	addi	r2,fp,-81
 4003ba8:	01800144 	movi	r6,5
 4003bac:	100b883a 	mov	r5,r2
 4003bb0:	e13ffc17 	ldw	r4,-16(fp)
 4003bb4:	40044cc0 	call	40044cc <_ZN7XBOXONE11XboxCommandEPht>
 4003bb8:	e0bfe105 	stb	r2,-124(fp)
        if (rcode)
 4003bbc:	e0bfe103 	ldbu	r2,-124(fp)
 4003bc0:	1000181e 	bne	r2,zero,4003c24 <_ZN7XBOXONE4InitEhhb+0x620>
                goto Fail;

        onInit();
 4003bc4:	e13ffc17 	ldw	r4,-16(fp)
 4003bc8:	400456c0 	call	400456c <_ZN7XBOXONE6onInitEv>
        XboxOneConnected = true;
 4003bcc:	e0bffc17 	ldw	r2,-16(fp)
 4003bd0:	00c00044 	movi	r3,1
 4003bd4:	10c00205 	stb	r3,8(r2)
        bPollEnable = true;
 4003bd8:	e0bffc17 	ldw	r2,-16(fp)
 4003bdc:	00c00044 	movi	r3,1
 4003be0:	10c00945 	stb	r3,37(r2)
        return 0; // Successful configuration
 4003be4:	0005883a 	mov	r2,zero
 4003be8:	00001606 	br	4003c44 <_ZN7XBOXONE4InitEhhb+0x640>
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if(rcode)
                goto FailGetDevDescr;
 4003bec:	0001883a 	nop
 4003bf0:	00000d06 	br	4003c28 <_ZN7XBOXONE4InitEhhb+0x624>
        p->lowspeed = lowspeed;

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
 4003bf4:	0001883a 	nop
 4003bf8:	00000b06 	br	4003c28 <_ZN7XBOXONE4InitEhhb+0x624>
        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
 4003bfc:	0001883a 	nop
 4003c00:	00000906 	br	4003c28 <_ZN7XBOXONE4InitEhhb+0x624>

        delay(200); // Give time for address change

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
        if(rcode)
                goto FailSetConfDescr;
 4003c04:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 4003c08:	00000706 	br	4003c28 <_ZN7XBOXONE4InitEhhb+0x624>

        VID = udd->idVendor;
        PID = udd->idProduct;

        if(!VIDPIDOK(VID, PID)) // Check VID
                goto FailUnknownDevice;
 4003c0c:	0001883a 	nop
 4003c10:	00000106 	br	4003c18 <_ZN7XBOXONE4InitEhhb+0x614>
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;
 4003c14:	0001883a 	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 4003c18:	00bff444 	movi	r2,-47
 4003c1c:	e0bfe105 	stb	r2,-124(fp)
 4003c20:	00000106 	br	4003c28 <_ZN7XBOXONE4InitEhhb+0x624>
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
        writeBuf[4] = 0x00;
        rcode = XboxCommand(writeBuf, 5);
        if (rcode)
                goto Fail;
 4003c24:	0001883a 	nop
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 4003c28:	e0bffc17 	ldw	r2,-16(fp)
 4003c2c:	10800017 	ldw	r2,0(r2)
 4003c30:	10800204 	addi	r2,r2,8
 4003c34:	10800017 	ldw	r2,0(r2)
 4003c38:	e13ffc17 	ldw	r4,-16(fp)
 4003c3c:	103ee83a 	callr	r2
        return rcode;
 4003c40:	e0bfe103 	ldbu	r2,-124(fp)
}
 4003c44:	e037883a 	mov	sp,fp
 4003c48:	dfc00117 	ldw	ra,4(sp)
 4003c4c:	df000017 	ldw	fp,0(sp)
 4003c50:	dec00204 	addi	sp,sp,8
 4003c54:	f800283a 	ret

04003c58 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
void XBOXONE::EndpointXtract(uint8_t conf,
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
 4003c58:	defff904 	addi	sp,sp,-28
 4003c5c:	df000615 	stw	fp,24(sp)
 4003c60:	df000604 	addi	fp,sp,24
 4003c64:	e13ffb15 	stw	r4,-20(fp)
 4003c68:	3009883a 	mov	r4,r6
 4003c6c:	3807883a 	mov	r3,r7
 4003c70:	e0800117 	ldw	r2,4(fp)
 4003c74:	e17ffc05 	stb	r5,-16(fp)
 4003c78:	e13ffd05 	stb	r4,-12(fp)
 4003c7c:	e0fffe05 	stb	r3,-8(fp)
 4003c80:	e0bfff05 	stb	r2,-4(fp)
        
    bConfNum = conf;
 4003c84:	e0bffb17 	ldw	r2,-20(fp)
 4003c88:	e0fffc03 	ldbu	r3,-16(fp)
 4003c8c:	10c00685 	stb	r3,26(r2)
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
 4003c90:	e0800217 	ldw	r2,8(fp)
 4003c94:	108000c3 	ldbu	r2,3(r2)
 4003c98:	10803fcc 	andi	r2,r2,255
 4003c9c:	108000cc 	andi	r2,r2,3
 4003ca0:	108000d8 	cmpnei	r2,r2,3
 4003ca4:	1000361e 	bne	r2,zero,4003d80 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x128>
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
 4003ca8:	e0800217 	ldw	r2,8(fp)
 4003cac:	10800083 	ldbu	r2,2(r2)
 4003cb0:	10803fcc 	andi	r2,r2,255
 4003cb4:	1080201c 	xori	r2,r2,128
 4003cb8:	10bfe004 	addi	r2,r2,-128
 4003cbc:	1000020e 	bge	r2,zero,4003cc8 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
 4003cc0:	00800084 	movi	r2,2
 4003cc4:	00000106 	br	4003ccc <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x74>
 4003cc8:	00800044 	movi	r2,1
 4003ccc:	e0bffa05 	stb	r2,-24(fp)
        } else
                return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 4003cd0:	e0fffa03 	ldbu	r3,-24(fp)
 4003cd4:	e0800217 	ldw	r2,8(fp)
 4003cd8:	10800083 	ldbu	r2,2(r2)
 4003cdc:	108003cc 	andi	r2,r2,15
 4003ce0:	100b883a 	mov	r5,r2
 4003ce4:	e13ffb17 	ldw	r4,-20(fp)
 4003ce8:	1805883a 	mov	r2,r3
 4003cec:	1085883a 	add	r2,r2,r2
 4003cf0:	10c5883a 	add	r2,r2,r3
 4003cf4:	2085883a 	add	r2,r4,r2
 4003cf8:	10800444 	addi	r2,r2,17
 4003cfc:	11400005 	stb	r5,0(r2)
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 4003d00:	e0fffa03 	ldbu	r3,-24(fp)
 4003d04:	e0800217 	ldw	r2,8(fp)
 4003d08:	11000103 	ldbu	r4,4(r2)
 4003d0c:	10800143 	ldbu	r2,5(r2)
 4003d10:	1004923a 	slli	r2,r2,8
 4003d14:	1104b03a 	or	r2,r2,r4
 4003d18:	100b883a 	mov	r5,r2
 4003d1c:	e13ffb17 	ldw	r4,-20(fp)
 4003d20:	1805883a 	mov	r2,r3
 4003d24:	1085883a 	add	r2,r2,r2
 4003d28:	10c5883a 	add	r2,r2,r3
 4003d2c:	2085883a 	add	r2,r4,r2
 4003d30:	10800484 	addi	r2,r2,18
 4003d34:	11400005 	stb	r5,0(r2)
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 4003d38:	e0bffb17 	ldw	r2,-20(fp)
 4003d3c:	10c00903 	ldbu	r3,36(r2)
 4003d40:	e0800217 	ldw	r2,8(fp)
 4003d44:	10800183 	ldbu	r2,6(r2)
 4003d48:	18c03fcc 	andi	r3,r3,255
 4003d4c:	10803fcc 	andi	r2,r2,255
 4003d50:	1880042e 	bgeu	r3,r2,4003d64 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x10c>
                pollInterval = pep->bInterval;
 4003d54:	e0800217 	ldw	r2,8(fp)
 4003d58:	10c00183 	ldbu	r3,6(r2)
 4003d5c:	e0bffb17 	ldw	r2,-20(fp)
 4003d60:	10c00905 	stb	r3,36(r2)
        bNumEP++;
 4003d64:	e0bffb17 	ldw	r2,-20(fp)
 4003d68:	108006c3 	ldbu	r2,27(r2)
 4003d6c:	10800044 	addi	r2,r2,1
 4003d70:	1007883a 	mov	r3,r2
 4003d74:	e0bffb17 	ldw	r2,-20(fp)
 4003d78:	10c006c5 	stb	r3,27(r2)
 4003d7c:	00000106 	br	4003d84 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x12c>
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
        } else
                return;
 4003d80:	0001883a 	nop
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
                pollInterval = pep->bInterval;
        bNumEP++;
}
 4003d84:	e037883a 	mov	sp,fp
 4003d88:	df000017 	ldw	fp,0(sp)
 4003d8c:	dec00104 	addi	sp,sp,4
 4003d90:	f800283a 	ret

04003d94 <_ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
         * @param iface Interface number.
         * @param alt   Alternate setting.
         * @param proto Interface Protocol.
         * @param ep    Endpoint Descriptor.
         */
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 4003d94:	213fff04 	addi	r4,r4,-4
 4003d98:	4003c581 	jmpi	4003c58 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

04003d9c <_ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void XBOXONE::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr
    __attribute__((unused)))
{
 4003d9c:	defffd04 	addi	sp,sp,-12
 4003da0:	df000215 	stw	fp,8(sp)
 4003da4:	df000204 	addi	fp,sp,8
 4003da8:	e13ffe15 	stw	r4,-8(fp)
 4003dac:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}
 4003db0:	0001883a 	nop
 4003db4:	e037883a 	mov	sp,fp
 4003db8:	df000017 	ldw	fp,0(sp)
 4003dbc:	dec00104 	addi	sp,sp,4
 4003dc0:	f800283a 	ret

04003dc4 <_ZN7XBOXONE7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t XBOXONE::Release() {
 4003dc4:	defffd04 	addi	sp,sp,-12
 4003dc8:	dfc00215 	stw	ra,8(sp)
 4003dcc:	df000115 	stw	fp,4(sp)
 4003dd0:	df000104 	addi	fp,sp,4
 4003dd4:	e13fff15 	stw	r4,-4(fp)
        XboxOneConnected = false;
 4003dd8:	e0bfff17 	ldw	r2,-4(fp)
 4003ddc:	10000205 	stb	zero,8(r2)
        pUsb->GetAddressPool().FreeAddress(bAddress);
 4003de0:	e0bfff17 	ldw	r2,-4(fp)
 4003de4:	10800317 	ldw	r2,12(r2)
 4003de8:	1009883a 	mov	r4,r2
 4003dec:	4002b6c0 	call	4002b6c <_ZN3USB14GetAddressPoolEv>
 4003df0:	1009883a 	mov	r4,r2
 4003df4:	20800017 	ldw	r2,0(r4)
 4003df8:	10800204 	addi	r2,r2,8
 4003dfc:	10800017 	ldw	r2,0(r2)
 4003e00:	e0ffff17 	ldw	r3,-4(fp)
 4003e04:	18c00403 	ldbu	r3,16(r3)
 4003e08:	18c03fcc 	andi	r3,r3,255
 4003e0c:	180b883a 	mov	r5,r3
 4003e10:	103ee83a 	callr	r2
        bAddress = 0; // Clear device address
 4003e14:	e0bfff17 	ldw	r2,-4(fp)
 4003e18:	10000405 	stb	zero,16(r2)
        bNumEP = 1; // Must have to be reset to 1
 4003e1c:	e0bfff17 	ldw	r2,-4(fp)
 4003e20:	00c00044 	movi	r3,1
 4003e24:	10c006c5 	stb	r3,27(r2)
        qNextPollTime = 0; // Reset next poll time
 4003e28:	e0bfff17 	ldw	r2,-4(fp)
 4003e2c:	10000715 	stw	zero,28(r2)
        pollInterval = 0;
 4003e30:	e0bfff17 	ldw	r2,-4(fp)
 4003e34:	10000905 	stb	zero,36(r2)
        bPollEnable = false;
 4003e38:	e0bfff17 	ldw	r2,-4(fp)
 4003e3c:	10000945 	stb	zero,37(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Disconnected\r\n"), 0x80);
#endif
        return 0;
 4003e40:	0005883a 	mov	r2,zero
}
 4003e44:	e037883a 	mov	sp,fp
 4003e48:	dfc00117 	ldw	ra,4(sp)
 4003e4c:	df000017 	ldw	fp,0(sp)
 4003e50:	dec00204 	addi	sp,sp,8
 4003e54:	f800283a 	ret

04003e58 <_ZN7XBOXONE4PollEv>:

uint8_t XBOXONE::Poll() {
 4003e58:	defffa04 	addi	sp,sp,-24
 4003e5c:	dfc00515 	stw	ra,20(sp)
 4003e60:	df000415 	stw	fp,16(sp)
 4003e64:	df000404 	addi	fp,sp,16
 4003e68:	e13fff15 	stw	r4,-4(fp)
        uint8_t rcode = 0;
 4003e6c:	e03ffe05 	stb	zero,-8(fp)

        if(!bPollEnable)
 4003e70:	e0bfff17 	ldw	r2,-4(fp)
 4003e74:	10800943 	ldbu	r2,37(r2)
 4003e78:	1080005c 	xori	r2,r2,1
 4003e7c:	10803fcc 	andi	r2,r2,255
 4003e80:	10000226 	beq	r2,zero,4003e8c <_ZN7XBOXONE4PollEv+0x34>
                return 0;
 4003e84:	0005883a 	mov	r2,zero
 4003e88:	00002c06 	br	4003f3c <_ZN7XBOXONE4PollEv+0xe4>

        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Do not poll if shorter than polling interval
 4003e8c:	40006300 	call	4000630 <_Z6millisv>
 4003e90:	1007883a 	mov	r3,r2
 4003e94:	e0bfff17 	ldw	r2,-4(fp)
 4003e98:	10800717 	ldw	r2,28(r2)
 4003e9c:	1885c83a 	sub	r2,r3,r2
 4003ea0:	0084303a 	nor	r2,zero,r2
 4003ea4:	1004d7fa 	srli	r2,r2,31
 4003ea8:	10803fcc 	andi	r2,r2,255
 4003eac:	10002226 	beq	r2,zero,4003f38 <_ZN7XBOXONE4PollEv+0xe0>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 4003eb0:	40006300 	call	4000630 <_Z6millisv>
 4003eb4:	1007883a 	mov	r3,r2
 4003eb8:	e0bfff17 	ldw	r2,-4(fp)
 4003ebc:	10800903 	ldbu	r2,36(r2)
 4003ec0:	10803fcc 	andi	r2,r2,255
 4003ec4:	1887883a 	add	r3,r3,r2
 4003ec8:	e0bfff17 	ldw	r2,-4(fp)
 4003ecc:	10c00715 	stw	r3,28(r2)
                uint16_t length =  (uint16_t)epInfo[ XBOX_ONE_INPUT_PIPE ].maxPktSize; // Read the maximum packet size from the endpoint
 4003ed0:	e0bfff17 	ldw	r2,-4(fp)
 4003ed4:	10800603 	ldbu	r2,24(r2)
 4003ed8:	10803fcc 	andi	r2,r2,255
 4003edc:	e0bffe8d 	sth	r2,-6(fp)
                uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ XBOX_ONE_INPUT_PIPE ].epAddr, &length, readBuf, pollInterval);
 4003ee0:	e0bfff17 	ldw	r2,-4(fp)
 4003ee4:	11000317 	ldw	r4,12(r2)
 4003ee8:	e0bfff17 	ldw	r2,-4(fp)
 4003eec:	10800403 	ldbu	r2,16(r2)
 4003ef0:	11403fcc 	andi	r5,r2,255
 4003ef4:	e0bfff17 	ldw	r2,-4(fp)
 4003ef8:	108005c3 	ldbu	r2,23(r2)
 4003efc:	11803fcc 	andi	r6,r2,255
 4003f00:	e0bfff17 	ldw	r2,-4(fp)
 4003f04:	10800f84 	addi	r2,r2,62
 4003f08:	e0ffff17 	ldw	r3,-4(fp)
 4003f0c:	18c00903 	ldbu	r3,36(r3)
 4003f10:	18c03fcc 	andi	r3,r3,255
 4003f14:	e1fffe84 	addi	r7,fp,-6
 4003f18:	d8c00115 	stw	r3,4(sp)
 4003f1c:	d8800015 	stw	r2,0(sp)
 4003f20:	4000e000 	call	4000e00 <_ZN3USB10inTransferEhhPtPhh>
 4003f24:	e0bffe45 	stb	r2,-7(fp)
                if(!rcode) {
 4003f28:	e0bffe43 	ldbu	r2,-7(fp)
 4003f2c:	1000021e 	bne	r2,zero,4003f38 <_ZN7XBOXONE4PollEv+0xe0>
                        readReport();
 4003f30:	e13fff17 	ldw	r4,-4(fp)
 4003f34:	4003f500 	call	4003f50 <_ZN7XBOXONE10readReportEv>
                        Notify(PSTR("\r\nXbox One Poll Failed, error code: "), 0x80);
                        NotifyFail(rcode);
                }
#endif
    }
    return rcode;
 4003f38:	e0bffe03 	ldbu	r2,-8(fp)
}
 4003f3c:	e037883a 	mov	sp,fp
 4003f40:	dfc00117 	ldw	ra,4(sp)
 4003f44:	df000017 	ldw	fp,0(sp)
 4003f48:	dec00204 	addi	sp,sp,8
 4003f4c:	f800283a 	ret

04003f50 <_ZN7XBOXONE10readReportEv>:

void XBOXONE::readReport() {
 4003f50:	defffd04 	addi	sp,sp,-12
 4003f54:	df000215 	stw	fp,8(sp)
 4003f58:	df000204 	addi	fp,sp,8
 4003f5c:	e13fff15 	stw	r4,-4(fp)
        if(readBuf[0] == 0x07) {
 4003f60:	e0bfff17 	ldw	r2,-4(fp)
 4003f64:	10800f83 	ldbu	r2,62(r2)
 4003f68:	10803fcc 	andi	r2,r2,255
 4003f6c:	108001d8 	cmpnei	r2,r2,7
 4003f70:	10002f1e 	bne	r2,zero,4004030 <_ZN7XBOXONE10readReportEv+0xe0>
                // The XBOX button has a separate message
                if(readBuf[4] == 1)
 4003f74:	e0bfff17 	ldw	r2,-4(fp)
 4003f78:	10801083 	ldbu	r2,66(r2)
 4003f7c:	10803fcc 	andi	r2,r2,255
 4003f80:	10800058 	cmpnei	r2,r2,1
 4003f84:	10000a1e 	bne	r2,zero,4003fb0 <_ZN7XBOXONE10readReportEv+0x60>
                        ButtonState |= pgm_read_word(&XBOX_BUTTONS[XBOX]);
 4003f88:	e0bfff17 	ldw	r2,-4(fp)
 4003f8c:	10c0098b 	ldhu	r3,38(r2)
 4003f90:	008100b4 	movhi	r2,1026
 4003f94:	10acb684 	addi	r2,r2,-19750
 4003f98:	1080000b 	ldhu	r2,0(r2)
 4003f9c:	1884b03a 	or	r2,r3,r2
 4003fa0:	1007883a 	mov	r3,r2
 4003fa4:	e0bfff17 	ldw	r2,-4(fp)
 4003fa8:	10c0098d 	sth	r3,38(r2)
 4003fac:	00000b06 	br	4003fdc <_ZN7XBOXONE10readReportEv+0x8c>
                else
                        ButtonState &= ~pgm_read_word(&XBOX_BUTTONS[XBOX]);
 4003fb0:	e0bfff17 	ldw	r2,-4(fp)
 4003fb4:	1080098b 	ldhu	r2,38(r2)
 4003fb8:	1007883a 	mov	r3,r2
 4003fbc:	008100b4 	movhi	r2,1026
 4003fc0:	10acb684 	addi	r2,r2,-19750
 4003fc4:	1080000b 	ldhu	r2,0(r2)
 4003fc8:	0084303a 	nor	r2,zero,r2
 4003fcc:	1884703a 	and	r2,r3,r2
 4003fd0:	1007883a 	mov	r3,r2
 4003fd4:	e0bfff17 	ldw	r2,-4(fp)
 4003fd8:	10c0098d 	sth	r3,38(r2)

                if(ButtonState != OldButtonState) {
 4003fdc:	e0bfff17 	ldw	r2,-4(fp)
 4003fe0:	10c0098b 	ldhu	r3,38(r2)
 4003fe4:	e0bfff17 	ldw	r2,-4(fp)
 4003fe8:	10800a0b 	ldhu	r2,40(r2)
 4003fec:	18ffffcc 	andi	r3,r3,65535
 4003ff0:	10bfffcc 	andi	r2,r2,65535
 4003ff4:	18800e26 	beq	r3,r2,4004030 <_ZN7XBOXONE10readReportEv+0xe0>
                    ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
 4003ff8:	e0bfff17 	ldw	r2,-4(fp)
 4003ffc:	1080098b 	ldhu	r2,38(r2)
 4004000:	1007883a 	mov	r3,r2
 4004004:	e0bfff17 	ldw	r2,-4(fp)
 4004008:	10800a0b 	ldhu	r2,40(r2)
 400400c:	0084303a 	nor	r2,zero,r2
 4004010:	1884703a 	and	r2,r3,r2
 4004014:	1007883a 	mov	r3,r2
 4004018:	e0bfff17 	ldw	r2,-4(fp)
 400401c:	10c00a8d 	sth	r3,42(r2)
                    OldButtonState = ButtonState;
 4004020:	e0bfff17 	ldw	r2,-4(fp)
 4004024:	10c0098b 	ldhu	r3,38(r2)
 4004028:	e0bfff17 	ldw	r2,-4(fp)
 400402c:	10c00a0d 	sth	r3,40(r2)
                }
        }
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
 4004030:	e0bfff17 	ldw	r2,-4(fp)
 4004034:	10800f83 	ldbu	r2,62(r2)
 4004038:	10803fcc 	andi	r2,r2,255
 400403c:	10800820 	cmpeqi	r2,r2,32
 4004040:	1000b026 	beq	r2,zero,4004304 <_ZN7XBOXONE10readReportEv+0x3b4>
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
        }

        uint16_t xbox = ButtonState & pgm_read_word(&XBOX_BUTTONS[XBOX]); // Since the XBOX button is separate, save it and add it back in
 4004044:	e0bfff17 	ldw	r2,-4(fp)
 4004048:	10c0098b 	ldhu	r3,38(r2)
 400404c:	008100b4 	movhi	r2,1026
 4004050:	10acb684 	addi	r2,r2,-19750
 4004054:	1080000b 	ldhu	r2,0(r2)
 4004058:	1884703a 	and	r2,r3,r2
 400405c:	e0bffe0d 	sth	r2,-8(fp)
        // xbox button from before, dpad, abxy, start/back, sync, stick click, shoulder buttons
        ButtonState = xbox | (((uint16_t)readBuf[5] & 0xF) << 8) | (readBuf[4] & 0xF0)  | (((uint16_t)readBuf[4] & 0x0C) << 10) | ((readBuf[4] & 0x01) << 3) | (((uint16_t)readBuf[5] & 0xC0) << 8) | ((readBuf[5] & 0x30) >> 4);
 4004060:	e0bfff17 	ldw	r2,-4(fp)
 4004064:	108010c3 	ldbu	r2,67(r2)
 4004068:	10803fcc 	andi	r2,r2,255
 400406c:	108003cc 	andi	r2,r2,15
 4004070:	1004923a 	slli	r2,r2,8
 4004074:	1007883a 	mov	r3,r2
 4004078:	e0bffe0b 	ldhu	r2,-8(fp)
 400407c:	1884b03a 	or	r2,r3,r2
 4004080:	1007883a 	mov	r3,r2
 4004084:	e0bfff17 	ldw	r2,-4(fp)
 4004088:	10801083 	ldbu	r2,66(r2)
 400408c:	10803fcc 	andi	r2,r2,255
 4004090:	10803c0c 	andi	r2,r2,240
 4004094:	1884b03a 	or	r2,r3,r2
 4004098:	1007883a 	mov	r3,r2
 400409c:	e0bfff17 	ldw	r2,-4(fp)
 40040a0:	10801083 	ldbu	r2,66(r2)
 40040a4:	10803fcc 	andi	r2,r2,255
 40040a8:	1080030c 	andi	r2,r2,12
 40040ac:	100492ba 	slli	r2,r2,10
 40040b0:	1884b03a 	or	r2,r3,r2
 40040b4:	1007883a 	mov	r3,r2
 40040b8:	e0bfff17 	ldw	r2,-4(fp)
 40040bc:	10801083 	ldbu	r2,66(r2)
 40040c0:	10803fcc 	andi	r2,r2,255
 40040c4:	1080004c 	andi	r2,r2,1
 40040c8:	100490fa 	slli	r2,r2,3
 40040cc:	1884b03a 	or	r2,r3,r2
 40040d0:	1007883a 	mov	r3,r2
 40040d4:	e0bfff17 	ldw	r2,-4(fp)
 40040d8:	108010c3 	ldbu	r2,67(r2)
 40040dc:	10803fcc 	andi	r2,r2,255
 40040e0:	1080300c 	andi	r2,r2,192
 40040e4:	1004923a 	slli	r2,r2,8
 40040e8:	1884b03a 	or	r2,r3,r2
 40040ec:	1007883a 	mov	r3,r2
 40040f0:	e0bfff17 	ldw	r2,-4(fp)
 40040f4:	108010c3 	ldbu	r2,67(r2)
 40040f8:	10803fcc 	andi	r2,r2,255
 40040fc:	10800c0c 	andi	r2,r2,48
 4004100:	1005d13a 	srai	r2,r2,4
 4004104:	1884b03a 	or	r2,r3,r2
 4004108:	1007883a 	mov	r3,r2
 400410c:	e0bfff17 	ldw	r2,-4(fp)
 4004110:	10c0098d 	sth	r3,38(r2)

        triggerValue[0] = (uint16_t)(((uint16_t)readBuf[7] << 8) | readBuf[6]);
 4004114:	e0bfff17 	ldw	r2,-4(fp)
 4004118:	10801143 	ldbu	r2,69(r2)
 400411c:	10803fcc 	andi	r2,r2,255
 4004120:	1004923a 	slli	r2,r2,8
 4004124:	1007883a 	mov	r3,r2
 4004128:	e0bfff17 	ldw	r2,-4(fp)
 400412c:	10801103 	ldbu	r2,68(r2)
 4004130:	10803fcc 	andi	r2,r2,255
 4004134:	1884b03a 	or	r2,r3,r2
 4004138:	1007883a 	mov	r3,r2
 400413c:	e0bfff17 	ldw	r2,-4(fp)
 4004140:	10c00d0d 	sth	r3,52(r2)
        triggerValue[1] = (uint16_t)(((uint16_t)readBuf[9] << 8) | readBuf[8]);
 4004144:	e0bfff17 	ldw	r2,-4(fp)
 4004148:	108011c3 	ldbu	r2,71(r2)
 400414c:	10803fcc 	andi	r2,r2,255
 4004150:	1004923a 	slli	r2,r2,8
 4004154:	1007883a 	mov	r3,r2
 4004158:	e0bfff17 	ldw	r2,-4(fp)
 400415c:	10801183 	ldbu	r2,70(r2)
 4004160:	10803fcc 	andi	r2,r2,255
 4004164:	1884b03a 	or	r2,r3,r2
 4004168:	1007883a 	mov	r3,r2
 400416c:	e0bfff17 	ldw	r2,-4(fp)
 4004170:	10c00d8d 	sth	r3,54(r2)

        hatValue[LeftHatX] = (int16_t)(((uint16_t)readBuf[11] << 8) | readBuf[10]);
 4004174:	e0bfff17 	ldw	r2,-4(fp)
 4004178:	10801243 	ldbu	r2,73(r2)
 400417c:	10803fcc 	andi	r2,r2,255
 4004180:	1004923a 	slli	r2,r2,8
 4004184:	1007883a 	mov	r3,r2
 4004188:	e0bfff17 	ldw	r2,-4(fp)
 400418c:	10801203 	ldbu	r2,72(r2)
 4004190:	10803fcc 	andi	r2,r2,255
 4004194:	1884b03a 	or	r2,r3,r2
 4004198:	1007883a 	mov	r3,r2
 400419c:	e0bfff17 	ldw	r2,-4(fp)
 40041a0:	10c00b0d 	sth	r3,44(r2)
        hatValue[LeftHatY] = (int16_t)(((uint16_t)readBuf[13] << 8) | readBuf[12]);
 40041a4:	e0bfff17 	ldw	r2,-4(fp)
 40041a8:	108012c3 	ldbu	r2,75(r2)
 40041ac:	10803fcc 	andi	r2,r2,255
 40041b0:	1004923a 	slli	r2,r2,8
 40041b4:	1007883a 	mov	r3,r2
 40041b8:	e0bfff17 	ldw	r2,-4(fp)
 40041bc:	10801283 	ldbu	r2,74(r2)
 40041c0:	10803fcc 	andi	r2,r2,255
 40041c4:	1884b03a 	or	r2,r3,r2
 40041c8:	1007883a 	mov	r3,r2
 40041cc:	e0bfff17 	ldw	r2,-4(fp)
 40041d0:	10c00b8d 	sth	r3,46(r2)
        hatValue[RightHatX] = (int16_t)(((uint16_t)readBuf[15] << 8) | readBuf[14]);
 40041d4:	e0bfff17 	ldw	r2,-4(fp)
 40041d8:	10801343 	ldbu	r2,77(r2)
 40041dc:	10803fcc 	andi	r2,r2,255
 40041e0:	1004923a 	slli	r2,r2,8
 40041e4:	1007883a 	mov	r3,r2
 40041e8:	e0bfff17 	ldw	r2,-4(fp)
 40041ec:	10801303 	ldbu	r2,76(r2)
 40041f0:	10803fcc 	andi	r2,r2,255
 40041f4:	1884b03a 	or	r2,r3,r2
 40041f8:	1007883a 	mov	r3,r2
 40041fc:	e0bfff17 	ldw	r2,-4(fp)
 4004200:	10c00c0d 	sth	r3,48(r2)
        hatValue[RightHatY] = (int16_t)(((uint16_t)readBuf[17] << 8) | readBuf[16]);
 4004204:	e0bfff17 	ldw	r2,-4(fp)
 4004208:	108013c3 	ldbu	r2,79(r2)
 400420c:	10803fcc 	andi	r2,r2,255
 4004210:	1004923a 	slli	r2,r2,8
 4004214:	1007883a 	mov	r3,r2
 4004218:	e0bfff17 	ldw	r2,-4(fp)
 400421c:	10801383 	ldbu	r2,78(r2)
 4004220:	10803fcc 	andi	r2,r2,255
 4004224:	1884b03a 	or	r2,r3,r2
 4004228:	1007883a 	mov	r3,r2
 400422c:	e0bfff17 	ldw	r2,-4(fp)
 4004230:	10c00c8d 	sth	r3,50(r2)

        //Notify(PSTR("\r\nButtonState"), 0x80);
        //PrintHex<uint16_t>(ButtonState, 0x80);

        if(ButtonState != OldButtonState) {
 4004234:	e0bfff17 	ldw	r2,-4(fp)
 4004238:	10c0098b 	ldhu	r3,38(r2)
 400423c:	e0bfff17 	ldw	r2,-4(fp)
 4004240:	10800a0b 	ldhu	r2,40(r2)
 4004244:	18ffffcc 	andi	r3,r3,65535
 4004248:	10bfffcc 	andi	r2,r2,65535
 400424c:	18800e26 	beq	r3,r2,4004288 <_ZN7XBOXONE10readReportEv+0x338>
                ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
 4004250:	e0bfff17 	ldw	r2,-4(fp)
 4004254:	1080098b 	ldhu	r2,38(r2)
 4004258:	1007883a 	mov	r3,r2
 400425c:	e0bfff17 	ldw	r2,-4(fp)
 4004260:	10800a0b 	ldhu	r2,40(r2)
 4004264:	0084303a 	nor	r2,zero,r2
 4004268:	1884703a 	and	r2,r3,r2
 400426c:	1007883a 	mov	r3,r2
 4004270:	e0bfff17 	ldw	r2,-4(fp)
 4004274:	10c00a8d 	sth	r3,42(r2)
                OldButtonState = ButtonState;
 4004278:	e0bfff17 	ldw	r2,-4(fp)
 400427c:	10c0098b 	ldhu	r3,38(r2)
 4004280:	e0bfff17 	ldw	r2,-4(fp)
 4004284:	10c00a0d 	sth	r3,40(r2)
        }

        // Handle click detection for triggers
        if(triggerValue[0] != 0 && triggerValueOld[0] == 0)
 4004288:	e0bfff17 	ldw	r2,-4(fp)
 400428c:	10800d0b 	ldhu	r2,52(r2)
 4004290:	10bfffcc 	andi	r2,r2,65535
 4004294:	10000726 	beq	r2,zero,40042b4 <_ZN7XBOXONE10readReportEv+0x364>
 4004298:	e0bfff17 	ldw	r2,-4(fp)
 400429c:	10800e0b 	ldhu	r2,56(r2)
 40042a0:	10bfffcc 	andi	r2,r2,65535
 40042a4:	1000031e 	bne	r2,zero,40042b4 <_ZN7XBOXONE10readReportEv+0x364>
                L2Clicked = true;
 40042a8:	e0bfff17 	ldw	r2,-4(fp)
 40042ac:	00c00044 	movi	r3,1
 40042b0:	10c00f05 	stb	r3,60(r2)
        triggerValueOld[0] = triggerValue[0];
 40042b4:	e0bfff17 	ldw	r2,-4(fp)
 40042b8:	10c00d0b 	ldhu	r3,52(r2)
 40042bc:	e0bfff17 	ldw	r2,-4(fp)
 40042c0:	10c00e0d 	sth	r3,56(r2)
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
 40042c4:	e0bfff17 	ldw	r2,-4(fp)
 40042c8:	10800d8b 	ldhu	r2,54(r2)
 40042cc:	10bfffcc 	andi	r2,r2,65535
 40042d0:	10000726 	beq	r2,zero,40042f0 <_ZN7XBOXONE10readReportEv+0x3a0>
 40042d4:	e0bfff17 	ldw	r2,-4(fp)
 40042d8:	10800e8b 	ldhu	r2,58(r2)
 40042dc:	10bfffcc 	andi	r2,r2,65535
 40042e0:	1000031e 	bne	r2,zero,40042f0 <_ZN7XBOXONE10readReportEv+0x3a0>
                R2Clicked = true;
 40042e4:	e0bfff17 	ldw	r2,-4(fp)
 40042e8:	00c00044 	movi	r3,1
 40042ec:	10c00f45 	stb	r3,61(r2)
        triggerValueOld[1] = triggerValue[1];
 40042f0:	e0bfff17 	ldw	r2,-4(fp)
 40042f4:	10c00d8b 	ldhu	r3,54(r2)
 40042f8:	e0bfff17 	ldw	r2,-4(fp)
 40042fc:	10c00e8d 	sth	r3,58(r2)
 4004300:	00000106 	br	4004308 <_ZN7XBOXONE10readReportEv+0x3b8>
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
#ifdef EXTRADEBUG
                Notify(PSTR("\r\nXbox Poll: "), 0x80);
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
 4004304:	0001883a 	nop
                L2Clicked = true;
        triggerValueOld[0] = triggerValue[0];
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
                R2Clicked = true;
        triggerValueOld[1] = triggerValue[1];
}
 4004308:	e037883a 	mov	sp,fp
 400430c:	df000017 	ldw	fp,0(sp)
 4004310:	dec00104 	addi	sp,sp,4
 4004314:	f800283a 	ret

04004318 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>:

uint16_t XBOXONE::getButtonPress(ButtonEnum b) {
 4004318:	defffd04 	addi	sp,sp,-12
 400431c:	df000215 	stw	fp,8(sp)
 4004320:	df000204 	addi	fp,sp,8
 4004324:	e13ffe15 	stw	r4,-8(fp)
 4004328:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) // These are analog buttons
 400432c:	e0bfff17 	ldw	r2,-4(fp)
 4004330:	10800218 	cmpnei	r2,r2,8
 4004334:	1000031e 	bne	r2,zero,4004344 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x2c>
                return triggerValue[0];
 4004338:	e0bffe17 	ldw	r2,-8(fp)
 400433c:	10800d0b 	ldhu	r2,52(r2)
 4004340:	00001306 	br	4004390 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        else if(b == R2)
 4004344:	e0bfff17 	ldw	r2,-4(fp)
 4004348:	10800258 	cmpnei	r2,r2,9
 400434c:	1000031e 	bne	r2,zero,400435c <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x44>
                return triggerValue[1];
 4004350:	e0bffe17 	ldw	r2,-8(fp)
 4004354:	10800d8b 	ldhu	r2,54(r2)
 4004358:	00000d06 	br	4004390 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        return (bool)(ButtonState & ((uint16_t)pgm_read_word(&XBOX_BUTTONS[(uint8_t)b])));
 400435c:	e0bffe17 	ldw	r2,-8(fp)
 4004360:	10c0098b 	ldhu	r3,38(r2)
 4004364:	e0bfff17 	ldw	r2,-4(fp)
 4004368:	10803fcc 	andi	r2,r2,255
 400436c:	1089883a 	add	r4,r2,r2
 4004370:	008100b4 	movhi	r2,1026
 4004374:	10acae84 	addi	r2,r2,-19782
 4004378:	2085883a 	add	r2,r4,r2
 400437c:	1080000b 	ldhu	r2,0(r2)
 4004380:	1884703a 	and	r2,r3,r2
 4004384:	10bfffcc 	andi	r2,r2,65535
 4004388:	1004c03a 	cmpne	r2,r2,zero
 400438c:	10803fcc 	andi	r2,r2,255
}
 4004390:	e037883a 	mov	sp,fp
 4004394:	df000017 	ldw	fp,0(sp)
 4004398:	dec00104 	addi	sp,sp,4
 400439c:	f800283a 	ret

040043a0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>:

bool XBOXONE::getButtonClick(ButtonEnum b) {
 40043a0:	defffc04 	addi	sp,sp,-16
 40043a4:	df000315 	stw	fp,12(sp)
 40043a8:	df000304 	addi	fp,sp,12
 40043ac:	e13ffe15 	stw	r4,-8(fp)
 40043b0:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) {
 40043b4:	e0bfff17 	ldw	r2,-4(fp)
 40043b8:	10800218 	cmpnei	r2,r2,8
 40043bc:	10000a1e 	bne	r2,zero,40043e8 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x48>
                if(L2Clicked) {
 40043c0:	e0bffe17 	ldw	r2,-8(fp)
 40043c4:	10800f03 	ldbu	r2,60(r2)
 40043c8:	10803fcc 	andi	r2,r2,255
 40043cc:	10000426 	beq	r2,zero,40043e0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x40>
                        L2Clicked = false;
 40043d0:	e0bffe17 	ldw	r2,-8(fp)
 40043d4:	10000f05 	stb	zero,60(r2)
                        return true;
 40043d8:	00800044 	movi	r2,1
 40043dc:	00002806 	br	4004480 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
 40043e0:	0005883a 	mov	r2,zero
 40043e4:	00002606 	br	4004480 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        } else if(b == R2) {
 40043e8:	e0bfff17 	ldw	r2,-4(fp)
 40043ec:	10800258 	cmpnei	r2,r2,9
 40043f0:	10000a1e 	bne	r2,zero,400441c <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x7c>
                if(R2Clicked) {
 40043f4:	e0bffe17 	ldw	r2,-8(fp)
 40043f8:	10800f43 	ldbu	r2,61(r2)
 40043fc:	10803fcc 	andi	r2,r2,255
 4004400:	10000426 	beq	r2,zero,4004414 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x74>
                        R2Clicked = false;
 4004404:	e0bffe17 	ldw	r2,-8(fp)
 4004408:	10000f45 	stb	zero,61(r2)
                        return true;
 400440c:	00800044 	movi	r2,1
 4004410:	00001b06 	br	4004480 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
 4004414:	0005883a 	mov	r2,zero
 4004418:	00001906 	br	4004480 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        }
        uint16_t button = pgm_read_word(&XBOX_BUTTONS[(uint8_t)b]);
 400441c:	e0bfff17 	ldw	r2,-4(fp)
 4004420:	10803fcc 	andi	r2,r2,255
 4004424:	1087883a 	add	r3,r2,r2
 4004428:	008100b4 	movhi	r2,1026
 400442c:	10acae84 	addi	r2,r2,-19782
 4004430:	1885883a 	add	r2,r3,r2
 4004434:	1080000b 	ldhu	r2,0(r2)
 4004438:	e0bffd0d 	sth	r2,-12(fp)
        bool click = (ButtonClickState & button);
 400443c:	e0bffe17 	ldw	r2,-8(fp)
 4004440:	10c00a8b 	ldhu	r3,42(r2)
 4004444:	e0bffd0b 	ldhu	r2,-12(fp)
 4004448:	1884703a 	and	r2,r3,r2
 400444c:	10bfffcc 	andi	r2,r2,65535
 4004450:	1004c03a 	cmpne	r2,r2,zero
 4004454:	e0bffd85 	stb	r2,-10(fp)
        ButtonClickState &= ~button; // Clear "click" event
 4004458:	e0bffe17 	ldw	r2,-8(fp)
 400445c:	10800a8b 	ldhu	r2,42(r2)
 4004460:	1007883a 	mov	r3,r2
 4004464:	e0bffd0b 	ldhu	r2,-12(fp)
 4004468:	0084303a 	nor	r2,zero,r2
 400446c:	1884703a 	and	r2,r3,r2
 4004470:	1007883a 	mov	r3,r2
 4004474:	e0bffe17 	ldw	r2,-8(fp)
 4004478:	10c00a8d 	sth	r3,42(r2)
        return click;
 400447c:	e0bffd83 	ldbu	r2,-10(fp)
}
 4004480:	e037883a 	mov	sp,fp
 4004484:	df000017 	ldw	fp,0(sp)
 4004488:	dec00104 	addi	sp,sp,4
 400448c:	f800283a 	ret

04004490 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>:

int16_t XBOXONE::getAnalogHat(AnalogHatEnum a) {
 4004490:	defffd04 	addi	sp,sp,-12
 4004494:	df000215 	stw	fp,8(sp)
 4004498:	df000204 	addi	fp,sp,8
 400449c:	e13ffe15 	stw	r4,-8(fp)
 40044a0:	e17fff15 	stw	r5,-4(fp)
        return hatValue[a];
 40044a4:	e0bfff17 	ldw	r2,-4(fp)
 40044a8:	e0fffe17 	ldw	r3,-8(fp)
 40044ac:	10800584 	addi	r2,r2,22
 40044b0:	1085883a 	add	r2,r2,r2
 40044b4:	1885883a 	add	r2,r3,r2
 40044b8:	1080000b 	ldhu	r2,0(r2)
}
 40044bc:	e037883a 	mov	sp,fp
 40044c0:	df000017 	ldw	fp,0(sp)
 40044c4:	dec00104 	addi	sp,sp,4
 40044c8:	f800283a 	ret

040044cc <_ZN7XBOXONE11XboxCommandEPht>:

/* Xbox Controller commands */
uint8_t XBOXONE::XboxCommand(uint8_t* data, uint16_t nbytes) {
 40044cc:	defff904 	addi	sp,sp,-28
 40044d0:	dfc00615 	stw	ra,24(sp)
 40044d4:	df000515 	stw	fp,20(sp)
 40044d8:	df000504 	addi	fp,sp,20
 40044dc:	e13ffd15 	stw	r4,-12(fp)
 40044e0:	e17ffe15 	stw	r5,-8(fp)
 40044e4:	3005883a 	mov	r2,r6
 40044e8:	e0bfff0d 	sth	r2,-4(fp)
        data[2] = cmdCounter++; // Increment the output command counter
 40044ec:	e0bffe17 	ldw	r2,-8(fp)
 40044f0:	10c00084 	addi	r3,r2,2
 40044f4:	e0bffd17 	ldw	r2,-12(fp)
 40044f8:	10801f83 	ldbu	r2,126(r2)
 40044fc:	11000044 	addi	r4,r2,1
 4004500:	200b883a 	mov	r5,r4
 4004504:	e13ffd17 	ldw	r4,-12(fp)
 4004508:	21401f85 	stb	r5,126(r4)
 400450c:	18800005 	stb	r2,0(r3)
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ XBOX_ONE_OUTPUT_PIPE ].epAddr, nbytes, data);
 4004510:	e0bffd17 	ldw	r2,-12(fp)
 4004514:	10c00317 	ldw	r3,12(r2)
 4004518:	e0bffd17 	ldw	r2,-12(fp)
 400451c:	10800403 	ldbu	r2,16(r2)
 4004520:	11003fcc 	andi	r4,r2,255
 4004524:	e0bffd17 	ldw	r2,-12(fp)
 4004528:	10800503 	ldbu	r2,20(r2)
 400452c:	11403fcc 	andi	r5,r2,255
 4004530:	e1bfff0b 	ldhu	r6,-4(fp)
 4004534:	e0bffe17 	ldw	r2,-8(fp)
 4004538:	d8800015 	stw	r2,0(sp)
 400453c:	300f883a 	mov	r7,r6
 4004540:	280d883a 	mov	r6,r5
 4004544:	200b883a 	mov	r5,r4
 4004548:	1809883a 	mov	r4,r3
 400454c:	40011940 	call	4001194 <_ZN3USB11outTransferEhhtPh>
 4004550:	e0bffc05 	stb	r2,-16(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXboxCommand, Return: "), 0x80);
        D_PrintHex<uint8_t > (rcode, 0x80);
#endif
        return rcode;
 4004554:	e0bffc03 	ldbu	r2,-16(fp)
}
 4004558:	e037883a 	mov	sp,fp
 400455c:	dfc00117 	ldw	ra,4(sp)
 4004560:	df000017 	ldw	fp,0(sp)
 4004564:	dec00204 	addi	sp,sp,8
 4004568:	f800283a 	ret

0400456c <_ZN7XBOXONE6onInitEv>:

// The Xbox One packets are described at: https://github.com/quantus/xbox-one-controller-protocol
void XBOXONE::onInit() {
 400456c:	defff904 	addi	sp,sp,-28
 4004570:	dfc00615 	stw	ra,24(sp)
 4004574:	df000515 	stw	fp,20(sp)
 4004578:	df000504 	addi	fp,sp,20
 400457c:	e13fff15 	stw	r4,-4(fp)
        // A short buzz to show the controller is active
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
 4004580:	00800244 	movi	r2,9
 4004584:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
 4004588:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Single rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
 400458c:	00800244 	movi	r2,9
 4004590:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
 4004594:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
 4004598:	008003c4 	movi	r2,15
 400459c:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x04; // lT force
 40045a0:	00800104 	movi	r2,4
 40045a4:	e0bffc85 	stb	r2,-14(fp)
        writeBuf[7] = 0x04; // rT force
 40045a8:	00800104 	movi	r2,4
 40045ac:	e0bffcc5 	stb	r2,-13(fp)
        writeBuf[8] = 0x20; // L force
 40045b0:	00800804 	movi	r2,32
 40045b4:	e0bffd05 	stb	r2,-12(fp)
        writeBuf[9] = 0x20; // R force
 40045b8:	00800804 	movi	r2,32
 40045bc:	e0bffd45 	stb	r2,-11(fp)
        writeBuf[10] = 0x80; // Length of pulse
 40045c0:	00bfe004 	movi	r2,-128
 40045c4:	e0bffd85 	stb	r2,-10(fp)
        writeBuf[11] = 0x00; // Off period
 40045c8:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
 40045cc:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
 40045d0:	01800344 	movi	r6,13
 40045d4:	e17ffb04 	addi	r5,fp,-20
 40045d8:	e13fff17 	ldw	r4,-4(fp)
 40045dc:	40044cc0 	call	40044cc <_ZN7XBOXONE11XboxCommandEPht>

        if(pFuncOnInit)
 40045e0:	e0bfff17 	ldw	r2,-4(fp)
 40045e4:	10800817 	ldw	r2,32(r2)
 40045e8:	10000326 	beq	r2,zero,40045f8 <_ZN7XBOXONE6onInitEv+0x8c>
                pFuncOnInit(); // Call the user function
 40045ec:	e0bfff17 	ldw	r2,-4(fp)
 40045f0:	10800817 	ldw	r2,32(r2)
 40045f4:	103ee83a 	callr	r2
}
 40045f8:	0001883a 	nop
 40045fc:	e037883a 	mov	sp,fp
 4004600:	dfc00117 	ldw	ra,4(sp)
 4004604:	df000017 	ldw	fp,0(sp)
 4004608:	dec00204 	addi	sp,sp,8
 400460c:	f800283a 	ret

04004610 <_ZN7XBOXONE12setRumbleOffEv>:

void XBOXONE::setRumbleOff() {
 4004610:	defff904 	addi	sp,sp,-28
 4004614:	dfc00615 	stw	ra,24(sp)
 4004618:	df000515 	stw	fp,20(sp)
 400461c:	df000504 	addi	fp,sp,20
 4004620:	e13fff15 	stw	r4,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
 4004624:	00800244 	movi	r2,9
 4004628:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
 400462c:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
 4004630:	00800244 	movi	r2,9
 4004634:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
 4004638:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
 400463c:	008003c4 	movi	r2,15
 4004640:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x00; // lT force
 4004644:	e03ffc85 	stb	zero,-14(fp)
        writeBuf[7] = 0x00; // rT force
 4004648:	e03ffcc5 	stb	zero,-13(fp)
        writeBuf[8] = 0x00; // L force
 400464c:	e03ffd05 	stb	zero,-12(fp)
        writeBuf[9] = 0x00; // R force
 4004650:	e03ffd45 	stb	zero,-11(fp)
        writeBuf[10] = 0x00; // On period
 4004654:	e03ffd85 	stb	zero,-10(fp)
        writeBuf[11] = 0x00; // Off period
 4004658:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
 400465c:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
 4004660:	01800344 	movi	r6,13
 4004664:	e17ffb04 	addi	r5,fp,-20
 4004668:	e13fff17 	ldw	r4,-4(fp)
 400466c:	40044cc0 	call	40044cc <_ZN7XBOXONE11XboxCommandEPht>
}
 4004670:	0001883a 	nop
 4004674:	e037883a 	mov	sp,fp
 4004678:	dfc00117 	ldw	ra,4(sp)
 400467c:	df000017 	ldw	fp,0(sp)
 4004680:	dec00204 	addi	sp,sp,8
 4004684:	f800283a 	ret

04004688 <_ZN7XBOXONE11setRumbleOnEhhhh>:

void XBOXONE::setRumbleOn(uint8_t leftTrigger, uint8_t rightTrigger, uint8_t leftMotor, uint8_t rightMotor) {
 4004688:	defff504 	addi	sp,sp,-44
 400468c:	dfc00a15 	stw	ra,40(sp)
 4004690:	df000915 	stw	fp,36(sp)
 4004694:	df000904 	addi	fp,sp,36
 4004698:	e13ffb15 	stw	r4,-20(fp)
 400469c:	3009883a 	mov	r4,r6
 40046a0:	3807883a 	mov	r3,r7
 40046a4:	e0800217 	ldw	r2,8(fp)
 40046a8:	e17ffc05 	stb	r5,-16(fp)
 40046ac:	e13ffd05 	stb	r4,-12(fp)
 40046b0:	e0fffe05 	stb	r3,-8(fp)
 40046b4:	e0bfff05 	stb	r2,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
 40046b8:	00800244 	movi	r2,9
 40046bc:	e0bff705 	stb	r2,-36(fp)
        writeBuf[1] = 0x00;
 40046c0:	e03ff745 	stb	zero,-35(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
 40046c4:	00800244 	movi	r2,9
 40046c8:	e0bff7c5 	stb	r2,-33(fp)
        writeBuf[4] = 0x00; // Mode
 40046cc:	e03ff805 	stb	zero,-32(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
 40046d0:	008003c4 	movi	r2,15
 40046d4:	e0bff845 	stb	r2,-31(fp)
        writeBuf[6] = leftTrigger; // lT force
 40046d8:	e0bffc03 	ldbu	r2,-16(fp)
 40046dc:	e0bff885 	stb	r2,-30(fp)
        writeBuf[7] = rightTrigger; // rT force
 40046e0:	e0bffd03 	ldbu	r2,-12(fp)
 40046e4:	e0bff8c5 	stb	r2,-29(fp)
        writeBuf[8] = leftMotor; // L force
 40046e8:	e0bffe03 	ldbu	r2,-8(fp)
 40046ec:	e0bff905 	stb	r2,-28(fp)
        writeBuf[9] = rightMotor; // R force
 40046f0:	e0bfff03 	ldbu	r2,-4(fp)
 40046f4:	e0bff945 	stb	r2,-27(fp)
        writeBuf[10] = 0xFF; // On period
 40046f8:	00bfffc4 	movi	r2,-1
 40046fc:	e0bff985 	stb	r2,-26(fp)
        writeBuf[11] = 0x00; // Off period
 4004700:	e03ff9c5 	stb	zero,-25(fp)
        writeBuf[12] = 0xFF; // Repeat count
 4004704:	00bfffc4 	movi	r2,-1
 4004708:	e0bffa05 	stb	r2,-24(fp)
        XboxCommand(writeBuf, 13);
 400470c:	01800344 	movi	r6,13
 4004710:	e17ff704 	addi	r5,fp,-36
 4004714:	e13ffb17 	ldw	r4,-20(fp)
 4004718:	40044cc0 	call	40044cc <_ZN7XBOXONE11XboxCommandEPht>
}
 400471c:	0001883a 	nop
 4004720:	e037883a 	mov	sp,fp
 4004724:	dfc00117 	ldw	ra,4(sp)
 4004728:	df000017 	ldw	fp,0(sp)
 400472c:	dec00204 	addi	sp,sp,8
 4004730:	f800283a 	ret

04004734 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 4004734:	defffe04 	addi	sp,sp,-8
 4004738:	df000115 	stw	fp,4(sp)
 400473c:	df000104 	addi	fp,sp,4
 4004740:	e13fff15 	stw	r4,-4(fp)
 4004744:	e0bfff17 	ldw	r2,-4(fp)
 4004748:	10000005 	stb	zero,0(r2)
 400474c:	e0bfff17 	ldw	r2,-4(fp)
 4004750:	10c00043 	ldbu	r3,1(r2)
 4004754:	1806703a 	and	r3,r3,zero
 4004758:	10c00045 	stb	r3,1(r2)
 400475c:	10c00083 	ldbu	r3,2(r2)
 4004760:	1806703a 	and	r3,r3,zero
 4004764:	10c00085 	stb	r3,2(r2)
 4004768:	10c000c3 	ldbu	r3,3(r2)
 400476c:	1806703a 	and	r3,r3,zero
 4004770:	10c000c5 	stb	r3,3(r2)
 4004774:	10c00103 	ldbu	r3,4(r2)
 4004778:	1806703a 	and	r3,r3,zero
 400477c:	10c00105 	stb	r3,4(r2)
        };
 4004780:	0001883a 	nop
 4004784:	e037883a 	mov	sp,fp
 4004788:	df000017 	ldw	fp,0(sp)
 400478c:	dec00104 	addi	sp,sp,4
 4004790:	f800283a 	ret

04004794 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 4004794:	defffe04 	addi	sp,sp,-8
 4004798:	df000115 	stw	fp,4(sp)
 400479c:	df000104 	addi	fp,sp,4
 40047a0:	e13fff15 	stw	r4,-4(fp)
 40047a4:	e0bfff17 	ldw	r2,-4(fp)
 40047a8:	10000015 	stw	zero,0(r2)
 40047ac:	e0bfff17 	ldw	r2,-4(fp)
 40047b0:	10000105 	stb	zero,4(r2)
 40047b4:	e0bfff17 	ldw	r2,-4(fp)
 40047b8:	10000145 	stb	zero,5(r2)
        };
 40047bc:	0001883a 	nop
 40047c0:	e037883a 	mov	sp,fp
 40047c4:	df000017 	ldw	fp,0(sp)
 40047c8:	dec00104 	addi	sp,sp,4
 40047cc:	f800283a 	ret

040047d0 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 40047d0:	defffd04 	addi	sp,sp,-12
 40047d4:	df000215 	stw	fp,8(sp)
 40047d8:	df000204 	addi	fp,sp,8
 40047dc:	e13ffe15 	stw	r4,-8(fp)
 40047e0:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
 40047e4:	e0bfff17 	ldw	r2,-4(fp)
 40047e8:	10c00043 	ldbu	r3,1(r2)
 40047ec:	11000083 	ldbu	r4,2(r2)
 40047f0:	2008923a 	slli	r4,r4,8
 40047f4:	20c6b03a 	or	r3,r4,r3
 40047f8:	110000c3 	ldbu	r4,3(r2)
 40047fc:	2008943a 	slli	r4,r4,16
 4004800:	20c6b03a 	or	r3,r4,r3
 4004804:	10800103 	ldbu	r2,4(r2)
 4004808:	1004963a 	slli	r2,r2,24
 400480c:	10c4b03a 	or	r2,r2,r3
 4004810:	1007883a 	mov	r3,r2
 4004814:	e0bffe17 	ldw	r2,-8(fp)
 4004818:	10c00015 	stw	r3,0(r2)
                countDown = valueSize = pbuf->valueSize;
 400481c:	e0bfff17 	ldw	r2,-4(fp)
 4004820:	10c00003 	ldbu	r3,0(r2)
 4004824:	e0bffe17 	ldw	r2,-8(fp)
 4004828:	10c00145 	stb	r3,5(r2)
 400482c:	e0bffe17 	ldw	r2,-8(fp)
 4004830:	10c00143 	ldbu	r3,5(r2)
 4004834:	e0bffe17 	ldw	r2,-8(fp)
 4004838:	10c00105 	stb	r3,4(r2)
        };
 400483c:	0001883a 	nop
 4004840:	e037883a 	mov	sp,fp
 4004844:	df000017 	ldw	fp,0(sp)
 4004848:	dec00104 	addi	sp,sp,4
 400484c:	f800283a 	ret

04004850 <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 4004850:	defffe04 	addi	sp,sp,-8
 4004854:	df000115 	stw	fp,4(sp)
 4004858:	df000104 	addi	fp,sp,4
 400485c:	e13fff15 	stw	r4,-4(fp)
 4004860:	e0bfff17 	ldw	r2,-4(fp)
 4004864:	10000015 	stw	zero,0(r2)
 4004868:	e0bfff17 	ldw	r2,-4(fp)
 400486c:	10000105 	stb	zero,4(r2)
 4004870:	e0bfff17 	ldw	r2,-4(fp)
 4004874:	1000018d 	sth	zero,6(r2)
        };
 4004878:	0001883a 	nop
 400487c:	e037883a 	mov	sp,fp
 4004880:	df000017 	ldw	fp,0(sp)
 4004884:	dec00104 	addi	sp,sp,4
 4004888:	f800283a 	ret

0400488c <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 400488c:	defffd04 	addi	sp,sp,-12
 4004890:	df000215 	stw	fp,8(sp)
 4004894:	df000204 	addi	fp,sp,8
 4004898:	e13ffe15 	stw	r4,-8(fp)
 400489c:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
 40048a0:	e0bfff17 	ldw	r2,-4(fp)
 40048a4:	10c00043 	ldbu	r3,1(r2)
 40048a8:	11000083 	ldbu	r4,2(r2)
 40048ac:	2008923a 	slli	r4,r4,8
 40048b0:	20c6b03a 	or	r3,r4,r3
 40048b4:	110000c3 	ldbu	r4,3(r2)
 40048b8:	2008943a 	slli	r4,r4,16
 40048bc:	20c6b03a 	or	r3,r4,r3
 40048c0:	10800103 	ldbu	r2,4(r2)
 40048c4:	1004963a 	slli	r2,r2,24
 40048c8:	10c4b03a 	or	r2,r2,r3
 40048cc:	1007883a 	mov	r3,r2
 40048d0:	e0bffe17 	ldw	r2,-8(fp)
 40048d4:	10c00015 	stw	r3,0(r2)
                countDown = 0;
 40048d8:	e0bffe17 	ldw	r2,-8(fp)
 40048dc:	1000018d 	sth	zero,6(r2)
        };
 40048e0:	0001883a 	nop
 40048e4:	e037883a 	mov	sp,fp
 40048e8:	df000017 	ldw	fp,0(sp)
 40048ec:	dec00104 	addi	sp,sp,4
 40048f0:	f800283a 	ret

040048f4 <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 40048f4:	defffb04 	addi	sp,sp,-20
 40048f8:	df000415 	stw	fp,16(sp)
 40048fc:	df000404 	addi	fp,sp,16
 4004900:	e13ffc15 	stw	r4,-16(fp)
 4004904:	e17ffd15 	stw	r5,-12(fp)
 4004908:	e1bffe15 	stw	r6,-8(fp)
 400490c:	3805883a 	mov	r2,r7
 4004910:	e0bfff0d 	sth	r2,-4(fp)
                switch(nStage) {
 4004914:	e0bffc17 	ldw	r2,-16(fp)
 4004918:	10800103 	ldbu	r2,4(r2)
 400491c:	10803fcc 	andi	r2,r2,255
 4004920:	10000326 	beq	r2,zero,4004930 <_ZN11ByteSkipper4SkipEPPhPtt+0x3c>
 4004924:	10800060 	cmpeqi	r2,r2,1
 4004928:	10000a1e 	bne	r2,zero,4004954 <_ZN11ByteSkipper4SkipEPPhPtt+0x60>
 400492c:	00002906 	br	40049d4 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                        case 0:
                                countDown = bytes_to_skip;
 4004930:	e0bffc17 	ldw	r2,-16(fp)
 4004934:	e0ffff0b 	ldhu	r3,-4(fp)
 4004938:	10c0018d 	sth	r3,6(r2)
                                nStage++;
 400493c:	e0bffc17 	ldw	r2,-16(fp)
 4004940:	10800103 	ldbu	r2,4(r2)
 4004944:	10800044 	addi	r2,r2,1
 4004948:	1007883a 	mov	r3,r2
 400494c:	e0bffc17 	ldw	r2,-16(fp)
 4004950:	10c00105 	stb	r3,4(r2)
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 4004954:	e0bffc17 	ldw	r2,-16(fp)
 4004958:	1080018b 	ldhu	r2,6(r2)
 400495c:	10bfffcc 	andi	r2,r2,65535
 4004960:	10001626 	beq	r2,zero,40049bc <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
 4004964:	e0bffe17 	ldw	r2,-8(fp)
 4004968:	1080000b 	ldhu	r2,0(r2)
 400496c:	10bfffcc 	andi	r2,r2,65535
 4004970:	10001226 	beq	r2,zero,40049bc <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
 4004974:	e0bffc17 	ldw	r2,-16(fp)
 4004978:	1080018b 	ldhu	r2,6(r2)
 400497c:	10bfffc4 	addi	r2,r2,-1
 4004980:	1007883a 	mov	r3,r2
 4004984:	e0bffc17 	ldw	r2,-16(fp)
 4004988:	10c0018d 	sth	r3,6(r2)
 400498c:	e0bffd17 	ldw	r2,-12(fp)
 4004990:	10800017 	ldw	r2,0(r2)
 4004994:	10c00044 	addi	r3,r2,1
 4004998:	e0bffd17 	ldw	r2,-12(fp)
 400499c:	10c00015 	stw	r3,0(r2)
 40049a0:	e0bffe17 	ldw	r2,-8(fp)
 40049a4:	1080000b 	ldhu	r2,0(r2)
 40049a8:	10bfffc4 	addi	r2,r2,-1
 40049ac:	1007883a 	mov	r3,r2
 40049b0:	e0bffe17 	ldw	r2,-8(fp)
 40049b4:	10c0000d 	sth	r3,0(r2)
 40049b8:	003fe606 	br	4004954 <__alt_data_end+0xfc004954>

                                if(!countDown)
 40049bc:	e0bffc17 	ldw	r2,-16(fp)
 40049c0:	1080018b 	ldhu	r2,6(r2)
 40049c4:	10bfffcc 	andi	r2,r2,65535
 40049c8:	1000021e 	bne	r2,zero,40049d4 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                                        nStage = 0;
 40049cc:	e0bffc17 	ldw	r2,-16(fp)
 40049d0:	10000105 	stb	zero,4(r2)
                };
                return (!countDown);
 40049d4:	e0bffc17 	ldw	r2,-16(fp)
 40049d8:	1080018b 	ldhu	r2,6(r2)
 40049dc:	10bfffcc 	andi	r2,r2,65535
 40049e0:	1005003a 	cmpeq	r2,r2,zero
        };
 40049e4:	e037883a 	mov	sp,fp
 40049e8:	df000017 	ldw	fp,0(sp)
 40049ec:	dec00104 	addi	sp,sp,4
 40049f0:	f800283a 	ret

040049f4 <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 40049f4:	defffb04 	addi	sp,sp,-20
 40049f8:	df000415 	stw	fp,16(sp)
 40049fc:	df000404 	addi	fp,sp,16
 4004a00:	e13ffc15 	stw	r4,-16(fp)
 4004a04:	2809883a 	mov	r4,r5
 4004a08:	3007883a 	mov	r3,r6
 4004a0c:	3805883a 	mov	r2,r7
 4004a10:	e13ffd05 	stb	r4,-12(fp)
 4004a14:	e0fffe05 	stb	r3,-8(fp)
 4004a18:	e0bfff05 	stb	r2,-4(fp)
                return 0;
 4004a1c:	0005883a 	mov	r2,zero
        }
 4004a20:	e037883a 	mov	sp,fp
 4004a24:	df000017 	ldw	fp,0(sp)
 4004a28:	dec00104 	addi	sp,sp,4
 4004a2c:	f800283a 	ret

04004a30 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 4004a30:	defffb04 	addi	sp,sp,-20
 4004a34:	df000415 	stw	fp,16(sp)
 4004a38:	df000404 	addi	fp,sp,16
 4004a3c:	e13ffc15 	stw	r4,-16(fp)
 4004a40:	2809883a 	mov	r4,r5
 4004a44:	3007883a 	mov	r3,r6
 4004a48:	3805883a 	mov	r2,r7
 4004a4c:	e13ffd05 	stb	r4,-12(fp)
 4004a50:	e0fffe05 	stb	r3,-8(fp)
 4004a54:	e0bfff05 	stb	r2,-4(fp)
                return 0;
 4004a58:	0005883a 	mov	r2,zero
        }
 4004a5c:	e037883a 	mov	sp,fp
 4004a60:	df000017 	ldw	fp,0(sp)
 4004a64:	dec00104 	addi	sp,sp,4
 4004a68:	f800283a 	ret

04004a6c <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 4004a6c:	defffe04 	addi	sp,sp,-8
 4004a70:	df000115 	stw	fp,4(sp)
 4004a74:	df000104 	addi	fp,sp,4
 4004a78:	e13fff15 	stw	r4,-4(fp)
                return 0;
 4004a7c:	0005883a 	mov	r2,zero
        }
 4004a80:	e037883a 	mov	sp,fp
 4004a84:	df000017 	ldw	fp,0(sp)
 4004a88:	dec00104 	addi	sp,sp,4
 4004a8c:	f800283a 	ret

04004a90 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 4004a90:	defffe04 	addi	sp,sp,-8
 4004a94:	df000115 	stw	fp,4(sp)
 4004a98:	df000104 	addi	fp,sp,4
 4004a9c:	e13fff15 	stw	r4,-4(fp)
                return 0;
 4004aa0:	0005883a 	mov	r2,zero
        }
 4004aa4:	e037883a 	mov	sp,fp
 4004aa8:	df000017 	ldw	fp,0(sp)
 4004aac:	dec00104 	addi	sp,sp,4
 4004ab0:	f800283a 	ret

04004ab4 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 4004ab4:	defffe04 	addi	sp,sp,-8
 4004ab8:	df000115 	stw	fp,4(sp)
 4004abc:	df000104 	addi	fp,sp,4
 4004ac0:	e13fff15 	stw	r4,-4(fp)
                return 0;
 4004ac4:	0005883a 	mov	r2,zero
        }
 4004ac8:	e037883a 	mov	sp,fp
 4004acc:	df000017 	ldw	fp,0(sp)
 4004ad0:	dec00104 	addi	sp,sp,4
 4004ad4:	f800283a 	ret

04004ad8 <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 4004ad8:	defffd04 	addi	sp,sp,-12
 4004adc:	df000215 	stw	fp,8(sp)
 4004ae0:	df000204 	addi	fp,sp,8
 4004ae4:	e13ffe15 	stw	r4,-8(fp)
 4004ae8:	2805883a 	mov	r2,r5
 4004aec:	e0bfff05 	stb	r2,-4(fp)
                return;
 4004af0:	0001883a 	nop
        } // Note used for hubs only!
 4004af4:	e037883a 	mov	sp,fp
 4004af8:	df000017 	ldw	fp,0(sp)
 4004afc:	dec00104 	addi	sp,sp,4
 4004b00:	f800283a 	ret

04004b04 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 4004b04:	defffc04 	addi	sp,sp,-16
 4004b08:	df000315 	stw	fp,12(sp)
 4004b0c:	df000304 	addi	fp,sp,12
 4004b10:	e13ffd15 	stw	r4,-12(fp)
 4004b14:	2807883a 	mov	r3,r5
 4004b18:	3005883a 	mov	r2,r6
 4004b1c:	e0fffe0d 	sth	r3,-8(fp)
 4004b20:	e0bfff0d 	sth	r2,-4(fp)
                return false;
 4004b24:	0005883a 	mov	r2,zero
        }
 4004b28:	e037883a 	mov	sp,fp
 4004b2c:	df000017 	ldw	fp,0(sp)
 4004b30:	dec00104 	addi	sp,sp,4
 4004b34:	f800283a 	ret

04004b38 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 4004b38:	defffd04 	addi	sp,sp,-12
 4004b3c:	df000215 	stw	fp,8(sp)
 4004b40:	df000204 	addi	fp,sp,8
 4004b44:	e13ffe15 	stw	r4,-8(fp)
 4004b48:	2805883a 	mov	r2,r5
 4004b4c:	e0bfff05 	stb	r2,-4(fp)
                return false;
 4004b50:	0005883a 	mov	r2,zero
        }
 4004b54:	e037883a 	mov	sp,fp
 4004b58:	df000017 	ldw	fp,0(sp)
 4004b5c:	dec00104 	addi	sp,sp,4
 4004b60:	f800283a 	ret

04004b64 <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 4004b64:	defffd04 	addi	sp,sp,-12
 4004b68:	df000215 	stw	fp,8(sp)
 4004b6c:	df000204 	addi	fp,sp,8
 4004b70:	e13ffe15 	stw	r4,-8(fp)
 4004b74:	2805883a 	mov	r2,r5
 4004b78:	e0bfff05 	stb	r2,-4(fp)
                return true;
 4004b7c:	00800044 	movi	r2,1
        }
 4004b80:	e037883a 	mov	sp,fp
 4004b84:	df000017 	ldw	fp,0(sp)
 4004b88:	dec00104 	addi	sp,sp,4
 4004b8c:	f800283a 	ret

04004b90 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 4004b90:	defffc04 	addi	sp,sp,-16
 4004b94:	df000315 	stw	fp,12(sp)
 4004b98:	df000304 	addi	fp,sp,12
 4004b9c:	e13ffe15 	stw	r4,-8(fp)
 4004ba0:	e17fff15 	stw	r5,-4(fp)
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 4004ba4:	e03ffd05 	stb	zero,-12(fp)
 4004ba8:	e0bffd03 	ldbu	r2,-12(fp)
 4004bac:	10800428 	cmpgeui	r2,r2,16
 4004bb0:	1000161e 	bne	r2,zero,4004c0c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x7c>
                        if(!devConfig[i]) {
 4004bb4:	e0bffd03 	ldbu	r2,-12(fp)
 4004bb8:	e0fffe17 	ldw	r3,-8(fp)
 4004bbc:	10800784 	addi	r2,r2,30
 4004bc0:	1085883a 	add	r2,r2,r2
 4004bc4:	1085883a 	add	r2,r2,r2
 4004bc8:	1885883a 	add	r2,r3,r2
 4004bcc:	10800017 	ldw	r2,0(r2)
 4004bd0:	10000a1e 	bne	r2,zero,4004bfc <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x6c>
                                devConfig[i] = pdev;
 4004bd4:	e0bffd03 	ldbu	r2,-12(fp)
 4004bd8:	e0fffe17 	ldw	r3,-8(fp)
 4004bdc:	10800784 	addi	r2,r2,30
 4004be0:	1085883a 	add	r2,r2,r2
 4004be4:	1085883a 	add	r2,r2,r2
 4004be8:	1885883a 	add	r2,r3,r2
 4004bec:	e0ffff17 	ldw	r3,-4(fp)
 4004bf0:	10c00015 	stw	r3,0(r2)
                                return 0;
 4004bf4:	0005883a 	mov	r2,zero
 4004bf8:	00000506 	br	4004c10 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x80>
        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 4004bfc:	e0bffd03 	ldbu	r2,-12(fp)
 4004c00:	10800044 	addi	r2,r2,1
 4004c04:	e0bffd05 	stb	r2,-12(fp)
 4004c08:	003fe706 	br	4004ba8 <__alt_data_end+0xfc004ba8>
                        if(!devConfig[i]) {
                                devConfig[i] = pdev;
                                return 0;
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 4004c0c:	00bff4c4 	movi	r2,-45
        };
 4004c10:	e037883a 	mov	sp,fp
 4004c14:	df000017 	ldw	fp,0(sp)
 4004c18:	dec00104 	addi	sp,sp,4
 4004c1c:	f800283a 	ret

04004c20 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 4004c20:	defffa04 	addi	sp,sp,-24
 4004c24:	df000515 	stw	fp,20(sp)
 4004c28:	df000504 	addi	fp,sp,20
 4004c2c:	e13ffb15 	stw	r4,-20(fp)
 4004c30:	3009883a 	mov	r4,r6
 4004c34:	3807883a 	mov	r3,r7
 4004c38:	e0800117 	ldw	r2,4(fp)
 4004c3c:	e17ffc05 	stb	r5,-16(fp)
 4004c40:	e13ffd05 	stb	r4,-12(fp)
 4004c44:	e0fffe05 	stb	r3,-8(fp)
 4004c48:	e0bfff05 	stb	r2,-4(fp)
        };
 4004c4c:	0001883a 	nop
 4004c50:	e037883a 	mov	sp,fp
 4004c54:	df000017 	ldw	fp,0(sp)
 4004c58:	dec00104 	addi	sp,sp,4
 4004c5c:	f800283a 	ret

04004c60 <_ZN7XBOXONE10GetAddressEv>:

        /**
         * Get the device address.
         * @return The device address.
         */
        virtual uint8_t GetAddress() {
 4004c60:	defffe04 	addi	sp,sp,-8
 4004c64:	df000115 	stw	fp,4(sp)
 4004c68:	df000104 	addi	fp,sp,4
 4004c6c:	e13fff15 	stw	r4,-4(fp)
                return bAddress;
 4004c70:	e0bfff17 	ldw	r2,-4(fp)
 4004c74:	10800403 	ldbu	r2,16(r2)
        };
 4004c78:	e037883a 	mov	sp,fp
 4004c7c:	df000017 	ldw	fp,0(sp)
 4004c80:	dec00104 	addi	sp,sp,4
 4004c84:	f800283a 	ret

04004c88 <_ZN7XBOXONE7isReadyEv>:

        /**
         * Used to check if the controller has been initialized.
         * @return True if it's ready.
         */
        virtual bool isReady() {
 4004c88:	defffe04 	addi	sp,sp,-8
 4004c8c:	df000115 	stw	fp,4(sp)
 4004c90:	df000104 	addi	fp,sp,4
 4004c94:	e13fff15 	stw	r4,-4(fp)
                return bPollEnable;
 4004c98:	e0bfff17 	ldw	r2,-4(fp)
 4004c9c:	10800943 	ldbu	r2,37(r2)
        };
 4004ca0:	e037883a 	mov	sp,fp
 4004ca4:	df000017 	ldw	fp,0(sp)
 4004ca8:	dec00104 	addi	sp,sp,4
 4004cac:	f800283a 	ret

04004cb0 <_ZN7XBOXONE8VIDPIDOKEtt>:
         * Used by the USB core to check what this driver support.
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 4004cb0:	defffc04 	addi	sp,sp,-16
 4004cb4:	df000315 	stw	fp,12(sp)
 4004cb8:	df000304 	addi	fp,sp,12
 4004cbc:	e13ffd15 	stw	r4,-12(fp)
 4004cc0:	2807883a 	mov	r3,r5
 4004cc4:	3005883a 	mov	r2,r6
 4004cc8:	e0fffe0d 	sth	r3,-8(fp)
 4004ccc:	e0bfff0d 	sth	r2,-4(fp)
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
 4004cd0:	e0bffe0b 	ldhu	r2,-8(fp)
 4004cd4:	108117a0 	cmpeqi	r2,r2,1118
 4004cd8:	10000f1e 	bne	r2,zero,4004d18 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 4004cdc:	e0bffe0b 	ldhu	r2,-8(fp)
 4004ce0:	1081ce20 	cmpeqi	r2,r2,1848
 4004ce4:	10000c1e 	bne	r2,zero,4004d18 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 4004ce8:	e0bffe0b 	ldhu	r2,-8(fp)
 4004cec:	10839be0 	cmpeqi	r2,r2,3695
 4004cf0:	1000091e 	bne	r2,zero,4004d18 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 4004cf4:	e0bffe0b 	ldhu	r2,-8(fp)
 4004cf8:	1083c360 	cmpeqi	r2,r2,3853
 4004cfc:	1000061e 	bne	r2,zero,4004d18 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 4004d00:	e0bffe0b 	ldhu	r2,-8(fp)
 4004d04:	10854ca0 	cmpeqi	r2,r2,5426
 4004d08:	1000031e 	bne	r2,zero,4004d18 <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 4004d0c:	e0bffe0b 	ldhu	r2,-8(fp)
 4004d10:	10893198 	cmpnei	r2,r2,9414
 4004d14:	10002c1e 	bne	r2,zero,4004dc8 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
 4004d18:	e0bfff0b 	ldhu	r2,-4(fp)
 4004d1c:	1080b460 	cmpeqi	r2,r2,721
 4004d20:	1000271e 	bne	r2,zero,4004dc0 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
 4004d24:	e0bfff0b 	ldhu	r2,-4(fp)
 4004d28:	1080b760 	cmpeqi	r2,r2,733
 4004d2c:	1000241e 	bne	r2,zero,4004dc0 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4004d30:	e0bfff0b 	ldhu	r2,-4(fp)
 4004d34:	1080b8e0 	cmpeqi	r2,r2,739
 4004d38:	1000211e 	bne	r2,zero,4004dc0 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4004d3c:	e0bfff0b 	ldhu	r2,-4(fp)
 4004d40:	1080baa0 	cmpeqi	r2,r2,746
 4004d44:	10001e1e 	bne	r2,zero,4004dc0 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4004d48:	e0bfff0b 	ldhu	r2,-4(fp)
 4004d4c:	10928060 	cmpeqi	r2,r2,18945
 4004d50:	10001b1e 	bne	r2,zero,4004dc0 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
 4004d54:	e0bfff0b 	ldhu	r2,-4(fp)
 4004d58:	10804e60 	cmpeqi	r2,r2,313
 4004d5c:	1000181e 	bne	r2,zero,4004dc0 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4004d60:	e0bfff0b 	ldhu	r2,-4(fp)
 4004d64:	108051a0 	cmpeqi	r2,r2,326
 4004d68:	1000151e 	bne	r2,zero,4004dc0 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4004d6c:	e0bfff0b 	ldhu	r2,-4(fp)
 4004d70:	108019e0 	cmpeqi	r2,r2,103
 4004d74:	1000121e 	bne	r2,zero,4004dc0 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4004d78:	e0bfff0b 	ldhu	r2,-4(fp)
 4004d7c:	108280e0 	cmpeqi	r2,r2,2563
 4004d80:	10000f1e 	bne	r2,zero,4004dc0 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
 4004d84:	e0bfff0b 	ldhu	r2,-4(fp)
 4004d88:	109506a0 	cmpeqi	r2,r2,21530
 4004d8c:	10000c1e 	bne	r2,zero,4004dc0 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4004d90:	e0bfff0b 	ldhu	r2,-4(fp)
 4004d94:	10950aa0 	cmpeqi	r2,r2,21546
 4004d98:	1000091e 	bne	r2,zero,4004dc0 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4004d9c:	e0bfff0b 	ldhu	r2,-4(fp)
 4004da0:	10950ea0 	cmpeqi	r2,r2,21562
 4004da4:	1000061e 	bne	r2,zero,4004dc0 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4004da8:	e0bfff0b 	ldhu	r2,-4(fp)
 4004dac:	1082c2a0 	cmpeqi	r2,r2,2826
 4004db0:	1000031e 	bne	r2,zero,4004dc0 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
 4004db4:	e0bfff0b 	ldhu	r2,-4(fp)
 4004db8:	1082c498 	cmpnei	r2,r2,2834
 4004dbc:	1000021e 	bne	r2,zero,4004dc8 <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
 4004dc0:	00800044 	movi	r2,1
 4004dc4:	00000106 	br	4004dcc <_ZN7XBOXONE8VIDPIDOKEtt+0x11c>
 4004dc8:	0005883a 	mov	r2,zero
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
        };
 4004dcc:	e037883a 	mov	sp,fp
 4004dd0:	df000017 	ldw	fp,0(sp)
 4004dd4:	dec00104 	addi	sp,sp,4
 4004dd8:	f800283a 	ret

04004ddc <_ZN15USBDeviceConfigC1Ev>:
#define USB_STATE_ADDRESSING                                0x70
#define USB_STATE_CONFIGURING                               0x80
#define USB_STATE_RUNNING                                   0x90
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
 4004ddc:	defffe04 	addi	sp,sp,-8
 4004de0:	df000115 	stw	fp,4(sp)
 4004de4:	df000104 	addi	fp,sp,4
 4004de8:	e13fff15 	stw	r4,-4(fp)
 4004dec:	008100b4 	movhi	r2,1026
 4004df0:	10acd304 	addi	r2,r2,-19636
 4004df4:	e0ffff17 	ldw	r3,-4(fp)
 4004df8:	18800015 	stw	r2,0(r3)
 4004dfc:	0001883a 	nop
 4004e00:	e037883a 	mov	sp,fp
 4004e04:	df000017 	ldw	fp,0(sp)
 4004e08:	dec00104 	addi	sp,sp,4
 4004e0c:	f800283a 	ret

04004e10 <_ZN17UsbConfigXtracterC1Ev>:
#error "Never include confdescparser.h directly; include Usb.h instead"
#else

#define __CONFDESCPARSER_H__

class UsbConfigXtracter {
 4004e10:	defffe04 	addi	sp,sp,-8
 4004e14:	df000115 	stw	fp,4(sp)
 4004e18:	df000104 	addi	fp,sp,4
 4004e1c:	e13fff15 	stw	r4,-4(fp)
 4004e20:	008100b4 	movhi	r2,1026
 4004e24:	10accd04 	addi	r2,r2,-19660
 4004e28:	e0ffff17 	ldw	r3,-4(fp)
 4004e2c:	18800015 	stw	r2,0(r3)
 4004e30:	0001883a 	nop
 4004e34:	e037883a 	mov	sp,fp
 4004e38:	df000017 	ldw	fp,0(sp)
 4004e3c:	dec00104 	addi	sp,sp,4
 4004e40:	f800283a 	ret

04004e44 <_ZN13USBReadParserC1Ev>:



// Base class for incoming data parser

class USBReadParser {
 4004e44:	defffe04 	addi	sp,sp,-8
 4004e48:	df000115 	stw	fp,4(sp)
 4004e4c:	df000104 	addi	fp,sp,4
 4004e50:	e13fff15 	stw	r4,-4(fp)
 4004e54:	008100b4 	movhi	r2,1026
 4004e58:	10acd004 	addi	r2,r2,-19648
 4004e5c:	e0ffff17 	ldw	r3,-4(fp)
 4004e60:	18800015 	stw	r2,0(r3)
 4004e64:	0001883a 	nop
 4004e68:	e037883a 	mov	sp,fp
 4004e6c:	df000017 	ldw	fp,0(sp)
 4004e70:	dec00104 	addi	sp,sp,4
 4004e74:	f800283a 	ret

04004e78 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 4004e78:	defffc04 	addi	sp,sp,-16
 4004e7c:	dfc00315 	stw	ra,12(sp)
 4004e80:	df000215 	stw	fp,8(sp)
 4004e84:	df000204 	addi	fp,sp,8
 4004e88:	e13ffe15 	stw	r4,-8(fp)
 4004e8c:	e17fff15 	stw	r5,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 4004e90:	e0bffe17 	ldw	r2,-8(fp)
 4004e94:	1009883a 	mov	r4,r2
 4004e98:	4004e440 	call	4004e44 <_ZN13USBReadParserC1Ev>
 4004e9c:	008100b4 	movhi	r2,1026
 4004ea0:	10acca04 	addi	r2,r2,-19672
 4004ea4:	e0fffe17 	ldw	r3,-8(fp)
 4004ea8:	18800015 	stw	r2,0(r3)
 4004eac:	e0bffe17 	ldw	r2,-8(fp)
 4004eb0:	e0ffff17 	ldw	r3,-4(fp)
 4004eb4:	10c00115 	stw	r3,4(r2)
 4004eb8:	e0bffe17 	ldw	r2,-8(fp)
 4004ebc:	10800204 	addi	r2,r2,8
 4004ec0:	1009883a 	mov	r4,r2
 4004ec4:	40047340 	call	4004734 <_ZN16MultiValueBufferC1Ev>
 4004ec8:	e0bffe17 	ldw	r2,-8(fp)
 4004ecc:	10800404 	addi	r2,r2,16
 4004ed0:	1009883a 	mov	r4,r2
 4004ed4:	40047940 	call	4004794 <_ZN20MultiByteValueParserC1Ev>
 4004ed8:	e0bffe17 	ldw	r2,-8(fp)
 4004edc:	10800604 	addi	r2,r2,24
 4004ee0:	1009883a 	mov	r4,r2
 4004ee4:	40048500 	call	4004850 <_ZN11ByteSkipperC1Ev>
 4004ee8:	e0bffe17 	ldw	r2,-8(fp)
 4004eec:	10000c05 	stb	zero,48(r2)
 4004ef0:	e0bffe17 	ldw	r2,-8(fp)
 4004ef4:	10000c45 	stb	zero,49(r2)
 4004ef8:	e0bffe17 	ldw	r2,-8(fp)
 4004efc:	10000c85 	stb	zero,50(r2)
 4004f00:	e0bffe17 	ldw	r2,-8(fp)
 4004f04:	10000e05 	stb	zero,56(r2)
        theBuffer.pValue = varBuffer;
 4004f08:	e0bffe17 	ldw	r2,-8(fp)
 4004f0c:	10c00804 	addi	r3,r2,32
 4004f10:	e0bffe17 	ldw	r2,-8(fp)
 4004f14:	19803fcc 	andi	r6,r3,255
 4004f18:	11000243 	ldbu	r4,9(r2)
 4004f1c:	2008703a 	and	r4,r4,zero
 4004f20:	200b883a 	mov	r5,r4
 4004f24:	3009883a 	mov	r4,r6
 4004f28:	2908b03a 	or	r4,r5,r4
 4004f2c:	11000245 	stb	r4,9(r2)
 4004f30:	1808d23a 	srli	r4,r3,8
 4004f34:	21803fcc 	andi	r6,r4,255
 4004f38:	11000283 	ldbu	r4,10(r2)
 4004f3c:	2008703a 	and	r4,r4,zero
 4004f40:	200b883a 	mov	r5,r4
 4004f44:	3009883a 	mov	r4,r6
 4004f48:	2908b03a 	or	r4,r5,r4
 4004f4c:	11000285 	stb	r4,10(r2)
 4004f50:	1808d43a 	srli	r4,r3,16
 4004f54:	21803fcc 	andi	r6,r4,255
 4004f58:	110002c3 	ldbu	r4,11(r2)
 4004f5c:	2008703a 	and	r4,r4,zero
 4004f60:	200b883a 	mov	r5,r4
 4004f64:	3009883a 	mov	r4,r6
 4004f68:	2908b03a 	or	r4,r5,r4
 4004f6c:	110002c5 	stb	r4,11(r2)
 4004f70:	180ad63a 	srli	r5,r3,24
 4004f74:	10c00303 	ldbu	r3,12(r2)
 4004f78:	1806703a 	and	r3,r3,zero
 4004f7c:	1809883a 	mov	r4,r3
 4004f80:	2807883a 	mov	r3,r5
 4004f84:	20c6b03a 	or	r3,r4,r3
 4004f88:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
 4004f8c:	e0bffe17 	ldw	r2,-8(fp)
 4004f90:	10c00404 	addi	r3,r2,16
 4004f94:	e0bffe17 	ldw	r2,-8(fp)
 4004f98:	10800204 	addi	r2,r2,8
 4004f9c:	100b883a 	mov	r5,r2
 4004fa0:	1809883a 	mov	r4,r3
 4004fa4:	40047d00 	call	40047d0 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 4004fa8:	e0bffe17 	ldw	r2,-8(fp)
 4004fac:	10c00604 	addi	r3,r2,24
 4004fb0:	e0bffe17 	ldw	r2,-8(fp)
 4004fb4:	10800204 	addi	r2,r2,8
 4004fb8:	100b883a 	mov	r5,r2
 4004fbc:	1809883a 	mov	r4,r3
 4004fc0:	400488c0 	call	400488c <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 4004fc4:	0001883a 	nop
 4004fc8:	e037883a 	mov	sp,fp
 4004fcc:	dfc00117 	ldw	ra,4(sp)
 4004fd0:	df000017 	ldw	fp,0(sp)
 4004fd4:	dec00204 	addi	sp,sp,8
 4004fd8:	f800283a 	ret

04004fdc <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 4004fdc:	defff804 	addi	sp,sp,-32
 4004fe0:	dfc00715 	stw	ra,28(sp)
 4004fe4:	df000615 	stw	fp,24(sp)
 4004fe8:	df000604 	addi	fp,sp,24
 4004fec:	e13ffc15 	stw	r4,-16(fp)
 4004ff0:	2805883a 	mov	r2,r5
 4004ff4:	e1bffe15 	stw	r6,-8(fp)
 4004ff8:	e1ffff15 	stw	r7,-4(fp)
 4004ffc:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
 4005000:	e0bffd0b 	ldhu	r2,-12(fp)
 4005004:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
 4005008:	e0bffe17 	ldw	r2,-8(fp)
 400500c:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
 4005010:	e0bffa0b 	ldhu	r2,-24(fp)
 4005014:	10bfffcc 	andi	r2,r2,65535
 4005018:	10000a26 	beq	r2,zero,4005044 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
 400501c:	e0bffb04 	addi	r2,fp,-20
 4005020:	e1bffa04 	addi	r6,fp,-24
 4005024:	100b883a 	mov	r5,r2
 4005028:	e13ffc17 	ldw	r4,-16(fp)
 400502c:	40050580 	call	4005058 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>
 4005030:	1080005c 	xori	r2,r2,1
 4005034:	10803fcc 	andi	r2,r2,255
 4005038:	1000011e 	bne	r2,zero,4005040 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x64>
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
 400503c:	003ff406 	br	4005010 <__alt_data_end+0xfc005010>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
 4005040:	0001883a 	nop
}
 4005044:	e037883a 	mov	sp,fp
 4005048:	dfc00117 	ldw	ra,4(sp)
 400504c:	df000017 	ldw	fp,0(sp)
 4005050:	dec00204 	addi	sp,sp,8
 4005054:	f800283a 	ret

04005058 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 4005058:	defff604 	addi	sp,sp,-40
 400505c:	dfc00915 	stw	ra,36(sp)
 4005060:	df000815 	stw	fp,32(sp)
 4005064:	df000804 	addi	fp,sp,32
 4005068:	e13ffc15 	stw	r4,-16(fp)
 400506c:	e17ffd15 	stw	r5,-12(fp)
 4005070:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 4005074:	e0bffc17 	ldw	r2,-16(fp)
 4005078:	10800804 	addi	r2,r2,32
 400507c:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 4005080:	e0bffc17 	ldw	r2,-16(fp)
 4005084:	10800804 	addi	r2,r2,32
 4005088:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
 400508c:	e0bffc17 	ldw	r2,-16(fp)
 4005090:	10800c03 	ldbu	r2,48(r2)
 4005094:	10803fcc 	andi	r2,r2,255
 4005098:	10c00168 	cmpgeui	r3,r2,5
 400509c:	1801141e 	bne	r3,zero,40054f0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x498>
 40050a0:	100690ba 	slli	r3,r2,2
 40050a4:	00810034 	movhi	r2,1024
 40050a8:	10942e04 	addi	r2,r2,20664
 40050ac:	1885883a 	add	r2,r3,r2
 40050b0:	10800017 	ldw	r2,0(r2)
 40050b4:	1000683a 	jmp	r2
 40050b8:	040050cc 	andi	r16,zero,323
 40050bc:	04005100 	call	400510 <__alt_mem_sdram-0x3bffaf0>
 40050c0:	04005188 	cmpgei	r16,zero,326
 40050c4:	0400521c 	xori	r16,zero,328
 40050c8:	04005288 	cmpgei	r16,zero,330
                case 0:
                        theBuffer.valueSize = 2;
 40050cc:	e0bffc17 	ldw	r2,-16(fp)
 40050d0:	00c00084 	movi	r3,2
 40050d4:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
 40050d8:	e0bffc17 	ldw	r2,-16(fp)
 40050dc:	10c00404 	addi	r3,r2,16
 40050e0:	e0bffc17 	ldw	r2,-16(fp)
 40050e4:	10800204 	addi	r2,r2,8
 40050e8:	100b883a 	mov	r5,r2
 40050ec:	1809883a 	mov	r4,r3
 40050f0:	40047d00 	call	40047d0 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 40050f4:	e0bffc17 	ldw	r2,-16(fp)
 40050f8:	00c00044 	movi	r3,1
 40050fc:	10c00c05 	stb	r3,48(r2)
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 4005100:	e0bffc17 	ldw	r2,-16(fp)
 4005104:	10800404 	addi	r2,r2,16
 4005108:	e1bffe17 	ldw	r6,-8(fp)
 400510c:	e17ffd17 	ldw	r5,-12(fp)
 4005110:	1009883a 	mov	r4,r2
 4005114:	40061fc0 	call	40061fc <_ZN20MultiByteValueParser5ParseEPPhPt>
 4005118:	1080005c 	xori	r2,r2,1
 400511c:	10803fcc 	andi	r2,r2,255
 4005120:	10000226 	beq	r2,zero,400512c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0xd4>
                                return false;
 4005124:	0005883a 	mov	r2,zero
 4005128:	0000f206 	br	40054f4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 400512c:	e0bffc17 	ldw	r2,-16(fp)
 4005130:	10c00217 	ldw	r3,8(r2)
 4005134:	1806d23a 	srli	r3,r3,8
 4005138:	10800317 	ldw	r2,12(r2)
 400513c:	10803fcc 	andi	r2,r2,255
 4005140:	1004963a 	slli	r2,r2,24
 4005144:	10c4b03a 	or	r2,r2,r3
 4005148:	10c00003 	ldbu	r3,0(r2)
 400514c:	e0bffc17 	ldw	r2,-16(fp)
 4005150:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 4005154:	e0bffc17 	ldw	r2,-16(fp)
 4005158:	10c00217 	ldw	r3,8(r2)
 400515c:	1806d23a 	srli	r3,r3,8
 4005160:	10800317 	ldw	r2,12(r2)
 4005164:	10803fcc 	andi	r2,r2,255
 4005168:	1004963a 	slli	r2,r2,24
 400516c:	10c4b03a 	or	r2,r2,r3
 4005170:	10c00043 	ldbu	r3,1(r2)
 4005174:	e0bffc17 	ldw	r2,-16(fp)
 4005178:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
 400517c:	e0bffc17 	ldw	r2,-16(fp)
 4005180:	00c00084 	movi	r3,2
 4005184:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 4005188:	e0bffc17 	ldw	r2,-16(fp)
 400518c:	10800804 	addi	r2,r2,32
 4005190:	10c00084 	addi	r3,r2,2
 4005194:	e0bffc17 	ldw	r2,-16(fp)
 4005198:	19803fcc 	andi	r6,r3,255
 400519c:	11000243 	ldbu	r4,9(r2)
 40051a0:	2008703a 	and	r4,r4,zero
 40051a4:	200b883a 	mov	r5,r4
 40051a8:	3009883a 	mov	r4,r6
 40051ac:	2908b03a 	or	r4,r5,r4
 40051b0:	11000245 	stb	r4,9(r2)
 40051b4:	1808d23a 	srli	r4,r3,8
 40051b8:	21803fcc 	andi	r6,r4,255
 40051bc:	11000283 	ldbu	r4,10(r2)
 40051c0:	2008703a 	and	r4,r4,zero
 40051c4:	200b883a 	mov	r5,r4
 40051c8:	3009883a 	mov	r4,r6
 40051cc:	2908b03a 	or	r4,r5,r4
 40051d0:	11000285 	stb	r4,10(r2)
 40051d4:	1808d43a 	srli	r4,r3,16
 40051d8:	21803fcc 	andi	r6,r4,255
 40051dc:	110002c3 	ldbu	r4,11(r2)
 40051e0:	2008703a 	and	r4,r4,zero
 40051e4:	200b883a 	mov	r5,r4
 40051e8:	3009883a 	mov	r4,r6
 40051ec:	2908b03a 	or	r4,r5,r4
 40051f0:	110002c5 	stb	r4,11(r2)
 40051f4:	180ad63a 	srli	r5,r3,24
 40051f8:	10c00303 	ldbu	r3,12(r2)
 40051fc:	1806703a 	and	r3,r3,zero
 4005200:	1809883a 	mov	r4,r3
 4005204:	2807883a 	mov	r3,r5
 4005208:	20c6b03a 	or	r3,r4,r3
 400520c:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
 4005210:	e0bffc17 	ldw	r2,-16(fp)
 4005214:	00c000c4 	movi	r3,3
 4005218:	10c00c05 	stb	r3,48(r2)
                case 3:
                        switch(dscrType) {
 400521c:	e0bffc17 	ldw	r2,-16(fp)
 4005220:	10800c83 	ldbu	r2,50(r2)
 4005224:	10803fcc 	andi	r2,r2,255
 4005228:	10c00120 	cmpeqi	r3,r2,4
 400522c:	1800021e 	bne	r3,zero,4005238 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1e0>
 4005230:	10800148 	cmpgei	r2,r2,5
 4005234:	00000306 	br	4005244 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 4005238:	e0bffc17 	ldw	r2,-16(fp)
 400523c:	10000cc5 	stb	zero,51(r2)
                                        break;
 4005240:	00000106 	br	4005248 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
 4005244:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
 4005248:	e0bffc17 	ldw	r2,-16(fp)
 400524c:	10800c43 	ldbu	r2,49(r2)
 4005250:	10bfff84 	addi	r2,r2,-2
 4005254:	1007883a 	mov	r3,r2
 4005258:	e0bffc17 	ldw	r2,-16(fp)
 400525c:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
 4005260:	e0bffc17 	ldw	r2,-16(fp)
 4005264:	10c00404 	addi	r3,r2,16
 4005268:	e0bffc17 	ldw	r2,-16(fp)
 400526c:	10800204 	addi	r2,r2,8
 4005270:	100b883a 	mov	r5,r2
 4005274:	1809883a 	mov	r4,r3
 4005278:	40047d00 	call	40047d0 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 400527c:	e0bffc17 	ldw	r2,-16(fp)
 4005280:	00c00104 	movi	r3,4
 4005284:	10c00c05 	stb	r3,48(r2)
                case 4:
                        switch(dscrType) {
 4005288:	e0bffc17 	ldw	r2,-16(fp)
 400528c:	10800c83 	ldbu	r2,50(r2)
 4005290:	10803fcc 	andi	r2,r2,255
 4005294:	10c00120 	cmpeqi	r3,r2,4
 4005298:	1800141e 	bne	r3,zero,40052ec <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x294>
 400529c:	10c00160 	cmpeqi	r3,r2,5
 40052a0:	1800311e 	bne	r3,zero,4005368 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x310>
 40052a4:	108000a0 	cmpeqi	r2,r2,2
 40052a8:	10005a26 	beq	r2,zero,4005414 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x3bc>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 40052ac:	e0bffc17 	ldw	r2,-16(fp)
 40052b0:	10800404 	addi	r2,r2,16
 40052b4:	e1bffe17 	ldw	r6,-8(fp)
 40052b8:	e17ffd17 	ldw	r5,-12(fp)
 40052bc:	1009883a 	mov	r4,r2
 40052c0:	40061fc0 	call	40061fc <_ZN20MultiByteValueParser5ParseEPPhPt>
 40052c4:	1080005c 	xori	r2,r2,1
 40052c8:	10803fcc 	andi	r2,r2,255
 40052cc:	10000226 	beq	r2,zero,40052d8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x280>
                                                return false;
 40052d0:	0005883a 	mov	r2,zero
 40052d4:	00008706 	br	40054f4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        confValue = ucd->bConfigurationValue;
 40052d8:	e0bffa17 	ldw	r2,-24(fp)
 40052dc:	10c00143 	ldbu	r3,5(r2)
 40052e0:	e0bffc17 	ldw	r2,-16(fp)
 40052e4:	10c00d05 	stb	r3,52(r2)
                                        break;
 40052e8:	00005e06 	br	4005464 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 40052ec:	e0bffc17 	ldw	r2,-16(fp)
 40052f0:	10800404 	addi	r2,r2,16
 40052f4:	e1bffe17 	ldw	r6,-8(fp)
 40052f8:	e17ffd17 	ldw	r5,-12(fp)
 40052fc:	1009883a 	mov	r4,r2
 4005300:	40061fc0 	call	40061fc <_ZN20MultiByteValueParser5ParseEPPhPt>
 4005304:	1080005c 	xori	r2,r2,1
 4005308:	10803fcc 	andi	r2,r2,255
 400530c:	10000226 	beq	r2,zero,4005318 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
 4005310:	0005883a 	mov	r2,zero
 4005314:	00007706 	br	40054f4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
 4005318:	e0bffc17 	ldw	r2,-16(fp)
 400531c:	10800e03 	ldbu	r2,56(r2)
 4005320:	10803fcc 	andi	r2,r2,255
 4005324:	10004c1e 	bne	r2,zero,4005458 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x400>
                                                        break;
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
                                                        break;
                                        }
                                        isGoodInterface = true;
 4005328:	e0bffc17 	ldw	r2,-16(fp)
 400532c:	00c00044 	movi	r3,1
 4005330:	10c00cc5 	stb	r3,51(r2)
                                        ifaceNumber = uid->bInterfaceNumber;
 4005334:	e0bffb17 	ldw	r2,-20(fp)
 4005338:	10c00083 	ldbu	r3,2(r2)
 400533c:	e0bffc17 	ldw	r2,-16(fp)
 4005340:	10c00d85 	stb	r3,54(r2)
                                        ifaceAltSet = uid->bAlternateSetting;
 4005344:	e0bffb17 	ldw	r2,-20(fp)
 4005348:	10c000c3 	ldbu	r3,3(r2)
 400534c:	e0bffc17 	ldw	r2,-16(fp)
 4005350:	10c00dc5 	stb	r3,55(r2)
                                        protoValue = uid->bInterfaceProtocol;
 4005354:	e0bffb17 	ldw	r2,-20(fp)
 4005358:	10c001c3 	ldbu	r3,7(r2)
 400535c:	e0bffc17 	ldw	r2,-16(fp)
 4005360:	10c00d45 	stb	r3,53(r2)
                                        break;
 4005364:	00003f06 	br	4005464 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 4005368:	e0bffc17 	ldw	r2,-16(fp)
 400536c:	10800404 	addi	r2,r2,16
 4005370:	e1bffe17 	ldw	r6,-8(fp)
 4005374:	e17ffd17 	ldw	r5,-12(fp)
 4005378:	1009883a 	mov	r4,r2
 400537c:	40061fc0 	call	40061fc <_ZN20MultiByteValueParser5ParseEPPhPt>
 4005380:	1080005c 	xori	r2,r2,1
 4005384:	10803fcc 	andi	r2,r2,255
 4005388:	10000226 	beq	r2,zero,4005394 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x33c>
                                                return false;
 400538c:	0005883a 	mov	r2,zero
 4005390:	00005806 	br	40054f4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if(isGoodInterface)
 4005394:	e0bffc17 	ldw	r2,-16(fp)
 4005398:	10800cc3 	ldbu	r2,51(r2)
 400539c:	10803fcc 	andi	r2,r2,255
 40053a0:	10002f26 	beq	r2,zero,4005460 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                if(theXtractor)
 40053a4:	e0bffc17 	ldw	r2,-16(fp)
 40053a8:	10800117 	ldw	r2,4(r2)
 40053ac:	10002c26 	beq	r2,zero,4005460 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 40053b0:	e0bffc17 	ldw	r2,-16(fp)
 40053b4:	10800117 	ldw	r2,4(r2)
 40053b8:	10800017 	ldw	r2,0(r2)
 40053bc:	10800017 	ldw	r2,0(r2)
 40053c0:	e0fffc17 	ldw	r3,-16(fp)
 40053c4:	1a000117 	ldw	r8,4(r3)
 40053c8:	e0fffc17 	ldw	r3,-16(fp)
 40053cc:	18c00d03 	ldbu	r3,52(r3)
 40053d0:	19403fcc 	andi	r5,r3,255
 40053d4:	e0fffc17 	ldw	r3,-16(fp)
 40053d8:	18c00d83 	ldbu	r3,54(r3)
 40053dc:	19803fcc 	andi	r6,r3,255
 40053e0:	e0fffc17 	ldw	r3,-16(fp)
 40053e4:	18c00dc3 	ldbu	r3,55(r3)
 40053e8:	19c03fcc 	andi	r7,r3,255
 40053ec:	e0fffc17 	ldw	r3,-16(fp)
 40053f0:	18c00d43 	ldbu	r3,53(r3)
 40053f4:	18c03fcc 	andi	r3,r3,255
 40053f8:	e13ffc17 	ldw	r4,-16(fp)
 40053fc:	21000804 	addi	r4,r4,32
 4005400:	d9000115 	stw	r4,4(sp)
 4005404:	d8c00015 	stw	r3,0(sp)
 4005408:	4009883a 	mov	r4,r8
 400540c:	103ee83a 	callr	r2
                                        break;
 4005410:	00001306 	br	4005460 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 4005414:	e0bffc17 	ldw	r2,-16(fp)
 4005418:	10c00604 	addi	r3,r2,24
 400541c:	e0bffc17 	ldw	r2,-16(fp)
 4005420:	10800c43 	ldbu	r2,49(r2)
 4005424:	10803fcc 	andi	r2,r2,255
 4005428:	10bfff84 	addi	r2,r2,-2
 400542c:	10bfffcc 	andi	r2,r2,65535
 4005430:	100f883a 	mov	r7,r2
 4005434:	e1bffe17 	ldw	r6,-8(fp)
 4005438:	e17ffd17 	ldw	r5,-12(fp)
 400543c:	1809883a 	mov	r4,r3
 4005440:	40048f40 	call	40048f4 <_ZN11ByteSkipper4SkipEPPhPtt>
 4005444:	1080005c 	xori	r2,r2,1
 4005448:	10803fcc 	andi	r2,r2,255
 400544c:	10000526 	beq	r2,zero,4005464 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                                return false;
 4005450:	0005883a 	mov	r2,zero
 4005454:	00002706 	br	40054f4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
                                                        break;
 4005458:	0001883a 	nop
 400545c:	00000106 	br	4005464 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                        if(!valParser.Parse(pp, pcntdn))
                                                return false;
                                        if(isGoodInterface)
                                                if(theXtractor)
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
                                        break;
 4005460:	0001883a 	nop
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
 4005464:	e0bffc17 	ldw	r2,-16(fp)
 4005468:	10c00804 	addi	r3,r2,32
 400546c:	e0bffc17 	ldw	r2,-16(fp)
 4005470:	19803fcc 	andi	r6,r3,255
 4005474:	11000243 	ldbu	r4,9(r2)
 4005478:	2008703a 	and	r4,r4,zero
 400547c:	200b883a 	mov	r5,r4
 4005480:	3009883a 	mov	r4,r6
 4005484:	2908b03a 	or	r4,r5,r4
 4005488:	11000245 	stb	r4,9(r2)
 400548c:	1808d23a 	srli	r4,r3,8
 4005490:	21803fcc 	andi	r6,r4,255
 4005494:	11000283 	ldbu	r4,10(r2)
 4005498:	2008703a 	and	r4,r4,zero
 400549c:	200b883a 	mov	r5,r4
 40054a0:	3009883a 	mov	r4,r6
 40054a4:	2908b03a 	or	r4,r5,r4
 40054a8:	11000285 	stb	r4,10(r2)
 40054ac:	1808d43a 	srli	r4,r3,16
 40054b0:	21803fcc 	andi	r6,r4,255
 40054b4:	110002c3 	ldbu	r4,11(r2)
 40054b8:	2008703a 	and	r4,r4,zero
 40054bc:	200b883a 	mov	r5,r4
 40054c0:	3009883a 	mov	r4,r6
 40054c4:	2908b03a 	or	r4,r5,r4
 40054c8:	110002c5 	stb	r4,11(r2)
 40054cc:	180ad63a 	srli	r5,r3,24
 40054d0:	10c00303 	ldbu	r3,12(r2)
 40054d4:	1806703a 	and	r3,r3,zero
 40054d8:	1809883a 	mov	r4,r3
 40054dc:	2807883a 	mov	r3,r5
 40054e0:	20c6b03a 	or	r3,r4,r3
 40054e4:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
 40054e8:	e0bffc17 	ldw	r2,-16(fp)
 40054ec:	10000c05 	stb	zero,48(r2)
        }
        return true;
 40054f0:	00800044 	movi	r2,1
}
 40054f4:	e037883a 	mov	sp,fp
 40054f8:	dfc00117 	ldw	ra,4(sp)
 40054fc:	df000017 	ldw	fp,0(sp)
 4005500:	dec00204 	addi	sp,sp,8
 4005504:	f800283a 	ret

04005508 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "hidboot.h"

void MouseReportParser::Parse(USBHID *hid __attribute__((unused)), bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
 4005508:	defff904 	addi	sp,sp,-28
 400550c:	dfc00615 	stw	ra,24(sp)
 4005510:	df000515 	stw	fp,20(sp)
 4005514:	df000504 	addi	fp,sp,20
 4005518:	e13ffc15 	stw	r4,-16(fp)
 400551c:	e17ffd15 	stw	r5,-12(fp)
 4005520:	3007883a 	mov	r3,r6
 4005524:	3805883a 	mov	r2,r7
 4005528:	e0fffe05 	stb	r3,-8(fp)
 400552c:	e0bfff05 	stb	r2,-4(fp)
        MOUSEINFO *pmi = (MOUSEINFO*)buf;
 4005530:	e0800217 	ldw	r2,8(fp)
 4005534:	e0bffb15 	stw	r2,-20(fp)
        // sketch could already have noted these facts to support drag/drop scroll wheel stuff, etc.
        //

        // Why do we need to pass the structure for buttons?
        // The function call not enough of a hint for what is happening?
        if(prevState.mouseInfo.bmLeftButton != pmi->bmLeftButton ) {
 4005538:	e0bffc17 	ldw	r2,-16(fp)
 400553c:	10800117 	ldw	r2,4(r2)
 4005540:	1080004c 	andi	r2,r2,1
 4005544:	1007883a 	mov	r3,r2
 4005548:	e0bffb17 	ldw	r2,-20(fp)
 400554c:	10800003 	ldbu	r2,0(r2)
 4005550:	1080004c 	andi	r2,r2,1
 4005554:	18c03fcc 	andi	r3,r3,255
 4005558:	10803fcc 	andi	r2,r2,255
 400555c:	18801426 	beq	r3,r2,40055b0 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                if(pmi->bmLeftButton) {
 4005560:	e0bffb17 	ldw	r2,-20(fp)
 4005564:	10800003 	ldbu	r2,0(r2)
 4005568:	1080004c 	andi	r2,r2,1
 400556c:	10803fcc 	andi	r2,r2,255
 4005570:	10000826 	beq	r2,zero,4005594 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x8c>
                        OnLeftButtonDown(pmi);
 4005574:	e0bffc17 	ldw	r2,-16(fp)
 4005578:	10800017 	ldw	r2,0(r2)
 400557c:	10800304 	addi	r2,r2,12
 4005580:	10800017 	ldw	r2,0(r2)
 4005584:	e17ffb17 	ldw	r5,-20(fp)
 4005588:	e13ffc17 	ldw	r4,-16(fp)
 400558c:	103ee83a 	callr	r2
 4005590:	00000706 	br	40055b0 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                } else {
                        OnLeftButtonUp(pmi);
 4005594:	e0bffc17 	ldw	r2,-16(fp)
 4005598:	10800017 	ldw	r2,0(r2)
 400559c:	10800204 	addi	r2,r2,8
 40055a0:	10800017 	ldw	r2,0(r2)
 40055a4:	e17ffb17 	ldw	r5,-20(fp)
 40055a8:	e13ffc17 	ldw	r4,-16(fp)
 40055ac:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmRightButton != pmi->bmRightButton) {
 40055b0:	e0bffc17 	ldw	r2,-16(fp)
 40055b4:	10800117 	ldw	r2,4(r2)
 40055b8:	1004d07a 	srli	r2,r2,1
 40055bc:	1080004c 	andi	r2,r2,1
 40055c0:	1007883a 	mov	r3,r2
 40055c4:	e0bffb17 	ldw	r2,-20(fp)
 40055c8:	10800003 	ldbu	r2,0(r2)
 40055cc:	1004d07a 	srli	r2,r2,1
 40055d0:	1080004c 	andi	r2,r2,1
 40055d4:	18c03fcc 	andi	r3,r3,255
 40055d8:	10803fcc 	andi	r2,r2,255
 40055dc:	18801426 	beq	r3,r2,4005630 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                if(pmi->bmRightButton) {
 40055e0:	e0bffb17 	ldw	r2,-20(fp)
 40055e4:	10800003 	ldbu	r2,0(r2)
 40055e8:	1080008c 	andi	r2,r2,2
 40055ec:	10803fcc 	andi	r2,r2,255
 40055f0:	10000826 	beq	r2,zero,4005614 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x10c>
                        OnRightButtonDown(pmi);
 40055f4:	e0bffc17 	ldw	r2,-16(fp)
 40055f8:	10800017 	ldw	r2,0(r2)
 40055fc:	10800504 	addi	r2,r2,20
 4005600:	10800017 	ldw	r2,0(r2)
 4005604:	e17ffb17 	ldw	r5,-20(fp)
 4005608:	e13ffc17 	ldw	r4,-16(fp)
 400560c:	103ee83a 	callr	r2
 4005610:	00000706 	br	4005630 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                } else {
                        OnRightButtonUp(pmi);
 4005614:	e0bffc17 	ldw	r2,-16(fp)
 4005618:	10800017 	ldw	r2,0(r2)
 400561c:	10800404 	addi	r2,r2,16
 4005620:	10800017 	ldw	r2,0(r2)
 4005624:	e17ffb17 	ldw	r5,-20(fp)
 4005628:	e13ffc17 	ldw	r4,-16(fp)
 400562c:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmMiddleButton != pmi->bmMiddleButton) {
 4005630:	e0bffc17 	ldw	r2,-16(fp)
 4005634:	10800117 	ldw	r2,4(r2)
 4005638:	1004d0ba 	srli	r2,r2,2
 400563c:	1080004c 	andi	r2,r2,1
 4005640:	1007883a 	mov	r3,r2
 4005644:	e0bffb17 	ldw	r2,-20(fp)
 4005648:	10800003 	ldbu	r2,0(r2)
 400564c:	1004d0ba 	srli	r2,r2,2
 4005650:	1080004c 	andi	r2,r2,1
 4005654:	18c03fcc 	andi	r3,r3,255
 4005658:	10803fcc 	andi	r2,r2,255
 400565c:	18801426 	beq	r3,r2,40056b0 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                if(pmi->bmMiddleButton) {
 4005660:	e0bffb17 	ldw	r2,-20(fp)
 4005664:	10800003 	ldbu	r2,0(r2)
 4005668:	1080010c 	andi	r2,r2,4
 400566c:	10803fcc 	andi	r2,r2,255
 4005670:	10000826 	beq	r2,zero,4005694 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x18c>
                        OnMiddleButtonDown(pmi);
 4005674:	e0bffc17 	ldw	r2,-16(fp)
 4005678:	10800017 	ldw	r2,0(r2)
 400567c:	10800704 	addi	r2,r2,28
 4005680:	10800017 	ldw	r2,0(r2)
 4005684:	e17ffb17 	ldw	r5,-20(fp)
 4005688:	e13ffc17 	ldw	r4,-16(fp)
 400568c:	103ee83a 	callr	r2
 4005690:	00000706 	br	40056b0 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                } else {
                        OnMiddleButtonUp(pmi);
 4005694:	e0bffc17 	ldw	r2,-16(fp)
 4005698:	10800017 	ldw	r2,0(r2)
 400569c:	10800604 	addi	r2,r2,24
 40056a0:	10800017 	ldw	r2,0(r2)
 40056a4:	e17ffb17 	ldw	r5,-20(fp)
 40056a8:	e13ffc17 	ldw	r4,-16(fp)
 40056ac:	103ee83a 	callr	r2
        //}
        //

        // Mice only report motion when they actually move!
        // Why not just pass the x/y values to simplify things??
        if(pmi->dX || pmi->dY) {
 40056b0:	e0bffb17 	ldw	r2,-20(fp)
 40056b4:	10800043 	ldbu	r2,1(r2)
 40056b8:	10803fcc 	andi	r2,r2,255
 40056bc:	1080201c 	xori	r2,r2,128
 40056c0:	10bfe004 	addi	r2,r2,-128
 40056c4:	1000061e 	bne	r2,zero,40056e0 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1d8>
 40056c8:	e0bffb17 	ldw	r2,-20(fp)
 40056cc:	10800083 	ldbu	r2,2(r2)
 40056d0:	10803fcc 	andi	r2,r2,255
 40056d4:	1080201c 	xori	r2,r2,128
 40056d8:	10bfe004 	addi	r2,r2,-128
 40056dc:	10000726 	beq	r2,zero,40056fc <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1f4>
                OnMouseMove(pmi);
 40056e0:	e0bffc17 	ldw	r2,-16(fp)
 40056e4:	10800017 	ldw	r2,0(r2)
 40056e8:	10800104 	addi	r2,r2,4
 40056ec:	10800017 	ldw	r2,0(r2)
 40056f0:	e17ffb17 	ldw	r5,-20(fp)
 40056f4:	e13ffc17 	ldw	r4,-16(fp)
 40056f8:	103ee83a 	callr	r2
        //
        // if(event) OnMouse();
        //

        // Only the first byte matters (buttons). We do NOT need to save position info.
        prevState.bInfo[0] = buf[0];
 40056fc:	e0800217 	ldw	r2,8(fp)
 4005700:	10c00003 	ldbu	r3,0(r2)
 4005704:	e0bffc17 	ldw	r2,-16(fp)
 4005708:	10c00105 	stb	r3,4(r2)
#endif

};
 400570c:	0001883a 	nop
 4005710:	e037883a 	mov	sp,fp
 4005714:	dfc00117 	ldw	ra,4(sp)
 4005718:	df000017 	ldw	fp,0(sp)
 400571c:	dec00204 	addi	sp,sp,8
 4005720:	f800283a 	ret

04005724 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh>:

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
 4005724:	defff804 	addi	sp,sp,-32
 4005728:	dfc00715 	stw	ra,28(sp)
 400572c:	df000615 	stw	fp,24(sp)
 4005730:	df000604 	addi	fp,sp,24
 4005734:	e13ffc15 	stw	r4,-16(fp)
 4005738:	e17ffd15 	stw	r5,-12(fp)
 400573c:	3007883a 	mov	r3,r6
 4005740:	3805883a 	mov	r2,r7
 4005744:	e0fffe05 	stb	r3,-8(fp)
 4005748:	e0bfff05 	stb	r2,-4(fp)
        // On error - return
        if (buf[2] == 1)
 400574c:	e0800217 	ldw	r2,8(fp)
 4005750:	10800084 	addi	r2,r2,2
 4005754:	10800003 	ldbu	r2,0(r2)
 4005758:	10803fcc 	andi	r2,r2,255
 400575c:	10800058 	cmpnei	r2,r2,1
 4005760:	10009926 	beq	r2,zero,40059c8 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a4>
                return;

        //KBDINFO       *pki = (KBDINFO*)buf;

        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
 4005764:	e0bffc17 	ldw	r2,-16(fp)
 4005768:	10c00103 	ldbu	r3,4(r2)
 400576c:	e0800217 	ldw	r2,8(fp)
 4005770:	10800003 	ldbu	r2,0(r2)
 4005774:	18c03fcc 	andi	r3,r3,255
 4005778:	10803fcc 	andi	r2,r2,255
 400577c:	18800e26 	beq	r3,r2,40057b8 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x94>
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
 4005780:	e0bffc17 	ldw	r2,-16(fp)
 4005784:	10800017 	ldw	r2,0(r2)
 4005788:	10800204 	addi	r2,r2,8
 400578c:	10800017 	ldw	r2,0(r2)
 4005790:	e0fffc17 	ldw	r3,-16(fp)
 4005794:	18c00103 	ldbu	r3,4(r3)
 4005798:	19003fcc 	andi	r4,r3,255
 400579c:	e0c00217 	ldw	r3,8(fp)
 40057a0:	18c00003 	ldbu	r3,0(r3)
 40057a4:	18c03fcc 	andi	r3,r3,255
 40057a8:	180d883a 	mov	r6,r3
 40057ac:	200b883a 	mov	r5,r4
 40057b0:	e13ffc17 	ldw	r4,-16(fp)
 40057b4:	103ee83a 	callr	r2
        }

        for (uint8_t i = 2; i < 8; i++) {
 40057b8:	00800084 	movi	r2,2
 40057bc:	e0bffa05 	stb	r2,-24(fp)
 40057c0:	e0bffa03 	ldbu	r2,-24(fp)
 40057c4:	10800228 	cmpgeui	r2,r2,8
 40057c8:	10006e1e 	bne	r2,zero,4005984 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x260>
                bool down = false;
 40057cc:	e03ffa45 	stb	zero,-23(fp)
                bool up = false;
 40057d0:	e03ffa85 	stb	zero,-22(fp)

                for (uint8_t j = 2; j < 8; j++) {
 40057d4:	00800084 	movi	r2,2
 40057d8:	e0bffac5 	stb	r2,-21(fp)
 40057dc:	e0bffac3 	ldbu	r2,-21(fp)
 40057e0:	10800228 	cmpgeui	r2,r2,8
 40057e4:	10002f1e 	bne	r2,zero,40058a4 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x180>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
 40057e8:	e0bffa03 	ldbu	r2,-24(fp)
 40057ec:	e0c00217 	ldw	r3,8(fp)
 40057f0:	1885883a 	add	r2,r3,r2
 40057f4:	11000003 	ldbu	r4,0(r2)
 40057f8:	e0bffac3 	ldbu	r2,-21(fp)
 40057fc:	e0fffc17 	ldw	r3,-16(fp)
 4005800:	1885883a 	add	r2,r3,r2
 4005804:	10800104 	addi	r2,r2,4
 4005808:	10800003 	ldbu	r2,0(r2)
 400580c:	20c03fcc 	andi	r3,r4,255
 4005810:	10803fcc 	andi	r2,r2,255
 4005814:	1880091e 	bne	r3,r2,400583c <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
 4005818:	e0bffa03 	ldbu	r2,-24(fp)
 400581c:	e0c00217 	ldw	r3,8(fp)
 4005820:	1885883a 	add	r2,r3,r2
 4005824:	10800003 	ldbu	r2,0(r2)
 4005828:	10803fcc 	andi	r2,r2,255
 400582c:	10800060 	cmpeqi	r2,r2,1
 4005830:	1000021e 	bne	r2,zero,400583c <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
                                down = true;
 4005834:	00800044 	movi	r2,1
 4005838:	e0bffa45 	stb	r2,-23(fp)
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
 400583c:	e0bffac3 	ldbu	r2,-21(fp)
 4005840:	e0c00217 	ldw	r3,8(fp)
 4005844:	1885883a 	add	r2,r3,r2
 4005848:	11000003 	ldbu	r4,0(r2)
 400584c:	e0bffa03 	ldbu	r2,-24(fp)
 4005850:	e0fffc17 	ldw	r3,-16(fp)
 4005854:	1885883a 	add	r2,r3,r2
 4005858:	10800104 	addi	r2,r2,4
 400585c:	10800003 	ldbu	r2,0(r2)
 4005860:	20c03fcc 	andi	r3,r4,255
 4005864:	10803fcc 	andi	r2,r2,255
 4005868:	18800a1e 	bne	r3,r2,4005894 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
 400586c:	e0bffa03 	ldbu	r2,-24(fp)
 4005870:	e0fffc17 	ldw	r3,-16(fp)
 4005874:	1885883a 	add	r2,r3,r2
 4005878:	10800104 	addi	r2,r2,4
 400587c:	10800003 	ldbu	r2,0(r2)
 4005880:	10803fcc 	andi	r2,r2,255
 4005884:	10800060 	cmpeqi	r2,r2,1
 4005888:	1000021e 	bne	r2,zero,4005894 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
                                up = true;
 400588c:	00800044 	movi	r2,1
 4005890:	e0bffa85 	stb	r2,-22(fp)

        for (uint8_t i = 2; i < 8; i++) {
                bool down = false;
                bool up = false;

                for (uint8_t j = 2; j < 8; j++) {
 4005894:	e0bffac3 	ldbu	r2,-21(fp)
 4005898:	10800044 	addi	r2,r2,1
 400589c:	e0bffac5 	stb	r2,-21(fp)
 40058a0:	003fce06 	br	40057dc <__alt_data_end+0xfc0057dc>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
                                down = true;
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
                                up = true;
                }
                if (!down) {
 40058a4:	e0bffa43 	ldbu	r2,-23(fp)
 40058a8:	1080005c 	xori	r2,r2,1
 40058ac:	10803fcc 	andi	r2,r2,255
 40058b0:	10001c26 	beq	r2,zero,4005924 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x200>
                        HandleLockingKeys(hid, buf[i]);
 40058b4:	e0bffc17 	ldw	r2,-16(fp)
 40058b8:	10800017 	ldw	r2,0(r2)
 40058bc:	10800104 	addi	r2,r2,4
 40058c0:	10800017 	ldw	r2,0(r2)
 40058c4:	e0fffa03 	ldbu	r3,-24(fp)
 40058c8:	e1000217 	ldw	r4,8(fp)
 40058cc:	20c7883a 	add	r3,r4,r3
 40058d0:	18c00003 	ldbu	r3,0(r3)
 40058d4:	18c03fcc 	andi	r3,r3,255
 40058d8:	180d883a 	mov	r6,r3
 40058dc:	e17ffd17 	ldw	r5,-12(fp)
 40058e0:	e13ffc17 	ldw	r4,-16(fp)
 40058e4:	103ee83a 	callr	r2
                        OnKeyDown(*buf, buf[i]);
 40058e8:	e0bffc17 	ldw	r2,-16(fp)
 40058ec:	10800017 	ldw	r2,0(r2)
 40058f0:	10800304 	addi	r2,r2,12
 40058f4:	10800017 	ldw	r2,0(r2)
 40058f8:	e0c00217 	ldw	r3,8(fp)
 40058fc:	18c00003 	ldbu	r3,0(r3)
 4005900:	19403fcc 	andi	r5,r3,255
 4005904:	e0fffa03 	ldbu	r3,-24(fp)
 4005908:	e1000217 	ldw	r4,8(fp)
 400590c:	20c7883a 	add	r3,r4,r3
 4005910:	18c00003 	ldbu	r3,0(r3)
 4005914:	18c03fcc 	andi	r3,r3,255
 4005918:	180d883a 	mov	r6,r3
 400591c:	e13ffc17 	ldw	r4,-16(fp)
 4005920:	103ee83a 	callr	r2
                }
                if (!up)
 4005924:	e0bffa83 	ldbu	r2,-22(fp)
 4005928:	1080005c 	xori	r2,r2,1
 400592c:	10803fcc 	andi	r2,r2,255
 4005930:	10001026 	beq	r2,zero,4005974 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x250>
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
 4005934:	e0bffc17 	ldw	r2,-16(fp)
 4005938:	10800017 	ldw	r2,0(r2)
 400593c:	10800404 	addi	r2,r2,16
 4005940:	10800017 	ldw	r2,0(r2)
 4005944:	e0fffc17 	ldw	r3,-16(fp)
 4005948:	18c00103 	ldbu	r3,4(r3)
 400594c:	19403fcc 	andi	r5,r3,255
 4005950:	e0fffa03 	ldbu	r3,-24(fp)
 4005954:	e13ffc17 	ldw	r4,-16(fp)
 4005958:	20c7883a 	add	r3,r4,r3
 400595c:	18c00104 	addi	r3,r3,4
 4005960:	18c00003 	ldbu	r3,0(r3)
 4005964:	18c03fcc 	andi	r3,r3,255
 4005968:	180d883a 	mov	r6,r3
 400596c:	e13ffc17 	ldw	r4,-16(fp)
 4005970:	103ee83a 	callr	r2
        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
        }

        for (uint8_t i = 2; i < 8; i++) {
 4005974:	e0bffa03 	ldbu	r2,-24(fp)
 4005978:	10800044 	addi	r2,r2,1
 400597c:	e0bffa05 	stb	r2,-24(fp)
 4005980:	003f8f06 	br	40057c0 <__alt_data_end+0xfc0057c0>
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
 4005984:	e03ffb05 	stb	zero,-20(fp)
 4005988:	e0bffb03 	ldbu	r2,-20(fp)
 400598c:	10800228 	cmpgeui	r2,r2,8
 4005990:	10000e1e 	bne	r2,zero,40059cc <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a8>
                prevState.bInfo[i] = buf[i];
 4005994:	e0bffb03 	ldbu	r2,-20(fp)
 4005998:	e0fffb03 	ldbu	r3,-20(fp)
 400599c:	e1000217 	ldw	r4,8(fp)
 40059a0:	20c7883a 	add	r3,r4,r3
 40059a4:	18c00003 	ldbu	r3,0(r3)
 40059a8:	e13ffc17 	ldw	r4,-16(fp)
 40059ac:	2085883a 	add	r2,r4,r2
 40059b0:	10800104 	addi	r2,r2,4
 40059b4:	10c00005 	stb	r3,0(r2)
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
 40059b8:	e0bffb03 	ldbu	r2,-20(fp)
 40059bc:	10800044 	addi	r2,r2,1
 40059c0:	e0bffb05 	stb	r2,-20(fp)
 40059c4:	003ff006 	br	4005988 <__alt_data_end+0xfc005988>
};

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
        // On error - return
        if (buf[2] == 1)
                return;
 40059c8:	0001883a 	nop
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
                prevState.bInfo[i] = buf[i];
};
 40059cc:	e037883a 	mov	sp,fp
 40059d0:	dfc00117 	ldw	ra,4(sp)
 40059d4:	df000017 	ldw	fp,0(sp)
 40059d8:	dec00204 	addi	sp,sp,8
 40059dc:	f800283a 	ret

040059e0 <_ZN20KeyboardReportParser10OemToAsciiEhh>:
const uint8_t KeyboardReportParser::numKeys[10] PROGMEM = {'!', '@', '#', '$', '%', '^', '&', '*', '(', ')'};
const uint8_t KeyboardReportParser::symKeysUp[12] PROGMEM = {'_', '+', '{', '}', '|', '~', ':', '"', '~', '<', '>', '?'};
const uint8_t KeyboardReportParser::symKeysLo[12] PROGMEM = {'-', '=', '[', ']', '\\', ' ', ';', '\'', '`', ',', '.', '/'};
const uint8_t KeyboardReportParser::padKeys[5] PROGMEM = {'/', '*', '-', '+', '\r'};

uint8_t KeyboardReportParser::OemToAscii(uint8_t mod, uint8_t key) {
 40059e0:	defffa04 	addi	sp,sp,-24
 40059e4:	dfc00515 	stw	ra,20(sp)
 40059e8:	df000415 	stw	fp,16(sp)
 40059ec:	df000404 	addi	fp,sp,16
 40059f0:	e13ffd15 	stw	r4,-12(fp)
 40059f4:	2807883a 	mov	r3,r5
 40059f8:	3005883a 	mov	r2,r6
 40059fc:	e0fffe05 	stb	r3,-8(fp)
 4005a00:	e0bfff05 	stb	r2,-4(fp)
        uint8_t shift = (mod & 0x22);
 4005a04:	e0bffe03 	ldbu	r2,-8(fp)
 4005a08:	1080088c 	andi	r2,r2,34
 4005a0c:	e0bffc05 	stb	r2,-16(fp)

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
 4005a10:	e0bfff03 	ldbu	r2,-4(fp)
 4005a14:	10800130 	cmpltui	r2,r2,4
 4005a18:	1000151e 	bne	r2,zero,4005a70 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
 4005a1c:	e0bfff03 	ldbu	r2,-4(fp)
 4005a20:	108007a8 	cmpgeui	r2,r2,30
 4005a24:	1000121e 	bne	r2,zero,4005a70 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
 4005a28:	e0bffd17 	ldw	r2,-12(fp)
 4005a2c:	10800317 	ldw	r2,12(r2)
 4005a30:	1080008c 	andi	r2,r2,2
 4005a34:	1000021e 	bne	r2,zero,4005a40 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x60>
 4005a38:	e0bffc03 	ldbu	r2,-16(fp)
 4005a3c:	1000061e 	bne	r2,zero,4005a58 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x78>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
 4005a40:	e0bffd17 	ldw	r2,-12(fp)
 4005a44:	10800317 	ldw	r2,12(r2)
 4005a48:	1080008c 	andi	r2,r2,2
        uint8_t shift = (mod & 0x22);

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
 4005a4c:	10000526 	beq	r2,zero,4005a64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
 4005a50:	e0bffc03 	ldbu	r2,-16(fp)
 4005a54:	1000031e 	bne	r2,zero,4005a64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        return (key - 4 + 'A');
 4005a58:	e0bfff03 	ldbu	r2,-4(fp)
 4005a5c:	10800f44 	addi	r2,r2,61
 4005a60:	00008006 	br	4005c64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>

                        // Lower case letters
                else
                        return (key - 4 + 'a');
 4005a64:	e0bfff03 	ldbu	r2,-4(fp)
 4005a68:	10801744 	addi	r2,r2,93
 4005a6c:	00007d06 	br	4005c64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Numbers
        else if (VALUE_WITHIN(key, 0x1e, 0x27)) {
 4005a70:	e0bfff03 	ldbu	r2,-4(fp)
 4005a74:	108007b0 	cmpltui	r2,r2,30
 4005a78:	1000191e 	bne	r2,zero,4005ae0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
 4005a7c:	e0bfff03 	ldbu	r2,-4(fp)
 4005a80:	10800a28 	cmpgeui	r2,r2,40
 4005a84:	1000161e 	bne	r2,zero,4005ae0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
                if (shift)
 4005a88:	e0bffc03 	ldbu	r2,-16(fp)
 4005a8c:	10000c26 	beq	r2,zero,4005ac0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0xe0>
                        return ((uint8_t)pgm_read_byte(&getNumKeys()[key - 0x1e]));
 4005a90:	e0bffd17 	ldw	r2,-12(fp)
 4005a94:	10800017 	ldw	r2,0(r2)
 4005a98:	10800504 	addi	r2,r2,20
 4005a9c:	10800017 	ldw	r2,0(r2)
 4005aa0:	e13ffd17 	ldw	r4,-12(fp)
 4005aa4:	103ee83a 	callr	r2
 4005aa8:	1007883a 	mov	r3,r2
 4005aac:	e0bfff03 	ldbu	r2,-4(fp)
 4005ab0:	10bff884 	addi	r2,r2,-30
 4005ab4:	1885883a 	add	r2,r3,r2
 4005ab8:	10800003 	ldbu	r2,0(r2)
 4005abc:	00006906 	br	4005c64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                else
                        return ((key == UHS_HID_BOOT_KEY_ZERO) ? '0' : key - 0x1e + '1');
 4005ac0:	e0bfff03 	ldbu	r2,-4(fp)
 4005ac4:	108009e0 	cmpeqi	r2,r2,39
 4005ac8:	1000031e 	bne	r2,zero,4005ad8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0xf8>
 4005acc:	e0bfff03 	ldbu	r2,-4(fp)
 4005ad0:	108004c4 	addi	r2,r2,19
 4005ad4:	00006306 	br	4005c64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
 4005ad8:	00800c04 	movi	r2,48
 4005adc:	00006106 	br	4005c64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Keypad Numbers
        else if(VALUE_WITHIN(key, 0x59, 0x61)) {
 4005ae0:	e0bfff03 	ldbu	r2,-4(fp)
 4005ae4:	10801670 	cmpltui	r2,r2,89
 4005ae8:	10000a1e 	bne	r2,zero,4005b14 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
 4005aec:	e0bfff03 	ldbu	r2,-4(fp)
 4005af0:	108018a8 	cmpgeui	r2,r2,98
 4005af4:	1000071e 	bne	r2,zero,4005b14 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
                if(kbdLockingKeys.kbdLeds.bmNumLock == 1)
 4005af8:	e0bffd17 	ldw	r2,-12(fp)
 4005afc:	10800317 	ldw	r2,12(r2)
 4005b00:	1080004c 	andi	r2,r2,1
 4005b04:	10005626 	beq	r2,zero,4005c60 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        return (key - 0x59 + '1');
 4005b08:	e0bfff03 	ldbu	r2,-4(fp)
 4005b0c:	10bff604 	addi	r2,r2,-40
 4005b10:	00005406 	br	4005c64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        } else if(VALUE_WITHIN(key, 0x2d, 0x38))
 4005b14:	e0bfff03 	ldbu	r2,-4(fp)
 4005b18:	10800b70 	cmpltui	r2,r2,45
 4005b1c:	10001d1e 	bne	r2,zero,4005b94 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
 4005b20:	e0bfff03 	ldbu	r2,-4(fp)
 4005b24:	10800e68 	cmpgeui	r2,r2,57
 4005b28:	10001a1e 	bne	r2,zero,4005b94 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
                return ((shift) ? (uint8_t)pgm_read_byte(&getSymKeysUp()[key - 0x2d]) : (uint8_t)pgm_read_byte(&getSymKeysLo()[key - 0x2d]));
 4005b2c:	e0bffc03 	ldbu	r2,-16(fp)
 4005b30:	10000c26 	beq	r2,zero,4005b64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x184>
 4005b34:	e0bffd17 	ldw	r2,-12(fp)
 4005b38:	10800017 	ldw	r2,0(r2)
 4005b3c:	10800604 	addi	r2,r2,24
 4005b40:	10800017 	ldw	r2,0(r2)
 4005b44:	e13ffd17 	ldw	r4,-12(fp)
 4005b48:	103ee83a 	callr	r2
 4005b4c:	1007883a 	mov	r3,r2
 4005b50:	e0bfff03 	ldbu	r2,-4(fp)
 4005b54:	10bff4c4 	addi	r2,r2,-45
 4005b58:	1885883a 	add	r2,r3,r2
 4005b5c:	10800003 	ldbu	r2,0(r2)
 4005b60:	00004006 	br	4005c64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
 4005b64:	e0bffd17 	ldw	r2,-12(fp)
 4005b68:	10800017 	ldw	r2,0(r2)
 4005b6c:	10800704 	addi	r2,r2,28
 4005b70:	10800017 	ldw	r2,0(r2)
 4005b74:	e13ffd17 	ldw	r4,-12(fp)
 4005b78:	103ee83a 	callr	r2
 4005b7c:	1007883a 	mov	r3,r2
 4005b80:	e0bfff03 	ldbu	r2,-4(fp)
 4005b84:	10bff4c4 	addi	r2,r2,-45
 4005b88:	1885883a 	add	r2,r3,r2
 4005b8c:	10800003 	ldbu	r2,0(r2)
 4005b90:	00003406 	br	4005c64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else if(VALUE_WITHIN(key, 0x54, 0x58))
 4005b94:	e0bfff03 	ldbu	r2,-4(fp)
 4005b98:	10801530 	cmpltui	r2,r2,84
 4005b9c:	10000f1e 	bne	r2,zero,4005bdc <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
 4005ba0:	e0bfff03 	ldbu	r2,-4(fp)
 4005ba4:	10801668 	cmpgeui	r2,r2,89
 4005ba8:	10000c1e 	bne	r2,zero,4005bdc <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
                return (uint8_t)pgm_read_byte(&getPadKeys()[key - 0x54]);
 4005bac:	e0bffd17 	ldw	r2,-12(fp)
 4005bb0:	10800017 	ldw	r2,0(r2)
 4005bb4:	10800804 	addi	r2,r2,32
 4005bb8:	10800017 	ldw	r2,0(r2)
 4005bbc:	e13ffd17 	ldw	r4,-12(fp)
 4005bc0:	103ee83a 	callr	r2
 4005bc4:	1007883a 	mov	r3,r2
 4005bc8:	e0bfff03 	ldbu	r2,-4(fp)
 4005bcc:	10bfeb04 	addi	r2,r2,-84
 4005bd0:	1885883a 	add	r2,r3,r2
 4005bd4:	10800003 	ldbu	r2,0(r2)
 4005bd8:	00002206 	br	4005c64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else {
                switch(key) {
 4005bdc:	e0bfff03 	ldbu	r2,-4(fp)
 4005be0:	10c00b20 	cmpeqi	r3,r2,44
 4005be4:	18000a1e 	bne	r3,zero,4005c10 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x230>
 4005be8:	10c00b48 	cmpgei	r3,r2,45
 4005bec:	1800031e 	bne	r3,zero,4005bfc <_ZN20KeyboardReportParser10OemToAsciiEhh+0x21c>
 4005bf0:	10800a20 	cmpeqi	r2,r2,40
 4005bf4:	1000081e 	bne	r2,zero,4005c18 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x238>
 4005bf8:	00001906 	br	4005c60 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
 4005bfc:	10c018a0 	cmpeqi	r3,r2,98
 4005c00:	1800071e 	bne	r3,zero,4005c20 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x240>
 4005c04:	108018e0 	cmpeqi	r2,r2,99
 4005c08:	10000d1e 	bne	r2,zero,4005c40 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x260>
 4005c0c:	00001406 	br	4005c60 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        case UHS_HID_BOOT_KEY_SPACE: return (0x20);
 4005c10:	00800804 	movi	r2,32
 4005c14:	00001306 	br	4005c64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ENTER: return ('\r'); // Carriage return (0x0D)
 4005c18:	00800344 	movi	r2,13
 4005c1c:	00001106 	br	4005c64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ZERO2: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '0': 0);
 4005c20:	e0bffd17 	ldw	r2,-12(fp)
 4005c24:	10800317 	ldw	r2,12(r2)
 4005c28:	1080004c 	andi	r2,r2,1
 4005c2c:	10000226 	beq	r2,zero,4005c38 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x258>
 4005c30:	00800c04 	movi	r2,48
 4005c34:	00000b06 	br	4005c64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
 4005c38:	0005883a 	mov	r2,zero
 4005c3c:	00000906 	br	4005c64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_PERIOD: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '.': 0);
 4005c40:	e0bffd17 	ldw	r2,-12(fp)
 4005c44:	10800317 	ldw	r2,12(r2)
 4005c48:	1080004c 	andi	r2,r2,1
 4005c4c:	10000226 	beq	r2,zero,4005c58 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x278>
 4005c50:	00800b84 	movi	r2,46
 4005c54:	00000306 	br	4005c64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
 4005c58:	0005883a 	mov	r2,zero
 4005c5c:	00000106 	br	4005c64 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                }
        }
        return ( 0);
 4005c60:	0005883a 	mov	r2,zero
}
 4005c64:	e037883a 	mov	sp,fp
 4005c68:	dfc00117 	ldw	ra,4(sp)
 4005c6c:	df000017 	ldw	fp,0(sp)
 4005c70:	dec00204 	addi	sp,sp,8
 4005c74:	f800283a 	ret

04005c78 <_ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO>:
public:
        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual void OnMouseMove(MOUSEINFO *mi __attribute__((unused))) {
 4005c78:	defffd04 	addi	sp,sp,-12
 4005c7c:	df000215 	stw	fp,8(sp)
 4005c80:	df000204 	addi	fp,sp,8
 4005c84:	e13ffe15 	stw	r4,-8(fp)
 4005c88:	e17fff15 	stw	r5,-4(fp)
        };
 4005c8c:	0001883a 	nop
 4005c90:	e037883a 	mov	sp,fp
 4005c94:	df000017 	ldw	fp,0(sp)
 4005c98:	dec00104 	addi	sp,sp,4
 4005c9c:	f800283a 	ret

04005ca0 <_ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO>:

        virtual void OnLeftButtonUp(MOUSEINFO *mi __attribute__((unused))) {
 4005ca0:	defffd04 	addi	sp,sp,-12
 4005ca4:	df000215 	stw	fp,8(sp)
 4005ca8:	df000204 	addi	fp,sp,8
 4005cac:	e13ffe15 	stw	r4,-8(fp)
 4005cb0:	e17fff15 	stw	r5,-4(fp)
        };
 4005cb4:	0001883a 	nop
 4005cb8:	e037883a 	mov	sp,fp
 4005cbc:	df000017 	ldw	fp,0(sp)
 4005cc0:	dec00104 	addi	sp,sp,4
 4005cc4:	f800283a 	ret

04005cc8 <_ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO>:

        virtual void OnLeftButtonDown(MOUSEINFO *mi __attribute__((unused))) {
 4005cc8:	defffd04 	addi	sp,sp,-12
 4005ccc:	df000215 	stw	fp,8(sp)
 4005cd0:	df000204 	addi	fp,sp,8
 4005cd4:	e13ffe15 	stw	r4,-8(fp)
 4005cd8:	e17fff15 	stw	r5,-4(fp)
        };
 4005cdc:	0001883a 	nop
 4005ce0:	e037883a 	mov	sp,fp
 4005ce4:	df000017 	ldw	fp,0(sp)
 4005ce8:	dec00104 	addi	sp,sp,4
 4005cec:	f800283a 	ret

04005cf0 <_ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO>:

        virtual void OnRightButtonUp(MOUSEINFO *mi __attribute__((unused))) {
 4005cf0:	defffd04 	addi	sp,sp,-12
 4005cf4:	df000215 	stw	fp,8(sp)
 4005cf8:	df000204 	addi	fp,sp,8
 4005cfc:	e13ffe15 	stw	r4,-8(fp)
 4005d00:	e17fff15 	stw	r5,-4(fp)
        };
 4005d04:	0001883a 	nop
 4005d08:	e037883a 	mov	sp,fp
 4005d0c:	df000017 	ldw	fp,0(sp)
 4005d10:	dec00104 	addi	sp,sp,4
 4005d14:	f800283a 	ret

04005d18 <_ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO>:

        virtual void OnRightButtonDown(MOUSEINFO *mi __attribute__((unused))) {
 4005d18:	defffd04 	addi	sp,sp,-12
 4005d1c:	df000215 	stw	fp,8(sp)
 4005d20:	df000204 	addi	fp,sp,8
 4005d24:	e13ffe15 	stw	r4,-8(fp)
 4005d28:	e17fff15 	stw	r5,-4(fp)
        };
 4005d2c:	0001883a 	nop
 4005d30:	e037883a 	mov	sp,fp
 4005d34:	df000017 	ldw	fp,0(sp)
 4005d38:	dec00104 	addi	sp,sp,4
 4005d3c:	f800283a 	ret

04005d40 <_ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO>:

        virtual void OnMiddleButtonUp(MOUSEINFO *mi __attribute__((unused))) {
 4005d40:	defffd04 	addi	sp,sp,-12
 4005d44:	df000215 	stw	fp,8(sp)
 4005d48:	df000204 	addi	fp,sp,8
 4005d4c:	e13ffe15 	stw	r4,-8(fp)
 4005d50:	e17fff15 	stw	r5,-4(fp)
        };
 4005d54:	0001883a 	nop
 4005d58:	e037883a 	mov	sp,fp
 4005d5c:	df000017 	ldw	fp,0(sp)
 4005d60:	dec00104 	addi	sp,sp,4
 4005d64:	f800283a 	ret

04005d68 <_ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO>:

        virtual void OnMiddleButtonDown(MOUSEINFO *mi __attribute__((unused))) {
 4005d68:	defffd04 	addi	sp,sp,-12
 4005d6c:	df000215 	stw	fp,8(sp)
 4005d70:	df000204 	addi	fp,sp,8
 4005d74:	e13ffe15 	stw	r4,-8(fp)
 4005d78:	e17fff15 	stw	r5,-4(fp)
        };
 4005d7c:	0001883a 	nop
 4005d80:	e037883a 	mov	sp,fp
 4005d84:	df000017 	ldw	fp,0(sp)
 4005d88:	dec00104 	addi	sp,sp,4
 4005d8c:	f800283a 	ret

04005d90 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh>:

        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual uint8_t HandleLockingKeys(USBHID* hid, uint8_t key) {
 4005d90:	defff704 	addi	sp,sp,-36
 4005d94:	dfc00815 	stw	ra,32(sp)
 4005d98:	df000715 	stw	fp,28(sp)
 4005d9c:	df000704 	addi	fp,sp,28
 4005da0:	e13ffd15 	stw	r4,-12(fp)
 4005da4:	e17ffe15 	stw	r5,-8(fp)
 4005da8:	3005883a 	mov	r2,r6
 4005dac:	e0bfff05 	stb	r2,-4(fp)
                uint8_t old_keys = kbdLockingKeys.bLeds;
 4005db0:	e0bffd17 	ldw	r2,-12(fp)
 4005db4:	10800303 	ldbu	r2,12(r2)
 4005db8:	e0bffc05 	stb	r2,-16(fp)

                switch(key) {
 4005dbc:	e0bfff03 	ldbu	r2,-4(fp)
 4005dc0:	10c011e0 	cmpeqi	r3,r2,71
 4005dc4:	1800271e 	bne	r3,zero,4005e64 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0xd4>
 4005dc8:	10c014e0 	cmpeqi	r3,r2,83
 4005dcc:	1800031e 	bne	r3,zero,4005ddc <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x4c>
 4005dd0:	10800e60 	cmpeqi	r2,r2,57
 4005dd4:	1000111e 	bne	r2,zero,4005e1c <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x8c>
 4005dd8:	00003506 	br	4005eb0 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_NUM_LOCK:
                                kbdLockingKeys.kbdLeds.bmNumLock = ~kbdLockingKeys.kbdLeds.bmNumLock;
 4005ddc:	e0bffd17 	ldw	r2,-12(fp)
 4005de0:	10800317 	ldw	r2,12(r2)
 4005de4:	1080004c 	andi	r2,r2,1
 4005de8:	0084303a 	nor	r2,zero,r2
 4005dec:	1080004c 	andi	r2,r2,1
 4005df0:	1007883a 	mov	r3,r2
 4005df4:	e0bffd17 	ldw	r2,-12(fp)
 4005df8:	1940004c 	andi	r5,r3,1
 4005dfc:	11000303 	ldbu	r4,12(r2)
 4005e00:	00ffff84 	movi	r3,-2
 4005e04:	20c6703a 	and	r3,r4,r3
 4005e08:	1809883a 	mov	r4,r3
 4005e0c:	2807883a 	mov	r3,r5
 4005e10:	20c6b03a 	or	r3,r4,r3
 4005e14:	10c00305 	stb	r3,12(r2)
                                break;
 4005e18:	00002506 	br	4005eb0 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_CAPS_LOCK:
                                kbdLockingKeys.kbdLeds.bmCapsLock = ~kbdLockingKeys.kbdLeds.bmCapsLock;
 4005e1c:	e0bffd17 	ldw	r2,-12(fp)
 4005e20:	10800317 	ldw	r2,12(r2)
 4005e24:	1004d07a 	srli	r2,r2,1
 4005e28:	1080004c 	andi	r2,r2,1
 4005e2c:	0084303a 	nor	r2,zero,r2
 4005e30:	1080004c 	andi	r2,r2,1
 4005e34:	1007883a 	mov	r3,r2
 4005e38:	e0bffd17 	ldw	r2,-12(fp)
 4005e3c:	18c0004c 	andi	r3,r3,1
 4005e40:	18cb883a 	add	r5,r3,r3
 4005e44:	11000303 	ldbu	r4,12(r2)
 4005e48:	00ffff44 	movi	r3,-3
 4005e4c:	20c6703a 	and	r3,r4,r3
 4005e50:	1809883a 	mov	r4,r3
 4005e54:	2807883a 	mov	r3,r5
 4005e58:	20c6b03a 	or	r3,r4,r3
 4005e5c:	10c00305 	stb	r3,12(r2)
                                break;
 4005e60:	00001306 	br	4005eb0 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_SCROLL_LOCK:
                                kbdLockingKeys.kbdLeds.bmScrollLock = ~kbdLockingKeys.kbdLeds.bmScrollLock;
 4005e64:	e0bffd17 	ldw	r2,-12(fp)
 4005e68:	10800317 	ldw	r2,12(r2)
 4005e6c:	1004d0ba 	srli	r2,r2,2
 4005e70:	1080004c 	andi	r2,r2,1
 4005e74:	0084303a 	nor	r2,zero,r2
 4005e78:	1080004c 	andi	r2,r2,1
 4005e7c:	1007883a 	mov	r3,r2
 4005e80:	e0bffd17 	ldw	r2,-12(fp)
 4005e84:	18c0004c 	andi	r3,r3,1
 4005e88:	18c7883a 	add	r3,r3,r3
 4005e8c:	18cb883a 	add	r5,r3,r3
 4005e90:	11000303 	ldbu	r4,12(r2)
 4005e94:	00fffec4 	movi	r3,-5
 4005e98:	20c6703a 	and	r3,r4,r3
 4005e9c:	1809883a 	mov	r4,r3
 4005ea0:	2807883a 	mov	r3,r5
 4005ea4:	20c6b03a 	or	r3,r4,r3
 4005ea8:	10c00305 	stb	r3,12(r2)
                                break;
 4005eac:	0001883a 	nop
                }

                if(old_keys != kbdLockingKeys.bLeds && hid) {
 4005eb0:	e0bffd17 	ldw	r2,-12(fp)
 4005eb4:	10800303 	ldbu	r2,12(r2)
 4005eb8:	10c03fcc 	andi	r3,r2,255
 4005ebc:	e0bffc03 	ldbu	r2,-16(fp)
 4005ec0:	18801026 	beq	r3,r2,4005f04 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
 4005ec4:	e0bffe17 	ldw	r2,-8(fp)
 4005ec8:	10000e26 	beq	r2,zero,4005f04 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
                        uint8_t lockLeds = kbdLockingKeys.bLeds;
 4005ecc:	e0bffd17 	ldw	r2,-12(fp)
 4005ed0:	10800303 	ldbu	r2,12(r2)
 4005ed4:	e0bffc45 	stb	r2,-15(fp)
                        return (hid->SetReport(0, 0/*hid->GetIface()*/, 2, 0, 1, &lockLeds));
 4005ed8:	e0bffc44 	addi	r2,fp,-15
 4005edc:	d8800215 	stw	r2,8(sp)
 4005ee0:	00800044 	movi	r2,1
 4005ee4:	d8800115 	stw	r2,4(sp)
 4005ee8:	d8000015 	stw	zero,0(sp)
 4005eec:	01c00084 	movi	r7,2
 4005ef0:	000d883a 	mov	r6,zero
 4005ef4:	000b883a 	mov	r5,zero
 4005ef8:	e13ffe17 	ldw	r4,-8(fp)
 4005efc:	40065f80 	call	40065f8 <_ZN6USBHID9SetReportEhhhhtPh>
 4005f00:	00000106 	br	4005f08 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x178>
                }

                return 0;
 4005f04:	0005883a 	mov	r2,zero
        };
 4005f08:	e037883a 	mov	sp,fp
 4005f0c:	dfc00117 	ldw	ra,4(sp)
 4005f10:	df000017 	ldw	fp,0(sp)
 4005f14:	dec00204 	addi	sp,sp,8
 4005f18:	f800283a 	ret

04005f1c <_ZN20KeyboardReportParser20OnControlKeysChangedEhh>:

        virtual void OnControlKeysChanged(uint8_t before __attribute__((unused)), uint8_t after __attribute__((unused))) {
 4005f1c:	defffc04 	addi	sp,sp,-16
 4005f20:	df000315 	stw	fp,12(sp)
 4005f24:	df000304 	addi	fp,sp,12
 4005f28:	e13ffd15 	stw	r4,-12(fp)
 4005f2c:	2807883a 	mov	r3,r5
 4005f30:	3005883a 	mov	r2,r6
 4005f34:	e0fffe05 	stb	r3,-8(fp)
 4005f38:	e0bfff05 	stb	r2,-4(fp)
        };
 4005f3c:	0001883a 	nop
 4005f40:	e037883a 	mov	sp,fp
 4005f44:	df000017 	ldw	fp,0(sp)
 4005f48:	dec00104 	addi	sp,sp,4
 4005f4c:	f800283a 	ret

04005f50 <_ZN20KeyboardReportParser9OnKeyDownEhh>:

        virtual void OnKeyDown(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
 4005f50:	defffc04 	addi	sp,sp,-16
 4005f54:	df000315 	stw	fp,12(sp)
 4005f58:	df000304 	addi	fp,sp,12
 4005f5c:	e13ffd15 	stw	r4,-12(fp)
 4005f60:	2807883a 	mov	r3,r5
 4005f64:	3005883a 	mov	r2,r6
 4005f68:	e0fffe05 	stb	r3,-8(fp)
 4005f6c:	e0bfff05 	stb	r2,-4(fp)
        };
 4005f70:	0001883a 	nop
 4005f74:	e037883a 	mov	sp,fp
 4005f78:	df000017 	ldw	fp,0(sp)
 4005f7c:	dec00104 	addi	sp,sp,4
 4005f80:	f800283a 	ret

04005f84 <_ZN20KeyboardReportParser7OnKeyUpEhh>:

        virtual void OnKeyUp(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
 4005f84:	defffc04 	addi	sp,sp,-16
 4005f88:	df000315 	stw	fp,12(sp)
 4005f8c:	df000304 	addi	fp,sp,12
 4005f90:	e13ffd15 	stw	r4,-12(fp)
 4005f94:	2807883a 	mov	r3,r5
 4005f98:	3005883a 	mov	r2,r6
 4005f9c:	e0fffe05 	stb	r3,-8(fp)
 4005fa0:	e0bfff05 	stb	r2,-4(fp)
        };
 4005fa4:	0001883a 	nop
 4005fa8:	e037883a 	mov	sp,fp
 4005fac:	df000017 	ldw	fp,0(sp)
 4005fb0:	dec00104 	addi	sp,sp,4
 4005fb4:	f800283a 	ret

04005fb8 <_ZN20KeyboardReportParser10getNumKeysEv>:

        virtual const uint8_t *getNumKeys() {
 4005fb8:	defffe04 	addi	sp,sp,-8
 4005fbc:	df000115 	stw	fp,4(sp)
 4005fc0:	df000104 	addi	fp,sp,4
 4005fc4:	e13fff15 	stw	r4,-4(fp)
                return numKeys;
 4005fc8:	008100b4 	movhi	r2,1026
 4005fcc:	10b52f84 	addi	r2,r2,-11074
        };
 4005fd0:	e037883a 	mov	sp,fp
 4005fd4:	df000017 	ldw	fp,0(sp)
 4005fd8:	dec00104 	addi	sp,sp,4
 4005fdc:	f800283a 	ret

04005fe0 <_ZN20KeyboardReportParser12getSymKeysUpEv>:

        virtual const uint8_t *getSymKeysUp() {
 4005fe0:	defffe04 	addi	sp,sp,-8
 4005fe4:	df000115 	stw	fp,4(sp)
 4005fe8:	df000104 	addi	fp,sp,4
 4005fec:	e13fff15 	stw	r4,-4(fp)
                return symKeysUp;
 4005ff0:	008100b4 	movhi	r2,1026
 4005ff4:	10b53204 	addi	r2,r2,-11064
        };
 4005ff8:	e037883a 	mov	sp,fp
 4005ffc:	df000017 	ldw	fp,0(sp)
 4006000:	dec00104 	addi	sp,sp,4
 4006004:	f800283a 	ret

04006008 <_ZN20KeyboardReportParser12getSymKeysLoEv>:

        virtual const uint8_t *getSymKeysLo() {
 4006008:	defffe04 	addi	sp,sp,-8
 400600c:	df000115 	stw	fp,4(sp)
 4006010:	df000104 	addi	fp,sp,4
 4006014:	e13fff15 	stw	r4,-4(fp)
                return symKeysLo;
 4006018:	008100b4 	movhi	r2,1026
 400601c:	10b53504 	addi	r2,r2,-11052
        };
 4006020:	e037883a 	mov	sp,fp
 4006024:	df000017 	ldw	fp,0(sp)
 4006028:	dec00104 	addi	sp,sp,4
 400602c:	f800283a 	ret

04006030 <_ZN20KeyboardReportParser10getPadKeysEv>:

        virtual const uint8_t *getPadKeys() {
 4006030:	defffe04 	addi	sp,sp,-8
 4006034:	df000115 	stw	fp,4(sp)
 4006038:	df000104 	addi	fp,sp,4
 400603c:	e13fff15 	stw	r4,-4(fp)
                return padKeys;
 4006040:	d0a1e584 	addi	r2,gp,-30826
        };
 4006044:	e037883a 	mov	sp,fp
 4006048:	df000017 	ldw	fp,0(sp)
 400604c:	dec00104 	addi	sp,sp,4
 4006050:	f800283a 	ret

04006054 <_Z9E_Notifycci>:
// 0x80 is the default (i.e. trace) to turn off set this global to something lower.
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
 4006054:	defffc04 	addi	sp,sp,-16
 4006058:	dfc00315 	stw	ra,12(sp)
 400605c:	df000215 	stw	fp,8(sp)
 4006060:	df000204 	addi	fp,sp,8
 4006064:	2005883a 	mov	r2,r4
 4006068:	e17fff15 	stw	r5,-4(fp)
 400606c:	e0bffe05 	stb	r2,-8(fp)
        if(UsbDEBUGlvl < lvl) return;
 4006070:	d0e1ea17 	ldw	r3,-30808(gp)
 4006074:	e0bfff17 	ldw	r2,-4(fp)
 4006078:	18800416 	blt	r3,r2,400608c <_Z9E_Notifycci+0x38>
        printf("%c", c);
 400607c:	e0bffe07 	ldb	r2,-8(fp)
 4006080:	1009883a 	mov	r4,r2
 4006084:	400baf80 	call	400baf8 <putchar>
 4006088:	00000106 	br	4006090 <_Z9E_Notifycci+0x3c>
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
 400608c:	0001883a 	nop
        printf("%c", c);
}
 4006090:	e037883a 	mov	sp,fp
 4006094:	dfc00117 	ldw	ra,4(sp)
 4006098:	df000017 	ldw	fp,0(sp)
 400609c:	dec00204 	addi	sp,sp,8
 40060a0:	f800283a 	ret

040060a4 <_Z8E_NotifyPKci>:

void E_Notify(char const * msg, int lvl) {
 40060a4:	defffb04 	addi	sp,sp,-20
 40060a8:	dfc00415 	stw	ra,16(sp)
 40060ac:	df000315 	stw	fp,12(sp)
 40060b0:	df000304 	addi	fp,sp,12
 40060b4:	e13ffe15 	stw	r4,-8(fp)
 40060b8:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
 40060bc:	d0e1ea17 	ldw	r3,-30808(gp)
 40060c0:	e0bfff17 	ldw	r2,-4(fp)
 40060c4:	18801016 	blt	r3,r2,4006108 <_Z8E_NotifyPKci+0x64>
        if(!msg) return;
 40060c8:	e0bffe17 	ldw	r2,-8(fp)
 40060cc:	10001026 	beq	r2,zero,4006110 <_Z8E_NotifyPKci+0x6c>
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
 40060d0:	e0bffe17 	ldw	r2,-8(fp)
 40060d4:	10c00044 	addi	r3,r2,1
 40060d8:	e0fffe15 	stw	r3,-8(fp)
 40060dc:	10800003 	ldbu	r2,0(r2)
 40060e0:	e0bffd05 	stb	r2,-12(fp)
 40060e4:	e0bffd07 	ldb	r2,-12(fp)
 40060e8:	1004c03a 	cmpne	r2,r2,zero
 40060ec:	10803fcc 	andi	r2,r2,255
 40060f0:	10000826 	beq	r2,zero,4006114 <_Z8E_NotifyPKci+0x70>
 40060f4:	e0bffd07 	ldb	r2,-12(fp)
 40060f8:	e17fff17 	ldw	r5,-4(fp)
 40060fc:	1009883a 	mov	r4,r2
 4006100:	40060540 	call	4006054 <_Z9E_Notifycci>
 4006104:	003ff206 	br	40060d0 <__alt_data_end+0xfc0060d0>
        if(UsbDEBUGlvl < lvl) return;
        printf("%c", c);
}

void E_Notify(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
 4006108:	0001883a 	nop
 400610c:	00000106 	br	4006114 <_Z8E_NotifyPKci+0x70>
        if(!msg) return;
 4006110:	0001883a 	nop
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}
 4006114:	e037883a 	mov	sp,fp
 4006118:	dfc00117 	ldw	ra,4(sp)
 400611c:	df000017 	ldw	fp,0(sp)
 4006120:	dec00204 	addi	sp,sp,8
 4006124:	f800283a 	ret

04006128 <_Z11E_NotifyStrPKci>:

void E_NotifyStr(char const * msg, int lvl) {
 4006128:	defffb04 	addi	sp,sp,-20
 400612c:	dfc00415 	stw	ra,16(sp)
 4006130:	df000315 	stw	fp,12(sp)
 4006134:	df000304 	addi	fp,sp,12
 4006138:	e13ffe15 	stw	r4,-8(fp)
 400613c:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
 4006140:	d0e1ea17 	ldw	r3,-30808(gp)
 4006144:	e0bfff17 	ldw	r2,-4(fp)
 4006148:	18801016 	blt	r3,r2,400618c <_Z11E_NotifyStrPKci+0x64>
        if(!msg) return;
 400614c:	e0bffe17 	ldw	r2,-8(fp)
 4006150:	10001026 	beq	r2,zero,4006194 <_Z11E_NotifyStrPKci+0x6c>
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
 4006154:	e0bffe17 	ldw	r2,-8(fp)
 4006158:	10c00044 	addi	r3,r2,1
 400615c:	e0fffe15 	stw	r3,-8(fp)
 4006160:	10800003 	ldbu	r2,0(r2)
 4006164:	e0bffd05 	stb	r2,-12(fp)
 4006168:	e0bffd07 	ldb	r2,-12(fp)
 400616c:	1004c03a 	cmpne	r2,r2,zero
 4006170:	10803fcc 	andi	r2,r2,255
 4006174:	10000826 	beq	r2,zero,4006198 <_Z11E_NotifyStrPKci+0x70>
 4006178:	e0bffd07 	ldb	r2,-12(fp)
 400617c:	e17fff17 	ldw	r5,-4(fp)
 4006180:	1009883a 	mov	r4,r2
 4006184:	40060540 	call	4006054 <_Z9E_Notifycci>
 4006188:	003ff206 	br	4006154 <__alt_data_end+0xfc006154>

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}

void E_NotifyStr(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
 400618c:	0001883a 	nop
 4006190:	00000106 	br	4006198 <_Z11E_NotifyStrPKci+0x70>
        if(!msg) return;
 4006194:	0001883a 	nop
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
}
 4006198:	e037883a 	mov	sp,fp
 400619c:	dfc00117 	ldw	ra,4(sp)
 40061a0:	df000017 	ldw	fp,0(sp)
 40061a4:	dec00204 	addi	sp,sp,8
 40061a8:	f800283a 	ret

040061ac <_Z8E_Notifyhi>:

void E_Notify(uint8_t b, int lvl) {
 40061ac:	defffd04 	addi	sp,sp,-12
 40061b0:	df000215 	stw	fp,8(sp)
 40061b4:	df000204 	addi	fp,sp,8
 40061b8:	2005883a 	mov	r2,r4
 40061bc:	e17fff15 	stw	r5,-4(fp)
 40061c0:	e0bffe05 	stb	r2,-8(fp)
        USB_HOST_SERIAL.print(b);
#else
        //USB_HOST_SERIAL.print(b, DEC);
#endif
        //USB_HOST_SERIAL.flush();
}
 40061c4:	e037883a 	mov	sp,fp
 40061c8:	df000017 	ldw	fp,0(sp)
 40061cc:	dec00104 	addi	sp,sp,4
 40061d0:	f800283a 	ret

040061d4 <_Z8E_Notifydi>:

void E_Notify(double d, int lvl) {
 40061d4:	defffc04 	addi	sp,sp,-16
 40061d8:	df000315 	stw	fp,12(sp)
 40061dc:	df000304 	addi	fp,sp,12
 40061e0:	e13ffd15 	stw	r4,-12(fp)
 40061e4:	e17ffe15 	stw	r5,-8(fp)
 40061e8:	e1bfff15 	stw	r6,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
        //USB_HOST_SERIAL.print(d);
        //USB_HOST_SERIAL.flush();
}
 40061ec:	e037883a 	mov	sp,fp
 40061f0:	df000017 	ldw	fp,0(sp)
 40061f4:	dec00104 	addi	sp,sp,4
 40061f8:	f800283a 	ret

040061fc <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "../include/Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 40061fc:	defffc04 	addi	sp,sp,-16
 4006200:	df000315 	stw	fp,12(sp)
 4006204:	df000304 	addi	fp,sp,12
 4006208:	e13ffd15 	stw	r4,-12(fp)
 400620c:	e17ffe15 	stw	r5,-8(fp)
 4006210:	e1bfff15 	stw	r6,-4(fp)
        if(!pBuf) {
 4006214:	e0bffd17 	ldw	r2,-12(fp)
 4006218:	10800017 	ldw	r2,0(r2)
 400621c:	1000021e 	bne	r2,zero,4006228 <_ZN20MultiByteValueParser5ParseEPPhPt+0x2c>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 4006220:	0005883a 	mov	r2,zero
 4006224:	00003306 	br	40062f4 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 4006228:	e0bffd17 	ldw	r2,-12(fp)
 400622c:	10800103 	ldbu	r2,4(r2)
 4006230:	10803fcc 	andi	r2,r2,255
 4006234:	10002426 	beq	r2,zero,40062c8 <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
 4006238:	e0bfff17 	ldw	r2,-4(fp)
 400623c:	1080000b 	ldhu	r2,0(r2)
 4006240:	10bfffcc 	andi	r2,r2,65535
 4006244:	10002026 	beq	r2,zero,40062c8 <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
                pBuf[valueSize - countDown] = (**pp);
 4006248:	e0bffd17 	ldw	r2,-12(fp)
 400624c:	10800017 	ldw	r2,0(r2)
 4006250:	e0fffd17 	ldw	r3,-12(fp)
 4006254:	18c00143 	ldbu	r3,5(r3)
 4006258:	19003fcc 	andi	r4,r3,255
 400625c:	e0fffd17 	ldw	r3,-12(fp)
 4006260:	18c00103 	ldbu	r3,4(r3)
 4006264:	18c03fcc 	andi	r3,r3,255
 4006268:	20c7c83a 	sub	r3,r4,r3
 400626c:	10c5883a 	add	r2,r2,r3
 4006270:	e0fffe17 	ldw	r3,-8(fp)
 4006274:	18c00017 	ldw	r3,0(r3)
 4006278:	18c00003 	ldbu	r3,0(r3)
 400627c:	10c00005 	stb	r3,0(r2)
bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
        if(!pBuf) {
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 4006280:	e0bffd17 	ldw	r2,-12(fp)
 4006284:	10800103 	ldbu	r2,4(r2)
 4006288:	10bfffc4 	addi	r2,r2,-1
 400628c:	1007883a 	mov	r3,r2
 4006290:	e0bffd17 	ldw	r2,-12(fp)
 4006294:	10c00105 	stb	r3,4(r2)
 4006298:	e0bfff17 	ldw	r2,-4(fp)
 400629c:	1080000b 	ldhu	r2,0(r2)
 40062a0:	10bfffc4 	addi	r2,r2,-1
 40062a4:	1007883a 	mov	r3,r2
 40062a8:	e0bfff17 	ldw	r2,-4(fp)
 40062ac:	10c0000d 	sth	r3,0(r2)
 40062b0:	e0bffe17 	ldw	r2,-8(fp)
 40062b4:	10800017 	ldw	r2,0(r2)
 40062b8:	10c00044 	addi	r3,r2,1
 40062bc:	e0bffe17 	ldw	r2,-8(fp)
 40062c0:	10c00015 	stw	r3,0(r2)
 40062c4:	003fd806 	br	4006228 <__alt_data_end+0xfc006228>
                pBuf[valueSize - countDown] = (**pp);

        if(countDown)
 40062c8:	e0bffd17 	ldw	r2,-12(fp)
 40062cc:	10800103 	ldbu	r2,4(r2)
 40062d0:	10803fcc 	andi	r2,r2,255
 40062d4:	10000226 	beq	r2,zero,40062e0 <_ZN20MultiByteValueParser5ParseEPPhPt+0xe4>
                return false;
 40062d8:	0005883a 	mov	r2,zero
 40062dc:	00000506 	br	40062f4 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>

        countDown = valueSize;
 40062e0:	e0bffd17 	ldw	r2,-12(fp)
 40062e4:	10c00143 	ldbu	r3,5(r2)
 40062e8:	e0bffd17 	ldw	r2,-12(fp)
 40062ec:	10c00105 	stb	r3,4(r2)
        return true;
 40062f0:	00800044 	movi	r2,1
}
 40062f4:	e037883a 	mov	sp,fp
 40062f8:	df000017 	ldw	fp,0(sp)
 40062fc:	dec00104 	addi	sp,sp,4
 4006300:	f800283a 	ret

04006304 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_>:

bool PTPListParser::Parse(uint8_t **pp, uint16_t *pcntdn, PTP_ARRAY_EL_FUNC pf, const void *me) {
 4006304:	defffa04 	addi	sp,sp,-24
 4006308:	dfc00515 	stw	ra,20(sp)
 400630c:	df000415 	stw	fp,16(sp)
 4006310:	df000404 	addi	fp,sp,16
 4006314:	e13ffc15 	stw	r4,-16(fp)
 4006318:	e17ffd15 	stw	r5,-12(fp)
 400631c:	e1bffe15 	stw	r6,-8(fp)
 4006320:	e1ffff15 	stw	r7,-4(fp)
        switch(nStage) {
 4006324:	e0bffc17 	ldw	r2,-16(fp)
 4006328:	10800003 	ldbu	r2,0(r2)
 400632c:	10803fcc 	andi	r2,r2,255
 4006330:	10c00060 	cmpeqi	r3,r2,1
 4006334:	1800181e 	bne	r3,zero,4006398 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x94>
 4006338:	10c00088 	cmpgei	r3,r2,2
 400633c:	1800021e 	bne	r3,zero,4006348 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x44>
 4006340:	10000626 	beq	r2,zero,400635c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x58>
 4006344:	00007e06 	br	4006540 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
 4006348:	10c000a0 	cmpeqi	r3,r2,2
 400634c:	18004a1e 	bne	r3,zero,4006478 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x174>
 4006350:	108000e0 	cmpeqi	r2,r2,3
 4006354:	1000571e 	bne	r2,zero,40064b4 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1b0>
 4006358:	00007906 	br	4006540 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
                case 0:
                        pBuf->valueSize = lenSize;
 400635c:	e0bffc17 	ldw	r2,-16(fp)
 4006360:	10800417 	ldw	r2,16(r2)
 4006364:	e0fffc17 	ldw	r3,-16(fp)
 4006368:	18c00303 	ldbu	r3,12(r3)
 400636c:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
 4006370:	e0bffc17 	ldw	r2,-16(fp)
 4006374:	10c00504 	addi	r3,r2,20
 4006378:	e0bffc17 	ldw	r2,-16(fp)
 400637c:	10800417 	ldw	r2,16(r2)
 4006380:	100b883a 	mov	r5,r2
 4006384:	1809883a 	mov	r4,r3
 4006388:	40047d00 	call	40047d0 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 1;
 400638c:	e0bffc17 	ldw	r2,-16(fp)
 4006390:	00c00044 	movi	r3,1
 4006394:	10c00005 	stb	r3,0(r2)

                case 1:
                        if(!theParser.Parse(pp, pcntdn))
 4006398:	e0bffc17 	ldw	r2,-16(fp)
 400639c:	10800504 	addi	r2,r2,20
 40063a0:	e1bffe17 	ldw	r6,-8(fp)
 40063a4:	e17ffd17 	ldw	r5,-12(fp)
 40063a8:	1009883a 	mov	r4,r2
 40063ac:	40061fc0 	call	40061fc <_ZN20MultiByteValueParser5ParseEPPhPt>
 40063b0:	1080005c 	xori	r2,r2,1
 40063b4:	10803fcc 	andi	r2,r2,255
 40063b8:	10000226 	beq	r2,zero,40063c4 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0xc0>
                                return false;
 40063bc:	0005883a 	mov	r2,zero
 40063c0:	00006006 	br	4006544 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                        arLen = 0;
 40063c4:	e0bffc17 	ldw	r2,-16(fp)
 40063c8:	10000115 	stw	zero,4(r2)
                        arLen = (pBuf->valueSize >= 4) ? *((uint32_t*)pBuf->pValue) : (uint32_t)(*((uint16_t*)pBuf->pValue));
 40063cc:	e0bffc17 	ldw	r2,-16(fp)
 40063d0:	10800417 	ldw	r2,16(r2)
 40063d4:	10800003 	ldbu	r2,0(r2)
 40063d8:	10803fcc 	andi	r2,r2,255
 40063dc:	10800130 	cmpltui	r2,r2,4
 40063e0:	10000e1e 	bne	r2,zero,400641c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x118>
 40063e4:	e0bffc17 	ldw	r2,-16(fp)
 40063e8:	10800417 	ldw	r2,16(r2)
 40063ec:	10c00043 	ldbu	r3,1(r2)
 40063f0:	11000083 	ldbu	r4,2(r2)
 40063f4:	2008923a 	slli	r4,r4,8
 40063f8:	20c6b03a 	or	r3,r4,r3
 40063fc:	110000c3 	ldbu	r4,3(r2)
 4006400:	2008943a 	slli	r4,r4,16
 4006404:	20c6b03a 	or	r3,r4,r3
 4006408:	10800103 	ldbu	r2,4(r2)
 400640c:	1004963a 	slli	r2,r2,24
 4006410:	10c4b03a 	or	r2,r2,r3
 4006414:	10800017 	ldw	r2,0(r2)
 4006418:	00000e06 	br	4006454 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x150>
 400641c:	e0bffc17 	ldw	r2,-16(fp)
 4006420:	10800417 	ldw	r2,16(r2)
 4006424:	10c00043 	ldbu	r3,1(r2)
 4006428:	11000083 	ldbu	r4,2(r2)
 400642c:	2008923a 	slli	r4,r4,8
 4006430:	20c6b03a 	or	r3,r4,r3
 4006434:	110000c3 	ldbu	r4,3(r2)
 4006438:	2008943a 	slli	r4,r4,16
 400643c:	20c6b03a 	or	r3,r4,r3
 4006440:	10800103 	ldbu	r2,4(r2)
 4006444:	1004963a 	slli	r2,r2,24
 4006448:	10c4b03a 	or	r2,r2,r3
 400644c:	1080000b 	ldhu	r2,0(r2)
 4006450:	10bfffcc 	andi	r2,r2,65535
 4006454:	e0fffc17 	ldw	r3,-16(fp)
 4006458:	18800115 	stw	r2,4(r3)
                        arLenCntdn = arLen;
 400645c:	e0bffc17 	ldw	r2,-16(fp)
 4006460:	10c00117 	ldw	r3,4(r2)
 4006464:	e0bffc17 	ldw	r2,-16(fp)
 4006468:	10c00215 	stw	r3,8(r2)
                        nStage = 2;
 400646c:	e0bffc17 	ldw	r2,-16(fp)
 4006470:	00c00084 	movi	r3,2
 4006474:	10c00005 	stb	r3,0(r2)

                case 2:
                        pBuf->valueSize = valSize;
 4006478:	e0bffc17 	ldw	r2,-16(fp)
 400647c:	10800417 	ldw	r2,16(r2)
 4006480:	e0fffc17 	ldw	r3,-16(fp)
 4006484:	18c00343 	ldbu	r3,13(r3)
 4006488:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
 400648c:	e0bffc17 	ldw	r2,-16(fp)
 4006490:	10c00504 	addi	r3,r2,20
 4006494:	e0bffc17 	ldw	r2,-16(fp)
 4006498:	10800417 	ldw	r2,16(r2)
 400649c:	100b883a 	mov	r5,r2
 40064a0:	1809883a 	mov	r4,r3
 40064a4:	40047d00 	call	40047d0 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 3;
 40064a8:	e0bffc17 	ldw	r2,-16(fp)
 40064ac:	00c000c4 	movi	r3,3
 40064b0:	10c00005 	stb	r3,0(r2)

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
 40064b4:	e0bffc17 	ldw	r2,-16(fp)
 40064b8:	10800217 	ldw	r2,8(r2)
 40064bc:	10001e26 	beq	r2,zero,4006538 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x234>
                                if(!theParser.Parse(pp, pcntdn))
 40064c0:	e0bffc17 	ldw	r2,-16(fp)
 40064c4:	10800504 	addi	r2,r2,20
 40064c8:	e1bffe17 	ldw	r6,-8(fp)
 40064cc:	e17ffd17 	ldw	r5,-12(fp)
 40064d0:	1009883a 	mov	r4,r2
 40064d4:	40061fc0 	call	40061fc <_ZN20MultiByteValueParser5ParseEPPhPt>
 40064d8:	1080005c 	xori	r2,r2,1
 40064dc:	10803fcc 	andi	r2,r2,255
 40064e0:	10000226 	beq	r2,zero,40064ec <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1e8>
                                        return false;
 40064e4:	0005883a 	mov	r2,zero
 40064e8:	00001606 	br	4006544 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                                if(pf)
 40064ec:	e0bfff17 	ldw	r2,-4(fp)
 40064f0:	10000b26 	beq	r2,zero,4006520 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x21c>
                                        pf(pBuf, (arLen - arLenCntdn), me);
 40064f4:	e0bffc17 	ldw	r2,-16(fp)
 40064f8:	11000417 	ldw	r4,16(r2)
 40064fc:	e0bffc17 	ldw	r2,-16(fp)
 4006500:	10c00117 	ldw	r3,4(r2)
 4006504:	e0bffc17 	ldw	r2,-16(fp)
 4006508:	10800217 	ldw	r2,8(r2)
 400650c:	1887c83a 	sub	r3,r3,r2
 4006510:	e0bfff17 	ldw	r2,-4(fp)
 4006514:	e1800217 	ldw	r6,8(fp)
 4006518:	180b883a 	mov	r5,r3
 400651c:	103ee83a 	callr	r2
                        pBuf->valueSize = valSize;
                        theParser.Initialize(pBuf);
                        nStage = 3;

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
 4006520:	e0bffc17 	ldw	r2,-16(fp)
 4006524:	10800217 	ldw	r2,8(r2)
 4006528:	10ffffc4 	addi	r3,r2,-1
 400652c:	e0bffc17 	ldw	r2,-16(fp)
 4006530:	10c00215 	stw	r3,8(r2)
 4006534:	003fdf06 	br	40064b4 <__alt_data_end+0xfc0064b4>

                                if(pf)
                                        pf(pBuf, (arLen - arLenCntdn), me);
                        }

                        nStage = 0;
 4006538:	e0bffc17 	ldw	r2,-16(fp)
 400653c:	10000005 	stb	zero,0(r2)
        }
        return true;
 4006540:	00800044 	movi	r2,1
}
 4006544:	e037883a 	mov	sp,fp
 4006548:	dfc00117 	ldw	ra,4(sp)
 400654c:	df000017 	ldw	fp,0(sp)
 4006550:	dec00204 	addi	sp,sp,8
 4006554:	f800283a 	ret

04006558 <_ZN6USBHID14GetReportDescrEtP13USBReadParser>:

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
}
 */
uint8_t USBHID::GetReportDescr(uint16_t wIndex, USBReadParser *parser) {
 4006558:	deffe204 	addi	sp,sp,-120
 400655c:	dfc01d15 	stw	ra,116(sp)
 4006560:	df001c15 	stw	fp,112(sp)
 4006564:	df001c04 	addi	fp,sp,112
 4006568:	e13ffd15 	stw	r4,-12(fp)
 400656c:	2805883a 	mov	r2,r5
 4006570:	e1bfff15 	stw	r6,-4(fp)
 4006574:	e0bffe0d 	sth	r2,-8(fp)
        const uint8_t constBufLen = 64;
 4006578:	00801004 	movi	r2,64
 400657c:	e0bfec05 	stb	r2,-80(fp)
        uint8_t buf[constBufLen];

        uint8_t rcode = pUsb->ctrlReq(bAddress, 0x00, bmREQ_HID_REPORT, USB_REQUEST_GET_DESCRIPTOR, 0x00,
 4006580:	e0bffd17 	ldw	r2,-12(fp)
 4006584:	11000217 	ldw	r4,8(r2)
 4006588:	e0bffd17 	ldw	r2,-12(fp)
 400658c:	10800303 	ldbu	r2,12(r2)
 4006590:	11403fcc 	andi	r5,r2,255
 4006594:	e0bffe0b 	ldhu	r2,-8(fp)
                HID_DESCRIPTOR_REPORT, wIndex, 128, constBufLen, buf, (USBReadParser*)parser);
 4006598:	e0ffff17 	ldw	r3,-4(fp)
 400659c:	d8c00715 	stw	r3,28(sp)
 40065a0:	e0ffec84 	addi	r3,fp,-78
 40065a4:	d8c00615 	stw	r3,24(sp)
 40065a8:	00c01004 	movi	r3,64
 40065ac:	d8c00515 	stw	r3,20(sp)
 40065b0:	00c02004 	movi	r3,128
 40065b4:	d8c00415 	stw	r3,16(sp)
 40065b8:	d8800315 	stw	r2,12(sp)
 40065bc:	00800884 	movi	r2,34
 40065c0:	d8800215 	stw	r2,8(sp)
 40065c4:	d8000115 	stw	zero,4(sp)
 40065c8:	00800184 	movi	r2,6
 40065cc:	d8800015 	stw	r2,0(sp)
 40065d0:	01c02044 	movi	r7,129
 40065d4:	000d883a 	mov	r6,zero
 40065d8:	4000af00 	call	4000af0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 40065dc:	e0bfec45 	stb	r2,-79(fp)

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
 40065e0:	e0bfec43 	ldbu	r2,-79(fp)
}
 40065e4:	e037883a 	mov	sp,fp
 40065e8:	dfc00117 	ldw	ra,4(sp)
 40065ec:	df000017 	ldw	fp,0(sp)
 40065f0:	dec00204 	addi	sp,sp,8
 40065f4:	f800283a 	ret

040065f8 <_ZN6USBHID9SetReportEhhhhtPh>:
//uint8_t USBHID::getHidDescr( uint8_t ep, uint16_t nbytes, uint8_t* dataptr )
//{
//    return( pUsb->ctrlReq( bAddress, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, HID_DESCRIPTOR_HID, 0x0000, nbytes, dataptr ));
//}

uint8_t USBHID::SetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
 40065f8:	defff004 	addi	sp,sp,-64
 40065fc:	dfc00f15 	stw	ra,60(sp)
 4006600:	df000e15 	stw	fp,56(sp)
 4006604:	df000e04 	addi	fp,sp,56
 4006608:	e13ffa15 	stw	r4,-24(fp)
 400660c:	2811883a 	mov	r8,r5
 4006610:	300b883a 	mov	r5,r6
 4006614:	3809883a 	mov	r4,r7
 4006618:	e0c00217 	ldw	r3,8(fp)
 400661c:	e0800317 	ldw	r2,12(fp)
 4006620:	e23ffb05 	stb	r8,-20(fp)
 4006624:	e17ffc05 	stb	r5,-16(fp)
 4006628:	e13ffd05 	stb	r4,-12(fp)
 400662c:	e0fffe05 	stb	r3,-8(fp)
 4006630:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
 4006634:	e0bffa17 	ldw	r2,-24(fp)
 4006638:	12000217 	ldw	r8,8(r2)
 400663c:	e0bffa17 	ldw	r2,-24(fp)
 4006640:	10800303 	ldbu	r2,12(r2)
 4006644:	12403fcc 	andi	r9,r2,255
 4006648:	e2bffb03 	ldbu	r10,-20(fp)
 400664c:	e0bffe03 	ldbu	r2,-8(fp)
 4006650:	e0fffd03 	ldbu	r3,-12(fp)
 4006654:	e13ffc03 	ldbu	r4,-16(fp)
 4006658:	e17fff0b 	ldhu	r5,-4(fp)
 400665c:	e1bfff0b 	ldhu	r6,-4(fp)
 4006660:	d8000715 	stw	zero,28(sp)
 4006664:	e1c00417 	ldw	r7,16(fp)
 4006668:	d9c00615 	stw	r7,24(sp)
 400666c:	d9800515 	stw	r6,20(sp)
 4006670:	d9400415 	stw	r5,16(sp)
 4006674:	d9000315 	stw	r4,12(sp)
 4006678:	d8c00215 	stw	r3,8(sp)
 400667c:	d8800115 	stw	r2,4(sp)
 4006680:	00800244 	movi	r2,9
 4006684:	d8800015 	stw	r2,0(sp)
 4006688:	01c00844 	movi	r7,33
 400668c:	500d883a 	mov	r6,r10
 4006690:	480b883a 	mov	r5,r9
 4006694:	4009883a 	mov	r4,r8
 4006698:	4000af00 	call	4000af0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 400669c:	e037883a 	mov	sp,fp
 40066a0:	dfc00117 	ldw	ra,4(sp)
 40066a4:	df000017 	ldw	fp,0(sp)
 40066a8:	dec00204 	addi	sp,sp,8
 40066ac:	f800283a 	ret

040066b0 <_ZN6USBHID9GetReportEhhhhtPh>:

uint8_t USBHID::GetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
 40066b0:	defff004 	addi	sp,sp,-64
 40066b4:	dfc00f15 	stw	ra,60(sp)
 40066b8:	df000e15 	stw	fp,56(sp)
 40066bc:	df000e04 	addi	fp,sp,56
 40066c0:	e13ffa15 	stw	r4,-24(fp)
 40066c4:	2811883a 	mov	r8,r5
 40066c8:	300b883a 	mov	r5,r6
 40066cc:	3809883a 	mov	r4,r7
 40066d0:	e0c00217 	ldw	r3,8(fp)
 40066d4:	e0800317 	ldw	r2,12(fp)
 40066d8:	e23ffb05 	stb	r8,-20(fp)
 40066dc:	e17ffc05 	stb	r5,-16(fp)
 40066e0:	e13ffd05 	stb	r4,-12(fp)
 40066e4:	e0fffe05 	stb	r3,-8(fp)
 40066e8:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_IN, HID_REQUEST_GET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
 40066ec:	e0bffa17 	ldw	r2,-24(fp)
 40066f0:	12000217 	ldw	r8,8(r2)
 40066f4:	e0bffa17 	ldw	r2,-24(fp)
 40066f8:	10800303 	ldbu	r2,12(r2)
 40066fc:	12403fcc 	andi	r9,r2,255
 4006700:	e2bffb03 	ldbu	r10,-20(fp)
 4006704:	e0bffe03 	ldbu	r2,-8(fp)
 4006708:	e0fffd03 	ldbu	r3,-12(fp)
 400670c:	e13ffc03 	ldbu	r4,-16(fp)
 4006710:	e17fff0b 	ldhu	r5,-4(fp)
 4006714:	e1bfff0b 	ldhu	r6,-4(fp)
 4006718:	d8000715 	stw	zero,28(sp)
 400671c:	e1c00417 	ldw	r7,16(fp)
 4006720:	d9c00615 	stw	r7,24(sp)
 4006724:	d9800515 	stw	r6,20(sp)
 4006728:	d9400415 	stw	r5,16(sp)
 400672c:	d9000315 	stw	r4,12(sp)
 4006730:	d8c00215 	stw	r3,8(sp)
 4006734:	d8800115 	stw	r2,4(sp)
 4006738:	00800044 	movi	r2,1
 400673c:	d8800015 	stw	r2,0(sp)
 4006740:	01c02844 	movi	r7,161
 4006744:	500d883a 	mov	r6,r10
 4006748:	480b883a 	mov	r5,r9
 400674c:	4009883a 	mov	r4,r8
 4006750:	4000af00 	call	4000af0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4006754:	e037883a 	mov	sp,fp
 4006758:	dfc00117 	ldw	ra,4(sp)
 400675c:	df000017 	ldw	fp,0(sp)
 4006760:	dec00204 	addi	sp,sp,8
 4006764:	f800283a 	ret

04006768 <_ZN6USBHID7GetIdleEhhPh>:

uint8_t USBHID::GetIdle(uint8_t iface, uint8_t reportID, uint8_t* dataptr) {
 4006768:	defff204 	addi	sp,sp,-56
 400676c:	dfc00d15 	stw	ra,52(sp)
 4006770:	df000c15 	stw	fp,48(sp)
 4006774:	df000c04 	addi	fp,sp,48
 4006778:	e13ffc15 	stw	r4,-16(fp)
 400677c:	2807883a 	mov	r3,r5
 4006780:	3005883a 	mov	r2,r6
 4006784:	e1ffff15 	stw	r7,-4(fp)
 4006788:	e0fffd05 	stb	r3,-12(fp)
 400678c:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_IDLE, reportID, 0, iface, 0x0001, 0x0001, dataptr, NULL));
 4006790:	e0bffc17 	ldw	r2,-16(fp)
 4006794:	12000217 	ldw	r8,8(r2)
 4006798:	e0bffc17 	ldw	r2,-16(fp)
 400679c:	10800303 	ldbu	r2,12(r2)
 40067a0:	11403fcc 	andi	r5,r2,255
 40067a4:	e0bffe03 	ldbu	r2,-8(fp)
 40067a8:	e0fffd03 	ldbu	r3,-12(fp)
 40067ac:	d8000715 	stw	zero,28(sp)
 40067b0:	e13fff17 	ldw	r4,-4(fp)
 40067b4:	d9000615 	stw	r4,24(sp)
 40067b8:	01000044 	movi	r4,1
 40067bc:	d9000515 	stw	r4,20(sp)
 40067c0:	01000044 	movi	r4,1
 40067c4:	d9000415 	stw	r4,16(sp)
 40067c8:	d8c00315 	stw	r3,12(sp)
 40067cc:	d8000215 	stw	zero,8(sp)
 40067d0:	d8800115 	stw	r2,4(sp)
 40067d4:	00800084 	movi	r2,2
 40067d8:	d8800015 	stw	r2,0(sp)
 40067dc:	01c02844 	movi	r7,161
 40067e0:	000d883a 	mov	r6,zero
 40067e4:	4009883a 	mov	r4,r8
 40067e8:	4000af00 	call	4000af0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 40067ec:	e037883a 	mov	sp,fp
 40067f0:	dfc00117 	ldw	ra,4(sp)
 40067f4:	df000017 	ldw	fp,0(sp)
 40067f8:	dec00204 	addi	sp,sp,8
 40067fc:	f800283a 	ret

04006800 <_ZN6USBHID7SetIdleEhhh>:

uint8_t USBHID::SetIdle(uint8_t iface, uint8_t reportID, uint8_t duration) {
 4006800:	defff204 	addi	sp,sp,-56
 4006804:	dfc00d15 	stw	ra,52(sp)
 4006808:	df000c15 	stw	fp,48(sp)
 400680c:	df000c04 	addi	fp,sp,48
 4006810:	e13ffc15 	stw	r4,-16(fp)
 4006814:	2809883a 	mov	r4,r5
 4006818:	3007883a 	mov	r3,r6
 400681c:	3805883a 	mov	r2,r7
 4006820:	e13ffd05 	stb	r4,-12(fp)
 4006824:	e0fffe05 	stb	r3,-8(fp)
 4006828:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_IDLE, reportID, duration, iface, 0x0000, 0x0000, NULL, NULL));
 400682c:	e0bffc17 	ldw	r2,-16(fp)
 4006830:	12000217 	ldw	r8,8(r2)
 4006834:	e0bffc17 	ldw	r2,-16(fp)
 4006838:	10800303 	ldbu	r2,12(r2)
 400683c:	11403fcc 	andi	r5,r2,255
 4006840:	e0bffe03 	ldbu	r2,-8(fp)
 4006844:	e0ffff03 	ldbu	r3,-4(fp)
 4006848:	e13ffd03 	ldbu	r4,-12(fp)
 400684c:	d8000715 	stw	zero,28(sp)
 4006850:	d8000615 	stw	zero,24(sp)
 4006854:	d8000515 	stw	zero,20(sp)
 4006858:	d8000415 	stw	zero,16(sp)
 400685c:	d9000315 	stw	r4,12(sp)
 4006860:	d8c00215 	stw	r3,8(sp)
 4006864:	d8800115 	stw	r2,4(sp)
 4006868:	00800284 	movi	r2,10
 400686c:	d8800015 	stw	r2,0(sp)
 4006870:	01c00844 	movi	r7,33
 4006874:	000d883a 	mov	r6,zero
 4006878:	4009883a 	mov	r4,r8
 400687c:	4000af00 	call	4000af0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4006880:	e037883a 	mov	sp,fp
 4006884:	dfc00117 	ldw	ra,4(sp)
 4006888:	df000017 	ldw	fp,0(sp)
 400688c:	dec00204 	addi	sp,sp,8
 4006890:	f800283a 	ret

04006894 <_ZN6USBHID11SetProtocolEhh>:

uint8_t USBHID::SetProtocol(uint8_t iface, uint8_t protocol) {
 4006894:	defff304 	addi	sp,sp,-52
 4006898:	dfc00c15 	stw	ra,48(sp)
 400689c:	df000b15 	stw	fp,44(sp)
 40068a0:	df000b04 	addi	fp,sp,44
 40068a4:	e13ffd15 	stw	r4,-12(fp)
 40068a8:	2807883a 	mov	r3,r5
 40068ac:	3005883a 	mov	r2,r6
 40068b0:	e0fffe05 	stb	r3,-8(fp)
 40068b4:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_PROTOCOL, protocol, 0x00, iface, 0x0000, 0x0000, NULL, NULL));
 40068b8:	e0bffd17 	ldw	r2,-12(fp)
 40068bc:	11000217 	ldw	r4,8(r2)
 40068c0:	e0bffd17 	ldw	r2,-12(fp)
 40068c4:	10800303 	ldbu	r2,12(r2)
 40068c8:	11403fcc 	andi	r5,r2,255
 40068cc:	e0bfff03 	ldbu	r2,-4(fp)
 40068d0:	e0fffe03 	ldbu	r3,-8(fp)
 40068d4:	d8000715 	stw	zero,28(sp)
 40068d8:	d8000615 	stw	zero,24(sp)
 40068dc:	d8000515 	stw	zero,20(sp)
 40068e0:	d8000415 	stw	zero,16(sp)
 40068e4:	d8c00315 	stw	r3,12(sp)
 40068e8:	d8000215 	stw	zero,8(sp)
 40068ec:	d8800115 	stw	r2,4(sp)
 40068f0:	008002c4 	movi	r2,11
 40068f4:	d8800015 	stw	r2,0(sp)
 40068f8:	01c00844 	movi	r7,33
 40068fc:	000d883a 	mov	r6,zero
 4006900:	4000af00 	call	4000af0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4006904:	e037883a 	mov	sp,fp
 4006908:	dfc00117 	ldw	ra,4(sp)
 400690c:	df000017 	ldw	fp,0(sp)
 4006910:	dec00204 	addi	sp,sp,8
 4006914:	f800283a 	ret

04006918 <_ZN6USBHID11GetProtocolEhPh>:

uint8_t USBHID::GetProtocol(uint8_t iface, uint8_t* dataptr) {
 4006918:	defff304 	addi	sp,sp,-52
 400691c:	dfc00c15 	stw	ra,48(sp)
 4006920:	df000b15 	stw	fp,44(sp)
 4006924:	df000b04 	addi	fp,sp,44
 4006928:	e13ffd15 	stw	r4,-12(fp)
 400692c:	2805883a 	mov	r2,r5
 4006930:	e1bfff15 	stw	r6,-4(fp)
 4006934:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_PROTOCOL, 0x00, 0x00, iface, 0x0001, 0x0001, dataptr, NULL));
 4006938:	e0bffd17 	ldw	r2,-12(fp)
 400693c:	11000217 	ldw	r4,8(r2)
 4006940:	e0bffd17 	ldw	r2,-12(fp)
 4006944:	10800303 	ldbu	r2,12(r2)
 4006948:	11403fcc 	andi	r5,r2,255
 400694c:	e0bffe03 	ldbu	r2,-8(fp)
 4006950:	d8000715 	stw	zero,28(sp)
 4006954:	e0ffff17 	ldw	r3,-4(fp)
 4006958:	d8c00615 	stw	r3,24(sp)
 400695c:	00c00044 	movi	r3,1
 4006960:	d8c00515 	stw	r3,20(sp)
 4006964:	00c00044 	movi	r3,1
 4006968:	d8c00415 	stw	r3,16(sp)
 400696c:	d8800315 	stw	r2,12(sp)
 4006970:	d8000215 	stw	zero,8(sp)
 4006974:	d8000115 	stw	zero,4(sp)
 4006978:	008000c4 	movi	r2,3
 400697c:	d8800015 	stw	r2,0(sp)
 4006980:	01c02844 	movi	r7,161
 4006984:	000d883a 	mov	r6,zero
 4006988:	4000af00 	call	4000af0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 400698c:	e037883a 	mov	sp,fp
 4006990:	dfc00117 	ldw	ra,4(sp)
 4006994:	df000017 	ldw	fp,0(sp)
 4006998:	dec00204 	addi	sp,sp,8
 400699c:	f800283a 	ret

040069a0 <_ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void USBHID::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr) {
 40069a0:	defffc04 	addi	sp,sp,-16
 40069a4:	dfc00315 	stw	ra,12(sp)
 40069a8:	df000215 	stw	fp,8(sp)
 40069ac:	df000204 	addi	fp,sp,8
 40069b0:	e13ffe15 	stw	r4,-8(fp)
 40069b4:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("Endpoint descriptor:"), 0x80);
        Notify(PSTR("\r\nLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bLength, 0x80);
 40069b8:	e0bfff17 	ldw	r2,-4(fp)
 40069bc:	10800003 	ldbu	r2,0(r2)
 40069c0:	10803fcc 	andi	r2,r2,255
 40069c4:	01402004 	movi	r5,128
 40069c8:	1009883a 	mov	r4,r2
 40069cc:	4002d1c0 	call	4002d1c <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bDescriptorType, 0x80);
 40069d0:	e0bfff17 	ldw	r2,-4(fp)
 40069d4:	10800043 	ldbu	r2,1(r2)
 40069d8:	10803fcc 	andi	r2,r2,255
 40069dc:	01402004 	movi	r5,128
 40069e0:	1009883a 	mov	r4,r2
 40069e4:	4002d1c0 	call	4002d1c <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAddress:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bEndpointAddress, 0x80);
 40069e8:	e0bfff17 	ldw	r2,-4(fp)
 40069ec:	10800083 	ldbu	r2,2(r2)
 40069f0:	10803fcc 	andi	r2,r2,255
 40069f4:	01402004 	movi	r5,128
 40069f8:	1009883a 	mov	r4,r2
 40069fc:	4002d1c0 	call	4002d1c <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAttributes:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bmAttributes, 0x80);
 4006a00:	e0bfff17 	ldw	r2,-4(fp)
 4006a04:	108000c3 	ldbu	r2,3(r2)
 4006a08:	10803fcc 	andi	r2,r2,255
 4006a0c:	01402004 	movi	r5,128
 4006a10:	1009883a 	mov	r4,r2
 4006a14:	4002d1c0 	call	4002d1c <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
 4006a18:	e0bfff17 	ldw	r2,-4(fp)
 4006a1c:	10c00103 	ldbu	r3,4(r2)
 4006a20:	10800143 	ldbu	r2,5(r2)
 4006a24:	1004923a 	slli	r2,r2,8
 4006a28:	10c4b03a 	or	r2,r2,r3
 4006a2c:	10bfffcc 	andi	r2,r2,65535
 4006a30:	01402004 	movi	r5,128
 4006a34:	1009883a 	mov	r4,r2
 4006a38:	4006b5c0 	call	4006b5c <_Z10D_PrintHexItEvT_i>
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
 4006a3c:	e0bfff17 	ldw	r2,-4(fp)
 4006a40:	10800183 	ldbu	r2,6(r2)
 4006a44:	10803fcc 	andi	r2,r2,255
 4006a48:	01402004 	movi	r5,128
 4006a4c:	1009883a 	mov	r4,r2
 4006a50:	4002d1c0 	call	4002d1c <_Z10D_PrintHexIhEvT_i>
}
 4006a54:	0001883a 	nop
 4006a58:	e037883a 	mov	sp,fp
 4006a5c:	dfc00117 	ldw	ra,4(sp)
 4006a60:	df000017 	ldw	fp,0(sp)
 4006a64:	dec00204 	addi	sp,sp,8
 4006a68:	f800283a 	ret

04006a6c <_ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR>:

void USBHID::PrintHidDescriptor(const USB_HID_DESCRIPTOR *pDesc) {
 4006a6c:	defffc04 	addi	sp,sp,-16
 4006a70:	dfc00315 	stw	ra,12(sp)
 4006a74:	df000215 	stw	fp,8(sp)
 4006a78:	df000204 	addi	fp,sp,8
 4006a7c:	e13ffe15 	stw	r4,-8(fp)
 4006a80:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\n\r\nHID Descriptor:\r\n"), 0x80);
        Notify(PSTR("bDescLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bLength, 0x80);
 4006a84:	e0bfff17 	ldw	r2,-4(fp)
 4006a88:	10800003 	ldbu	r2,0(r2)
 4006a8c:	10803fcc 	andi	r2,r2,255
 4006a90:	01402004 	movi	r5,128
 4006a94:	1009883a 	mov	r4,r2
 4006a98:	4002d1c0 	call	4002d1c <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescriptorType:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescriptorType, 0x80);
 4006a9c:	e0bfff17 	ldw	r2,-4(fp)
 4006aa0:	10800043 	ldbu	r2,1(r2)
 4006aa4:	10803fcc 	andi	r2,r2,255
 4006aa8:	01402004 	movi	r5,128
 4006aac:	1009883a 	mov	r4,r2
 4006ab0:	4002d1c0 	call	4002d1c <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbcdHID:\t\t\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->bcdHID, 0x80);
 4006ab4:	e0bfff17 	ldw	r2,-4(fp)
 4006ab8:	10c00083 	ldbu	r3,2(r2)
 4006abc:	108000c3 	ldbu	r2,3(r2)
 4006ac0:	1004923a 	slli	r2,r2,8
 4006ac4:	10c4b03a 	or	r2,r2,r3
 4006ac8:	10bfffcc 	andi	r2,r2,65535
 4006acc:	01402004 	movi	r5,128
 4006ad0:	1009883a 	mov	r4,r2
 4006ad4:	4006b5c0 	call	4006b5c <_Z10D_PrintHexItEvT_i>

        Notify(PSTR("\r\nbCountryCode:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bCountryCode, 0x80);
 4006ad8:	e0bfff17 	ldw	r2,-4(fp)
 4006adc:	10800103 	ldbu	r2,4(r2)
 4006ae0:	10803fcc 	andi	r2,r2,255
 4006ae4:	01402004 	movi	r5,128
 4006ae8:	1009883a 	mov	r4,r2
 4006aec:	4002d1c0 	call	4002d1c <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbNumDescriptors:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bNumDescriptors, 0x80);
 4006af0:	e0bfff17 	ldw	r2,-4(fp)
 4006af4:	10800143 	ldbu	r2,5(r2)
 4006af8:	10803fcc 	andi	r2,r2,255
 4006afc:	01402004 	movi	r5,128
 4006b00:	1009883a 	mov	r4,r2
 4006b04:	4002d1c0 	call	4002d1c <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescrType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescrType, 0x80);
 4006b08:	e0bfff17 	ldw	r2,-4(fp)
 4006b0c:	10800183 	ldbu	r2,6(r2)
 4006b10:	10803fcc 	andi	r2,r2,255
 4006b14:	01402004 	movi	r5,128
 4006b18:	1009883a 	mov	r4,r2
 4006b1c:	4002d1c0 	call	4002d1c <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nwDescriptorLength:\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->wDescriptorLength, 0x80);
 4006b20:	e0bfff17 	ldw	r2,-4(fp)
 4006b24:	10c001c3 	ldbu	r3,7(r2)
 4006b28:	10800203 	ldbu	r2,8(r2)
 4006b2c:	1004923a 	slli	r2,r2,8
 4006b30:	10c4b03a 	or	r2,r2,r3
 4006b34:	10bfffcc 	andi	r2,r2,65535
 4006b38:	01402004 	movi	r5,128
 4006b3c:	1009883a 	mov	r4,r2
 4006b40:	4006b5c0 	call	4006b5c <_Z10D_PrintHexItEvT_i>
}
 4006b44:	0001883a 	nop
 4006b48:	e037883a 	mov	sp,fp
 4006b4c:	dfc00117 	ldw	ra,4(sp)
 4006b50:	df000017 	ldw	fp,0(sp)
 4006b54:	dec00204 	addi	sp,sp,8
 4006b58:	f800283a 	ret

04006b5c <_Z10D_PrintHexItEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 4006b5c:	defffd04 	addi	sp,sp,-12
 4006b60:	df000215 	stw	fp,8(sp)
 4006b64:	df000204 	addi	fp,sp,8
 4006b68:	2005883a 	mov	r2,r4
 4006b6c:	e17fff15 	stw	r5,-4(fp)
 4006b70:	e0bffe0d 	sth	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 4006b74:	0001883a 	nop
 4006b78:	e037883a 	mov	sp,fp
 4006b7c:	df000017 	ldw	fp,0(sp)
 4006b80:	dec00104 	addi	sp,sp,4
 4006b84:	f800283a 	ret

04006b88 <_ZN8MAX3421eC1Ev>:
#include "../include/usbhost.h"

uint8_t usb_task_state;
MAX3421e::MAX3421e() {
 4006b88:	defffd04 	addi	sp,sp,-12
 4006b8c:	dfc00215 	stw	ra,8(sp)
 4006b90:	df000115 	stw	fp,4(sp)
 4006b94:	df000104 	addi	fp,sp,4
 4006b98:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Constructor\n");
 4006b9c:	010100b4 	movhi	r4,1026
 4006ba0:	213d9104 	addi	r4,r4,-2492
 4006ba4:	400bbd00 	call	400bbd0 <puts>
	vbusState = 0;
 4006ba8:	d0323345 	stb	zero,-14131(gp)
};
 4006bac:	0001883a 	nop
 4006bb0:	e037883a 	mov	sp,fp
 4006bb4:	dfc00117 	ldw	ra,4(sp)
 4006bb8:	df000017 	ldw	fp,0(sp)
 4006bbc:	dec00204 	addi	sp,sp,8
 4006bc0:	f800283a 	ret

04006bc4 <_ZN8MAX3421e12getVbusStateEv>:

uint8_t MAX3421e::vbusState = 0;

uint8_t MAX3421e::getVbusState(void) {
 4006bc4:	defffe04 	addi	sp,sp,-8
 4006bc8:	df000115 	stw	fp,4(sp)
 4006bcc:	df000104 	addi	fp,sp,4
 4006bd0:	e13fff15 	stw	r4,-4(fp)
	return vbusState;
 4006bd4:	d0b23343 	ldbu	r2,-14131(gp)
};
 4006bd8:	e037883a 	mov	sp,fp
 4006bdc:	df000017 	ldw	fp,0(sp)
 4006be0:	dec00104 	addi	sp,sp,4
 4006be4:	f800283a 	ret

04006be8 <_ZN8MAX3421e5regWrEhh>:

/* write single byte into MAX3421 register */
void MAX3421e::regWr(uint8_t reg, uint8_t val) {
 4006be8:	defff704 	addi	sp,sp,-36
 4006bec:	dfc00815 	stw	ra,32(sp)
 4006bf0:	df000715 	stw	fp,28(sp)
 4006bf4:	df000704 	addi	fp,sp,28
 4006bf8:	e13ffd15 	stw	r4,-12(fp)
 4006bfc:	2807883a 	mov	r3,r5
 4006c00:	3005883a 	mov	r2,r6
 4006c04:	e0fffe05 	stb	r3,-8(fp)
 4006c08:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regWr\n");
	//    Select_MAX3421E;
	alt_u8 spi_command_string_tx[2] = "";
 4006c0c:	e03ffc45 	stb	zero,-15(fp)
 4006c10:	e03ffc85 	stb	zero,-14(fp)
	alt_u8 spi_command_string_rx[1] = "";
 4006c14:	e03ffcc5 	stb	zero,-13(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
 4006c18:	e0bffe03 	ldbu	r2,-8(fp)
 4006c1c:	10800084 	addi	r2,r2,2
 4006c20:	e0bffc45 	stb	r2,-15(fp)
	spi_command_string_tx[1] = val;
 4006c24:	e0bfff03 	ldbu	r2,-4(fp)
 4006c28:	e0bffc85 	stb	r2,-14(fp)
	//SPI_wr ( reg + 2 ); //set WR bit and send register number
	//SPI_wr ( val );
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 2,
 4006c2c:	e0fffc44 	addi	r3,fp,-15
 4006c30:	d8000215 	stw	zero,8(sp)
 4006c34:	e0bffcc4 	addi	r2,fp,-13
 4006c38:	d8800115 	stw	r2,4(sp)
 4006c3c:	d8000015 	stw	zero,0(sp)
 4006c40:	180f883a 	mov	r7,r3
 4006c44:	01800084 	movi	r6,2
 4006c48:	000b883a 	mov	r5,zero
 4006c4c:	01020034 	movhi	r4,2048
 4006c50:	21042804 	addi	r4,r4,4256
 4006c54:	401a3940 	call	401a394 <alt_avalon_spi_command>
		spi_command_string_tx, 0, spi_command_string_rx, 0);
 4006c58:	e0bffc05 	stb	r2,-16(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_wr RET = %x \n", return_code);
	//    Deselect_MAX3421E;
};
 4006c5c:	0001883a 	nop
 4006c60:	e037883a 	mov	sp,fp
 4006c64:	dfc00117 	ldw	ra,4(sp)
 4006c68:	df000017 	ldw	fp,0(sp)
 4006c6c:	dec00204 	addi	sp,sp,8
 4006c70:	f800283a 	ret

04006c74 <_ZN8MAX3421e7bytesWrEhhPh>:
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
 4006c74:	defff304 	addi	sp,sp,-52
 4006c78:	dfc00c15 	stw	ra,48(sp)
 4006c7c:	df000b15 	stw	fp,44(sp)
 4006c80:	dc000a15 	stw	r16,40(sp)
 4006c84:	df000b04 	addi	fp,sp,44
 4006c88:	e13ffb15 	stw	r4,-20(fp)
 4006c8c:	3009883a 	mov	r4,r6
 4006c90:	e1fffe15 	stw	r7,-8(fp)
 4006c94:	e17ffc05 	stb	r5,-16(fp)
 4006c98:	e13ffd05 	stb	r4,-12(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
 4006c9c:	d809883a 	mov	r4,sp
 4006ca0:	2021883a 	mov	r16,r4
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
	//printf("MAX3421e bytesWr\n");
	alt_u8 spi_command_string_tx[nbytes + 1];
 4006ca4:	e13ffd03 	ldbu	r4,-12(fp)
 4006ca8:	e13ff815 	stw	r4,-32(fp)
 4006cac:	200b883a 	mov	r5,r4
 4006cb0:	29400044 	addi	r5,r5,1
 4006cb4:	2819883a 	mov	r12,r5
 4006cb8:	001b883a 	mov	r13,zero
 4006cbc:	600ad77a 	srli	r5,r12,29
 4006cc0:	681290fa 	slli	r9,r13,3
 4006cc4:	2a52b03a 	or	r9,r5,r9
 4006cc8:	601090fa 	slli	r8,r12,3
 4006ccc:	200b883a 	mov	r5,r4
 4006cd0:	29400044 	addi	r5,r5,1
 4006cd4:	2815883a 	mov	r10,r5
 4006cd8:	0017883a 	mov	r11,zero
 4006cdc:	500ad77a 	srli	r5,r10,29
 4006ce0:	580690fa 	slli	r3,r11,3
 4006ce4:	28c6b03a 	or	r3,r5,r3
 4006ce8:	500490fa 	slli	r2,r10,3
 4006cec:	2005883a 	mov	r2,r4
 4006cf0:	10800044 	addi	r2,r2,1
 4006cf4:	108000c4 	addi	r2,r2,3
 4006cf8:	1004d0ba 	srli	r2,r2,2
 4006cfc:	1085883a 	add	r2,r2,r2
 4006d00:	1085883a 	add	r2,r2,r2
 4006d04:	d8b7c83a 	sub	sp,sp,r2
 4006d08:	d8800304 	addi	r2,sp,12
 4006d0c:	1005883a 	mov	r2,r2
 4006d10:	e0bff915 	stw	r2,-28(fp)
	alt_u8 spi_command_string_rx[1];
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
 4006d14:	e0bffc03 	ldbu	r2,-16(fp)
 4006d18:	10800084 	addi	r2,r2,2
 4006d1c:	1007883a 	mov	r3,r2
 4006d20:	e0bff917 	ldw	r2,-28(fp)
 4006d24:	10c00005 	stb	r3,0(r2)
	memcpy(&spi_command_string_tx[1], data, nbytes);
 4006d28:	e0bff917 	ldw	r2,-28(fp)
 4006d2c:	10800044 	addi	r2,r2,1
 4006d30:	e0fffd03 	ldbu	r3,-12(fp)
 4006d34:	180d883a 	mov	r6,r3
 4006d38:	e17ffe17 	ldw	r5,-8(fp)
 4006d3c:	1009883a 	mov	r4,r2
 4006d40:	400b8140 	call	400b814 <memcpy>

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, nbytes + 1,
 4006d44:	e0bffd03 	ldbu	r2,-12(fp)
 4006d48:	10800044 	addi	r2,r2,1
 4006d4c:	1009883a 	mov	r4,r2
 4006d50:	e0fff917 	ldw	r3,-28(fp)
 4006d54:	d8000215 	stw	zero,8(sp)
 4006d58:	e0bffa44 	addi	r2,fp,-23
 4006d5c:	d8800115 	stw	r2,4(sp)
 4006d60:	d8000015 	stw	zero,0(sp)
 4006d64:	180f883a 	mov	r7,r3
 4006d68:	200d883a 	mov	r6,r4
 4006d6c:	000b883a 	mov	r5,zero
 4006d70:	01020034 	movhi	r4,2048
 4006d74:	21042804 	addi	r4,r4,4256
 4006d78:	401a3940 	call	401a394 <alt_avalon_spi_command>
			spi_command_string_tx, 0, spi_command_string_rx, 0);
 4006d7c:	e0bffa05 	stb	r2,-24(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
 4006d80:	e0bffd03 	ldbu	r2,-12(fp)
 4006d84:	e0fffe17 	ldw	r3,-8(fp)
 4006d88:	1885883a 	add	r2,r3,r2
 4006d8c:	8037883a 	mov	sp,r16
}
 4006d90:	e6ffff04 	addi	sp,fp,-4
 4006d94:	dfc00217 	ldw	ra,8(sp)
 4006d98:	df000117 	ldw	fp,4(sp)
 4006d9c:	dc000017 	ldw	r16,0(sp)
 4006da0:	dec00304 	addi	sp,sp,12
 4006da4:	f800283a 	ret

04006da8 <_ZN8MAX3421e6gpioWrEh>:
/* GPIO write                                           */
/*GPIO byte is split between 2 registers, so two writes are needed to write one byte */

/* GPOUT bits are in the low nibble. 0-3 in IOPINS1, 4-7 in IOPINS2 */
void MAX3421e::gpioWr(uint8_t data) {
 4006da8:	defffc04 	addi	sp,sp,-16
 4006dac:	dfc00315 	stw	ra,12(sp)
 4006db0:	df000215 	stw	fp,8(sp)
 4006db4:	df000204 	addi	fp,sp,8
 4006db8:	e13ffe15 	stw	r4,-8(fp)
 4006dbc:	2805883a 	mov	r2,r5
 4006dc0:	e0bfff05 	stb	r2,-4(fp)
	printf("MAX3421e gpioWr\n");
 4006dc4:	010100b4 	movhi	r4,1026
 4006dc8:	213d9704 	addi	r4,r4,-2468
 4006dcc:	400bbd00 	call	400bbd0 <puts>
	regWr(rIOPINS1, data);
 4006dd0:	e0bfff03 	ldbu	r2,-4(fp)
 4006dd4:	100d883a 	mov	r6,r2
 4006dd8:	01402804 	movi	r5,160
 4006ddc:	e13ffe17 	ldw	r4,-8(fp)
 4006de0:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
	data >>= 4;
 4006de4:	e0bfff03 	ldbu	r2,-4(fp)
 4006de8:	1005d13a 	srai	r2,r2,4
 4006dec:	e0bfff05 	stb	r2,-4(fp)
	regWr(rIOPINS2, data);
 4006df0:	e0bfff03 	ldbu	r2,-4(fp)
 4006df4:	100d883a 	mov	r6,r2
 4006df8:	01402a04 	movi	r5,168
 4006dfc:	e13ffe17 	ldw	r4,-8(fp)
 4006e00:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
	return;
 4006e04:	0001883a 	nop
}
 4006e08:	e037883a 	mov	sp,fp
 4006e0c:	dfc00117 	ldw	ra,4(sp)
 4006e10:	df000017 	ldw	fp,0(sp)
 4006e14:	dec00204 	addi	sp,sp,8
 4006e18:	f800283a 	ret

04006e1c <_ZN8MAX3421e5regRdEh>:

/* single host register read    */
uint8_t MAX3421e::regRd(uint8_t reg) {
 4006e1c:	defff804 	addi	sp,sp,-32
 4006e20:	dfc00715 	stw	ra,28(sp)
 4006e24:	df000615 	stw	fp,24(sp)
 4006e28:	df000604 	addi	fp,sp,24
 4006e2c:	e13ffe15 	stw	r4,-8(fp)
 4006e30:	2805883a 	mov	r2,r5
 4006e34:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regRd\n");
	alt_u8 spi_command_string_tx[1] = "";
 4006e38:	e03ffd45 	stb	zero,-11(fp)
	alt_u8 spi_command_string_rx[1] = "";
 4006e3c:	e03ffd85 	stb	zero,-10(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
 4006e40:	e0bfff03 	ldbu	r2,-4(fp)
 4006e44:	e0bffd45 	stb	r2,-11(fp)
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
 4006e48:	e0fffd44 	addi	r3,fp,-11
 4006e4c:	d8000215 	stw	zero,8(sp)
 4006e50:	e0bffd84 	addi	r2,fp,-10
 4006e54:	d8800115 	stw	r2,4(sp)
 4006e58:	00800044 	movi	r2,1
 4006e5c:	d8800015 	stw	r2,0(sp)
 4006e60:	180f883a 	mov	r7,r3
 4006e64:	01800044 	movi	r6,1
 4006e68:	000b883a 	mov	r5,zero
 4006e6c:	01020034 	movhi	r4,2048
 4006e70:	21042804 	addi	r4,r4,4256
 4006e74:	401a3940 	call	401a394 <alt_avalon_spi_command>
		spi_command_string_tx, 1, spi_command_string_rx, 0);
 4006e78:	e0bffd05 	stb	r2,-12(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return spi_command_string_rx[0];
 4006e7c:	e0bffd83 	ldbu	r2,-10(fp)
}
 4006e80:	e037883a 	mov	sp,fp
 4006e84:	dfc00117 	ldw	ra,4(sp)
 4006e88:	df000017 	ldw	fp,0(sp)
 4006e8c:	dec00204 	addi	sp,sp,8
 4006e90:	f800283a 	ret

04006e94 <_ZN8MAX3421e7bytesRdEhhPh>:
/* multiple-byte register read  */

/* returns a pointer to a memory position after last read   */
uint8_t* MAX3421e::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data) {
 4006e94:	defff604 	addi	sp,sp,-40
 4006e98:	dfc00915 	stw	ra,36(sp)
 4006e9c:	df000815 	stw	fp,32(sp)
 4006ea0:	df000804 	addi	fp,sp,32
 4006ea4:	e13ffc15 	stw	r4,-16(fp)
 4006ea8:	2807883a 	mov	r3,r5
 4006eac:	3005883a 	mov	r2,r6
 4006eb0:	e1ffff15 	stw	r7,-4(fp)
 4006eb4:	e0fffd05 	stb	r3,-12(fp)
 4006eb8:	e0bffe05 	stb	r2,-8(fp)
	//printf("MAX3421e bytesRd\n");
	alt_u8 spi_command_string_tx[1] = "";
 4006ebc:	e03ffb45 	stb	zero,-19(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
 4006ec0:	e0bffd03 	ldbu	r2,-12(fp)
 4006ec4:	e0bffb45 	stb	r2,-19(fp)

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
 4006ec8:	e0bffe03 	ldbu	r2,-8(fp)
 4006ecc:	e13ffb44 	addi	r4,fp,-19
 4006ed0:	d8000215 	stw	zero,8(sp)
 4006ed4:	e0ffff17 	ldw	r3,-4(fp)
 4006ed8:	d8c00115 	stw	r3,4(sp)
 4006edc:	d8800015 	stw	r2,0(sp)
 4006ee0:	200f883a 	mov	r7,r4
 4006ee4:	01800044 	movi	r6,1
 4006ee8:	000b883a 	mov	r5,zero
 4006eec:	01020034 	movhi	r4,2048
 4006ef0:	21042804 	addi	r4,r4,4256
 4006ef4:	401a3940 	call	401a394 <alt_avalon_spi_command>
		spi_command_string_tx, nbytes, data, 0);
 4006ef8:	e0bffb05 	stb	r2,-20(fp)

	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return (data + nbytes);
 4006efc:	e0bffe03 	ldbu	r2,-8(fp)
 4006f00:	e0ffff17 	ldw	r3,-4(fp)
 4006f04:	1885883a 	add	r2,r3,r2
}
 4006f08:	e037883a 	mov	sp,fp
 4006f0c:	dfc00117 	ldw	ra,4(sp)
 4006f10:	df000017 	ldw	fp,0(sp)
 4006f14:	dec00204 	addi	sp,sp,8
 4006f18:	f800283a 	ret

04006f1c <_ZN8MAX3421e6gpioRdEv>:

/** @brief  Reads the current GPI input values
*   @retval uint8_t Bitwise value of all 8 GPI inputs
*/
/* GPIN pins are in high nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRd() {
 4006f1c:	defffc04 	addi	sp,sp,-16
 4006f20:	dfc00315 	stw	ra,12(sp)
 4006f24:	df000215 	stw	fp,8(sp)
 4006f28:	df000204 	addi	fp,sp,8
 4006f2c:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRd\n");
 4006f30:	010100b4 	movhi	r4,1026
 4006f34:	213d9b04 	addi	r4,r4,-2452
 4006f38:	400bbd00 	call	400bbd0 <puts>
	uint8_t gpin = 0;
 4006f3c:	e03ffe05 	stb	zero,-8(fp)
	gpin = regRd(rIOPINS2); //pins 4-7
 4006f40:	01402a04 	movi	r5,168
 4006f44:	e13fff17 	ldw	r4,-4(fp)
 4006f48:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 4006f4c:	e0bffe05 	stb	r2,-8(fp)
	gpin &= 0xf0; //clean lower nibble
 4006f50:	e0fffe03 	ldbu	r3,-8(fp)
 4006f54:	00bffc04 	movi	r2,-16
 4006f58:	1884703a 	and	r2,r3,r2
 4006f5c:	e0bffe05 	stb	r2,-8(fp)
	gpin |= (regRd(rIOPINS1) >> 4); //shift low bits and OR with upper from previous operation.
 4006f60:	01402804 	movi	r5,160
 4006f64:	e13fff17 	ldw	r4,-4(fp)
 4006f68:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 4006f6c:	10803fcc 	andi	r2,r2,255
 4006f70:	1005d13a 	srai	r2,r2,4
 4006f74:	1007883a 	mov	r3,r2
 4006f78:	e0bffe03 	ldbu	r2,-8(fp)
 4006f7c:	1884b03a 	or	r2,r3,r2
 4006f80:	e0bffe05 	stb	r2,-8(fp)
	return ( gpin);
 4006f84:	e0bffe03 	ldbu	r2,-8(fp)
}
 4006f88:	e037883a 	mov	sp,fp
 4006f8c:	dfc00117 	ldw	ra,4(sp)
 4006f90:	df000017 	ldw	fp,0(sp)
 4006f94:	dec00204 	addi	sp,sp,8
 4006f98:	f800283a 	ret

04006f9c <_ZN8MAX3421e12gpioRdOutputEv>:

/** @brief  Reads the current GPI output values
*   @retval uint8_t Bitwise value of all 8 GPI outputs
*/
/* GPOUT pins are in low nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRdOutput() {
 4006f9c:	defffc04 	addi	sp,sp,-16
 4006fa0:	dfc00315 	stw	ra,12(sp)
 4006fa4:	df000215 	stw	fp,8(sp)
 4006fa8:	df000204 	addi	fp,sp,8
 4006fac:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRdOutput\n");
 4006fb0:	010100b4 	movhi	r4,1026
 4006fb4:	213d9f04 	addi	r4,r4,-2436
 4006fb8:	400bbd00 	call	400bbd0 <puts>
	uint8_t gpout = 0;
 4006fbc:	e03ffe05 	stb	zero,-8(fp)
	gpout = regRd(rIOPINS1); //pins 0-3
 4006fc0:	01402804 	movi	r5,160
 4006fc4:	e13fff17 	ldw	r4,-4(fp)
 4006fc8:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 4006fcc:	e0bffe05 	stb	r2,-8(fp)
		gpout &= 0x0f; //clean upper nibble
 4006fd0:	e0bffe03 	ldbu	r2,-8(fp)
 4006fd4:	108003cc 	andi	r2,r2,15
 4006fd8:	e0bffe05 	stb	r2,-8(fp)
		gpout |= (regRd(rIOPINS2) << 4); //shift high bits and OR with lower from previous operation.
 4006fdc:	01402a04 	movi	r5,168
 4006fe0:	e13fff17 	ldw	r4,-4(fp)
 4006fe4:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 4006fe8:	10803fcc 	andi	r2,r2,255
 4006fec:	1004913a 	slli	r2,r2,4
 4006ff0:	1007883a 	mov	r3,r2
 4006ff4:	e0bffe03 	ldbu	r2,-8(fp)
 4006ff8:	1884b03a 	or	r2,r3,r2
 4006ffc:	e0bffe05 	stb	r2,-8(fp)
		return ( gpout);
 4007000:	e0bffe03 	ldbu	r2,-8(fp)
}
 4007004:	e037883a 	mov	sp,fp
 4007008:	dfc00117 	ldw	ra,4(sp)
 400700c:	df000017 	ldw	fp,0(sp)
 4007010:	dec00204 	addi	sp,sp,8
 4007014:	f800283a 	ret

04007018 <_ZN8MAX3421e5resetEv>:

/* reset MAX3421E. Returns number of cycles it took for PLL to stabilize after reset
  or zero if PLL haven't stabilized in 65535 cycles */
uint16_t MAX3421e::reset() {
 4007018:	defffc04 	addi	sp,sp,-16
 400701c:	dfc00315 	stw	ra,12(sp)
 4007020:	df000215 	stw	fp,8(sp)
 4007024:	df000204 	addi	fp,sp,8
 4007028:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e reset\n");
 400702c:	010100b4 	movhi	r4,1026
 4007030:	213da504 	addi	r4,r4,-2412
 4007034:	400bbd00 	call	400bbd0 <puts>
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 4007038:	0007883a 	mov	r3,zero
 400703c:	00820034 	movhi	r2,2048
 4007040:	10843c04 	addi	r2,r2,4336
 4007044:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
 4007048:	010003f4 	movhi	r4,15
 400704c:	21109004 	addi	r4,r4,16960
 4007050:	40189a40 	call	40189a4 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 4007054:	00c00044 	movi	r3,1
 4007058:	00820034 	movhi	r2,2048
 400705c:	10843c04 	addi	r2,r2,4336
 4007060:	10c00035 	stwio	r3,0(r2)
	uint16_t i = 0;
 4007064:	e03ffe0d 	sth	zero,-8(fp)
	regWr(rUSBCTL, bmCHIPRES);
 4007068:	01800804 	movi	r6,32
 400706c:	01401e04 	movi	r5,120
 4007070:	e13fff17 	ldw	r4,-4(fp)
 4007074:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
	regWr(rUSBCTL, 0x00);
 4007078:	000d883a 	mov	r6,zero
 400707c:	01401e04 	movi	r5,120
 4007080:	e13fff17 	ldw	r4,-4(fp)
 4007084:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
	while(++i) {
 4007088:	e0bffe0b 	ldhu	r2,-8(fp)
 400708c:	10800044 	addi	r2,r2,1
 4007090:	e0bffe0d 	sth	r2,-8(fp)
 4007094:	e0bffe0b 	ldhu	r2,-8(fp)
 4007098:	1004c03a 	cmpne	r2,r2,zero
 400709c:	10803fcc 	andi	r2,r2,255
 40070a0:	10000a26 	beq	r2,zero,40070cc <_ZN8MAX3421e5resetEv+0xb4>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 40070a4:	01401a04 	movi	r5,104
 40070a8:	e13fff17 	ldw	r4,-4(fp)
 40070ac:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 40070b0:	10803fcc 	andi	r2,r2,255
 40070b4:	1080004c 	andi	r2,r2,1
 40070b8:	1004c03a 	cmpne	r2,r2,zero
 40070bc:	10803fcc 	andi	r2,r2,255
 40070c0:	1000011e 	bne	r2,zero,40070c8 <_ZN8MAX3421e5resetEv+0xb0>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	uint16_t i = 0;
	regWr(rUSBCTL, bmCHIPRES);
	regWr(rUSBCTL, 0x00);
	while(++i) {
 40070c4:	003ff006 	br	4007088 <__alt_data_end+0xfc007088>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
			break;
 40070c8:	0001883a 	nop
		}
	}
	return ( i);
 40070cc:	e0bffe0b 	ldhu	r2,-8(fp)
}
 40070d0:	e037883a 	mov	sp,fp
 40070d4:	dfc00117 	ldw	ra,4(sp)
 40070d8:	df000017 	ldw	fp,0(sp)
 40070dc:	dec00204 	addi	sp,sp,8
 40070e0:	f800283a 	ret

040070e4 <_Z10Vbus_powerb>:

/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
bool Vbus_power(bool action) {
 40070e4:	defffe04 	addi	sp,sp,-8
 40070e8:	df000115 	stw	fp,4(sp)
 40070ec:	df000104 	addi	fp,sp,4
 40070f0:	2005883a 	mov	r2,r4
 40070f4:	e0bfff05 	stb	r2,-4(fp)
	// power on/off successful
	return (1);
 40070f8:	00800044 	movi	r2,1
}
 40070fc:	e037883a 	mov	sp,fp
 4007100:	df000017 	ldw	fp,0(sp)
 4007104:	dec00104 	addi	sp,sp,4
 4007108:	f800283a 	ret

0400710c <_ZN8MAX3421e4InitEv>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init() {
 400710c:	defffd04 	addi	sp,sp,-12
 4007110:	dfc00215 	stw	ra,8(sp)
 4007114:	df000115 	stw	fp,4(sp)
 4007118:	df000104 	addi	fp,sp,4
 400711c:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Init\n");
 4007120:	010100b4 	movhi	r4,1026
 4007124:	213da904 	addi	r4,r4,-2396
 4007128:	400bbd00 	call	400bbd0 <puts>
	/* Configure full-duplex SPI, interrupt pulse   */
	/* MAX3421E - full-duplex SPI, level interrupt */
	// GPX pin on. Moved here, otherwise we flicker the vbus.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 400712c:	01800604 	movi	r6,24
 4007130:	01402204 	movi	r5,136
 4007134:	e13fff17 	ldw	r4,-4(fp)
 4007138:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 400713c:	e13fff17 	ldw	r4,-4(fp)
 4007140:	40070180 	call	4007018 <_ZN8MAX3421e5resetEv>
 4007144:	10bfffcc 	andi	r2,r2,65535
 4007148:	1005003a 	cmpeq	r2,r2,zero
 400714c:	10803fcc 	andi	r2,r2,255
 4007150:	10000226 	beq	r2,zero,400715c <_ZN8MAX3421e4InitEv+0x50>
		return ( -1);
 4007154:	00bfffc4 	movi	r2,-1
 4007158:	00002006 	br	40071dc <_ZN8MAX3421e4InitEv+0xd0>
	}

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 400715c:	01803044 	movi	r6,193
 4007160:	01403604 	movi	r5,216
 4007164:	e13fff17 	ldw	r4,-4(fp)
 4007168:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 400716c:	01801804 	movi	r6,96
 4007170:	01403404 	movi	r5,208
 4007174:	e13fff17 	ldw	r4,-4(fp)
 4007178:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 400717c:	01800104 	movi	r6,4
 4007180:	01403a04 	movi	r5,232
 4007184:	e13fff17 	ldw	r4,-4(fp)
 4007188:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 400718c:	01403a04 	movi	r5,232
 4007190:	e13fff17 	ldw	r4,-4(fp)
 4007194:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 4007198:	10803fcc 	andi	r2,r2,255
 400719c:	1080010c 	andi	r2,r2,4
 40071a0:	1005003a 	cmpeq	r2,r2,zero
 40071a4:	10803fcc 	andi	r2,r2,255
 40071a8:	10000126 	beq	r2,zero,40071b0 <_ZN8MAX3421e4InitEv+0xa4>
 40071ac:	003ff706 	br	400718c <__alt_data_end+0xfc00718c>

	busprobe(); //check if anything is connected
 40071b0:	e13fff17 	ldw	r4,-4(fp)
 40071b4:	40073080 	call	4007308 <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 40071b8:	01800804 	movi	r6,32
 40071bc:	01403204 	movi	r5,200
 40071c0:	e13fff17 	ldw	r4,-4(fp)
 40071c4:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
 40071c8:	01800044 	movi	r6,1
 40071cc:	01402004 	movi	r5,128
 40071d0:	e13fff17 	ldw	r4,-4(fp)
 40071d4:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>

	return ( 0);                           //enable interrupt pin
 40071d8:	0005883a 	mov	r2,zero
}
 40071dc:	e037883a 	mov	sp,fp
 40071e0:	dfc00117 	ldw	ra,4(sp)
 40071e4:	df000017 	ldw	fp,0(sp)
 40071e8:	dec00204 	addi	sp,sp,8
 40071ec:	f800283a 	ret

040071f0 <_ZN8MAX3421e4InitEi>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init(int mseconds) {
 40071f0:	defffc04 	addi	sp,sp,-16
 40071f4:	dfc00315 	stw	ra,12(sp)
 40071f8:	df000215 	stw	fp,8(sp)
 40071fc:	df000204 	addi	fp,sp,8
 4007200:	e13ffe15 	stw	r4,-8(fp)
 4007204:	e17fff15 	stw	r5,-4(fp)
	printf("MAX3421e Init mseconds\n");
 4007208:	010100b4 	movhi	r4,1026
 400720c:	213dad04 	addi	r4,r4,-2380
 4007210:	400bbd00 	call	400bbd0 <puts>
	/* MAX3421E - full-duplex SPI, level interrupt, vbus off */
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL | GPX_VBDET));
 4007214:	01800644 	movi	r6,25
 4007218:	01402204 	movi	r5,136
 400721c:	e13ffe17 	ldw	r4,-8(fp)
 4007220:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 4007224:	e13ffe17 	ldw	r4,-8(fp)
 4007228:	40070180 	call	4007018 <_ZN8MAX3421e5resetEv>
 400722c:	10bfffcc 	andi	r2,r2,65535
 4007230:	1005003a 	cmpeq	r2,r2,zero
 4007234:	10803fcc 	andi	r2,r2,255
 4007238:	10000226 	beq	r2,zero,4007244 <_ZN8MAX3421e4InitEi+0x54>
		return ( -1);
 400723c:	00bfffc4 	movi	r2,-1
 4007240:	00002c06 	br	40072f4 <_ZN8MAX3421e4InitEi+0x104>
	}

	// Delay a minimum of 1 second to ensure any capacitors are drained.
	// 1 second is required to make sure we do not smoke a Microdrive!
	if(mseconds < 1000) mseconds = 1000;
 4007244:	e0bfff17 	ldw	r2,-4(fp)
 4007248:	1080fa08 	cmpgei	r2,r2,1000
 400724c:	1000021e 	bne	r2,zero,4007258 <_ZN8MAX3421e4InitEi+0x68>
 4007250:	0080fa04 	movi	r2,1000
 4007254:	e0bfff15 	stw	r2,-4(fp)
	delay(mseconds);
 4007258:	e0bfff17 	ldw	r2,-4(fp)
 400725c:	1009883a 	mov	r4,r2
 4007260:	40005d80 	call	40005d8 <_Z5delaym>

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 4007264:	01803044 	movi	r6,193
 4007268:	01403604 	movi	r5,216
 400726c:	e13ffe17 	ldw	r4,-8(fp)
 4007270:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 4007274:	01801804 	movi	r6,96
 4007278:	01403404 	movi	r5,208
 400727c:	e13ffe17 	ldw	r4,-8(fp)
 4007280:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 4007284:	01800104 	movi	r6,4
 4007288:	01403a04 	movi	r5,232
 400728c:	e13ffe17 	ldw	r4,-8(fp)
 4007290:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 4007294:	01403a04 	movi	r5,232
 4007298:	e13ffe17 	ldw	r4,-8(fp)
 400729c:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 40072a0:	10803fcc 	andi	r2,r2,255
 40072a4:	1080010c 	andi	r2,r2,4
 40072a8:	1005003a 	cmpeq	r2,r2,zero
 40072ac:	10803fcc 	andi	r2,r2,255
 40072b0:	10000126 	beq	r2,zero,40072b8 <_ZN8MAX3421e4InitEi+0xc8>
 40072b4:	003ff706 	br	4007294 <__alt_data_end+0xfc007294>

	busprobe(); //check if anything is connected
 40072b8:	e13ffe17 	ldw	r4,-8(fp)
 40072bc:	40073080 	call	4007308 <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 40072c0:	01800804 	movi	r6,32
 40072c4:	01403204 	movi	r5,200
 40072c8:	e13ffe17 	ldw	r4,-8(fp)
 40072cc:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
 40072d0:	01800044 	movi	r6,1
 40072d4:	01402004 	movi	r5,128
 40072d8:	e13ffe17 	ldw	r4,-8(fp)
 40072dc:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>

	// GPX pin on. This is done here so that busprobe will fail if we have a switch connected.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 40072e0:	01800604 	movi	r6,24
 40072e4:	01402204 	movi	r5,136
 40072e8:	e13ffe17 	ldw	r4,-8(fp)
 40072ec:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>

	return ( 0);
 40072f0:	0005883a 	mov	r2,zero
}
 40072f4:	e037883a 	mov	sp,fp
 40072f8:	dfc00117 	ldw	ra,4(sp)
 40072fc:	df000017 	ldw	fp,0(sp)
 4007300:	dec00204 	addi	sp,sp,8
 4007304:	f800283a 	ret

04007308 <_ZN8MAX3421e8busprobeEv>:

/* probe bus to determine device presence and speed and switch host to this speed */
void MAX3421e::busprobe() {
 4007308:	defffc04 	addi	sp,sp,-16
 400730c:	dfc00315 	stw	ra,12(sp)
 4007310:	df000215 	stw	fp,8(sp)
 4007314:	df000204 	addi	fp,sp,8
 4007318:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e busprobe\n");
 400731c:	010100b4 	movhi	r4,1026
 4007320:	213db304 	addi	r4,r4,-2356
 4007324:	400bbd00 	call	400bbd0 <puts>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
 4007328:	01403e04 	movi	r5,248
 400732c:	e13fff17 	ldw	r4,-4(fp)
 4007330:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 4007334:	e0bffe05 	stb	r2,-8(fp)
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 4007338:	e0fffe03 	ldbu	r3,-8(fp)
 400733c:	00bff004 	movi	r2,-64
 4007340:	1884703a 	and	r2,r3,r2
 4007344:	e0bffe05 	stb	r2,-8(fp)
	switch(bus_sample) { //start full-speed or low-speed host
 4007348:	e0bffe03 	ldbu	r2,-8(fp)
 400734c:	10c01020 	cmpeqi	r3,r2,64
 4007350:	1800251e 	bne	r3,zero,40073e8 <_ZN8MAX3421e8busprobeEv+0xe0>
 4007354:	10c01048 	cmpgei	r3,r2,65
 4007358:	1800021e 	bne	r3,zero,4007364 <_ZN8MAX3421e8busprobeEv+0x5c>
 400735c:	10003b26 	beq	r2,zero,400744c <_ZN8MAX3421e8busprobeEv+0x144>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
 4007360:	00004006 	br	4007464 <_ZN8MAX3421e8busprobeEv+0x15c>
void MAX3421e::busprobe() {
	printf("MAX3421e busprobe\n");
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
 4007364:	10c02020 	cmpeqi	r3,r2,128
 4007368:	1800031e 	bne	r3,zero,4007378 <_ZN8MAX3421e8busprobeEv+0x70>
 400736c:	10803020 	cmpeqi	r2,r2,192
 4007370:	1000331e 	bne	r2,zero,4007440 <_ZN8MAX3421e8busprobeEv+0x138>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
 4007374:	00003b06 	br	4007464 <_ZN8MAX3421e8busprobeEv+0x15c>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
		case( bmJSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
 4007378:	01403604 	movi	r5,216
 400737c:	e13fff17 	ldw	r4,-4(fp)
 4007380:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 4007384:	10803fcc 	andi	r2,r2,255
 4007388:	1080008c 	andi	r2,r2,2
 400738c:	1005003a 	cmpeq	r2,r2,zero
 4007390:	10803fcc 	andi	r2,r2,255
 4007394:	10000a26 	beq	r2,zero,40073c0 <_ZN8MAX3421e8busprobeEv+0xb8>
				printf("Starting full-speed host\n");
 4007398:	010100b4 	movhi	r4,1026
 400739c:	213db804 	addi	r4,r4,-2336
 40073a0:	400bbd00 	call	400bbd0 <puts>
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
 40073a4:	01803244 	movi	r6,201
 40073a8:	01403604 	movi	r5,216
 40073ac:	e13fff17 	ldw	r4,-4(fp)
 40073b0:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
 40073b4:	00800084 	movi	r2,2
 40073b8:	d0b23345 	stb	r2,-14131(gp)
			} else {
				printf("Starting low-speed host\n");
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			}
			break;
 40073bc:	00002906 	br	4007464 <_ZN8MAX3421e8busprobeEv+0x15c>
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				printf("Starting full-speed host\n");
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			} else {
				printf("Starting low-speed host\n");
 40073c0:	010100b4 	movhi	r4,1026
 40073c4:	213dbf04 	addi	r4,r4,-2308
 40073c8:	400bbd00 	call	400bbd0 <puts>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
 40073cc:	018032c4 	movi	r6,203
 40073d0:	01403604 	movi	r5,216
 40073d4:	e13fff17 	ldw	r4,-4(fp)
 40073d8:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
 40073dc:	008000c4 	movi	r2,3
 40073e0:	d0b23345 	stb	r2,-14131(gp)
			}
			break;
 40073e4:	00001f06 	br	4007464 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
 40073e8:	01403604 	movi	r5,216
 40073ec:	e13fff17 	ldw	r4,-4(fp)
 40073f0:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 40073f4:	10803fcc 	andi	r2,r2,255
 40073f8:	1080008c 	andi	r2,r2,2
 40073fc:	1005003a 	cmpeq	r2,r2,zero
 4007400:	10803fcc 	andi	r2,r2,255
 4007404:	10000726 	beq	r2,zero,4007424 <_ZN8MAX3421e8busprobeEv+0x11c>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
 4007408:	018032c4 	movi	r6,203
 400740c:	01403604 	movi	r5,216
 4007410:	e13fff17 	ldw	r4,-4(fp)
 4007414:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
 4007418:	008000c4 	movi	r2,3
 400741c:	d0b23345 	stb	r2,-14131(gp)
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			}
			break;
 4007420:	00001006 	br	4007464 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
 4007424:	01803244 	movi	r6,201
 4007428:	01403604 	movi	r5,216
 400742c:	e13fff17 	ldw	r4,-4(fp)
 4007430:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
 4007434:	00800084 	movi	r2,2
 4007438:	d0b23345 	stb	r2,-14131(gp)
			}
			break;
 400743c:	00000906 	br	4007464 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE1): //illegal state
			vbusState = SE1;
 4007440:	00800044 	movi	r2,1
 4007444:	d0b23345 	stb	r2,-14131(gp)
			break;
 4007448:	00000606 	br	4007464 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 400744c:	01803444 	movi	r6,209
 4007450:	01403604 	movi	r5,216
 4007454:	e13fff17 	ldw	r4,-4(fp)
 4007458:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
			vbusState = SE0;
 400745c:	d0323345 	stb	zero,-14131(gp)
			break;
 4007460:	0001883a 	nop
	}//end switch( bus_sample )
}
 4007464:	0001883a 	nop
 4007468:	e037883a 	mov	sp,fp
 400746c:	dfc00117 	ldw	ra,4(sp)
 4007470:	df000017 	ldw	fp,0(sp)
 4007474:	dec00204 	addi	sp,sp,8
 4007478:	f800283a 	ret

0400747c <_ZN8MAX3421e4TaskEv>:

/* MAX3421 state change task and interrupt handler */
uint8_t MAX3421e::Task(void) {
 400747c:	defffc04 	addi	sp,sp,-16
 4007480:	dfc00315 	stw	ra,12(sp)
 4007484:	df000215 	stw	fp,8(sp)
 4007488:	df000204 	addi	fp,sp,8
 400748c:	e13fff15 	stw	r4,-4(fp)
//	printf("MAX3421e Task\n");

	uint8_t rcode = 0;
 4007490:	e03ffe05 	stb	zero,-8(fp)
	uint8_t pinvalue;
	//USB_HOST_SERIAL.print("Vbus state: ");
	//USB_HOST_SERIAL.println( vbusState, HEX );
	pinvalue = *((uint8_t*) USB_IRQ_BASE); //Read();
 4007494:	00820034 	movhi	r2,2048
 4007498:	10844404 	addi	r2,r2,4368
 400749c:	10800003 	ldbu	r2,0(r2)
 40074a0:	e0bffe45 	stb	r2,-7(fp)
	//pinvalue = digitalRead( MAX_INT );
	if(IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 40074a4:	00820034 	movhi	r2,2048
 40074a8:	10844404 	addi	r2,r2,4368
 40074ac:	10800037 	ldwio	r2,0(r2)
 40074b0:	1005003a 	cmpeq	r2,r2,zero
 40074b4:	10803fcc 	andi	r2,r2,255
 40074b8:	10000326 	beq	r2,zero,40074c8 <_ZN8MAX3421e4TaskEv+0x4c>
		rcode = IntHandler();
 40074bc:	e13fff17 	ldw	r4,-4(fp)
 40074c0:	40074e00 	call	40074e0 <_ZN8MAX3421e10IntHandlerEv>
 40074c4:	e0bffe05 	stb	r2,-8(fp)
	//    pinvalue = digitalRead( MAX_GPX );
	//    if( pinvalue == LOW ) {
	//        GpxHandler();
	//    }
	//    usbSM();                                //USB state machine
	return ( rcode);
 40074c8:	e0bffe03 	ldbu	r2,-8(fp)
}
 40074cc:	e037883a 	mov	sp,fp
 40074d0:	dfc00117 	ldw	ra,4(sp)
 40074d4:	df000017 	ldw	fp,0(sp)
 40074d8:	dec00204 	addi	sp,sp,8
 40074dc:	f800283a 	ret

040074e0 <_ZN8MAX3421e10IntHandlerEv>:

uint8_t MAX3421e::IntHandler() {
 40074e0:	defffc04 	addi	sp,sp,-16
 40074e4:	dfc00315 	stw	ra,12(sp)
 40074e8:	df000215 	stw	fp,8(sp)
 40074ec:	df000204 	addi	fp,sp,8
 40074f0:	e13fff15 	stw	r4,-4(fp)
	uint8_t HIRQ;
	uint8_t HIRQ_sendback = 0x00;
 40074f4:	e03ffe05 	stb	zero,-8(fp)
	HIRQ = regRd(rHIRQ); //determine interrupt source
 40074f8:	01403204 	movi	r5,200
 40074fc:	e13fff17 	ldw	r4,-4(fp)
 4007500:	4006e1c0 	call	4006e1c <_ZN8MAX3421e5regRdEh>
 4007504:	e0bffe45 	stb	r2,-7(fp)

	//if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
	//    HIRQ_sendback |= bmFRAMEIRQ;
	//}//end FRAMEIRQ handling
	if(HIRQ & bmCONDETIRQ) {
 4007508:	e0bffe43 	ldbu	r2,-7(fp)
 400750c:	1080080c 	andi	r2,r2,32
 4007510:	10000526 	beq	r2,zero,4007528 <_ZN8MAX3421e10IntHandlerEv+0x48>
		busprobe();
 4007514:	e13fff17 	ldw	r4,-4(fp)
 4007518:	40073080 	call	4007308 <_ZN8MAX3421e8busprobeEv>
		HIRQ_sendback |= bmCONDETIRQ;
 400751c:	e0bffe03 	ldbu	r2,-8(fp)
 4007520:	10800814 	ori	r2,r2,32
 4007524:	e0bffe05 	stb	r2,-8(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	regWr(rHIRQ, HIRQ_sendback);
 4007528:	e0bffe03 	ldbu	r2,-8(fp)
 400752c:	100d883a 	mov	r6,r2
 4007530:	01403204 	movi	r5,200
 4007534:	e13fff17 	ldw	r4,-4(fp)
 4007538:	4006be80 	call	4006be8 <_ZN8MAX3421e5regWrEhh>
	return ( HIRQ_sendback);
 400753c:	e0bffe03 	ldbu	r2,-8(fp)
}
 4007540:	e037883a 	mov	sp,fp
 4007544:	dfc00117 	ldw	ra,4(sp)
 4007548:	df000017 	ldw	fp,0(sp)
 400754c:	dec00204 	addi	sp,sp,8
 4007550:	f800283a 	ret

04007554 <_ZN8MAX3421e10GpxHandlerEv>:

uint8_t MAX3421e::GpxHandler()
{
 4007554:	defffe04 	addi	sp,sp,-8
 4007558:	df000115 	stw	fp,4(sp)
 400755c:	df000104 	addi	fp,sp,4
 4007560:	e13fff15 	stw	r4,-4(fp)
	//BYTE GPINIRQ;
	//GPINIRQ = regRd( rGPINIRQ);            //read both IRQ registers
	return 0;
 4007564:	0005883a 	mov	r2,zero
}
 4007568:	e037883a 	mov	sp,fp
 400756c:	df000017 	ldw	fp,0(sp)
 4007570:	dec00104 	addi	sp,sp,4
 4007574:	f800283a 	ret

04007578 <_Z3maplllll>:
/*
 Example sketch for the Xbox ONE USB library - by guruthree, based on work by
 Kristian Lauszus.
 */

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 4007578:	defffa04 	addi	sp,sp,-24
 400757c:	dfc00515 	stw	ra,20(sp)
 4007580:	df000415 	stw	fp,16(sp)
 4007584:	df000404 	addi	fp,sp,16
 4007588:	e13ffc15 	stw	r4,-16(fp)
 400758c:	e17ffd15 	stw	r5,-12(fp)
 4007590:	e1bffe15 	stw	r6,-8(fp)
 4007594:	e1ffff15 	stw	r7,-4(fp)
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 4007598:	e0fffc17 	ldw	r3,-16(fp)
 400759c:	e0bffd17 	ldw	r2,-12(fp)
 40075a0:	1889c83a 	sub	r4,r3,r2
 40075a4:	e0c00217 	ldw	r3,8(fp)
 40075a8:	e0bfff17 	ldw	r2,-4(fp)
 40075ac:	1885c83a 	sub	r2,r3,r2
 40075b0:	100b883a 	mov	r5,r2
 40075b4:	400aa340 	call	400aa34 <__mulsi3>
 40075b8:	1009883a 	mov	r4,r2
 40075bc:	e0fffe17 	ldw	r3,-8(fp)
 40075c0:	e0bffd17 	ldw	r2,-12(fp)
 40075c4:	1885c83a 	sub	r2,r3,r2
 40075c8:	100b883a 	mov	r5,r2
 40075cc:	400a8800 	call	400a880 <__divsi3>
 40075d0:	1007883a 	mov	r3,r2
 40075d4:	e0bfff17 	ldw	r2,-4(fp)
 40075d8:	1885883a 	add	r2,r3,r2
}
 40075dc:	e037883a 	mov	sp,fp
 40075e0:	dfc00117 	ldw	ra,4(sp)
 40075e4:	df000017 	ldw	fp,0(sp)
 40075e8:	dec00204 	addi	sp,sp,8
 40075ec:	f800283a 	ret

040075f0 <_Z10xbox_setupv>:

void xbox_setup() {
 40075f0:	defffe04 	addi	sp,sp,-8
 40075f4:	dfc00115 	stw	ra,4(sp)
 40075f8:	df000015 	stw	fp,0(sp)
 40075fc:	d839883a 	mov	fp,sp
	if (Usb.Init() == -1)
 4007600:	010100f4 	movhi	r4,1027
 4007604:	21209404 	addi	r4,r4,-32176
 4007608:	400710c0 	call	400710c <_ZN8MAX3421e4InitEv>
 400760c:	10803fcc 	andi	r2,r2,255
 4007610:	1080201c 	xori	r2,r2,128
 4007614:	10bfe004 	addi	r2,r2,-128
 4007618:	10bfffe0 	cmpeqi	r2,r2,-1
 400761c:	10803fcc 	andi	r2,r2,255
 4007620:	10000326 	beq	r2,zero,4007630 <_Z10xbox_setupv+0x40>
		printf ("Error\n\r");
 4007624:	010100b4 	movhi	r4,1026
 4007628:	2105fc04 	addi	r4,r4,6128
 400762c:	400bab40 	call	400bab4 <printf>
	printf ("USB Started\n\r");
 4007630:	010100b4 	movhi	r4,1026
 4007634:	2105fe04 	addi	r4,r4,6136
 4007638:	400bab40 	call	400bab4 <printf>
}
 400763c:	0001883a 	nop
 4007640:	e037883a 	mov	sp,fp
 4007644:	dfc00117 	ldw	ra,4(sp)
 4007648:	df000017 	ldw	fp,0(sp)
 400764c:	dec00204 	addi	sp,sp,8
 4007650:	f800283a 	ret

04007654 <_Z9xbox_loopv>:


void xbox_loop() {
 4007654:	defffc04 	addi	sp,sp,-16
 4007658:	dfc00315 	stw	ra,12(sp)
 400765c:	df000215 	stw	fp,8(sp)
 4007660:	df000204 	addi	fp,sp,8
  Usb.Task();
 4007664:	010100f4 	movhi	r4,1027
 4007668:	21209404 	addi	r4,r4,-32176
 400766c:	40017700 	call	4001770 <_ZN3USB4TaskEv>

  if (Xbox.XboxOneConnected) {
 4007670:	008100f4 	movhi	r2,1027
 4007674:	10a0c304 	addi	r2,r2,-31988
 4007678:	10800203 	ldbu	r2,8(r2)
 400767c:	10803fcc 	andi	r2,r2,255
 4007680:	10020d26 	beq	r2,zero,4007eb8 <_Z9xbox_loopv+0x864>
	Xbox.setRumbleOff();
 4007684:	010100f4 	movhi	r4,1027
 4007688:	2120c304 	addi	r4,r4,-31988
 400768c:	40046100 	call	4004610 <_ZN7XBOXONE12setRumbleOffEv>
    if (Xbox.getAnalogHat(LeftHatX) > 7500 || Xbox.getAnalogHat(LeftHatX) < -7500 || Xbox.getAnalogHat(LeftHatY) > 7500 || Xbox.getAnalogHat(LeftHatY) < -7500 || Xbox.getAnalogHat(RightHatX) > 7500 || Xbox.getAnalogHat(RightHatX) < -7500 || Xbox.getAnalogHat(RightHatY) > 7500 || Xbox.getAnalogHat(RightHatY) < -7500) {
 4007690:	000b883a 	mov	r5,zero
 4007694:	010100f4 	movhi	r4,1027
 4007698:	2120c304 	addi	r4,r4,-31988
 400769c:	40044900 	call	4004490 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>
 40076a0:	10bfffcc 	andi	r2,r2,65535
 40076a4:	10a0001c 	xori	r2,r2,32768
 40076a8:	10a00004 	addi	r2,r2,-32768
 40076ac:	10875348 	cmpgei	r2,r2,7501
 40076b0:	10003f1e 	bne	r2,zero,40077b0 <_Z9xbox_loopv+0x15c>
 40076b4:	000b883a 	mov	r5,zero
 40076b8:	010100f4 	movhi	r4,1027
 40076bc:	2120c304 	addi	r4,r4,-31988
 40076c0:	40044900 	call	4004490 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>
 40076c4:	10bfffcc 	andi	r2,r2,65535
 40076c8:	10a0001c 	xori	r2,r2,32768
 40076cc:	10a00004 	addi	r2,r2,-32768
 40076d0:	10b8ad10 	cmplti	r2,r2,-7500
 40076d4:	1000361e 	bne	r2,zero,40077b0 <_Z9xbox_loopv+0x15c>
 40076d8:	01400044 	movi	r5,1
 40076dc:	010100f4 	movhi	r4,1027
 40076e0:	2120c304 	addi	r4,r4,-31988
 40076e4:	40044900 	call	4004490 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>
 40076e8:	10bfffcc 	andi	r2,r2,65535
 40076ec:	10a0001c 	xori	r2,r2,32768
 40076f0:	10a00004 	addi	r2,r2,-32768
 40076f4:	10875348 	cmpgei	r2,r2,7501
 40076f8:	10002d1e 	bne	r2,zero,40077b0 <_Z9xbox_loopv+0x15c>
 40076fc:	01400044 	movi	r5,1
 4007700:	010100f4 	movhi	r4,1027
 4007704:	2120c304 	addi	r4,r4,-31988
 4007708:	40044900 	call	4004490 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>
 400770c:	10bfffcc 	andi	r2,r2,65535
 4007710:	10a0001c 	xori	r2,r2,32768
 4007714:	10a00004 	addi	r2,r2,-32768
 4007718:	10b8ad10 	cmplti	r2,r2,-7500
 400771c:	1000241e 	bne	r2,zero,40077b0 <_Z9xbox_loopv+0x15c>
 4007720:	01400084 	movi	r5,2
 4007724:	010100f4 	movhi	r4,1027
 4007728:	2120c304 	addi	r4,r4,-31988
 400772c:	40044900 	call	4004490 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>
 4007730:	10bfffcc 	andi	r2,r2,65535
 4007734:	10a0001c 	xori	r2,r2,32768
 4007738:	10a00004 	addi	r2,r2,-32768
 400773c:	10875348 	cmpgei	r2,r2,7501
 4007740:	10001b1e 	bne	r2,zero,40077b0 <_Z9xbox_loopv+0x15c>
 4007744:	01400084 	movi	r5,2
 4007748:	010100f4 	movhi	r4,1027
 400774c:	2120c304 	addi	r4,r4,-31988
 4007750:	40044900 	call	4004490 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>
 4007754:	10bfffcc 	andi	r2,r2,65535
 4007758:	10a0001c 	xori	r2,r2,32768
 400775c:	10a00004 	addi	r2,r2,-32768
 4007760:	10b8ad10 	cmplti	r2,r2,-7500
 4007764:	1000121e 	bne	r2,zero,40077b0 <_Z9xbox_loopv+0x15c>
 4007768:	014000c4 	movi	r5,3
 400776c:	010100f4 	movhi	r4,1027
 4007770:	2120c304 	addi	r4,r4,-31988
 4007774:	40044900 	call	4004490 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>
 4007778:	10bfffcc 	andi	r2,r2,65535
 400777c:	10a0001c 	xori	r2,r2,32768
 4007780:	10a00004 	addi	r2,r2,-32768
 4007784:	10875348 	cmpgei	r2,r2,7501
 4007788:	1000091e 	bne	r2,zero,40077b0 <_Z9xbox_loopv+0x15c>
 400778c:	014000c4 	movi	r5,3
 4007790:	010100f4 	movhi	r4,1027
 4007794:	2120c304 	addi	r4,r4,-31988
 4007798:	40044900 	call	4004490 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>
 400779c:	10bfffcc 	andi	r2,r2,65535
 40077a0:	10a0001c 	xori	r2,r2,32768
 40077a4:	10a00004 	addi	r2,r2,-32768
 40077a8:	10b8ad08 	cmpgei	r2,r2,-7500
 40077ac:	1000021e 	bne	r2,zero,40077b8 <_Z9xbox_loopv+0x164>
 40077b0:	00800044 	movi	r2,1
 40077b4:	00000106 	br	40077bc <_Z9xbox_loopv+0x168>
 40077b8:	0005883a 	mov	r2,zero
 40077bc:	10803fcc 	andi	r2,r2,255
 40077c0:	10009726 	beq	r2,zero,4007a20 <_Z9xbox_loopv+0x3cc>
      if (Xbox.getAnalogHat(LeftHatX) > 7500 || Xbox.getAnalogHat(LeftHatX) < -7500) {
 40077c4:	000b883a 	mov	r5,zero
 40077c8:	010100f4 	movhi	r4,1027
 40077cc:	2120c304 	addi	r4,r4,-31988
 40077d0:	40044900 	call	4004490 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>
 40077d4:	10bfffcc 	andi	r2,r2,65535
 40077d8:	10a0001c 	xori	r2,r2,32768
 40077dc:	10a00004 	addi	r2,r2,-32768
 40077e0:	10875348 	cmpgei	r2,r2,7501
 40077e4:	1000091e 	bne	r2,zero,400780c <_Z9xbox_loopv+0x1b8>
 40077e8:	000b883a 	mov	r5,zero
 40077ec:	010100f4 	movhi	r4,1027
 40077f0:	2120c304 	addi	r4,r4,-31988
 40077f4:	40044900 	call	4004490 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>
 40077f8:	10bfffcc 	andi	r2,r2,65535
 40077fc:	10a0001c 	xori	r2,r2,32768
 4007800:	10a00004 	addi	r2,r2,-32768
 4007804:	10b8ad08 	cmpgei	r2,r2,-7500
 4007808:	1000021e 	bne	r2,zero,4007814 <_Z9xbox_loopv+0x1c0>
 400780c:	00800044 	movi	r2,1
 4007810:	00000106 	br	4007818 <_Z9xbox_loopv+0x1c4>
 4007814:	0005883a 	mov	r2,zero
 4007818:	10803fcc 	andi	r2,r2,255
 400781c:	10000e26 	beq	r2,zero,4007858 <_Z9xbox_loopv+0x204>
        printf("LeftHatX: ");
 4007820:	010100b4 	movhi	r4,1026
 4007824:	21060204 	addi	r4,r4,6152
 4007828:	400bab40 	call	400bab4 <printf>
        printf("%d   ",Xbox.getAnalogHat(LeftHatX));
 400782c:	000b883a 	mov	r5,zero
 4007830:	010100f4 	movhi	r4,1027
 4007834:	2120c304 	addi	r4,r4,-31988
 4007838:	40044900 	call	4004490 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>
 400783c:	10bfffcc 	andi	r2,r2,65535
 4007840:	10a0001c 	xori	r2,r2,32768
 4007844:	10a00004 	addi	r2,r2,-32768
 4007848:	100b883a 	mov	r5,r2
 400784c:	010100b4 	movhi	r4,1026
 4007850:	21060504 	addi	r4,r4,6164
 4007854:	400bab40 	call	400bab4 <printf>
      }
      if (Xbox.getAnalogHat(LeftHatY) > 7500 || Xbox.getAnalogHat(LeftHatY) < -7500) {
 4007858:	01400044 	movi	r5,1
 400785c:	010100f4 	movhi	r4,1027
 4007860:	2120c304 	addi	r4,r4,-31988
 4007864:	40044900 	call	4004490 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>
 4007868:	10bfffcc 	andi	r2,r2,65535
 400786c:	10a0001c 	xori	r2,r2,32768
 4007870:	10a00004 	addi	r2,r2,-32768
 4007874:	10875348 	cmpgei	r2,r2,7501
 4007878:	1000091e 	bne	r2,zero,40078a0 <_Z9xbox_loopv+0x24c>
 400787c:	01400044 	movi	r5,1
 4007880:	010100f4 	movhi	r4,1027
 4007884:	2120c304 	addi	r4,r4,-31988
 4007888:	40044900 	call	4004490 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>
 400788c:	10bfffcc 	andi	r2,r2,65535
 4007890:	10a0001c 	xori	r2,r2,32768
 4007894:	10a00004 	addi	r2,r2,-32768
 4007898:	10b8ad08 	cmpgei	r2,r2,-7500
 400789c:	1000021e 	bne	r2,zero,40078a8 <_Z9xbox_loopv+0x254>
 40078a0:	00800044 	movi	r2,1
 40078a4:	00000106 	br	40078ac <_Z9xbox_loopv+0x258>
 40078a8:	0005883a 	mov	r2,zero
 40078ac:	10803fcc 	andi	r2,r2,255
 40078b0:	10000e26 	beq	r2,zero,40078ec <_Z9xbox_loopv+0x298>
          printf("LeftHatY: ");
 40078b4:	010100b4 	movhi	r4,1026
 40078b8:	21060704 	addi	r4,r4,6172
 40078bc:	400bab40 	call	400bab4 <printf>
          printf("%d   ",Xbox.getAnalogHat(LeftHatY));
 40078c0:	01400044 	movi	r5,1
 40078c4:	010100f4 	movhi	r4,1027
 40078c8:	2120c304 	addi	r4,r4,-31988
 40078cc:	40044900 	call	4004490 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>
 40078d0:	10bfffcc 	andi	r2,r2,65535
 40078d4:	10a0001c 	xori	r2,r2,32768
 40078d8:	10a00004 	addi	r2,r2,-32768
 40078dc:	100b883a 	mov	r5,r2
 40078e0:	010100b4 	movhi	r4,1026
 40078e4:	21060504 	addi	r4,r4,6164
 40078e8:	400bab40 	call	400bab4 <printf>
      }
      if (Xbox.getAnalogHat(RightHatX) > 7500 || Xbox.getAnalogHat(RightHatX) < -7500) {
 40078ec:	01400084 	movi	r5,2
 40078f0:	010100f4 	movhi	r4,1027
 40078f4:	2120c304 	addi	r4,r4,-31988
 40078f8:	40044900 	call	4004490 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>
 40078fc:	10bfffcc 	andi	r2,r2,65535
 4007900:	10a0001c 	xori	r2,r2,32768
 4007904:	10a00004 	addi	r2,r2,-32768
 4007908:	10875348 	cmpgei	r2,r2,7501
 400790c:	1000091e 	bne	r2,zero,4007934 <_Z9xbox_loopv+0x2e0>
 4007910:	01400084 	movi	r5,2
 4007914:	010100f4 	movhi	r4,1027
 4007918:	2120c304 	addi	r4,r4,-31988
 400791c:	40044900 	call	4004490 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>
 4007920:	10bfffcc 	andi	r2,r2,65535
 4007924:	10a0001c 	xori	r2,r2,32768
 4007928:	10a00004 	addi	r2,r2,-32768
 400792c:	10b8ad08 	cmpgei	r2,r2,-7500
 4007930:	1000021e 	bne	r2,zero,400793c <_Z9xbox_loopv+0x2e8>
 4007934:	00800044 	movi	r2,1
 4007938:	00000106 	br	4007940 <_Z9xbox_loopv+0x2ec>
 400793c:	0005883a 	mov	r2,zero
 4007940:	10803fcc 	andi	r2,r2,255
 4007944:	10000e26 	beq	r2,zero,4007980 <_Z9xbox_loopv+0x32c>
          printf("RightHatX: ");
 4007948:	010100b4 	movhi	r4,1026
 400794c:	21060a04 	addi	r4,r4,6184
 4007950:	400bab40 	call	400bab4 <printf>
          printf("%d   ",Xbox.getAnalogHat(RightHatX));
 4007954:	01400084 	movi	r5,2
 4007958:	010100f4 	movhi	r4,1027
 400795c:	2120c304 	addi	r4,r4,-31988
 4007960:	40044900 	call	4004490 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>
 4007964:	10bfffcc 	andi	r2,r2,65535
 4007968:	10a0001c 	xori	r2,r2,32768
 400796c:	10a00004 	addi	r2,r2,-32768
 4007970:	100b883a 	mov	r5,r2
 4007974:	010100b4 	movhi	r4,1026
 4007978:	21060504 	addi	r4,r4,6164
 400797c:	400bab40 	call	400bab4 <printf>
      }
      if (Xbox.getAnalogHat(RightHatY) > 7500 || Xbox.getAnalogHat(RightHatY) < -7500) {
 4007980:	014000c4 	movi	r5,3
 4007984:	010100f4 	movhi	r4,1027
 4007988:	2120c304 	addi	r4,r4,-31988
 400798c:	40044900 	call	4004490 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>
 4007990:	10bfffcc 	andi	r2,r2,65535
 4007994:	10a0001c 	xori	r2,r2,32768
 4007998:	10a00004 	addi	r2,r2,-32768
 400799c:	10875348 	cmpgei	r2,r2,7501
 40079a0:	1000091e 	bne	r2,zero,40079c8 <_Z9xbox_loopv+0x374>
 40079a4:	014000c4 	movi	r5,3
 40079a8:	010100f4 	movhi	r4,1027
 40079ac:	2120c304 	addi	r4,r4,-31988
 40079b0:	40044900 	call	4004490 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>
 40079b4:	10bfffcc 	andi	r2,r2,65535
 40079b8:	10a0001c 	xori	r2,r2,32768
 40079bc:	10a00004 	addi	r2,r2,-32768
 40079c0:	10b8ad08 	cmpgei	r2,r2,-7500
 40079c4:	1000021e 	bne	r2,zero,40079d0 <_Z9xbox_loopv+0x37c>
 40079c8:	00800044 	movi	r2,1
 40079cc:	00000106 	br	40079d4 <_Z9xbox_loopv+0x380>
 40079d0:	0005883a 	mov	r2,zero
 40079d4:	10803fcc 	andi	r2,r2,255
 40079d8:	10000e26 	beq	r2,zero,4007a14 <_Z9xbox_loopv+0x3c0>
          printf("RightHatY: ");
 40079dc:	010100b4 	movhi	r4,1026
 40079e0:	21060d04 	addi	r4,r4,6196
 40079e4:	400bab40 	call	400bab4 <printf>
          printf("%d   ",Xbox.getAnalogHat(RightHatY));
 40079e8:	014000c4 	movi	r5,3
 40079ec:	010100f4 	movhi	r4,1027
 40079f0:	2120c304 	addi	r4,r4,-31988
 40079f4:	40044900 	call	4004490 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>
 40079f8:	10bfffcc 	andi	r2,r2,65535
 40079fc:	10a0001c 	xori	r2,r2,32768
 4007a00:	10a00004 	addi	r2,r2,-32768
 4007a04:	100b883a 	mov	r5,r2
 4007a08:	010100b4 	movhi	r4,1026
 4007a0c:	21060504 	addi	r4,r4,6164
 4007a10:	400bab40 	call	400bab4 <printf>
      }
      printf("\n\r");
 4007a14:	010100b4 	movhi	r4,1026
 4007a18:	21061004 	addi	r4,r4,6208
 4007a1c:	400bab40 	call	400bab4 <printf>
    }

    if (Xbox.getButtonPress(L2) > 0 || Xbox.getButtonPress(R2) > 0) {
 4007a20:	01400204 	movi	r5,8
 4007a24:	010100f4 	movhi	r4,1027
 4007a28:	2120c304 	addi	r4,r4,-31988
 4007a2c:	40043180 	call	4004318 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>
 4007a30:	10bfffcc 	andi	r2,r2,65535
 4007a34:	1000061e 	bne	r2,zero,4007a50 <_Z9xbox_loopv+0x3fc>
 4007a38:	01400244 	movi	r5,9
 4007a3c:	010100f4 	movhi	r4,1027
 4007a40:	2120c304 	addi	r4,r4,-31988
 4007a44:	40043180 	call	4004318 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>
 4007a48:	10bfffcc 	andi	r2,r2,65535
 4007a4c:	10000226 	beq	r2,zero,4007a58 <_Z9xbox_loopv+0x404>
 4007a50:	00800044 	movi	r2,1
 4007a54:	00000106 	br	4007a5c <_Z9xbox_loopv+0x408>
 4007a58:	0005883a 	mov	r2,zero
 4007a5c:	10803fcc 	andi	r2,r2,255
 4007a60:	10002b26 	beq	r2,zero,4007b10 <_Z9xbox_loopv+0x4bc>
      if (Xbox.getButtonPress(L2) > 0) {
 4007a64:	01400204 	movi	r5,8
 4007a68:	010100f4 	movhi	r4,1027
 4007a6c:	2120c304 	addi	r4,r4,-31988
 4007a70:	40043180 	call	4004318 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>
 4007a74:	10bfffcc 	andi	r2,r2,65535
 4007a78:	1004c03a 	cmpne	r2,r2,zero
 4007a7c:	10803fcc 	andi	r2,r2,255
 4007a80:	10000c26 	beq	r2,zero,4007ab4 <_Z9xbox_loopv+0x460>
        printf("L2: ");
 4007a84:	010100b4 	movhi	r4,1026
 4007a88:	21061104 	addi	r4,r4,6212
 4007a8c:	400bab40 	call	400bab4 <printf>
        printf("%d   ",Xbox.getButtonPress(L2));
 4007a90:	01400204 	movi	r5,8
 4007a94:	010100f4 	movhi	r4,1027
 4007a98:	2120c304 	addi	r4,r4,-31988
 4007a9c:	40043180 	call	4004318 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>
 4007aa0:	10bfffcc 	andi	r2,r2,65535
 4007aa4:	100b883a 	mov	r5,r2
 4007aa8:	010100b4 	movhi	r4,1026
 4007aac:	21060504 	addi	r4,r4,6164
 4007ab0:	400bab40 	call	400bab4 <printf>
        }
      if (Xbox.getButtonPress(R2) > 0) {
 4007ab4:	01400244 	movi	r5,9
 4007ab8:	010100f4 	movhi	r4,1027
 4007abc:	2120c304 	addi	r4,r4,-31988
 4007ac0:	40043180 	call	4004318 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>
 4007ac4:	10bfffcc 	andi	r2,r2,65535
 4007ac8:	1004c03a 	cmpne	r2,r2,zero
 4007acc:	10803fcc 	andi	r2,r2,255
 4007ad0:	10000c26 	beq	r2,zero,4007b04 <_Z9xbox_loopv+0x4b0>
         printf("R2: ");
 4007ad4:	010100b4 	movhi	r4,1026
 4007ad8:	21061304 	addi	r4,r4,6220
 4007adc:	400bab40 	call	400bab4 <printf>
         printf("%d   ",Xbox.getButtonPress(R2));
 4007ae0:	01400244 	movi	r5,9
 4007ae4:	010100f4 	movhi	r4,1027
 4007ae8:	2120c304 	addi	r4,r4,-31988
 4007aec:	40043180 	call	4004318 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>
 4007af0:	10bfffcc 	andi	r2,r2,65535
 4007af4:	100b883a 	mov	r5,r2
 4007af8:	010100b4 	movhi	r4,1026
 4007afc:	21060504 	addi	r4,r4,6164
 4007b00:	400bab40 	call	400bab4 <printf>
        }
      printf("\n\r");
 4007b04:	010100b4 	movhi	r4,1026
 4007b08:	21061004 	addi	r4,r4,6208
 4007b0c:	400bab40 	call	400bab4 <printf>
    }

    // Set rumble effect
    static uint16_t oldL2Value, oldR2Value;
    if (Xbox.getButtonPress(L2) != oldL2Value || Xbox.getButtonPress(R2) != oldR2Value) {
 4007b10:	01400204 	movi	r5,8
 4007b14:	010100f4 	movhi	r4,1027
 4007b18:	2120c304 	addi	r4,r4,-31988
 4007b1c:	40043180 	call	4004318 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>
 4007b20:	1007883a 	mov	r3,r2
 4007b24:	d0b2348b 	ldhu	r2,-14126(gp)
 4007b28:	18ffffcc 	andi	r3,r3,65535
 4007b2c:	10bfffcc 	andi	r2,r2,65535
 4007b30:	1880091e 	bne	r3,r2,4007b58 <_Z9xbox_loopv+0x504>
 4007b34:	01400244 	movi	r5,9
 4007b38:	010100f4 	movhi	r4,1027
 4007b3c:	2120c304 	addi	r4,r4,-31988
 4007b40:	40043180 	call	4004318 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>
 4007b44:	1007883a 	mov	r3,r2
 4007b48:	d0b2350b 	ldhu	r2,-14124(gp)
 4007b4c:	18ffffcc 	andi	r3,r3,65535
 4007b50:	10bfffcc 	andi	r2,r2,65535
 4007b54:	18800226 	beq	r3,r2,4007b60 <_Z9xbox_loopv+0x50c>
 4007b58:	00800044 	movi	r2,1
 4007b5c:	00000106 	br	4007b64 <_Z9xbox_loopv+0x510>
 4007b60:	0005883a 	mov	r2,zero
 4007b64:	10803fcc 	andi	r2,r2,255
 4007b68:	10003126 	beq	r2,zero,4007c30 <_Z9xbox_loopv+0x5dc>
      oldL2Value = Xbox.getButtonPress(L2);
 4007b6c:	01400204 	movi	r5,8
 4007b70:	010100f4 	movhi	r4,1027
 4007b74:	2120c304 	addi	r4,r4,-31988
 4007b78:	40043180 	call	4004318 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>
 4007b7c:	d0b2348d 	sth	r2,-14126(gp)
      oldR2Value = Xbox.getButtonPress(R2);
 4007b80:	01400244 	movi	r5,9
 4007b84:	010100f4 	movhi	r4,1027
 4007b88:	2120c304 	addi	r4,r4,-31988
 4007b8c:	40043180 	call	4004318 <_ZN7XBOXONE14getButtonPressE10ButtonEnum>
 4007b90:	d0b2350d 	sth	r2,-14124(gp)
      uint8_t leftRumble = map(oldL2Value, 0, 1023, 0, 255); // Map the trigger values into a byte
 4007b94:	d0b2348b 	ldhu	r2,-14126(gp)
 4007b98:	10ffffcc 	andi	r3,r2,65535
 4007b9c:	00803fc4 	movi	r2,255
 4007ba0:	d8800015 	stw	r2,0(sp)
 4007ba4:	000f883a 	mov	r7,zero
 4007ba8:	0180ffc4 	movi	r6,1023
 4007bac:	000b883a 	mov	r5,zero
 4007bb0:	1809883a 	mov	r4,r3
 4007bb4:	40075780 	call	4007578 <_Z3maplllll>
 4007bb8:	e0bfff05 	stb	r2,-4(fp)
      uint8_t rightRumble = map(oldR2Value, 0, 1023, 0, 255);
 4007bbc:	d0b2350b 	ldhu	r2,-14124(gp)
 4007bc0:	10ffffcc 	andi	r3,r2,65535
 4007bc4:	00803fc4 	movi	r2,255
 4007bc8:	d8800015 	stw	r2,0(sp)
 4007bcc:	000f883a 	mov	r7,zero
 4007bd0:	0180ffc4 	movi	r6,1023
 4007bd4:	000b883a 	mov	r5,zero
 4007bd8:	1809883a 	mov	r4,r3
 4007bdc:	40075780 	call	4007578 <_Z3maplllll>
 4007be0:	e0bfff45 	stb	r2,-3(fp)
     if (leftRumble > 0 || rightRumble > 0)
 4007be4:	e0bfff03 	ldbu	r2,-4(fp)
 4007be8:	1000021e 	bne	r2,zero,4007bf4 <_Z9xbox_loopv+0x5a0>
 4007bec:	e0bfff43 	ldbu	r2,-3(fp)
 4007bf0:	10000c26 	beq	r2,zero,4007c24 <_Z9xbox_loopv+0x5d0>
        Xbox.setRumbleOn(leftRumble, rightRumble, leftRumble, rightRumble);
 4007bf4:	e0ffff03 	ldbu	r3,-4(fp)
 4007bf8:	e13fff43 	ldbu	r4,-3(fp)
 4007bfc:	e17fff03 	ldbu	r5,-4(fp)
 4007c00:	e0bfff43 	ldbu	r2,-3(fp)
 4007c04:	d8800015 	stw	r2,0(sp)
 4007c08:	280f883a 	mov	r7,r5
 4007c0c:	200d883a 	mov	r6,r4
 4007c10:	180b883a 	mov	r5,r3
 4007c14:	010100f4 	movhi	r4,1027
 4007c18:	2120c304 	addi	r4,r4,-31988
 4007c1c:	40046880 	call	4004688 <_ZN7XBOXONE11setRumbleOnEhhhh>
 4007c20:	00000306 	br	4007c30 <_Z9xbox_loopv+0x5dc>
     else
        Xbox.setRumbleOff();
 4007c24:	010100f4 	movhi	r4,1027
 4007c28:	2120c304 	addi	r4,r4,-31988
 4007c2c:	40046100 	call	4004610 <_ZN7XBOXONE12setRumbleOffEv>
    }

    if (Xbox.getButtonClick(UP))
 4007c30:	000b883a 	mov	r5,zero
 4007c34:	010100f4 	movhi	r4,1027
 4007c38:	2120c304 	addi	r4,r4,-31988
 4007c3c:	40043a00 	call	40043a0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>
 4007c40:	10803fcc 	andi	r2,r2,255
 4007c44:	10000326 	beq	r2,zero,4007c54 <_Z9xbox_loopv+0x600>
      printf("Up\n\r");
 4007c48:	010100b4 	movhi	r4,1026
 4007c4c:	21061504 	addi	r4,r4,6228
 4007c50:	400bab40 	call	400bab4 <printf>
    if (Xbox.getButtonClick(DOWN))
 4007c54:	01400084 	movi	r5,2
 4007c58:	010100f4 	movhi	r4,1027
 4007c5c:	2120c304 	addi	r4,r4,-31988
 4007c60:	40043a00 	call	40043a0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>
 4007c64:	10803fcc 	andi	r2,r2,255
 4007c68:	10000326 	beq	r2,zero,4007c78 <_Z9xbox_loopv+0x624>
      printf("Down\n\r");
 4007c6c:	010100b4 	movhi	r4,1026
 4007c70:	21061704 	addi	r4,r4,6236
 4007c74:	400bab40 	call	400bab4 <printf>
    if (Xbox.getButtonClick(LEFT))
 4007c78:	014000c4 	movi	r5,3
 4007c7c:	010100f4 	movhi	r4,1027
 4007c80:	2120c304 	addi	r4,r4,-31988
 4007c84:	40043a00 	call	40043a0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>
 4007c88:	10803fcc 	andi	r2,r2,255
 4007c8c:	10000326 	beq	r2,zero,4007c9c <_Z9xbox_loopv+0x648>
      printf("Left\n\r");
 4007c90:	010100b4 	movhi	r4,1026
 4007c94:	21061904 	addi	r4,r4,6244
 4007c98:	400bab40 	call	400bab4 <printf>
    if (Xbox.getButtonClick(RIGHT))
 4007c9c:	01400044 	movi	r5,1
 4007ca0:	010100f4 	movhi	r4,1027
 4007ca4:	2120c304 	addi	r4,r4,-31988
 4007ca8:	40043a00 	call	40043a0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>
 4007cac:	10803fcc 	andi	r2,r2,255
 4007cb0:	10000326 	beq	r2,zero,4007cc0 <_Z9xbox_loopv+0x66c>
      printf("Right\n\r");
 4007cb4:	010100b4 	movhi	r4,1026
 4007cb8:	21061b04 	addi	r4,r4,6252
 4007cbc:	400bab40 	call	400bab4 <printf>

    if (Xbox.getButtonClick(START))
 4007cc0:	01400144 	movi	r5,5
 4007cc4:	010100f4 	movhi	r4,1027
 4007cc8:	2120c304 	addi	r4,r4,-31988
 4007ccc:	40043a00 	call	40043a0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>
 4007cd0:	10803fcc 	andi	r2,r2,255
 4007cd4:	10000326 	beq	r2,zero,4007ce4 <_Z9xbox_loopv+0x690>
      printf("Start\n\r");
 4007cd8:	010100b4 	movhi	r4,1026
 4007cdc:	21061d04 	addi	r4,r4,6260
 4007ce0:	400bab40 	call	400bab4 <printf>
    if (Xbox.getButtonClick(BACK))
 4007ce4:	01400104 	movi	r5,4
 4007ce8:	010100f4 	movhi	r4,1027
 4007cec:	2120c304 	addi	r4,r4,-31988
 4007cf0:	40043a00 	call	40043a0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>
 4007cf4:	10803fcc 	andi	r2,r2,255
 4007cf8:	10000326 	beq	r2,zero,4007d08 <_Z9xbox_loopv+0x6b4>
      printf("Back\n\r");
 4007cfc:	010100b4 	movhi	r4,1026
 4007d00:	21061f04 	addi	r4,r4,6268
 4007d04:	400bab40 	call	400bab4 <printf>
    if (Xbox.getButtonClick(XBOX))
 4007d08:	01400404 	movi	r5,16
 4007d0c:	010100f4 	movhi	r4,1027
 4007d10:	2120c304 	addi	r4,r4,-31988
 4007d14:	40043a00 	call	40043a0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>
 4007d18:	10803fcc 	andi	r2,r2,255
 4007d1c:	10000326 	beq	r2,zero,4007d2c <_Z9xbox_loopv+0x6d8>
      printf("Xbox\n\r");
 4007d20:	010100b4 	movhi	r4,1026
 4007d24:	21062104 	addi	r4,r4,6276
 4007d28:	400bab40 	call	400bab4 <printf>
    if (Xbox.getButtonClick(SYNC))
 4007d2c:	01400444 	movi	r5,17
 4007d30:	010100f4 	movhi	r4,1027
 4007d34:	2120c304 	addi	r4,r4,-31988
 4007d38:	40043a00 	call	40043a0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>
 4007d3c:	10803fcc 	andi	r2,r2,255
 4007d40:	10000326 	beq	r2,zero,4007d50 <_Z9xbox_loopv+0x6fc>
      printf("Sync\n\r");
 4007d44:	010100b4 	movhi	r4,1026
 4007d48:	21062304 	addi	r4,r4,6284
 4007d4c:	400bab40 	call	400bab4 <printf>

    if (Xbox.getButtonClick(L1))
 4007d50:	01400284 	movi	r5,10
 4007d54:	010100f4 	movhi	r4,1027
 4007d58:	2120c304 	addi	r4,r4,-31988
 4007d5c:	40043a00 	call	40043a0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>
 4007d60:	10803fcc 	andi	r2,r2,255
 4007d64:	10000326 	beq	r2,zero,4007d74 <_Z9xbox_loopv+0x720>
      printf("L1\n\r");
 4007d68:	010100b4 	movhi	r4,1026
 4007d6c:	21062504 	addi	r4,r4,6292
 4007d70:	400bab40 	call	400bab4 <printf>
    if (Xbox.getButtonClick(R1))
 4007d74:	014002c4 	movi	r5,11
 4007d78:	010100f4 	movhi	r4,1027
 4007d7c:	2120c304 	addi	r4,r4,-31988
 4007d80:	40043a00 	call	40043a0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>
 4007d84:	10803fcc 	andi	r2,r2,255
 4007d88:	10000326 	beq	r2,zero,4007d98 <_Z9xbox_loopv+0x744>
      printf("R1\n\r");
 4007d8c:	010100b4 	movhi	r4,1026
 4007d90:	21062704 	addi	r4,r4,6300
 4007d94:	400bab40 	call	400bab4 <printf>
    if (Xbox.getButtonClick(L2))
 4007d98:	01400204 	movi	r5,8
 4007d9c:	010100f4 	movhi	r4,1027
 4007da0:	2120c304 	addi	r4,r4,-31988
 4007da4:	40043a00 	call	40043a0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>
 4007da8:	10803fcc 	andi	r2,r2,255
 4007dac:	10000326 	beq	r2,zero,4007dbc <_Z9xbox_loopv+0x768>
      printf("L2\n\r");
 4007db0:	010100b4 	movhi	r4,1026
 4007db4:	21062904 	addi	r4,r4,6308
 4007db8:	400bab40 	call	400bab4 <printf>
    if (Xbox.getButtonClick(R2))
 4007dbc:	01400244 	movi	r5,9
 4007dc0:	010100f4 	movhi	r4,1027
 4007dc4:	2120c304 	addi	r4,r4,-31988
 4007dc8:	40043a00 	call	40043a0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>
 4007dcc:	10803fcc 	andi	r2,r2,255
 4007dd0:	10000326 	beq	r2,zero,4007de0 <_Z9xbox_loopv+0x78c>
      printf("R2\n\r");
 4007dd4:	010100b4 	movhi	r4,1026
 4007dd8:	21062b04 	addi	r4,r4,6316
 4007ddc:	400bab40 	call	400bab4 <printf>
    if (Xbox.getButtonClick(L3))
 4007de0:	01400184 	movi	r5,6
 4007de4:	010100f4 	movhi	r4,1027
 4007de8:	2120c304 	addi	r4,r4,-31988
 4007dec:	40043a00 	call	40043a0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>
 4007df0:	10803fcc 	andi	r2,r2,255
 4007df4:	10000326 	beq	r2,zero,4007e04 <_Z9xbox_loopv+0x7b0>
      printf("L3\n\r");
 4007df8:	010100b4 	movhi	r4,1026
 4007dfc:	21062d04 	addi	r4,r4,6324
 4007e00:	400bab40 	call	400bab4 <printf>
    if (Xbox.getButtonClick(R3))
 4007e04:	014001c4 	movi	r5,7
 4007e08:	010100f4 	movhi	r4,1027
 4007e0c:	2120c304 	addi	r4,r4,-31988
 4007e10:	40043a00 	call	40043a0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>
 4007e14:	10803fcc 	andi	r2,r2,255
 4007e18:	10000326 	beq	r2,zero,4007e28 <_Z9xbox_loopv+0x7d4>
      printf("R3\n\r");
 4007e1c:	010100b4 	movhi	r4,1026
 4007e20:	21062f04 	addi	r4,r4,6332
 4007e24:	400bab40 	call	400bab4 <printf>


    if (Xbox.getButtonClick(A))
 4007e28:	01400344 	movi	r5,13
 4007e2c:	010100f4 	movhi	r4,1027
 4007e30:	2120c304 	addi	r4,r4,-31988
 4007e34:	40043a00 	call	40043a0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>
 4007e38:	10803fcc 	andi	r2,r2,255
 4007e3c:	10000326 	beq	r2,zero,4007e4c <_Z9xbox_loopv+0x7f8>
      printf("A\n\r");
 4007e40:	010100b4 	movhi	r4,1026
 4007e44:	21063104 	addi	r4,r4,6340
 4007e48:	400bab40 	call	400bab4 <printf>
    if (Xbox.getButtonClick(B))
 4007e4c:	01400304 	movi	r5,12
 4007e50:	010100f4 	movhi	r4,1027
 4007e54:	2120c304 	addi	r4,r4,-31988
 4007e58:	40043a00 	call	40043a0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>
 4007e5c:	10803fcc 	andi	r2,r2,255
 4007e60:	10000326 	beq	r2,zero,4007e70 <_Z9xbox_loopv+0x81c>
      printf("B\n\r");
 4007e64:	010100b4 	movhi	r4,1026
 4007e68:	21063204 	addi	r4,r4,6344
 4007e6c:	400bab40 	call	400bab4 <printf>
    if (Xbox.getButtonClick(X))
 4007e70:	01400384 	movi	r5,14
 4007e74:	010100f4 	movhi	r4,1027
 4007e78:	2120c304 	addi	r4,r4,-31988
 4007e7c:	40043a00 	call	40043a0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>
 4007e80:	10803fcc 	andi	r2,r2,255
 4007e84:	10000326 	beq	r2,zero,4007e94 <_Z9xbox_loopv+0x840>
      printf("X\n\r");
 4007e88:	010100b4 	movhi	r4,1026
 4007e8c:	21063304 	addi	r4,r4,6348
 4007e90:	400bab40 	call	400bab4 <printf>
    if (Xbox.getButtonClick(Y))
 4007e94:	014003c4 	movi	r5,15
 4007e98:	010100f4 	movhi	r4,1027
 4007e9c:	2120c304 	addi	r4,r4,-31988
 4007ea0:	40043a00 	call	40043a0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>
 4007ea4:	10803fcc 	andi	r2,r2,255
 4007ea8:	10000326 	beq	r2,zero,4007eb8 <_Z9xbox_loopv+0x864>
      printf("Y\n\r");
 4007eac:	010100b4 	movhi	r4,1026
 4007eb0:	21063404 	addi	r4,r4,6352
 4007eb4:	400bab40 	call	400bab4 <printf>
  }
  delay(1);
 4007eb8:	01000044 	movi	r4,1
 4007ebc:	40005d80 	call	40005d8 <_Z5delaym>
}
 4007ec0:	0001883a 	nop
 4007ec4:	e037883a 	mov	sp,fp
 4007ec8:	dfc00117 	ldw	ra,4(sp)
 4007ecc:	df000017 	ldw	fp,0(sp)
 4007ed0:	dec00204 	addi	sp,sp,8
 4007ed4:	f800283a 	ret

04007ed8 <main>:

int main() {
 4007ed8:	defffe04 	addi	sp,sp,-8
 4007edc:	dfc00115 	stw	ra,4(sp)
 4007ee0:	df000015 	stw	fp,0(sp)
 4007ee4:	d839883a 	mov	fp,sp
        xbox_setup();
 4007ee8:	40075f00 	call	40075f0 <_Z10xbox_setupv>
        while (1) {
        	xbox_loop();
 4007eec:	40076540 	call	4007654 <_Z9xbox_loopv>
  delay(1);
}

int main() {
        xbox_setup();
        while (1) {
 4007ef0:	003ffe06 	br	4007eec <__alt_data_end+0xfc007eec>

04007ef4 <_Z9print_hexii>:
        }
}


/* prints hex numbers with leading zeroes */
void print_hex(int v, int num_places) {
 4007ef4:	defff804 	addi	sp,sp,-32
 4007ef8:	dfc00715 	stw	ra,28(sp)
 4007efc:	df000615 	stw	fp,24(sp)
 4007f00:	df000604 	addi	fp,sp,24
 4007f04:	e13ffe15 	stw	r4,-8(fp)
 4007f08:	e17fff15 	stw	r5,-4(fp)
        int mask = 0, n, num_nibbles, digit;
 4007f0c:	e03ffa15 	stw	zero,-24(fp)

        for(n = 1; n <= num_places; n++) {
 4007f10:	00800044 	movi	r2,1
 4007f14:	e0bffb15 	stw	r2,-20(fp)
 4007f18:	e0bffb17 	ldw	r2,-20(fp)
 4007f1c:	e0ffff17 	ldw	r3,-4(fp)
 4007f20:	18800816 	blt	r3,r2,4007f44 <_Z9print_hexii+0x50>
                mask = (mask << 1) | 0x0001;
 4007f24:	e0bffa17 	ldw	r2,-24(fp)
 4007f28:	1085883a 	add	r2,r2,r2
 4007f2c:	10800054 	ori	r2,r2,1
 4007f30:	e0bffa15 	stw	r2,-24(fp)

/* prints hex numbers with leading zeroes */
void print_hex(int v, int num_places) {
        int mask = 0, n, num_nibbles, digit;

        for(n = 1; n <= num_places; n++) {
 4007f34:	e0bffb17 	ldw	r2,-20(fp)
 4007f38:	10800044 	addi	r2,r2,1
 4007f3c:	e0bffb15 	stw	r2,-20(fp)
 4007f40:	003ff506 	br	4007f18 <__alt_data_end+0xfc007f18>
                mask = (mask << 1) | 0x0001;
        }
        v = v & mask; // truncate v to specified number of places
 4007f44:	e0fffe17 	ldw	r3,-8(fp)
 4007f48:	e0bffa17 	ldw	r2,-24(fp)
 4007f4c:	1884703a 	and	r2,r3,r2
 4007f50:	e0bffe15 	stw	r2,-8(fp)

        num_nibbles = num_places / 4;
 4007f54:	e0bfff17 	ldw	r2,-4(fp)
 4007f58:	1000010e 	bge	r2,zero,4007f60 <_Z9print_hexii+0x6c>
 4007f5c:	108000c4 	addi	r2,r2,3
 4007f60:	1005d0ba 	srai	r2,r2,2
 4007f64:	e0bffc15 	stw	r2,-16(fp)
        if((num_places % 4) != 0) {
 4007f68:	e0bfff17 	ldw	r2,-4(fp)
 4007f6c:	108000cc 	andi	r2,r2,3
 4007f70:	10000326 	beq	r2,zero,4007f80 <_Z9print_hexii+0x8c>
                ++num_nibbles;
 4007f74:	e0bffc17 	ldw	r2,-16(fp)
 4007f78:	10800044 	addi	r2,r2,1
 4007f7c:	e0bffc15 	stw	r2,-16(fp)
        }
        do {
                digit = ((v >> (num_nibbles - 1) * 4)) & 0x0f;
 4007f80:	e0bffc17 	ldw	r2,-16(fp)
 4007f84:	10bfffc4 	addi	r2,r2,-1
 4007f88:	1085883a 	add	r2,r2,r2
 4007f8c:	1085883a 	add	r2,r2,r2
 4007f90:	1007883a 	mov	r3,r2
 4007f94:	e0bffe17 	ldw	r2,-8(fp)
 4007f98:	10c5d83a 	sra	r2,r2,r3
 4007f9c:	108003cc 	andi	r2,r2,15
 4007fa0:	e0bffd15 	stw	r2,-12(fp)
                printf("%x\n", digit);
 4007fa4:	e17ffd17 	ldw	r5,-12(fp)
 4007fa8:	010100b4 	movhi	r4,1026
 4007fac:	21063504 	addi	r4,r4,6356
 4007fb0:	400bab40 	call	400bab4 <printf>

        num_nibbles = num_places / 4;
        if((num_places % 4) != 0) {
                ++num_nibbles;
        }
        do {
 4007fb4:	e0bffc17 	ldw	r2,-16(fp)
 4007fb8:	10bfffc4 	addi	r2,r2,-1
 4007fbc:	e0bffc15 	stw	r2,-16(fp)
 4007fc0:	e0bffc17 	ldw	r2,-16(fp)
 4007fc4:	1004c03a 	cmpne	r2,r2,zero
 4007fc8:	10803fcc 	andi	r2,r2,255
 4007fcc:	10000126 	beq	r2,zero,4007fd4 <_Z9print_hexii+0xe0>
 4007fd0:	003feb06 	br	4007f80 <__alt_data_end+0xfc007f80>
                digit = ((v >> (num_nibbles - 1) * 4)) & 0x0f;
                printf("%x\n", digit);
        } while(--num_nibbles);
}
 4007fd4:	0001883a 	nop
 4007fd8:	e037883a 	mov	sp,fp
 4007fdc:	dfc00117 	ldw	ra,4(sp)
 4007fe0:	df000017 	ldw	fp,0(sp)
 4007fe4:	dec00204 	addi	sp,sp,8
 4007fe8:	f800283a 	ret

04007fec <_Z41__static_initialization_and_destruction_0ii>:
 4007fec:	defffc04 	addi	sp,sp,-16
 4007ff0:	dfc00315 	stw	ra,12(sp)
 4007ff4:	df000215 	stw	fp,8(sp)
 4007ff8:	df000204 	addi	fp,sp,8
 4007ffc:	e13ffe15 	stw	r4,-8(fp)
 4008000:	e17fff15 	stw	r5,-4(fp)
 4008004:	e0bffe17 	ldw	r2,-8(fp)
 4008008:	10800058 	cmpnei	r2,r2,1
 400800c:	10000b1e 	bne	r2,zero,400803c <_Z41__static_initialization_and_destruction_0ii+0x50>
 4008010:	e0ffff17 	ldw	r3,-4(fp)
 4008014:	00bfffd4 	movui	r2,65535
 4008018:	1880081e 	bne	r3,r2,400803c <_Z41__static_initialization_and_destruction_0ii+0x50>
uint8_t laststate;
//uint8_t buf[sizeof(USB_DEVICE_DESCRIPTOR)];
USB_DEVICE_DESCRIPTOR buf;

/* objects */
USB Usb;
 400801c:	010100f4 	movhi	r4,1027
 4008020:	21209404 	addi	r4,r4,-32176
 4008024:	40006580 	call	4000658 <_ZN3USBC1Ev>
XBOXONE Xbox(&Usb);
 4008028:	014100f4 	movhi	r5,1027
 400802c:	29609404 	addi	r5,r5,-32176
 4008030:	010100f4 	movhi	r4,1027
 4008034:	2120c304 	addi	r4,r4,-31988
 4008038:	40034200 	call	4003420 <_ZN7XBOXONEC1EP3USB>
        }
        do {
                digit = ((v >> (num_nibbles - 1) * 4)) & 0x0f;
                printf("%x\n", digit);
        } while(--num_nibbles);
}
 400803c:	0001883a 	nop
 4008040:	e037883a 	mov	sp,fp
 4008044:	dfc00117 	ldw	ra,4(sp)
 4008048:	df000017 	ldw	fp,0(sp)
 400804c:	dec00204 	addi	sp,sp,8
 4008050:	f800283a 	ret

04008054 <_GLOBAL__sub_I_rcode>:
 4008054:	defffe04 	addi	sp,sp,-8
 4008058:	dfc00115 	stw	ra,4(sp)
 400805c:	df000015 	stw	fp,0(sp)
 4008060:	d839883a 	mov	fp,sp
 4008064:	017fffd4 	movui	r5,65535
 4008068:	01000044 	movi	r4,1
 400806c:	4007fec0 	call	4007fec <_Z41__static_initialization_and_destruction_0ii>
 4008070:	e037883a 	mov	sp,fp
 4008074:	dfc00117 	ldw	ra,4(sp)
 4008078:	df000017 	ldw	fp,0(sp)
 400807c:	dec00204 	addi	sp,sp,8
 4008080:	f800283a 	ret

04008084 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 4008084:	008100b4 	movhi	r2,1026
 4008088:	10864504 	addi	r2,r2,6420
 400808c:	20800015 	stw	r2,0(r4)
 4008090:	4008e5c1 	jmpi	4008e5c <_ZN10__cxxabiv117__class_type_infoD1Ev>

04008094 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 4008094:	defffe04 	addi	sp,sp,-8
 4008098:	008100b4 	movhi	r2,1026
 400809c:	dc000015 	stw	r16,0(sp)
 40080a0:	dfc00115 	stw	ra,4(sp)
 40080a4:	10864504 	addi	r2,r2,6420
 40080a8:	20800015 	stw	r2,0(r4)
 40080ac:	2021883a 	mov	r16,r4
 40080b0:	4008e5c0 	call	4008e5c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 40080b4:	8009883a 	mov	r4,r16
 40080b8:	dfc00117 	ldw	ra,4(sp)
 40080bc:	dc000017 	ldw	r16,0(sp)
 40080c0:	dec00204 	addi	sp,sp,8
 40080c4:	4008d881 	jmpi	4008d88 <_ZdlPv>

040080c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 40080c8:	defff504 	addi	sp,sp,-44
 40080cc:	dc000115 	stw	r16,4(sp)
 40080d0:	38800117 	ldw	r2,4(r7)
 40080d4:	24000117 	ldw	r16,4(r4)
 40080d8:	df000915 	stw	fp,36(sp)
 40080dc:	ddc00815 	stw	r23,32(sp)
 40080e0:	dd800715 	stw	r22,28(sp)
 40080e4:	dcc00415 	stw	r19,16(sp)
 40080e8:	dc800315 	stw	r18,12(sp)
 40080ec:	dc400215 	stw	r17,8(sp)
 40080f0:	dfc00a15 	stw	ra,40(sp)
 40080f4:	dd400615 	stw	r21,24(sp)
 40080f8:	dd000515 	stw	r20,20(sp)
 40080fc:	2823883a 	mov	r17,r5
 4008100:	3039883a 	mov	fp,r6
 4008104:	dcc00b17 	ldw	r19,44(sp)
 4008108:	ddc00c17 	ldw	r23,48(sp)
 400810c:	dd800d17 	ldw	r22,52(sp)
 4008110:	dc800e17 	ldw	r18,56(sp)
 4008114:	80800b26 	beq	r16,r2,4008144 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
 4008118:	80c00007 	ldb	r3,0(r16)
 400811c:	2029883a 	mov	r20,r4
 4008120:	01000a84 	movi	r4,42
 4008124:	382b883a 	mov	r21,r7
 4008128:	19001a26 	beq	r3,r4,4008194 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
 400812c:	100b883a 	mov	r5,r2
 4008130:	8009883a 	mov	r4,r16
 4008134:	d8c00015 	stw	r3,0(sp)
 4008138:	400bf3c0 	call	400bf3c <strcmp>
 400813c:	d8c00017 	ldw	r3,0(sp)
 4008140:	1000141e 	bne	r2,zero,4008194 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
 4008144:	94c00015 	stw	r19,0(r18)
 4008148:	97000115 	stw	fp,4(r18)
 400814c:	88002816 	blt	r17,zero,40081f0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
 4008150:	9c63883a 	add	r17,r19,r17
 4008154:	b4403226 	beq	r22,r17,4008220 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
 4008158:	00800044 	movi	r2,1
 400815c:	90800315 	stw	r2,12(r18)
 4008160:	0005883a 	mov	r2,zero
 4008164:	dfc00a17 	ldw	ra,40(sp)
 4008168:	df000917 	ldw	fp,36(sp)
 400816c:	ddc00817 	ldw	r23,32(sp)
 4008170:	dd800717 	ldw	r22,28(sp)
 4008174:	dd400617 	ldw	r21,24(sp)
 4008178:	dd000517 	ldw	r20,20(sp)
 400817c:	dcc00417 	ldw	r19,16(sp)
 4008180:	dc800317 	ldw	r18,12(sp)
 4008184:	dc400217 	ldw	r17,8(sp)
 4008188:	dc000117 	ldw	r16,4(sp)
 400818c:	dec00b04 	addi	sp,sp,44
 4008190:	f800283a 	ret
 4008194:	9d801926 	beq	r19,r22,40081fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
 4008198:	a1000217 	ldw	r4,8(r20)
 400819c:	a80f883a 	mov	r7,r21
 40081a0:	e00d883a 	mov	r6,fp
 40081a4:	20800017 	ldw	r2,0(r4)
 40081a8:	dc800e15 	stw	r18,56(sp)
 40081ac:	dd800d15 	stw	r22,52(sp)
 40081b0:	ddc00c15 	stw	r23,48(sp)
 40081b4:	dcc00b15 	stw	r19,44(sp)
 40081b8:	10800717 	ldw	r2,28(r2)
 40081bc:	880b883a 	mov	r5,r17
 40081c0:	dfc00a17 	ldw	ra,40(sp)
 40081c4:	df000917 	ldw	fp,36(sp)
 40081c8:	ddc00817 	ldw	r23,32(sp)
 40081cc:	dd800717 	ldw	r22,28(sp)
 40081d0:	dd400617 	ldw	r21,24(sp)
 40081d4:	dd000517 	ldw	r20,20(sp)
 40081d8:	dcc00417 	ldw	r19,16(sp)
 40081dc:	dc800317 	ldw	r18,12(sp)
 40081e0:	dc400217 	ldw	r17,8(sp)
 40081e4:	dc000117 	ldw	r16,4(sp)
 40081e8:	dec00b04 	addi	sp,sp,44
 40081ec:	1000683a 	jmp	r2
 40081f0:	00bfff84 	movi	r2,-2
 40081f4:	88bfda1e 	bne	r17,r2,4008160 <__alt_data_end+0xfc008160>
 40081f8:	003fd706 	br	4008158 <__alt_data_end+0xfc008158>
 40081fc:	b9400117 	ldw	r5,4(r23)
 4008200:	81400526 	beq	r16,r5,4008218 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
 4008204:	00800a84 	movi	r2,42
 4008208:	18bfe326 	beq	r3,r2,4008198 <__alt_data_end+0xfc008198>
 400820c:	8009883a 	mov	r4,r16
 4008210:	400bf3c0 	call	400bf3c <strcmp>
 4008214:	103fe01e 	bne	r2,zero,4008198 <__alt_data_end+0xfc008198>
 4008218:	97000215 	stw	fp,8(r18)
 400821c:	003fd006 	br	4008160 <__alt_data_end+0xfc008160>
 4008220:	00800184 	movi	r2,6
 4008224:	003fcd06 	br	400815c <__alt_data_end+0xfc00815c>

04008228 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 4008228:	defffa04 	addi	sp,sp,-24
 400822c:	dc000215 	stw	r16,8(sp)
 4008230:	dc000617 	ldw	r16,24(sp)
 4008234:	dc800415 	stw	r18,16(sp)
 4008238:	dc400315 	stw	r17,12(sp)
 400823c:	dfc00515 	stw	ra,20(sp)
 4008240:	2023883a 	mov	r17,r4
 4008244:	2825883a 	mov	r18,r5
 4008248:	81800b26 	beq	r16,r6,4008278 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
 400824c:	89000217 	ldw	r4,8(r17)
 4008250:	900b883a 	mov	r5,r18
 4008254:	20800017 	ldw	r2,0(r4)
 4008258:	dc000615 	stw	r16,24(sp)
 400825c:	10800817 	ldw	r2,32(r2)
 4008260:	dfc00517 	ldw	ra,20(sp)
 4008264:	dc800417 	ldw	r18,16(sp)
 4008268:	dc400317 	ldw	r17,12(sp)
 400826c:	dc000217 	ldw	r16,8(sp)
 4008270:	dec00604 	addi	sp,sp,24
 4008274:	1000683a 	jmp	r2
 4008278:	21000117 	ldw	r4,4(r4)
 400827c:	39400117 	ldw	r5,4(r7)
 4008280:	21400926 	beq	r4,r5,40082a8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
 4008284:	20c00007 	ldb	r3,0(r4)
 4008288:	00800a84 	movi	r2,42
 400828c:	18bfef26 	beq	r3,r2,400824c <__alt_data_end+0xfc00824c>
 4008290:	d9800015 	stw	r6,0(sp)
 4008294:	d9c00115 	stw	r7,4(sp)
 4008298:	400bf3c0 	call	400bf3c <strcmp>
 400829c:	d9800017 	ldw	r6,0(sp)
 40082a0:	d9c00117 	ldw	r7,4(sp)
 40082a4:	103fe91e 	bne	r2,zero,400824c <__alt_data_end+0xfc00824c>
 40082a8:	00800184 	movi	r2,6
 40082ac:	dfc00517 	ldw	ra,20(sp)
 40082b0:	dc800417 	ldw	r18,16(sp)
 40082b4:	dc400317 	ldw	r17,12(sp)
 40082b8:	dc000217 	ldw	r16,8(sp)
 40082bc:	dec00604 	addi	sp,sp,24
 40082c0:	f800283a 	ret

040082c4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 40082c4:	defffb04 	addi	sp,sp,-20
 40082c8:	dcc00315 	stw	r19,12(sp)
 40082cc:	dc800215 	stw	r18,8(sp)
 40082d0:	dc400115 	stw	r17,4(sp)
 40082d4:	dc000015 	stw	r16,0(sp)
 40082d8:	dfc00415 	stw	ra,16(sp)
 40082dc:	2027883a 	mov	r19,r4
 40082e0:	2821883a 	mov	r16,r5
 40082e4:	3023883a 	mov	r17,r6
 40082e8:	3825883a 	mov	r18,r7
 40082ec:	4008ea00 	call	4008ea0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 40082f0:	10c03fcc 	andi	r3,r2,255
 40082f4:	18000726 	beq	r3,zero,4008314 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
 40082f8:	dfc00417 	ldw	ra,16(sp)
 40082fc:	dcc00317 	ldw	r19,12(sp)
 4008300:	dc800217 	ldw	r18,8(sp)
 4008304:	dc400117 	ldw	r17,4(sp)
 4008308:	dc000017 	ldw	r16,0(sp)
 400830c:	dec00504 	addi	sp,sp,20
 4008310:	f800283a 	ret
 4008314:	99000217 	ldw	r4,8(r19)
 4008318:	900f883a 	mov	r7,r18
 400831c:	880d883a 	mov	r6,r17
 4008320:	20800017 	ldw	r2,0(r4)
 4008324:	800b883a 	mov	r5,r16
 4008328:	10800617 	ldw	r2,24(r2)
 400832c:	dfc00417 	ldw	ra,16(sp)
 4008330:	dcc00317 	ldw	r19,12(sp)
 4008334:	dc800217 	ldw	r18,8(sp)
 4008338:	dc400117 	ldw	r17,4(sp)
 400833c:	dc000017 	ldw	r16,0(sp)
 4008340:	dec00504 	addi	sp,sp,20
 4008344:	1000683a 	jmp	r2

04008348 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 4008348:	008100b4 	movhi	r2,1026
 400834c:	10865d04 	addi	r2,r2,6516
 4008350:	20800015 	stw	r2,0(r4)
 4008354:	4008e5c1 	jmpi	4008e5c <_ZN10__cxxabiv117__class_type_infoD1Ev>

04008358 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 4008358:	defffe04 	addi	sp,sp,-8
 400835c:	008100b4 	movhi	r2,1026
 4008360:	dc000015 	stw	r16,0(sp)
 4008364:	dfc00115 	stw	ra,4(sp)
 4008368:	10865d04 	addi	r2,r2,6516
 400836c:	20800015 	stw	r2,0(r4)
 4008370:	2021883a 	mov	r16,r4
 4008374:	4008e5c0 	call	4008e5c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 4008378:	8009883a 	mov	r4,r16
 400837c:	dfc00117 	ldw	ra,4(sp)
 4008380:	dc000017 	ldw	r16,0(sp)
 4008384:	dec00204 	addi	sp,sp,8
 4008388:	4008d881 	jmpi	4008d88 <_ZdlPv>

0400838c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 400838c:	defff504 	addi	sp,sp,-44
 4008390:	dc400215 	stw	r17,8(sp)
 4008394:	dc400b17 	ldw	r17,44(sp)
 4008398:	df000915 	stw	fp,36(sp)
 400839c:	ddc00815 	stw	r23,32(sp)
 40083a0:	dd800715 	stw	r22,28(sp)
 40083a4:	dc000115 	stw	r16,4(sp)
 40083a8:	dfc00a15 	stw	ra,40(sp)
 40083ac:	dd400615 	stw	r21,24(sp)
 40083b0:	dd000515 	stw	r20,20(sp)
 40083b4:	dcc00415 	stw	r19,16(sp)
 40083b8:	dc800315 	stw	r18,12(sp)
 40083bc:	3039883a 	mov	fp,r6
 40083c0:	2021883a 	mov	r16,r4
 40083c4:	282d883a 	mov	r22,r5
 40083c8:	382f883a 	mov	r23,r7
 40083cc:	34402c26 	beq	r6,r17,4008480 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xf4>
 40083d0:	85000317 	ldw	r20,12(r16)
 40083d4:	048000c4 	movi	r18,3
 40083d8:	04ffff44 	movi	r19,-3
 40083dc:	a484983a 	sll	r2,r20,r18
 40083e0:	b80f883a 	mov	r7,r23
 40083e4:	b00b883a 	mov	r5,r22
 40083e8:	10800304 	addi	r2,r2,12
 40083ec:	80a1883a 	add	r16,r16,r2
 40083f0:	a0001626 	beq	r20,zero,400844c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xc0>
 40083f4:	81800017 	ldw	r6,0(r16)
 40083f8:	a53fffc4 	addi	r20,r20,-1
 40083fc:	3080008c 	andi	r2,r6,2
 4008400:	3540004c 	andi	r21,r6,1
 4008404:	10000d26 	beq	r2,zero,400843c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
 4008408:	300dd23a 	srai	r6,r6,8
 400840c:	a8000426 	beq	r21,zero,4008420 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x94>
 4008410:	b4c00a26 	beq	r22,r19,400843c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
 4008414:	e0800017 	ldw	r2,0(fp)
 4008418:	118d883a 	add	r6,r2,r6
 400841c:	31800017 	ldw	r6,0(r6)
 4008420:	813fff17 	ldw	r4,-4(r16)
 4008424:	e18d883a 	add	r6,fp,r6
 4008428:	20800017 	ldw	r2,0(r4)
 400842c:	dc400015 	stw	r17,0(sp)
 4008430:	10800817 	ldw	r2,32(r2)
 4008434:	103ee83a 	callr	r2
 4008438:	90801b16 	blt	r18,r2,40084a8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x11c>
 400843c:	843ffe04 	addi	r16,r16,-8
 4008440:	b80f883a 	mov	r7,r23
 4008444:	b00b883a 	mov	r5,r22
 4008448:	a03fea1e 	bne	r20,zero,40083f4 <__alt_data_end+0xfc0083f4>
 400844c:	00800044 	movi	r2,1
 4008450:	dfc00a17 	ldw	ra,40(sp)
 4008454:	df000917 	ldw	fp,36(sp)
 4008458:	ddc00817 	ldw	r23,32(sp)
 400845c:	dd800717 	ldw	r22,28(sp)
 4008460:	dd400617 	ldw	r21,24(sp)
 4008464:	dd000517 	ldw	r20,20(sp)
 4008468:	dcc00417 	ldw	r19,16(sp)
 400846c:	dc800317 	ldw	r18,12(sp)
 4008470:	dc400217 	ldw	r17,8(sp)
 4008474:	dc000117 	ldw	r16,4(sp)
 4008478:	dec00b04 	addi	sp,sp,44
 400847c:	f800283a 	ret
 4008480:	21000117 	ldw	r4,4(r4)
 4008484:	39400117 	ldw	r5,4(r7)
 4008488:	21400526 	beq	r4,r5,40084a0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x114>
 400848c:	20c00007 	ldb	r3,0(r4)
 4008490:	00800a84 	movi	r2,42
 4008494:	18bfce26 	beq	r3,r2,40083d0 <__alt_data_end+0xfc0083d0>
 4008498:	400bf3c0 	call	400bf3c <strcmp>
 400849c:	103fcc1e 	bne	r2,zero,40083d0 <__alt_data_end+0xfc0083d0>
 40084a0:	00800184 	movi	r2,6
 40084a4:	003fea06 	br	4008450 <__alt_data_end+0xfc008450>
 40084a8:	a83fe926 	beq	r21,zero,4008450 <__alt_data_end+0xfc008450>
 40084ac:	10800054 	ori	r2,r2,1
 40084b0:	003fe706 	br	4008450 <__alt_data_end+0xfc008450>

040084b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 40084b4:	deffe804 	addi	sp,sp,-96
 40084b8:	df001615 	stw	fp,88(sp)
 40084bc:	df001b17 	ldw	fp,108(sp)
 40084c0:	ddc01515 	stw	r23,84(sp)
 40084c4:	dd001215 	stw	r20,72(sp)
 40084c8:	e0800417 	ldw	r2,16(fp)
 40084cc:	dcc01115 	stw	r19,68(sp)
 40084d0:	dfc01715 	stw	ra,92(sp)
 40084d4:	dd801415 	stw	r22,80(sp)
 40084d8:	dd401315 	stw	r21,76(sp)
 40084dc:	dc801015 	stw	r18,64(sp)
 40084e0:	dc400f15 	stw	r17,60(sp)
 40084e4:	dc000e15 	stw	r16,56(sp)
 40084e8:	d9000b15 	stw	r4,44(sp)
 40084ec:	d9c00915 	stw	r7,36(sp)
 40084f0:	1080040c 	andi	r2,r2,16
 40084f4:	282f883a 	mov	r23,r5
 40084f8:	3027883a 	mov	r19,r6
 40084fc:	dd001817 	ldw	r20,96(sp)
 4008500:	10000226 	beq	r2,zero,400850c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
 4008504:	20800217 	ldw	r2,8(r4)
 4008508:	e0800415 	stw	r2,16(fp)
 400850c:	d8c01a17 	ldw	r3,104(sp)
 4008510:	a0c0cb26 	beq	r20,r3,4008840 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38c>
 4008514:	d8c00b17 	ldw	r3,44(sp)
 4008518:	1c000117 	ldw	r16,4(r3)
 400851c:	d8c00917 	ldw	r3,36(sp)
 4008520:	19400117 	ldw	r5,4(r3)
 4008524:	2c000626 	beq	r5,r16,4008540 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
 4008528:	80c00007 	ldb	r3,0(r16)
 400852c:	00800a84 	movi	r2,42
 4008530:	18801b26 	beq	r3,r2,40085a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
 4008534:	8009883a 	mov	r4,r16
 4008538:	400bf3c0 	call	400bf3c <strcmp>
 400853c:	1000181e 	bne	r2,zero,40085a0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
 4008540:	e5000015 	stw	r20,0(fp)
 4008544:	e4c00115 	stw	r19,4(fp)
 4008548:	b8010916 	blt	r23,zero,4008970 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4bc>
 400854c:	d8c01a17 	ldw	r3,104(sp)
 4008550:	a5d9883a 	add	r12,r20,r23
 4008554:	1b014126 	beq	r3,r12,4008a5c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a8>
 4008558:	00800044 	movi	r2,1
 400855c:	e0800315 	stw	r2,12(fp)
 4008560:	0005883a 	mov	r2,zero
 4008564:	dfc01717 	ldw	ra,92(sp)
 4008568:	df001617 	ldw	fp,88(sp)
 400856c:	ddc01517 	ldw	r23,84(sp)
 4008570:	dd801417 	ldw	r22,80(sp)
 4008574:	dd401317 	ldw	r21,76(sp)
 4008578:	dd001217 	ldw	r20,72(sp)
 400857c:	dcc01117 	ldw	r19,68(sp)
 4008580:	dc801017 	ldw	r18,64(sp)
 4008584:	dc400f17 	ldw	r17,60(sp)
 4008588:	dc000e17 	ldw	r16,56(sp)
 400858c:	dec01804 	addi	sp,sp,96
 4008590:	f800283a 	ret
 4008594:	d8c00917 	ldw	r3,36(sp)
 4008598:	18800117 	ldw	r2,4(r3)
 400859c:	80bfe826 	beq	r16,r2,4008540 <__alt_data_end+0xfc008540>
 40085a0:	b800ef16 	blt	r23,zero,4008960 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4ac>
 40085a4:	d8c01a17 	ldw	r3,104(sp)
 40085a8:	1dedc83a 	sub	r22,r3,r23
 40085ac:	e005883a 	mov	r2,fp
 40085b0:	00c00044 	movi	r3,1
 40085b4:	b039883a 	mov	fp,r22
 40085b8:	0021883a 	mov	r16,zero
 40085bc:	a02d883a 	mov	r22,r20
 40085c0:	d8000a45 	stb	zero,41(sp)
 40085c4:	d8c00a05 	stb	r3,40(sp)
 40085c8:	048000c4 	movi	r18,3
 40085cc:	1029883a 	mov	r20,r2
 40085d0:	d8c00b17 	ldw	r3,44(sp)
 40085d4:	b805883a 	mov	r2,r23
 40085d8:	1ac00317 	ldw	r11,12(r3)
 40085dc:	581490fa 	slli	r10,r11,3
 40085e0:	52800304 	addi	r10,r10,12
 40085e4:	1aab883a 	add	r21,r3,r10
 40085e8:	b007883a 	mov	r3,r22
 40085ec:	582d883a 	mov	r22,r11
 40085f0:	a82f883a 	mov	r23,r21
 40085f4:	1823883a 	mov	r17,r3
 40085f8:	102b883a 	mov	r21,r2
 40085fc:	b0005526 	beq	r22,zero,4008754 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2a0>
 4008600:	b8800017 	ldw	r2,0(r23)
 4008604:	a1400417 	ldw	r5,16(r20)
 4008608:	d8000415 	stw	zero,16(sp)
 400860c:	d8000515 	stw	zero,20(sp)
 4008610:	d8000615 	stw	zero,24(sp)
 4008614:	d8000715 	stw	zero,28(sp)
 4008618:	d9400815 	stw	r5,32(sp)
 400861c:	1100004c 	andi	r4,r2,1
 4008620:	1007d23a 	srai	r3,r2,8
 4008624:	20007526 	beq	r4,zero,40087fc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x348>
 4008628:	89000017 	ldw	r4,0(r17)
 400862c:	99800054 	ori	r6,r19,1
 4008630:	20c7883a 	add	r3,r4,r3
 4008634:	18c00017 	ldw	r3,0(r3)
 4008638:	88c7883a 	add	r3,r17,r3
 400863c:	e0000326 	beq	fp,zero,400864c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x198>
 4008640:	d9c00a03 	ldbu	r7,40(sp)
 4008644:	e0c9803a 	cmpltu	r4,fp,r3
 4008648:	21c07226 	beq	r4,r7,4008814 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x360>
 400864c:	1080008c 	andi	r2,r2,2
 4008650:	1000041e 	bne	r2,zero,4008664 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b0>
 4008654:	013fff84 	movi	r4,-2
 4008658:	a9007126 	beq	r21,r4,4008820 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x36c>
 400865c:	00bfff44 	movi	r2,-3
 4008660:	308c703a 	and	r6,r6,r2
 4008664:	b93fff17 	ldw	r4,-4(r23)
 4008668:	d9400404 	addi	r5,sp,16
 400866c:	d9c00917 	ldw	r7,36(sp)
 4008670:	20800017 	ldw	r2,0(r4)
 4008674:	d9400315 	stw	r5,12(sp)
 4008678:	d9401a17 	ldw	r5,104(sp)
 400867c:	d8c00015 	stw	r3,0(sp)
 4008680:	d9400215 	stw	r5,8(sp)
 4008684:	d9401917 	ldw	r5,100(sp)
 4008688:	d9400115 	stw	r5,4(sp)
 400868c:	10800717 	ldw	r2,28(r2)
 4008690:	a80b883a 	mov	r5,r21
 4008694:	103ee83a 	callr	r2
 4008698:	a1400217 	ldw	r5,8(r20)
 400869c:	d9000617 	ldw	r4,24(sp)
 40086a0:	d8c00717 	ldw	r3,28(sp)
 40086a4:	2908b03a 	or	r4,r5,r4
 40086a8:	a1000215 	stw	r4,8(r20)
 40086ac:	01400184 	movi	r5,6
 40086b0:	1940a426 	beq	r3,r5,4008944 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
 40086b4:	01400084 	movi	r5,2
 40086b8:	1940a226 	beq	r3,r5,4008944 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
 40086bc:	81403fcc 	andi	r5,r16,255
 40086c0:	a1800017 	ldw	r6,0(r20)
 40086c4:	28004f1e 	bne	r5,zero,4008804 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x350>
 40086c8:	30007926 	beq	r6,zero,40088b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3fc>
 40086cc:	d9400417 	ldw	r5,16(sp)
 40086d0:	29806926 	beq	r5,r6,4008878 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c4>
 40086d4:	28006d26 	beq	r5,zero,400888c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3d8>
 40086d8:	a2800317 	ldw	r10,12(r20)
 40086dc:	9100250e 	bge	r18,r4,4008774 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
 40086e0:	2100004c 	andi	r4,r4,1
 40086e4:	20000326 	beq	r4,zero,40086f4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x240>
 40086e8:	a0800417 	ldw	r2,16(r20)
 40086ec:	1080008c 	andi	r2,r2,2
 40086f0:	1000201e 	bne	r2,zero,4008774 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
 40086f4:	50004d1e 	bne	r10,zero,400882c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x378>
 40086f8:	18002626 	beq	r3,zero,4008794 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e0>
 40086fc:	02800044 	movi	r10,1
 4008700:	181b883a 	mov	r13,r3
 4008704:	1a84f03a 	xor	r2,r3,r10
 4008708:	501f883a 	mov	r15,r10
 400870c:	90801f0e 	bge	r18,r2,400878c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d8>
 4008710:	90c0880e 	bge	r18,r3,4008934 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x480>
 4008714:	d9400417 	ldw	r5,16(sp)
 4008718:	1880008c 	andi	r2,r3,2
 400871c:	d9000517 	ldw	r4,20(sp)
 4008720:	a1400015 	stw	r5,0(r20)
 4008724:	0021883a 	mov	r16,zero
 4008728:	a1000115 	stw	r4,4(r20)
 400872c:	a0c00315 	stw	r3,12(r20)
 4008730:	10004f1e 	bne	r2,zero,4008870 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
 4008734:	6b40004c 	andi	r13,r13,1
 4008738:	68004d26 	beq	r13,zero,4008870 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
 400873c:	a1000217 	ldw	r4,8(r20)
 4008740:	01400104 	movi	r5,4
 4008744:	21408826 	beq	r4,r5,4008968 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
 4008748:	b5bfffc4 	addi	r22,r22,-1
 400874c:	bdfffe04 	addi	r23,r23,-8
 4008750:	b03fab1e 	bne	r22,zero,4008600 <__alt_data_end+0xfc008600>
 4008754:	d8800a43 	ldbu	r2,41(sp)
 4008758:	a82f883a 	mov	r23,r21
 400875c:	882d883a 	mov	r22,r17
 4008760:	10008126 	beq	r2,zero,4008968 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
 4008764:	dd400a03 	ldbu	r21,40(sp)
 4008768:	a8007f26 	beq	r21,zero,4008968 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
 400876c:	d8000a05 	stb	zero,40(sp)
 4008770:	003f9706 	br	40085d0 <__alt_data_end+0xfc0085d0>
 4008774:	501f883a 	mov	r15,r10
 4008778:	181b883a 	mov	r13,r3
 400877c:	02800b0e 	bge	zero,r10,40087ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>
 4008780:	00c0570e 	bge	zero,r3,40088e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42c>
 4008784:	1a84f03a 	xor	r2,r3,r10
 4008788:	90bfe116 	blt	r18,r2,4008710 <__alt_data_end+0xfc008710>
 400878c:	1bc6703a 	and	r3,r3,r15
 4008790:	90c09916 	blt	r18,r3,40089f8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x544>
 4008794:	01000044 	movi	r4,1
 4008798:	a1000315 	stw	r4,12(r20)
 400879c:	a0000015 	stw	zero,0(r20)
 40087a0:	a1000217 	ldw	r4,8(r20)
 40087a4:	04000044 	movi	r16,1
 40087a8:	003fe506 	br	4008740 <__alt_data_end+0xfc008740>
 40087ac:	90c00a0e 	bge	r18,r3,40087d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
 40087b0:	1880004c 	andi	r2,r3,1
 40087b4:	10000426 	beq	r2,zero,40087c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x314>
 40087b8:	d9000b17 	ldw	r4,44(sp)
 40087bc:	20800217 	ldw	r2,8(r4)
 40087c0:	1080008c 	andi	r2,r2,2
 40087c4:	1000041e 	bne	r2,zero,40087d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
 40087c8:	1880005c 	xori	r2,r3,1
 40087cc:	90bfd216 	blt	r18,r2,4008718 <__alt_data_end+0xfc008718>
 40087d0:	03c00044 	movi	r15,1
 40087d4:	003fed06 	br	400878c <__alt_data_end+0xfc00878c>
 40087d8:	a8006e16 	blt	r21,zero,4008994 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4e0>
 40087dc:	d8801a17 	ldw	r2,104(sp)
 40087e0:	354d883a 	add	r6,r6,r21
 40087e4:	11805026 	beq	r2,r6,4008928 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x474>
 40087e8:	00c0a50e 	bge	zero,r3,4008a80 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5cc>
 40087ec:	03c00044 	movi	r15,1
 40087f0:	1bc4f03a 	xor	r2,r3,r15
 40087f4:	7815883a 	mov	r10,r15
 40087f8:	003fc406 	br	400870c <__alt_data_end+0xfc00870c>
 40087fc:	980d883a 	mov	r6,r19
 4008800:	003f8d06 	br	4008638 <__alt_data_end+0xfc008638>
 4008804:	303fb11e 	bne	r6,zero,40086cc <__alt_data_end+0xfc0086cc>
 4008808:	d9400417 	ldw	r5,16(sp)
 400880c:	283fb21e 	bne	r5,zero,40086d8 <__alt_data_end+0xfc0086d8>
 4008810:	003fcb06 	br	4008740 <__alt_data_end+0xfc008740>
 4008814:	00c00044 	movi	r3,1
 4008818:	d8c00a45 	stb	r3,41(sp)
 400881c:	003fca06 	br	4008748 <__alt_data_end+0xfc008748>
 4008820:	294000cc 	andi	r5,r5,3
 4008824:	283fc826 	beq	r5,zero,4008748 <__alt_data_end+0xfc008748>
 4008828:	003f8c06 	br	400865c <__alt_data_end+0xfc00865c>
 400882c:	18001a26 	beq	r3,zero,4008898 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e4>
 4008830:	181b883a 	mov	r13,r3
 4008834:	501f883a 	mov	r15,r10
 4008838:	50c4f03a 	xor	r2,r10,r3
 400883c:	003fb306 	br	400870c <__alt_data_end+0xfc00870c>
 4008840:	d8c00b17 	ldw	r3,44(sp)
 4008844:	1c000117 	ldw	r16,4(r3)
 4008848:	d8c01917 	ldw	r3,100(sp)
 400884c:	19400117 	ldw	r5,4(r3)
 4008850:	81400626 	beq	r16,r5,400886c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3b8>
 4008854:	80c00007 	ldb	r3,0(r16)
 4008858:	00800a84 	movi	r2,42
 400885c:	18bf4d26 	beq	r3,r2,4008594 <__alt_data_end+0xfc008594>
 4008860:	8009883a 	mov	r4,r16
 4008864:	400bf3c0 	call	400bf3c <strcmp>
 4008868:	10005c1e 	bne	r2,zero,40089dc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x528>
 400886c:	e4c00215 	stw	r19,8(fp)
 4008870:	0005883a 	mov	r2,zero
 4008874:	003f3b06 	br	4008564 <__alt_data_end+0xfc008564>
 4008878:	a0c00117 	ldw	r3,4(r20)
 400887c:	d8800517 	ldw	r2,20(sp)
 4008880:	1884b03a 	or	r2,r3,r2
 4008884:	a0800115 	stw	r2,4(r20)
 4008888:	003fad06 	br	4008740 <__alt_data_end+0xfc008740>
 400888c:	10803fcc 	andi	r2,r2,255
 4008890:	103f911e 	bne	r2,zero,40086d8 <__alt_data_end+0xfc0086d8>
 4008894:	003faa06 	br	4008740 <__alt_data_end+0xfc008740>
 4008898:	501b883a 	mov	r13,r10
 400889c:	5080005c 	xori	r2,r10,1
 40088a0:	5007883a 	mov	r3,r10
 40088a4:	90bfbb0e 	bge	r18,r2,4008794 <__alt_data_end+0xfc008794>
 40088a8:	6880008c 	andi	r2,r13,2
 40088ac:	003f9f06 	br	400872c <__alt_data_end+0xfc00872c>
 40088b0:	d8c00417 	ldw	r3,16(sp)
 40088b4:	d9400517 	ldw	r5,20(sp)
 40088b8:	a0c00015 	stw	r3,0(r20)
 40088bc:	a1400115 	stw	r5,4(r20)
 40088c0:	18000526 	beq	r3,zero,40088d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x424>
 40088c4:	20001626 	beq	r4,zero,4008920 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46c>
 40088c8:	d9400b17 	ldw	r5,44(sp)
 40088cc:	28c00217 	ldw	r3,8(r5)
 40088d0:	18c0004c 	andi	r3,r3,1
 40088d4:	183f2326 	beq	r3,zero,4008564 <__alt_data_end+0xfc008564>
 40088d8:	1021883a 	mov	r16,r2
 40088dc:	003f9806 	br	4008740 <__alt_data_end+0xfc008740>
 40088e0:	9280060e 	bge	r18,r10,40088fc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x448>
 40088e4:	5080004c 	andi	r2,r10,1
 40088e8:	10002426 	beq	r2,zero,400897c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c8>
 40088ec:	d8c00b17 	ldw	r3,44(sp)
 40088f0:	18800217 	ldw	r2,8(r3)
 40088f4:	1080008c 	andi	r2,r2,2
 40088f8:	10003c26 	beq	r2,zero,40089ec <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x538>
 40088fc:	d9400417 	ldw	r5,16(sp)
 4008900:	a8004216 	blt	r21,zero,4008a0c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x558>
 4008904:	d8c01a17 	ldw	r3,104(sp)
 4008908:	2d45883a 	add	r2,r5,r21
 400890c:	18805726 	beq	r3,r2,4008a6c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b8>
 4008910:	7880005c 	xori	r2,r15,1
 4008914:	781b883a 	mov	r13,r15
 4008918:	5007883a 	mov	r3,r10
 400891c:	003fe106 	br	40088a4 <__alt_data_end+0xfc0088a4>
 4008920:	1021883a 	mov	r16,r2
 4008924:	003f8806 	br	4008748 <__alt_data_end+0xfc008748>
 4008928:	03c00184 	movi	r15,6
 400892c:	00ffb016 	blt	zero,r3,40087f0 <__alt_data_end+0xfc0087f0>
 4008930:	7815883a 	mov	r10,r15
 4008934:	7880008c 	andi	r2,r15,2
 4008938:	781b883a 	mov	r13,r15
 400893c:	5007883a 	mov	r3,r10
 4008940:	003f7a06 	br	400872c <__alt_data_end+0xfc00872c>
 4008944:	a039883a 	mov	fp,r20
 4008948:	e0c00315 	stw	r3,12(fp)
 400894c:	d8c00417 	ldw	r3,16(sp)
 4008950:	a0c00015 	stw	r3,0(r20)
 4008954:	d8c00517 	ldw	r3,20(sp)
 4008958:	a0c00115 	stw	r3,4(r20)
 400895c:	003f0106 	br	4008564 <__alt_data_end+0xfc008564>
 4008960:	002d883a 	mov	r22,zero
 4008964:	003f1106 	br	40085ac <__alt_data_end+0xfc0085ac>
 4008968:	8005883a 	mov	r2,r16
 400896c:	003efd06 	br	4008564 <__alt_data_end+0xfc008564>
 4008970:	00bfff84 	movi	r2,-2
 4008974:	b8bfbe1e 	bne	r23,r2,4008870 <__alt_data_end+0xfc008870>
 4008978:	003ef706 	br	4008558 <__alt_data_end+0xfc008558>
 400897c:	5080005c 	xori	r2,r10,1
 4008980:	90bf840e 	bge	r18,r2,4008794 <__alt_data_end+0xfc008794>
 4008984:	501b883a 	mov	r13,r10
 4008988:	5080008c 	andi	r2,r10,2
 400898c:	5007883a 	mov	r3,r10
 4008990:	003f6606 	br	400872c <__alt_data_end+0xfc00872c>
 4008994:	013fff84 	movi	r4,-2
 4008998:	a9003226 	beq	r21,r4,4008a64 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b0>
 400899c:	d9400917 	ldw	r5,36(sp)
 40089a0:	d9001a17 	ldw	r4,104(sp)
 40089a4:	d9c01917 	ldw	r7,100(sp)
 40089a8:	28800017 	ldw	r2,0(r5)
 40089ac:	d9000015 	stw	r4,0(sp)
 40089b0:	d9000917 	ldw	r4,36(sp)
 40089b4:	10800817 	ldw	r2,32(r2)
 40089b8:	a80b883a 	mov	r5,r21
 40089bc:	d8c00d15 	stw	r3,52(sp)
 40089c0:	db400c15 	stw	r13,48(sp)
 40089c4:	103ee83a 	callr	r2
 40089c8:	1015883a 	mov	r10,r2
 40089cc:	101f883a 	mov	r15,r2
 40089d0:	db400c17 	ldw	r13,48(sp)
 40089d4:	d8c00d17 	ldw	r3,52(sp)
 40089d8:	003f6906 	br	4008780 <__alt_data_end+0xfc008780>
 40089dc:	d8c00917 	ldw	r3,36(sp)
 40089e0:	19400117 	ldw	r5,4(r3)
 40089e4:	817ed31e 	bne	r16,r5,4008534 <__alt_data_end+0xfc008534>
 40089e8:	003ed506 	br	4008540 <__alt_data_end+0xfc008540>
 40089ec:	5080005c 	xori	r2,r10,1
 40089f0:	90bfe416 	blt	r18,r2,4008984 <__alt_data_end+0xfc008984>
 40089f4:	003f6706 	br	4008794 <__alt_data_end+0xfc008794>
 40089f8:	00800084 	movi	r2,2
 40089fc:	a0800315 	stw	r2,12(r20)
 4008a00:	a0000015 	stw	zero,0(r20)
 4008a04:	00800044 	movi	r2,1
 4008a08:	003ed606 	br	4008564 <__alt_data_end+0xfc008564>
 4008a0c:	013fff84 	movi	r4,-2
 4008a10:	a9002526 	beq	r21,r4,4008aa8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5f4>
 4008a14:	d8c00917 	ldw	r3,36(sp)
 4008a18:	d9c01917 	ldw	r7,100(sp)
 4008a1c:	d9000917 	ldw	r4,36(sp)
 4008a20:	18800017 	ldw	r2,0(r3)
 4008a24:	d8c01a17 	ldw	r3,104(sp)
 4008a28:	280d883a 	mov	r6,r5
 4008a2c:	a80b883a 	mov	r5,r21
 4008a30:	d8c00015 	stw	r3,0(sp)
 4008a34:	10800817 	ldw	r2,32(r2)
 4008a38:	da800c15 	stw	r10,48(sp)
 4008a3c:	dbc00d15 	stw	r15,52(sp)
 4008a40:	103ee83a 	callr	r2
 4008a44:	da800c17 	ldw	r10,48(sp)
 4008a48:	1007883a 	mov	r3,r2
 4008a4c:	101b883a 	mov	r13,r2
 4008a50:	dbc00d17 	ldw	r15,52(sp)
 4008a54:	1284f03a 	xor	r2,r2,r10
 4008a58:	003f2c06 	br	400870c <__alt_data_end+0xfc00870c>
 4008a5c:	00800184 	movi	r2,6
 4008a60:	003ebe06 	br	400855c <__alt_data_end+0xfc00855c>
 4008a64:	00ff4b0e 	bge	zero,r3,4008794 <__alt_data_end+0xfc008794>
 4008a68:	003f6006 	br	40087ec <__alt_data_end+0xfc0087ec>
 4008a6c:	5080019c 	xori	r2,r10,6
 4008a70:	90800916 	blt	r18,r2,4008a98 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
 4008a74:	50c0018c 	andi	r3,r10,6
 4008a78:	90ff460e 	bge	r18,r3,4008794 <__alt_data_end+0xfc008794>
 4008a7c:	003fde06 	br	40089f8 <__alt_data_end+0xfc0089f8>
 4008a80:	d8c01a17 	ldw	r3,104(sp)
 4008a84:	2d45883a 	add	r2,r5,r21
 4008a88:	18800326 	beq	r3,r2,4008a98 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
 4008a8c:	02800044 	movi	r10,1
 4008a90:	501f883a 	mov	r15,r10
 4008a94:	003f9e06 	br	4008910 <__alt_data_end+0xfc008910>
 4008a98:	03400184 	movi	r13,6
 4008a9c:	00800084 	movi	r2,2
 4008aa0:	6807883a 	mov	r3,r13
 4008aa4:	003f1d06 	br	400871c <__alt_data_end+0xfc00871c>
 4008aa8:	501b883a 	mov	r13,r10
 4008aac:	5080005c 	xori	r2,r10,1
 4008ab0:	5007883a 	mov	r3,r10
 4008ab4:	003f7b06 	br	40088a4 <__alt_data_end+0xfc0088a4>

04008ab8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 4008ab8:	deffef04 	addi	sp,sp,-68
 4008abc:	ddc00e15 	stw	r23,56(sp)
 4008ac0:	dd000b15 	stw	r20,44(sp)
 4008ac4:	dc400815 	stw	r17,32(sp)
 4008ac8:	3029883a 	mov	r20,r6
 4008acc:	dfc01015 	stw	ra,64(sp)
 4008ad0:	df000f15 	stw	fp,60(sp)
 4008ad4:	dd800d15 	stw	r22,52(sp)
 4008ad8:	dd400c15 	stw	r21,48(sp)
 4008adc:	dcc00a15 	stw	r19,40(sp)
 4008ae0:	dc800915 	stw	r18,36(sp)
 4008ae4:	dc000715 	stw	r16,28(sp)
 4008ae8:	d9000515 	stw	r4,20(sp)
 4008aec:	2823883a 	mov	r17,r5
 4008af0:	382f883a 	mov	r23,r7
 4008af4:	4008ea00 	call	4008ea0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 4008af8:	100d883a 	mov	r6,r2
 4008afc:	10803fcc 	andi	r2,r2,255
 4008b00:	1000441e 	bne	r2,zero,4008c14 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x15c>
 4008b04:	bc000217 	ldw	r16,8(r23)
 4008b08:	8080040c 	andi	r2,r16,16
 4008b0c:	10000226 	beq	r2,zero,4008b18 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x60>
 4008b10:	d8c00517 	ldw	r3,20(sp)
 4008b14:	1c000217 	ldw	r16,8(r3)
 4008b18:	d8c00517 	ldw	r3,20(sp)
 4008b1c:	d8800517 	ldw	r2,20(sp)
 4008b20:	1f000317 	ldw	fp,12(r3)
 4008b24:	e01090fa 	slli	r8,fp,3
 4008b28:	40c00304 	addi	r3,r8,12
 4008b2c:	10ed883a 	add	r22,r2,r3
 4008b30:	80c0004c 	andi	r3,r16,1
 4008b34:	42000204 	addi	r8,r8,8
 4008b38:	d8c00415 	stw	r3,16(sp)
 4008b3c:	122b883a 	add	r21,r2,r8
 4008b40:	e0003226 	beq	fp,zero,4008c0c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x154>
 4008b44:	b1800017 	ldw	r6,0(r22)
 4008b48:	d8000015 	stw	zero,0(sp)
 4008b4c:	d8000115 	stw	zero,4(sp)
 4008b50:	dc000215 	stw	r16,8(sp)
 4008b54:	d8000315 	stw	zero,12(sp)
 4008b58:	34c0008c 	andi	r19,r6,2
 4008b5c:	3480004c 	andi	r18,r6,1
 4008b60:	9800021e 	bne	r19,zero,4008b6c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xb4>
 4008b64:	d8c00417 	ldw	r3,16(sp)
 4008b68:	18002426 	beq	r3,zero,4008bfc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
 4008b6c:	a0003626 	beq	r20,zero,4008c48 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x190>
 4008b70:	300dd23a 	srai	r6,r6,8
 4008b74:	90000326 	beq	r18,zero,4008b84 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 4008b78:	a0800017 	ldw	r2,0(r20)
 4008b7c:	118d883a 	add	r6,r2,r6
 4008b80:	31800017 	ldw	r6,0(r6)
 4008b84:	a18d883a 	add	r6,r20,r6
 4008b88:	a9000017 	ldw	r4,0(r21)
 4008b8c:	d80f883a 	mov	r7,sp
 4008b90:	880b883a 	mov	r5,r17
 4008b94:	20800017 	ldw	r2,0(r4)
 4008b98:	10800617 	ldw	r2,24(r2)
 4008b9c:	103ee83a 	callr	r2
 4008ba0:	100d883a 	mov	r6,r2
 4008ba4:	10803fcc 	andi	r2,r2,255
 4008ba8:	10001426 	beq	r2,zero,4008bfc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
 4008bac:	d8800317 	ldw	r2,12(sp)
 4008bb0:	00c00204 	movi	r3,8
 4008bb4:	10c02626 	beq	r2,r3,4008c50 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x198>
 4008bb8:	d8800117 	ldw	r2,4(sp)
 4008bbc:	00c000c4 	movi	r3,3
 4008bc0:	1880040e 	bge	r3,r2,4008bd4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
 4008bc4:	9800031e 	bne	r19,zero,4008bd4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
 4008bc8:	00ffff44 	movi	r3,-3
 4008bcc:	10c4703a 	and	r2,r2,r3
 4008bd0:	d8800115 	stw	r2,4(sp)
 4008bd4:	b9400317 	ldw	r5,12(r23)
 4008bd8:	28002126 	beq	r5,zero,4008c60 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a8>
 4008bdc:	b8800017 	ldw	r2,0(r23)
 4008be0:	d9000017 	ldw	r4,0(sp)
 4008be4:	11004d1e 	bne	r2,r4,4008d1c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x264>
 4008be8:	10003126 	beq	r2,zero,4008cb0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1f8>
 4008bec:	b9000117 	ldw	r4,4(r23)
 4008bf0:	d8800117 	ldw	r2,4(sp)
 4008bf4:	2084b03a 	or	r2,r4,r2
 4008bf8:	b8800115 	stw	r2,4(r23)
 4008bfc:	e73fffc4 	addi	fp,fp,-1
 4008c00:	b5bffe04 	addi	r22,r22,-8
 4008c04:	ad7ffe04 	addi	r21,r21,-8
 4008c08:	e03fce1e 	bne	fp,zero,4008b44 <__alt_data_end+0xfc008b44>
 4008c0c:	b9800117 	ldw	r6,4(r23)
 4008c10:	300cc03a 	cmpne	r6,r6,zero
 4008c14:	3005883a 	mov	r2,r6
 4008c18:	dfc01017 	ldw	ra,64(sp)
 4008c1c:	df000f17 	ldw	fp,60(sp)
 4008c20:	ddc00e17 	ldw	r23,56(sp)
 4008c24:	dd800d17 	ldw	r22,52(sp)
 4008c28:	dd400c17 	ldw	r21,48(sp)
 4008c2c:	dd000b17 	ldw	r20,44(sp)
 4008c30:	dcc00a17 	ldw	r19,40(sp)
 4008c34:	dc800917 	ldw	r18,36(sp)
 4008c38:	dc400817 	ldw	r17,32(sp)
 4008c3c:	dc000717 	ldw	r16,28(sp)
 4008c40:	dec01104 	addi	sp,sp,68
 4008c44:	f800283a 	ret
 4008c48:	000d883a 	mov	r6,zero
 4008c4c:	003fce06 	br	4008b88 <__alt_data_end+0xfc008b88>
 4008c50:	903fd926 	beq	r18,zero,4008bb8 <__alt_data_end+0xfc008bb8>
 4008c54:	a8800017 	ldw	r2,0(r21)
 4008c58:	d8800315 	stw	r2,12(sp)
 4008c5c:	003fd606 	br	4008bb8 <__alt_data_end+0xfc008bb8>
 4008c60:	d9000017 	ldw	r4,0(sp)
 4008c64:	d8800117 	ldw	r2,4(sp)
 4008c68:	00c000c4 	movi	r3,3
 4008c6c:	b9000015 	stw	r4,0(r23)
 4008c70:	d9000217 	ldw	r4,8(sp)
 4008c74:	b8800115 	stw	r2,4(r23)
 4008c78:	b9000215 	stw	r4,8(r23)
 4008c7c:	d9000317 	ldw	r4,12(sp)
 4008c80:	b9000315 	stw	r4,12(r23)
 4008c84:	18bfe30e 	bge	r3,r2,4008c14 <__alt_data_end+0xfc008c14>
 4008c88:	1100008c 	andi	r4,r2,2
 4008c8c:	20001926 	beq	r4,zero,4008cf4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x23c>
 4008c90:	d8c00517 	ldw	r3,20(sp)
 4008c94:	18800217 	ldw	r2,8(r3)
 4008c98:	1080004c 	andi	r2,r2,1
 4008c9c:	103fdd26 	beq	r2,zero,4008c14 <__alt_data_end+0xfc008c14>
 4008ca0:	e73fffc4 	addi	fp,fp,-1
 4008ca4:	b5bffe04 	addi	r22,r22,-8
 4008ca8:	ad7ffe04 	addi	r21,r21,-8
 4008cac:	003fd606 	br	4008c08 <__alt_data_end+0xfc008c08>
 4008cb0:	d8800317 	ldw	r2,12(sp)
 4008cb4:	00c00204 	movi	r3,8
 4008cb8:	10c00b26 	beq	r2,r3,4008ce8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
 4008cbc:	28c00a26 	beq	r5,r3,4008ce8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
 4008cc0:	11000117 	ldw	r4,4(r2)
 4008cc4:	29400117 	ldw	r5,4(r5)
 4008cc8:	217fc826 	beq	r4,r5,4008bec <__alt_data_end+0xfc008bec>
 4008ccc:	20800007 	ldb	r2,0(r4)
 4008cd0:	00c00a84 	movi	r3,42
 4008cd4:	10c00426 	beq	r2,r3,4008ce8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
 4008cd8:	d9800615 	stw	r6,24(sp)
 4008cdc:	400bf3c0 	call	400bf3c <strcmp>
 4008ce0:	d9800617 	ldw	r6,24(sp)
 4008ce4:	103fc126 	beq	r2,zero,4008bec <__alt_data_end+0xfc008bec>
 4008ce8:	00800084 	movi	r2,2
 4008cec:	b8800115 	stw	r2,4(r23)
 4008cf0:	003fc806 	br	4008c14 <__alt_data_end+0xfc008c14>
 4008cf4:	1080004c 	andi	r2,r2,1
 4008cf8:	103fc626 	beq	r2,zero,4008c14 <__alt_data_end+0xfc008c14>
 4008cfc:	d8c00517 	ldw	r3,20(sp)
 4008d00:	18800217 	ldw	r2,8(r3)
 4008d04:	1080008c 	andi	r2,r2,2
 4008d08:	103fc226 	beq	r2,zero,4008c14 <__alt_data_end+0xfc008c14>
 4008d0c:	e73fffc4 	addi	fp,fp,-1
 4008d10:	b5bffe04 	addi	r22,r22,-8
 4008d14:	ad7ffe04 	addi	r21,r21,-8
 4008d18:	003fbb06 	br	4008c08 <__alt_data_end+0xfc008c08>
 4008d1c:	00800084 	movi	r2,2
 4008d20:	b8000015 	stw	zero,0(r23)
 4008d24:	b8800115 	stw	r2,4(r23)
 4008d28:	003fba06 	br	4008c14 <__alt_data_end+0xfc008c14>

04008d2c <_ZNSt9type_infoD1Ev>:
 4008d2c:	f800283a 	ret

04008d30 <_ZNKSt9type_info14__is_pointer_pEv>:
 4008d30:	0005883a 	mov	r2,zero
 4008d34:	f800283a 	ret

04008d38 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 4008d38:	0005883a 	mov	r2,zero
 4008d3c:	f800283a 	ret

04008d40 <_ZNSt9type_infoD0Ev>:
 4008d40:	4008d881 	jmpi	4008d88 <_ZdlPv>

04008d44 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 4008d44:	21000117 	ldw	r4,4(r4)
 4008d48:	29400117 	ldw	r5,4(r5)
 4008d4c:	21400c26 	beq	r4,r5,4008d80 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
 4008d50:	20c00007 	ldb	r3,0(r4)
 4008d54:	00800a84 	movi	r2,42
 4008d58:	18800726 	beq	r3,r2,4008d78 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
 4008d5c:	deffff04 	addi	sp,sp,-4
 4008d60:	dfc00015 	stw	ra,0(sp)
 4008d64:	400bf3c0 	call	400bf3c <strcmp>
 4008d68:	1005003a 	cmpeq	r2,r2,zero
 4008d6c:	dfc00017 	ldw	ra,0(sp)
 4008d70:	dec00104 	addi	sp,sp,4
 4008d74:	f800283a 	ret
 4008d78:	0005883a 	mov	r2,zero
 4008d7c:	f800283a 	ret
 4008d80:	00800044 	movi	r2,1
 4008d84:	f800283a 	ret

04008d88 <_ZdlPv>:
 4008d88:	400aff41 	jmpi	400aff4 <free>

04008d8c <__cxa_pure_virtual>:
 4008d8c:	014100b4 	movhi	r5,1026
 4008d90:	deffff04 	addi	sp,sp,-4
 4008d94:	29467204 	addi	r5,r5,6600
 4008d98:	018006c4 	movi	r6,27
 4008d9c:	01000084 	movi	r4,2
 4008da0:	dfc00015 	stw	ra,0(sp)
 4008da4:	40189a80 	call	40189a8 <write>
 4008da8:	40091540 	call	4009154 <_ZSt9terminatev>

04008dac <__cxa_deleted_virtual>:
 4008dac:	014100b4 	movhi	r5,1026
 4008db0:	deffff04 	addi	sp,sp,-4
 4008db4:	29467904 	addi	r5,r5,6628
 4008db8:	01800784 	movi	r6,30
 4008dbc:	01000084 	movi	r4,2
 4008dc0:	dfc00015 	stw	ra,0(sp)
 4008dc4:	40189a80 	call	40189a8 <write>
 4008dc8:	40091540 	call	4009154 <_ZSt9terminatev>

04008dcc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 4008dcc:	20800017 	ldw	r2,0(r4)
 4008dd0:	defffa04 	addi	sp,sp,-24
 4008dd4:	dc000415 	stw	r16,16(sp)
 4008dd8:	10800617 	ldw	r2,24(r2)
 4008ddc:	3021883a 	mov	r16,r6
 4008de0:	31800017 	ldw	r6,0(r6)
 4008de4:	00c00404 	movi	r3,16
 4008de8:	d8c00215 	stw	r3,8(sp)
 4008dec:	dfc00515 	stw	ra,20(sp)
 4008df0:	d8000015 	stw	zero,0(sp)
 4008df4:	d8000115 	stw	zero,4(sp)
 4008df8:	d8000315 	stw	zero,12(sp)
 4008dfc:	d80f883a 	mov	r7,sp
 4008e00:	103ee83a 	callr	r2
 4008e04:	d8800117 	ldw	r2,4(sp)
 4008e08:	00c00184 	movi	r3,6
 4008e0c:	1080018c 	andi	r2,r2,6
 4008e10:	10c00526 	beq	r2,r3,4008e28 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
 4008e14:	0005883a 	mov	r2,zero
 4008e18:	dfc00517 	ldw	ra,20(sp)
 4008e1c:	dc000417 	ldw	r16,16(sp)
 4008e20:	dec00604 	addi	sp,sp,24
 4008e24:	f800283a 	ret
 4008e28:	d8c00017 	ldw	r3,0(sp)
 4008e2c:	00800044 	movi	r2,1
 4008e30:	80c00015 	stw	r3,0(r16)
 4008e34:	dfc00517 	ldw	ra,20(sp)
 4008e38:	dc000417 	ldw	r16,16(sp)
 4008e3c:	dec00604 	addi	sp,sp,24
 4008e40:	f800283a 	ret

04008e44 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 4008e44:	d8800017 	ldw	r2,0(sp)
 4008e48:	11800226 	beq	r2,r6,4008e54 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
 4008e4c:	00800044 	movi	r2,1
 4008e50:	f800283a 	ret
 4008e54:	00800184 	movi	r2,6
 4008e58:	f800283a 	ret

04008e5c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 4008e5c:	008100b4 	movhi	r2,1026
 4008e60:	10868f04 	addi	r2,r2,6716
 4008e64:	20800015 	stw	r2,0(r4)
 4008e68:	4008d2c1 	jmpi	4008d2c <_ZNSt9type_infoD1Ev>

04008e6c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 4008e6c:	defffe04 	addi	sp,sp,-8
 4008e70:	008100b4 	movhi	r2,1026
 4008e74:	dc000015 	stw	r16,0(sp)
 4008e78:	dfc00115 	stw	ra,4(sp)
 4008e7c:	10868f04 	addi	r2,r2,6716
 4008e80:	20800015 	stw	r2,0(r4)
 4008e84:	2021883a 	mov	r16,r4
 4008e88:	4008d2c0 	call	4008d2c <_ZNSt9type_infoD1Ev>
 4008e8c:	8009883a 	mov	r4,r16
 4008e90:	dfc00117 	ldw	ra,4(sp)
 4008e94:	dc000017 	ldw	r16,0(sp)
 4008e98:	dec00204 	addi	sp,sp,8
 4008e9c:	4008d881 	jmpi	4008d88 <_ZdlPv>

04008ea0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 4008ea0:	21000117 	ldw	r4,4(r4)
 4008ea4:	29400117 	ldw	r5,4(r5)
 4008ea8:	defffd04 	addi	sp,sp,-12
 4008eac:	dc400115 	stw	r17,4(sp)
 4008eb0:	dc000015 	stw	r16,0(sp)
 4008eb4:	dfc00215 	stw	ra,8(sp)
 4008eb8:	3023883a 	mov	r17,r6
 4008ebc:	3821883a 	mov	r16,r7
 4008ec0:	21400526 	beq	r4,r5,4008ed8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
 4008ec4:	20c00007 	ldb	r3,0(r4)
 4008ec8:	00800a84 	movi	r2,42
 4008ecc:	18800d26 	beq	r3,r2,4008f04 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
 4008ed0:	400bf3c0 	call	400bf3c <strcmp>
 4008ed4:	10000b1e 	bne	r2,zero,4008f04 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
 4008ed8:	00800204 	movi	r2,8
 4008edc:	80800315 	stw	r2,12(r16)
 4008ee0:	00800184 	movi	r2,6
 4008ee4:	80800115 	stw	r2,4(r16)
 4008ee8:	84400015 	stw	r17,0(r16)
 4008eec:	00800044 	movi	r2,1
 4008ef0:	dfc00217 	ldw	ra,8(sp)
 4008ef4:	dc400117 	ldw	r17,4(sp)
 4008ef8:	dc000017 	ldw	r16,0(sp)
 4008efc:	dec00304 	addi	sp,sp,12
 4008f00:	f800283a 	ret
 4008f04:	0005883a 	mov	r2,zero
 4008f08:	003ff906 	br	4008ef0 <__alt_data_end+0xfc008ef0>

04008f0c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 4008f0c:	defffa04 	addi	sp,sp,-24
 4008f10:	dc800415 	stw	r18,16(sp)
 4008f14:	d8800817 	ldw	r2,32(sp)
 4008f18:	dc800617 	ldw	r18,24(sp)
 4008f1c:	dc400315 	stw	r17,12(sp)
 4008f20:	dc000215 	stw	r16,8(sp)
 4008f24:	dfc00515 	stw	ra,20(sp)
 4008f28:	dc400917 	ldw	r17,36(sp)
 4008f2c:	24000117 	ldw	r16,4(r4)
 4008f30:	90801526 	beq	r18,r2,4008f88 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
 4008f34:	39400117 	ldw	r5,4(r7)
 4008f38:	2c000826 	beq	r5,r16,4008f5c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
 4008f3c:	80c00007 	ldb	r3,0(r16)
 4008f40:	00800a84 	movi	r2,42
 4008f44:	18800926 	beq	r3,r2,4008f6c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 4008f48:	8009883a 	mov	r4,r16
 4008f4c:	d9800115 	stw	r6,4(sp)
 4008f50:	400bf3c0 	call	400bf3c <strcmp>
 4008f54:	d9800117 	ldw	r6,4(sp)
 4008f58:	1000041e 	bne	r2,zero,4008f6c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 4008f5c:	00800044 	movi	r2,1
 4008f60:	8c800015 	stw	r18,0(r17)
 4008f64:	89800115 	stw	r6,4(r17)
 4008f68:	88800315 	stw	r2,12(r17)
 4008f6c:	0005883a 	mov	r2,zero
 4008f70:	dfc00517 	ldw	ra,20(sp)
 4008f74:	dc800417 	ldw	r18,16(sp)
 4008f78:	dc400317 	ldw	r17,12(sp)
 4008f7c:	dc000217 	ldw	r16,8(sp)
 4008f80:	dec00604 	addi	sp,sp,24
 4008f84:	f800283a 	ret
 4008f88:	d8800717 	ldw	r2,28(sp)
 4008f8c:	11400117 	ldw	r5,4(r2)
 4008f90:	81400a26 	beq	r16,r5,4008fbc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
 4008f94:	80c00007 	ldb	r3,0(r16)
 4008f98:	00800a84 	movi	r2,42
 4008f9c:	18800c26 	beq	r3,r2,4008fd0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
 4008fa0:	8009883a 	mov	r4,r16
 4008fa4:	d9800115 	stw	r6,4(sp)
 4008fa8:	d9c00015 	stw	r7,0(sp)
 4008fac:	400bf3c0 	call	400bf3c <strcmp>
 4008fb0:	d9800117 	ldw	r6,4(sp)
 4008fb4:	d9c00017 	ldw	r7,0(sp)
 4008fb8:	1000021e 	bne	r2,zero,4008fc4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
 4008fbc:	89800215 	stw	r6,8(r17)
 4008fc0:	003fea06 	br	4008f6c <__alt_data_end+0xfc008f6c>
 4008fc4:	39400117 	ldw	r5,4(r7)
 4008fc8:	817fdf1e 	bne	r16,r5,4008f48 <__alt_data_end+0xfc008f48>
 4008fcc:	003fe306 	br	4008f5c <__alt_data_end+0xfc008f5c>
 4008fd0:	38800117 	ldw	r2,4(r7)
 4008fd4:	80bfe51e 	bne	r16,r2,4008f6c <__alt_data_end+0xfc008f6c>
 4008fd8:	003fe006 	br	4008f5c <__alt_data_end+0xfc008f5c>

04008fdc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 4008fdc:	20800117 	ldw	r2,4(r4)
 4008fe0:	28c00117 	ldw	r3,4(r5)
 4008fe4:	10c02926 	beq	r2,r3,400908c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
 4008fe8:	defffb04 	addi	sp,sp,-20
 4008fec:	dcc00315 	stw	r19,12(sp)
 4008ff0:	dc800215 	stw	r18,8(sp)
 4008ff4:	dc400115 	stw	r17,4(sp)
 4008ff8:	dc000015 	stw	r16,0(sp)
 4008ffc:	dfc00415 	stw	ra,16(sp)
 4009000:	2821883a 	mov	r16,r5
 4009004:	11400007 	ldb	r5,0(r2)
 4009008:	2025883a 	mov	r18,r4
 400900c:	01000a84 	movi	r4,42
 4009010:	3823883a 	mov	r17,r7
 4009014:	3027883a 	mov	r19,r6
 4009018:	29000626 	beq	r5,r4,4009034 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 400901c:	180b883a 	mov	r5,r3
 4009020:	1009883a 	mov	r4,r2
 4009024:	400bf3c0 	call	400bf3c <strcmp>
 4009028:	1000021e 	bne	r2,zero,4009034 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 400902c:	00800044 	movi	r2,1
 4009030:	00000306 	br	4009040 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
 4009034:	008000c4 	movi	r2,3
 4009038:	1440082e 	bgeu	r2,r17,400905c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
 400903c:	0005883a 	mov	r2,zero
 4009040:	dfc00417 	ldw	ra,16(sp)
 4009044:	dcc00317 	ldw	r19,12(sp)
 4009048:	dc800217 	ldw	r18,8(sp)
 400904c:	dc400117 	ldw	r17,4(sp)
 4009050:	dc000017 	ldw	r16,0(sp)
 4009054:	dec00504 	addi	sp,sp,20
 4009058:	f800283a 	ret
 400905c:	80800017 	ldw	r2,0(r16)
 4009060:	980d883a 	mov	r6,r19
 4009064:	900b883a 	mov	r5,r18
 4009068:	10800517 	ldw	r2,20(r2)
 400906c:	8009883a 	mov	r4,r16
 4009070:	dfc00417 	ldw	ra,16(sp)
 4009074:	dcc00317 	ldw	r19,12(sp)
 4009078:	dc800217 	ldw	r18,8(sp)
 400907c:	dc400117 	ldw	r17,4(sp)
 4009080:	dc000017 	ldw	r16,0(sp)
 4009084:	dec00504 	addi	sp,sp,20
 4009088:	1000683a 	jmp	r2
 400908c:	00800044 	movi	r2,1
 4009090:	f800283a 	ret

04009094 <_ZN10__cxxabiv111__terminateEPFvvE>:
 4009094:	00810074 	movhi	r2,1025
 4009098:	deffef04 	addi	sp,sp,-68
 400909c:	10a67f04 	addi	r2,r2,-26116
 40090a0:	d8800615 	stw	r2,24(sp)
 40090a4:	008100b4 	movhi	r2,1026
 40090a8:	10ac5c04 	addi	r2,r2,-20112
 40090ac:	d8800715 	stw	r2,28(sp)
 40090b0:	00810074 	movhi	r2,1025
 40090b4:	10a43b04 	addi	r2,r2,-28436
 40090b8:	d9000d15 	stw	r4,52(sp)
 40090bc:	d809883a 	mov	r4,sp
 40090c0:	d8800915 	stw	r2,36(sp)
 40090c4:	dfc01015 	stw	ra,64(sp)
 40090c8:	df000f15 	stw	fp,60(sp)
 40090cc:	dec00815 	stw	sp,32(sp)
 40090d0:	dec00a15 	stw	sp,40(sp)
 40090d4:	400ac640 	call	400ac64 <_Unwind_SjLj_Register>
 40090d8:	00800044 	movi	r2,1
 40090dc:	d8800115 	stw	r2,4(sp)
 40090e0:	d8800d17 	ldw	r2,52(sp)
 40090e4:	103ee83a 	callr	r2
 40090e8:	400af7c0 	call	400af7c <abort>
 40090ec:	d8c00217 	ldw	r3,8(sp)
 40090f0:	d8800117 	ldw	r2,4(sp)
 40090f4:	d8c00d15 	stw	r3,52(sp)
 40090f8:	d8c00317 	ldw	r3,12(sp)
 40090fc:	d8c00e15 	stw	r3,56(sp)
 4009100:	10000b26 	beq	r2,zero,4009130 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
 4009104:	10bfffc4 	addi	r2,r2,-1
 4009108:	10000126 	beq	r2,zero,4009110 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
 400910c:	003b68fa 	trap	3
 4009110:	d8000115 	stw	zero,4(sp)
 4009114:	400a4400 	call	400a440 <__cxa_end_catch>
 4009118:	d8c00e17 	ldw	r3,56(sp)
 400911c:	00bfffc4 	movi	r2,-1
 4009120:	18800826 	beq	r3,r2,4009144 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
 4009124:	d9000d17 	ldw	r4,52(sp)
 4009128:	d8800115 	stw	r2,4(sp)
 400912c:	400ae600 	call	400ae60 <_Unwind_SjLj_Resume>
 4009130:	d9000d17 	ldw	r4,52(sp)
 4009134:	400a38c0 	call	400a38c <__cxa_begin_catch>
 4009138:	00800084 	movi	r2,2
 400913c:	d8800115 	stw	r2,4(sp)
 4009140:	400af7c0 	call	400af7c <abort>
 4009144:	d8800e17 	ldw	r2,56(sp)
 4009148:	d9000d17 	ldw	r4,52(sp)
 400914c:	d8800115 	stw	r2,4(sp)
 4009150:	4009ffc0 	call	4009ffc <__cxa_call_unexpected>

04009154 <_ZSt9terminatev>:
 4009154:	008100b4 	movhi	r2,1026
 4009158:	1093eb04 	addi	r2,r2,20396
 400915c:	11000017 	ldw	r4,0(r2)
 4009160:	deffff04 	addi	sp,sp,-4
 4009164:	dfc00015 	stw	ra,0(sp)
 4009168:	40090940 	call	4009094 <_ZN10__cxxabiv111__terminateEPFvvE>

0400916c <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 400916c:	deffff04 	addi	sp,sp,-4
 4009170:	dfc00015 	stw	ra,0(sp)
 4009174:	203ee83a 	callr	r4
 4009178:	40091540 	call	4009154 <_ZSt9terminatev>

0400917c <_ZSt10unexpectedv>:
 400917c:	008100b4 	movhi	r2,1026
 4009180:	1093ea04 	addi	r2,r2,20392
 4009184:	11000017 	ldw	r4,0(r2)
 4009188:	deffff04 	addi	sp,sp,-4
 400918c:	dfc00015 	stw	ra,0(sp)
 4009190:	400916c0 	call	400916c <_ZN10__cxxabiv112__unexpectedEPFvvE>

04009194 <_ZSt13set_terminatePFvvE>:
 4009194:	00c100b4 	movhi	r3,1026
 4009198:	18d3eb04 	addi	r3,r3,20396
 400919c:	18800017 	ldw	r2,0(r3)
 40091a0:	19000015 	stw	r4,0(r3)
 40091a4:	f800283a 	ret

040091a8 <_ZSt13get_terminatev>:
 40091a8:	008100b4 	movhi	r2,1026
 40091ac:	1093eb04 	addi	r2,r2,20396
 40091b0:	10800017 	ldw	r2,0(r2)
 40091b4:	f800283a 	ret

040091b8 <_ZSt14set_unexpectedPFvvE>:
 40091b8:	00c100b4 	movhi	r3,1026
 40091bc:	18d3ea04 	addi	r3,r3,20392
 40091c0:	18800017 	ldw	r2,0(r3)
 40091c4:	19000015 	stw	r4,0(r3)
 40091c8:	f800283a 	ret

040091cc <_ZSt14get_unexpectedv>:
 40091cc:	008100b4 	movhi	r2,1026
 40091d0:	1093ea04 	addi	r2,r2,20392
 40091d4:	10800017 	ldw	r2,0(r2)
 40091d8:	f800283a 	ret

040091dc <_ZL21size_of_encoded_valueh>:
 40091dc:	deffff04 	addi	sp,sp,-4
 40091e0:	dfc00015 	stw	ra,0(sp)
 40091e4:	20c03fcc 	andi	r3,r4,255
 40091e8:	00803fc4 	movi	r2,255
 40091ec:	18802026 	beq	r3,r2,4009270 <_ZL21size_of_encoded_valueh+0x94>
 40091f0:	210001cc 	andi	r4,r4,7
 40091f4:	00800144 	movi	r2,5
 40091f8:	11001c36 	bltu	r2,r4,400926c <_ZL21size_of_encoded_valueh+0x90>
 40091fc:	200890ba 	slli	r4,r4,2
 4009200:	00810074 	movhi	r2,1025
 4009204:	10a48504 	addi	r2,r2,-28140
 4009208:	2089883a 	add	r4,r4,r2
 400920c:	20800017 	ldw	r2,0(r4)
 4009210:	1000683a 	jmp	r2
 4009214:	0400922c 	andhi	r16,zero,584
 4009218:	0400926c 	andhi	r16,zero,585
 400921c:	0400923c 	xorhi	r16,zero,584
 4009220:	0400922c 	andhi	r16,zero,584
 4009224:	0400925c 	xori	r16,zero,585
 4009228:	0400924c 	andi	r16,zero,585
 400922c:	00800104 	movi	r2,4
 4009230:	dfc00017 	ldw	ra,0(sp)
 4009234:	dec00104 	addi	sp,sp,4
 4009238:	f800283a 	ret
 400923c:	00800084 	movi	r2,2
 4009240:	dfc00017 	ldw	ra,0(sp)
 4009244:	dec00104 	addi	sp,sp,4
 4009248:	f800283a 	ret
 400924c:	00800044 	movi	r2,1
 4009250:	dfc00017 	ldw	ra,0(sp)
 4009254:	dec00104 	addi	sp,sp,4
 4009258:	f800283a 	ret
 400925c:	00800204 	movi	r2,8
 4009260:	dfc00017 	ldw	ra,0(sp)
 4009264:	dec00104 	addi	sp,sp,4
 4009268:	f800283a 	ret
 400926c:	400af7c0 	call	400af7c <abort>
 4009270:	0005883a 	mov	r2,zero
 4009274:	dfc00017 	ldw	ra,0(sp)
 4009278:	dec00104 	addi	sp,sp,4
 400927c:	f800283a 	ret

04009280 <_ZL28read_encoded_value_with_basehjPKhPj>:
 4009280:	deffff04 	addi	sp,sp,-4
 4009284:	dfc00015 	stw	ra,0(sp)
 4009288:	20c03fcc 	andi	r3,r4,255
 400928c:	00801404 	movi	r2,80
 4009290:	18807326 	beq	r3,r2,4009460 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
 4009294:	20c003cc 	andi	r3,r4,15
 4009298:	00800304 	movi	r2,12
 400929c:	10c06f36 	bltu	r2,r3,400945c <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
 40092a0:	180690ba 	slli	r3,r3,2
 40092a4:	02010074 	movhi	r8,1025
 40092a8:	4224ae04 	addi	r8,r8,-27976
 40092ac:	1a07883a 	add	r3,r3,r8
 40092b0:	18800017 	ldw	r2,0(r3)
 40092b4:	1000683a 	jmp	r2
 40092b8:	040092ec 	andhi	r16,zero,587
 40092bc:	04009408 	cmpgei	r16,zero,592
 40092c0:	04009444 	movi	r16,593
 40092c4:	040092ec 	andhi	r16,zero,587
 40092c8:	04009350 	cmplti	r16,zero,589
 40092cc:	040093a4 	muli	r16,zero,590
 40092d0:	0400945c 	xori	r16,zero,593
 40092d4:	0400945c 	xori	r16,zero,593
 40092d8:	0400945c 	xori	r16,zero,593
 40092dc:	040093b0 	cmpltui	r16,zero,590
 40092e0:	04009380 	call	400938 <__alt_mem_sdram-0x3bff6c8>
 40092e4:	040092ec 	andhi	r16,zero,587
 40092e8:	04009350 	cmplti	r16,zero,589
 40092ec:	30800043 	ldbu	r2,1(r6)
 40092f0:	30c00083 	ldbu	r3,2(r6)
 40092f4:	324000c3 	ldbu	r9,3(r6)
 40092f8:	32000003 	ldbu	r8,0(r6)
 40092fc:	1004923a 	slli	r2,r2,8
 4009300:	1806943a 	slli	r3,r3,16
 4009304:	4812963a 	slli	r9,r9,24
 4009308:	1204b03a 	or	r2,r2,r8
 400930c:	1884b03a 	or	r2,r3,r2
 4009310:	4886b03a 	or	r3,r9,r2
 4009314:	30800104 	addi	r2,r6,4
 4009318:	18000926 	beq	r3,zero,4009340 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
 400931c:	22001c0c 	andi	r8,r4,112
 4009320:	02400404 	movi	r9,16
 4009324:	42405726 	beq	r8,r9,4009484 <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
 4009328:	21003fcc 	andi	r4,r4,255
 400932c:	2100201c 	xori	r4,r4,128
 4009330:	213fe004 	addi	r4,r4,-128
 4009334:	1947883a 	add	r3,r3,r5
 4009338:	2000010e 	bge	r4,zero,4009340 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
 400933c:	18c00017 	ldw	r3,0(r3)
 4009340:	38c00015 	stw	r3,0(r7)
 4009344:	dfc00017 	ldw	ra,0(sp)
 4009348:	dec00104 	addi	sp,sp,4
 400934c:	f800283a 	ret
 4009350:	30800043 	ldbu	r2,1(r6)
 4009354:	30c00083 	ldbu	r3,2(r6)
 4009358:	324000c3 	ldbu	r9,3(r6)
 400935c:	32000003 	ldbu	r8,0(r6)
 4009360:	1004923a 	slli	r2,r2,8
 4009364:	1806943a 	slli	r3,r3,16
 4009368:	4812963a 	slli	r9,r9,24
 400936c:	1204b03a 	or	r2,r2,r8
 4009370:	1884b03a 	or	r2,r3,r2
 4009374:	4886b03a 	or	r3,r9,r2
 4009378:	30800204 	addi	r2,r6,8
 400937c:	003fe606 	br	4009318 <__alt_data_end+0xfc009318>
 4009380:	30c00043 	ldbu	r3,1(r6)
 4009384:	32000003 	ldbu	r8,0(r6)
 4009388:	30800084 	addi	r2,r6,2
 400938c:	1806923a 	slli	r3,r3,8
 4009390:	1a06b03a 	or	r3,r3,r8
 4009394:	18ffffcc 	andi	r3,r3,65535
 4009398:	18e0001c 	xori	r3,r3,32768
 400939c:	18e00004 	addi	r3,r3,-32768
 40093a0:	003fdd06 	br	4009318 <__alt_data_end+0xfc009318>
 40093a4:	30c00003 	ldbu	r3,0(r6)
 40093a8:	30800044 	addi	r2,r6,1
 40093ac:	003fda06 	br	4009318 <__alt_data_end+0xfc009318>
 40093b0:	3017883a 	mov	r11,r6
 40093b4:	0007883a 	mov	r3,zero
 40093b8:	0013883a 	mov	r9,zero
 40093bc:	5a800003 	ldbu	r10,0(r11)
 40093c0:	58800044 	addi	r2,r11,1
 40093c4:	1017883a 	mov	r11,r2
 40093c8:	52001fcc 	andi	r8,r10,127
 40093cc:	4250983a 	sll	r8,r8,r9
 40093d0:	53003fcc 	andi	r12,r10,255
 40093d4:	6300201c 	xori	r12,r12,128
 40093d8:	633fe004 	addi	r12,r12,-128
 40093dc:	1a06b03a 	or	r3,r3,r8
 40093e0:	4a4001c4 	addi	r9,r9,7
 40093e4:	603ff516 	blt	r12,zero,40093bc <__alt_data_end+0xfc0093bc>
 40093e8:	020007c4 	movi	r8,31
 40093ec:	427fca36 	bltu	r8,r9,4009318 <__alt_data_end+0xfc009318>
 40093f0:	5280100c 	andi	r10,r10,64
 40093f4:	503fc826 	beq	r10,zero,4009318 <__alt_data_end+0xfc009318>
 40093f8:	023fffc4 	movi	r8,-1
 40093fc:	4252983a 	sll	r9,r8,r9
 4009400:	1a46b03a 	or	r3,r3,r9
 4009404:	003fc506 	br	400931c <__alt_data_end+0xfc00931c>
 4009408:	3017883a 	mov	r11,r6
 400940c:	0007883a 	mov	r3,zero
 4009410:	0015883a 	mov	r10,zero
 4009414:	5a000003 	ldbu	r8,0(r11)
 4009418:	58800044 	addi	r2,r11,1
 400941c:	1017883a 	mov	r11,r2
 4009420:	42401fcc 	andi	r9,r8,127
 4009424:	4a92983a 	sll	r9,r9,r10
 4009428:	42003fcc 	andi	r8,r8,255
 400942c:	4200201c 	xori	r8,r8,128
 4009430:	423fe004 	addi	r8,r8,-128
 4009434:	1a46b03a 	or	r3,r3,r9
 4009438:	528001c4 	addi	r10,r10,7
 400943c:	403ff516 	blt	r8,zero,4009414 <__alt_data_end+0xfc009414>
 4009440:	003fb506 	br	4009318 <__alt_data_end+0xfc009318>
 4009444:	30c00043 	ldbu	r3,1(r6)
 4009448:	32000003 	ldbu	r8,0(r6)
 400944c:	30800084 	addi	r2,r6,2
 4009450:	1806923a 	slli	r3,r3,8
 4009454:	1a06b03a 	or	r3,r3,r8
 4009458:	003faf06 	br	4009318 <__alt_data_end+0xfc009318>
 400945c:	400af7c0 	call	400af7c <abort>
 4009460:	308000c4 	addi	r2,r6,3
 4009464:	00ffff04 	movi	r3,-4
 4009468:	10c4703a 	and	r2,r2,r3
 400946c:	10c00017 	ldw	r3,0(r2)
 4009470:	10800104 	addi	r2,r2,4
 4009474:	38c00015 	stw	r3,0(r7)
 4009478:	dfc00017 	ldw	ra,0(sp)
 400947c:	dec00104 	addi	sp,sp,4
 4009480:	f800283a 	ret
 4009484:	300b883a 	mov	r5,r6
 4009488:	003fa706 	br	4009328 <__alt_data_end+0xfc009328>

0400948c <_ZL15get_ttype_entryP16lsda_header_infom>:
 400948c:	defffc04 	addi	sp,sp,-16
 4009490:	dfc00315 	stw	ra,12(sp)
 4009494:	dc000215 	stw	r16,8(sp)
 4009498:	2021883a 	mov	r16,r4
 400949c:	21000503 	ldbu	r4,20(r4)
 40094a0:	d9400115 	stw	r5,4(sp)
 40094a4:	40091dc0 	call	40091dc <_ZL21size_of_encoded_valueh>
 40094a8:	d9400117 	ldw	r5,4(sp)
 40094ac:	1009883a 	mov	r4,r2
 40094b0:	400aa340 	call	400aa34 <__mulsi3>
 40094b4:	81800317 	ldw	r6,12(r16)
 40094b8:	81400217 	ldw	r5,8(r16)
 40094bc:	81000503 	ldbu	r4,20(r16)
 40094c0:	d80f883a 	mov	r7,sp
 40094c4:	308dc83a 	sub	r6,r6,r2
 40094c8:	40092800 	call	4009280 <_ZL28read_encoded_value_with_basehjPKhPj>
 40094cc:	d8800017 	ldw	r2,0(sp)
 40094d0:	dfc00317 	ldw	ra,12(sp)
 40094d4:	dc000217 	ldw	r16,8(sp)
 40094d8:	dec00404 	addi	sp,sp,16
 40094dc:	f800283a 	ret

040094e0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 40094e0:	deffff04 	addi	sp,sp,-4
 40094e4:	dfc00015 	stw	ra,0(sp)
 40094e8:	20c03fcc 	andi	r3,r4,255
 40094ec:	00803fc4 	movi	r2,255
 40094f0:	18800e26 	beq	r3,r2,400952c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
 40094f4:	20801c0c 	andi	r2,r4,112
 40094f8:	00c00804 	movi	r3,32
 40094fc:	10c01726 	beq	r2,r3,400955c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
 4009500:	18800e2e 	bgeu	r3,r2,400953c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
 4009504:	00c01004 	movi	r3,64
 4009508:	10c01026 	beq	r2,r3,400954c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
 400950c:	00c01404 	movi	r3,80
 4009510:	10c00626 	beq	r2,r3,400952c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
 4009514:	00c00c04 	movi	r3,48
 4009518:	10c00b1e 	bne	r2,r3,4009548 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
 400951c:	2809883a 	mov	r4,r5
 4009520:	dfc00017 	ldw	ra,0(sp)
 4009524:	dec00104 	addi	sp,sp,4
 4009528:	400ad3c1 	jmpi	400ad3c <_Unwind_GetDataRelBase>
 400952c:	0005883a 	mov	r2,zero
 4009530:	dfc00017 	ldw	ra,0(sp)
 4009534:	dec00104 	addi	sp,sp,4
 4009538:	f800283a 	ret
 400953c:	103ffb26 	beq	r2,zero,400952c <__alt_data_end+0xfc00952c>
 4009540:	00c00404 	movi	r3,16
 4009544:	10fff926 	beq	r2,r3,400952c <__alt_data_end+0xfc00952c>
 4009548:	400af7c0 	call	400af7c <abort>
 400954c:	2809883a 	mov	r4,r5
 4009550:	dfc00017 	ldw	ra,0(sp)
 4009554:	dec00104 	addi	sp,sp,4
 4009558:	400ad2c1 	jmpi	400ad2c <_Unwind_GetRegionStart>
 400955c:	2809883a 	mov	r4,r5
 4009560:	dfc00017 	ldw	ra,0(sp)
 4009564:	dec00104 	addi	sp,sp,4
 4009568:	400ad441 	jmpi	400ad44 <_Unwind_GetTextRelBase>

0400956c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 400956c:	defffb04 	addi	sp,sp,-20
 4009570:	dcc00315 	stw	r19,12(sp)
 4009574:	dc400115 	stw	r17,4(sp)
 4009578:	dc000015 	stw	r16,0(sp)
 400957c:	dfc00415 	stw	ra,16(sp)
 4009580:	dc800215 	stw	r18,8(sp)
 4009584:	2027883a 	mov	r19,r4
 4009588:	2821883a 	mov	r16,r5
 400958c:	3023883a 	mov	r17,r6
 4009590:	20003f26 	beq	r4,zero,4009690 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
 4009594:	400ad2c0 	call	400ad2c <_Unwind_GetRegionStart>
 4009598:	88800015 	stw	r2,0(r17)
 400959c:	84800003 	ldbu	r18,0(r16)
 40095a0:	00c03fc4 	movi	r3,255
 40095a4:	84000044 	addi	r16,r16,1
 40095a8:	90c03726 	beq	r18,r3,4009688 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
 40095ac:	980b883a 	mov	r5,r19
 40095b0:	9009883a 	mov	r4,r18
 40095b4:	40094e00 	call	40094e0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 40095b8:	800d883a 	mov	r6,r16
 40095bc:	89c00104 	addi	r7,r17,4
 40095c0:	100b883a 	mov	r5,r2
 40095c4:	9009883a 	mov	r4,r18
 40095c8:	40092800 	call	4009280 <_ZL28read_encoded_value_with_basehjPKhPj>
 40095cc:	1021883a 	mov	r16,r2
 40095d0:	80c00003 	ldbu	r3,0(r16)
 40095d4:	01003fc4 	movi	r4,255
 40095d8:	80800044 	addi	r2,r16,1
 40095dc:	88c00505 	stb	r3,20(r17)
 40095e0:	18c03fcc 	andi	r3,r3,255
 40095e4:	19002c26 	beq	r3,r4,4009698 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
 40095e8:	100f883a 	mov	r7,r2
 40095ec:	000d883a 	mov	r6,zero
 40095f0:	000b883a 	mov	r5,zero
 40095f4:	38c00003 	ldbu	r3,0(r7)
 40095f8:	10800044 	addi	r2,r2,1
 40095fc:	100f883a 	mov	r7,r2
 4009600:	19001fcc 	andi	r4,r3,127
 4009604:	2148983a 	sll	r4,r4,r5
 4009608:	18c03fcc 	andi	r3,r3,255
 400960c:	18c0201c 	xori	r3,r3,128
 4009610:	18ffe004 	addi	r3,r3,-128
 4009614:	310cb03a 	or	r6,r6,r4
 4009618:	294001c4 	addi	r5,r5,7
 400961c:	183ff516 	blt	r3,zero,40095f4 <__alt_data_end+0xfc0095f4>
 4009620:	118d883a 	add	r6,r2,r6
 4009624:	89800315 	stw	r6,12(r17)
 4009628:	10c00003 	ldbu	r3,0(r2)
 400962c:	000d883a 	mov	r6,zero
 4009630:	10800044 	addi	r2,r2,1
 4009634:	88c00545 	stb	r3,21(r17)
 4009638:	000b883a 	mov	r5,zero
 400963c:	10c00003 	ldbu	r3,0(r2)
 4009640:	10800044 	addi	r2,r2,1
 4009644:	19001fcc 	andi	r4,r3,127
 4009648:	2148983a 	sll	r4,r4,r5
 400964c:	18c03fcc 	andi	r3,r3,255
 4009650:	18c0201c 	xori	r3,r3,128
 4009654:	18ffe004 	addi	r3,r3,-128
 4009658:	310cb03a 	or	r6,r6,r4
 400965c:	294001c4 	addi	r5,r5,7
 4009660:	183ff616 	blt	r3,zero,400963c <__alt_data_end+0xfc00963c>
 4009664:	118d883a 	add	r6,r2,r6
 4009668:	89800415 	stw	r6,16(r17)
 400966c:	dfc00417 	ldw	ra,16(sp)
 4009670:	dcc00317 	ldw	r19,12(sp)
 4009674:	dc800217 	ldw	r18,8(sp)
 4009678:	dc400117 	ldw	r17,4(sp)
 400967c:	dc000017 	ldw	r16,0(sp)
 4009680:	dec00504 	addi	sp,sp,20
 4009684:	f800283a 	ret
 4009688:	88800115 	stw	r2,4(r17)
 400968c:	003fd006 	br	40095d0 <__alt_data_end+0xfc0095d0>
 4009690:	0005883a 	mov	r2,zero
 4009694:	003fc006 	br	4009598 <__alt_data_end+0xfc009598>
 4009698:	88000315 	stw	zero,12(r17)
 400969c:	003fe206 	br	4009628 <__alt_data_end+0xfc009628>

040096a0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
 40096a0:	28800017 	ldw	r2,0(r5)
 40096a4:	30c00017 	ldw	r3,0(r6)
 40096a8:	defffb04 	addi	sp,sp,-20
 40096ac:	10800217 	ldw	r2,8(r2)
 40096b0:	dc400315 	stw	r17,12(sp)
 40096b4:	dc000215 	stw	r16,8(sp)
 40096b8:	d9400115 	stw	r5,4(sp)
 40096bc:	dfc00415 	stw	ra,16(sp)
 40096c0:	2021883a 	mov	r16,r4
 40096c4:	d8c00015 	stw	r3,0(sp)
 40096c8:	2809883a 	mov	r4,r5
 40096cc:	3023883a 	mov	r17,r6
 40096d0:	103ee83a 	callr	r2
 40096d4:	10803fcc 	andi	r2,r2,255
 40096d8:	d9400117 	ldw	r5,4(sp)
 40096dc:	10000326 	beq	r2,zero,40096ec <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
 40096e0:	d8800017 	ldw	r2,0(sp)
 40096e4:	10800017 	ldw	r2,0(r2)
 40096e8:	d8800015 	stw	r2,0(sp)
 40096ec:	80800017 	ldw	r2,0(r16)
 40096f0:	01c00044 	movi	r7,1
 40096f4:	d80d883a 	mov	r6,sp
 40096f8:	10800417 	ldw	r2,16(r2)
 40096fc:	8009883a 	mov	r4,r16
 4009700:	103ee83a 	callr	r2
 4009704:	10c03fcc 	andi	r3,r2,255
 4009708:	18000226 	beq	r3,zero,4009714 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
 400970c:	d8c00017 	ldw	r3,0(sp)
 4009710:	88c00015 	stw	r3,0(r17)
 4009714:	dfc00417 	ldw	ra,16(sp)
 4009718:	dc400317 	ldw	r17,12(sp)
 400971c:	dc000217 	ldw	r16,8(sp)
 4009720:	dec00504 	addi	sp,sp,20
 4009724:	f800283a 	ret

04009728 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
 4009728:	defff304 	addi	sp,sp,-52
 400972c:	dc800615 	stw	r18,24(sp)
 4009730:	3825d23a 	srai	r18,r7,8
 4009734:	dd000815 	stw	r20,32(sp)
 4009738:	dcc00715 	stw	r19,28(sp)
 400973c:	dfc00c15 	stw	ra,48(sp)
 4009740:	ddc00b15 	stw	r23,44(sp)
 4009744:	dd800a15 	stw	r22,40(sp)
 4009748:	dd400915 	stw	r21,36(sp)
 400974c:	dc400515 	stw	r17,20(sp)
 4009750:	dc000415 	stw	r16,16(sp)
 4009754:	d9400215 	stw	r5,8(sp)
 4009758:	3827883a 	mov	r19,r7
 400975c:	2029883a 	mov	r20,r4
 4009760:	9000010e 	bge	r18,zero,4009768 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x40>
 4009764:	04a5c83a 	sub	r18,zero,r18
 4009768:	000b883a 	mov	r5,zero
 400976c:	01000144 	movi	r4,5
 4009770:	d9800315 	stw	r6,12(sp)
 4009774:	40094e00 	call	40094e0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 4009778:	d9800317 	ldw	r6,12(sp)
 400977c:	d9c00104 	addi	r7,sp,4
 4009780:	100b883a 	mov	r5,r2
 4009784:	01000144 	movi	r4,5
 4009788:	40092800 	call	4009280 <_ZL28read_encoded_value_with_basehjPKhPj>
 400978c:	017ffe44 	movi	r5,-7
 4009790:	1009883a 	mov	r4,r2
 4009794:	1021883a 	mov	r16,r2
 4009798:	400aa340 	call	400aa34 <__mulsi3>
 400979c:	102d883a 	mov	r22,r2
 40097a0:	0023883a 	mov	r17,zero
 40097a4:	85400003 	ldbu	r21,0(r16)
 40097a8:	8009883a 	mov	r4,r16
 40097ac:	014001c4 	movi	r5,7
 40097b0:	400aa340 	call	400aa34 <__mulsi3>
 40097b4:	a8c01fcc 	andi	r3,r21,127
 40097b8:	1585883a 	add	r2,r2,r22
 40097bc:	1886983a 	sll	r3,r3,r2
 40097c0:	ad403fcc 	andi	r21,r21,255
 40097c4:	ad40201c 	xori	r21,r21,128
 40097c8:	ad7fe004 	addi	r21,r21,-128
 40097cc:	84000044 	addi	r16,r16,1
 40097d0:	88e2b03a 	or	r17,r17,r3
 40097d4:	a83ff316 	blt	r21,zero,40097a4 <__alt_data_end+0xfc0097a4>
 40097d8:	8461883a 	add	r16,r16,r17
 40097dc:	017ffe44 	movi	r5,-7
 40097e0:	8009883a 	mov	r4,r16
 40097e4:	400aa340 	call	400aa34 <__mulsi3>
 40097e8:	102d883a 	mov	r22,r2
 40097ec:	002b883a 	mov	r21,zero
 40097f0:	84400003 	ldbu	r17,0(r16)
 40097f4:	8009883a 	mov	r4,r16
 40097f8:	014001c4 	movi	r5,7
 40097fc:	400aa340 	call	400aa34 <__mulsi3>
 4009800:	88c01fcc 	andi	r3,r17,127
 4009804:	1585883a 	add	r2,r2,r22
 4009808:	1886983a 	sll	r3,r3,r2
 400980c:	8c403fcc 	andi	r17,r17,255
 4009810:	8c40201c 	xori	r17,r17,128
 4009814:	8c7fe004 	addi	r17,r17,-128
 4009818:	84000044 	addi	r16,r16,1
 400981c:	a8eab03a 	or	r21,r21,r3
 4009820:	883ff316 	blt	r17,zero,40097f0 <__alt_data_end+0xfc0097f0>
 4009824:	94403fcc 	andi	r17,r18,255
 4009828:	8c7fffc4 	addi	r17,r17,-1
 400982c:	8463883a 	add	r17,r16,r17
 4009830:	ad4000c4 	addi	r21,r21,3
 4009834:	00bfff04 	movi	r2,-4
 4009838:	ac21883a 	add	r16,r21,r16
 400983c:	017ffe44 	movi	r5,-7
 4009840:	8809883a 	mov	r4,r17
 4009844:	80a0703a 	and	r16,r16,r2
 4009848:	400aa340 	call	400aa34 <__mulsi3>
 400984c:	0025883a 	mov	r18,zero
 4009850:	102f883a 	mov	r23,r2
 4009854:	8d800003 	ldbu	r22,0(r17)
 4009858:	8809883a 	mov	r4,r17
 400985c:	014001c4 	movi	r5,7
 4009860:	400aa340 	call	400aa34 <__mulsi3>
 4009864:	b0c01fcc 	andi	r3,r22,127
 4009868:	15c5883a 	add	r2,r2,r23
 400986c:	1886983a 	sll	r3,r3,r2
 4009870:	b5803fcc 	andi	r22,r22,255
 4009874:	b580201c 	xori	r22,r22,128
 4009878:	8d400044 	addi	r21,r17,1
 400987c:	b5bfe004 	addi	r22,r22,-128
 4009880:	90e4b03a 	or	r18,r18,r3
 4009884:	a823883a 	mov	r17,r21
 4009888:	b03ff216 	blt	r22,zero,4009854 <__alt_data_end+0xfc009854>
 400988c:	9cc03fcc 	andi	r19,r19,255
 4009890:	90002426 	beq	r18,zero,4009924 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1fc>
 4009894:	9809883a 	mov	r4,r19
 4009898:	40091dc0 	call	40091dc <_ZL21size_of_encoded_valueh>
 400989c:	100b883a 	mov	r5,r2
 40098a0:	913fffc4 	addi	r4,r18,-1
 40098a4:	400aa340 	call	400aa34 <__mulsi3>
 40098a8:	d9400d17 	ldw	r5,52(sp)
 40098ac:	d80f883a 	mov	r7,sp
 40098b0:	9809883a 	mov	r4,r19
 40098b4:	140d883a 	add	r6,r2,r16
 40098b8:	40092800 	call	4009280 <_ZL28read_encoded_value_with_basehjPKhPj>
 40098bc:	d9000017 	ldw	r4,0(sp)
 40098c0:	d9800204 	addi	r6,sp,8
 40098c4:	a00b883a 	mov	r5,r20
 40098c8:	40096a00 	call	40096a0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 40098cc:	10c03fcc 	andi	r3,r2,255
 40098d0:	1800151e 	bne	r3,zero,4009928 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x200>
 40098d4:	a809883a 	mov	r4,r21
 40098d8:	017ffe44 	movi	r5,-7
 40098dc:	400aa340 	call	400aa34 <__mulsi3>
 40098e0:	102d883a 	mov	r22,r2
 40098e4:	a809883a 	mov	r4,r21
 40098e8:	0025883a 	mov	r18,zero
 40098ec:	24400003 	ldbu	r17,0(r4)
 40098f0:	014001c4 	movi	r5,7
 40098f4:	400aa340 	call	400aa34 <__mulsi3>
 40098f8:	88c01fcc 	andi	r3,r17,127
 40098fc:	1585883a 	add	r2,r2,r22
 4009900:	1886983a 	sll	r3,r3,r2
 4009904:	8c403fcc 	andi	r17,r17,255
 4009908:	8c40201c 	xori	r17,r17,128
 400990c:	ad400044 	addi	r21,r21,1
 4009910:	8c7fe004 	addi	r17,r17,-128
 4009914:	90e4b03a 	or	r18,r18,r3
 4009918:	a809883a 	mov	r4,r21
 400991c:	883ff316 	blt	r17,zero,40098ec <__alt_data_end+0xfc0098ec>
 4009920:	003fdb06 	br	4009890 <__alt_data_end+0xfc009890>
 4009924:	0005883a 	mov	r2,zero
 4009928:	dfc00c17 	ldw	ra,48(sp)
 400992c:	ddc00b17 	ldw	r23,44(sp)
 4009930:	dd800a17 	ldw	r22,40(sp)
 4009934:	dd400917 	ldw	r21,36(sp)
 4009938:	dd000817 	ldw	r20,32(sp)
 400993c:	dcc00717 	ldw	r19,28(sp)
 4009940:	dc800617 	ldw	r18,24(sp)
 4009944:	dc400517 	ldw	r17,20(sp)
 4009948:	dc000417 	ldw	r16,16(sp)
 400994c:	dec00d04 	addi	sp,sp,52
 4009950:	f800283a 	ret

04009954 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
 4009954:	defffb04 	addi	sp,sp,-20
 4009958:	dc000115 	stw	r16,4(sp)
 400995c:	24000317 	ldw	r16,12(r4)
 4009960:	01ce303a 	nor	r7,zero,r7
 4009964:	dc800315 	stw	r18,12(sp)
 4009968:	dc400215 	stw	r17,8(sp)
 400996c:	dfc00415 	stw	ra,16(sp)
 4009970:	2023883a 	mov	r17,r4
 4009974:	2825883a 	mov	r18,r5
 4009978:	d9800015 	stw	r6,0(sp)
 400997c:	81e1883a 	add	r16,r16,r7
 4009980:	800d883a 	mov	r6,r16
 4009984:	000b883a 	mov	r5,zero
 4009988:	0009883a 	mov	r4,zero
 400998c:	30800003 	ldbu	r2,0(r6)
 4009990:	84000044 	addi	r16,r16,1
 4009994:	800d883a 	mov	r6,r16
 4009998:	10c01fcc 	andi	r3,r2,127
 400999c:	1906983a 	sll	r3,r3,r4
 40099a0:	10803fcc 	andi	r2,r2,255
 40099a4:	1080201c 	xori	r2,r2,128
 40099a8:	10bfe004 	addi	r2,r2,-128
 40099ac:	28cab03a 	or	r5,r5,r3
 40099b0:	210001c4 	addi	r4,r4,7
 40099b4:	103ff516 	blt	r2,zero,400998c <__alt_data_end+0xfc00998c>
 40099b8:	28000e26 	beq	r5,zero,40099f4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
 40099bc:	8809883a 	mov	r4,r17
 40099c0:	400948c0 	call	400948c <_ZL15get_ttype_entryP16lsda_header_infom>
 40099c4:	d80d883a 	mov	r6,sp
 40099c8:	900b883a 	mov	r5,r18
 40099cc:	1009883a 	mov	r4,r2
 40099d0:	40096a00 	call	40096a0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 40099d4:	10c03fcc 	andi	r3,r2,255
 40099d8:	183fe926 	beq	r3,zero,4009980 <__alt_data_end+0xfc009980>
 40099dc:	dfc00417 	ldw	ra,16(sp)
 40099e0:	dc800317 	ldw	r18,12(sp)
 40099e4:	dc400217 	ldw	r17,8(sp)
 40099e8:	dc000117 	ldw	r16,4(sp)
 40099ec:	dec00504 	addi	sp,sp,20
 40099f0:	f800283a 	ret
 40099f4:	0005883a 	mov	r2,zero
 40099f8:	003ff806 	br	40099dc <__alt_data_end+0xfc0099dc>

040099fc <__gxx_personality_sj0>:
 40099fc:	00810074 	movhi	r2,1025
 4009a00:	deffdd04 	addi	sp,sp,-140
 4009a04:	10a67f04 	addi	r2,r2,-26116
 4009a08:	d8800e15 	stw	r2,56(sp)
 4009a0c:	008100b4 	movhi	r2,1026
 4009a10:	10ac6204 	addi	r2,r2,-20088
 4009a14:	d8800f15 	stw	r2,60(sp)
 4009a18:	00810074 	movhi	r2,1025
 4009a1c:	10a7f504 	addi	r2,r2,-24620
 4009a20:	d9001515 	stw	r4,84(sp)
 4009a24:	d9000804 	addi	r4,sp,32
 4009a28:	d8801115 	stw	r2,68(sp)
 4009a2c:	dfc02215 	stw	ra,136(sp)
 4009a30:	df002115 	stw	fp,132(sp)
 4009a34:	dec01015 	stw	sp,64(sp)
 4009a38:	dec01215 	stw	sp,72(sp)
 4009a3c:	d9401915 	stw	r5,100(sp)
 4009a40:	d9801615 	stw	r6,88(sp)
 4009a44:	d9c01715 	stw	r7,92(sp)
 4009a48:	400ac640 	call	400ac64 <_Unwind_SjLj_Register>
 4009a4c:	d8c01517 	ldw	r3,84(sp)
 4009a50:	d8000715 	stw	zero,28(sp)
 4009a54:	d8000615 	stw	zero,24(sp)
 4009a58:	00800044 	movi	r2,1
 4009a5c:	18800926 	beq	r3,r2,4009a84 <__gxx_personality_sj0+0x88>
 4009a60:	01c000c4 	movi	r7,3
 4009a64:	d9c01515 	stw	r7,84(sp)
 4009a68:	d9000804 	addi	r4,sp,32
 4009a6c:	400ac7c0 	call	400ac7c <_Unwind_SjLj_Unregister>
 4009a70:	d8801517 	ldw	r2,84(sp)
 4009a74:	dfc02217 	ldw	ra,136(sp)
 4009a78:	df002117 	ldw	fp,132(sp)
 4009a7c:	dec02304 	addi	sp,sp,140
 4009a80:	f800283a 	ret
 4009a84:	d9001617 	ldw	r4,88(sp)
 4009a88:	00af3574 	movhi	r2,48341
 4009a8c:	d9c01717 	ldw	r7,92(sp)
 4009a90:	10b54004 	addi	r2,r2,-11008
 4009a94:	00ee2cb4 	movhi	r3,47282
 4009a98:	2085883a 	add	r2,r4,r2
 4009a9c:	18eaaf04 	addi	r3,r3,-21828
 4009aa0:	d8801b15 	stw	r2,108(sp)
 4009aa4:	38c7883a 	add	r3,r7,r3
 4009aa8:	1105803a 	cmpltu	r2,r2,r4
 4009aac:	10c7883a 	add	r3,r2,r3
 4009ab0:	d8c01c15 	stw	r3,112(sp)
 4009ab4:	d8c01917 	ldw	r3,100(sp)
 4009ab8:	00800184 	movi	r2,6
 4009abc:	18805426 	beq	r3,r2,4009c10 <__gxx_personality_sj0+0x214>
 4009ac0:	d9002417 	ldw	r4,144(sp)
 4009ac4:	00bfffc4 	movi	r2,-1
 4009ac8:	d8800915 	stw	r2,36(sp)
 4009acc:	400ad200 	call	400ad20 <_Unwind_GetLanguageSpecificData>
 4009ad0:	d8801a15 	stw	r2,104(sp)
 4009ad4:	1000c926 	beq	r2,zero,4009dfc <__gxx_personality_sj0+0x400>
 4009ad8:	d9002417 	ldw	r4,144(sp)
 4009adc:	d80d883a 	mov	r6,sp
 4009ae0:	100b883a 	mov	r5,r2
 4009ae4:	400956c0 	call	400956c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 4009ae8:	d9402417 	ldw	r5,144(sp)
 4009aec:	d9000503 	ldbu	r4,20(sp)
 4009af0:	d8801515 	stw	r2,84(sp)
 4009af4:	40094e00 	call	40094e0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 4009af8:	d9002417 	ldw	r4,144(sp)
 4009afc:	d9400604 	addi	r5,sp,24
 4009b00:	d8800215 	stw	r2,8(sp)
 4009b04:	400acf00 	call	400acf0 <_Unwind_GetIPInfo>
 4009b08:	d8c00617 	ldw	r3,24(sp)
 4009b0c:	18006126 	beq	r3,zero,4009c94 <__gxx_personality_sj0+0x298>
 4009b10:	1000ba16 	blt	r2,zero,4009dfc <__gxx_personality_sj0+0x400>
 4009b14:	10002f1e 	bne	r2,zero,4009bd4 <__gxx_personality_sj0+0x1d8>
 4009b18:	d8001515 	stw	zero,84(sp)
 4009b1c:	d8001f15 	stw	zero,124(sp)
 4009b20:	d8001815 	stw	zero,96(sp)
 4009b24:	00c00044 	movi	r3,1
 4009b28:	d9001917 	ldw	r4,100(sp)
 4009b2c:	2080004c 	andi	r2,r4,1
 4009b30:	1000b51e 	bne	r2,zero,4009e08 <__gxx_personality_sj0+0x40c>
 4009b34:	d9001917 	ldw	r4,100(sp)
 4009b38:	2080020c 	andi	r2,r4,8
 4009b3c:	1000b71e 	bne	r2,zero,4009e1c <__gxx_personality_sj0+0x420>
 4009b40:	d9c01c17 	ldw	r7,112(sp)
 4009b44:	3800b826 	beq	r7,zero,4009e28 <__gxx_personality_sj0+0x42c>
 4009b48:	00800044 	movi	r2,1
 4009b4c:	1880b526 	beq	r3,r2,4009e24 <__gxx_personality_sj0+0x428>
 4009b50:	d9c01517 	ldw	r7,84(sp)
 4009b54:	3800f516 	blt	r7,zero,4009f2c <__gxx_personality_sj0+0x530>
 4009b58:	d9002417 	ldw	r4,144(sp)
 4009b5c:	d9802317 	ldw	r6,140(sp)
 4009b60:	00bfffc4 	movi	r2,-1
 4009b64:	000b883a 	mov	r5,zero
 4009b68:	d8800915 	stw	r2,36(sp)
 4009b6c:	400acc40 	call	400acc4 <_Unwind_SetGR>
 4009b70:	d9801517 	ldw	r6,84(sp)
 4009b74:	d9002417 	ldw	r4,144(sp)
 4009b78:	01400044 	movi	r5,1
 4009b7c:	400acc40 	call	400acc4 <_Unwind_SetGR>
 4009b80:	d9002417 	ldw	r4,144(sp)
 4009b84:	d9401f17 	ldw	r5,124(sp)
 4009b88:	400ad100 	call	400ad10 <_Unwind_SetIP>
 4009b8c:	010001c4 	movi	r4,7
 4009b90:	d9001515 	stw	r4,84(sp)
 4009b94:	003fb406 	br	4009a68 <__alt_data_end+0xfc009a68>
 4009b98:	000f883a 	mov	r7,zero
 4009b9c:	000d883a 	mov	r6,zero
 4009ba0:	19000003 	ldbu	r4,0(r3)
 4009ba4:	18c00044 	addi	r3,r3,1
 4009ba8:	d8c01515 	stw	r3,84(sp)
 4009bac:	21401fcc 	andi	r5,r4,127
 4009bb0:	298a983a 	sll	r5,r5,r6
 4009bb4:	21003fcc 	andi	r4,r4,255
 4009bb8:	2100201c 	xori	r4,r4,128
 4009bbc:	213fe004 	addi	r4,r4,-128
 4009bc0:	394eb03a 	or	r7,r7,r5
 4009bc4:	318001c4 	addi	r6,r6,7
 4009bc8:	203ff516 	blt	r4,zero,4009ba0 <__alt_data_end+0xfc009ba0>
 4009bcc:	10bfffc4 	addi	r2,r2,-1
 4009bd0:	10003226 	beq	r2,zero,4009c9c <__gxx_personality_sj0+0x2a0>
 4009bd4:	d9c01517 	ldw	r7,84(sp)
 4009bd8:	0011883a 	mov	r8,zero
 4009bdc:	000d883a 	mov	r6,zero
 4009be0:	39000003 	ldbu	r4,0(r7)
 4009be4:	38c00044 	addi	r3,r7,1
 4009be8:	180f883a 	mov	r7,r3
 4009bec:	21401fcc 	andi	r5,r4,127
 4009bf0:	298a983a 	sll	r5,r5,r6
 4009bf4:	21003fcc 	andi	r4,r4,255
 4009bf8:	2100201c 	xori	r4,r4,128
 4009bfc:	213fe004 	addi	r4,r4,-128
 4009c00:	4150b03a 	or	r8,r8,r5
 4009c04:	318001c4 	addi	r6,r6,7
 4009c08:	203ff516 	blt	r4,zero,4009be0 <__alt_data_end+0xfc009be0>
 4009c0c:	003fe206 	br	4009b98 <__alt_data_end+0xfc009b98>
 4009c10:	d9001c17 	ldw	r4,112(sp)
 4009c14:	203faa1e 	bne	r4,zero,4009ac0 <__alt_data_end+0xfc009ac0>
 4009c18:	d9c01517 	ldw	r7,84(sp)
 4009c1c:	d8801b17 	ldw	r2,108(sp)
 4009c20:	38bfa736 	bltu	r7,r2,4009ac0 <__alt_data_end+0xfc009ac0>
 4009c24:	d8c02317 	ldw	r3,140(sp)
 4009c28:	18fffe17 	ldw	r3,-8(r3)
 4009c2c:	d8c01f15 	stw	r3,124(sp)
 4009c30:	18008226 	beq	r3,zero,4009e3c <__gxx_personality_sj0+0x440>
 4009c34:	d9002317 	ldw	r4,140(sp)
 4009c38:	d9c02317 	ldw	r7,140(sp)
 4009c3c:	213ffb17 	ldw	r4,-20(r4)
 4009c40:	39fffd17 	ldw	r7,-12(r7)
 4009c44:	d9001515 	stw	r4,84(sp)
 4009c48:	d9c01a15 	stw	r7,104(sp)
 4009c4c:	d8801517 	ldw	r2,84(sp)
 4009c50:	103fc10e 	bge	r2,zero,4009b58 <__alt_data_end+0xfc009b58>
 4009c54:	d9002417 	ldw	r4,144(sp)
 4009c58:	d9401a17 	ldw	r5,104(sp)
 4009c5c:	d80d883a 	mov	r6,sp
 4009c60:	00bfffc4 	movi	r2,-1
 4009c64:	d8800915 	stw	r2,36(sp)
 4009c68:	400956c0 	call	400956c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 4009c6c:	d9402417 	ldw	r5,144(sp)
 4009c70:	d9000503 	ldbu	r4,20(sp)
 4009c74:	40094e00 	call	40094e0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 4009c78:	d9000503 	ldbu	r4,20(sp)
 4009c7c:	d9402417 	ldw	r5,144(sp)
 4009c80:	d8800215 	stw	r2,8(sp)
 4009c84:	40094e00 	call	40094e0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 4009c88:	d8c02317 	ldw	r3,140(sp)
 4009c8c:	18bffe15 	stw	r2,-8(r3)
 4009c90:	003fb106 	br	4009b58 <__alt_data_end+0xfc009b58>
 4009c94:	10bfffc4 	addi	r2,r2,-1
 4009c98:	003f9d06 	br	4009b10 <__alt_data_end+0xfc009b10>
 4009c9c:	42000044 	addi	r8,r8,1
 4009ca0:	da001f15 	stw	r8,124(sp)
 4009ca4:	38005326 	beq	r7,zero,4009df4 <__gxx_personality_sj0+0x3f8>
 4009ca8:	d8800417 	ldw	r2,16(sp)
 4009cac:	39ffffc4 	addi	r7,r7,-1
 4009cb0:	11c5883a 	add	r2,r2,r7
 4009cb4:	d8801815 	stw	r2,96(sp)
 4009cb8:	40005026 	beq	r8,zero,4009dfc <__gxx_personality_sj0+0x400>
 4009cbc:	10007426 	beq	r2,zero,4009e90 <__gxx_personality_sj0+0x494>
 4009cc0:	d8801917 	ldw	r2,100(sp)
 4009cc4:	1080020c 	andi	r2,r2,8
 4009cc8:	d8802015 	stw	r2,128(sp)
 4009ccc:	1000a21e 	bne	r2,zero,4009f58 <__gxx_personality_sj0+0x55c>
 4009cd0:	d8c01c17 	ldw	r3,112(sp)
 4009cd4:	1800b026 	beq	r3,zero,4009f98 <__gxx_personality_sj0+0x59c>
 4009cd8:	01c100b4 	movhi	r7,1026
 4009cdc:	39d3f004 	addi	r7,r7,20416
 4009ce0:	d9c01e15 	stw	r7,120(sp)
 4009ce4:	d8001d05 	stb	zero,116(sp)
 4009ce8:	d8c01817 	ldw	r3,96(sp)
 4009cec:	d8001515 	stw	zero,84(sp)
 4009cf0:	0009883a 	mov	r4,zero
 4009cf4:	19400003 	ldbu	r5,0(r3)
 4009cf8:	18800044 	addi	r2,r3,1
 4009cfc:	d9c01517 	ldw	r7,84(sp)
 4009d00:	28c01fcc 	andi	r3,r5,127
 4009d04:	1906983a 	sll	r3,r3,r4
 4009d08:	29803fcc 	andi	r6,r5,255
 4009d0c:	3180201c 	xori	r6,r6,128
 4009d10:	38ceb03a 	or	r7,r7,r3
 4009d14:	d8801715 	stw	r2,92(sp)
 4009d18:	31bfe004 	addi	r6,r6,-128
 4009d1c:	d9c01515 	stw	r7,84(sp)
 4009d20:	210001c4 	addi	r4,r4,7
 4009d24:	1007883a 	mov	r3,r2
 4009d28:	303ff216 	blt	r6,zero,4009cf4 <__alt_data_end+0xfc009cf4>
 4009d2c:	00c007c4 	movi	r3,31
 4009d30:	19000836 	bltu	r3,r4,4009d54 <__gxx_personality_sj0+0x358>
 4009d34:	2940100c 	andi	r5,r5,64
 4009d38:	28000626 	beq	r5,zero,4009d54 <__gxx_personality_sj0+0x358>
 4009d3c:	01c00044 	movi	r7,1
 4009d40:	3908983a 	sll	r4,r7,r4
 4009d44:	d8c01517 	ldw	r3,84(sp)
 4009d48:	0109c83a 	sub	r4,zero,r4
 4009d4c:	1906b03a 	or	r3,r3,r4
 4009d50:	d8c01515 	stw	r3,84(sp)
 4009d54:	d8001615 	stw	zero,88(sp)
 4009d58:	0009883a 	mov	r4,zero
 4009d5c:	11400003 	ldbu	r5,0(r2)
 4009d60:	d9c01617 	ldw	r7,88(sp)
 4009d64:	10800044 	addi	r2,r2,1
 4009d68:	28c01fcc 	andi	r3,r5,127
 4009d6c:	1906983a 	sll	r3,r3,r4
 4009d70:	29803fcc 	andi	r6,r5,255
 4009d74:	3180201c 	xori	r6,r6,128
 4009d78:	38ceb03a 	or	r7,r7,r3
 4009d7c:	31bfe004 	addi	r6,r6,-128
 4009d80:	d9c01615 	stw	r7,88(sp)
 4009d84:	210001c4 	addi	r4,r4,7
 4009d88:	303ff416 	blt	r6,zero,4009d5c <__alt_data_end+0xfc009d5c>
 4009d8c:	008007c4 	movi	r2,31
 4009d90:	11000736 	bltu	r2,r4,4009db0 <__gxx_personality_sj0+0x3b4>
 4009d94:	2940100c 	andi	r5,r5,64
 4009d98:	28000526 	beq	r5,zero,4009db0 <__gxx_personality_sj0+0x3b4>
 4009d9c:	00c00044 	movi	r3,1
 4009da0:	1908983a 	sll	r4,r3,r4
 4009da4:	0109c83a 	sub	r4,zero,r4
 4009da8:	390eb03a 	or	r7,r7,r4
 4009dac:	d9c01615 	stw	r7,88(sp)
 4009db0:	d9001517 	ldw	r4,84(sp)
 4009db4:	20003c26 	beq	r4,zero,4009ea8 <__gxx_personality_sj0+0x4ac>
 4009db8:	01003e0e 	bge	zero,r4,4009eb4 <__gxx_personality_sj0+0x4b8>
 4009dbc:	01ffffc4 	movi	r7,-1
 4009dc0:	200b883a 	mov	r5,r4
 4009dc4:	d809883a 	mov	r4,sp
 4009dc8:	d9c00915 	stw	r7,36(sp)
 4009dcc:	400948c0 	call	400948c <_ZL15get_ttype_entryP16lsda_header_infom>
 4009dd0:	10005f26 	beq	r2,zero,4009f50 <__gxx_personality_sj0+0x554>
 4009dd4:	d8c01e17 	ldw	r3,120(sp)
 4009dd8:	1800571e 	bne	r3,zero,4009f38 <__gxx_personality_sj0+0x53c>
 4009ddc:	d9001617 	ldw	r4,88(sp)
 4009de0:	20002926 	beq	r4,zero,4009e88 <__gxx_personality_sj0+0x48c>
 4009de4:	d9c01717 	ldw	r7,92(sp)
 4009de8:	390f883a 	add	r7,r7,r4
 4009dec:	d9c01815 	stw	r7,96(sp)
 4009df0:	003fbd06 	br	4009ce8 <__alt_data_end+0xfc009ce8>
 4009df4:	d8c01f17 	ldw	r3,124(sp)
 4009df8:	1800251e 	bne	r3,zero,4009e90 <__gxx_personality_sj0+0x494>
 4009dfc:	01000204 	movi	r4,8
 4009e00:	d9001515 	stw	r4,84(sp)
 4009e04:	003f1806 	br	4009a68 <__alt_data_end+0xfc009a68>
 4009e08:	d8801c17 	ldw	r2,112(sp)
 4009e0c:	10000d26 	beq	r2,zero,4009e44 <__gxx_personality_sj0+0x448>
 4009e10:	00800184 	movi	r2,6
 4009e14:	d8801515 	stw	r2,84(sp)
 4009e18:	003f1306 	br	4009a68 <__alt_data_end+0xfc009a68>
 4009e1c:	00800044 	movi	r2,1
 4009e20:	18bf4d1e 	bne	r3,r2,4009b58 <__alt_data_end+0xfc009b58>
 4009e24:	40091540 	call	4009154 <_ZSt9terminatev>
 4009e28:	d9001b17 	ldw	r4,108(sp)
 4009e2c:	00800044 	movi	r2,1
 4009e30:	113f4536 	bltu	r2,r4,4009b48 <__alt_data_end+0xfc009b48>
 4009e34:	00800044 	movi	r2,1
 4009e38:	18bf841e 	bne	r3,r2,4009c4c <__alt_data_end+0xfc009c4c>
 4009e3c:	d9002317 	ldw	r4,140(sp)
 4009e40:	400a7d80 	call	400a7d8 <__cxa_call_terminate>
 4009e44:	d8c01b17 	ldw	r3,108(sp)
 4009e48:	00800044 	movi	r2,1
 4009e4c:	10fff036 	bltu	r2,r3,4009e10 <__alt_data_end+0xfc009e10>
 4009e50:	d9002317 	ldw	r4,140(sp)
 4009e54:	d8801817 	ldw	r2,96(sp)
 4009e58:	d9c01517 	ldw	r7,84(sp)
 4009e5c:	d8c01a17 	ldw	r3,104(sp)
 4009e60:	20bffc15 	stw	r2,-16(r4)
 4009e64:	d8800717 	ldw	r2,28(sp)
 4009e68:	21fffb15 	stw	r7,-20(r4)
 4009e6c:	d9c01f17 	ldw	r7,124(sp)
 4009e70:	20bfff15 	stw	r2,-4(r4)
 4009e74:	00800184 	movi	r2,6
 4009e78:	20fffd15 	stw	r3,-12(r4)
 4009e7c:	21fffe15 	stw	r7,-8(r4)
 4009e80:	d8801515 	stw	r2,84(sp)
 4009e84:	003ef806 	br	4009a68 <__alt_data_end+0xfc009a68>
 4009e88:	d8801d03 	ldbu	r2,116(sp)
 4009e8c:	103fdb26 	beq	r2,zero,4009dfc <__alt_data_end+0xfc009dfc>
 4009e90:	d8c01917 	ldw	r3,100(sp)
 4009e94:	1880004c 	andi	r2,r3,1
 4009e98:	103fd81e 	bne	r2,zero,4009dfc <__alt_data_end+0xfc009dfc>
 4009e9c:	d8001515 	stw	zero,84(sp)
 4009ea0:	00c00084 	movi	r3,2
 4009ea4:	003f2306 	br	4009b34 <__alt_data_end+0xfc009b34>
 4009ea8:	00c00044 	movi	r3,1
 4009eac:	d8c01d05 	stb	r3,116(sp)
 4009eb0:	003fca06 	br	4009ddc <__alt_data_end+0xfc009ddc>
 4009eb4:	d9001e17 	ldw	r4,120(sp)
 4009eb8:	20000426 	beq	r4,zero,4009ecc <__gxx_personality_sj0+0x4d0>
 4009ebc:	d9c02017 	ldw	r7,128(sp)
 4009ec0:	3800021e 	bne	r7,zero,4009ecc <__gxx_personality_sj0+0x4d0>
 4009ec4:	d8801c17 	ldw	r2,112(sp)
 4009ec8:	10002726 	beq	r2,zero,4009f68 <__gxx_personality_sj0+0x56c>
 4009ecc:	d8801517 	ldw	r2,84(sp)
 4009ed0:	000d883a 	mov	r6,zero
 4009ed4:	000b883a 	mov	r5,zero
 4009ed8:	0088303a 	nor	r4,zero,r2
 4009edc:	d8800317 	ldw	r2,12(sp)
 4009ee0:	1109883a 	add	r4,r2,r4
 4009ee4:	20800003 	ldbu	r2,0(r4)
 4009ee8:	21000044 	addi	r4,r4,1
 4009eec:	10c01fcc 	andi	r3,r2,127
 4009ef0:	1946983a 	sll	r3,r3,r5
 4009ef4:	10803fcc 	andi	r2,r2,255
 4009ef8:	1080201c 	xori	r2,r2,128
 4009efc:	10bfe004 	addi	r2,r2,-128
 4009f00:	30ccb03a 	or	r6,r6,r3
 4009f04:	294001c4 	addi	r5,r5,7
 4009f08:	103ff616 	blt	r2,zero,4009ee4 <__alt_data_end+0xfc009ee4>
 4009f0c:	3005003a 	cmpeq	r2,r6,zero
 4009f10:	10803fcc 	andi	r2,r2,255
 4009f14:	103fb126 	beq	r2,zero,4009ddc <__alt_data_end+0xfc009ddc>
 4009f18:	d9c01917 	ldw	r7,100(sp)
 4009f1c:	3880004c 	andi	r2,r7,1
 4009f20:	103fb91e 	bne	r2,zero,4009e08 <__alt_data_end+0xfc009e08>
 4009f24:	d8802017 	ldw	r2,128(sp)
 4009f28:	10002d26 	beq	r2,zero,4009fe0 <__gxx_personality_sj0+0x5e4>
 4009f2c:	00800044 	movi	r2,1
 4009f30:	d8800915 	stw	r2,36(sp)
 4009f34:	400917c0 	call	400917c <_ZSt10unexpectedv>
 4009f38:	d9800704 	addi	r6,sp,28
 4009f3c:	180b883a 	mov	r5,r3
 4009f40:	1009883a 	mov	r4,r2
 4009f44:	40096a00 	call	40096a0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 4009f48:	10803fcc 	andi	r2,r2,255
 4009f4c:	103fa326 	beq	r2,zero,4009ddc <__alt_data_end+0xfc009ddc>
 4009f50:	00c000c4 	movi	r3,3
 4009f54:	003ef406 	br	4009b28 <__alt_data_end+0xfc009b28>
 4009f58:	010100b4 	movhi	r4,1026
 4009f5c:	2113ee04 	addi	r4,r4,20408
 4009f60:	d9001e15 	stw	r4,120(sp)
 4009f64:	003f5f06 	br	4009ce4 <__alt_data_end+0xfc009ce4>
 4009f68:	d9001b17 	ldw	r4,108(sp)
 4009f6c:	00c00044 	movi	r3,1
 4009f70:	193fd636 	bltu	r3,r4,4009ecc <__alt_data_end+0xfc009ecc>
 4009f74:	01ffffc4 	movi	r7,-1
 4009f78:	d9c00915 	stw	r7,36(sp)
 4009f7c:	d9800717 	ldw	r6,28(sp)
 4009f80:	d9c01517 	ldw	r7,84(sp)
 4009f84:	d9401e17 	ldw	r5,120(sp)
 4009f88:	d809883a 	mov	r4,sp
 4009f8c:	40099540 	call	4009954 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 4009f90:	1080005c 	xori	r2,r2,1
 4009f94:	003fde06 	br	4009f10 <__alt_data_end+0xfc009f10>
 4009f98:	d9001b17 	ldw	r4,108(sp)
 4009f9c:	00800044 	movi	r2,1
 4009fa0:	113f4d36 	bltu	r2,r4,4009cd8 <__alt_data_end+0xfc009cd8>
 4009fa4:	d9c02317 	ldw	r7,140(sp)
 4009fa8:	38800017 	ldw	r2,0(r7)
 4009fac:	1080004c 	andi	r2,r2,1
 4009fb0:	1000061e 	bne	r2,zero,4009fcc <__gxx_personality_sj0+0x5d0>
 4009fb4:	d8c02317 	ldw	r3,140(sp)
 4009fb8:	18800504 	addi	r2,r3,20
 4009fbc:	d8800715 	stw	r2,28(sp)
 4009fc0:	10bff017 	ldw	r2,-64(r2)
 4009fc4:	d8801e15 	stw	r2,120(sp)
 4009fc8:	003f4606 	br	4009ce4 <__alt_data_end+0xfc009ce4>
 4009fcc:	38bff517 	ldw	r2,-44(r7)
 4009fd0:	003ffa06 	br	4009fbc <__alt_data_end+0xfc009fbc>
 4009fd4:	d9000a17 	ldw	r4,40(sp)
 4009fd8:	400a38c0 	call	400a38c <__cxa_begin_catch>
 4009fdc:	003f9106 	br	4009e24 <__alt_data_end+0xfc009e24>
 4009fe0:	d9c01c17 	ldw	r7,112(sp)
 4009fe4:	383eda1e 	bne	r7,zero,4009b50 <__alt_data_end+0xfc009b50>
 4009fe8:	d8c01b17 	ldw	r3,108(sp)
 4009fec:	00800044 	movi	r2,1
 4009ff0:	10fed736 	bltu	r2,r3,4009b50 <__alt_data_end+0xfc009b50>
 4009ff4:	00c000c4 	movi	r3,3
 4009ff8:	003f8e06 	br	4009e34 <__alt_data_end+0xfc009e34>

04009ffc <__cxa_call_unexpected>:
 4009ffc:	00810074 	movhi	r2,1025
 400a000:	deffe604 	addi	sp,sp,-104
 400a004:	10a67f04 	addi	r2,r2,-26116
 400a008:	d8800d15 	stw	r2,52(sp)
 400a00c:	008100b4 	movhi	r2,1026
 400a010:	10ac6604 	addi	r2,r2,-20072
 400a014:	d8800e15 	stw	r2,56(sp)
 400a018:	d8800104 	addi	r2,sp,4
 400a01c:	d8800f15 	stw	r2,60(sp)
 400a020:	00810074 	movhi	r2,1025
 400a024:	10a82204 	addi	r2,r2,-24440
 400a028:	d9001415 	stw	r4,80(sp)
 400a02c:	d9000704 	addi	r4,sp,28
 400a030:	dfc01915 	stw	ra,100(sp)
 400a034:	d8801015 	stw	r2,64(sp)
 400a038:	df001815 	stw	fp,96(sp)
 400a03c:	dec01115 	stw	sp,68(sp)
 400a040:	400ac640 	call	400ac64 <_Unwind_SjLj_Register>
 400a044:	d9001417 	ldw	r4,80(sp)
 400a048:	400a38c0 	call	400a38c <__cxa_begin_catch>
 400a04c:	d8c01417 	ldw	r3,80(sp)
 400a050:	18bffe17 	ldw	r2,-8(r3)
 400a054:	193ff717 	ldw	r4,-36(r3)
 400a058:	18fffd17 	ldw	r3,-12(r3)
 400a05c:	d8800315 	stw	r2,12(sp)
 400a060:	d8c01615 	stw	r3,88(sp)
 400a064:	d8c01417 	ldw	r3,80(sp)
 400a068:	18fffb17 	ldw	r3,-20(r3)
 400a06c:	d8c01515 	stw	r3,84(sp)
 400a070:	d8c01417 	ldw	r3,80(sp)
 400a074:	18fff817 	ldw	r3,-32(r3)
 400a078:	d8c01415 	stw	r3,80(sp)
 400a07c:	00c00044 	movi	r3,1
 400a080:	d8c00815 	stw	r3,32(sp)
 400a084:	400916c0 	call	400916c <_ZN10__cxxabiv112__unexpectedEPFvvE>
 400a088:	d8c00917 	ldw	r3,36(sp)
 400a08c:	d8800817 	ldw	r2,32(sp)
 400a090:	d8c01715 	stw	r3,92(sp)
 400a094:	10000a26 	beq	r2,zero,400a0c0 <__cxa_call_unexpected+0xc4>
 400a098:	10bfffc4 	addi	r2,r2,-1
 400a09c:	10000126 	beq	r2,zero,400a0a4 <__cxa_call_unexpected+0xa8>
 400a0a0:	003b68fa 	trap	3
 400a0a4:	d8000815 	stw	zero,32(sp)
 400a0a8:	400a4400 	call	400a440 <__cxa_end_catch>
 400a0ac:	400a4400 	call	400a440 <__cxa_end_catch>
 400a0b0:	d9001717 	ldw	r4,92(sp)
 400a0b4:	00bfffc4 	movi	r2,-1
 400a0b8:	d8800815 	stw	r2,32(sp)
 400a0bc:	400ae600 	call	400ae60 <_Unwind_SjLj_Resume>
 400a0c0:	d9001717 	ldw	r4,92(sp)
 400a0c4:	400a38c0 	call	400a38c <__cxa_begin_catch>
 400a0c8:	400a8300 	call	400a830 <__cxa_get_globals_fast>
 400a0cc:	10800017 	ldw	r2,0(r2)
 400a0d0:	10c00b17 	ldw	r3,44(r2)
 400a0d4:	18c0004c 	andi	r3,r3,1
 400a0d8:	18001e26 	beq	r3,zero,400a154 <__cxa_call_unexpected+0x158>
 400a0dc:	10800017 	ldw	r2,0(r2)
 400a0e0:	d8801715 	stw	r2,92(sp)
 400a0e4:	d8801517 	ldw	r2,84(sp)
 400a0e8:	00802b0e 	bge	zero,r2,400a198 <__cxa_call_unexpected+0x19c>
 400a0ec:	d8c01717 	ldw	r3,92(sp)
 400a0f0:	d8800317 	ldw	r2,12(sp)
 400a0f4:	d9c01517 	ldw	r7,84(sp)
 400a0f8:	193ff017 	ldw	r4,-64(r3)
 400a0fc:	d9801617 	ldw	r6,88(sp)
 400a100:	d8800015 	stw	r2,0(sp)
 400a104:	180b883a 	mov	r5,r3
 400a108:	00800084 	movi	r2,2
 400a10c:	d8800815 	stw	r2,32(sp)
 400a110:	40097280 	call	4009728 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 400a114:	10803fcc 	andi	r2,r2,255
 400a118:	10001e1e 	bne	r2,zero,400a194 <__cxa_call_unexpected+0x198>
 400a11c:	d8800317 	ldw	r2,12(sp)
 400a120:	d9c01517 	ldw	r7,84(sp)
 400a124:	d9801617 	ldw	r6,88(sp)
 400a128:	010100b4 	movhi	r4,1026
 400a12c:	d8800015 	stw	r2,0(sp)
 400a130:	2106aa04 	addi	r4,r4,6824
 400a134:	00800084 	movi	r2,2
 400a138:	000b883a 	mov	r5,zero
 400a13c:	d8800815 	stw	r2,32(sp)
 400a140:	40097280 	call	4009728 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 400a144:	10803fcc 	andi	r2,r2,255
 400a148:	1000051e 	bne	r2,zero,400a160 <__cxa_call_unexpected+0x164>
 400a14c:	d9001417 	ldw	r4,80(sp)
 400a150:	40090940 	call	4009094 <_ZN10__cxxabiv111__terminateEPFvvE>
 400a154:	10801004 	addi	r2,r2,64
 400a158:	d8801715 	stw	r2,92(sp)
 400a15c:	003fe106 	br	400a0e4 <__alt_data_end+0xfc00a0e4>
 400a160:	01000104 	movi	r4,4
 400a164:	400a6740 	call	400a674 <__cxa_allocate_exception>
 400a168:	00c100b4 	movhi	r3,1026
 400a16c:	18c6c504 	addi	r3,r3,6932
 400a170:	01810074 	movhi	r6,1025
 400a174:	014100b4 	movhi	r5,1026
 400a178:	10c00015 	stw	r3,0(r2)
 400a17c:	31aa1304 	addi	r6,r6,-22452
 400a180:	00c00084 	movi	r3,2
 400a184:	2946aa04 	addi	r5,r5,6824
 400a188:	1009883a 	mov	r4,r2
 400a18c:	d8c00815 	stw	r3,32(sp)
 400a190:	400a2700 	call	400a270 <__cxa_throw>
 400a194:	400a3000 	call	400a300 <__cxa_rethrow>
 400a198:	d9401617 	ldw	r5,88(sp)
 400a19c:	00800084 	movi	r2,2
 400a1a0:	d9800104 	addi	r6,sp,4
 400a1a4:	0009883a 	mov	r4,zero
 400a1a8:	d8800815 	stw	r2,32(sp)
 400a1ac:	400956c0 	call	400956c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 400a1b0:	d9801717 	ldw	r6,92(sp)
 400a1b4:	d9c01517 	ldw	r7,84(sp)
 400a1b8:	d9000104 	addi	r4,sp,4
 400a1bc:	317ff017 	ldw	r5,-64(r6)
 400a1c0:	40099540 	call	4009954 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 400a1c4:	10803fcc 	andi	r2,r2,255
 400a1c8:	1000171e 	bne	r2,zero,400a228 <__cxa_call_unexpected+0x22c>
 400a1cc:	d9c01517 	ldw	r7,84(sp)
 400a1d0:	014100b4 	movhi	r5,1026
 400a1d4:	00800084 	movi	r2,2
 400a1d8:	2946aa04 	addi	r5,r5,6824
 400a1dc:	000d883a 	mov	r6,zero
 400a1e0:	d9000104 	addi	r4,sp,4
 400a1e4:	d8800815 	stw	r2,32(sp)
 400a1e8:	40099540 	call	4009954 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 400a1ec:	10803fcc 	andi	r2,r2,255
 400a1f0:	103fd626 	beq	r2,zero,400a14c <__alt_data_end+0xfc00a14c>
 400a1f4:	01000104 	movi	r4,4
 400a1f8:	400a6740 	call	400a674 <__cxa_allocate_exception>
 400a1fc:	00c100b4 	movhi	r3,1026
 400a200:	18c6c504 	addi	r3,r3,6932
 400a204:	01810074 	movhi	r6,1025
 400a208:	014100b4 	movhi	r5,1026
 400a20c:	10c00015 	stw	r3,0(r2)
 400a210:	31aa1304 	addi	r6,r6,-22452
 400a214:	00c00084 	movi	r3,2
 400a218:	2946aa04 	addi	r5,r5,6824
 400a21c:	1009883a 	mov	r4,r2
 400a220:	d8c00815 	stw	r3,32(sp)
 400a224:	400a2700 	call	400a270 <__cxa_throw>
 400a228:	400a3000 	call	400a300 <__cxa_rethrow>

0400a22c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
 400a22c:	defffe04 	addi	sp,sp,-8
 400a230:	dfc00115 	stw	ra,4(sp)
 400a234:	dc000015 	stw	r16,0(sp)
 400a238:	00800044 	movi	r2,1
 400a23c:	11000a36 	bltu	r2,r4,400a268 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
 400a240:	28bff617 	ldw	r2,-40(r5)
 400a244:	2c000504 	addi	r16,r5,20
 400a248:	10000226 	beq	r2,zero,400a254 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
 400a24c:	8009883a 	mov	r4,r16
 400a250:	103ee83a 	callr	r2
 400a254:	8009883a 	mov	r4,r16
 400a258:	dfc00117 	ldw	ra,4(sp)
 400a25c:	dc000017 	ldw	r16,0(sp)
 400a260:	dec00204 	addi	sp,sp,8
 400a264:	400a6d41 	jmpi	400a6d4 <__cxa_free_exception>
 400a268:	293ff817 	ldw	r4,-32(r5)
 400a26c:	40090940 	call	4009094 <_ZN10__cxxabiv111__terminateEPFvvE>

0400a270 <__cxa_throw>:
 400a270:	defffb04 	addi	sp,sp,-20
 400a274:	dfc00415 	stw	ra,16(sp)
 400a278:	dcc00315 	stw	r19,12(sp)
 400a27c:	dc800215 	stw	r18,8(sp)
 400a280:	2827883a 	mov	r19,r5
 400a284:	3025883a 	mov	r18,r6
 400a288:	dc400115 	stw	r17,4(sp)
 400a28c:	dc000015 	stw	r16,0(sp)
 400a290:	2021883a 	mov	r16,r4
 400a294:	400a83c0 	call	400a83c <__cxa_get_globals>
 400a298:	10c00117 	ldw	r3,4(r2)
 400a29c:	847ffb04 	addi	r17,r16,-20
 400a2a0:	18c00044 	addi	r3,r3,1
 400a2a4:	10c00115 	stw	r3,4(r2)
 400a2a8:	00800044 	movi	r2,1
 400a2ac:	80bfef15 	stw	r2,-68(r16)
 400a2b0:	84fff015 	stw	r19,-64(r16)
 400a2b4:	84bff115 	stw	r18,-60(r16)
 400a2b8:	40091cc0 	call	40091cc <_ZSt14get_unexpectedv>
 400a2bc:	80bff215 	stw	r2,-56(r16)
 400a2c0:	40091a80 	call	40091a8 <_ZSt13get_terminatev>
 400a2c4:	80bff315 	stw	r2,-52(r16)
 400a2c8:	0090caf4 	movhi	r2,17195
 400a2cc:	108ac004 	addi	r2,r2,11008
 400a2d0:	80bffb15 	stw	r2,-20(r16)
 400a2d4:	0091d3b4 	movhi	r2,18254
 400a2d8:	109550c4 	addi	r2,r2,21827
 400a2dc:	80bffc15 	stw	r2,-16(r16)
 400a2e0:	00810074 	movhi	r2,1025
 400a2e4:	10a88b04 	addi	r2,r2,-24020
 400a2e8:	8809883a 	mov	r4,r17
 400a2ec:	80bffd15 	stw	r2,-12(r16)
 400a2f0:	400ad4c0 	call	400ad4c <_Unwind_SjLj_RaiseException>
 400a2f4:	8809883a 	mov	r4,r17
 400a2f8:	400a38c0 	call	400a38c <__cxa_begin_catch>
 400a2fc:	40091540 	call	4009154 <_ZSt9terminatev>

0400a300 <__cxa_rethrow>:
 400a300:	defffe04 	addi	sp,sp,-8
 400a304:	dfc00115 	stw	ra,4(sp)
 400a308:	dc000015 	stw	r16,0(sp)
 400a30c:	400a83c0 	call	400a83c <__cxa_get_globals>
 400a310:	10c00117 	ldw	r3,4(r2)
 400a314:	11000017 	ldw	r4,0(r2)
 400a318:	18c00044 	addi	r3,r3,1
 400a31c:	10c00115 	stw	r3,4(r2)
 400a320:	20001126 	beq	r4,zero,400a368 <__cxa_rethrow+0x68>
 400a324:	21400b17 	ldw	r5,44(r4)
 400a328:	01ef3574 	movhi	r7,48341
 400a32c:	39f54004 	addi	r7,r7,-11008
 400a330:	29cf883a 	add	r7,r5,r7
 400a334:	20c00c17 	ldw	r3,48(r4)
 400a338:	394d803a 	cmpltu	r6,r7,r5
 400a33c:	016e2cb4 	movhi	r5,47282
 400a340:	296aaf04 	addi	r5,r5,-21828
 400a344:	1947883a 	add	r3,r3,r5
 400a348:	30c7883a 	add	r3,r6,r3
 400a34c:	18000726 	beq	r3,zero,400a36c <__cxa_rethrow+0x6c>
 400a350:	10000015 	stw	zero,0(r2)
 400a354:	24000b04 	addi	r16,r4,44
 400a358:	8009883a 	mov	r4,r16
 400a35c:	400aea40 	call	400aea4 <_Unwind_SjLj_Resume_or_Rethrow>
 400a360:	8009883a 	mov	r4,r16
 400a364:	400a38c0 	call	400a38c <__cxa_begin_catch>
 400a368:	40091540 	call	4009154 <_ZSt9terminatev>
 400a36c:	00c00044 	movi	r3,1
 400a370:	19fff736 	bltu	r3,r7,400a350 <__alt_data_end+0xfc00a350>
 400a374:	20800517 	ldw	r2,20(r4)
 400a378:	0085c83a 	sub	r2,zero,r2
 400a37c:	20800515 	stw	r2,20(r4)
 400a380:	003ff406 	br	400a354 <__alt_data_end+0xfc00a354>

0400a384 <__cxa_get_exception_ptr>:
 400a384:	20bfff17 	ldw	r2,-4(r4)
 400a388:	f800283a 	ret

0400a38c <__cxa_begin_catch>:
 400a38c:	defffe04 	addi	sp,sp,-8
 400a390:	dc000015 	stw	r16,0(sp)
 400a394:	dfc00115 	stw	ra,4(sp)
 400a398:	2021883a 	mov	r16,r4
 400a39c:	400a83c0 	call	400a83c <__cxa_get_globals>
 400a3a0:	81000017 	ldw	r4,0(r16)
 400a3a4:	80c00117 	ldw	r3,4(r16)
 400a3a8:	01af3574 	movhi	r6,48341
 400a3ac:	31b54004 	addi	r6,r6,-11008
 400a3b0:	016e2cb4 	movhi	r5,47282
 400a3b4:	296aaf04 	addi	r5,r5,-21828
 400a3b8:	218d883a 	add	r6,r4,r6
 400a3bc:	3109803a 	cmpltu	r4,r6,r4
 400a3c0:	1947883a 	add	r3,r3,r5
 400a3c4:	20c7883a 	add	r3,r4,r3
 400a3c8:	817ff504 	addi	r5,r16,-44
 400a3cc:	11000017 	ldw	r4,0(r2)
 400a3d0:	18000726 	beq	r3,zero,400a3f0 <__cxa_begin_catch+0x64>
 400a3d4:	2000191e 	bne	r4,zero,400a43c <__cxa_begin_catch+0xb0>
 400a3d8:	11400015 	stw	r5,0(r2)
 400a3dc:	0005883a 	mov	r2,zero
 400a3e0:	dfc00117 	ldw	ra,4(sp)
 400a3e4:	dc000017 	ldw	r16,0(sp)
 400a3e8:	dec00204 	addi	sp,sp,8
 400a3ec:	f800283a 	ret
 400a3f0:	01c00044 	movi	r7,1
 400a3f4:	39bff736 	bltu	r7,r6,400a3d4 <__alt_data_end+0xfc00a3d4>
 400a3f8:	80fffa17 	ldw	r3,-24(r16)
 400a3fc:	18000d16 	blt	r3,zero,400a434 <__cxa_begin_catch+0xa8>
 400a400:	18c00044 	addi	r3,r3,1
 400a404:	11800117 	ldw	r6,4(r2)
 400a408:	80fffa15 	stw	r3,-24(r16)
 400a40c:	30ffffc4 	addi	r3,r6,-1
 400a410:	10c00115 	stw	r3,4(r2)
 400a414:	21400226 	beq	r4,r5,400a420 <__cxa_begin_catch+0x94>
 400a418:	813ff915 	stw	r4,-28(r16)
 400a41c:	11400015 	stw	r5,0(r2)
 400a420:	80bfff17 	ldw	r2,-4(r16)
 400a424:	dfc00117 	ldw	ra,4(sp)
 400a428:	dc000017 	ldw	r16,0(sp)
 400a42c:	dec00204 	addi	sp,sp,8
 400a430:	f800283a 	ret
 400a434:	38c7c83a 	sub	r3,r7,r3
 400a438:	003ff206 	br	400a404 <__alt_data_end+0xfc00a404>
 400a43c:	40091540 	call	4009154 <_ZSt9terminatev>

0400a440 <__cxa_end_catch>:
 400a440:	deffff04 	addi	sp,sp,-4
 400a444:	dfc00015 	stw	ra,0(sp)
 400a448:	400a8300 	call	400a830 <__cxa_get_globals_fast>
 400a44c:	11000017 	ldw	r4,0(r2)
 400a450:	20001426 	beq	r4,zero,400a4a4 <__cxa_end_catch+0x64>
 400a454:	21400b17 	ldw	r5,44(r4)
 400a458:	01ef3574 	movhi	r7,48341
 400a45c:	39f54004 	addi	r7,r7,-11008
 400a460:	29cf883a 	add	r7,r5,r7
 400a464:	20c00c17 	ldw	r3,48(r4)
 400a468:	394d803a 	cmpltu	r6,r7,r5
 400a46c:	016e2cb4 	movhi	r5,47282
 400a470:	296aaf04 	addi	r5,r5,-21828
 400a474:	1947883a 	add	r3,r3,r5
 400a478:	30c7883a 	add	r3,r6,r3
 400a47c:	18000c1e 	bne	r3,zero,400a4b0 <__cxa_end_catch+0x70>
 400a480:	00c00044 	movi	r3,1
 400a484:	19c00a36 	bltu	r3,r7,400a4b0 <__cxa_end_catch+0x70>
 400a488:	20c00517 	ldw	r3,20(r4)
 400a48c:	18000d16 	blt	r3,zero,400a4c4 <__cxa_end_catch+0x84>
 400a490:	18ffffc4 	addi	r3,r3,-1
 400a494:	18001026 	beq	r3,zero,400a4d8 <__cxa_end_catch+0x98>
 400a498:	00bfffc4 	movi	r2,-1
 400a49c:	18801426 	beq	r3,r2,400a4f0 <__cxa_end_catch+0xb0>
 400a4a0:	20c00515 	stw	r3,20(r4)
 400a4a4:	dfc00017 	ldw	ra,0(sp)
 400a4a8:	dec00104 	addi	sp,sp,4
 400a4ac:	f800283a 	ret
 400a4b0:	21000b04 	addi	r4,r4,44
 400a4b4:	10000015 	stw	zero,0(r2)
 400a4b8:	dfc00017 	ldw	ra,0(sp)
 400a4bc:	dec00104 	addi	sp,sp,4
 400a4c0:	400aef01 	jmpi	400aef0 <_Unwind_DeleteException>
 400a4c4:	18c00044 	addi	r3,r3,1
 400a4c8:	183ff51e 	bne	r3,zero,400a4a0 <__alt_data_end+0xfc00a4a0>
 400a4cc:	21400417 	ldw	r5,16(r4)
 400a4d0:	11400015 	stw	r5,0(r2)
 400a4d4:	003ff206 	br	400a4a0 <__alt_data_end+0xfc00a4a0>
 400a4d8:	20c00417 	ldw	r3,16(r4)
 400a4dc:	21000b04 	addi	r4,r4,44
 400a4e0:	10c00015 	stw	r3,0(r2)
 400a4e4:	dfc00017 	ldw	ra,0(sp)
 400a4e8:	dec00104 	addi	sp,sp,4
 400a4ec:	400aef01 	jmpi	400aef0 <_Unwind_DeleteException>
 400a4f0:	40091540 	call	4009154 <_ZSt9terminatev>

0400a4f4 <_ZSt18uncaught_exceptionv>:
 400a4f4:	deffff04 	addi	sp,sp,-4
 400a4f8:	dfc00015 	stw	ra,0(sp)
 400a4fc:	400a83c0 	call	400a83c <__cxa_get_globals>
 400a500:	10800117 	ldw	r2,4(r2)
 400a504:	1004c03a 	cmpne	r2,r2,zero
 400a508:	dfc00017 	ldw	ra,0(sp)
 400a50c:	dec00104 	addi	sp,sp,4
 400a510:	f800283a 	ret

0400a514 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 400a514:	018100f4 	movhi	r6,1027
 400a518:	31a0e304 	addi	r6,r6,-31860
 400a51c:	31400117 	ldw	r5,4(r6)
 400a520:	223fff04 	addi	r8,r4,-4
 400a524:	227fff17 	ldw	r9,-4(r4)
 400a528:	28001326 	beq	r5,zero,400a578 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
 400a52c:	424f883a 	add	r7,r8,r9
 400a530:	29c01426 	beq	r5,r7,400a584 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
 400a534:	28c00117 	ldw	r3,4(r5)
 400a538:	18001c26 	beq	r3,zero,400a5ac <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
 400a53c:	38c00336 	bltu	r7,r3,400a54c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
 400a540:	00001e06 	br	400a5bc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
 400a544:	3880052e 	bgeu	r7,r2,400a55c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
 400a548:	1007883a 	mov	r3,r2
 400a54c:	18800117 	ldw	r2,4(r3)
 400a550:	29800104 	addi	r6,r5,4
 400a554:	180b883a 	mov	r5,r3
 400a558:	103ffa1e 	bne	r2,zero,400a544 <__alt_data_end+0xfc00a544>
 400a55c:	19400017 	ldw	r5,0(r3)
 400a560:	194f883a 	add	r7,r3,r5
 400a564:	41c00e26 	beq	r8,r7,400a5a0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
 400a568:	20800015 	stw	r2,0(r4)
 400a56c:	30800017 	ldw	r2,0(r6)
 400a570:	12000115 	stw	r8,4(r2)
 400a574:	f800283a 	ret
 400a578:	20000015 	stw	zero,0(r4)
 400a57c:	32000115 	stw	r8,4(r6)
 400a580:	f800283a 	ret
 400a584:	28c00017 	ldw	r3,0(r5)
 400a588:	28800117 	ldw	r2,4(r5)
 400a58c:	1a53883a 	add	r9,r3,r9
 400a590:	227fff15 	stw	r9,-4(r4)
 400a594:	20800015 	stw	r2,0(r4)
 400a598:	32000115 	stw	r8,4(r6)
 400a59c:	f800283a 	ret
 400a5a0:	494b883a 	add	r5,r9,r5
 400a5a4:	19400015 	stw	r5,0(r3)
 400a5a8:	f800283a 	ret
 400a5ac:	0005883a 	mov	r2,zero
 400a5b0:	2807883a 	mov	r3,r5
 400a5b4:	31800104 	addi	r6,r6,4
 400a5b8:	003fe806 	br	400a55c <__alt_data_end+0xfc00a55c>
 400a5bc:	1805883a 	mov	r2,r3
 400a5c0:	31800104 	addi	r6,r6,4
 400a5c4:	2807883a 	mov	r3,r5
 400a5c8:	003fe406 	br	400a55c <__alt_data_end+0xfc00a55c>

0400a5cc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 400a5cc:	20800104 	addi	r2,r4,4
 400a5d0:	00c001c4 	movi	r3,7
 400a5d4:	1880112e 	bgeu	r3,r2,400a61c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
 400a5d8:	20c9883a 	add	r4,r4,r3
 400a5dc:	00bfff04 	movi	r2,-4
 400a5e0:	208a703a 	and	r5,r4,r2
 400a5e4:	018100f4 	movhi	r6,1027
 400a5e8:	31a0e304 	addi	r6,r6,-31860
 400a5ec:	30c00117 	ldw	r3,4(r6)
 400a5f0:	18000826 	beq	r3,zero,400a614 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
 400a5f4:	19000017 	ldw	r4,0(r3)
 400a5f8:	21400436 	bltu	r4,r5,400a60c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
 400a5fc:	00001a06 	br	400a668 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
 400a600:	11000017 	ldw	r4,0(r2)
 400a604:	2140072e 	bgeu	r4,r5,400a624 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
 400a608:	1007883a 	mov	r3,r2
 400a60c:	18800117 	ldw	r2,4(r3)
 400a610:	103ffb1e 	bne	r2,zero,400a600 <__alt_data_end+0xfc00a600>
 400a614:	0005883a 	mov	r2,zero
 400a618:	f800283a 	ret
 400a61c:	01400204 	movi	r5,8
 400a620:	003ff006 	br	400a5e4 <__alt_data_end+0xfc00a5e4>
 400a624:	18c00104 	addi	r3,r3,4
 400a628:	2149c83a 	sub	r4,r4,r5
 400a62c:	018001c4 	movi	r6,7
 400a630:	3100092e 	bgeu	r6,r4,400a658 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
 400a634:	11c00117 	ldw	r7,4(r2)
 400a638:	114d883a 	add	r6,r2,r5
 400a63c:	31000015 	stw	r4,0(r6)
 400a640:	31c00115 	stw	r7,4(r6)
 400a644:	18800017 	ldw	r2,0(r3)
 400a648:	11400015 	stw	r5,0(r2)
 400a64c:	19800015 	stw	r6,0(r3)
 400a650:	10800104 	addi	r2,r2,4
 400a654:	f800283a 	ret
 400a658:	11000117 	ldw	r4,4(r2)
 400a65c:	10800104 	addi	r2,r2,4
 400a660:	19000015 	stw	r4,0(r3)
 400a664:	f800283a 	ret
 400a668:	1805883a 	mov	r2,r3
 400a66c:	30c00104 	addi	r3,r6,4
 400a670:	003fed06 	br	400a628 <__alt_data_end+0xfc00a628>

0400a674 <__cxa_allocate_exception>:
 400a674:	defffd04 	addi	sp,sp,-12
 400a678:	dc400115 	stw	r17,4(sp)
 400a67c:	24401104 	addi	r17,r4,68
 400a680:	8809883a 	mov	r4,r17
 400a684:	dc000015 	stw	r16,0(sp)
 400a688:	dfc00215 	stw	ra,8(sp)
 400a68c:	400afe00 	call	400afe0 <malloc>
 400a690:	1021883a 	mov	r16,r2
 400a694:	10000a26 	beq	r2,zero,400a6c0 <__cxa_allocate_exception+0x4c>
 400a698:	01801104 	movi	r6,68
 400a69c:	000b883a 	mov	r5,zero
 400a6a0:	8009883a 	mov	r4,r16
 400a6a4:	400b95c0 	call	400b95c <memset>
 400a6a8:	80801104 	addi	r2,r16,68
 400a6ac:	dfc00217 	ldw	ra,8(sp)
 400a6b0:	dc400117 	ldw	r17,4(sp)
 400a6b4:	dc000017 	ldw	r16,0(sp)
 400a6b8:	dec00304 	addi	sp,sp,12
 400a6bc:	f800283a 	ret
 400a6c0:	8809883a 	mov	r4,r17
 400a6c4:	400a5cc0 	call	400a5cc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 400a6c8:	1021883a 	mov	r16,r2
 400a6cc:	103ff21e 	bne	r2,zero,400a698 <__alt_data_end+0xfc00a698>
 400a6d0:	40091540 	call	4009154 <_ZSt9terminatev>

0400a6d4 <__cxa_free_exception>:
 400a6d4:	00c100f4 	movhi	r3,1027
 400a6d8:	18e0e304 	addi	r3,r3,-31860
 400a6dc:	18800217 	ldw	r2,8(r3)
 400a6e0:	213fef04 	addi	r4,r4,-68
 400a6e4:	1100042e 	bgeu	r2,r4,400a6f8 <__cxa_free_exception+0x24>
 400a6e8:	18c00317 	ldw	r3,12(r3)
 400a6ec:	10c5883a 	add	r2,r2,r3
 400a6f0:	2080012e 	bgeu	r4,r2,400a6f8 <__cxa_free_exception+0x24>
 400a6f4:	400a5141 	jmpi	400a514 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 400a6f8:	400aff41 	jmpi	400aff4 <free>

0400a6fc <__cxa_allocate_dependent_exception>:
 400a6fc:	defffe04 	addi	sp,sp,-8
 400a700:	01001004 	movi	r4,64
 400a704:	dc000015 	stw	r16,0(sp)
 400a708:	dfc00115 	stw	ra,4(sp)
 400a70c:	400afe00 	call	400afe0 <malloc>
 400a710:	1021883a 	mov	r16,r2
 400a714:	10000926 	beq	r2,zero,400a73c <__cxa_allocate_dependent_exception+0x40>
 400a718:	01801004 	movi	r6,64
 400a71c:	000b883a 	mov	r5,zero
 400a720:	8009883a 	mov	r4,r16
 400a724:	400b95c0 	call	400b95c <memset>
 400a728:	8005883a 	mov	r2,r16
 400a72c:	dfc00117 	ldw	ra,4(sp)
 400a730:	dc000017 	ldw	r16,0(sp)
 400a734:	dec00204 	addi	sp,sp,8
 400a738:	f800283a 	ret
 400a73c:	01001004 	movi	r4,64
 400a740:	400a5cc0 	call	400a5cc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 400a744:	1021883a 	mov	r16,r2
 400a748:	103ff31e 	bne	r2,zero,400a718 <__alt_data_end+0xfc00a718>
 400a74c:	40091540 	call	4009154 <_ZSt9terminatev>

0400a750 <__cxa_free_dependent_exception>:
 400a750:	014100f4 	movhi	r5,1027
 400a754:	2960e304 	addi	r5,r5,-31860
 400a758:	28c00217 	ldw	r3,8(r5)
 400a75c:	2005883a 	mov	r2,r4
 400a760:	1900042e 	bgeu	r3,r4,400a774 <__cxa_free_dependent_exception+0x24>
 400a764:	29400317 	ldw	r5,12(r5)
 400a768:	1947883a 	add	r3,r3,r5
 400a76c:	20c0012e 	bgeu	r4,r3,400a774 <__cxa_free_dependent_exception+0x24>
 400a770:	400a5141 	jmpi	400a514 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 400a774:	1009883a 	mov	r4,r2
 400a778:	400aff41 	jmpi	400aff4 <free>

0400a77c <_GLOBAL__sub_I___cxa_allocate_exception>:
 400a77c:	defffd04 	addi	sp,sp,-12
 400a780:	dc400115 	stw	r17,4(sp)
 400a784:	dc000015 	stw	r16,0(sp)
 400a788:	04424004 	movi	r17,2304
 400a78c:	040100f4 	movhi	r16,1027
 400a790:	8420e304 	addi	r16,r16,-31860
 400a794:	8809883a 	mov	r4,r17
 400a798:	dfc00215 	stw	ra,8(sp)
 400a79c:	84400315 	stw	r17,12(r16)
 400a7a0:	400afe00 	call	400afe0 <malloc>
 400a7a4:	80800215 	stw	r2,8(r16)
 400a7a8:	10000826 	beq	r2,zero,400a7cc <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
 400a7ac:	80800115 	stw	r2,4(r16)
 400a7b0:	14400015 	stw	r17,0(r2)
 400a7b4:	10000115 	stw	zero,4(r2)
 400a7b8:	dfc00217 	ldw	ra,8(sp)
 400a7bc:	dc400117 	ldw	r17,4(sp)
 400a7c0:	dc000017 	ldw	r16,0(sp)
 400a7c4:	dec00304 	addi	sp,sp,12
 400a7c8:	f800283a 	ret
 400a7cc:	80000315 	stw	zero,12(r16)
 400a7d0:	80000115 	stw	zero,4(r16)
 400a7d4:	003ff806 	br	400a7b8 <__alt_data_end+0xfc00a7b8>

0400a7d8 <__cxa_call_terminate>:
 400a7d8:	defffe04 	addi	sp,sp,-8
 400a7dc:	dfc00115 	stw	ra,4(sp)
 400a7e0:	dc000015 	stw	r16,0(sp)
 400a7e4:	20000d26 	beq	r4,zero,400a81c <__cxa_call_terminate+0x44>
 400a7e8:	2021883a 	mov	r16,r4
 400a7ec:	400a38c0 	call	400a38c <__cxa_begin_catch>
 400a7f0:	80c00017 	ldw	r3,0(r16)
 400a7f4:	016f3574 	movhi	r5,48341
 400a7f8:	29754004 	addi	r5,r5,-11008
 400a7fc:	194b883a 	add	r5,r3,r5
 400a800:	80800117 	ldw	r2,4(r16)
 400a804:	28c9803a 	cmpltu	r4,r5,r3
 400a808:	00ee2cb4 	movhi	r3,47282
 400a80c:	18eaaf04 	addi	r3,r3,-21828
 400a810:	10c5883a 	add	r2,r2,r3
 400a814:	2085883a 	add	r2,r4,r2
 400a818:	10000126 	beq	r2,zero,400a820 <__cxa_call_terminate+0x48>
 400a81c:	40091540 	call	4009154 <_ZSt9terminatev>
 400a820:	00800044 	movi	r2,1
 400a824:	117ffd36 	bltu	r2,r5,400a81c <__alt_data_end+0xfc00a81c>
 400a828:	813ff817 	ldw	r4,-32(r16)
 400a82c:	40090940 	call	4009094 <_ZN10__cxxabiv111__terminateEPFvvE>

0400a830 <__cxa_get_globals_fast>:
 400a830:	008100f4 	movhi	r2,1027
 400a834:	10a07e04 	addi	r2,r2,-32264
 400a838:	f800283a 	ret

0400a83c <__cxa_get_globals>:
 400a83c:	008100f4 	movhi	r2,1027
 400a840:	10a07e04 	addi	r2,r2,-32264
 400a844:	f800283a 	ret

0400a848 <_ZNSt9exceptionD1Ev>:
 400a848:	f800283a 	ret

0400a84c <_ZNSt13bad_exceptionD1Ev>:
 400a84c:	f800283a 	ret

0400a850 <_ZNKSt9exception4whatEv>:
 400a850:	008100b4 	movhi	r2,1026
 400a854:	10869804 	addi	r2,r2,6752
 400a858:	f800283a 	ret

0400a85c <_ZNKSt13bad_exception4whatEv>:
 400a85c:	008100b4 	movhi	r2,1026
 400a860:	10869c04 	addi	r2,r2,6768
 400a864:	f800283a 	ret

0400a868 <_ZNSt9exceptionD0Ev>:
 400a868:	4008d881 	jmpi	4008d88 <_ZdlPv>

0400a86c <_ZNSt13bad_exceptionD0Ev>:
 400a86c:	4008d881 	jmpi	4008d88 <_ZdlPv>

0400a870 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
 400a870:	f800283a 	ret

0400a874 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
 400a874:	4008d881 	jmpi	4008d88 <_ZdlPv>

0400a878 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
 400a878:	f800283a 	ret

0400a87c <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
 400a87c:	4008d881 	jmpi	4008d88 <_ZdlPv>

0400a880 <__divsi3>:
 400a880:	20001b16 	blt	r4,zero,400a8f0 <__divsi3+0x70>
 400a884:	000f883a 	mov	r7,zero
 400a888:	28001616 	blt	r5,zero,400a8e4 <__divsi3+0x64>
 400a88c:	200d883a 	mov	r6,r4
 400a890:	29001a2e 	bgeu	r5,r4,400a8fc <__divsi3+0x7c>
 400a894:	00800804 	movi	r2,32
 400a898:	00c00044 	movi	r3,1
 400a89c:	00000106 	br	400a8a4 <__divsi3+0x24>
 400a8a0:	10000d26 	beq	r2,zero,400a8d8 <__divsi3+0x58>
 400a8a4:	294b883a 	add	r5,r5,r5
 400a8a8:	10bfffc4 	addi	r2,r2,-1
 400a8ac:	18c7883a 	add	r3,r3,r3
 400a8b0:	293ffb36 	bltu	r5,r4,400a8a0 <__alt_data_end+0xfc00a8a0>
 400a8b4:	0005883a 	mov	r2,zero
 400a8b8:	18000726 	beq	r3,zero,400a8d8 <__divsi3+0x58>
 400a8bc:	0005883a 	mov	r2,zero
 400a8c0:	31400236 	bltu	r6,r5,400a8cc <__divsi3+0x4c>
 400a8c4:	314dc83a 	sub	r6,r6,r5
 400a8c8:	10c4b03a 	or	r2,r2,r3
 400a8cc:	1806d07a 	srli	r3,r3,1
 400a8d0:	280ad07a 	srli	r5,r5,1
 400a8d4:	183ffa1e 	bne	r3,zero,400a8c0 <__alt_data_end+0xfc00a8c0>
 400a8d8:	38000126 	beq	r7,zero,400a8e0 <__divsi3+0x60>
 400a8dc:	0085c83a 	sub	r2,zero,r2
 400a8e0:	f800283a 	ret
 400a8e4:	014bc83a 	sub	r5,zero,r5
 400a8e8:	39c0005c 	xori	r7,r7,1
 400a8ec:	003fe706 	br	400a88c <__alt_data_end+0xfc00a88c>
 400a8f0:	0109c83a 	sub	r4,zero,r4
 400a8f4:	01c00044 	movi	r7,1
 400a8f8:	003fe306 	br	400a888 <__alt_data_end+0xfc00a888>
 400a8fc:	00c00044 	movi	r3,1
 400a900:	003fee06 	br	400a8bc <__alt_data_end+0xfc00a8bc>

0400a904 <__modsi3>:
 400a904:	20001716 	blt	r4,zero,400a964 <__modsi3+0x60>
 400a908:	000f883a 	mov	r7,zero
 400a90c:	2005883a 	mov	r2,r4
 400a910:	28001216 	blt	r5,zero,400a95c <__modsi3+0x58>
 400a914:	2900162e 	bgeu	r5,r4,400a970 <__modsi3+0x6c>
 400a918:	01800804 	movi	r6,32
 400a91c:	00c00044 	movi	r3,1
 400a920:	00000106 	br	400a928 <__modsi3+0x24>
 400a924:	30000a26 	beq	r6,zero,400a950 <__modsi3+0x4c>
 400a928:	294b883a 	add	r5,r5,r5
 400a92c:	31bfffc4 	addi	r6,r6,-1
 400a930:	18c7883a 	add	r3,r3,r3
 400a934:	293ffb36 	bltu	r5,r4,400a924 <__alt_data_end+0xfc00a924>
 400a938:	18000526 	beq	r3,zero,400a950 <__modsi3+0x4c>
 400a93c:	1806d07a 	srli	r3,r3,1
 400a940:	11400136 	bltu	r2,r5,400a948 <__modsi3+0x44>
 400a944:	1145c83a 	sub	r2,r2,r5
 400a948:	280ad07a 	srli	r5,r5,1
 400a94c:	183ffb1e 	bne	r3,zero,400a93c <__alt_data_end+0xfc00a93c>
 400a950:	38000126 	beq	r7,zero,400a958 <__modsi3+0x54>
 400a954:	0085c83a 	sub	r2,zero,r2
 400a958:	f800283a 	ret
 400a95c:	014bc83a 	sub	r5,zero,r5
 400a960:	003fec06 	br	400a914 <__alt_data_end+0xfc00a914>
 400a964:	0109c83a 	sub	r4,zero,r4
 400a968:	01c00044 	movi	r7,1
 400a96c:	003fe706 	br	400a90c <__alt_data_end+0xfc00a90c>
 400a970:	00c00044 	movi	r3,1
 400a974:	003ff106 	br	400a93c <__alt_data_end+0xfc00a93c>

0400a978 <__udivsi3>:
 400a978:	200d883a 	mov	r6,r4
 400a97c:	2900152e 	bgeu	r5,r4,400a9d4 <__udivsi3+0x5c>
 400a980:	28001416 	blt	r5,zero,400a9d4 <__udivsi3+0x5c>
 400a984:	00800804 	movi	r2,32
 400a988:	00c00044 	movi	r3,1
 400a98c:	00000206 	br	400a998 <__udivsi3+0x20>
 400a990:	10000e26 	beq	r2,zero,400a9cc <__udivsi3+0x54>
 400a994:	28000516 	blt	r5,zero,400a9ac <__udivsi3+0x34>
 400a998:	294b883a 	add	r5,r5,r5
 400a99c:	10bfffc4 	addi	r2,r2,-1
 400a9a0:	18c7883a 	add	r3,r3,r3
 400a9a4:	293ffa36 	bltu	r5,r4,400a990 <__alt_data_end+0xfc00a990>
 400a9a8:	18000826 	beq	r3,zero,400a9cc <__udivsi3+0x54>
 400a9ac:	0005883a 	mov	r2,zero
 400a9b0:	31400236 	bltu	r6,r5,400a9bc <__udivsi3+0x44>
 400a9b4:	314dc83a 	sub	r6,r6,r5
 400a9b8:	10c4b03a 	or	r2,r2,r3
 400a9bc:	1806d07a 	srli	r3,r3,1
 400a9c0:	280ad07a 	srli	r5,r5,1
 400a9c4:	183ffa1e 	bne	r3,zero,400a9b0 <__alt_data_end+0xfc00a9b0>
 400a9c8:	f800283a 	ret
 400a9cc:	0005883a 	mov	r2,zero
 400a9d0:	f800283a 	ret
 400a9d4:	00c00044 	movi	r3,1
 400a9d8:	003ff406 	br	400a9ac <__alt_data_end+0xfc00a9ac>

0400a9dc <__umodsi3>:
 400a9dc:	2005883a 	mov	r2,r4
 400a9e0:	2900122e 	bgeu	r5,r4,400aa2c <__umodsi3+0x50>
 400a9e4:	28001116 	blt	r5,zero,400aa2c <__umodsi3+0x50>
 400a9e8:	01800804 	movi	r6,32
 400a9ec:	00c00044 	movi	r3,1
 400a9f0:	00000206 	br	400a9fc <__umodsi3+0x20>
 400a9f4:	30000c26 	beq	r6,zero,400aa28 <__umodsi3+0x4c>
 400a9f8:	28000516 	blt	r5,zero,400aa10 <__umodsi3+0x34>
 400a9fc:	294b883a 	add	r5,r5,r5
 400aa00:	31bfffc4 	addi	r6,r6,-1
 400aa04:	18c7883a 	add	r3,r3,r3
 400aa08:	293ffa36 	bltu	r5,r4,400a9f4 <__alt_data_end+0xfc00a9f4>
 400aa0c:	18000626 	beq	r3,zero,400aa28 <__umodsi3+0x4c>
 400aa10:	1806d07a 	srli	r3,r3,1
 400aa14:	11400136 	bltu	r2,r5,400aa1c <__umodsi3+0x40>
 400aa18:	1145c83a 	sub	r2,r2,r5
 400aa1c:	280ad07a 	srli	r5,r5,1
 400aa20:	183ffb1e 	bne	r3,zero,400aa10 <__alt_data_end+0xfc00aa10>
 400aa24:	f800283a 	ret
 400aa28:	f800283a 	ret
 400aa2c:	00c00044 	movi	r3,1
 400aa30:	003ff706 	br	400aa10 <__alt_data_end+0xfc00aa10>

0400aa34 <__mulsi3>:
 400aa34:	0005883a 	mov	r2,zero
 400aa38:	20000726 	beq	r4,zero,400aa58 <__mulsi3+0x24>
 400aa3c:	20c0004c 	andi	r3,r4,1
 400aa40:	2008d07a 	srli	r4,r4,1
 400aa44:	18000126 	beq	r3,zero,400aa4c <__mulsi3+0x18>
 400aa48:	1145883a 	add	r2,r2,r5
 400aa4c:	294b883a 	add	r5,r5,r5
 400aa50:	203ffa1e 	bne	r4,zero,400aa3c <__alt_data_end+0xfc00aa3c>
 400aa54:	f800283a 	ret
 400aa58:	f800283a 	ret

0400aa5c <_Unwind_ForcedUnwind_Phase2>:
 400aa5c:	defff404 	addi	sp,sp,-48
 400aa60:	dd800915 	stw	r22,36(sp)
 400aa64:	058100f4 	movhi	r22,1027
 400aa68:	ddc00a15 	stw	r23,40(sp)
 400aa6c:	dd400815 	stw	r21,32(sp)
 400aa70:	dd000715 	stw	r20,28(sp)
 400aa74:	dcc00615 	stw	r19,24(sp)
 400aa78:	dc400415 	stw	r17,16(sp)
 400aa7c:	dc000315 	stw	r16,12(sp)
 400aa80:	dfc00b15 	stw	ra,44(sp)
 400aa84:	dc800515 	stw	r18,20(sp)
 400aa88:	2021883a 	mov	r16,r4
 400aa8c:	2823883a 	mov	r17,r5
 400aa90:	24c00317 	ldw	r19,12(r4)
 400aa94:	25000417 	ldw	r20,16(r4)
 400aa98:	28c00017 	ldw	r3,0(r5)
 400aa9c:	b5a08004 	addi	r22,r22,-32256
 400aaa0:	054001c4 	movi	r21,7
 400aaa4:	05c00204 	movi	r23,8
 400aaa8:	00001606 	br	400ab04 <_Unwind_ForcedUnwind_Phase2+0xa8>
 400aaac:	81800017 	ldw	r6,0(r16)
 400aab0:	81c00117 	ldw	r7,4(r16)
 400aab4:	1c800617 	ldw	r18,24(r3)
 400aab8:	dd000215 	stw	r20,8(sp)
 400aabc:	dc400115 	stw	r17,4(sp)
 400aac0:	dc000015 	stw	r16,0(sp)
 400aac4:	983ee83a 	callr	r19
 400aac8:	01400284 	movi	r5,10
 400aacc:	01000044 	movi	r4,1
 400aad0:	1000241e 	bne	r2,zero,400ab64 <_Unwind_ForcedUnwind_Phase2+0x108>
 400aad4:	90000726 	beq	r18,zero,400aaf4 <_Unwind_ForcedUnwind_Phase2+0x98>
 400aad8:	81800017 	ldw	r6,0(r16)
 400aadc:	81c00117 	ldw	r7,4(r16)
 400aae0:	dc400115 	stw	r17,4(sp)
 400aae4:	dc000015 	stw	r16,0(sp)
 400aae8:	903ee83a 	callr	r18
 400aaec:	15401f26 	beq	r2,r21,400ab6c <_Unwind_ForcedUnwind_Phase2+0x110>
 400aaf0:	15c01c1e 	bne	r2,r23,400ab64 <_Unwind_ForcedUnwind_Phase2+0x108>
 400aaf4:	88800017 	ldw	r2,0(r17)
 400aaf8:	10c00017 	ldw	r3,0(r2)
 400aafc:	b0c00015 	stw	r3,0(r22)
 400ab00:	88c00015 	stw	r3,0(r17)
 400ab04:	01400284 	movi	r5,10
 400ab08:	01000044 	movi	r4,1
 400ab0c:	183fe71e 	bne	r3,zero,400aaac <__alt_data_end+0xfc00aaac>
 400ab10:	81800017 	ldw	r6,0(r16)
 400ab14:	81c00117 	ldw	r7,4(r16)
 400ab18:	01400684 	movi	r5,26
 400ab1c:	dd000215 	stw	r20,8(sp)
 400ab20:	dc400115 	stw	r17,4(sp)
 400ab24:	dc000015 	stw	r16,0(sp)
 400ab28:	01000044 	movi	r4,1
 400ab2c:	983ee83a 	callr	r19
 400ab30:	10000c1e 	bne	r2,zero,400ab64 <_Unwind_ForcedUnwind_Phase2+0x108>
 400ab34:	00800144 	movi	r2,5
 400ab38:	dfc00b17 	ldw	ra,44(sp)
 400ab3c:	ddc00a17 	ldw	r23,40(sp)
 400ab40:	dd800917 	ldw	r22,36(sp)
 400ab44:	dd400817 	ldw	r21,32(sp)
 400ab48:	dd000717 	ldw	r20,28(sp)
 400ab4c:	dcc00617 	ldw	r19,24(sp)
 400ab50:	dc800517 	ldw	r18,20(sp)
 400ab54:	dc400417 	ldw	r17,16(sp)
 400ab58:	dc000317 	ldw	r16,12(sp)
 400ab5c:	dec00c04 	addi	sp,sp,48
 400ab60:	f800283a 	ret
 400ab64:	00800084 	movi	r2,2
 400ab68:	003ff306 	br	400ab38 <__alt_data_end+0xfc00ab38>
 400ab6c:	a805883a 	mov	r2,r21
 400ab70:	003ff106 	br	400ab38 <__alt_data_end+0xfc00ab38>

0400ab74 <_Unwind_RaiseException_Phase2>:
 400ab74:	28c00017 	ldw	r3,0(r5)
 400ab78:	defff804 	addi	sp,sp,-32
 400ab7c:	dcc00515 	stw	r19,20(sp)
 400ab80:	dc800415 	stw	r18,16(sp)
 400ab84:	dc400315 	stw	r17,12(sp)
 400ab88:	dc000215 	stw	r16,8(sp)
 400ab8c:	dfc00715 	stw	ra,28(sp)
 400ab90:	dd000615 	stw	r20,24(sp)
 400ab94:	2823883a 	mov	r17,r5
 400ab98:	2021883a 	mov	r16,r4
 400ab9c:	048001c4 	movi	r18,7
 400aba0:	04c00204 	movi	r19,8
 400aba4:	18001326 	beq	r3,zero,400abf4 <_Unwind_RaiseException_Phase2+0x80>
 400aba8:	81000417 	ldw	r4,16(r16)
 400abac:	1a000617 	ldw	r8,24(r3)
 400abb0:	19001926 	beq	r3,r4,400ac18 <_Unwind_RaiseException_Phase2+0xa4>
 400abb4:	40000c26 	beq	r8,zero,400abe8 <_Unwind_RaiseException_Phase2+0x74>
 400abb8:	01400084 	movi	r5,2
 400abbc:	0029883a 	mov	r20,zero
 400abc0:	81800017 	ldw	r6,0(r16)
 400abc4:	81c00117 	ldw	r7,4(r16)
 400abc8:	01000044 	movi	r4,1
 400abcc:	dc400115 	stw	r17,4(sp)
 400abd0:	dc000015 	stw	r16,0(sp)
 400abd4:	403ee83a 	callr	r8
 400abd8:	14801326 	beq	r2,r18,400ac28 <_Unwind_RaiseException_Phase2+0xb4>
 400abdc:	14c0051e 	bne	r2,r19,400abf4 <_Unwind_RaiseException_Phase2+0x80>
 400abe0:	a000131e 	bne	r20,zero,400ac30 <_Unwind_RaiseException_Phase2+0xbc>
 400abe4:	88c00017 	ldw	r3,0(r17)
 400abe8:	18c00017 	ldw	r3,0(r3)
 400abec:	88c00015 	stw	r3,0(r17)
 400abf0:	183fed1e 	bne	r3,zero,400aba8 <__alt_data_end+0xfc00aba8>
 400abf4:	00800084 	movi	r2,2
 400abf8:	dfc00717 	ldw	ra,28(sp)
 400abfc:	dd000617 	ldw	r20,24(sp)
 400ac00:	dcc00517 	ldw	r19,20(sp)
 400ac04:	dc800417 	ldw	r18,16(sp)
 400ac08:	dc400317 	ldw	r17,12(sp)
 400ac0c:	dc000217 	ldw	r16,8(sp)
 400ac10:	dec00804 	addi	sp,sp,32
 400ac14:	f800283a 	ret
 400ac18:	40000526 	beq	r8,zero,400ac30 <_Unwind_RaiseException_Phase2+0xbc>
 400ac1c:	01400184 	movi	r5,6
 400ac20:	05000104 	movi	r20,4
 400ac24:	003fe606 	br	400abc0 <__alt_data_end+0xfc00abc0>
 400ac28:	9005883a 	mov	r2,r18
 400ac2c:	003ff206 	br	400abf8 <__alt_data_end+0xfc00abf8>
 400ac30:	400af7c0 	call	400af7c <abort>

0400ac34 <uw_install_context.isra.1>:
 400ac34:	20c00017 	ldw	r3,0(r4)
 400ac38:	deffff04 	addi	sp,sp,-4
 400ac3c:	014100f4 	movhi	r5,1027
 400ac40:	19000917 	ldw	r4,36(r3)
 400ac44:	df000015 	stw	fp,0(sp)
 400ac48:	18800804 	addi	r2,r3,32
 400ac4c:	d839883a 	mov	fp,sp
 400ac50:	29608004 	addi	r5,r5,-32256
 400ac54:	28c00015 	stw	r3,0(r5)
 400ac58:	17000017 	ldw	fp,0(r2)
 400ac5c:	1ec00a17 	ldw	sp,40(r3)
 400ac60:	2000683a 	jmp	r4

0400ac64 <_Unwind_SjLj_Register>:
 400ac64:	008100f4 	movhi	r2,1027
 400ac68:	10a08004 	addi	r2,r2,-32256
 400ac6c:	10c00017 	ldw	r3,0(r2)
 400ac70:	11000015 	stw	r4,0(r2)
 400ac74:	20c00015 	stw	r3,0(r4)
 400ac78:	f800283a 	ret

0400ac7c <_Unwind_SjLj_Unregister>:
 400ac7c:	20c00017 	ldw	r3,0(r4)
 400ac80:	008100f4 	movhi	r2,1027
 400ac84:	10a08004 	addi	r2,r2,-32256
 400ac88:	10c00015 	stw	r3,0(r2)
 400ac8c:	f800283a 	ret

0400ac90 <_Unwind_GetGR>:
 400ac90:	20800017 	ldw	r2,0(r4)
 400ac94:	29400084 	addi	r5,r5,2
 400ac98:	294b883a 	add	r5,r5,r5
 400ac9c:	294b883a 	add	r5,r5,r5
 400aca0:	114b883a 	add	r5,r2,r5
 400aca4:	28800017 	ldw	r2,0(r5)
 400aca8:	f800283a 	ret

0400acac <_Unwind_GetCFA>:
 400acac:	20800017 	ldw	r2,0(r4)
 400acb0:	10000226 	beq	r2,zero,400acbc <_Unwind_GetCFA+0x10>
 400acb4:	10800a17 	ldw	r2,40(r2)
 400acb8:	f800283a 	ret
 400acbc:	0005883a 	mov	r2,zero
 400acc0:	f800283a 	ret

0400acc4 <_Unwind_SetGR>:
 400acc4:	20800017 	ldw	r2,0(r4)
 400acc8:	29400084 	addi	r5,r5,2
 400accc:	294b883a 	add	r5,r5,r5
 400acd0:	294b883a 	add	r5,r5,r5
 400acd4:	114b883a 	add	r5,r2,r5
 400acd8:	29800015 	stw	r6,0(r5)
 400acdc:	f800283a 	ret

0400ace0 <_Unwind_GetIP>:
 400ace0:	20800017 	ldw	r2,0(r4)
 400ace4:	10800117 	ldw	r2,4(r2)
 400ace8:	10800044 	addi	r2,r2,1
 400acec:	f800283a 	ret

0400acf0 <_Unwind_GetIPInfo>:
 400acf0:	20800017 	ldw	r2,0(r4)
 400acf4:	28000015 	stw	zero,0(r5)
 400acf8:	10000326 	beq	r2,zero,400ad08 <_Unwind_GetIPInfo+0x18>
 400acfc:	10800117 	ldw	r2,4(r2)
 400ad00:	10800044 	addi	r2,r2,1
 400ad04:	f800283a 	ret
 400ad08:	0005883a 	mov	r2,zero
 400ad0c:	f800283a 	ret

0400ad10 <_Unwind_SetIP>:
 400ad10:	20800017 	ldw	r2,0(r4)
 400ad14:	297fffc4 	addi	r5,r5,-1
 400ad18:	11400115 	stw	r5,4(r2)
 400ad1c:	f800283a 	ret

0400ad20 <_Unwind_GetLanguageSpecificData>:
 400ad20:	20800017 	ldw	r2,0(r4)
 400ad24:	10800717 	ldw	r2,28(r2)
 400ad28:	f800283a 	ret

0400ad2c <_Unwind_GetRegionStart>:
 400ad2c:	0005883a 	mov	r2,zero
 400ad30:	f800283a 	ret

0400ad34 <_Unwind_FindEnclosingFunction>:
 400ad34:	0005883a 	mov	r2,zero
 400ad38:	f800283a 	ret

0400ad3c <_Unwind_GetDataRelBase>:
 400ad3c:	0005883a 	mov	r2,zero
 400ad40:	f800283a 	ret

0400ad44 <_Unwind_GetTextRelBase>:
 400ad44:	0005883a 	mov	r2,zero
 400ad48:	f800283a 	ret

0400ad4c <_Unwind_SjLj_RaiseException>:
 400ad4c:	008100f4 	movhi	r2,1027
 400ad50:	defff804 	addi	sp,sp,-32
 400ad54:	10a08004 	addi	r2,r2,-32256
 400ad58:	dc800515 	stw	r18,20(sp)
 400ad5c:	14800017 	ldw	r18,0(r2)
 400ad60:	dfc00715 	stw	ra,28(sp)
 400ad64:	dcc00615 	stw	r19,24(sp)
 400ad68:	dc400415 	stw	r17,16(sp)
 400ad6c:	dc000315 	stw	r16,12(sp)
 400ad70:	dc800215 	stw	r18,8(sp)
 400ad74:	90001426 	beq	r18,zero,400adc8 <_Unwind_SjLj_RaiseException+0x7c>
 400ad78:	2021883a 	mov	r16,r4
 400ad7c:	9005883a 	mov	r2,r18
 400ad80:	04400184 	movi	r17,6
 400ad84:	04c00204 	movi	r19,8
 400ad88:	10800617 	ldw	r2,24(r2)
 400ad8c:	10000a26 	beq	r2,zero,400adb8 <_Unwind_SjLj_RaiseException+0x6c>
 400ad90:	81800017 	ldw	r6,0(r16)
 400ad94:	81c00117 	ldw	r7,4(r16)
 400ad98:	01400044 	movi	r5,1
 400ad9c:	d8c00204 	addi	r3,sp,8
 400ada0:	d8c00115 	stw	r3,4(sp)
 400ada4:	dc000015 	stw	r16,0(sp)
 400ada8:	2809883a 	mov	r4,r5
 400adac:	103ee83a 	callr	r2
 400adb0:	14400d26 	beq	r2,r17,400ade8 <_Unwind_SjLj_RaiseException+0x9c>
 400adb4:	14c0171e 	bne	r2,r19,400ae14 <_Unwind_SjLj_RaiseException+0xc8>
 400adb8:	d8800217 	ldw	r2,8(sp)
 400adbc:	10800017 	ldw	r2,0(r2)
 400adc0:	d8800215 	stw	r2,8(sp)
 400adc4:	103ff01e 	bne	r2,zero,400ad88 <__alt_data_end+0xfc00ad88>
 400adc8:	00800144 	movi	r2,5
 400adcc:	dfc00717 	ldw	ra,28(sp)
 400add0:	dcc00617 	ldw	r19,24(sp)
 400add4:	dc800517 	ldw	r18,20(sp)
 400add8:	dc400417 	ldw	r17,16(sp)
 400addc:	dc000317 	ldw	r16,12(sp)
 400ade0:	dec00804 	addi	sp,sp,32
 400ade4:	f800283a 	ret
 400ade8:	d8800217 	ldw	r2,8(sp)
 400adec:	80000315 	stw	zero,12(r16)
 400adf0:	d9400204 	addi	r5,sp,8
 400adf4:	80800415 	stw	r2,16(r16)
 400adf8:	8009883a 	mov	r4,r16
 400adfc:	dc800215 	stw	r18,8(sp)
 400ae00:	400ab740 	call	400ab74 <_Unwind_RaiseException_Phase2>
 400ae04:	00c001c4 	movi	r3,7
 400ae08:	10fff01e 	bne	r2,r3,400adcc <__alt_data_end+0xfc00adcc>
 400ae0c:	d9000204 	addi	r4,sp,8
 400ae10:	400ac340 	call	400ac34 <uw_install_context.isra.1>
 400ae14:	008000c4 	movi	r2,3
 400ae18:	003fec06 	br	400adcc <__alt_data_end+0xfc00adcc>

0400ae1c <_Unwind_SjLj_ForcedUnwind>:
 400ae1c:	00c100f4 	movhi	r3,1027
 400ae20:	18e08004 	addi	r3,r3,-32256
 400ae24:	defffe04 	addi	sp,sp,-8
 400ae28:	18c00017 	ldw	r3,0(r3)
 400ae2c:	dfc00115 	stw	ra,4(sp)
 400ae30:	21400315 	stw	r5,12(r4)
 400ae34:	21800415 	stw	r6,16(r4)
 400ae38:	d80b883a 	mov	r5,sp
 400ae3c:	d8c00015 	stw	r3,0(sp)
 400ae40:	400aa5c0 	call	400aa5c <_Unwind_ForcedUnwind_Phase2>
 400ae44:	00c001c4 	movi	r3,7
 400ae48:	10c00326 	beq	r2,r3,400ae58 <_Unwind_SjLj_ForcedUnwind+0x3c>
 400ae4c:	dfc00117 	ldw	ra,4(sp)
 400ae50:	dec00204 	addi	sp,sp,8
 400ae54:	f800283a 	ret
 400ae58:	d809883a 	mov	r4,sp
 400ae5c:	400ac340 	call	400ac34 <uw_install_context.isra.1>

0400ae60 <_Unwind_SjLj_Resume>:
 400ae60:	00c100f4 	movhi	r3,1027
 400ae64:	18e08004 	addi	r3,r3,-32256
 400ae68:	18c00017 	ldw	r3,0(r3)
 400ae6c:	20800317 	ldw	r2,12(r4)
 400ae70:	defffe04 	addi	sp,sp,-8
 400ae74:	dfc00115 	stw	ra,4(sp)
 400ae78:	d8c00015 	stw	r3,0(sp)
 400ae7c:	d80b883a 	mov	r5,sp
 400ae80:	1000041e 	bne	r2,zero,400ae94 <_Unwind_SjLj_Resume+0x34>
 400ae84:	400ab740 	call	400ab74 <_Unwind_RaiseException_Phase2>
 400ae88:	00c001c4 	movi	r3,7
 400ae8c:	10c00326 	beq	r2,r3,400ae9c <_Unwind_SjLj_Resume+0x3c>
 400ae90:	400af7c0 	call	400af7c <abort>
 400ae94:	400aa5c0 	call	400aa5c <_Unwind_ForcedUnwind_Phase2>
 400ae98:	003ffb06 	br	400ae88 <__alt_data_end+0xfc00ae88>
 400ae9c:	d809883a 	mov	r4,sp
 400aea0:	400ac340 	call	400ac34 <uw_install_context.isra.1>

0400aea4 <_Unwind_SjLj_Resume_or_Rethrow>:
 400aea4:	20800317 	ldw	r2,12(r4)
 400aea8:	defffe04 	addi	sp,sp,-8
 400aeac:	dfc00115 	stw	ra,4(sp)
 400aeb0:	1000041e 	bne	r2,zero,400aec4 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
 400aeb4:	400ad4c0 	call	400ad4c <_Unwind_SjLj_RaiseException>
 400aeb8:	dfc00117 	ldw	ra,4(sp)
 400aebc:	dec00204 	addi	sp,sp,8
 400aec0:	f800283a 	ret
 400aec4:	008100f4 	movhi	r2,1027
 400aec8:	10a08004 	addi	r2,r2,-32256
 400aecc:	10800017 	ldw	r2,0(r2)
 400aed0:	d80b883a 	mov	r5,sp
 400aed4:	d8800015 	stw	r2,0(sp)
 400aed8:	400aa5c0 	call	400aa5c <_Unwind_ForcedUnwind_Phase2>
 400aedc:	00c001c4 	movi	r3,7
 400aee0:	10c00126 	beq	r2,r3,400aee8 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
 400aee4:	400af7c0 	call	400af7c <abort>
 400aee8:	d809883a 	mov	r4,sp
 400aeec:	400ac340 	call	400ac34 <uw_install_context.isra.1>

0400aef0 <_Unwind_DeleteException>:
 400aef0:	20800217 	ldw	r2,8(r4)
 400aef4:	10000326 	beq	r2,zero,400af04 <_Unwind_DeleteException+0x14>
 400aef8:	200b883a 	mov	r5,r4
 400aefc:	01000044 	movi	r4,1
 400af00:	1000683a 	jmp	r2
 400af04:	f800283a 	ret

0400af08 <_Unwind_Backtrace>:
 400af08:	008100f4 	movhi	r2,1027
 400af0c:	10a08004 	addi	r2,r2,-32256
 400af10:	10800017 	ldw	r2,0(r2)
 400af14:	defffc04 	addi	sp,sp,-16
 400af18:	dc400215 	stw	r17,8(sp)
 400af1c:	dc000115 	stw	r16,4(sp)
 400af20:	dfc00315 	stw	ra,12(sp)
 400af24:	2023883a 	mov	r17,r4
 400af28:	2821883a 	mov	r16,r5
 400af2c:	d8800015 	stw	r2,0(sp)
 400af30:	00000506 	br	400af48 <_Unwind_Backtrace+0x40>
 400af34:	883ee83a 	callr	r17
 400af38:	10000e1e 	bne	r2,zero,400af74 <_Unwind_Backtrace+0x6c>
 400af3c:	d8800017 	ldw	r2,0(sp)
 400af40:	10800017 	ldw	r2,0(r2)
 400af44:	d8800015 	stw	r2,0(sp)
 400af48:	800b883a 	mov	r5,r16
 400af4c:	d809883a 	mov	r4,sp
 400af50:	103ff81e 	bne	r2,zero,400af34 <__alt_data_end+0xfc00af34>
 400af54:	883ee83a 	callr	r17
 400af58:	1000061e 	bne	r2,zero,400af74 <_Unwind_Backtrace+0x6c>
 400af5c:	00800144 	movi	r2,5
 400af60:	dfc00317 	ldw	ra,12(sp)
 400af64:	dc400217 	ldw	r17,8(sp)
 400af68:	dc000117 	ldw	r16,4(sp)
 400af6c:	dec00404 	addi	sp,sp,16
 400af70:	f800283a 	ret
 400af74:	008000c4 	movi	r2,3
 400af78:	003ff906 	br	400af60 <__alt_data_end+0xfc00af60>

0400af7c <abort>:
 400af7c:	deffff04 	addi	sp,sp,-4
 400af80:	01000184 	movi	r4,6
 400af84:	dfc00015 	stw	ra,0(sp)
 400af88:	400be8c0 	call	400be8c <raise>
 400af8c:	01000044 	movi	r4,1
 400af90:	40182c80 	call	40182c8 <_exit>

0400af94 <clock>:
 400af94:	008100b4 	movhi	r2,1026
 400af98:	1093f304 	addi	r2,r2,20428
 400af9c:	11000017 	ldw	r4,0(r2)
 400afa0:	defffb04 	addi	sp,sp,-20
 400afa4:	d80b883a 	mov	r5,sp
 400afa8:	dfc00415 	stw	ra,16(sp)
 400afac:	400c0b00 	call	400c0b0 <_times_r>
 400afb0:	00ffffc4 	movi	r3,-1
 400afb4:	10c00726 	beq	r2,r3,400afd4 <clock+0x40>
 400afb8:	d8c00017 	ldw	r3,0(sp)
 400afbc:	d8800117 	ldw	r2,4(sp)
 400afc0:	1885883a 	add	r2,r3,r2
 400afc4:	d8c00217 	ldw	r3,8(sp)
 400afc8:	10c7883a 	add	r3,r2,r3
 400afcc:	d8800317 	ldw	r2,12(sp)
 400afd0:	1885883a 	add	r2,r3,r2
 400afd4:	dfc00417 	ldw	ra,16(sp)
 400afd8:	dec00504 	addi	sp,sp,20
 400afdc:	f800283a 	ret

0400afe0 <malloc>:
 400afe0:	008100b4 	movhi	r2,1026
 400afe4:	1093f304 	addi	r2,r2,20428
 400afe8:	200b883a 	mov	r5,r4
 400afec:	11000017 	ldw	r4,0(r2)
 400aff0:	400b0081 	jmpi	400b008 <_malloc_r>

0400aff4 <free>:
 400aff4:	008100b4 	movhi	r2,1026
 400aff8:	1093f304 	addi	r2,r2,20428
 400affc:	200b883a 	mov	r5,r4
 400b000:	11000017 	ldw	r4,0(r2)
 400b004:	40105ec1 	jmpi	40105ec <_free_r>

0400b008 <_malloc_r>:
 400b008:	defff504 	addi	sp,sp,-44
 400b00c:	dc800315 	stw	r18,12(sp)
 400b010:	dfc00a15 	stw	ra,40(sp)
 400b014:	df000915 	stw	fp,36(sp)
 400b018:	ddc00815 	stw	r23,32(sp)
 400b01c:	dd800715 	stw	r22,28(sp)
 400b020:	dd400615 	stw	r21,24(sp)
 400b024:	dd000515 	stw	r20,20(sp)
 400b028:	dcc00415 	stw	r19,16(sp)
 400b02c:	dc400215 	stw	r17,8(sp)
 400b030:	dc000115 	stw	r16,4(sp)
 400b034:	288002c4 	addi	r2,r5,11
 400b038:	00c00584 	movi	r3,22
 400b03c:	2025883a 	mov	r18,r4
 400b040:	18807f2e 	bgeu	r3,r2,400b240 <_malloc_r+0x238>
 400b044:	047ffe04 	movi	r17,-8
 400b048:	1462703a 	and	r17,r2,r17
 400b04c:	8800a316 	blt	r17,zero,400b2dc <_malloc_r+0x2d4>
 400b050:	8940a236 	bltu	r17,r5,400b2dc <_malloc_r+0x2d4>
 400b054:	40187800 	call	4018780 <__malloc_lock>
 400b058:	00807dc4 	movi	r2,503
 400b05c:	1441e92e 	bgeu	r2,r17,400b804 <_malloc_r+0x7fc>
 400b060:	8804d27a 	srli	r2,r17,9
 400b064:	1000a126 	beq	r2,zero,400b2ec <_malloc_r+0x2e4>
 400b068:	00c00104 	movi	r3,4
 400b06c:	18811e36 	bltu	r3,r2,400b4e8 <_malloc_r+0x4e0>
 400b070:	8804d1ba 	srli	r2,r17,6
 400b074:	12000e44 	addi	r8,r2,57
 400b078:	11c00e04 	addi	r7,r2,56
 400b07c:	4209883a 	add	r4,r8,r8
 400b080:	04c100b4 	movhi	r19,1026
 400b084:	2109883a 	add	r4,r4,r4
 400b088:	9cc89804 	addi	r19,r19,8800
 400b08c:	2109883a 	add	r4,r4,r4
 400b090:	9909883a 	add	r4,r19,r4
 400b094:	24000117 	ldw	r16,4(r4)
 400b098:	213ffe04 	addi	r4,r4,-8
 400b09c:	24009726 	beq	r4,r16,400b2fc <_malloc_r+0x2f4>
 400b0a0:	80800117 	ldw	r2,4(r16)
 400b0a4:	01bfff04 	movi	r6,-4
 400b0a8:	014003c4 	movi	r5,15
 400b0ac:	1184703a 	and	r2,r2,r6
 400b0b0:	1447c83a 	sub	r3,r2,r17
 400b0b4:	28c00716 	blt	r5,r3,400b0d4 <_malloc_r+0xcc>
 400b0b8:	1800920e 	bge	r3,zero,400b304 <_malloc_r+0x2fc>
 400b0bc:	84000317 	ldw	r16,12(r16)
 400b0c0:	24008e26 	beq	r4,r16,400b2fc <_malloc_r+0x2f4>
 400b0c4:	80800117 	ldw	r2,4(r16)
 400b0c8:	1184703a 	and	r2,r2,r6
 400b0cc:	1447c83a 	sub	r3,r2,r17
 400b0d0:	28fff90e 	bge	r5,r3,400b0b8 <__alt_data_end+0xfc00b0b8>
 400b0d4:	3809883a 	mov	r4,r7
 400b0d8:	018100b4 	movhi	r6,1026
 400b0dc:	9c000417 	ldw	r16,16(r19)
 400b0e0:	31889804 	addi	r6,r6,8800
 400b0e4:	32000204 	addi	r8,r6,8
 400b0e8:	82013426 	beq	r16,r8,400b5bc <_malloc_r+0x5b4>
 400b0ec:	80c00117 	ldw	r3,4(r16)
 400b0f0:	00bfff04 	movi	r2,-4
 400b0f4:	188e703a 	and	r7,r3,r2
 400b0f8:	3c45c83a 	sub	r2,r7,r17
 400b0fc:	00c003c4 	movi	r3,15
 400b100:	18811f16 	blt	r3,r2,400b580 <_malloc_r+0x578>
 400b104:	32000515 	stw	r8,20(r6)
 400b108:	32000415 	stw	r8,16(r6)
 400b10c:	10007f0e 	bge	r2,zero,400b30c <_malloc_r+0x304>
 400b110:	00807fc4 	movi	r2,511
 400b114:	11c0fd36 	bltu	r2,r7,400b50c <_malloc_r+0x504>
 400b118:	3806d0fa 	srli	r3,r7,3
 400b11c:	01c00044 	movi	r7,1
 400b120:	30800117 	ldw	r2,4(r6)
 400b124:	19400044 	addi	r5,r3,1
 400b128:	294b883a 	add	r5,r5,r5
 400b12c:	1807d0ba 	srai	r3,r3,2
 400b130:	294b883a 	add	r5,r5,r5
 400b134:	294b883a 	add	r5,r5,r5
 400b138:	298b883a 	add	r5,r5,r6
 400b13c:	38c6983a 	sll	r3,r7,r3
 400b140:	29c00017 	ldw	r7,0(r5)
 400b144:	2a7ffe04 	addi	r9,r5,-8
 400b148:	1886b03a 	or	r3,r3,r2
 400b14c:	82400315 	stw	r9,12(r16)
 400b150:	81c00215 	stw	r7,8(r16)
 400b154:	30c00115 	stw	r3,4(r6)
 400b158:	2c000015 	stw	r16,0(r5)
 400b15c:	3c000315 	stw	r16,12(r7)
 400b160:	2005d0ba 	srai	r2,r4,2
 400b164:	01400044 	movi	r5,1
 400b168:	288a983a 	sll	r5,r5,r2
 400b16c:	19406f36 	bltu	r3,r5,400b32c <_malloc_r+0x324>
 400b170:	28c4703a 	and	r2,r5,r3
 400b174:	10000a1e 	bne	r2,zero,400b1a0 <_malloc_r+0x198>
 400b178:	00bfff04 	movi	r2,-4
 400b17c:	294b883a 	add	r5,r5,r5
 400b180:	2088703a 	and	r4,r4,r2
 400b184:	28c4703a 	and	r2,r5,r3
 400b188:	21000104 	addi	r4,r4,4
 400b18c:	1000041e 	bne	r2,zero,400b1a0 <_malloc_r+0x198>
 400b190:	294b883a 	add	r5,r5,r5
 400b194:	28c4703a 	and	r2,r5,r3
 400b198:	21000104 	addi	r4,r4,4
 400b19c:	103ffc26 	beq	r2,zero,400b190 <__alt_data_end+0xfc00b190>
 400b1a0:	02bfff04 	movi	r10,-4
 400b1a4:	024003c4 	movi	r9,15
 400b1a8:	21800044 	addi	r6,r4,1
 400b1ac:	318d883a 	add	r6,r6,r6
 400b1b0:	318d883a 	add	r6,r6,r6
 400b1b4:	318d883a 	add	r6,r6,r6
 400b1b8:	998d883a 	add	r6,r19,r6
 400b1bc:	333ffe04 	addi	r12,r6,-8
 400b1c0:	2017883a 	mov	r11,r4
 400b1c4:	31800104 	addi	r6,r6,4
 400b1c8:	34000017 	ldw	r16,0(r6)
 400b1cc:	31fffd04 	addi	r7,r6,-12
 400b1d0:	81c0041e 	bne	r16,r7,400b1e4 <_malloc_r+0x1dc>
 400b1d4:	0000fb06 	br	400b5c4 <_malloc_r+0x5bc>
 400b1d8:	1801030e 	bge	r3,zero,400b5e8 <_malloc_r+0x5e0>
 400b1dc:	84000317 	ldw	r16,12(r16)
 400b1e0:	81c0f826 	beq	r16,r7,400b5c4 <_malloc_r+0x5bc>
 400b1e4:	80800117 	ldw	r2,4(r16)
 400b1e8:	1284703a 	and	r2,r2,r10
 400b1ec:	1447c83a 	sub	r3,r2,r17
 400b1f0:	48fff90e 	bge	r9,r3,400b1d8 <__alt_data_end+0xfc00b1d8>
 400b1f4:	80800317 	ldw	r2,12(r16)
 400b1f8:	81000217 	ldw	r4,8(r16)
 400b1fc:	89400054 	ori	r5,r17,1
 400b200:	81400115 	stw	r5,4(r16)
 400b204:	20800315 	stw	r2,12(r4)
 400b208:	11000215 	stw	r4,8(r2)
 400b20c:	8463883a 	add	r17,r16,r17
 400b210:	9c400515 	stw	r17,20(r19)
 400b214:	9c400415 	stw	r17,16(r19)
 400b218:	18800054 	ori	r2,r3,1
 400b21c:	88800115 	stw	r2,4(r17)
 400b220:	8a000315 	stw	r8,12(r17)
 400b224:	8a000215 	stw	r8,8(r17)
 400b228:	88e3883a 	add	r17,r17,r3
 400b22c:	88c00015 	stw	r3,0(r17)
 400b230:	9009883a 	mov	r4,r18
 400b234:	40187840 	call	4018784 <__malloc_unlock>
 400b238:	80800204 	addi	r2,r16,8
 400b23c:	00001b06 	br	400b2ac <_malloc_r+0x2a4>
 400b240:	04400404 	movi	r17,16
 400b244:	89402536 	bltu	r17,r5,400b2dc <_malloc_r+0x2d4>
 400b248:	40187800 	call	4018780 <__malloc_lock>
 400b24c:	00800184 	movi	r2,6
 400b250:	01000084 	movi	r4,2
 400b254:	04c100b4 	movhi	r19,1026
 400b258:	1085883a 	add	r2,r2,r2
 400b25c:	9cc89804 	addi	r19,r19,8800
 400b260:	1085883a 	add	r2,r2,r2
 400b264:	9885883a 	add	r2,r19,r2
 400b268:	14000117 	ldw	r16,4(r2)
 400b26c:	10fffe04 	addi	r3,r2,-8
 400b270:	80c0d926 	beq	r16,r3,400b5d8 <_malloc_r+0x5d0>
 400b274:	80c00117 	ldw	r3,4(r16)
 400b278:	81000317 	ldw	r4,12(r16)
 400b27c:	00bfff04 	movi	r2,-4
 400b280:	1884703a 	and	r2,r3,r2
 400b284:	81400217 	ldw	r5,8(r16)
 400b288:	8085883a 	add	r2,r16,r2
 400b28c:	10c00117 	ldw	r3,4(r2)
 400b290:	29000315 	stw	r4,12(r5)
 400b294:	21400215 	stw	r5,8(r4)
 400b298:	18c00054 	ori	r3,r3,1
 400b29c:	10c00115 	stw	r3,4(r2)
 400b2a0:	9009883a 	mov	r4,r18
 400b2a4:	40187840 	call	4018784 <__malloc_unlock>
 400b2a8:	80800204 	addi	r2,r16,8
 400b2ac:	dfc00a17 	ldw	ra,40(sp)
 400b2b0:	df000917 	ldw	fp,36(sp)
 400b2b4:	ddc00817 	ldw	r23,32(sp)
 400b2b8:	dd800717 	ldw	r22,28(sp)
 400b2bc:	dd400617 	ldw	r21,24(sp)
 400b2c0:	dd000517 	ldw	r20,20(sp)
 400b2c4:	dcc00417 	ldw	r19,16(sp)
 400b2c8:	dc800317 	ldw	r18,12(sp)
 400b2cc:	dc400217 	ldw	r17,8(sp)
 400b2d0:	dc000117 	ldw	r16,4(sp)
 400b2d4:	dec00b04 	addi	sp,sp,44
 400b2d8:	f800283a 	ret
 400b2dc:	00800304 	movi	r2,12
 400b2e0:	90800015 	stw	r2,0(r18)
 400b2e4:	0005883a 	mov	r2,zero
 400b2e8:	003ff006 	br	400b2ac <__alt_data_end+0xfc00b2ac>
 400b2ec:	01002004 	movi	r4,128
 400b2f0:	02001004 	movi	r8,64
 400b2f4:	01c00fc4 	movi	r7,63
 400b2f8:	003f6106 	br	400b080 <__alt_data_end+0xfc00b080>
 400b2fc:	4009883a 	mov	r4,r8
 400b300:	003f7506 	br	400b0d8 <__alt_data_end+0xfc00b0d8>
 400b304:	81000317 	ldw	r4,12(r16)
 400b308:	003fde06 	br	400b284 <__alt_data_end+0xfc00b284>
 400b30c:	81c5883a 	add	r2,r16,r7
 400b310:	11400117 	ldw	r5,4(r2)
 400b314:	9009883a 	mov	r4,r18
 400b318:	29400054 	ori	r5,r5,1
 400b31c:	11400115 	stw	r5,4(r2)
 400b320:	40187840 	call	4018784 <__malloc_unlock>
 400b324:	80800204 	addi	r2,r16,8
 400b328:	003fe006 	br	400b2ac <__alt_data_end+0xfc00b2ac>
 400b32c:	9c000217 	ldw	r16,8(r19)
 400b330:	00bfff04 	movi	r2,-4
 400b334:	85800117 	ldw	r22,4(r16)
 400b338:	b0ac703a 	and	r22,r22,r2
 400b33c:	b4400336 	bltu	r22,r17,400b34c <_malloc_r+0x344>
 400b340:	b445c83a 	sub	r2,r22,r17
 400b344:	00c003c4 	movi	r3,15
 400b348:	18805d16 	blt	r3,r2,400b4c0 <_malloc_r+0x4b8>
 400b34c:	05c100b4 	movhi	r23,1026
 400b350:	008100f4 	movhi	r2,1027
 400b354:	10a08304 	addi	r2,r2,-32244
 400b358:	bdd3f404 	addi	r23,r23,20432
 400b35c:	15400017 	ldw	r21,0(r2)
 400b360:	b8c00017 	ldw	r3,0(r23)
 400b364:	00bfffc4 	movi	r2,-1
 400b368:	858d883a 	add	r6,r16,r22
 400b36c:	8d6b883a 	add	r21,r17,r21
 400b370:	1880ea26 	beq	r3,r2,400b71c <_malloc_r+0x714>
 400b374:	ad4403c4 	addi	r21,r21,4111
 400b378:	00bc0004 	movi	r2,-4096
 400b37c:	a8aa703a 	and	r21,r21,r2
 400b380:	a80b883a 	mov	r5,r21
 400b384:	9009883a 	mov	r4,r18
 400b388:	d9800015 	stw	r6,0(sp)
 400b38c:	400bbe40 	call	400bbe4 <_sbrk_r>
 400b390:	1029883a 	mov	r20,r2
 400b394:	00bfffc4 	movi	r2,-1
 400b398:	d9800017 	ldw	r6,0(sp)
 400b39c:	a080e826 	beq	r20,r2,400b740 <_malloc_r+0x738>
 400b3a0:	a180a636 	bltu	r20,r6,400b63c <_malloc_r+0x634>
 400b3a4:	070100f4 	movhi	fp,1027
 400b3a8:	e720e704 	addi	fp,fp,-31844
 400b3ac:	e0800017 	ldw	r2,0(fp)
 400b3b0:	a887883a 	add	r3,r21,r2
 400b3b4:	e0c00015 	stw	r3,0(fp)
 400b3b8:	3500e626 	beq	r6,r20,400b754 <_malloc_r+0x74c>
 400b3bc:	b9000017 	ldw	r4,0(r23)
 400b3c0:	00bfffc4 	movi	r2,-1
 400b3c4:	2080ee26 	beq	r4,r2,400b780 <_malloc_r+0x778>
 400b3c8:	a185c83a 	sub	r2,r20,r6
 400b3cc:	10c5883a 	add	r2,r2,r3
 400b3d0:	e0800015 	stw	r2,0(fp)
 400b3d4:	a0c001cc 	andi	r3,r20,7
 400b3d8:	1800bc26 	beq	r3,zero,400b6cc <_malloc_r+0x6c4>
 400b3dc:	a0e9c83a 	sub	r20,r20,r3
 400b3e0:	00840204 	movi	r2,4104
 400b3e4:	a5000204 	addi	r20,r20,8
 400b3e8:	10c7c83a 	sub	r3,r2,r3
 400b3ec:	a545883a 	add	r2,r20,r21
 400b3f0:	1083ffcc 	andi	r2,r2,4095
 400b3f4:	18abc83a 	sub	r21,r3,r2
 400b3f8:	a80b883a 	mov	r5,r21
 400b3fc:	9009883a 	mov	r4,r18
 400b400:	400bbe40 	call	400bbe4 <_sbrk_r>
 400b404:	00ffffc4 	movi	r3,-1
 400b408:	10c0e126 	beq	r2,r3,400b790 <_malloc_r+0x788>
 400b40c:	1505c83a 	sub	r2,r2,r20
 400b410:	1545883a 	add	r2,r2,r21
 400b414:	10800054 	ori	r2,r2,1
 400b418:	e0c00017 	ldw	r3,0(fp)
 400b41c:	9d000215 	stw	r20,8(r19)
 400b420:	a0800115 	stw	r2,4(r20)
 400b424:	a8c7883a 	add	r3,r21,r3
 400b428:	e0c00015 	stw	r3,0(fp)
 400b42c:	84c00e26 	beq	r16,r19,400b468 <_malloc_r+0x460>
 400b430:	018003c4 	movi	r6,15
 400b434:	3580a72e 	bgeu	r6,r22,400b6d4 <_malloc_r+0x6cc>
 400b438:	81400117 	ldw	r5,4(r16)
 400b43c:	013ffe04 	movi	r4,-8
 400b440:	b0bffd04 	addi	r2,r22,-12
 400b444:	1104703a 	and	r2,r2,r4
 400b448:	2900004c 	andi	r4,r5,1
 400b44c:	2088b03a 	or	r4,r4,r2
 400b450:	81000115 	stw	r4,4(r16)
 400b454:	01400144 	movi	r5,5
 400b458:	8089883a 	add	r4,r16,r2
 400b45c:	21400115 	stw	r5,4(r4)
 400b460:	21400215 	stw	r5,8(r4)
 400b464:	3080cd36 	bltu	r6,r2,400b79c <_malloc_r+0x794>
 400b468:	008100f4 	movhi	r2,1027
 400b46c:	10a08204 	addi	r2,r2,-32248
 400b470:	11000017 	ldw	r4,0(r2)
 400b474:	20c0012e 	bgeu	r4,r3,400b47c <_malloc_r+0x474>
 400b478:	10c00015 	stw	r3,0(r2)
 400b47c:	008100f4 	movhi	r2,1027
 400b480:	10a08104 	addi	r2,r2,-32252
 400b484:	11000017 	ldw	r4,0(r2)
 400b488:	9c000217 	ldw	r16,8(r19)
 400b48c:	20c0012e 	bgeu	r4,r3,400b494 <_malloc_r+0x48c>
 400b490:	10c00015 	stw	r3,0(r2)
 400b494:	80c00117 	ldw	r3,4(r16)
 400b498:	00bfff04 	movi	r2,-4
 400b49c:	1886703a 	and	r3,r3,r2
 400b4a0:	1c45c83a 	sub	r2,r3,r17
 400b4a4:	1c400236 	bltu	r3,r17,400b4b0 <_malloc_r+0x4a8>
 400b4a8:	00c003c4 	movi	r3,15
 400b4ac:	18800416 	blt	r3,r2,400b4c0 <_malloc_r+0x4b8>
 400b4b0:	9009883a 	mov	r4,r18
 400b4b4:	40187840 	call	4018784 <__malloc_unlock>
 400b4b8:	0005883a 	mov	r2,zero
 400b4bc:	003f7b06 	br	400b2ac <__alt_data_end+0xfc00b2ac>
 400b4c0:	88c00054 	ori	r3,r17,1
 400b4c4:	80c00115 	stw	r3,4(r16)
 400b4c8:	8463883a 	add	r17,r16,r17
 400b4cc:	10800054 	ori	r2,r2,1
 400b4d0:	9c400215 	stw	r17,8(r19)
 400b4d4:	88800115 	stw	r2,4(r17)
 400b4d8:	9009883a 	mov	r4,r18
 400b4dc:	40187840 	call	4018784 <__malloc_unlock>
 400b4e0:	80800204 	addi	r2,r16,8
 400b4e4:	003f7106 	br	400b2ac <__alt_data_end+0xfc00b2ac>
 400b4e8:	00c00504 	movi	r3,20
 400b4ec:	18804a2e 	bgeu	r3,r2,400b618 <_malloc_r+0x610>
 400b4f0:	00c01504 	movi	r3,84
 400b4f4:	18806e36 	bltu	r3,r2,400b6b0 <_malloc_r+0x6a8>
 400b4f8:	8804d33a 	srli	r2,r17,12
 400b4fc:	12001bc4 	addi	r8,r2,111
 400b500:	11c01b84 	addi	r7,r2,110
 400b504:	4209883a 	add	r4,r8,r8
 400b508:	003edd06 	br	400b080 <__alt_data_end+0xfc00b080>
 400b50c:	3804d27a 	srli	r2,r7,9
 400b510:	00c00104 	movi	r3,4
 400b514:	1880442e 	bgeu	r3,r2,400b628 <_malloc_r+0x620>
 400b518:	00c00504 	movi	r3,20
 400b51c:	18808136 	bltu	r3,r2,400b724 <_malloc_r+0x71c>
 400b520:	11401704 	addi	r5,r2,92
 400b524:	10c016c4 	addi	r3,r2,91
 400b528:	294b883a 	add	r5,r5,r5
 400b52c:	294b883a 	add	r5,r5,r5
 400b530:	294b883a 	add	r5,r5,r5
 400b534:	994b883a 	add	r5,r19,r5
 400b538:	28800017 	ldw	r2,0(r5)
 400b53c:	018100b4 	movhi	r6,1026
 400b540:	297ffe04 	addi	r5,r5,-8
 400b544:	31889804 	addi	r6,r6,8800
 400b548:	28806526 	beq	r5,r2,400b6e0 <_malloc_r+0x6d8>
 400b54c:	01bfff04 	movi	r6,-4
 400b550:	10c00117 	ldw	r3,4(r2)
 400b554:	1986703a 	and	r3,r3,r6
 400b558:	38c0022e 	bgeu	r7,r3,400b564 <_malloc_r+0x55c>
 400b55c:	10800217 	ldw	r2,8(r2)
 400b560:	28bffb1e 	bne	r5,r2,400b550 <__alt_data_end+0xfc00b550>
 400b564:	11400317 	ldw	r5,12(r2)
 400b568:	98c00117 	ldw	r3,4(r19)
 400b56c:	81400315 	stw	r5,12(r16)
 400b570:	80800215 	stw	r2,8(r16)
 400b574:	2c000215 	stw	r16,8(r5)
 400b578:	14000315 	stw	r16,12(r2)
 400b57c:	003ef806 	br	400b160 <__alt_data_end+0xfc00b160>
 400b580:	88c00054 	ori	r3,r17,1
 400b584:	80c00115 	stw	r3,4(r16)
 400b588:	8463883a 	add	r17,r16,r17
 400b58c:	34400515 	stw	r17,20(r6)
 400b590:	34400415 	stw	r17,16(r6)
 400b594:	10c00054 	ori	r3,r2,1
 400b598:	8a000315 	stw	r8,12(r17)
 400b59c:	8a000215 	stw	r8,8(r17)
 400b5a0:	88c00115 	stw	r3,4(r17)
 400b5a4:	88a3883a 	add	r17,r17,r2
 400b5a8:	88800015 	stw	r2,0(r17)
 400b5ac:	9009883a 	mov	r4,r18
 400b5b0:	40187840 	call	4018784 <__malloc_unlock>
 400b5b4:	80800204 	addi	r2,r16,8
 400b5b8:	003f3c06 	br	400b2ac <__alt_data_end+0xfc00b2ac>
 400b5bc:	30c00117 	ldw	r3,4(r6)
 400b5c0:	003ee706 	br	400b160 <__alt_data_end+0xfc00b160>
 400b5c4:	5ac00044 	addi	r11,r11,1
 400b5c8:	588000cc 	andi	r2,r11,3
 400b5cc:	31800204 	addi	r6,r6,8
 400b5d0:	103efd1e 	bne	r2,zero,400b1c8 <__alt_data_end+0xfc00b1c8>
 400b5d4:	00002406 	br	400b668 <_malloc_r+0x660>
 400b5d8:	14000317 	ldw	r16,12(r2)
 400b5dc:	143f251e 	bne	r2,r16,400b274 <__alt_data_end+0xfc00b274>
 400b5e0:	21000084 	addi	r4,r4,2
 400b5e4:	003ebc06 	br	400b0d8 <__alt_data_end+0xfc00b0d8>
 400b5e8:	8085883a 	add	r2,r16,r2
 400b5ec:	10c00117 	ldw	r3,4(r2)
 400b5f0:	81000317 	ldw	r4,12(r16)
 400b5f4:	81400217 	ldw	r5,8(r16)
 400b5f8:	18c00054 	ori	r3,r3,1
 400b5fc:	10c00115 	stw	r3,4(r2)
 400b600:	29000315 	stw	r4,12(r5)
 400b604:	21400215 	stw	r5,8(r4)
 400b608:	9009883a 	mov	r4,r18
 400b60c:	40187840 	call	4018784 <__malloc_unlock>
 400b610:	80800204 	addi	r2,r16,8
 400b614:	003f2506 	br	400b2ac <__alt_data_end+0xfc00b2ac>
 400b618:	12001704 	addi	r8,r2,92
 400b61c:	11c016c4 	addi	r7,r2,91
 400b620:	4209883a 	add	r4,r8,r8
 400b624:	003e9606 	br	400b080 <__alt_data_end+0xfc00b080>
 400b628:	3804d1ba 	srli	r2,r7,6
 400b62c:	11400e44 	addi	r5,r2,57
 400b630:	10c00e04 	addi	r3,r2,56
 400b634:	294b883a 	add	r5,r5,r5
 400b638:	003fbc06 	br	400b52c <__alt_data_end+0xfc00b52c>
 400b63c:	84ff5926 	beq	r16,r19,400b3a4 <__alt_data_end+0xfc00b3a4>
 400b640:	008100b4 	movhi	r2,1026
 400b644:	10889804 	addi	r2,r2,8800
 400b648:	14000217 	ldw	r16,8(r2)
 400b64c:	00bfff04 	movi	r2,-4
 400b650:	80c00117 	ldw	r3,4(r16)
 400b654:	1886703a 	and	r3,r3,r2
 400b658:	003f9106 	br	400b4a0 <__alt_data_end+0xfc00b4a0>
 400b65c:	60800217 	ldw	r2,8(r12)
 400b660:	213fffc4 	addi	r4,r4,-1
 400b664:	1300651e 	bne	r2,r12,400b7fc <_malloc_r+0x7f4>
 400b668:	208000cc 	andi	r2,r4,3
 400b66c:	633ffe04 	addi	r12,r12,-8
 400b670:	103ffa1e 	bne	r2,zero,400b65c <__alt_data_end+0xfc00b65c>
 400b674:	98800117 	ldw	r2,4(r19)
 400b678:	0146303a 	nor	r3,zero,r5
 400b67c:	1884703a 	and	r2,r3,r2
 400b680:	98800115 	stw	r2,4(r19)
 400b684:	294b883a 	add	r5,r5,r5
 400b688:	117f2836 	bltu	r2,r5,400b32c <__alt_data_end+0xfc00b32c>
 400b68c:	283f2726 	beq	r5,zero,400b32c <__alt_data_end+0xfc00b32c>
 400b690:	2886703a 	and	r3,r5,r2
 400b694:	5809883a 	mov	r4,r11
 400b698:	183ec31e 	bne	r3,zero,400b1a8 <__alt_data_end+0xfc00b1a8>
 400b69c:	294b883a 	add	r5,r5,r5
 400b6a0:	2886703a 	and	r3,r5,r2
 400b6a4:	21000104 	addi	r4,r4,4
 400b6a8:	183ffc26 	beq	r3,zero,400b69c <__alt_data_end+0xfc00b69c>
 400b6ac:	003ebe06 	br	400b1a8 <__alt_data_end+0xfc00b1a8>
 400b6b0:	00c05504 	movi	r3,340
 400b6b4:	18801236 	bltu	r3,r2,400b700 <_malloc_r+0x6f8>
 400b6b8:	8804d3fa 	srli	r2,r17,15
 400b6bc:	12001e04 	addi	r8,r2,120
 400b6c0:	11c01dc4 	addi	r7,r2,119
 400b6c4:	4209883a 	add	r4,r8,r8
 400b6c8:	003e6d06 	br	400b080 <__alt_data_end+0xfc00b080>
 400b6cc:	00c40004 	movi	r3,4096
 400b6d0:	003f4606 	br	400b3ec <__alt_data_end+0xfc00b3ec>
 400b6d4:	00800044 	movi	r2,1
 400b6d8:	a0800115 	stw	r2,4(r20)
 400b6dc:	003f7406 	br	400b4b0 <__alt_data_end+0xfc00b4b0>
 400b6e0:	1805d0ba 	srai	r2,r3,2
 400b6e4:	01c00044 	movi	r7,1
 400b6e8:	30c00117 	ldw	r3,4(r6)
 400b6ec:	388e983a 	sll	r7,r7,r2
 400b6f0:	2805883a 	mov	r2,r5
 400b6f4:	38c6b03a 	or	r3,r7,r3
 400b6f8:	30c00115 	stw	r3,4(r6)
 400b6fc:	003f9b06 	br	400b56c <__alt_data_end+0xfc00b56c>
 400b700:	00c15504 	movi	r3,1364
 400b704:	18801a36 	bltu	r3,r2,400b770 <_malloc_r+0x768>
 400b708:	8804d4ba 	srli	r2,r17,18
 400b70c:	12001f44 	addi	r8,r2,125
 400b710:	11c01f04 	addi	r7,r2,124
 400b714:	4209883a 	add	r4,r8,r8
 400b718:	003e5906 	br	400b080 <__alt_data_end+0xfc00b080>
 400b71c:	ad400404 	addi	r21,r21,16
 400b720:	003f1706 	br	400b380 <__alt_data_end+0xfc00b380>
 400b724:	00c01504 	movi	r3,84
 400b728:	18802336 	bltu	r3,r2,400b7b8 <_malloc_r+0x7b0>
 400b72c:	3804d33a 	srli	r2,r7,12
 400b730:	11401bc4 	addi	r5,r2,111
 400b734:	10c01b84 	addi	r3,r2,110
 400b738:	294b883a 	add	r5,r5,r5
 400b73c:	003f7b06 	br	400b52c <__alt_data_end+0xfc00b52c>
 400b740:	9c000217 	ldw	r16,8(r19)
 400b744:	00bfff04 	movi	r2,-4
 400b748:	80c00117 	ldw	r3,4(r16)
 400b74c:	1886703a 	and	r3,r3,r2
 400b750:	003f5306 	br	400b4a0 <__alt_data_end+0xfc00b4a0>
 400b754:	3083ffcc 	andi	r2,r6,4095
 400b758:	103f181e 	bne	r2,zero,400b3bc <__alt_data_end+0xfc00b3bc>
 400b75c:	99000217 	ldw	r4,8(r19)
 400b760:	b545883a 	add	r2,r22,r21
 400b764:	10800054 	ori	r2,r2,1
 400b768:	20800115 	stw	r2,4(r4)
 400b76c:	003f3e06 	br	400b468 <__alt_data_end+0xfc00b468>
 400b770:	01003f84 	movi	r4,254
 400b774:	02001fc4 	movi	r8,127
 400b778:	01c01f84 	movi	r7,126
 400b77c:	003e4006 	br	400b080 <__alt_data_end+0xfc00b080>
 400b780:	008100b4 	movhi	r2,1026
 400b784:	1093f404 	addi	r2,r2,20432
 400b788:	15000015 	stw	r20,0(r2)
 400b78c:	003f1106 	br	400b3d4 <__alt_data_end+0xfc00b3d4>
 400b790:	00800044 	movi	r2,1
 400b794:	002b883a 	mov	r21,zero
 400b798:	003f1f06 	br	400b418 <__alt_data_end+0xfc00b418>
 400b79c:	81400204 	addi	r5,r16,8
 400b7a0:	9009883a 	mov	r4,r18
 400b7a4:	40105ec0 	call	40105ec <_free_r>
 400b7a8:	008100f4 	movhi	r2,1027
 400b7ac:	10a0e704 	addi	r2,r2,-31844
 400b7b0:	10c00017 	ldw	r3,0(r2)
 400b7b4:	003f2c06 	br	400b468 <__alt_data_end+0xfc00b468>
 400b7b8:	00c05504 	movi	r3,340
 400b7bc:	18800536 	bltu	r3,r2,400b7d4 <_malloc_r+0x7cc>
 400b7c0:	3804d3fa 	srli	r2,r7,15
 400b7c4:	11401e04 	addi	r5,r2,120
 400b7c8:	10c01dc4 	addi	r3,r2,119
 400b7cc:	294b883a 	add	r5,r5,r5
 400b7d0:	003f5606 	br	400b52c <__alt_data_end+0xfc00b52c>
 400b7d4:	00c15504 	movi	r3,1364
 400b7d8:	18800536 	bltu	r3,r2,400b7f0 <_malloc_r+0x7e8>
 400b7dc:	3804d4ba 	srli	r2,r7,18
 400b7e0:	11401f44 	addi	r5,r2,125
 400b7e4:	10c01f04 	addi	r3,r2,124
 400b7e8:	294b883a 	add	r5,r5,r5
 400b7ec:	003f4f06 	br	400b52c <__alt_data_end+0xfc00b52c>
 400b7f0:	01403f84 	movi	r5,254
 400b7f4:	00c01f84 	movi	r3,126
 400b7f8:	003f4c06 	br	400b52c <__alt_data_end+0xfc00b52c>
 400b7fc:	98800117 	ldw	r2,4(r19)
 400b800:	003fa006 	br	400b684 <__alt_data_end+0xfc00b684>
 400b804:	8808d0fa 	srli	r4,r17,3
 400b808:	20800044 	addi	r2,r4,1
 400b80c:	1085883a 	add	r2,r2,r2
 400b810:	003e9006 	br	400b254 <__alt_data_end+0xfc00b254>

0400b814 <memcpy>:
 400b814:	defffd04 	addi	sp,sp,-12
 400b818:	dfc00215 	stw	ra,8(sp)
 400b81c:	dc400115 	stw	r17,4(sp)
 400b820:	dc000015 	stw	r16,0(sp)
 400b824:	00c003c4 	movi	r3,15
 400b828:	2005883a 	mov	r2,r4
 400b82c:	1980452e 	bgeu	r3,r6,400b944 <memcpy+0x130>
 400b830:	2906b03a 	or	r3,r5,r4
 400b834:	18c000cc 	andi	r3,r3,3
 400b838:	1800441e 	bne	r3,zero,400b94c <memcpy+0x138>
 400b83c:	347ffc04 	addi	r17,r6,-16
 400b840:	8822d13a 	srli	r17,r17,4
 400b844:	28c00104 	addi	r3,r5,4
 400b848:	23400104 	addi	r13,r4,4
 400b84c:	8820913a 	slli	r16,r17,4
 400b850:	2b000204 	addi	r12,r5,8
 400b854:	22c00204 	addi	r11,r4,8
 400b858:	84000504 	addi	r16,r16,20
 400b85c:	2a800304 	addi	r10,r5,12
 400b860:	22400304 	addi	r9,r4,12
 400b864:	2c21883a 	add	r16,r5,r16
 400b868:	2811883a 	mov	r8,r5
 400b86c:	200f883a 	mov	r7,r4
 400b870:	41000017 	ldw	r4,0(r8)
 400b874:	1fc00017 	ldw	ra,0(r3)
 400b878:	63c00017 	ldw	r15,0(r12)
 400b87c:	39000015 	stw	r4,0(r7)
 400b880:	53800017 	ldw	r14,0(r10)
 400b884:	6fc00015 	stw	ra,0(r13)
 400b888:	5bc00015 	stw	r15,0(r11)
 400b88c:	4b800015 	stw	r14,0(r9)
 400b890:	18c00404 	addi	r3,r3,16
 400b894:	39c00404 	addi	r7,r7,16
 400b898:	42000404 	addi	r8,r8,16
 400b89c:	6b400404 	addi	r13,r13,16
 400b8a0:	63000404 	addi	r12,r12,16
 400b8a4:	5ac00404 	addi	r11,r11,16
 400b8a8:	52800404 	addi	r10,r10,16
 400b8ac:	4a400404 	addi	r9,r9,16
 400b8b0:	1c3fef1e 	bne	r3,r16,400b870 <__alt_data_end+0xfc00b870>
 400b8b4:	89c00044 	addi	r7,r17,1
 400b8b8:	380e913a 	slli	r7,r7,4
 400b8bc:	310003cc 	andi	r4,r6,15
 400b8c0:	02c000c4 	movi	r11,3
 400b8c4:	11c7883a 	add	r3,r2,r7
 400b8c8:	29cb883a 	add	r5,r5,r7
 400b8cc:	5900212e 	bgeu	r11,r4,400b954 <memcpy+0x140>
 400b8d0:	1813883a 	mov	r9,r3
 400b8d4:	2811883a 	mov	r8,r5
 400b8d8:	200f883a 	mov	r7,r4
 400b8dc:	42800017 	ldw	r10,0(r8)
 400b8e0:	4a400104 	addi	r9,r9,4
 400b8e4:	39ffff04 	addi	r7,r7,-4
 400b8e8:	4abfff15 	stw	r10,-4(r9)
 400b8ec:	42000104 	addi	r8,r8,4
 400b8f0:	59fffa36 	bltu	r11,r7,400b8dc <__alt_data_end+0xfc00b8dc>
 400b8f4:	213fff04 	addi	r4,r4,-4
 400b8f8:	2008d0ba 	srli	r4,r4,2
 400b8fc:	318000cc 	andi	r6,r6,3
 400b900:	21000044 	addi	r4,r4,1
 400b904:	2109883a 	add	r4,r4,r4
 400b908:	2109883a 	add	r4,r4,r4
 400b90c:	1907883a 	add	r3,r3,r4
 400b910:	290b883a 	add	r5,r5,r4
 400b914:	30000626 	beq	r6,zero,400b930 <memcpy+0x11c>
 400b918:	198d883a 	add	r6,r3,r6
 400b91c:	29c00003 	ldbu	r7,0(r5)
 400b920:	18c00044 	addi	r3,r3,1
 400b924:	29400044 	addi	r5,r5,1
 400b928:	19ffffc5 	stb	r7,-1(r3)
 400b92c:	19bffb1e 	bne	r3,r6,400b91c <__alt_data_end+0xfc00b91c>
 400b930:	dfc00217 	ldw	ra,8(sp)
 400b934:	dc400117 	ldw	r17,4(sp)
 400b938:	dc000017 	ldw	r16,0(sp)
 400b93c:	dec00304 	addi	sp,sp,12
 400b940:	f800283a 	ret
 400b944:	2007883a 	mov	r3,r4
 400b948:	003ff206 	br	400b914 <__alt_data_end+0xfc00b914>
 400b94c:	2007883a 	mov	r3,r4
 400b950:	003ff106 	br	400b918 <__alt_data_end+0xfc00b918>
 400b954:	200d883a 	mov	r6,r4
 400b958:	003fee06 	br	400b914 <__alt_data_end+0xfc00b914>

0400b95c <memset>:
 400b95c:	20c000cc 	andi	r3,r4,3
 400b960:	2005883a 	mov	r2,r4
 400b964:	18004426 	beq	r3,zero,400ba78 <memset+0x11c>
 400b968:	31ffffc4 	addi	r7,r6,-1
 400b96c:	30004026 	beq	r6,zero,400ba70 <memset+0x114>
 400b970:	2813883a 	mov	r9,r5
 400b974:	200d883a 	mov	r6,r4
 400b978:	2007883a 	mov	r3,r4
 400b97c:	00000406 	br	400b990 <memset+0x34>
 400b980:	3a3fffc4 	addi	r8,r7,-1
 400b984:	31800044 	addi	r6,r6,1
 400b988:	38003926 	beq	r7,zero,400ba70 <memset+0x114>
 400b98c:	400f883a 	mov	r7,r8
 400b990:	18c00044 	addi	r3,r3,1
 400b994:	32400005 	stb	r9,0(r6)
 400b998:	1a0000cc 	andi	r8,r3,3
 400b99c:	403ff81e 	bne	r8,zero,400b980 <__alt_data_end+0xfc00b980>
 400b9a0:	010000c4 	movi	r4,3
 400b9a4:	21c02d2e 	bgeu	r4,r7,400ba5c <memset+0x100>
 400b9a8:	29003fcc 	andi	r4,r5,255
 400b9ac:	200c923a 	slli	r6,r4,8
 400b9b0:	3108b03a 	or	r4,r6,r4
 400b9b4:	200c943a 	slli	r6,r4,16
 400b9b8:	218cb03a 	or	r6,r4,r6
 400b9bc:	010003c4 	movi	r4,15
 400b9c0:	21c0182e 	bgeu	r4,r7,400ba24 <memset+0xc8>
 400b9c4:	3b3ffc04 	addi	r12,r7,-16
 400b9c8:	6018d13a 	srli	r12,r12,4
 400b9cc:	1a000104 	addi	r8,r3,4
 400b9d0:	1ac00204 	addi	r11,r3,8
 400b9d4:	6008913a 	slli	r4,r12,4
 400b9d8:	1a800304 	addi	r10,r3,12
 400b9dc:	1813883a 	mov	r9,r3
 400b9e0:	21000504 	addi	r4,r4,20
 400b9e4:	1909883a 	add	r4,r3,r4
 400b9e8:	49800015 	stw	r6,0(r9)
 400b9ec:	41800015 	stw	r6,0(r8)
 400b9f0:	59800015 	stw	r6,0(r11)
 400b9f4:	51800015 	stw	r6,0(r10)
 400b9f8:	42000404 	addi	r8,r8,16
 400b9fc:	4a400404 	addi	r9,r9,16
 400ba00:	5ac00404 	addi	r11,r11,16
 400ba04:	52800404 	addi	r10,r10,16
 400ba08:	413ff71e 	bne	r8,r4,400b9e8 <__alt_data_end+0xfc00b9e8>
 400ba0c:	63000044 	addi	r12,r12,1
 400ba10:	6018913a 	slli	r12,r12,4
 400ba14:	39c003cc 	andi	r7,r7,15
 400ba18:	010000c4 	movi	r4,3
 400ba1c:	1b07883a 	add	r3,r3,r12
 400ba20:	21c00e2e 	bgeu	r4,r7,400ba5c <memset+0x100>
 400ba24:	1813883a 	mov	r9,r3
 400ba28:	3811883a 	mov	r8,r7
 400ba2c:	010000c4 	movi	r4,3
 400ba30:	49800015 	stw	r6,0(r9)
 400ba34:	423fff04 	addi	r8,r8,-4
 400ba38:	4a400104 	addi	r9,r9,4
 400ba3c:	223ffc36 	bltu	r4,r8,400ba30 <__alt_data_end+0xfc00ba30>
 400ba40:	393fff04 	addi	r4,r7,-4
 400ba44:	2008d0ba 	srli	r4,r4,2
 400ba48:	39c000cc 	andi	r7,r7,3
 400ba4c:	21000044 	addi	r4,r4,1
 400ba50:	2109883a 	add	r4,r4,r4
 400ba54:	2109883a 	add	r4,r4,r4
 400ba58:	1907883a 	add	r3,r3,r4
 400ba5c:	38000526 	beq	r7,zero,400ba74 <memset+0x118>
 400ba60:	19cf883a 	add	r7,r3,r7
 400ba64:	19400005 	stb	r5,0(r3)
 400ba68:	18c00044 	addi	r3,r3,1
 400ba6c:	38fffd1e 	bne	r7,r3,400ba64 <__alt_data_end+0xfc00ba64>
 400ba70:	f800283a 	ret
 400ba74:	f800283a 	ret
 400ba78:	2007883a 	mov	r3,r4
 400ba7c:	300f883a 	mov	r7,r6
 400ba80:	003fc706 	br	400b9a0 <__alt_data_end+0xfc00b9a0>

0400ba84 <_printf_r>:
 400ba84:	defffd04 	addi	sp,sp,-12
 400ba88:	2805883a 	mov	r2,r5
 400ba8c:	dfc00015 	stw	ra,0(sp)
 400ba90:	d9800115 	stw	r6,4(sp)
 400ba94:	d9c00215 	stw	r7,8(sp)
 400ba98:	21400217 	ldw	r5,8(r4)
 400ba9c:	d9c00104 	addi	r7,sp,4
 400baa0:	100d883a 	mov	r6,r2
 400baa4:	400c0b80 	call	400c0b8 <___vfprintf_internal_r>
 400baa8:	dfc00017 	ldw	ra,0(sp)
 400baac:	dec00304 	addi	sp,sp,12
 400bab0:	f800283a 	ret

0400bab4 <printf>:
 400bab4:	defffc04 	addi	sp,sp,-16
 400bab8:	dfc00015 	stw	ra,0(sp)
 400babc:	d9400115 	stw	r5,4(sp)
 400bac0:	d9800215 	stw	r6,8(sp)
 400bac4:	d9c00315 	stw	r7,12(sp)
 400bac8:	008100b4 	movhi	r2,1026
 400bacc:	1093f304 	addi	r2,r2,20428
 400bad0:	10800017 	ldw	r2,0(r2)
 400bad4:	200b883a 	mov	r5,r4
 400bad8:	d9800104 	addi	r6,sp,4
 400badc:	11000217 	ldw	r4,8(r2)
 400bae0:	400e3940 	call	400e394 <__vfprintf_internal>
 400bae4:	dfc00017 	ldw	ra,0(sp)
 400bae8:	dec00404 	addi	sp,sp,16
 400baec:	f800283a 	ret

0400baf0 <_putchar_r>:
 400baf0:	21800217 	ldw	r6,8(r4)
 400baf4:	40124dc1 	jmpi	40124dc <_putc_r>

0400baf8 <putchar>:
 400baf8:	008100b4 	movhi	r2,1026
 400bafc:	1093f304 	addi	r2,r2,20428
 400bb00:	200b883a 	mov	r5,r4
 400bb04:	11000017 	ldw	r4,0(r2)
 400bb08:	21800217 	ldw	r6,8(r4)
 400bb0c:	40124dc1 	jmpi	40124dc <_putc_r>

0400bb10 <_puts_r>:
 400bb10:	defff604 	addi	sp,sp,-40
 400bb14:	dc000715 	stw	r16,28(sp)
 400bb18:	2021883a 	mov	r16,r4
 400bb1c:	2809883a 	mov	r4,r5
 400bb20:	dc400815 	stw	r17,32(sp)
 400bb24:	dfc00915 	stw	ra,36(sp)
 400bb28:	2823883a 	mov	r17,r5
 400bb2c:	400c0180 	call	400c018 <strlen>
 400bb30:	10c00044 	addi	r3,r2,1
 400bb34:	d8800115 	stw	r2,4(sp)
 400bb38:	008100b4 	movhi	r2,1026
 400bb3c:	1086d304 	addi	r2,r2,6988
 400bb40:	d8800215 	stw	r2,8(sp)
 400bb44:	00800044 	movi	r2,1
 400bb48:	d8800315 	stw	r2,12(sp)
 400bb4c:	00800084 	movi	r2,2
 400bb50:	dc400015 	stw	r17,0(sp)
 400bb54:	d8c00615 	stw	r3,24(sp)
 400bb58:	dec00415 	stw	sp,16(sp)
 400bb5c:	d8800515 	stw	r2,20(sp)
 400bb60:	80000226 	beq	r16,zero,400bb6c <_puts_r+0x5c>
 400bb64:	80800e17 	ldw	r2,56(r16)
 400bb68:	10001426 	beq	r2,zero,400bbbc <_puts_r+0xac>
 400bb6c:	81400217 	ldw	r5,8(r16)
 400bb70:	2880030b 	ldhu	r2,12(r5)
 400bb74:	10c8000c 	andi	r3,r2,8192
 400bb78:	1800061e 	bne	r3,zero,400bb94 <_puts_r+0x84>
 400bb7c:	29001917 	ldw	r4,100(r5)
 400bb80:	00f7ffc4 	movi	r3,-8193
 400bb84:	10880014 	ori	r2,r2,8192
 400bb88:	20c6703a 	and	r3,r4,r3
 400bb8c:	2880030d 	sth	r2,12(r5)
 400bb90:	28c01915 	stw	r3,100(r5)
 400bb94:	d9800404 	addi	r6,sp,16
 400bb98:	8009883a 	mov	r4,r16
 400bb9c:	40108fc0 	call	40108fc <__sfvwrite_r>
 400bba0:	1000091e 	bne	r2,zero,400bbc8 <_puts_r+0xb8>
 400bba4:	00800284 	movi	r2,10
 400bba8:	dfc00917 	ldw	ra,36(sp)
 400bbac:	dc400817 	ldw	r17,32(sp)
 400bbb0:	dc000717 	ldw	r16,28(sp)
 400bbb4:	dec00a04 	addi	sp,sp,40
 400bbb8:	f800283a 	ret
 400bbbc:	8009883a 	mov	r4,r16
 400bbc0:	40104780 	call	4010478 <__sinit>
 400bbc4:	003fe906 	br	400bb6c <__alt_data_end+0xfc00bb6c>
 400bbc8:	00bfffc4 	movi	r2,-1
 400bbcc:	003ff606 	br	400bba8 <__alt_data_end+0xfc00bba8>

0400bbd0 <puts>:
 400bbd0:	008100b4 	movhi	r2,1026
 400bbd4:	1093f304 	addi	r2,r2,20428
 400bbd8:	200b883a 	mov	r5,r4
 400bbdc:	11000017 	ldw	r4,0(r2)
 400bbe0:	400bb101 	jmpi	400bb10 <_puts_r>

0400bbe4 <_sbrk_r>:
 400bbe4:	defffd04 	addi	sp,sp,-12
 400bbe8:	dc000015 	stw	r16,0(sp)
 400bbec:	040100f4 	movhi	r16,1027
 400bbf0:	dc400115 	stw	r17,4(sp)
 400bbf4:	84208404 	addi	r16,r16,-32240
 400bbf8:	2023883a 	mov	r17,r4
 400bbfc:	2809883a 	mov	r4,r5
 400bc00:	dfc00215 	stw	ra,8(sp)
 400bc04:	80000015 	stw	zero,0(r16)
 400bc08:	40188f80 	call	40188f8 <sbrk>
 400bc0c:	00ffffc4 	movi	r3,-1
 400bc10:	10c00526 	beq	r2,r3,400bc28 <_sbrk_r+0x44>
 400bc14:	dfc00217 	ldw	ra,8(sp)
 400bc18:	dc400117 	ldw	r17,4(sp)
 400bc1c:	dc000017 	ldw	r16,0(sp)
 400bc20:	dec00304 	addi	sp,sp,12
 400bc24:	f800283a 	ret
 400bc28:	80c00017 	ldw	r3,0(r16)
 400bc2c:	183ff926 	beq	r3,zero,400bc14 <__alt_data_end+0xfc00bc14>
 400bc30:	88c00015 	stw	r3,0(r17)
 400bc34:	003ff706 	br	400bc14 <__alt_data_end+0xfc00bc14>

0400bc38 <_init_signal_r>:
 400bc38:	2080b717 	ldw	r2,732(r4)
 400bc3c:	10000226 	beq	r2,zero,400bc48 <_init_signal_r+0x10>
 400bc40:	0005883a 	mov	r2,zero
 400bc44:	f800283a 	ret
 400bc48:	defffe04 	addi	sp,sp,-8
 400bc4c:	01402004 	movi	r5,128
 400bc50:	dc000015 	stw	r16,0(sp)
 400bc54:	dfc00115 	stw	ra,4(sp)
 400bc58:	2021883a 	mov	r16,r4
 400bc5c:	400b0080 	call	400b008 <_malloc_r>
 400bc60:	8080b715 	stw	r2,732(r16)
 400bc64:	10000d26 	beq	r2,zero,400bc9c <_init_signal_r+0x64>
 400bc68:	0007883a 	mov	r3,zero
 400bc6c:	01002004 	movi	r4,128
 400bc70:	00000106 	br	400bc78 <_init_signal_r+0x40>
 400bc74:	8080b717 	ldw	r2,732(r16)
 400bc78:	10c5883a 	add	r2,r2,r3
 400bc7c:	10000015 	stw	zero,0(r2)
 400bc80:	18c00104 	addi	r3,r3,4
 400bc84:	193ffb1e 	bne	r3,r4,400bc74 <__alt_data_end+0xfc00bc74>
 400bc88:	0005883a 	mov	r2,zero
 400bc8c:	dfc00117 	ldw	ra,4(sp)
 400bc90:	dc000017 	ldw	r16,0(sp)
 400bc94:	dec00204 	addi	sp,sp,8
 400bc98:	f800283a 	ret
 400bc9c:	00bfffc4 	movi	r2,-1
 400bca0:	003ffa06 	br	400bc8c <__alt_data_end+0xfc00bc8c>

0400bca4 <_signal_r>:
 400bca4:	00c007c4 	movi	r3,31
 400bca8:	19401536 	bltu	r3,r5,400bd00 <_signal_r+0x5c>
 400bcac:	2080b717 	ldw	r2,732(r4)
 400bcb0:	defffc04 	addi	sp,sp,-16
 400bcb4:	dc800215 	stw	r18,8(sp)
 400bcb8:	dc400115 	stw	r17,4(sp)
 400bcbc:	dc000015 	stw	r16,0(sp)
 400bcc0:	dfc00315 	stw	ra,12(sp)
 400bcc4:	3023883a 	mov	r17,r6
 400bcc8:	2021883a 	mov	r16,r4
 400bccc:	2825883a 	mov	r18,r5
 400bcd0:	10000f26 	beq	r2,zero,400bd10 <_signal_r+0x6c>
 400bcd4:	948b883a 	add	r5,r18,r18
 400bcd8:	294b883a 	add	r5,r5,r5
 400bcdc:	114b883a 	add	r5,r2,r5
 400bce0:	28800017 	ldw	r2,0(r5)
 400bce4:	2c400015 	stw	r17,0(r5)
 400bce8:	dfc00317 	ldw	ra,12(sp)
 400bcec:	dc800217 	ldw	r18,8(sp)
 400bcf0:	dc400117 	ldw	r17,4(sp)
 400bcf4:	dc000017 	ldw	r16,0(sp)
 400bcf8:	dec00404 	addi	sp,sp,16
 400bcfc:	f800283a 	ret
 400bd00:	00c00584 	movi	r3,22
 400bd04:	20c00015 	stw	r3,0(r4)
 400bd08:	00bfffc4 	movi	r2,-1
 400bd0c:	f800283a 	ret
 400bd10:	400bc380 	call	400bc38 <_init_signal_r>
 400bd14:	1000021e 	bne	r2,zero,400bd20 <_signal_r+0x7c>
 400bd18:	8080b717 	ldw	r2,732(r16)
 400bd1c:	003fed06 	br	400bcd4 <__alt_data_end+0xfc00bcd4>
 400bd20:	00bfffc4 	movi	r2,-1
 400bd24:	003ff006 	br	400bce8 <__alt_data_end+0xfc00bce8>

0400bd28 <_raise_r>:
 400bd28:	008007c4 	movi	r2,31
 400bd2c:	11402936 	bltu	r2,r5,400bdd4 <_raise_r+0xac>
 400bd30:	20c0b717 	ldw	r3,732(r4)
 400bd34:	defffd04 	addi	sp,sp,-12
 400bd38:	dc400115 	stw	r17,4(sp)
 400bd3c:	dc000015 	stw	r16,0(sp)
 400bd40:	dfc00215 	stw	ra,8(sp)
 400bd44:	2021883a 	mov	r16,r4
 400bd48:	2823883a 	mov	r17,r5
 400bd4c:	18001726 	beq	r3,zero,400bdac <_raise_r+0x84>
 400bd50:	2945883a 	add	r2,r5,r5
 400bd54:	1085883a 	add	r2,r2,r2
 400bd58:	1887883a 	add	r3,r3,r2
 400bd5c:	19800017 	ldw	r6,0(r3)
 400bd60:	30001226 	beq	r6,zero,400bdac <_raise_r+0x84>
 400bd64:	00800044 	movi	r2,1
 400bd68:	30800e26 	beq	r6,r2,400bda4 <_raise_r+0x7c>
 400bd6c:	013fffc4 	movi	r4,-1
 400bd70:	31000926 	beq	r6,r4,400bd98 <_raise_r+0x70>
 400bd74:	18000015 	stw	zero,0(r3)
 400bd78:	2809883a 	mov	r4,r5
 400bd7c:	303ee83a 	callr	r6
 400bd80:	0005883a 	mov	r2,zero
 400bd84:	dfc00217 	ldw	ra,8(sp)
 400bd88:	dc400117 	ldw	r17,4(sp)
 400bd8c:	dc000017 	ldw	r16,0(sp)
 400bd90:	dec00304 	addi	sp,sp,12
 400bd94:	f800283a 	ret
 400bd98:	00c00584 	movi	r3,22
 400bd9c:	80c00015 	stw	r3,0(r16)
 400bda0:	003ff806 	br	400bd84 <__alt_data_end+0xfc00bd84>
 400bda4:	0005883a 	mov	r2,zero
 400bda8:	003ff606 	br	400bd84 <__alt_data_end+0xfc00bd84>
 400bdac:	8009883a 	mov	r4,r16
 400bdb0:	400bf380 	call	400bf38 <_getpid_r>
 400bdb4:	880d883a 	mov	r6,r17
 400bdb8:	100b883a 	mov	r5,r2
 400bdbc:	8009883a 	mov	r4,r16
 400bdc0:	dfc00217 	ldw	ra,8(sp)
 400bdc4:	dc400117 	ldw	r17,4(sp)
 400bdc8:	dc000017 	ldw	r16,0(sp)
 400bdcc:	dec00304 	addi	sp,sp,12
 400bdd0:	400bedc1 	jmpi	400bedc <_kill_r>
 400bdd4:	00800584 	movi	r2,22
 400bdd8:	20800015 	stw	r2,0(r4)
 400bddc:	00bfffc4 	movi	r2,-1
 400bde0:	f800283a 	ret

0400bde4 <__sigtramp_r>:
 400bde4:	008007c4 	movi	r2,31
 400bde8:	11402436 	bltu	r2,r5,400be7c <__sigtramp_r+0x98>
 400bdec:	20c0b717 	ldw	r3,732(r4)
 400bdf0:	defffd04 	addi	sp,sp,-12
 400bdf4:	dc400115 	stw	r17,4(sp)
 400bdf8:	dc000015 	stw	r16,0(sp)
 400bdfc:	dfc00215 	stw	ra,8(sp)
 400be00:	2021883a 	mov	r16,r4
 400be04:	2823883a 	mov	r17,r5
 400be08:	18001826 	beq	r3,zero,400be6c <__sigtramp_r+0x88>
 400be0c:	8c45883a 	add	r2,r17,r17
 400be10:	1085883a 	add	r2,r2,r2
 400be14:	1885883a 	add	r2,r3,r2
 400be18:	10c00017 	ldw	r3,0(r2)
 400be1c:	18001126 	beq	r3,zero,400be64 <__sigtramp_r+0x80>
 400be20:	013fffc4 	movi	r4,-1
 400be24:	19000d26 	beq	r3,r4,400be5c <__sigtramp_r+0x78>
 400be28:	01000044 	movi	r4,1
 400be2c:	19000926 	beq	r3,r4,400be54 <__sigtramp_r+0x70>
 400be30:	10000015 	stw	zero,0(r2)
 400be34:	8809883a 	mov	r4,r17
 400be38:	183ee83a 	callr	r3
 400be3c:	0005883a 	mov	r2,zero
 400be40:	dfc00217 	ldw	ra,8(sp)
 400be44:	dc400117 	ldw	r17,4(sp)
 400be48:	dc000017 	ldw	r16,0(sp)
 400be4c:	dec00304 	addi	sp,sp,12
 400be50:	f800283a 	ret
 400be54:	008000c4 	movi	r2,3
 400be58:	003ff906 	br	400be40 <__alt_data_end+0xfc00be40>
 400be5c:	00800084 	movi	r2,2
 400be60:	003ff706 	br	400be40 <__alt_data_end+0xfc00be40>
 400be64:	00800044 	movi	r2,1
 400be68:	003ff506 	br	400be40 <__alt_data_end+0xfc00be40>
 400be6c:	400bc380 	call	400bc38 <_init_signal_r>
 400be70:	1000041e 	bne	r2,zero,400be84 <__sigtramp_r+0xa0>
 400be74:	80c0b717 	ldw	r3,732(r16)
 400be78:	003fe406 	br	400be0c <__alt_data_end+0xfc00be0c>
 400be7c:	00bfffc4 	movi	r2,-1
 400be80:	f800283a 	ret
 400be84:	00bfffc4 	movi	r2,-1
 400be88:	003fed06 	br	400be40 <__alt_data_end+0xfc00be40>

0400be8c <raise>:
 400be8c:	008100b4 	movhi	r2,1026
 400be90:	1093f304 	addi	r2,r2,20428
 400be94:	200b883a 	mov	r5,r4
 400be98:	11000017 	ldw	r4,0(r2)
 400be9c:	400bd281 	jmpi	400bd28 <_raise_r>

0400bea0 <signal>:
 400bea0:	008100b4 	movhi	r2,1026
 400bea4:	1093f304 	addi	r2,r2,20428
 400bea8:	280d883a 	mov	r6,r5
 400beac:	200b883a 	mov	r5,r4
 400beb0:	11000017 	ldw	r4,0(r2)
 400beb4:	400bca41 	jmpi	400bca4 <_signal_r>

0400beb8 <_init_signal>:
 400beb8:	008100b4 	movhi	r2,1026
 400bebc:	1093f304 	addi	r2,r2,20428
 400bec0:	11000017 	ldw	r4,0(r2)
 400bec4:	400bc381 	jmpi	400bc38 <_init_signal_r>

0400bec8 <__sigtramp>:
 400bec8:	008100b4 	movhi	r2,1026
 400becc:	1093f304 	addi	r2,r2,20428
 400bed0:	200b883a 	mov	r5,r4
 400bed4:	11000017 	ldw	r4,0(r2)
 400bed8:	400bde41 	jmpi	400bde4 <__sigtramp_r>

0400bedc <_kill_r>:
 400bedc:	defffd04 	addi	sp,sp,-12
 400bee0:	2805883a 	mov	r2,r5
 400bee4:	dc000015 	stw	r16,0(sp)
 400bee8:	040100f4 	movhi	r16,1027
 400beec:	dc400115 	stw	r17,4(sp)
 400bef0:	84208404 	addi	r16,r16,-32240
 400bef4:	2023883a 	mov	r17,r4
 400bef8:	300b883a 	mov	r5,r6
 400befc:	1009883a 	mov	r4,r2
 400bf00:	dfc00215 	stw	ra,8(sp)
 400bf04:	80000015 	stw	zero,0(r16)
 400bf08:	401844c0 	call	401844c <kill>
 400bf0c:	00ffffc4 	movi	r3,-1
 400bf10:	10c00526 	beq	r2,r3,400bf28 <_kill_r+0x4c>
 400bf14:	dfc00217 	ldw	ra,8(sp)
 400bf18:	dc400117 	ldw	r17,4(sp)
 400bf1c:	dc000017 	ldw	r16,0(sp)
 400bf20:	dec00304 	addi	sp,sp,12
 400bf24:	f800283a 	ret
 400bf28:	80c00017 	ldw	r3,0(r16)
 400bf2c:	183ff926 	beq	r3,zero,400bf14 <__alt_data_end+0xfc00bf14>
 400bf30:	88c00015 	stw	r3,0(r17)
 400bf34:	003ff706 	br	400bf14 <__alt_data_end+0xfc00bf14>

0400bf38 <_getpid_r>:
 400bf38:	40183a41 	jmpi	40183a4 <getpid>

0400bf3c <strcmp>:
 400bf3c:	2144b03a 	or	r2,r4,r5
 400bf40:	108000cc 	andi	r2,r2,3
 400bf44:	1000171e 	bne	r2,zero,400bfa4 <strcmp+0x68>
 400bf48:	20800017 	ldw	r2,0(r4)
 400bf4c:	28c00017 	ldw	r3,0(r5)
 400bf50:	10c0141e 	bne	r2,r3,400bfa4 <strcmp+0x68>
 400bf54:	027fbff4 	movhi	r9,65279
 400bf58:	4a7fbfc4 	addi	r9,r9,-257
 400bf5c:	0086303a 	nor	r3,zero,r2
 400bf60:	02202074 	movhi	r8,32897
 400bf64:	1245883a 	add	r2,r2,r9
 400bf68:	42202004 	addi	r8,r8,-32640
 400bf6c:	10c4703a 	and	r2,r2,r3
 400bf70:	1204703a 	and	r2,r2,r8
 400bf74:	10000226 	beq	r2,zero,400bf80 <strcmp+0x44>
 400bf78:	00002306 	br	400c008 <strcmp+0xcc>
 400bf7c:	1000221e 	bne	r2,zero,400c008 <strcmp+0xcc>
 400bf80:	21000104 	addi	r4,r4,4
 400bf84:	20c00017 	ldw	r3,0(r4)
 400bf88:	29400104 	addi	r5,r5,4
 400bf8c:	29800017 	ldw	r6,0(r5)
 400bf90:	1a4f883a 	add	r7,r3,r9
 400bf94:	00c4303a 	nor	r2,zero,r3
 400bf98:	3884703a 	and	r2,r7,r2
 400bf9c:	1204703a 	and	r2,r2,r8
 400bfa0:	19bff626 	beq	r3,r6,400bf7c <__alt_data_end+0xfc00bf7c>
 400bfa4:	20800003 	ldbu	r2,0(r4)
 400bfa8:	10c03fcc 	andi	r3,r2,255
 400bfac:	18c0201c 	xori	r3,r3,128
 400bfb0:	18ffe004 	addi	r3,r3,-128
 400bfb4:	18000c26 	beq	r3,zero,400bfe8 <strcmp+0xac>
 400bfb8:	29800007 	ldb	r6,0(r5)
 400bfbc:	19800326 	beq	r3,r6,400bfcc <strcmp+0x90>
 400bfc0:	00001306 	br	400c010 <strcmp+0xd4>
 400bfc4:	29800007 	ldb	r6,0(r5)
 400bfc8:	11800b1e 	bne	r2,r6,400bff8 <strcmp+0xbc>
 400bfcc:	21000044 	addi	r4,r4,1
 400bfd0:	20c00003 	ldbu	r3,0(r4)
 400bfd4:	29400044 	addi	r5,r5,1
 400bfd8:	18803fcc 	andi	r2,r3,255
 400bfdc:	1080201c 	xori	r2,r2,128
 400bfe0:	10bfe004 	addi	r2,r2,-128
 400bfe4:	103ff71e 	bne	r2,zero,400bfc4 <__alt_data_end+0xfc00bfc4>
 400bfe8:	0007883a 	mov	r3,zero
 400bfec:	28800003 	ldbu	r2,0(r5)
 400bff0:	1885c83a 	sub	r2,r3,r2
 400bff4:	f800283a 	ret
 400bff8:	28800003 	ldbu	r2,0(r5)
 400bffc:	18c03fcc 	andi	r3,r3,255
 400c000:	1885c83a 	sub	r2,r3,r2
 400c004:	f800283a 	ret
 400c008:	0005883a 	mov	r2,zero
 400c00c:	f800283a 	ret
 400c010:	10c03fcc 	andi	r3,r2,255
 400c014:	003ff506 	br	400bfec <__alt_data_end+0xfc00bfec>

0400c018 <strlen>:
 400c018:	208000cc 	andi	r2,r4,3
 400c01c:	10002026 	beq	r2,zero,400c0a0 <strlen+0x88>
 400c020:	20800007 	ldb	r2,0(r4)
 400c024:	10002026 	beq	r2,zero,400c0a8 <strlen+0x90>
 400c028:	2005883a 	mov	r2,r4
 400c02c:	00000206 	br	400c038 <strlen+0x20>
 400c030:	10c00007 	ldb	r3,0(r2)
 400c034:	18001826 	beq	r3,zero,400c098 <strlen+0x80>
 400c038:	10800044 	addi	r2,r2,1
 400c03c:	10c000cc 	andi	r3,r2,3
 400c040:	183ffb1e 	bne	r3,zero,400c030 <__alt_data_end+0xfc00c030>
 400c044:	10c00017 	ldw	r3,0(r2)
 400c048:	01ffbff4 	movhi	r7,65279
 400c04c:	39ffbfc4 	addi	r7,r7,-257
 400c050:	00ca303a 	nor	r5,zero,r3
 400c054:	01a02074 	movhi	r6,32897
 400c058:	19c7883a 	add	r3,r3,r7
 400c05c:	31a02004 	addi	r6,r6,-32640
 400c060:	1946703a 	and	r3,r3,r5
 400c064:	1986703a 	and	r3,r3,r6
 400c068:	1800091e 	bne	r3,zero,400c090 <strlen+0x78>
 400c06c:	10800104 	addi	r2,r2,4
 400c070:	10c00017 	ldw	r3,0(r2)
 400c074:	19cb883a 	add	r5,r3,r7
 400c078:	00c6303a 	nor	r3,zero,r3
 400c07c:	28c6703a 	and	r3,r5,r3
 400c080:	1986703a 	and	r3,r3,r6
 400c084:	183ff926 	beq	r3,zero,400c06c <__alt_data_end+0xfc00c06c>
 400c088:	00000106 	br	400c090 <strlen+0x78>
 400c08c:	10800044 	addi	r2,r2,1
 400c090:	10c00007 	ldb	r3,0(r2)
 400c094:	183ffd1e 	bne	r3,zero,400c08c <__alt_data_end+0xfc00c08c>
 400c098:	1105c83a 	sub	r2,r2,r4
 400c09c:	f800283a 	ret
 400c0a0:	2005883a 	mov	r2,r4
 400c0a4:	003fe706 	br	400c044 <__alt_data_end+0xfc00c044>
 400c0a8:	0005883a 	mov	r2,zero
 400c0ac:	f800283a 	ret

0400c0b0 <_times_r>:
 400c0b0:	2809883a 	mov	r4,r5
 400c0b4:	40189441 	jmpi	4018944 <times>

0400c0b8 <___vfprintf_internal_r>:
 400c0b8:	deffb804 	addi	sp,sp,-288
 400c0bc:	dfc04715 	stw	ra,284(sp)
 400c0c0:	ddc04515 	stw	r23,276(sp)
 400c0c4:	dd404315 	stw	r21,268(sp)
 400c0c8:	d9002d15 	stw	r4,180(sp)
 400c0cc:	282f883a 	mov	r23,r5
 400c0d0:	302b883a 	mov	r21,r6
 400c0d4:	d9c02e15 	stw	r7,184(sp)
 400c0d8:	df004615 	stw	fp,280(sp)
 400c0dc:	dd804415 	stw	r22,272(sp)
 400c0e0:	dd004215 	stw	r20,264(sp)
 400c0e4:	dcc04115 	stw	r19,260(sp)
 400c0e8:	dc804015 	stw	r18,256(sp)
 400c0ec:	dc403f15 	stw	r17,252(sp)
 400c0f0:	dc003e15 	stw	r16,248(sp)
 400c0f4:	4010ff80 	call	4010ff8 <_localeconv_r>
 400c0f8:	10800017 	ldw	r2,0(r2)
 400c0fc:	1009883a 	mov	r4,r2
 400c100:	d8803415 	stw	r2,208(sp)
 400c104:	400c0180 	call	400c018 <strlen>
 400c108:	d8803715 	stw	r2,220(sp)
 400c10c:	d8802d17 	ldw	r2,180(sp)
 400c110:	10000226 	beq	r2,zero,400c11c <___vfprintf_internal_r+0x64>
 400c114:	10800e17 	ldw	r2,56(r2)
 400c118:	1000fb26 	beq	r2,zero,400c508 <___vfprintf_internal_r+0x450>
 400c11c:	b880030b 	ldhu	r2,12(r23)
 400c120:	10c8000c 	andi	r3,r2,8192
 400c124:	1800061e 	bne	r3,zero,400c140 <___vfprintf_internal_r+0x88>
 400c128:	b9001917 	ldw	r4,100(r23)
 400c12c:	00f7ffc4 	movi	r3,-8193
 400c130:	10880014 	ori	r2,r2,8192
 400c134:	20c6703a 	and	r3,r4,r3
 400c138:	b880030d 	sth	r2,12(r23)
 400c13c:	b8c01915 	stw	r3,100(r23)
 400c140:	10c0020c 	andi	r3,r2,8
 400c144:	1800c326 	beq	r3,zero,400c454 <___vfprintf_internal_r+0x39c>
 400c148:	b8c00417 	ldw	r3,16(r23)
 400c14c:	1800c126 	beq	r3,zero,400c454 <___vfprintf_internal_r+0x39c>
 400c150:	1080068c 	andi	r2,r2,26
 400c154:	00c00284 	movi	r3,10
 400c158:	10c0c626 	beq	r2,r3,400c474 <___vfprintf_internal_r+0x3bc>
 400c15c:	d8c00404 	addi	r3,sp,16
 400c160:	050100b4 	movhi	r20,1026
 400c164:	d9001e04 	addi	r4,sp,120
 400c168:	a506e484 	addi	r20,r20,7058
 400c16c:	d8c01e15 	stw	r3,120(sp)
 400c170:	d8002015 	stw	zero,128(sp)
 400c174:	d8001f15 	stw	zero,124(sp)
 400c178:	d8003315 	stw	zero,204(sp)
 400c17c:	d8003615 	stw	zero,216(sp)
 400c180:	d8003815 	stw	zero,224(sp)
 400c184:	1811883a 	mov	r8,r3
 400c188:	d8003915 	stw	zero,228(sp)
 400c18c:	d8003a15 	stw	zero,232(sp)
 400c190:	d8002f15 	stw	zero,188(sp)
 400c194:	d9002815 	stw	r4,160(sp)
 400c198:	a8800007 	ldb	r2,0(r21)
 400c19c:	10028b26 	beq	r2,zero,400cbcc <___vfprintf_internal_r+0xb14>
 400c1a0:	00c00944 	movi	r3,37
 400c1a4:	a823883a 	mov	r17,r21
 400c1a8:	10c0021e 	bne	r2,r3,400c1b4 <___vfprintf_internal_r+0xfc>
 400c1ac:	00001406 	br	400c200 <___vfprintf_internal_r+0x148>
 400c1b0:	10c00326 	beq	r2,r3,400c1c0 <___vfprintf_internal_r+0x108>
 400c1b4:	8c400044 	addi	r17,r17,1
 400c1b8:	88800007 	ldb	r2,0(r17)
 400c1bc:	103ffc1e 	bne	r2,zero,400c1b0 <__alt_data_end+0xfc00c1b0>
 400c1c0:	8d61c83a 	sub	r16,r17,r21
 400c1c4:	80000e26 	beq	r16,zero,400c200 <___vfprintf_internal_r+0x148>
 400c1c8:	d8c02017 	ldw	r3,128(sp)
 400c1cc:	d8801f17 	ldw	r2,124(sp)
 400c1d0:	45400015 	stw	r21,0(r8)
 400c1d4:	1c07883a 	add	r3,r3,r16
 400c1d8:	10800044 	addi	r2,r2,1
 400c1dc:	d8c02015 	stw	r3,128(sp)
 400c1e0:	44000115 	stw	r16,4(r8)
 400c1e4:	d8801f15 	stw	r2,124(sp)
 400c1e8:	00c001c4 	movi	r3,7
 400c1ec:	1880a916 	blt	r3,r2,400c494 <___vfprintf_internal_r+0x3dc>
 400c1f0:	42000204 	addi	r8,r8,8
 400c1f4:	d9402f17 	ldw	r5,188(sp)
 400c1f8:	2c0b883a 	add	r5,r5,r16
 400c1fc:	d9402f15 	stw	r5,188(sp)
 400c200:	88800007 	ldb	r2,0(r17)
 400c204:	1000aa26 	beq	r2,zero,400c4b0 <___vfprintf_internal_r+0x3f8>
 400c208:	8d400044 	addi	r21,r17,1
 400c20c:	8c400047 	ldb	r17,1(r17)
 400c210:	0021883a 	mov	r16,zero
 400c214:	00bfffc4 	movi	r2,-1
 400c218:	0025883a 	mov	r18,zero
 400c21c:	dc002905 	stb	r16,164(sp)
 400c220:	d8002785 	stb	zero,158(sp)
 400c224:	d8002b05 	stb	zero,172(sp)
 400c228:	d8802a15 	stw	r2,168(sp)
 400c22c:	d8003115 	stw	zero,196(sp)
 400c230:	04c01604 	movi	r19,88
 400c234:	05800244 	movi	r22,9
 400c238:	9021883a 	mov	r16,r18
 400c23c:	4039883a 	mov	fp,r8
 400c240:	ad400044 	addi	r21,r21,1
 400c244:	88bff804 	addi	r2,r17,-32
 400c248:	98833236 	bltu	r19,r2,400cf14 <___vfprintf_internal_r+0xe5c>
 400c24c:	100490ba 	slli	r2,r2,2
 400c250:	00c10074 	movhi	r3,1025
 400c254:	18f09904 	addi	r3,r3,-15772
 400c258:	10c5883a 	add	r2,r2,r3
 400c25c:	10800017 	ldw	r2,0(r2)
 400c260:	1000683a 	jmp	r2
 400c264:	0400ce0c 	andi	r16,zero,824
 400c268:	0400cf14 	movui	r16,828
 400c26c:	0400cf14 	movui	r16,828
 400c270:	0400ce2c 	andhi	r16,zero,824
 400c274:	0400cf14 	movui	r16,828
 400c278:	0400cf14 	movui	r16,828
 400c27c:	0400cf14 	movui	r16,828
 400c280:	0400cf14 	movui	r16,828
 400c284:	0400cf14 	movui	r16,828
 400c288:	0400cf14 	movui	r16,828
 400c28c:	0400c514 	movui	r16,788
 400c290:	0400cd1c 	xori	r16,zero,820
 400c294:	0400cf14 	movui	r16,828
 400c298:	0400c3d8 	cmpnei	r16,zero,783
 400c29c:	0400c538 	rdprs	r16,zero,788
 400c2a0:	0400cf14 	movui	r16,828
 400c2a4:	0400c588 	cmpgei	r16,zero,790
 400c2a8:	0400c594 	movui	r16,790
 400c2ac:	0400c594 	movui	r16,790
 400c2b0:	0400c594 	movui	r16,790
 400c2b4:	0400c594 	movui	r16,790
 400c2b8:	0400c594 	movui	r16,790
 400c2bc:	0400c594 	movui	r16,790
 400c2c0:	0400c594 	movui	r16,790
 400c2c4:	0400c594 	movui	r16,790
 400c2c8:	0400c594 	movui	r16,790
 400c2cc:	0400cf14 	movui	r16,828
 400c2d0:	0400cf14 	movui	r16,828
 400c2d4:	0400cf14 	movui	r16,828
 400c2d8:	0400cf14 	movui	r16,828
 400c2dc:	0400cf14 	movui	r16,828
 400c2e0:	0400cf14 	movui	r16,828
 400c2e4:	0400cf14 	movui	r16,828
 400c2e8:	0400cf14 	movui	r16,828
 400c2ec:	0400cf14 	movui	r16,828
 400c2f0:	0400cf14 	movui	r16,828
 400c2f4:	0400c5d0 	cmplti	r16,zero,791
 400c2f8:	0400c698 	cmpnei	r16,zero,794
 400c2fc:	0400cf14 	movui	r16,828
 400c300:	0400c698 	cmpnei	r16,zero,794
 400c304:	0400cf14 	movui	r16,828
 400c308:	0400cf14 	movui	r16,828
 400c30c:	0400cf14 	movui	r16,828
 400c310:	0400cf14 	movui	r16,828
 400c314:	0400c744 	movi	r16,797
 400c318:	0400cf14 	movui	r16,828
 400c31c:	0400cf14 	movui	r16,828
 400c320:	0400c750 	cmplti	r16,zero,797
 400c324:	0400cf14 	movui	r16,828
 400c328:	0400cf14 	movui	r16,828
 400c32c:	0400cf14 	movui	r16,828
 400c330:	0400cf14 	movui	r16,828
 400c334:	0400cf14 	movui	r16,828
 400c338:	0400cbd4 	movui	r16,815
 400c33c:	0400cf14 	movui	r16,828
 400c340:	0400cf14 	movui	r16,828
 400c344:	0400cc40 	call	400cc4 <__alt_mem_sdram-0x3bff33c>
 400c348:	0400cf14 	movui	r16,828
 400c34c:	0400cf14 	movui	r16,828
 400c350:	0400cf14 	movui	r16,828
 400c354:	0400cf14 	movui	r16,828
 400c358:	0400cf14 	movui	r16,828
 400c35c:	0400cf14 	movui	r16,828
 400c360:	0400cf14 	movui	r16,828
 400c364:	0400cf14 	movui	r16,828
 400c368:	0400cf14 	movui	r16,828
 400c36c:	0400cf14 	movui	r16,828
 400c370:	0400ceb8 	rdprs	r16,zero,826
 400c374:	0400ce38 	rdprs	r16,zero,824
 400c378:	0400c698 	cmpnei	r16,zero,794
 400c37c:	0400c698 	cmpnei	r16,zero,794
 400c380:	0400c698 	cmpnei	r16,zero,794
 400c384:	0400ce58 	cmpnei	r16,zero,825
 400c388:	0400ce38 	rdprs	r16,zero,824
 400c38c:	0400cf14 	movui	r16,828
 400c390:	0400cf14 	movui	r16,828
 400c394:	0400ce64 	muli	r16,zero,825
 400c398:	0400cf14 	movui	r16,828
 400c39c:	0400ce78 	rdprs	r16,zero,825
 400c3a0:	0400ccfc 	xorhi	r16,zero,819
 400c3a4:	0400c3e4 	muli	r16,zero,783
 400c3a8:	0400cd34 	movhi	r16,820
 400c3ac:	0400cf14 	movui	r16,828
 400c3b0:	0400cd40 	call	400cd4 <__alt_mem_sdram-0x3bff32c>
 400c3b4:	0400cf14 	movui	r16,828
 400c3b8:	0400cda4 	muli	r16,zero,822
 400c3bc:	0400cf14 	movui	r16,828
 400c3c0:	0400cf14 	movui	r16,828
 400c3c4:	0400cdc4 	movi	r16,823
 400c3c8:	d8c03117 	ldw	r3,196(sp)
 400c3cc:	d8802e15 	stw	r2,184(sp)
 400c3d0:	00c7c83a 	sub	r3,zero,r3
 400c3d4:	d8c03115 	stw	r3,196(sp)
 400c3d8:	84000114 	ori	r16,r16,4
 400c3dc:	ac400007 	ldb	r17,0(r21)
 400c3e0:	003f9706 	br	400c240 <__alt_data_end+0xfc00c240>
 400c3e4:	00800c04 	movi	r2,48
 400c3e8:	d8802705 	stb	r2,156(sp)
 400c3ec:	00801e04 	movi	r2,120
 400c3f0:	d8802745 	stb	r2,157(sp)
 400c3f4:	d9002a17 	ldw	r4,168(sp)
 400c3f8:	d8802e17 	ldw	r2,184(sp)
 400c3fc:	d8002785 	stb	zero,158(sp)
 400c400:	e011883a 	mov	r8,fp
 400c404:	10c00104 	addi	r3,r2,4
 400c408:	14c00017 	ldw	r19,0(r2)
 400c40c:	002d883a 	mov	r22,zero
 400c410:	80800094 	ori	r2,r16,2
 400c414:	2002ca16 	blt	r4,zero,400cf40 <___vfprintf_internal_r+0xe88>
 400c418:	00bfdfc4 	movi	r2,-129
 400c41c:	80a4703a 	and	r18,r16,r2
 400c420:	d8c02e15 	stw	r3,184(sp)
 400c424:	94800094 	ori	r18,r18,2
 400c428:	9802b41e 	bne	r19,zero,400cefc <___vfprintf_internal_r+0xe44>
 400c42c:	014100b4 	movhi	r5,1026
 400c430:	2946dd04 	addi	r5,r5,7028
 400c434:	d9403915 	stw	r5,228(sp)
 400c438:	04401e04 	movi	r17,120
 400c43c:	d8802a17 	ldw	r2,168(sp)
 400c440:	0039883a 	mov	fp,zero
 400c444:	1001fa26 	beq	r2,zero,400cc30 <___vfprintf_internal_r+0xb78>
 400c448:	0027883a 	mov	r19,zero
 400c44c:	002d883a 	mov	r22,zero
 400c450:	00021906 	br	400ccb8 <___vfprintf_internal_r+0xc00>
 400c454:	d9002d17 	ldw	r4,180(sp)
 400c458:	b80b883a 	mov	r5,r23
 400c45c:	400e46c0 	call	400e46c <__swsetup_r>
 400c460:	1005dc1e 	bne	r2,zero,400dbd4 <___vfprintf_internal_r+0x1b1c>
 400c464:	b880030b 	ldhu	r2,12(r23)
 400c468:	00c00284 	movi	r3,10
 400c46c:	1080068c 	andi	r2,r2,26
 400c470:	10ff3a1e 	bne	r2,r3,400c15c <__alt_data_end+0xfc00c15c>
 400c474:	b880038f 	ldh	r2,14(r23)
 400c478:	103f3816 	blt	r2,zero,400c15c <__alt_data_end+0xfc00c15c>
 400c47c:	d9c02e17 	ldw	r7,184(sp)
 400c480:	d9002d17 	ldw	r4,180(sp)
 400c484:	a80d883a 	mov	r6,r21
 400c488:	b80b883a 	mov	r5,r23
 400c48c:	400e3b00 	call	400e3b0 <__sbprintf>
 400c490:	00001106 	br	400c4d8 <___vfprintf_internal_r+0x420>
 400c494:	d9002d17 	ldw	r4,180(sp)
 400c498:	d9801e04 	addi	r6,sp,120
 400c49c:	b80b883a 	mov	r5,r23
 400c4a0:	4012e540 	call	4012e54 <__sprint_r>
 400c4a4:	1000081e 	bne	r2,zero,400c4c8 <___vfprintf_internal_r+0x410>
 400c4a8:	da000404 	addi	r8,sp,16
 400c4ac:	003f5106 	br	400c1f4 <__alt_data_end+0xfc00c1f4>
 400c4b0:	d8802017 	ldw	r2,128(sp)
 400c4b4:	10000426 	beq	r2,zero,400c4c8 <___vfprintf_internal_r+0x410>
 400c4b8:	d9002d17 	ldw	r4,180(sp)
 400c4bc:	d9801e04 	addi	r6,sp,120
 400c4c0:	b80b883a 	mov	r5,r23
 400c4c4:	4012e540 	call	4012e54 <__sprint_r>
 400c4c8:	b880030b 	ldhu	r2,12(r23)
 400c4cc:	1080100c 	andi	r2,r2,64
 400c4d0:	1005c01e 	bne	r2,zero,400dbd4 <___vfprintf_internal_r+0x1b1c>
 400c4d4:	d8802f17 	ldw	r2,188(sp)
 400c4d8:	dfc04717 	ldw	ra,284(sp)
 400c4dc:	df004617 	ldw	fp,280(sp)
 400c4e0:	ddc04517 	ldw	r23,276(sp)
 400c4e4:	dd804417 	ldw	r22,272(sp)
 400c4e8:	dd404317 	ldw	r21,268(sp)
 400c4ec:	dd004217 	ldw	r20,264(sp)
 400c4f0:	dcc04117 	ldw	r19,260(sp)
 400c4f4:	dc804017 	ldw	r18,256(sp)
 400c4f8:	dc403f17 	ldw	r17,252(sp)
 400c4fc:	dc003e17 	ldw	r16,248(sp)
 400c500:	dec04804 	addi	sp,sp,288
 400c504:	f800283a 	ret
 400c508:	d9002d17 	ldw	r4,180(sp)
 400c50c:	40104780 	call	4010478 <__sinit>
 400c510:	003f0206 	br	400c11c <__alt_data_end+0xfc00c11c>
 400c514:	d9002e17 	ldw	r4,184(sp)
 400c518:	d9402e17 	ldw	r5,184(sp)
 400c51c:	21000017 	ldw	r4,0(r4)
 400c520:	28800104 	addi	r2,r5,4
 400c524:	d9003115 	stw	r4,196(sp)
 400c528:	203fa716 	blt	r4,zero,400c3c8 <__alt_data_end+0xfc00c3c8>
 400c52c:	d8802e15 	stw	r2,184(sp)
 400c530:	ac400007 	ldb	r17,0(r21)
 400c534:	003f4206 	br	400c240 <__alt_data_end+0xfc00c240>
 400c538:	ac400007 	ldb	r17,0(r21)
 400c53c:	01000a84 	movi	r4,42
 400c540:	a8c00044 	addi	r3,r21,1
 400c544:	89075826 	beq	r17,r4,400e2a8 <___vfprintf_internal_r+0x21f0>
 400c548:	8cbff404 	addi	r18,r17,-48
 400c54c:	b486ae36 	bltu	r22,r18,400e008 <___vfprintf_internal_r+0x1f50>
 400c550:	0009883a 	mov	r4,zero
 400c554:	1823883a 	mov	r17,r3
 400c558:	01400284 	movi	r5,10
 400c55c:	400aa340 	call	400aa34 <__mulsi3>
 400c560:	88c00007 	ldb	r3,0(r17)
 400c564:	1489883a 	add	r4,r2,r18
 400c568:	8d400044 	addi	r21,r17,1
 400c56c:	1cbff404 	addi	r18,r3,-48
 400c570:	a823883a 	mov	r17,r21
 400c574:	b4bff82e 	bgeu	r22,r18,400c558 <__alt_data_end+0xfc00c558>
 400c578:	1823883a 	mov	r17,r3
 400c57c:	2005f616 	blt	r4,zero,400dd58 <___vfprintf_internal_r+0x1ca0>
 400c580:	d9002a15 	stw	r4,168(sp)
 400c584:	003f2f06 	br	400c244 <__alt_data_end+0xfc00c244>
 400c588:	84002014 	ori	r16,r16,128
 400c58c:	ac400007 	ldb	r17,0(r21)
 400c590:	003f2b06 	br	400c240 <__alt_data_end+0xfc00c240>
 400c594:	8cbff404 	addi	r18,r17,-48
 400c598:	d8003115 	stw	zero,196(sp)
 400c59c:	0009883a 	mov	r4,zero
 400c5a0:	a823883a 	mov	r17,r21
 400c5a4:	01400284 	movi	r5,10
 400c5a8:	400aa340 	call	400aa34 <__mulsi3>
 400c5ac:	88c00007 	ldb	r3,0(r17)
 400c5b0:	9089883a 	add	r4,r18,r2
 400c5b4:	ad400044 	addi	r21,r21,1
 400c5b8:	1cbff404 	addi	r18,r3,-48
 400c5bc:	a823883a 	mov	r17,r21
 400c5c0:	b4bff82e 	bgeu	r22,r18,400c5a4 <__alt_data_end+0xfc00c5a4>
 400c5c4:	1823883a 	mov	r17,r3
 400c5c8:	d9003115 	stw	r4,196(sp)
 400c5cc:	003f1d06 	br	400c244 <__alt_data_end+0xfc00c244>
 400c5d0:	8025883a 	mov	r18,r16
 400c5d4:	dc002903 	ldbu	r16,164(sp)
 400c5d8:	e011883a 	mov	r8,fp
 400c5dc:	84003fcc 	andi	r16,r16,255
 400c5e0:	8007531e 	bne	r16,zero,400e330 <___vfprintf_internal_r+0x2278>
 400c5e4:	94800414 	ori	r18,r18,16
 400c5e8:	9080080c 	andi	r2,r18,32
 400c5ec:	1003a326 	beq	r2,zero,400d47c <___vfprintf_internal_r+0x13c4>
 400c5f0:	d9002e17 	ldw	r4,184(sp)
 400c5f4:	20800117 	ldw	r2,4(r4)
 400c5f8:	24c00017 	ldw	r19,0(r4)
 400c5fc:	21000204 	addi	r4,r4,8
 400c600:	d9002e15 	stw	r4,184(sp)
 400c604:	102d883a 	mov	r22,r2
 400c608:	10047316 	blt	r2,zero,400d7d8 <___vfprintf_internal_r+0x1720>
 400c60c:	d9002a17 	ldw	r4,168(sp)
 400c610:	df002783 	ldbu	fp,158(sp)
 400c614:	2003e416 	blt	r4,zero,400d5a8 <___vfprintf_internal_r+0x14f0>
 400c618:	00ffdfc4 	movi	r3,-129
 400c61c:	9d84b03a 	or	r2,r19,r22
 400c620:	90e4703a 	and	r18,r18,r3
 400c624:	10018026 	beq	r2,zero,400cc28 <___vfprintf_internal_r+0xb70>
 400c628:	b003ab26 	beq	r22,zero,400d4d8 <___vfprintf_internal_r+0x1420>
 400c62c:	dc402915 	stw	r17,164(sp)
 400c630:	dc001e04 	addi	r16,sp,120
 400c634:	b023883a 	mov	r17,r22
 400c638:	402d883a 	mov	r22,r8
 400c63c:	9809883a 	mov	r4,r19
 400c640:	880b883a 	mov	r5,r17
 400c644:	01800284 	movi	r6,10
 400c648:	000f883a 	mov	r7,zero
 400c64c:	40153980 	call	4015398 <__umoddi3>
 400c650:	10800c04 	addi	r2,r2,48
 400c654:	843fffc4 	addi	r16,r16,-1
 400c658:	9809883a 	mov	r4,r19
 400c65c:	880b883a 	mov	r5,r17
 400c660:	80800005 	stb	r2,0(r16)
 400c664:	01800284 	movi	r6,10
 400c668:	000f883a 	mov	r7,zero
 400c66c:	4014d9c0 	call	4014d9c <__udivdi3>
 400c670:	1027883a 	mov	r19,r2
 400c674:	10c4b03a 	or	r2,r2,r3
 400c678:	1823883a 	mov	r17,r3
 400c67c:	103fef1e 	bne	r2,zero,400c63c <__alt_data_end+0xfc00c63c>
 400c680:	d8c02817 	ldw	r3,160(sp)
 400c684:	dc402917 	ldw	r17,164(sp)
 400c688:	b011883a 	mov	r8,r22
 400c68c:	1c07c83a 	sub	r3,r3,r16
 400c690:	d8c02b15 	stw	r3,172(sp)
 400c694:	00005f06 	br	400c814 <___vfprintf_internal_r+0x75c>
 400c698:	8025883a 	mov	r18,r16
 400c69c:	dc002903 	ldbu	r16,164(sp)
 400c6a0:	e011883a 	mov	r8,fp
 400c6a4:	84003fcc 	andi	r16,r16,255
 400c6a8:	80071e1e 	bne	r16,zero,400e324 <___vfprintf_internal_r+0x226c>
 400c6ac:	9080020c 	andi	r2,r18,8
 400c6b0:	1004af26 	beq	r2,zero,400d970 <___vfprintf_internal_r+0x18b8>
 400c6b4:	d9002e17 	ldw	r4,184(sp)
 400c6b8:	d9402e17 	ldw	r5,184(sp)
 400c6bc:	d8802e17 	ldw	r2,184(sp)
 400c6c0:	21000017 	ldw	r4,0(r4)
 400c6c4:	29400117 	ldw	r5,4(r5)
 400c6c8:	10800204 	addi	r2,r2,8
 400c6cc:	d9003615 	stw	r4,216(sp)
 400c6d0:	d9403815 	stw	r5,224(sp)
 400c6d4:	d8802e15 	stw	r2,184(sp)
 400c6d8:	d9003617 	ldw	r4,216(sp)
 400c6dc:	d9403817 	ldw	r5,224(sp)
 400c6e0:	da003d15 	stw	r8,244(sp)
 400c6e4:	04000044 	movi	r16,1
 400c6e8:	4012ba80 	call	4012ba8 <__fpclassifyd>
 400c6ec:	da003d17 	ldw	r8,244(sp)
 400c6f0:	1404441e 	bne	r2,r16,400d804 <___vfprintf_internal_r+0x174c>
 400c6f4:	d9003617 	ldw	r4,216(sp)
 400c6f8:	d9403817 	ldw	r5,224(sp)
 400c6fc:	000d883a 	mov	r6,zero
 400c700:	000f883a 	mov	r7,zero
 400c704:	4016d3c0 	call	4016d3c <__ledf2>
 400c708:	da003d17 	ldw	r8,244(sp)
 400c70c:	1005e316 	blt	r2,zero,400de9c <___vfprintf_internal_r+0x1de4>
 400c710:	df002783 	ldbu	fp,158(sp)
 400c714:	008011c4 	movi	r2,71
 400c718:	1445580e 	bge	r2,r17,400dc7c <___vfprintf_internal_r+0x1bc4>
 400c71c:	040100b4 	movhi	r16,1026
 400c720:	8406d504 	addi	r16,r16,6996
 400c724:	00c000c4 	movi	r3,3
 400c728:	00bfdfc4 	movi	r2,-129
 400c72c:	d8c02915 	stw	r3,164(sp)
 400c730:	90a4703a 	and	r18,r18,r2
 400c734:	d8c02b15 	stw	r3,172(sp)
 400c738:	d8002a15 	stw	zero,168(sp)
 400c73c:	d8003215 	stw	zero,200(sp)
 400c740:	00003a06 	br	400c82c <___vfprintf_internal_r+0x774>
 400c744:	84000214 	ori	r16,r16,8
 400c748:	ac400007 	ldb	r17,0(r21)
 400c74c:	003ebc06 	br	400c240 <__alt_data_end+0xfc00c240>
 400c750:	8025883a 	mov	r18,r16
 400c754:	dc002903 	ldbu	r16,164(sp)
 400c758:	e011883a 	mov	r8,fp
 400c75c:	84003fcc 	andi	r16,r16,255
 400c760:	8007001e 	bne	r16,zero,400e364 <___vfprintf_internal_r+0x22ac>
 400c764:	94800414 	ori	r18,r18,16
 400c768:	9080080c 	andi	r2,r18,32
 400c76c:	1002fa26 	beq	r2,zero,400d358 <___vfprintf_internal_r+0x12a0>
 400c770:	d9002e17 	ldw	r4,184(sp)
 400c774:	d9402a17 	ldw	r5,168(sp)
 400c778:	d8002785 	stb	zero,158(sp)
 400c77c:	20800204 	addi	r2,r4,8
 400c780:	24c00017 	ldw	r19,0(r4)
 400c784:	25800117 	ldw	r22,4(r4)
 400c788:	2804b116 	blt	r5,zero,400da50 <___vfprintf_internal_r+0x1998>
 400c78c:	013fdfc4 	movi	r4,-129
 400c790:	9d86b03a 	or	r3,r19,r22
 400c794:	d8802e15 	stw	r2,184(sp)
 400c798:	9124703a 	and	r18,r18,r4
 400c79c:	1802fb1e 	bne	r3,zero,400d38c <___vfprintf_internal_r+0x12d4>
 400c7a0:	d8c02a17 	ldw	r3,168(sp)
 400c7a4:	0039883a 	mov	fp,zero
 400c7a8:	1805e526 	beq	r3,zero,400df40 <___vfprintf_internal_r+0x1e88>
 400c7ac:	0027883a 	mov	r19,zero
 400c7b0:	002d883a 	mov	r22,zero
 400c7b4:	dc001e04 	addi	r16,sp,120
 400c7b8:	9806d0fa 	srli	r3,r19,3
 400c7bc:	b008977a 	slli	r4,r22,29
 400c7c0:	b02cd0fa 	srli	r22,r22,3
 400c7c4:	9cc001cc 	andi	r19,r19,7
 400c7c8:	98800c04 	addi	r2,r19,48
 400c7cc:	843fffc4 	addi	r16,r16,-1
 400c7d0:	20e6b03a 	or	r19,r4,r3
 400c7d4:	80800005 	stb	r2,0(r16)
 400c7d8:	9d86b03a 	or	r3,r19,r22
 400c7dc:	183ff61e 	bne	r3,zero,400c7b8 <__alt_data_end+0xfc00c7b8>
 400c7e0:	90c0004c 	andi	r3,r18,1
 400c7e4:	18014126 	beq	r3,zero,400ccec <___vfprintf_internal_r+0xc34>
 400c7e8:	10803fcc 	andi	r2,r2,255
 400c7ec:	1080201c 	xori	r2,r2,128
 400c7f0:	10bfe004 	addi	r2,r2,-128
 400c7f4:	00c00c04 	movi	r3,48
 400c7f8:	10c13c26 	beq	r2,r3,400ccec <___vfprintf_internal_r+0xc34>
 400c7fc:	80ffffc5 	stb	r3,-1(r16)
 400c800:	d8c02817 	ldw	r3,160(sp)
 400c804:	80bfffc4 	addi	r2,r16,-1
 400c808:	1021883a 	mov	r16,r2
 400c80c:	1887c83a 	sub	r3,r3,r2
 400c810:	d8c02b15 	stw	r3,172(sp)
 400c814:	d8802b17 	ldw	r2,172(sp)
 400c818:	d9002a17 	ldw	r4,168(sp)
 400c81c:	1100010e 	bge	r2,r4,400c824 <___vfprintf_internal_r+0x76c>
 400c820:	2005883a 	mov	r2,r4
 400c824:	d8802915 	stw	r2,164(sp)
 400c828:	d8003215 	stw	zero,200(sp)
 400c82c:	e7003fcc 	andi	fp,fp,255
 400c830:	e700201c 	xori	fp,fp,128
 400c834:	e73fe004 	addi	fp,fp,-128
 400c838:	e0000326 	beq	fp,zero,400c848 <___vfprintf_internal_r+0x790>
 400c83c:	d8c02917 	ldw	r3,164(sp)
 400c840:	18c00044 	addi	r3,r3,1
 400c844:	d8c02915 	stw	r3,164(sp)
 400c848:	90c0008c 	andi	r3,r18,2
 400c84c:	d8c02c15 	stw	r3,176(sp)
 400c850:	18000326 	beq	r3,zero,400c860 <___vfprintf_internal_r+0x7a8>
 400c854:	d8c02917 	ldw	r3,164(sp)
 400c858:	18c00084 	addi	r3,r3,2
 400c85c:	d8c02915 	stw	r3,164(sp)
 400c860:	90c0210c 	andi	r3,r18,132
 400c864:	d8c03015 	stw	r3,192(sp)
 400c868:	1801c51e 	bne	r3,zero,400cf80 <___vfprintf_internal_r+0xec8>
 400c86c:	d9003117 	ldw	r4,196(sp)
 400c870:	d8c02917 	ldw	r3,164(sp)
 400c874:	20e7c83a 	sub	r19,r4,r3
 400c878:	04c1c10e 	bge	zero,r19,400cf80 <___vfprintf_internal_r+0xec8>
 400c87c:	02400404 	movi	r9,16
 400c880:	d8c02017 	ldw	r3,128(sp)
 400c884:	d8801f17 	ldw	r2,124(sp)
 400c888:	4cc52f0e 	bge	r9,r19,400dd48 <___vfprintf_internal_r+0x1c90>
 400c88c:	014100b4 	movhi	r5,1026
 400c890:	2946e884 	addi	r5,r5,7074
 400c894:	dc403b15 	stw	r17,236(sp)
 400c898:	d9403515 	stw	r5,212(sp)
 400c89c:	9823883a 	mov	r17,r19
 400c8a0:	482d883a 	mov	r22,r9
 400c8a4:	9027883a 	mov	r19,r18
 400c8a8:	070001c4 	movi	fp,7
 400c8ac:	8025883a 	mov	r18,r16
 400c8b0:	dc002d17 	ldw	r16,180(sp)
 400c8b4:	00000306 	br	400c8c4 <___vfprintf_internal_r+0x80c>
 400c8b8:	8c7ffc04 	addi	r17,r17,-16
 400c8bc:	42000204 	addi	r8,r8,8
 400c8c0:	b440130e 	bge	r22,r17,400c910 <___vfprintf_internal_r+0x858>
 400c8c4:	010100b4 	movhi	r4,1026
 400c8c8:	18c00404 	addi	r3,r3,16
 400c8cc:	10800044 	addi	r2,r2,1
 400c8d0:	2106e884 	addi	r4,r4,7074
 400c8d4:	41000015 	stw	r4,0(r8)
 400c8d8:	45800115 	stw	r22,4(r8)
 400c8dc:	d8c02015 	stw	r3,128(sp)
 400c8e0:	d8801f15 	stw	r2,124(sp)
 400c8e4:	e0bff40e 	bge	fp,r2,400c8b8 <__alt_data_end+0xfc00c8b8>
 400c8e8:	d9801e04 	addi	r6,sp,120
 400c8ec:	b80b883a 	mov	r5,r23
 400c8f0:	8009883a 	mov	r4,r16
 400c8f4:	4012e540 	call	4012e54 <__sprint_r>
 400c8f8:	103ef31e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400c8fc:	8c7ffc04 	addi	r17,r17,-16
 400c900:	d8c02017 	ldw	r3,128(sp)
 400c904:	d8801f17 	ldw	r2,124(sp)
 400c908:	da000404 	addi	r8,sp,16
 400c90c:	b47fed16 	blt	r22,r17,400c8c4 <__alt_data_end+0xfc00c8c4>
 400c910:	9021883a 	mov	r16,r18
 400c914:	9825883a 	mov	r18,r19
 400c918:	8827883a 	mov	r19,r17
 400c91c:	dc403b17 	ldw	r17,236(sp)
 400c920:	d9403517 	ldw	r5,212(sp)
 400c924:	98c7883a 	add	r3,r19,r3
 400c928:	10800044 	addi	r2,r2,1
 400c92c:	41400015 	stw	r5,0(r8)
 400c930:	44c00115 	stw	r19,4(r8)
 400c934:	d8c02015 	stw	r3,128(sp)
 400c938:	d8801f15 	stw	r2,124(sp)
 400c93c:	010001c4 	movi	r4,7
 400c940:	2082c516 	blt	r4,r2,400d458 <___vfprintf_internal_r+0x13a0>
 400c944:	df002787 	ldb	fp,158(sp)
 400c948:	42000204 	addi	r8,r8,8
 400c94c:	e0000c26 	beq	fp,zero,400c980 <___vfprintf_internal_r+0x8c8>
 400c950:	d8801f17 	ldw	r2,124(sp)
 400c954:	d9002784 	addi	r4,sp,158
 400c958:	18c00044 	addi	r3,r3,1
 400c95c:	10800044 	addi	r2,r2,1
 400c960:	41000015 	stw	r4,0(r8)
 400c964:	01000044 	movi	r4,1
 400c968:	41000115 	stw	r4,4(r8)
 400c96c:	d8c02015 	stw	r3,128(sp)
 400c970:	d8801f15 	stw	r2,124(sp)
 400c974:	010001c4 	movi	r4,7
 400c978:	20825e16 	blt	r4,r2,400d2f4 <___vfprintf_internal_r+0x123c>
 400c97c:	42000204 	addi	r8,r8,8
 400c980:	d8802c17 	ldw	r2,176(sp)
 400c984:	10000c26 	beq	r2,zero,400c9b8 <___vfprintf_internal_r+0x900>
 400c988:	d8801f17 	ldw	r2,124(sp)
 400c98c:	d9002704 	addi	r4,sp,156
 400c990:	18c00084 	addi	r3,r3,2
 400c994:	10800044 	addi	r2,r2,1
 400c998:	41000015 	stw	r4,0(r8)
 400c99c:	01000084 	movi	r4,2
 400c9a0:	41000115 	stw	r4,4(r8)
 400c9a4:	d8c02015 	stw	r3,128(sp)
 400c9a8:	d8801f15 	stw	r2,124(sp)
 400c9ac:	010001c4 	movi	r4,7
 400c9b0:	20825816 	blt	r4,r2,400d314 <___vfprintf_internal_r+0x125c>
 400c9b4:	42000204 	addi	r8,r8,8
 400c9b8:	d9003017 	ldw	r4,192(sp)
 400c9bc:	00802004 	movi	r2,128
 400c9c0:	2081bb26 	beq	r4,r2,400d0b0 <___vfprintf_internal_r+0xff8>
 400c9c4:	d9402a17 	ldw	r5,168(sp)
 400c9c8:	d8802b17 	ldw	r2,172(sp)
 400c9cc:	28adc83a 	sub	r22,r5,r2
 400c9d0:	0580310e 	bge	zero,r22,400ca98 <___vfprintf_internal_r+0x9e0>
 400c9d4:	07000404 	movi	fp,16
 400c9d8:	d8801f17 	ldw	r2,124(sp)
 400c9dc:	e584360e 	bge	fp,r22,400dab8 <___vfprintf_internal_r+0x1a00>
 400c9e0:	014100b4 	movhi	r5,1026
 400c9e4:	2946e484 	addi	r5,r5,7058
 400c9e8:	dc402a15 	stw	r17,168(sp)
 400c9ec:	d9402c15 	stw	r5,176(sp)
 400c9f0:	b023883a 	mov	r17,r22
 400c9f4:	04c001c4 	movi	r19,7
 400c9f8:	a82d883a 	mov	r22,r21
 400c9fc:	902b883a 	mov	r21,r18
 400ca00:	8025883a 	mov	r18,r16
 400ca04:	dc002d17 	ldw	r16,180(sp)
 400ca08:	00000306 	br	400ca18 <___vfprintf_internal_r+0x960>
 400ca0c:	8c7ffc04 	addi	r17,r17,-16
 400ca10:	42000204 	addi	r8,r8,8
 400ca14:	e440110e 	bge	fp,r17,400ca5c <___vfprintf_internal_r+0x9a4>
 400ca18:	18c00404 	addi	r3,r3,16
 400ca1c:	10800044 	addi	r2,r2,1
 400ca20:	45000015 	stw	r20,0(r8)
 400ca24:	47000115 	stw	fp,4(r8)
 400ca28:	d8c02015 	stw	r3,128(sp)
 400ca2c:	d8801f15 	stw	r2,124(sp)
 400ca30:	98bff60e 	bge	r19,r2,400ca0c <__alt_data_end+0xfc00ca0c>
 400ca34:	d9801e04 	addi	r6,sp,120
 400ca38:	b80b883a 	mov	r5,r23
 400ca3c:	8009883a 	mov	r4,r16
 400ca40:	4012e540 	call	4012e54 <__sprint_r>
 400ca44:	103ea01e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400ca48:	8c7ffc04 	addi	r17,r17,-16
 400ca4c:	d8c02017 	ldw	r3,128(sp)
 400ca50:	d8801f17 	ldw	r2,124(sp)
 400ca54:	da000404 	addi	r8,sp,16
 400ca58:	e47fef16 	blt	fp,r17,400ca18 <__alt_data_end+0xfc00ca18>
 400ca5c:	9021883a 	mov	r16,r18
 400ca60:	a825883a 	mov	r18,r21
 400ca64:	b02b883a 	mov	r21,r22
 400ca68:	882d883a 	mov	r22,r17
 400ca6c:	dc402a17 	ldw	r17,168(sp)
 400ca70:	d9002c17 	ldw	r4,176(sp)
 400ca74:	1d87883a 	add	r3,r3,r22
 400ca78:	10800044 	addi	r2,r2,1
 400ca7c:	41000015 	stw	r4,0(r8)
 400ca80:	45800115 	stw	r22,4(r8)
 400ca84:	d8c02015 	stw	r3,128(sp)
 400ca88:	d8801f15 	stw	r2,124(sp)
 400ca8c:	010001c4 	movi	r4,7
 400ca90:	20821016 	blt	r4,r2,400d2d4 <___vfprintf_internal_r+0x121c>
 400ca94:	42000204 	addi	r8,r8,8
 400ca98:	9080400c 	andi	r2,r18,256
 400ca9c:	10013a1e 	bne	r2,zero,400cf88 <___vfprintf_internal_r+0xed0>
 400caa0:	d9402b17 	ldw	r5,172(sp)
 400caa4:	d8801f17 	ldw	r2,124(sp)
 400caa8:	44000015 	stw	r16,0(r8)
 400caac:	1947883a 	add	r3,r3,r5
 400cab0:	10800044 	addi	r2,r2,1
 400cab4:	41400115 	stw	r5,4(r8)
 400cab8:	d8c02015 	stw	r3,128(sp)
 400cabc:	d8801f15 	stw	r2,124(sp)
 400cac0:	010001c4 	movi	r4,7
 400cac4:	2081f516 	blt	r4,r2,400d29c <___vfprintf_internal_r+0x11e4>
 400cac8:	42000204 	addi	r8,r8,8
 400cacc:	9480010c 	andi	r18,r18,4
 400cad0:	90003226 	beq	r18,zero,400cb9c <___vfprintf_internal_r+0xae4>
 400cad4:	d9403117 	ldw	r5,196(sp)
 400cad8:	d8802917 	ldw	r2,164(sp)
 400cadc:	28a1c83a 	sub	r16,r5,r2
 400cae0:	04002e0e 	bge	zero,r16,400cb9c <___vfprintf_internal_r+0xae4>
 400cae4:	04400404 	movi	r17,16
 400cae8:	d8801f17 	ldw	r2,124(sp)
 400caec:	8c04c40e 	bge	r17,r16,400de00 <___vfprintf_internal_r+0x1d48>
 400caf0:	014100b4 	movhi	r5,1026
 400caf4:	2946e884 	addi	r5,r5,7074
 400caf8:	d9403515 	stw	r5,212(sp)
 400cafc:	048001c4 	movi	r18,7
 400cb00:	dcc02d17 	ldw	r19,180(sp)
 400cb04:	00000306 	br	400cb14 <___vfprintf_internal_r+0xa5c>
 400cb08:	843ffc04 	addi	r16,r16,-16
 400cb0c:	42000204 	addi	r8,r8,8
 400cb10:	8c00130e 	bge	r17,r16,400cb60 <___vfprintf_internal_r+0xaa8>
 400cb14:	010100b4 	movhi	r4,1026
 400cb18:	18c00404 	addi	r3,r3,16
 400cb1c:	10800044 	addi	r2,r2,1
 400cb20:	2106e884 	addi	r4,r4,7074
 400cb24:	41000015 	stw	r4,0(r8)
 400cb28:	44400115 	stw	r17,4(r8)
 400cb2c:	d8c02015 	stw	r3,128(sp)
 400cb30:	d8801f15 	stw	r2,124(sp)
 400cb34:	90bff40e 	bge	r18,r2,400cb08 <__alt_data_end+0xfc00cb08>
 400cb38:	d9801e04 	addi	r6,sp,120
 400cb3c:	b80b883a 	mov	r5,r23
 400cb40:	9809883a 	mov	r4,r19
 400cb44:	4012e540 	call	4012e54 <__sprint_r>
 400cb48:	103e5f1e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400cb4c:	843ffc04 	addi	r16,r16,-16
 400cb50:	d8c02017 	ldw	r3,128(sp)
 400cb54:	d8801f17 	ldw	r2,124(sp)
 400cb58:	da000404 	addi	r8,sp,16
 400cb5c:	8c3fed16 	blt	r17,r16,400cb14 <__alt_data_end+0xfc00cb14>
 400cb60:	d9403517 	ldw	r5,212(sp)
 400cb64:	1c07883a 	add	r3,r3,r16
 400cb68:	10800044 	addi	r2,r2,1
 400cb6c:	41400015 	stw	r5,0(r8)
 400cb70:	44000115 	stw	r16,4(r8)
 400cb74:	d8c02015 	stw	r3,128(sp)
 400cb78:	d8801f15 	stw	r2,124(sp)
 400cb7c:	010001c4 	movi	r4,7
 400cb80:	2080060e 	bge	r4,r2,400cb9c <___vfprintf_internal_r+0xae4>
 400cb84:	d9002d17 	ldw	r4,180(sp)
 400cb88:	d9801e04 	addi	r6,sp,120
 400cb8c:	b80b883a 	mov	r5,r23
 400cb90:	4012e540 	call	4012e54 <__sprint_r>
 400cb94:	103e4c1e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400cb98:	d8c02017 	ldw	r3,128(sp)
 400cb9c:	d8803117 	ldw	r2,196(sp)
 400cba0:	d9002917 	ldw	r4,164(sp)
 400cba4:	1100010e 	bge	r2,r4,400cbac <___vfprintf_internal_r+0xaf4>
 400cba8:	2005883a 	mov	r2,r4
 400cbac:	d9402f17 	ldw	r5,188(sp)
 400cbb0:	288b883a 	add	r5,r5,r2
 400cbb4:	d9402f15 	stw	r5,188(sp)
 400cbb8:	1801c01e 	bne	r3,zero,400d2bc <___vfprintf_internal_r+0x1204>
 400cbbc:	a8800007 	ldb	r2,0(r21)
 400cbc0:	d8001f15 	stw	zero,124(sp)
 400cbc4:	da000404 	addi	r8,sp,16
 400cbc8:	103d751e 	bne	r2,zero,400c1a0 <__alt_data_end+0xfc00c1a0>
 400cbcc:	a823883a 	mov	r17,r21
 400cbd0:	003d8b06 	br	400c200 <__alt_data_end+0xfc00c200>
 400cbd4:	8025883a 	mov	r18,r16
 400cbd8:	dc002903 	ldbu	r16,164(sp)
 400cbdc:	e011883a 	mov	r8,fp
 400cbe0:	84003fcc 	andi	r16,r16,255
 400cbe4:	8005e51e 	bne	r16,zero,400e37c <___vfprintf_internal_r+0x22c4>
 400cbe8:	94800414 	ori	r18,r18,16
 400cbec:	9080080c 	andi	r2,r18,32
 400cbf0:	10022b26 	beq	r2,zero,400d4a0 <___vfprintf_internal_r+0x13e8>
 400cbf4:	d9002e17 	ldw	r4,184(sp)
 400cbf8:	d9402a17 	ldw	r5,168(sp)
 400cbfc:	d8002785 	stb	zero,158(sp)
 400cc00:	20c00204 	addi	r3,r4,8
 400cc04:	24c00017 	ldw	r19,0(r4)
 400cc08:	25800117 	ldw	r22,4(r4)
 400cc0c:	28042e16 	blt	r5,zero,400dcc8 <___vfprintf_internal_r+0x1c10>
 400cc10:	013fdfc4 	movi	r4,-129
 400cc14:	9d84b03a 	or	r2,r19,r22
 400cc18:	d8c02e15 	stw	r3,184(sp)
 400cc1c:	9124703a 	and	r18,r18,r4
 400cc20:	0039883a 	mov	fp,zero
 400cc24:	103e801e 	bne	r2,zero,400c628 <__alt_data_end+0xfc00c628>
 400cc28:	d9002a17 	ldw	r4,168(sp)
 400cc2c:	2002e01e 	bne	r4,zero,400d7b0 <___vfprintf_internal_r+0x16f8>
 400cc30:	d8002a15 	stw	zero,168(sp)
 400cc34:	d8002b15 	stw	zero,172(sp)
 400cc38:	dc001e04 	addi	r16,sp,120
 400cc3c:	003ef506 	br	400c814 <__alt_data_end+0xfc00c814>
 400cc40:	8025883a 	mov	r18,r16
 400cc44:	dc002903 	ldbu	r16,164(sp)
 400cc48:	e011883a 	mov	r8,fp
 400cc4c:	84003fcc 	andi	r16,r16,255
 400cc50:	8005ba1e 	bne	r16,zero,400e33c <___vfprintf_internal_r+0x2284>
 400cc54:	010100b4 	movhi	r4,1026
 400cc58:	2106d804 	addi	r4,r4,7008
 400cc5c:	d9003915 	stw	r4,228(sp)
 400cc60:	9080080c 	andi	r2,r18,32
 400cc64:	10006126 	beq	r2,zero,400cdec <___vfprintf_internal_r+0xd34>
 400cc68:	d9402e17 	ldw	r5,184(sp)
 400cc6c:	2cc00017 	ldw	r19,0(r5)
 400cc70:	2d800117 	ldw	r22,4(r5)
 400cc74:	29400204 	addi	r5,r5,8
 400cc78:	d9402e15 	stw	r5,184(sp)
 400cc7c:	9080004c 	andi	r2,r18,1
 400cc80:	1001ac26 	beq	r2,zero,400d334 <___vfprintf_internal_r+0x127c>
 400cc84:	9d84b03a 	or	r2,r19,r22
 400cc88:	10038526 	beq	r2,zero,400daa0 <___vfprintf_internal_r+0x19e8>
 400cc8c:	d8c02a17 	ldw	r3,168(sp)
 400cc90:	00800c04 	movi	r2,48
 400cc94:	d8802705 	stb	r2,156(sp)
 400cc98:	dc402745 	stb	r17,157(sp)
 400cc9c:	d8002785 	stb	zero,158(sp)
 400cca0:	90800094 	ori	r2,r18,2
 400cca4:	18047916 	blt	r3,zero,400de8c <___vfprintf_internal_r+0x1dd4>
 400cca8:	00bfdfc4 	movi	r2,-129
 400ccac:	90a4703a 	and	r18,r18,r2
 400ccb0:	94800094 	ori	r18,r18,2
 400ccb4:	0039883a 	mov	fp,zero
 400ccb8:	d9003917 	ldw	r4,228(sp)
 400ccbc:	dc001e04 	addi	r16,sp,120
 400ccc0:	988003cc 	andi	r2,r19,15
 400ccc4:	b006973a 	slli	r3,r22,28
 400ccc8:	2085883a 	add	r2,r4,r2
 400cccc:	9826d13a 	srli	r19,r19,4
 400ccd0:	10800003 	ldbu	r2,0(r2)
 400ccd4:	b02cd13a 	srli	r22,r22,4
 400ccd8:	843fffc4 	addi	r16,r16,-1
 400ccdc:	1ce6b03a 	or	r19,r3,r19
 400cce0:	80800005 	stb	r2,0(r16)
 400cce4:	9d84b03a 	or	r2,r19,r22
 400cce8:	103ff51e 	bne	r2,zero,400ccc0 <__alt_data_end+0xfc00ccc0>
 400ccec:	d8c02817 	ldw	r3,160(sp)
 400ccf0:	1c07c83a 	sub	r3,r3,r16
 400ccf4:	d8c02b15 	stw	r3,172(sp)
 400ccf8:	003ec606 	br	400c814 <__alt_data_end+0xfc00c814>
 400ccfc:	8025883a 	mov	r18,r16
 400cd00:	dc002903 	ldbu	r16,164(sp)
 400cd04:	e011883a 	mov	r8,fp
 400cd08:	84003fcc 	andi	r16,r16,255
 400cd0c:	803e9626 	beq	r16,zero,400c768 <__alt_data_end+0xfc00c768>
 400cd10:	d8c02b03 	ldbu	r3,172(sp)
 400cd14:	d8c02785 	stb	r3,158(sp)
 400cd18:	003e9306 	br	400c768 <__alt_data_end+0xfc00c768>
 400cd1c:	00c00044 	movi	r3,1
 400cd20:	d8c02905 	stb	r3,164(sp)
 400cd24:	00c00ac4 	movi	r3,43
 400cd28:	d8c02b05 	stb	r3,172(sp)
 400cd2c:	ac400007 	ldb	r17,0(r21)
 400cd30:	003d4306 	br	400c240 <__alt_data_end+0xfc00c240>
 400cd34:	84000814 	ori	r16,r16,32
 400cd38:	ac400007 	ldb	r17,0(r21)
 400cd3c:	003d4006 	br	400c240 <__alt_data_end+0xfc00c240>
 400cd40:	d8802e17 	ldw	r2,184(sp)
 400cd44:	8025883a 	mov	r18,r16
 400cd48:	d8002785 	stb	zero,158(sp)
 400cd4c:	14000017 	ldw	r16,0(r2)
 400cd50:	e011883a 	mov	r8,fp
 400cd54:	14c00104 	addi	r19,r2,4
 400cd58:	80042d26 	beq	r16,zero,400de10 <___vfprintf_internal_r+0x1d58>
 400cd5c:	d8c02a17 	ldw	r3,168(sp)
 400cd60:	1803e416 	blt	r3,zero,400dcf4 <___vfprintf_internal_r+0x1c3c>
 400cd64:	180d883a 	mov	r6,r3
 400cd68:	000b883a 	mov	r5,zero
 400cd6c:	8009883a 	mov	r4,r16
 400cd70:	df003d15 	stw	fp,244(sp)
 400cd74:	40111e40 	call	40111e4 <memchr>
 400cd78:	da003d17 	ldw	r8,244(sp)
 400cd7c:	10046826 	beq	r2,zero,400df20 <___vfprintf_internal_r+0x1e68>
 400cd80:	1405c83a 	sub	r2,r2,r16
 400cd84:	d8802b15 	stw	r2,172(sp)
 400cd88:	1003e016 	blt	r2,zero,400dd0c <___vfprintf_internal_r+0x1c54>
 400cd8c:	df002783 	ldbu	fp,158(sp)
 400cd90:	d8802915 	stw	r2,164(sp)
 400cd94:	dcc02e15 	stw	r19,184(sp)
 400cd98:	d8002a15 	stw	zero,168(sp)
 400cd9c:	d8003215 	stw	zero,200(sp)
 400cda0:	003ea206 	br	400c82c <__alt_data_end+0xfc00c82c>
 400cda4:	8025883a 	mov	r18,r16
 400cda8:	dc002903 	ldbu	r16,164(sp)
 400cdac:	e011883a 	mov	r8,fp
 400cdb0:	84003fcc 	andi	r16,r16,255
 400cdb4:	803f8d26 	beq	r16,zero,400cbec <__alt_data_end+0xfc00cbec>
 400cdb8:	d8c02b03 	ldbu	r3,172(sp)
 400cdbc:	d8c02785 	stb	r3,158(sp)
 400cdc0:	003f8a06 	br	400cbec <__alt_data_end+0xfc00cbec>
 400cdc4:	8025883a 	mov	r18,r16
 400cdc8:	dc002903 	ldbu	r16,164(sp)
 400cdcc:	e011883a 	mov	r8,fp
 400cdd0:	84003fcc 	andi	r16,r16,255
 400cdd4:	8005661e 	bne	r16,zero,400e370 <___vfprintf_internal_r+0x22b8>
 400cdd8:	010100b4 	movhi	r4,1026
 400cddc:	2106dd04 	addi	r4,r4,7028
 400cde0:	d9003915 	stw	r4,228(sp)
 400cde4:	9080080c 	andi	r2,r18,32
 400cde8:	103f9f1e 	bne	r2,zero,400cc68 <__alt_data_end+0xfc00cc68>
 400cdec:	9080040c 	andi	r2,r18,16
 400cdf0:	1002eb26 	beq	r2,zero,400d9a0 <___vfprintf_internal_r+0x18e8>
 400cdf4:	d8802e17 	ldw	r2,184(sp)
 400cdf8:	002d883a 	mov	r22,zero
 400cdfc:	14c00017 	ldw	r19,0(r2)
 400ce00:	10800104 	addi	r2,r2,4
 400ce04:	d8802e15 	stw	r2,184(sp)
 400ce08:	003f9c06 	br	400cc7c <__alt_data_end+0xfc00cc7c>
 400ce0c:	d8802b07 	ldb	r2,172(sp)
 400ce10:	1002e11e 	bne	r2,zero,400d998 <___vfprintf_internal_r+0x18e0>
 400ce14:	00c00044 	movi	r3,1
 400ce18:	d8c02905 	stb	r3,164(sp)
 400ce1c:	00c00804 	movi	r3,32
 400ce20:	d8c02b05 	stb	r3,172(sp)
 400ce24:	ac400007 	ldb	r17,0(r21)
 400ce28:	003d0506 	br	400c240 <__alt_data_end+0xfc00c240>
 400ce2c:	84000054 	ori	r16,r16,1
 400ce30:	ac400007 	ldb	r17,0(r21)
 400ce34:	003d0206 	br	400c240 <__alt_data_end+0xfc00c240>
 400ce38:	8025883a 	mov	r18,r16
 400ce3c:	dc002903 	ldbu	r16,164(sp)
 400ce40:	e011883a 	mov	r8,fp
 400ce44:	84003fcc 	andi	r16,r16,255
 400ce48:	803de726 	beq	r16,zero,400c5e8 <__alt_data_end+0xfc00c5e8>
 400ce4c:	d8c02b03 	ldbu	r3,172(sp)
 400ce50:	d8c02785 	stb	r3,158(sp)
 400ce54:	003de406 	br	400c5e8 <__alt_data_end+0xfc00c5e8>
 400ce58:	84001014 	ori	r16,r16,64
 400ce5c:	ac400007 	ldb	r17,0(r21)
 400ce60:	003cf706 	br	400c240 <__alt_data_end+0xfc00c240>
 400ce64:	ac400007 	ldb	r17,0(r21)
 400ce68:	00801b04 	movi	r2,108
 400ce6c:	88838f26 	beq	r17,r2,400dcac <___vfprintf_internal_r+0x1bf4>
 400ce70:	84000414 	ori	r16,r16,16
 400ce74:	003cf206 	br	400c240 <__alt_data_end+0xfc00c240>
 400ce78:	8025883a 	mov	r18,r16
 400ce7c:	dc002903 	ldbu	r16,164(sp)
 400ce80:	e011883a 	mov	r8,fp
 400ce84:	84003fcc 	andi	r16,r16,255
 400ce88:	80053f1e 	bne	r16,zero,400e388 <___vfprintf_internal_r+0x22d0>
 400ce8c:	9080080c 	andi	r2,r18,32
 400ce90:	1002d226 	beq	r2,zero,400d9dc <___vfprintf_internal_r+0x1924>
 400ce94:	d9002e17 	ldw	r4,184(sp)
 400ce98:	d9402f17 	ldw	r5,188(sp)
 400ce9c:	20800017 	ldw	r2,0(r4)
 400cea0:	2807d7fa 	srai	r3,r5,31
 400cea4:	21000104 	addi	r4,r4,4
 400cea8:	d9002e15 	stw	r4,184(sp)
 400ceac:	11400015 	stw	r5,0(r2)
 400ceb0:	10c00115 	stw	r3,4(r2)
 400ceb4:	003cb806 	br	400c198 <__alt_data_end+0xfc00c198>
 400ceb8:	d8c02e17 	ldw	r3,184(sp)
 400cebc:	d9002e17 	ldw	r4,184(sp)
 400cec0:	8025883a 	mov	r18,r16
 400cec4:	18800017 	ldw	r2,0(r3)
 400cec8:	21000104 	addi	r4,r4,4
 400cecc:	00c00044 	movi	r3,1
 400ced0:	e011883a 	mov	r8,fp
 400ced4:	d8c02915 	stw	r3,164(sp)
 400ced8:	d8002785 	stb	zero,158(sp)
 400cedc:	d8801405 	stb	r2,80(sp)
 400cee0:	d9002e15 	stw	r4,184(sp)
 400cee4:	d8c02b15 	stw	r3,172(sp)
 400cee8:	d8002a15 	stw	zero,168(sp)
 400ceec:	d8003215 	stw	zero,200(sp)
 400cef0:	dc001404 	addi	r16,sp,80
 400cef4:	0039883a 	mov	fp,zero
 400cef8:	003e5306 	br	400c848 <__alt_data_end+0xfc00c848>
 400cefc:	010100b4 	movhi	r4,1026
 400cf00:	2106dd04 	addi	r4,r4,7028
 400cf04:	0039883a 	mov	fp,zero
 400cf08:	d9003915 	stw	r4,228(sp)
 400cf0c:	04401e04 	movi	r17,120
 400cf10:	003f6906 	br	400ccb8 <__alt_data_end+0xfc00ccb8>
 400cf14:	8025883a 	mov	r18,r16
 400cf18:	dc002903 	ldbu	r16,164(sp)
 400cf1c:	e011883a 	mov	r8,fp
 400cf20:	84003fcc 	andi	r16,r16,255
 400cf24:	8005081e 	bne	r16,zero,400e348 <___vfprintf_internal_r+0x2290>
 400cf28:	883d6126 	beq	r17,zero,400c4b0 <__alt_data_end+0xfc00c4b0>
 400cf2c:	00c00044 	movi	r3,1
 400cf30:	d8c02915 	stw	r3,164(sp)
 400cf34:	dc401405 	stb	r17,80(sp)
 400cf38:	d8002785 	stb	zero,158(sp)
 400cf3c:	003fe906 	br	400cee4 <__alt_data_end+0xfc00cee4>
 400cf40:	014100b4 	movhi	r5,1026
 400cf44:	2946dd04 	addi	r5,r5,7028
 400cf48:	d9403915 	stw	r5,228(sp)
 400cf4c:	d8c02e15 	stw	r3,184(sp)
 400cf50:	1025883a 	mov	r18,r2
 400cf54:	04401e04 	movi	r17,120
 400cf58:	9d84b03a 	or	r2,r19,r22
 400cf5c:	1000fc1e 	bne	r2,zero,400d350 <___vfprintf_internal_r+0x1298>
 400cf60:	0039883a 	mov	fp,zero
 400cf64:	00800084 	movi	r2,2
 400cf68:	10803fcc 	andi	r2,r2,255
 400cf6c:	00c00044 	movi	r3,1
 400cf70:	10c20f26 	beq	r2,r3,400d7b0 <___vfprintf_internal_r+0x16f8>
 400cf74:	00c00084 	movi	r3,2
 400cf78:	10fd3326 	beq	r2,r3,400c448 <__alt_data_end+0xfc00c448>
 400cf7c:	003e0b06 	br	400c7ac <__alt_data_end+0xfc00c7ac>
 400cf80:	d8c02017 	ldw	r3,128(sp)
 400cf84:	003e7106 	br	400c94c <__alt_data_end+0xfc00c94c>
 400cf88:	00801944 	movi	r2,101
 400cf8c:	14407e0e 	bge	r2,r17,400d188 <___vfprintf_internal_r+0x10d0>
 400cf90:	d9003617 	ldw	r4,216(sp)
 400cf94:	d9403817 	ldw	r5,224(sp)
 400cf98:	000d883a 	mov	r6,zero
 400cf9c:	000f883a 	mov	r7,zero
 400cfa0:	d8c03c15 	stw	r3,240(sp)
 400cfa4:	da003d15 	stw	r8,244(sp)
 400cfa8:	4016bd80 	call	4016bd8 <__eqdf2>
 400cfac:	d8c03c17 	ldw	r3,240(sp)
 400cfb0:	da003d17 	ldw	r8,244(sp)
 400cfb4:	1000f71e 	bne	r2,zero,400d394 <___vfprintf_internal_r+0x12dc>
 400cfb8:	d8801f17 	ldw	r2,124(sp)
 400cfbc:	010100b4 	movhi	r4,1026
 400cfc0:	2106e404 	addi	r4,r4,7056
 400cfc4:	18c00044 	addi	r3,r3,1
 400cfc8:	10800044 	addi	r2,r2,1
 400cfcc:	41000015 	stw	r4,0(r8)
 400cfd0:	01000044 	movi	r4,1
 400cfd4:	41000115 	stw	r4,4(r8)
 400cfd8:	d8c02015 	stw	r3,128(sp)
 400cfdc:	d8801f15 	stw	r2,124(sp)
 400cfe0:	010001c4 	movi	r4,7
 400cfe4:	2082b816 	blt	r4,r2,400dac8 <___vfprintf_internal_r+0x1a10>
 400cfe8:	42000204 	addi	r8,r8,8
 400cfec:	d8802617 	ldw	r2,152(sp)
 400cff0:	d9403317 	ldw	r5,204(sp)
 400cff4:	11400216 	blt	r2,r5,400d000 <___vfprintf_internal_r+0xf48>
 400cff8:	9080004c 	andi	r2,r18,1
 400cffc:	103eb326 	beq	r2,zero,400cacc <__alt_data_end+0xfc00cacc>
 400d000:	d8803717 	ldw	r2,220(sp)
 400d004:	d9003417 	ldw	r4,208(sp)
 400d008:	d9403717 	ldw	r5,220(sp)
 400d00c:	1887883a 	add	r3,r3,r2
 400d010:	d8801f17 	ldw	r2,124(sp)
 400d014:	41000015 	stw	r4,0(r8)
 400d018:	41400115 	stw	r5,4(r8)
 400d01c:	10800044 	addi	r2,r2,1
 400d020:	d8c02015 	stw	r3,128(sp)
 400d024:	d8801f15 	stw	r2,124(sp)
 400d028:	010001c4 	movi	r4,7
 400d02c:	20832916 	blt	r4,r2,400dcd4 <___vfprintf_internal_r+0x1c1c>
 400d030:	42000204 	addi	r8,r8,8
 400d034:	d8803317 	ldw	r2,204(sp)
 400d038:	143fffc4 	addi	r16,r2,-1
 400d03c:	043ea30e 	bge	zero,r16,400cacc <__alt_data_end+0xfc00cacc>
 400d040:	04400404 	movi	r17,16
 400d044:	d8801f17 	ldw	r2,124(sp)
 400d048:	8c00880e 	bge	r17,r16,400d26c <___vfprintf_internal_r+0x11b4>
 400d04c:	014100b4 	movhi	r5,1026
 400d050:	2946e484 	addi	r5,r5,7058
 400d054:	d9402c15 	stw	r5,176(sp)
 400d058:	058001c4 	movi	r22,7
 400d05c:	dcc02d17 	ldw	r19,180(sp)
 400d060:	00000306 	br	400d070 <___vfprintf_internal_r+0xfb8>
 400d064:	42000204 	addi	r8,r8,8
 400d068:	843ffc04 	addi	r16,r16,-16
 400d06c:	8c00820e 	bge	r17,r16,400d278 <___vfprintf_internal_r+0x11c0>
 400d070:	18c00404 	addi	r3,r3,16
 400d074:	10800044 	addi	r2,r2,1
 400d078:	45000015 	stw	r20,0(r8)
 400d07c:	44400115 	stw	r17,4(r8)
 400d080:	d8c02015 	stw	r3,128(sp)
 400d084:	d8801f15 	stw	r2,124(sp)
 400d088:	b0bff60e 	bge	r22,r2,400d064 <__alt_data_end+0xfc00d064>
 400d08c:	d9801e04 	addi	r6,sp,120
 400d090:	b80b883a 	mov	r5,r23
 400d094:	9809883a 	mov	r4,r19
 400d098:	4012e540 	call	4012e54 <__sprint_r>
 400d09c:	103d0a1e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400d0a0:	d8c02017 	ldw	r3,128(sp)
 400d0a4:	d8801f17 	ldw	r2,124(sp)
 400d0a8:	da000404 	addi	r8,sp,16
 400d0ac:	003fee06 	br	400d068 <__alt_data_end+0xfc00d068>
 400d0b0:	d9403117 	ldw	r5,196(sp)
 400d0b4:	d8802917 	ldw	r2,164(sp)
 400d0b8:	28adc83a 	sub	r22,r5,r2
 400d0bc:	05be410e 	bge	zero,r22,400c9c4 <__alt_data_end+0xfc00c9c4>
 400d0c0:	07000404 	movi	fp,16
 400d0c4:	d8801f17 	ldw	r2,124(sp)
 400d0c8:	e5838f0e 	bge	fp,r22,400df08 <___vfprintf_internal_r+0x1e50>
 400d0cc:	014100b4 	movhi	r5,1026
 400d0d0:	2946e484 	addi	r5,r5,7058
 400d0d4:	dc403015 	stw	r17,192(sp)
 400d0d8:	d9402c15 	stw	r5,176(sp)
 400d0dc:	b023883a 	mov	r17,r22
 400d0e0:	04c001c4 	movi	r19,7
 400d0e4:	a82d883a 	mov	r22,r21
 400d0e8:	902b883a 	mov	r21,r18
 400d0ec:	8025883a 	mov	r18,r16
 400d0f0:	dc002d17 	ldw	r16,180(sp)
 400d0f4:	00000306 	br	400d104 <___vfprintf_internal_r+0x104c>
 400d0f8:	8c7ffc04 	addi	r17,r17,-16
 400d0fc:	42000204 	addi	r8,r8,8
 400d100:	e440110e 	bge	fp,r17,400d148 <___vfprintf_internal_r+0x1090>
 400d104:	18c00404 	addi	r3,r3,16
 400d108:	10800044 	addi	r2,r2,1
 400d10c:	45000015 	stw	r20,0(r8)
 400d110:	47000115 	stw	fp,4(r8)
 400d114:	d8c02015 	stw	r3,128(sp)
 400d118:	d8801f15 	stw	r2,124(sp)
 400d11c:	98bff60e 	bge	r19,r2,400d0f8 <__alt_data_end+0xfc00d0f8>
 400d120:	d9801e04 	addi	r6,sp,120
 400d124:	b80b883a 	mov	r5,r23
 400d128:	8009883a 	mov	r4,r16
 400d12c:	4012e540 	call	4012e54 <__sprint_r>
 400d130:	103ce51e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400d134:	8c7ffc04 	addi	r17,r17,-16
 400d138:	d8c02017 	ldw	r3,128(sp)
 400d13c:	d8801f17 	ldw	r2,124(sp)
 400d140:	da000404 	addi	r8,sp,16
 400d144:	e47fef16 	blt	fp,r17,400d104 <__alt_data_end+0xfc00d104>
 400d148:	9021883a 	mov	r16,r18
 400d14c:	a825883a 	mov	r18,r21
 400d150:	b02b883a 	mov	r21,r22
 400d154:	882d883a 	mov	r22,r17
 400d158:	dc403017 	ldw	r17,192(sp)
 400d15c:	d9002c17 	ldw	r4,176(sp)
 400d160:	1d87883a 	add	r3,r3,r22
 400d164:	10800044 	addi	r2,r2,1
 400d168:	41000015 	stw	r4,0(r8)
 400d16c:	45800115 	stw	r22,4(r8)
 400d170:	d8c02015 	stw	r3,128(sp)
 400d174:	d8801f15 	stw	r2,124(sp)
 400d178:	010001c4 	movi	r4,7
 400d17c:	20818e16 	blt	r4,r2,400d7b8 <___vfprintf_internal_r+0x1700>
 400d180:	42000204 	addi	r8,r8,8
 400d184:	003e0f06 	br	400c9c4 <__alt_data_end+0xfc00c9c4>
 400d188:	d9403317 	ldw	r5,204(sp)
 400d18c:	00800044 	movi	r2,1
 400d190:	18c00044 	addi	r3,r3,1
 400d194:	1141530e 	bge	r2,r5,400d6e4 <___vfprintf_internal_r+0x162c>
 400d198:	dc401f17 	ldw	r17,124(sp)
 400d19c:	00800044 	movi	r2,1
 400d1a0:	40800115 	stw	r2,4(r8)
 400d1a4:	8c400044 	addi	r17,r17,1
 400d1a8:	44000015 	stw	r16,0(r8)
 400d1ac:	d8c02015 	stw	r3,128(sp)
 400d1b0:	dc401f15 	stw	r17,124(sp)
 400d1b4:	008001c4 	movi	r2,7
 400d1b8:	14416b16 	blt	r2,r17,400d768 <___vfprintf_internal_r+0x16b0>
 400d1bc:	42000204 	addi	r8,r8,8
 400d1c0:	d8803717 	ldw	r2,220(sp)
 400d1c4:	d9003417 	ldw	r4,208(sp)
 400d1c8:	8c400044 	addi	r17,r17,1
 400d1cc:	10c7883a 	add	r3,r2,r3
 400d1d0:	40800115 	stw	r2,4(r8)
 400d1d4:	41000015 	stw	r4,0(r8)
 400d1d8:	d8c02015 	stw	r3,128(sp)
 400d1dc:	dc401f15 	stw	r17,124(sp)
 400d1e0:	008001c4 	movi	r2,7
 400d1e4:	14416916 	blt	r2,r17,400d78c <___vfprintf_internal_r+0x16d4>
 400d1e8:	45800204 	addi	r22,r8,8
 400d1ec:	d9003617 	ldw	r4,216(sp)
 400d1f0:	d9403817 	ldw	r5,224(sp)
 400d1f4:	000d883a 	mov	r6,zero
 400d1f8:	000f883a 	mov	r7,zero
 400d1fc:	d8c03c15 	stw	r3,240(sp)
 400d200:	4016bd80 	call	4016bd8 <__eqdf2>
 400d204:	d8c03c17 	ldw	r3,240(sp)
 400d208:	1000bc26 	beq	r2,zero,400d4fc <___vfprintf_internal_r+0x1444>
 400d20c:	d9403317 	ldw	r5,204(sp)
 400d210:	84000044 	addi	r16,r16,1
 400d214:	8c400044 	addi	r17,r17,1
 400d218:	28bfffc4 	addi	r2,r5,-1
 400d21c:	1887883a 	add	r3,r3,r2
 400d220:	b0800115 	stw	r2,4(r22)
 400d224:	b4000015 	stw	r16,0(r22)
 400d228:	d8c02015 	stw	r3,128(sp)
 400d22c:	dc401f15 	stw	r17,124(sp)
 400d230:	008001c4 	movi	r2,7
 400d234:	14414316 	blt	r2,r17,400d744 <___vfprintf_internal_r+0x168c>
 400d238:	b5800204 	addi	r22,r22,8
 400d23c:	d9003a17 	ldw	r4,232(sp)
 400d240:	df0022c4 	addi	fp,sp,139
 400d244:	8c400044 	addi	r17,r17,1
 400d248:	20c7883a 	add	r3,r4,r3
 400d24c:	b7000015 	stw	fp,0(r22)
 400d250:	b1000115 	stw	r4,4(r22)
 400d254:	d8c02015 	stw	r3,128(sp)
 400d258:	dc401f15 	stw	r17,124(sp)
 400d25c:	008001c4 	movi	r2,7
 400d260:	14400e16 	blt	r2,r17,400d29c <___vfprintf_internal_r+0x11e4>
 400d264:	b2000204 	addi	r8,r22,8
 400d268:	003e1806 	br	400cacc <__alt_data_end+0xfc00cacc>
 400d26c:	010100b4 	movhi	r4,1026
 400d270:	2106e484 	addi	r4,r4,7058
 400d274:	d9002c15 	stw	r4,176(sp)
 400d278:	d9002c17 	ldw	r4,176(sp)
 400d27c:	1c07883a 	add	r3,r3,r16
 400d280:	44000115 	stw	r16,4(r8)
 400d284:	41000015 	stw	r4,0(r8)
 400d288:	10800044 	addi	r2,r2,1
 400d28c:	d8c02015 	stw	r3,128(sp)
 400d290:	d8801f15 	stw	r2,124(sp)
 400d294:	010001c4 	movi	r4,7
 400d298:	20be0b0e 	bge	r4,r2,400cac8 <__alt_data_end+0xfc00cac8>
 400d29c:	d9002d17 	ldw	r4,180(sp)
 400d2a0:	d9801e04 	addi	r6,sp,120
 400d2a4:	b80b883a 	mov	r5,r23
 400d2a8:	4012e540 	call	4012e54 <__sprint_r>
 400d2ac:	103c861e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400d2b0:	d8c02017 	ldw	r3,128(sp)
 400d2b4:	da000404 	addi	r8,sp,16
 400d2b8:	003e0406 	br	400cacc <__alt_data_end+0xfc00cacc>
 400d2bc:	d9002d17 	ldw	r4,180(sp)
 400d2c0:	d9801e04 	addi	r6,sp,120
 400d2c4:	b80b883a 	mov	r5,r23
 400d2c8:	4012e540 	call	4012e54 <__sprint_r>
 400d2cc:	103e3b26 	beq	r2,zero,400cbbc <__alt_data_end+0xfc00cbbc>
 400d2d0:	003c7d06 	br	400c4c8 <__alt_data_end+0xfc00c4c8>
 400d2d4:	d9002d17 	ldw	r4,180(sp)
 400d2d8:	d9801e04 	addi	r6,sp,120
 400d2dc:	b80b883a 	mov	r5,r23
 400d2e0:	4012e540 	call	4012e54 <__sprint_r>
 400d2e4:	103c781e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400d2e8:	d8c02017 	ldw	r3,128(sp)
 400d2ec:	da000404 	addi	r8,sp,16
 400d2f0:	003de906 	br	400ca98 <__alt_data_end+0xfc00ca98>
 400d2f4:	d9002d17 	ldw	r4,180(sp)
 400d2f8:	d9801e04 	addi	r6,sp,120
 400d2fc:	b80b883a 	mov	r5,r23
 400d300:	4012e540 	call	4012e54 <__sprint_r>
 400d304:	103c701e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400d308:	d8c02017 	ldw	r3,128(sp)
 400d30c:	da000404 	addi	r8,sp,16
 400d310:	003d9b06 	br	400c980 <__alt_data_end+0xfc00c980>
 400d314:	d9002d17 	ldw	r4,180(sp)
 400d318:	d9801e04 	addi	r6,sp,120
 400d31c:	b80b883a 	mov	r5,r23
 400d320:	4012e540 	call	4012e54 <__sprint_r>
 400d324:	103c681e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400d328:	d8c02017 	ldw	r3,128(sp)
 400d32c:	da000404 	addi	r8,sp,16
 400d330:	003da106 	br	400c9b8 <__alt_data_end+0xfc00c9b8>
 400d334:	d9402a17 	ldw	r5,168(sp)
 400d338:	d8002785 	stb	zero,158(sp)
 400d33c:	283f0616 	blt	r5,zero,400cf58 <__alt_data_end+0xfc00cf58>
 400d340:	00ffdfc4 	movi	r3,-129
 400d344:	9d84b03a 	or	r2,r19,r22
 400d348:	90e4703a 	and	r18,r18,r3
 400d34c:	103c3b26 	beq	r2,zero,400c43c <__alt_data_end+0xfc00c43c>
 400d350:	0039883a 	mov	fp,zero
 400d354:	003e5806 	br	400ccb8 <__alt_data_end+0xfc00ccb8>
 400d358:	9080040c 	andi	r2,r18,16
 400d35c:	1001b326 	beq	r2,zero,400da2c <___vfprintf_internal_r+0x1974>
 400d360:	d8c02e17 	ldw	r3,184(sp)
 400d364:	d9002a17 	ldw	r4,168(sp)
 400d368:	d8002785 	stb	zero,158(sp)
 400d36c:	18800104 	addi	r2,r3,4
 400d370:	1cc00017 	ldw	r19,0(r3)
 400d374:	002d883a 	mov	r22,zero
 400d378:	2001b516 	blt	r4,zero,400da50 <___vfprintf_internal_r+0x1998>
 400d37c:	00ffdfc4 	movi	r3,-129
 400d380:	d8802e15 	stw	r2,184(sp)
 400d384:	90e4703a 	and	r18,r18,r3
 400d388:	983d0526 	beq	r19,zero,400c7a0 <__alt_data_end+0xfc00c7a0>
 400d38c:	0039883a 	mov	fp,zero
 400d390:	003d0806 	br	400c7b4 <__alt_data_end+0xfc00c7b4>
 400d394:	dc402617 	ldw	r17,152(sp)
 400d398:	0441d30e 	bge	zero,r17,400dae8 <___vfprintf_internal_r+0x1a30>
 400d39c:	dc403217 	ldw	r17,200(sp)
 400d3a0:	d8803317 	ldw	r2,204(sp)
 400d3a4:	1440010e 	bge	r2,r17,400d3ac <___vfprintf_internal_r+0x12f4>
 400d3a8:	1023883a 	mov	r17,r2
 400d3ac:	04400a0e 	bge	zero,r17,400d3d8 <___vfprintf_internal_r+0x1320>
 400d3b0:	d8801f17 	ldw	r2,124(sp)
 400d3b4:	1c47883a 	add	r3,r3,r17
 400d3b8:	44000015 	stw	r16,0(r8)
 400d3bc:	10800044 	addi	r2,r2,1
 400d3c0:	44400115 	stw	r17,4(r8)
 400d3c4:	d8c02015 	stw	r3,128(sp)
 400d3c8:	d8801f15 	stw	r2,124(sp)
 400d3cc:	010001c4 	movi	r4,7
 400d3d0:	20826516 	blt	r4,r2,400dd68 <___vfprintf_internal_r+0x1cb0>
 400d3d4:	42000204 	addi	r8,r8,8
 400d3d8:	88026116 	blt	r17,zero,400dd60 <___vfprintf_internal_r+0x1ca8>
 400d3dc:	d9003217 	ldw	r4,200(sp)
 400d3e0:	2463c83a 	sub	r17,r4,r17
 400d3e4:	04407b0e 	bge	zero,r17,400d5d4 <___vfprintf_internal_r+0x151c>
 400d3e8:	05800404 	movi	r22,16
 400d3ec:	d8801f17 	ldw	r2,124(sp)
 400d3f0:	b4419d0e 	bge	r22,r17,400da68 <___vfprintf_internal_r+0x19b0>
 400d3f4:	010100b4 	movhi	r4,1026
 400d3f8:	2106e484 	addi	r4,r4,7058
 400d3fc:	d9002c15 	stw	r4,176(sp)
 400d400:	070001c4 	movi	fp,7
 400d404:	dcc02d17 	ldw	r19,180(sp)
 400d408:	00000306 	br	400d418 <___vfprintf_internal_r+0x1360>
 400d40c:	42000204 	addi	r8,r8,8
 400d410:	8c7ffc04 	addi	r17,r17,-16
 400d414:	b441970e 	bge	r22,r17,400da74 <___vfprintf_internal_r+0x19bc>
 400d418:	18c00404 	addi	r3,r3,16
 400d41c:	10800044 	addi	r2,r2,1
 400d420:	45000015 	stw	r20,0(r8)
 400d424:	45800115 	stw	r22,4(r8)
 400d428:	d8c02015 	stw	r3,128(sp)
 400d42c:	d8801f15 	stw	r2,124(sp)
 400d430:	e0bff60e 	bge	fp,r2,400d40c <__alt_data_end+0xfc00d40c>
 400d434:	d9801e04 	addi	r6,sp,120
 400d438:	b80b883a 	mov	r5,r23
 400d43c:	9809883a 	mov	r4,r19
 400d440:	4012e540 	call	4012e54 <__sprint_r>
 400d444:	103c201e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400d448:	d8c02017 	ldw	r3,128(sp)
 400d44c:	d8801f17 	ldw	r2,124(sp)
 400d450:	da000404 	addi	r8,sp,16
 400d454:	003fee06 	br	400d410 <__alt_data_end+0xfc00d410>
 400d458:	d9002d17 	ldw	r4,180(sp)
 400d45c:	d9801e04 	addi	r6,sp,120
 400d460:	b80b883a 	mov	r5,r23
 400d464:	4012e540 	call	4012e54 <__sprint_r>
 400d468:	103c171e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400d46c:	d8c02017 	ldw	r3,128(sp)
 400d470:	df002787 	ldb	fp,158(sp)
 400d474:	da000404 	addi	r8,sp,16
 400d478:	003d3406 	br	400c94c <__alt_data_end+0xfc00c94c>
 400d47c:	9080040c 	andi	r2,r18,16
 400d480:	10016126 	beq	r2,zero,400da08 <___vfprintf_internal_r+0x1950>
 400d484:	d9402e17 	ldw	r5,184(sp)
 400d488:	2cc00017 	ldw	r19,0(r5)
 400d48c:	29400104 	addi	r5,r5,4
 400d490:	d9402e15 	stw	r5,184(sp)
 400d494:	982dd7fa 	srai	r22,r19,31
 400d498:	b005883a 	mov	r2,r22
 400d49c:	003c5a06 	br	400c608 <__alt_data_end+0xfc00c608>
 400d4a0:	9080040c 	andi	r2,r18,16
 400d4a4:	10003526 	beq	r2,zero,400d57c <___vfprintf_internal_r+0x14c4>
 400d4a8:	d8c02e17 	ldw	r3,184(sp)
 400d4ac:	d9002a17 	ldw	r4,168(sp)
 400d4b0:	d8002785 	stb	zero,158(sp)
 400d4b4:	18800104 	addi	r2,r3,4
 400d4b8:	1cc00017 	ldw	r19,0(r3)
 400d4bc:	002d883a 	mov	r22,zero
 400d4c0:	20003716 	blt	r4,zero,400d5a0 <___vfprintf_internal_r+0x14e8>
 400d4c4:	00ffdfc4 	movi	r3,-129
 400d4c8:	d8802e15 	stw	r2,184(sp)
 400d4cc:	90e4703a 	and	r18,r18,r3
 400d4d0:	0039883a 	mov	fp,zero
 400d4d4:	983dd426 	beq	r19,zero,400cc28 <__alt_data_end+0xfc00cc28>
 400d4d8:	00800244 	movi	r2,9
 400d4dc:	14fc5336 	bltu	r2,r19,400c62c <__alt_data_end+0xfc00c62c>
 400d4e0:	d8c02817 	ldw	r3,160(sp)
 400d4e4:	dc001dc4 	addi	r16,sp,119
 400d4e8:	9cc00c04 	addi	r19,r19,48
 400d4ec:	1c07c83a 	sub	r3,r3,r16
 400d4f0:	dcc01dc5 	stb	r19,119(sp)
 400d4f4:	d8c02b15 	stw	r3,172(sp)
 400d4f8:	003cc606 	br	400c814 <__alt_data_end+0xfc00c814>
 400d4fc:	d8803317 	ldw	r2,204(sp)
 400d500:	143fffc4 	addi	r16,r2,-1
 400d504:	043f4d0e 	bge	zero,r16,400d23c <__alt_data_end+0xfc00d23c>
 400d508:	07000404 	movi	fp,16
 400d50c:	e400810e 	bge	fp,r16,400d714 <___vfprintf_internal_r+0x165c>
 400d510:	014100b4 	movhi	r5,1026
 400d514:	2946e484 	addi	r5,r5,7058
 400d518:	d9402c15 	stw	r5,176(sp)
 400d51c:	01c001c4 	movi	r7,7
 400d520:	dcc02d17 	ldw	r19,180(sp)
 400d524:	00000306 	br	400d534 <___vfprintf_internal_r+0x147c>
 400d528:	b5800204 	addi	r22,r22,8
 400d52c:	843ffc04 	addi	r16,r16,-16
 400d530:	e4007b0e 	bge	fp,r16,400d720 <___vfprintf_internal_r+0x1668>
 400d534:	18c00404 	addi	r3,r3,16
 400d538:	8c400044 	addi	r17,r17,1
 400d53c:	b5000015 	stw	r20,0(r22)
 400d540:	b7000115 	stw	fp,4(r22)
 400d544:	d8c02015 	stw	r3,128(sp)
 400d548:	dc401f15 	stw	r17,124(sp)
 400d54c:	3c7ff60e 	bge	r7,r17,400d528 <__alt_data_end+0xfc00d528>
 400d550:	d9801e04 	addi	r6,sp,120
 400d554:	b80b883a 	mov	r5,r23
 400d558:	9809883a 	mov	r4,r19
 400d55c:	d9c03c15 	stw	r7,240(sp)
 400d560:	4012e540 	call	4012e54 <__sprint_r>
 400d564:	d9c03c17 	ldw	r7,240(sp)
 400d568:	103bd71e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400d56c:	d8c02017 	ldw	r3,128(sp)
 400d570:	dc401f17 	ldw	r17,124(sp)
 400d574:	dd800404 	addi	r22,sp,16
 400d578:	003fec06 	br	400d52c <__alt_data_end+0xfc00d52c>
 400d57c:	9080100c 	andi	r2,r18,64
 400d580:	d8002785 	stb	zero,158(sp)
 400d584:	10010e26 	beq	r2,zero,400d9c0 <___vfprintf_internal_r+0x1908>
 400d588:	d9402e17 	ldw	r5,184(sp)
 400d58c:	d8c02a17 	ldw	r3,168(sp)
 400d590:	002d883a 	mov	r22,zero
 400d594:	28800104 	addi	r2,r5,4
 400d598:	2cc0000b 	ldhu	r19,0(r5)
 400d59c:	183fc90e 	bge	r3,zero,400d4c4 <__alt_data_end+0xfc00d4c4>
 400d5a0:	d8802e15 	stw	r2,184(sp)
 400d5a4:	0039883a 	mov	fp,zero
 400d5a8:	9d84b03a 	or	r2,r19,r22
 400d5ac:	103c1e1e 	bne	r2,zero,400c628 <__alt_data_end+0xfc00c628>
 400d5b0:	00800044 	movi	r2,1
 400d5b4:	003e6c06 	br	400cf68 <__alt_data_end+0xfc00cf68>
 400d5b8:	d9002d17 	ldw	r4,180(sp)
 400d5bc:	d9801e04 	addi	r6,sp,120
 400d5c0:	b80b883a 	mov	r5,r23
 400d5c4:	4012e540 	call	4012e54 <__sprint_r>
 400d5c8:	103bbf1e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400d5cc:	d8c02017 	ldw	r3,128(sp)
 400d5d0:	da000404 	addi	r8,sp,16
 400d5d4:	d9003217 	ldw	r4,200(sp)
 400d5d8:	d8802617 	ldw	r2,152(sp)
 400d5dc:	d9403317 	ldw	r5,204(sp)
 400d5e0:	8123883a 	add	r17,r16,r4
 400d5e4:	11400216 	blt	r2,r5,400d5f0 <___vfprintf_internal_r+0x1538>
 400d5e8:	9100004c 	andi	r4,r18,1
 400d5ec:	20000d26 	beq	r4,zero,400d624 <___vfprintf_internal_r+0x156c>
 400d5f0:	d9003717 	ldw	r4,220(sp)
 400d5f4:	d9403417 	ldw	r5,208(sp)
 400d5f8:	1907883a 	add	r3,r3,r4
 400d5fc:	d9001f17 	ldw	r4,124(sp)
 400d600:	41400015 	stw	r5,0(r8)
 400d604:	d9403717 	ldw	r5,220(sp)
 400d608:	21000044 	addi	r4,r4,1
 400d60c:	d8c02015 	stw	r3,128(sp)
 400d610:	41400115 	stw	r5,4(r8)
 400d614:	d9001f15 	stw	r4,124(sp)
 400d618:	014001c4 	movi	r5,7
 400d61c:	2901e816 	blt	r5,r4,400ddc0 <___vfprintf_internal_r+0x1d08>
 400d620:	42000204 	addi	r8,r8,8
 400d624:	d9003317 	ldw	r4,204(sp)
 400d628:	8121883a 	add	r16,r16,r4
 400d62c:	2085c83a 	sub	r2,r4,r2
 400d630:	8461c83a 	sub	r16,r16,r17
 400d634:	1400010e 	bge	r2,r16,400d63c <___vfprintf_internal_r+0x1584>
 400d638:	1021883a 	mov	r16,r2
 400d63c:	04000a0e 	bge	zero,r16,400d668 <___vfprintf_internal_r+0x15b0>
 400d640:	d9001f17 	ldw	r4,124(sp)
 400d644:	1c07883a 	add	r3,r3,r16
 400d648:	44400015 	stw	r17,0(r8)
 400d64c:	21000044 	addi	r4,r4,1
 400d650:	44000115 	stw	r16,4(r8)
 400d654:	d8c02015 	stw	r3,128(sp)
 400d658:	d9001f15 	stw	r4,124(sp)
 400d65c:	014001c4 	movi	r5,7
 400d660:	2901fb16 	blt	r5,r4,400de50 <___vfprintf_internal_r+0x1d98>
 400d664:	42000204 	addi	r8,r8,8
 400d668:	8001f716 	blt	r16,zero,400de48 <___vfprintf_internal_r+0x1d90>
 400d66c:	1421c83a 	sub	r16,r2,r16
 400d670:	043d160e 	bge	zero,r16,400cacc <__alt_data_end+0xfc00cacc>
 400d674:	04400404 	movi	r17,16
 400d678:	d8801f17 	ldw	r2,124(sp)
 400d67c:	8c3efb0e 	bge	r17,r16,400d26c <__alt_data_end+0xfc00d26c>
 400d680:	014100b4 	movhi	r5,1026
 400d684:	2946e484 	addi	r5,r5,7058
 400d688:	d9402c15 	stw	r5,176(sp)
 400d68c:	058001c4 	movi	r22,7
 400d690:	dcc02d17 	ldw	r19,180(sp)
 400d694:	00000306 	br	400d6a4 <___vfprintf_internal_r+0x15ec>
 400d698:	42000204 	addi	r8,r8,8
 400d69c:	843ffc04 	addi	r16,r16,-16
 400d6a0:	8c3ef50e 	bge	r17,r16,400d278 <__alt_data_end+0xfc00d278>
 400d6a4:	18c00404 	addi	r3,r3,16
 400d6a8:	10800044 	addi	r2,r2,1
 400d6ac:	45000015 	stw	r20,0(r8)
 400d6b0:	44400115 	stw	r17,4(r8)
 400d6b4:	d8c02015 	stw	r3,128(sp)
 400d6b8:	d8801f15 	stw	r2,124(sp)
 400d6bc:	b0bff60e 	bge	r22,r2,400d698 <__alt_data_end+0xfc00d698>
 400d6c0:	d9801e04 	addi	r6,sp,120
 400d6c4:	b80b883a 	mov	r5,r23
 400d6c8:	9809883a 	mov	r4,r19
 400d6cc:	4012e540 	call	4012e54 <__sprint_r>
 400d6d0:	103b7d1e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400d6d4:	d8c02017 	ldw	r3,128(sp)
 400d6d8:	d8801f17 	ldw	r2,124(sp)
 400d6dc:	da000404 	addi	r8,sp,16
 400d6e0:	003fee06 	br	400d69c <__alt_data_end+0xfc00d69c>
 400d6e4:	9088703a 	and	r4,r18,r2
 400d6e8:	203eab1e 	bne	r4,zero,400d198 <__alt_data_end+0xfc00d198>
 400d6ec:	dc401f17 	ldw	r17,124(sp)
 400d6f0:	40800115 	stw	r2,4(r8)
 400d6f4:	44000015 	stw	r16,0(r8)
 400d6f8:	8c400044 	addi	r17,r17,1
 400d6fc:	d8c02015 	stw	r3,128(sp)
 400d700:	dc401f15 	stw	r17,124(sp)
 400d704:	008001c4 	movi	r2,7
 400d708:	14400e16 	blt	r2,r17,400d744 <___vfprintf_internal_r+0x168c>
 400d70c:	45800204 	addi	r22,r8,8
 400d710:	003eca06 	br	400d23c <__alt_data_end+0xfc00d23c>
 400d714:	010100b4 	movhi	r4,1026
 400d718:	2106e484 	addi	r4,r4,7058
 400d71c:	d9002c15 	stw	r4,176(sp)
 400d720:	d8802c17 	ldw	r2,176(sp)
 400d724:	1c07883a 	add	r3,r3,r16
 400d728:	8c400044 	addi	r17,r17,1
 400d72c:	b0800015 	stw	r2,0(r22)
 400d730:	b4000115 	stw	r16,4(r22)
 400d734:	d8c02015 	stw	r3,128(sp)
 400d738:	dc401f15 	stw	r17,124(sp)
 400d73c:	008001c4 	movi	r2,7
 400d740:	147ebd0e 	bge	r2,r17,400d238 <__alt_data_end+0xfc00d238>
 400d744:	d9002d17 	ldw	r4,180(sp)
 400d748:	d9801e04 	addi	r6,sp,120
 400d74c:	b80b883a 	mov	r5,r23
 400d750:	4012e540 	call	4012e54 <__sprint_r>
 400d754:	103b5c1e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400d758:	d8c02017 	ldw	r3,128(sp)
 400d75c:	dc401f17 	ldw	r17,124(sp)
 400d760:	dd800404 	addi	r22,sp,16
 400d764:	003eb506 	br	400d23c <__alt_data_end+0xfc00d23c>
 400d768:	d9002d17 	ldw	r4,180(sp)
 400d76c:	d9801e04 	addi	r6,sp,120
 400d770:	b80b883a 	mov	r5,r23
 400d774:	4012e540 	call	4012e54 <__sprint_r>
 400d778:	103b531e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400d77c:	d8c02017 	ldw	r3,128(sp)
 400d780:	dc401f17 	ldw	r17,124(sp)
 400d784:	da000404 	addi	r8,sp,16
 400d788:	003e8d06 	br	400d1c0 <__alt_data_end+0xfc00d1c0>
 400d78c:	d9002d17 	ldw	r4,180(sp)
 400d790:	d9801e04 	addi	r6,sp,120
 400d794:	b80b883a 	mov	r5,r23
 400d798:	4012e540 	call	4012e54 <__sprint_r>
 400d79c:	103b4a1e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400d7a0:	d8c02017 	ldw	r3,128(sp)
 400d7a4:	dc401f17 	ldw	r17,124(sp)
 400d7a8:	dd800404 	addi	r22,sp,16
 400d7ac:	003e8f06 	br	400d1ec <__alt_data_end+0xfc00d1ec>
 400d7b0:	0027883a 	mov	r19,zero
 400d7b4:	003f4a06 	br	400d4e0 <__alt_data_end+0xfc00d4e0>
 400d7b8:	d9002d17 	ldw	r4,180(sp)
 400d7bc:	d9801e04 	addi	r6,sp,120
 400d7c0:	b80b883a 	mov	r5,r23
 400d7c4:	4012e540 	call	4012e54 <__sprint_r>
 400d7c8:	103b3f1e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400d7cc:	d8c02017 	ldw	r3,128(sp)
 400d7d0:	da000404 	addi	r8,sp,16
 400d7d4:	003c7b06 	br	400c9c4 <__alt_data_end+0xfc00c9c4>
 400d7d8:	d9402a17 	ldw	r5,168(sp)
 400d7dc:	04e7c83a 	sub	r19,zero,r19
 400d7e0:	07000b44 	movi	fp,45
 400d7e4:	9804c03a 	cmpne	r2,r19,zero
 400d7e8:	05adc83a 	sub	r22,zero,r22
 400d7ec:	df002785 	stb	fp,158(sp)
 400d7f0:	b0adc83a 	sub	r22,r22,r2
 400d7f4:	28017b16 	blt	r5,zero,400dde4 <___vfprintf_internal_r+0x1d2c>
 400d7f8:	00bfdfc4 	movi	r2,-129
 400d7fc:	90a4703a 	and	r18,r18,r2
 400d800:	003b8906 	br	400c628 <__alt_data_end+0xfc00c628>
 400d804:	d9003617 	ldw	r4,216(sp)
 400d808:	d9403817 	ldw	r5,224(sp)
 400d80c:	da003d15 	stw	r8,244(sp)
 400d810:	4012ba80 	call	4012ba8 <__fpclassifyd>
 400d814:	da003d17 	ldw	r8,244(sp)
 400d818:	1000f026 	beq	r2,zero,400dbdc <___vfprintf_internal_r+0x1b24>
 400d81c:	d9002a17 	ldw	r4,168(sp)
 400d820:	05bff7c4 	movi	r22,-33
 400d824:	00bfffc4 	movi	r2,-1
 400d828:	8dac703a 	and	r22,r17,r22
 400d82c:	20820026 	beq	r4,r2,400e030 <___vfprintf_internal_r+0x1f78>
 400d830:	008011c4 	movi	r2,71
 400d834:	b081f726 	beq	r22,r2,400e014 <___vfprintf_internal_r+0x1f5c>
 400d838:	d9003817 	ldw	r4,224(sp)
 400d83c:	90c04014 	ori	r3,r18,256
 400d840:	d8c02c15 	stw	r3,176(sp)
 400d844:	20021516 	blt	r4,zero,400e09c <___vfprintf_internal_r+0x1fe4>
 400d848:	dcc03817 	ldw	r19,224(sp)
 400d84c:	d8002905 	stb	zero,164(sp)
 400d850:	00801984 	movi	r2,102
 400d854:	8881f926 	beq	r17,r2,400e03c <___vfprintf_internal_r+0x1f84>
 400d858:	00801184 	movi	r2,70
 400d85c:	88821c26 	beq	r17,r2,400e0d0 <___vfprintf_internal_r+0x2018>
 400d860:	00801144 	movi	r2,69
 400d864:	b081ef26 	beq	r22,r2,400e024 <___vfprintf_internal_r+0x1f6c>
 400d868:	d8c02a17 	ldw	r3,168(sp)
 400d86c:	d8802104 	addi	r2,sp,132
 400d870:	d8800315 	stw	r2,12(sp)
 400d874:	d9403617 	ldw	r5,216(sp)
 400d878:	d8802504 	addi	r2,sp,148
 400d87c:	d9002d17 	ldw	r4,180(sp)
 400d880:	d8800215 	stw	r2,8(sp)
 400d884:	d8802604 	addi	r2,sp,152
 400d888:	d8c00015 	stw	r3,0(sp)
 400d88c:	d8800115 	stw	r2,4(sp)
 400d890:	01c00084 	movi	r7,2
 400d894:	980d883a 	mov	r6,r19
 400d898:	d8c03c15 	stw	r3,240(sp)
 400d89c:	da003d15 	stw	r8,244(sp)
 400d8a0:	400e7e80 	call	400e7e8 <_dtoa_r>
 400d8a4:	1021883a 	mov	r16,r2
 400d8a8:	008019c4 	movi	r2,103
 400d8ac:	d8c03c17 	ldw	r3,240(sp)
 400d8b0:	da003d17 	ldw	r8,244(sp)
 400d8b4:	88817126 	beq	r17,r2,400de7c <___vfprintf_internal_r+0x1dc4>
 400d8b8:	008011c4 	movi	r2,71
 400d8bc:	88829126 	beq	r17,r2,400e304 <___vfprintf_internal_r+0x224c>
 400d8c0:	80f9883a 	add	fp,r16,r3
 400d8c4:	d9003617 	ldw	r4,216(sp)
 400d8c8:	000d883a 	mov	r6,zero
 400d8cc:	000f883a 	mov	r7,zero
 400d8d0:	980b883a 	mov	r5,r19
 400d8d4:	da003d15 	stw	r8,244(sp)
 400d8d8:	4016bd80 	call	4016bd8 <__eqdf2>
 400d8dc:	da003d17 	ldw	r8,244(sp)
 400d8e0:	10018d26 	beq	r2,zero,400df18 <___vfprintf_internal_r+0x1e60>
 400d8e4:	d8802117 	ldw	r2,132(sp)
 400d8e8:	1700062e 	bgeu	r2,fp,400d904 <___vfprintf_internal_r+0x184c>
 400d8ec:	01000c04 	movi	r4,48
 400d8f0:	10c00044 	addi	r3,r2,1
 400d8f4:	d8c02115 	stw	r3,132(sp)
 400d8f8:	11000005 	stb	r4,0(r2)
 400d8fc:	d8802117 	ldw	r2,132(sp)
 400d900:	173ffb36 	bltu	r2,fp,400d8f0 <__alt_data_end+0xfc00d8f0>
 400d904:	1405c83a 	sub	r2,r2,r16
 400d908:	d8803315 	stw	r2,204(sp)
 400d90c:	008011c4 	movi	r2,71
 400d910:	b0817626 	beq	r22,r2,400deec <___vfprintf_internal_r+0x1e34>
 400d914:	00801944 	movi	r2,101
 400d918:	1442800e 	bge	r2,r17,400e31c <___vfprintf_internal_r+0x2264>
 400d91c:	d8c02617 	ldw	r3,152(sp)
 400d920:	00801984 	movi	r2,102
 400d924:	d8c03215 	stw	r3,200(sp)
 400d928:	8881fe26 	beq	r17,r2,400e124 <___vfprintf_internal_r+0x206c>
 400d92c:	d8c03217 	ldw	r3,200(sp)
 400d930:	d9003317 	ldw	r4,204(sp)
 400d934:	1901dd16 	blt	r3,r4,400e0ac <___vfprintf_internal_r+0x1ff4>
 400d938:	9480004c 	andi	r18,r18,1
 400d93c:	90022b1e 	bne	r18,zero,400e1ec <___vfprintf_internal_r+0x2134>
 400d940:	1805883a 	mov	r2,r3
 400d944:	18028316 	blt	r3,zero,400e354 <___vfprintf_internal_r+0x229c>
 400d948:	d8c03217 	ldw	r3,200(sp)
 400d94c:	044019c4 	movi	r17,103
 400d950:	d8c02b15 	stw	r3,172(sp)
 400d954:	df002907 	ldb	fp,164(sp)
 400d958:	e001531e 	bne	fp,zero,400dea8 <___vfprintf_internal_r+0x1df0>
 400d95c:	df002783 	ldbu	fp,158(sp)
 400d960:	d8802915 	stw	r2,164(sp)
 400d964:	dc802c17 	ldw	r18,176(sp)
 400d968:	d8002a15 	stw	zero,168(sp)
 400d96c:	003baf06 	br	400c82c <__alt_data_end+0xfc00c82c>
 400d970:	d8c02e17 	ldw	r3,184(sp)
 400d974:	d9002e17 	ldw	r4,184(sp)
 400d978:	d9402e17 	ldw	r5,184(sp)
 400d97c:	18c00017 	ldw	r3,0(r3)
 400d980:	21000117 	ldw	r4,4(r4)
 400d984:	29400204 	addi	r5,r5,8
 400d988:	d8c03615 	stw	r3,216(sp)
 400d98c:	d9003815 	stw	r4,224(sp)
 400d990:	d9402e15 	stw	r5,184(sp)
 400d994:	003b5006 	br	400c6d8 <__alt_data_end+0xfc00c6d8>
 400d998:	ac400007 	ldb	r17,0(r21)
 400d99c:	003a2806 	br	400c240 <__alt_data_end+0xfc00c240>
 400d9a0:	9080100c 	andi	r2,r18,64
 400d9a4:	1000a826 	beq	r2,zero,400dc48 <___vfprintf_internal_r+0x1b90>
 400d9a8:	d8c02e17 	ldw	r3,184(sp)
 400d9ac:	002d883a 	mov	r22,zero
 400d9b0:	1cc0000b 	ldhu	r19,0(r3)
 400d9b4:	18c00104 	addi	r3,r3,4
 400d9b8:	d8c02e15 	stw	r3,184(sp)
 400d9bc:	003caf06 	br	400cc7c <__alt_data_end+0xfc00cc7c>
 400d9c0:	d9002e17 	ldw	r4,184(sp)
 400d9c4:	d9402a17 	ldw	r5,168(sp)
 400d9c8:	002d883a 	mov	r22,zero
 400d9cc:	20800104 	addi	r2,r4,4
 400d9d0:	24c00017 	ldw	r19,0(r4)
 400d9d4:	283ebb0e 	bge	r5,zero,400d4c4 <__alt_data_end+0xfc00d4c4>
 400d9d8:	003ef106 	br	400d5a0 <__alt_data_end+0xfc00d5a0>
 400d9dc:	9080040c 	andi	r2,r18,16
 400d9e0:	1000921e 	bne	r2,zero,400dc2c <___vfprintf_internal_r+0x1b74>
 400d9e4:	9480100c 	andi	r18,r18,64
 400d9e8:	90013926 	beq	r18,zero,400ded0 <___vfprintf_internal_r+0x1e18>
 400d9ec:	d9402e17 	ldw	r5,184(sp)
 400d9f0:	d8c02f17 	ldw	r3,188(sp)
 400d9f4:	28800017 	ldw	r2,0(r5)
 400d9f8:	29400104 	addi	r5,r5,4
 400d9fc:	d9402e15 	stw	r5,184(sp)
 400da00:	10c0000d 	sth	r3,0(r2)
 400da04:	0039e406 	br	400c198 <__alt_data_end+0xfc00c198>
 400da08:	9080100c 	andi	r2,r18,64
 400da0c:	10008026 	beq	r2,zero,400dc10 <___vfprintf_internal_r+0x1b58>
 400da10:	d8802e17 	ldw	r2,184(sp)
 400da14:	14c0000f 	ldh	r19,0(r2)
 400da18:	10800104 	addi	r2,r2,4
 400da1c:	d8802e15 	stw	r2,184(sp)
 400da20:	982dd7fa 	srai	r22,r19,31
 400da24:	b005883a 	mov	r2,r22
 400da28:	003af706 	br	400c608 <__alt_data_end+0xfc00c608>
 400da2c:	9080100c 	andi	r2,r18,64
 400da30:	d8002785 	stb	zero,158(sp)
 400da34:	10008a1e 	bne	r2,zero,400dc60 <___vfprintf_internal_r+0x1ba8>
 400da38:	d9002e17 	ldw	r4,184(sp)
 400da3c:	d9402a17 	ldw	r5,168(sp)
 400da40:	002d883a 	mov	r22,zero
 400da44:	20800104 	addi	r2,r4,4
 400da48:	24c00017 	ldw	r19,0(r4)
 400da4c:	283e4b0e 	bge	r5,zero,400d37c <__alt_data_end+0xfc00d37c>
 400da50:	9d86b03a 	or	r3,r19,r22
 400da54:	d8802e15 	stw	r2,184(sp)
 400da58:	183e4c1e 	bne	r3,zero,400d38c <__alt_data_end+0xfc00d38c>
 400da5c:	0039883a 	mov	fp,zero
 400da60:	0005883a 	mov	r2,zero
 400da64:	003d4006 	br	400cf68 <__alt_data_end+0xfc00cf68>
 400da68:	014100b4 	movhi	r5,1026
 400da6c:	2946e484 	addi	r5,r5,7058
 400da70:	d9402c15 	stw	r5,176(sp)
 400da74:	d9402c17 	ldw	r5,176(sp)
 400da78:	1c47883a 	add	r3,r3,r17
 400da7c:	10800044 	addi	r2,r2,1
 400da80:	41400015 	stw	r5,0(r8)
 400da84:	44400115 	stw	r17,4(r8)
 400da88:	d8c02015 	stw	r3,128(sp)
 400da8c:	d8801f15 	stw	r2,124(sp)
 400da90:	010001c4 	movi	r4,7
 400da94:	20bec816 	blt	r4,r2,400d5b8 <__alt_data_end+0xfc00d5b8>
 400da98:	42000204 	addi	r8,r8,8
 400da9c:	003ecd06 	br	400d5d4 <__alt_data_end+0xfc00d5d4>
 400daa0:	d9002a17 	ldw	r4,168(sp)
 400daa4:	d8002785 	stb	zero,158(sp)
 400daa8:	203d2d16 	blt	r4,zero,400cf60 <__alt_data_end+0xfc00cf60>
 400daac:	00bfdfc4 	movi	r2,-129
 400dab0:	90a4703a 	and	r18,r18,r2
 400dab4:	003a6106 	br	400c43c <__alt_data_end+0xfc00c43c>
 400dab8:	010100b4 	movhi	r4,1026
 400dabc:	2106e484 	addi	r4,r4,7058
 400dac0:	d9002c15 	stw	r4,176(sp)
 400dac4:	003bea06 	br	400ca70 <__alt_data_end+0xfc00ca70>
 400dac8:	d9002d17 	ldw	r4,180(sp)
 400dacc:	d9801e04 	addi	r6,sp,120
 400dad0:	b80b883a 	mov	r5,r23
 400dad4:	4012e540 	call	4012e54 <__sprint_r>
 400dad8:	103a7b1e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400dadc:	d8c02017 	ldw	r3,128(sp)
 400dae0:	da000404 	addi	r8,sp,16
 400dae4:	003d4106 	br	400cfec <__alt_data_end+0xfc00cfec>
 400dae8:	d8801f17 	ldw	r2,124(sp)
 400daec:	014100b4 	movhi	r5,1026
 400daf0:	01000044 	movi	r4,1
 400daf4:	18c00044 	addi	r3,r3,1
 400daf8:	10800044 	addi	r2,r2,1
 400dafc:	2946e404 	addi	r5,r5,7056
 400db00:	41000115 	stw	r4,4(r8)
 400db04:	41400015 	stw	r5,0(r8)
 400db08:	d8c02015 	stw	r3,128(sp)
 400db0c:	d8801f15 	stw	r2,124(sp)
 400db10:	010001c4 	movi	r4,7
 400db14:	20805c16 	blt	r4,r2,400dc88 <___vfprintf_internal_r+0x1bd0>
 400db18:	42000204 	addi	r8,r8,8
 400db1c:	8800041e 	bne	r17,zero,400db30 <___vfprintf_internal_r+0x1a78>
 400db20:	d8803317 	ldw	r2,204(sp)
 400db24:	1000021e 	bne	r2,zero,400db30 <___vfprintf_internal_r+0x1a78>
 400db28:	9080004c 	andi	r2,r18,1
 400db2c:	103be726 	beq	r2,zero,400cacc <__alt_data_end+0xfc00cacc>
 400db30:	d9003717 	ldw	r4,220(sp)
 400db34:	d8801f17 	ldw	r2,124(sp)
 400db38:	d9403417 	ldw	r5,208(sp)
 400db3c:	20c7883a 	add	r3,r4,r3
 400db40:	10800044 	addi	r2,r2,1
 400db44:	41000115 	stw	r4,4(r8)
 400db48:	41400015 	stw	r5,0(r8)
 400db4c:	d8c02015 	stw	r3,128(sp)
 400db50:	d8801f15 	stw	r2,124(sp)
 400db54:	010001c4 	movi	r4,7
 400db58:	20812116 	blt	r4,r2,400dfe0 <___vfprintf_internal_r+0x1f28>
 400db5c:	42000204 	addi	r8,r8,8
 400db60:	0463c83a 	sub	r17,zero,r17
 400db64:	0440730e 	bge	zero,r17,400dd34 <___vfprintf_internal_r+0x1c7c>
 400db68:	05800404 	movi	r22,16
 400db6c:	b440860e 	bge	r22,r17,400dd88 <___vfprintf_internal_r+0x1cd0>
 400db70:	014100b4 	movhi	r5,1026
 400db74:	2946e484 	addi	r5,r5,7058
 400db78:	d9402c15 	stw	r5,176(sp)
 400db7c:	070001c4 	movi	fp,7
 400db80:	dcc02d17 	ldw	r19,180(sp)
 400db84:	00000306 	br	400db94 <___vfprintf_internal_r+0x1adc>
 400db88:	42000204 	addi	r8,r8,8
 400db8c:	8c7ffc04 	addi	r17,r17,-16
 400db90:	b440800e 	bge	r22,r17,400dd94 <___vfprintf_internal_r+0x1cdc>
 400db94:	18c00404 	addi	r3,r3,16
 400db98:	10800044 	addi	r2,r2,1
 400db9c:	45000015 	stw	r20,0(r8)
 400dba0:	45800115 	stw	r22,4(r8)
 400dba4:	d8c02015 	stw	r3,128(sp)
 400dba8:	d8801f15 	stw	r2,124(sp)
 400dbac:	e0bff60e 	bge	fp,r2,400db88 <__alt_data_end+0xfc00db88>
 400dbb0:	d9801e04 	addi	r6,sp,120
 400dbb4:	b80b883a 	mov	r5,r23
 400dbb8:	9809883a 	mov	r4,r19
 400dbbc:	4012e540 	call	4012e54 <__sprint_r>
 400dbc0:	103a411e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400dbc4:	d8c02017 	ldw	r3,128(sp)
 400dbc8:	d8801f17 	ldw	r2,124(sp)
 400dbcc:	da000404 	addi	r8,sp,16
 400dbd0:	003fee06 	br	400db8c <__alt_data_end+0xfc00db8c>
 400dbd4:	00bfffc4 	movi	r2,-1
 400dbd8:	003a3f06 	br	400c4d8 <__alt_data_end+0xfc00c4d8>
 400dbdc:	008011c4 	movi	r2,71
 400dbe0:	1440b816 	blt	r2,r17,400dec4 <___vfprintf_internal_r+0x1e0c>
 400dbe4:	040100b4 	movhi	r16,1026
 400dbe8:	8406d604 	addi	r16,r16,7000
 400dbec:	00c000c4 	movi	r3,3
 400dbf0:	00bfdfc4 	movi	r2,-129
 400dbf4:	d8c02915 	stw	r3,164(sp)
 400dbf8:	90a4703a 	and	r18,r18,r2
 400dbfc:	df002783 	ldbu	fp,158(sp)
 400dc00:	d8c02b15 	stw	r3,172(sp)
 400dc04:	d8002a15 	stw	zero,168(sp)
 400dc08:	d8003215 	stw	zero,200(sp)
 400dc0c:	003b0706 	br	400c82c <__alt_data_end+0xfc00c82c>
 400dc10:	d8c02e17 	ldw	r3,184(sp)
 400dc14:	1cc00017 	ldw	r19,0(r3)
 400dc18:	18c00104 	addi	r3,r3,4
 400dc1c:	d8c02e15 	stw	r3,184(sp)
 400dc20:	982dd7fa 	srai	r22,r19,31
 400dc24:	b005883a 	mov	r2,r22
 400dc28:	003a7706 	br	400c608 <__alt_data_end+0xfc00c608>
 400dc2c:	d8c02e17 	ldw	r3,184(sp)
 400dc30:	d9002f17 	ldw	r4,188(sp)
 400dc34:	18800017 	ldw	r2,0(r3)
 400dc38:	18c00104 	addi	r3,r3,4
 400dc3c:	d8c02e15 	stw	r3,184(sp)
 400dc40:	11000015 	stw	r4,0(r2)
 400dc44:	00395406 	br	400c198 <__alt_data_end+0xfc00c198>
 400dc48:	d9002e17 	ldw	r4,184(sp)
 400dc4c:	002d883a 	mov	r22,zero
 400dc50:	24c00017 	ldw	r19,0(r4)
 400dc54:	21000104 	addi	r4,r4,4
 400dc58:	d9002e15 	stw	r4,184(sp)
 400dc5c:	003c0706 	br	400cc7c <__alt_data_end+0xfc00cc7c>
 400dc60:	d9402e17 	ldw	r5,184(sp)
 400dc64:	d8c02a17 	ldw	r3,168(sp)
 400dc68:	002d883a 	mov	r22,zero
 400dc6c:	28800104 	addi	r2,r5,4
 400dc70:	2cc0000b 	ldhu	r19,0(r5)
 400dc74:	183dc10e 	bge	r3,zero,400d37c <__alt_data_end+0xfc00d37c>
 400dc78:	003f7506 	br	400da50 <__alt_data_end+0xfc00da50>
 400dc7c:	040100b4 	movhi	r16,1026
 400dc80:	8406d404 	addi	r16,r16,6992
 400dc84:	003aa706 	br	400c724 <__alt_data_end+0xfc00c724>
 400dc88:	d9002d17 	ldw	r4,180(sp)
 400dc8c:	d9801e04 	addi	r6,sp,120
 400dc90:	b80b883a 	mov	r5,r23
 400dc94:	4012e540 	call	4012e54 <__sprint_r>
 400dc98:	103a0b1e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400dc9c:	dc402617 	ldw	r17,152(sp)
 400dca0:	d8c02017 	ldw	r3,128(sp)
 400dca4:	da000404 	addi	r8,sp,16
 400dca8:	003f9c06 	br	400db1c <__alt_data_end+0xfc00db1c>
 400dcac:	ac400043 	ldbu	r17,1(r21)
 400dcb0:	84000814 	ori	r16,r16,32
 400dcb4:	ad400044 	addi	r21,r21,1
 400dcb8:	8c403fcc 	andi	r17,r17,255
 400dcbc:	8c40201c 	xori	r17,r17,128
 400dcc0:	8c7fe004 	addi	r17,r17,-128
 400dcc4:	00395e06 	br	400c240 <__alt_data_end+0xfc00c240>
 400dcc8:	d8c02e15 	stw	r3,184(sp)
 400dccc:	0039883a 	mov	fp,zero
 400dcd0:	003e3506 	br	400d5a8 <__alt_data_end+0xfc00d5a8>
 400dcd4:	d9002d17 	ldw	r4,180(sp)
 400dcd8:	d9801e04 	addi	r6,sp,120
 400dcdc:	b80b883a 	mov	r5,r23
 400dce0:	4012e540 	call	4012e54 <__sprint_r>
 400dce4:	1039f81e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400dce8:	d8c02017 	ldw	r3,128(sp)
 400dcec:	da000404 	addi	r8,sp,16
 400dcf0:	003cd006 	br	400d034 <__alt_data_end+0xfc00d034>
 400dcf4:	8009883a 	mov	r4,r16
 400dcf8:	df003d15 	stw	fp,244(sp)
 400dcfc:	400c0180 	call	400c018 <strlen>
 400dd00:	d8802b15 	stw	r2,172(sp)
 400dd04:	da003d17 	ldw	r8,244(sp)
 400dd08:	103c200e 	bge	r2,zero,400cd8c <__alt_data_end+0xfc00cd8c>
 400dd0c:	0005883a 	mov	r2,zero
 400dd10:	003c1e06 	br	400cd8c <__alt_data_end+0xfc00cd8c>
 400dd14:	d9002d17 	ldw	r4,180(sp)
 400dd18:	d9801e04 	addi	r6,sp,120
 400dd1c:	b80b883a 	mov	r5,r23
 400dd20:	4012e540 	call	4012e54 <__sprint_r>
 400dd24:	1039e81e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400dd28:	d8c02017 	ldw	r3,128(sp)
 400dd2c:	d8801f17 	ldw	r2,124(sp)
 400dd30:	da000404 	addi	r8,sp,16
 400dd34:	d9403317 	ldw	r5,204(sp)
 400dd38:	10800044 	addi	r2,r2,1
 400dd3c:	44000015 	stw	r16,0(r8)
 400dd40:	28c7883a 	add	r3,r5,r3
 400dd44:	003b5b06 	br	400cab4 <__alt_data_end+0xfc00cab4>
 400dd48:	010100b4 	movhi	r4,1026
 400dd4c:	2106e884 	addi	r4,r4,7074
 400dd50:	d9003515 	stw	r4,212(sp)
 400dd54:	003af206 	br	400c920 <__alt_data_end+0xfc00c920>
 400dd58:	013fffc4 	movi	r4,-1
 400dd5c:	003a0806 	br	400c580 <__alt_data_end+0xfc00c580>
 400dd60:	0023883a 	mov	r17,zero
 400dd64:	003d9d06 	br	400d3dc <__alt_data_end+0xfc00d3dc>
 400dd68:	d9002d17 	ldw	r4,180(sp)
 400dd6c:	d9801e04 	addi	r6,sp,120
 400dd70:	b80b883a 	mov	r5,r23
 400dd74:	4012e540 	call	4012e54 <__sprint_r>
 400dd78:	1039d31e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400dd7c:	d8c02017 	ldw	r3,128(sp)
 400dd80:	da000404 	addi	r8,sp,16
 400dd84:	003d9406 	br	400d3d8 <__alt_data_end+0xfc00d3d8>
 400dd88:	010100b4 	movhi	r4,1026
 400dd8c:	2106e484 	addi	r4,r4,7058
 400dd90:	d9002c15 	stw	r4,176(sp)
 400dd94:	d9002c17 	ldw	r4,176(sp)
 400dd98:	1c47883a 	add	r3,r3,r17
 400dd9c:	10800044 	addi	r2,r2,1
 400dda0:	41000015 	stw	r4,0(r8)
 400dda4:	44400115 	stw	r17,4(r8)
 400dda8:	d8c02015 	stw	r3,128(sp)
 400ddac:	d8801f15 	stw	r2,124(sp)
 400ddb0:	010001c4 	movi	r4,7
 400ddb4:	20bfd716 	blt	r4,r2,400dd14 <__alt_data_end+0xfc00dd14>
 400ddb8:	42000204 	addi	r8,r8,8
 400ddbc:	003fdd06 	br	400dd34 <__alt_data_end+0xfc00dd34>
 400ddc0:	d9002d17 	ldw	r4,180(sp)
 400ddc4:	d9801e04 	addi	r6,sp,120
 400ddc8:	b80b883a 	mov	r5,r23
 400ddcc:	4012e540 	call	4012e54 <__sprint_r>
 400ddd0:	1039bd1e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400ddd4:	d8802617 	ldw	r2,152(sp)
 400ddd8:	d8c02017 	ldw	r3,128(sp)
 400dddc:	da000404 	addi	r8,sp,16
 400dde0:	003e1006 	br	400d624 <__alt_data_end+0xfc00d624>
 400dde4:	00800044 	movi	r2,1
 400dde8:	10803fcc 	andi	r2,r2,255
 400ddec:	00c00044 	movi	r3,1
 400ddf0:	10fa0d26 	beq	r2,r3,400c628 <__alt_data_end+0xfc00c628>
 400ddf4:	00c00084 	movi	r3,2
 400ddf8:	10fbaf26 	beq	r2,r3,400ccb8 <__alt_data_end+0xfc00ccb8>
 400ddfc:	003a6d06 	br	400c7b4 <__alt_data_end+0xfc00c7b4>
 400de00:	010100b4 	movhi	r4,1026
 400de04:	2106e884 	addi	r4,r4,7074
 400de08:	d9003515 	stw	r4,212(sp)
 400de0c:	003b5406 	br	400cb60 <__alt_data_end+0xfc00cb60>
 400de10:	d8802a17 	ldw	r2,168(sp)
 400de14:	00c00184 	movi	r3,6
 400de18:	1880012e 	bgeu	r3,r2,400de20 <___vfprintf_internal_r+0x1d68>
 400de1c:	1805883a 	mov	r2,r3
 400de20:	d8802b15 	stw	r2,172(sp)
 400de24:	1000ef16 	blt	r2,zero,400e1e4 <___vfprintf_internal_r+0x212c>
 400de28:	040100b4 	movhi	r16,1026
 400de2c:	d8802915 	stw	r2,164(sp)
 400de30:	dcc02e15 	stw	r19,184(sp)
 400de34:	d8002a15 	stw	zero,168(sp)
 400de38:	d8003215 	stw	zero,200(sp)
 400de3c:	8406e204 	addi	r16,r16,7048
 400de40:	0039883a 	mov	fp,zero
 400de44:	003a8006 	br	400c848 <__alt_data_end+0xfc00c848>
 400de48:	0021883a 	mov	r16,zero
 400de4c:	003e0706 	br	400d66c <__alt_data_end+0xfc00d66c>
 400de50:	d9002d17 	ldw	r4,180(sp)
 400de54:	d9801e04 	addi	r6,sp,120
 400de58:	b80b883a 	mov	r5,r23
 400de5c:	4012e540 	call	4012e54 <__sprint_r>
 400de60:	1039991e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400de64:	d8802617 	ldw	r2,152(sp)
 400de68:	d9403317 	ldw	r5,204(sp)
 400de6c:	d8c02017 	ldw	r3,128(sp)
 400de70:	da000404 	addi	r8,sp,16
 400de74:	2885c83a 	sub	r2,r5,r2
 400de78:	003dfb06 	br	400d668 <__alt_data_end+0xfc00d668>
 400de7c:	9080004c 	andi	r2,r18,1
 400de80:	103e8f1e 	bne	r2,zero,400d8c0 <__alt_data_end+0xfc00d8c0>
 400de84:	d8802117 	ldw	r2,132(sp)
 400de88:	003e9e06 	br	400d904 <__alt_data_end+0xfc00d904>
 400de8c:	1025883a 	mov	r18,r2
 400de90:	0039883a 	mov	fp,zero
 400de94:	00800084 	movi	r2,2
 400de98:	003fd306 	br	400dde8 <__alt_data_end+0xfc00dde8>
 400de9c:	07000b44 	movi	fp,45
 400dea0:	df002785 	stb	fp,158(sp)
 400dea4:	003a1b06 	br	400c714 <__alt_data_end+0xfc00c714>
 400dea8:	00c00b44 	movi	r3,45
 400deac:	d8c02785 	stb	r3,158(sp)
 400deb0:	d8802915 	stw	r2,164(sp)
 400deb4:	dc802c17 	ldw	r18,176(sp)
 400deb8:	d8002a15 	stw	zero,168(sp)
 400debc:	07000b44 	movi	fp,45
 400dec0:	003a5e06 	br	400c83c <__alt_data_end+0xfc00c83c>
 400dec4:	040100b4 	movhi	r16,1026
 400dec8:	8406d704 	addi	r16,r16,7004
 400decc:	003f4706 	br	400dbec <__alt_data_end+0xfc00dbec>
 400ded0:	d9002e17 	ldw	r4,184(sp)
 400ded4:	d9402f17 	ldw	r5,188(sp)
 400ded8:	20800017 	ldw	r2,0(r4)
 400dedc:	21000104 	addi	r4,r4,4
 400dee0:	d9002e15 	stw	r4,184(sp)
 400dee4:	11400015 	stw	r5,0(r2)
 400dee8:	0038ab06 	br	400c198 <__alt_data_end+0xfc00c198>
 400deec:	dd802617 	ldw	r22,152(sp)
 400def0:	00bfff44 	movi	r2,-3
 400def4:	b0801c16 	blt	r22,r2,400df68 <___vfprintf_internal_r+0x1eb0>
 400def8:	d9402a17 	ldw	r5,168(sp)
 400defc:	2d801a16 	blt	r5,r22,400df68 <___vfprintf_internal_r+0x1eb0>
 400df00:	dd803215 	stw	r22,200(sp)
 400df04:	003e8906 	br	400d92c <__alt_data_end+0xfc00d92c>
 400df08:	010100b4 	movhi	r4,1026
 400df0c:	2106e484 	addi	r4,r4,7058
 400df10:	d9002c15 	stw	r4,176(sp)
 400df14:	003c9106 	br	400d15c <__alt_data_end+0xfc00d15c>
 400df18:	e005883a 	mov	r2,fp
 400df1c:	003e7906 	br	400d904 <__alt_data_end+0xfc00d904>
 400df20:	d9002a17 	ldw	r4,168(sp)
 400df24:	df002783 	ldbu	fp,158(sp)
 400df28:	dcc02e15 	stw	r19,184(sp)
 400df2c:	d9002915 	stw	r4,164(sp)
 400df30:	d9002b15 	stw	r4,172(sp)
 400df34:	d8002a15 	stw	zero,168(sp)
 400df38:	d8003215 	stw	zero,200(sp)
 400df3c:	003a3b06 	br	400c82c <__alt_data_end+0xfc00c82c>
 400df40:	9080004c 	andi	r2,r18,1
 400df44:	0039883a 	mov	fp,zero
 400df48:	10000426 	beq	r2,zero,400df5c <___vfprintf_internal_r+0x1ea4>
 400df4c:	00800c04 	movi	r2,48
 400df50:	dc001dc4 	addi	r16,sp,119
 400df54:	d8801dc5 	stb	r2,119(sp)
 400df58:	003b6406 	br	400ccec <__alt_data_end+0xfc00ccec>
 400df5c:	d8002b15 	stw	zero,172(sp)
 400df60:	dc001e04 	addi	r16,sp,120
 400df64:	003a2b06 	br	400c814 <__alt_data_end+0xfc00c814>
 400df68:	8c7fff84 	addi	r17,r17,-2
 400df6c:	b5bfffc4 	addi	r22,r22,-1
 400df70:	dd802615 	stw	r22,152(sp)
 400df74:	dc4022c5 	stb	r17,139(sp)
 400df78:	b000bf16 	blt	r22,zero,400e278 <___vfprintf_internal_r+0x21c0>
 400df7c:	00800ac4 	movi	r2,43
 400df80:	d8802305 	stb	r2,140(sp)
 400df84:	00800244 	movi	r2,9
 400df88:	15807016 	blt	r2,r22,400e14c <___vfprintf_internal_r+0x2094>
 400df8c:	00800c04 	movi	r2,48
 400df90:	b5800c04 	addi	r22,r22,48
 400df94:	d8802345 	stb	r2,141(sp)
 400df98:	dd802385 	stb	r22,142(sp)
 400df9c:	d88023c4 	addi	r2,sp,143
 400dfa0:	df0022c4 	addi	fp,sp,139
 400dfa4:	d8c03317 	ldw	r3,204(sp)
 400dfa8:	1739c83a 	sub	fp,r2,fp
 400dfac:	d9003317 	ldw	r4,204(sp)
 400dfb0:	e0c7883a 	add	r3,fp,r3
 400dfb4:	df003a15 	stw	fp,232(sp)
 400dfb8:	d8c02b15 	stw	r3,172(sp)
 400dfbc:	00800044 	movi	r2,1
 400dfc0:	1100b30e 	bge	r2,r4,400e290 <___vfprintf_internal_r+0x21d8>
 400dfc4:	d8c02b17 	ldw	r3,172(sp)
 400dfc8:	18c00044 	addi	r3,r3,1
 400dfcc:	d8c02b15 	stw	r3,172(sp)
 400dfd0:	1805883a 	mov	r2,r3
 400dfd4:	1800ac16 	blt	r3,zero,400e288 <___vfprintf_internal_r+0x21d0>
 400dfd8:	d8003215 	stw	zero,200(sp)
 400dfdc:	003e5d06 	br	400d954 <__alt_data_end+0xfc00d954>
 400dfe0:	d9002d17 	ldw	r4,180(sp)
 400dfe4:	d9801e04 	addi	r6,sp,120
 400dfe8:	b80b883a 	mov	r5,r23
 400dfec:	4012e540 	call	4012e54 <__sprint_r>
 400dff0:	1039351e 	bne	r2,zero,400c4c8 <__alt_data_end+0xfc00c4c8>
 400dff4:	dc402617 	ldw	r17,152(sp)
 400dff8:	d8c02017 	ldw	r3,128(sp)
 400dffc:	d8801f17 	ldw	r2,124(sp)
 400e000:	da000404 	addi	r8,sp,16
 400e004:	003ed606 	br	400db60 <__alt_data_end+0xfc00db60>
 400e008:	182b883a 	mov	r21,r3
 400e00c:	d8002a15 	stw	zero,168(sp)
 400e010:	00388c06 	br	400c244 <__alt_data_end+0xfc00c244>
 400e014:	d8802a17 	ldw	r2,168(sp)
 400e018:	103e071e 	bne	r2,zero,400d838 <__alt_data_end+0xfc00d838>
 400e01c:	dc002a15 	stw	r16,168(sp)
 400e020:	003e0506 	br	400d838 <__alt_data_end+0xfc00d838>
 400e024:	d9002a17 	ldw	r4,168(sp)
 400e028:	20c00044 	addi	r3,r4,1
 400e02c:	003e0f06 	br	400d86c <__alt_data_end+0xfc00d86c>
 400e030:	01400184 	movi	r5,6
 400e034:	d9402a15 	stw	r5,168(sp)
 400e038:	003dff06 	br	400d838 <__alt_data_end+0xfc00d838>
 400e03c:	d8802104 	addi	r2,sp,132
 400e040:	d8800315 	stw	r2,12(sp)
 400e044:	d8802504 	addi	r2,sp,148
 400e048:	d8800215 	stw	r2,8(sp)
 400e04c:	d8802604 	addi	r2,sp,152
 400e050:	d8800115 	stw	r2,4(sp)
 400e054:	d8802a17 	ldw	r2,168(sp)
 400e058:	d9403617 	ldw	r5,216(sp)
 400e05c:	d9002d17 	ldw	r4,180(sp)
 400e060:	d8800015 	stw	r2,0(sp)
 400e064:	01c000c4 	movi	r7,3
 400e068:	980d883a 	mov	r6,r19
 400e06c:	da003d15 	stw	r8,244(sp)
 400e070:	400e7e80 	call	400e7e8 <_dtoa_r>
 400e074:	d8c02a17 	ldw	r3,168(sp)
 400e078:	da003d17 	ldw	r8,244(sp)
 400e07c:	1021883a 	mov	r16,r2
 400e080:	10f9883a 	add	fp,r2,r3
 400e084:	81000007 	ldb	r4,0(r16)
 400e088:	00800c04 	movi	r2,48
 400e08c:	20805e26 	beq	r4,r2,400e208 <___vfprintf_internal_r+0x2150>
 400e090:	d8c02617 	ldw	r3,152(sp)
 400e094:	e0f9883a 	add	fp,fp,r3
 400e098:	003e0a06 	br	400d8c4 <__alt_data_end+0xfc00d8c4>
 400e09c:	00c00b44 	movi	r3,45
 400e0a0:	24e0003c 	xorhi	r19,r4,32768
 400e0a4:	d8c02905 	stb	r3,164(sp)
 400e0a8:	003de906 	br	400d850 <__alt_data_end+0xfc00d850>
 400e0ac:	d8c03217 	ldw	r3,200(sp)
 400e0b0:	00c07a0e 	bge	zero,r3,400e29c <___vfprintf_internal_r+0x21e4>
 400e0b4:	00800044 	movi	r2,1
 400e0b8:	d9003317 	ldw	r4,204(sp)
 400e0bc:	1105883a 	add	r2,r2,r4
 400e0c0:	d8802b15 	stw	r2,172(sp)
 400e0c4:	10004e16 	blt	r2,zero,400e200 <___vfprintf_internal_r+0x2148>
 400e0c8:	044019c4 	movi	r17,103
 400e0cc:	003e2106 	br	400d954 <__alt_data_end+0xfc00d954>
 400e0d0:	d9002a17 	ldw	r4,168(sp)
 400e0d4:	d8802104 	addi	r2,sp,132
 400e0d8:	d8800315 	stw	r2,12(sp)
 400e0dc:	d9000015 	stw	r4,0(sp)
 400e0e0:	d8802504 	addi	r2,sp,148
 400e0e4:	d9403617 	ldw	r5,216(sp)
 400e0e8:	d9002d17 	ldw	r4,180(sp)
 400e0ec:	d8800215 	stw	r2,8(sp)
 400e0f0:	d8802604 	addi	r2,sp,152
 400e0f4:	d8800115 	stw	r2,4(sp)
 400e0f8:	01c000c4 	movi	r7,3
 400e0fc:	980d883a 	mov	r6,r19
 400e100:	da003d15 	stw	r8,244(sp)
 400e104:	400e7e80 	call	400e7e8 <_dtoa_r>
 400e108:	d8c02a17 	ldw	r3,168(sp)
 400e10c:	da003d17 	ldw	r8,244(sp)
 400e110:	1021883a 	mov	r16,r2
 400e114:	00801184 	movi	r2,70
 400e118:	80f9883a 	add	fp,r16,r3
 400e11c:	88bfd926 	beq	r17,r2,400e084 <__alt_data_end+0xfc00e084>
 400e120:	003de806 	br	400d8c4 <__alt_data_end+0xfc00d8c4>
 400e124:	d9002a17 	ldw	r4,168(sp)
 400e128:	00c04d0e 	bge	zero,r3,400e260 <___vfprintf_internal_r+0x21a8>
 400e12c:	2000441e 	bne	r4,zero,400e240 <___vfprintf_internal_r+0x2188>
 400e130:	9480004c 	andi	r18,r18,1
 400e134:	9000421e 	bne	r18,zero,400e240 <___vfprintf_internal_r+0x2188>
 400e138:	1805883a 	mov	r2,r3
 400e13c:	18006f16 	blt	r3,zero,400e2fc <___vfprintf_internal_r+0x2244>
 400e140:	d8c03217 	ldw	r3,200(sp)
 400e144:	d8c02b15 	stw	r3,172(sp)
 400e148:	003e0206 	br	400d954 <__alt_data_end+0xfc00d954>
 400e14c:	df0022c4 	addi	fp,sp,139
 400e150:	dc002a15 	stw	r16,168(sp)
 400e154:	4027883a 	mov	r19,r8
 400e158:	e021883a 	mov	r16,fp
 400e15c:	b009883a 	mov	r4,r22
 400e160:	01400284 	movi	r5,10
 400e164:	400a9040 	call	400a904 <__modsi3>
 400e168:	10800c04 	addi	r2,r2,48
 400e16c:	843fffc4 	addi	r16,r16,-1
 400e170:	b009883a 	mov	r4,r22
 400e174:	01400284 	movi	r5,10
 400e178:	80800005 	stb	r2,0(r16)
 400e17c:	400a8800 	call	400a880 <__divsi3>
 400e180:	102d883a 	mov	r22,r2
 400e184:	00800244 	movi	r2,9
 400e188:	15bff416 	blt	r2,r22,400e15c <__alt_data_end+0xfc00e15c>
 400e18c:	9811883a 	mov	r8,r19
 400e190:	b0800c04 	addi	r2,r22,48
 400e194:	8027883a 	mov	r19,r16
 400e198:	997fffc4 	addi	r5,r19,-1
 400e19c:	98bfffc5 	stb	r2,-1(r19)
 400e1a0:	dc002a17 	ldw	r16,168(sp)
 400e1a4:	2f006d2e 	bgeu	r5,fp,400e35c <___vfprintf_internal_r+0x22a4>
 400e1a8:	d9c02384 	addi	r7,sp,142
 400e1ac:	3ccfc83a 	sub	r7,r7,r19
 400e1b0:	d9002344 	addi	r4,sp,141
 400e1b4:	e1cf883a 	add	r7,fp,r7
 400e1b8:	00000106 	br	400e1c0 <___vfprintf_internal_r+0x2108>
 400e1bc:	28800003 	ldbu	r2,0(r5)
 400e1c0:	20800005 	stb	r2,0(r4)
 400e1c4:	21000044 	addi	r4,r4,1
 400e1c8:	29400044 	addi	r5,r5,1
 400e1cc:	393ffb1e 	bne	r7,r4,400e1bc <__alt_data_end+0xfc00e1bc>
 400e1d0:	d8802304 	addi	r2,sp,140
 400e1d4:	14c5c83a 	sub	r2,r2,r19
 400e1d8:	d8c02344 	addi	r3,sp,141
 400e1dc:	1885883a 	add	r2,r3,r2
 400e1e0:	003f7006 	br	400dfa4 <__alt_data_end+0xfc00dfa4>
 400e1e4:	0005883a 	mov	r2,zero
 400e1e8:	003f0f06 	br	400de28 <__alt_data_end+0xfc00de28>
 400e1ec:	d8c03217 	ldw	r3,200(sp)
 400e1f0:	18c00044 	addi	r3,r3,1
 400e1f4:	d8c02b15 	stw	r3,172(sp)
 400e1f8:	1805883a 	mov	r2,r3
 400e1fc:	183fb20e 	bge	r3,zero,400e0c8 <__alt_data_end+0xfc00e0c8>
 400e200:	0005883a 	mov	r2,zero
 400e204:	003fb006 	br	400e0c8 <__alt_data_end+0xfc00e0c8>
 400e208:	d9003617 	ldw	r4,216(sp)
 400e20c:	000d883a 	mov	r6,zero
 400e210:	000f883a 	mov	r7,zero
 400e214:	980b883a 	mov	r5,r19
 400e218:	d8c03c15 	stw	r3,240(sp)
 400e21c:	da003d15 	stw	r8,244(sp)
 400e220:	4016bd80 	call	4016bd8 <__eqdf2>
 400e224:	d8c03c17 	ldw	r3,240(sp)
 400e228:	da003d17 	ldw	r8,244(sp)
 400e22c:	103f9826 	beq	r2,zero,400e090 <__alt_data_end+0xfc00e090>
 400e230:	00800044 	movi	r2,1
 400e234:	10c7c83a 	sub	r3,r2,r3
 400e238:	d8c02615 	stw	r3,152(sp)
 400e23c:	003f9506 	br	400e094 <__alt_data_end+0xfc00e094>
 400e240:	d9002a17 	ldw	r4,168(sp)
 400e244:	d8c03217 	ldw	r3,200(sp)
 400e248:	20800044 	addi	r2,r4,1
 400e24c:	1885883a 	add	r2,r3,r2
 400e250:	d8802b15 	stw	r2,172(sp)
 400e254:	103dbf0e 	bge	r2,zero,400d954 <__alt_data_end+0xfc00d954>
 400e258:	0005883a 	mov	r2,zero
 400e25c:	003dbd06 	br	400d954 <__alt_data_end+0xfc00d954>
 400e260:	2000201e 	bne	r4,zero,400e2e4 <___vfprintf_internal_r+0x222c>
 400e264:	9480004c 	andi	r18,r18,1
 400e268:	90001e1e 	bne	r18,zero,400e2e4 <___vfprintf_internal_r+0x222c>
 400e26c:	00800044 	movi	r2,1
 400e270:	d8802b15 	stw	r2,172(sp)
 400e274:	003db706 	br	400d954 <__alt_data_end+0xfc00d954>
 400e278:	00800b44 	movi	r2,45
 400e27c:	05adc83a 	sub	r22,zero,r22
 400e280:	d8802305 	stb	r2,140(sp)
 400e284:	003f3f06 	br	400df84 <__alt_data_end+0xfc00df84>
 400e288:	0005883a 	mov	r2,zero
 400e28c:	003f5206 	br	400dfd8 <__alt_data_end+0xfc00dfd8>
 400e290:	90a4703a 	and	r18,r18,r2
 400e294:	903f4e26 	beq	r18,zero,400dfd0 <__alt_data_end+0xfc00dfd0>
 400e298:	003f4a06 	br	400dfc4 <__alt_data_end+0xfc00dfc4>
 400e29c:	00800084 	movi	r2,2
 400e2a0:	10c5c83a 	sub	r2,r2,r3
 400e2a4:	003f8406 	br	400e0b8 <__alt_data_end+0xfc00e0b8>
 400e2a8:	d9402e17 	ldw	r5,184(sp)
 400e2ac:	d9002e17 	ldw	r4,184(sp)
 400e2b0:	ac400043 	ldbu	r17,1(r21)
 400e2b4:	29400017 	ldw	r5,0(r5)
 400e2b8:	20800104 	addi	r2,r4,4
 400e2bc:	d8802e15 	stw	r2,184(sp)
 400e2c0:	d9402a15 	stw	r5,168(sp)
 400e2c4:	182b883a 	mov	r21,r3
 400e2c8:	283e7b0e 	bge	r5,zero,400dcb8 <__alt_data_end+0xfc00dcb8>
 400e2cc:	8c403fcc 	andi	r17,r17,255
 400e2d0:	017fffc4 	movi	r5,-1
 400e2d4:	8c40201c 	xori	r17,r17,128
 400e2d8:	d9402a15 	stw	r5,168(sp)
 400e2dc:	8c7fe004 	addi	r17,r17,-128
 400e2e0:	0037d706 	br	400c240 <__alt_data_end+0xfc00c240>
 400e2e4:	d8c02a17 	ldw	r3,168(sp)
 400e2e8:	18c00084 	addi	r3,r3,2
 400e2ec:	d8c02b15 	stw	r3,172(sp)
 400e2f0:	1805883a 	mov	r2,r3
 400e2f4:	183d970e 	bge	r3,zero,400d954 <__alt_data_end+0xfc00d954>
 400e2f8:	003fd706 	br	400e258 <__alt_data_end+0xfc00e258>
 400e2fc:	0005883a 	mov	r2,zero
 400e300:	003f8f06 	br	400e140 <__alt_data_end+0xfc00e140>
 400e304:	9080004c 	andi	r2,r18,1
 400e308:	103f821e 	bne	r2,zero,400e114 <__alt_data_end+0xfc00e114>
 400e30c:	d8802117 	ldw	r2,132(sp)
 400e310:	1405c83a 	sub	r2,r2,r16
 400e314:	d8803315 	stw	r2,204(sp)
 400e318:	b47ef426 	beq	r22,r17,400deec <__alt_data_end+0xfc00deec>
 400e31c:	dd802617 	ldw	r22,152(sp)
 400e320:	003f1206 	br	400df6c <__alt_data_end+0xfc00df6c>
 400e324:	d8c02b03 	ldbu	r3,172(sp)
 400e328:	d8c02785 	stb	r3,158(sp)
 400e32c:	0038df06 	br	400c6ac <__alt_data_end+0xfc00c6ac>
 400e330:	d8c02b03 	ldbu	r3,172(sp)
 400e334:	d8c02785 	stb	r3,158(sp)
 400e338:	0038aa06 	br	400c5e4 <__alt_data_end+0xfc00c5e4>
 400e33c:	d8c02b03 	ldbu	r3,172(sp)
 400e340:	d8c02785 	stb	r3,158(sp)
 400e344:	003a4306 	br	400cc54 <__alt_data_end+0xfc00cc54>
 400e348:	d8c02b03 	ldbu	r3,172(sp)
 400e34c:	d8c02785 	stb	r3,158(sp)
 400e350:	003af506 	br	400cf28 <__alt_data_end+0xfc00cf28>
 400e354:	0005883a 	mov	r2,zero
 400e358:	003d7b06 	br	400d948 <__alt_data_end+0xfc00d948>
 400e35c:	d8802344 	addi	r2,sp,141
 400e360:	003f1006 	br	400dfa4 <__alt_data_end+0xfc00dfa4>
 400e364:	d8c02b03 	ldbu	r3,172(sp)
 400e368:	d8c02785 	stb	r3,158(sp)
 400e36c:	0038fd06 	br	400c764 <__alt_data_end+0xfc00c764>
 400e370:	d8c02b03 	ldbu	r3,172(sp)
 400e374:	d8c02785 	stb	r3,158(sp)
 400e378:	003a9706 	br	400cdd8 <__alt_data_end+0xfc00cdd8>
 400e37c:	d8c02b03 	ldbu	r3,172(sp)
 400e380:	d8c02785 	stb	r3,158(sp)
 400e384:	003a1806 	br	400cbe8 <__alt_data_end+0xfc00cbe8>
 400e388:	d8c02b03 	ldbu	r3,172(sp)
 400e38c:	d8c02785 	stb	r3,158(sp)
 400e390:	003abe06 	br	400ce8c <__alt_data_end+0xfc00ce8c>

0400e394 <__vfprintf_internal>:
 400e394:	008100b4 	movhi	r2,1026
 400e398:	1093f304 	addi	r2,r2,20428
 400e39c:	300f883a 	mov	r7,r6
 400e3a0:	280d883a 	mov	r6,r5
 400e3a4:	200b883a 	mov	r5,r4
 400e3a8:	11000017 	ldw	r4,0(r2)
 400e3ac:	400c0b81 	jmpi	400c0b8 <___vfprintf_internal_r>

0400e3b0 <__sbprintf>:
 400e3b0:	2880030b 	ldhu	r2,12(r5)
 400e3b4:	2ac01917 	ldw	r11,100(r5)
 400e3b8:	2a80038b 	ldhu	r10,14(r5)
 400e3bc:	2a400717 	ldw	r9,28(r5)
 400e3c0:	2a000917 	ldw	r8,36(r5)
 400e3c4:	defee204 	addi	sp,sp,-1144
 400e3c8:	00c10004 	movi	r3,1024
 400e3cc:	dc011a15 	stw	r16,1128(sp)
 400e3d0:	10bfff4c 	andi	r2,r2,65533
 400e3d4:	2821883a 	mov	r16,r5
 400e3d8:	d8cb883a 	add	r5,sp,r3
 400e3dc:	dc811c15 	stw	r18,1136(sp)
 400e3e0:	dc411b15 	stw	r17,1132(sp)
 400e3e4:	dfc11d15 	stw	ra,1140(sp)
 400e3e8:	2025883a 	mov	r18,r4
 400e3ec:	d881030d 	sth	r2,1036(sp)
 400e3f0:	dac11915 	stw	r11,1124(sp)
 400e3f4:	da81038d 	sth	r10,1038(sp)
 400e3f8:	da410715 	stw	r9,1052(sp)
 400e3fc:	da010915 	stw	r8,1060(sp)
 400e400:	dec10015 	stw	sp,1024(sp)
 400e404:	dec10415 	stw	sp,1040(sp)
 400e408:	d8c10215 	stw	r3,1032(sp)
 400e40c:	d8c10515 	stw	r3,1044(sp)
 400e410:	d8010615 	stw	zero,1048(sp)
 400e414:	400c0b80 	call	400c0b8 <___vfprintf_internal_r>
 400e418:	1023883a 	mov	r17,r2
 400e41c:	10000416 	blt	r2,zero,400e430 <__sbprintf+0x80>
 400e420:	d9410004 	addi	r5,sp,1024
 400e424:	9009883a 	mov	r4,r18
 400e428:	401008c0 	call	401008c <_fflush_r>
 400e42c:	10000d1e 	bne	r2,zero,400e464 <__sbprintf+0xb4>
 400e430:	d881030b 	ldhu	r2,1036(sp)
 400e434:	1080100c 	andi	r2,r2,64
 400e438:	10000326 	beq	r2,zero,400e448 <__sbprintf+0x98>
 400e43c:	8080030b 	ldhu	r2,12(r16)
 400e440:	10801014 	ori	r2,r2,64
 400e444:	8080030d 	sth	r2,12(r16)
 400e448:	8805883a 	mov	r2,r17
 400e44c:	dfc11d17 	ldw	ra,1140(sp)
 400e450:	dc811c17 	ldw	r18,1136(sp)
 400e454:	dc411b17 	ldw	r17,1132(sp)
 400e458:	dc011a17 	ldw	r16,1128(sp)
 400e45c:	dec11e04 	addi	sp,sp,1144
 400e460:	f800283a 	ret
 400e464:	047fffc4 	movi	r17,-1
 400e468:	003ff106 	br	400e430 <__alt_data_end+0xfc00e430>

0400e46c <__swsetup_r>:
 400e46c:	008100b4 	movhi	r2,1026
 400e470:	defffd04 	addi	sp,sp,-12
 400e474:	1093f304 	addi	r2,r2,20428
 400e478:	dc400115 	stw	r17,4(sp)
 400e47c:	2023883a 	mov	r17,r4
 400e480:	11000017 	ldw	r4,0(r2)
 400e484:	dc000015 	stw	r16,0(sp)
 400e488:	dfc00215 	stw	ra,8(sp)
 400e48c:	2821883a 	mov	r16,r5
 400e490:	20000226 	beq	r4,zero,400e49c <__swsetup_r+0x30>
 400e494:	20800e17 	ldw	r2,56(r4)
 400e498:	10003126 	beq	r2,zero,400e560 <__swsetup_r+0xf4>
 400e49c:	8080030b 	ldhu	r2,12(r16)
 400e4a0:	10c0020c 	andi	r3,r2,8
 400e4a4:	1009883a 	mov	r4,r2
 400e4a8:	18000f26 	beq	r3,zero,400e4e8 <__swsetup_r+0x7c>
 400e4ac:	80c00417 	ldw	r3,16(r16)
 400e4b0:	18001526 	beq	r3,zero,400e508 <__swsetup_r+0x9c>
 400e4b4:	1100004c 	andi	r4,r2,1
 400e4b8:	20001c1e 	bne	r4,zero,400e52c <__swsetup_r+0xc0>
 400e4bc:	1080008c 	andi	r2,r2,2
 400e4c0:	1000291e 	bne	r2,zero,400e568 <__swsetup_r+0xfc>
 400e4c4:	80800517 	ldw	r2,20(r16)
 400e4c8:	80800215 	stw	r2,8(r16)
 400e4cc:	18001c26 	beq	r3,zero,400e540 <__swsetup_r+0xd4>
 400e4d0:	0005883a 	mov	r2,zero
 400e4d4:	dfc00217 	ldw	ra,8(sp)
 400e4d8:	dc400117 	ldw	r17,4(sp)
 400e4dc:	dc000017 	ldw	r16,0(sp)
 400e4e0:	dec00304 	addi	sp,sp,12
 400e4e4:	f800283a 	ret
 400e4e8:	2080040c 	andi	r2,r4,16
 400e4ec:	10002e26 	beq	r2,zero,400e5a8 <__swsetup_r+0x13c>
 400e4f0:	2080010c 	andi	r2,r4,4
 400e4f4:	10001e1e 	bne	r2,zero,400e570 <__swsetup_r+0x104>
 400e4f8:	80c00417 	ldw	r3,16(r16)
 400e4fc:	20800214 	ori	r2,r4,8
 400e500:	8080030d 	sth	r2,12(r16)
 400e504:	183feb1e 	bne	r3,zero,400e4b4 <__alt_data_end+0xfc00e4b4>
 400e508:	1100a00c 	andi	r4,r2,640
 400e50c:	01408004 	movi	r5,512
 400e510:	217fe826 	beq	r4,r5,400e4b4 <__alt_data_end+0xfc00e4b4>
 400e514:	800b883a 	mov	r5,r16
 400e518:	8809883a 	mov	r4,r17
 400e51c:	40110280 	call	4011028 <__smakebuf_r>
 400e520:	8080030b 	ldhu	r2,12(r16)
 400e524:	80c00417 	ldw	r3,16(r16)
 400e528:	003fe206 	br	400e4b4 <__alt_data_end+0xfc00e4b4>
 400e52c:	80800517 	ldw	r2,20(r16)
 400e530:	80000215 	stw	zero,8(r16)
 400e534:	0085c83a 	sub	r2,zero,r2
 400e538:	80800615 	stw	r2,24(r16)
 400e53c:	183fe41e 	bne	r3,zero,400e4d0 <__alt_data_end+0xfc00e4d0>
 400e540:	80c0030b 	ldhu	r3,12(r16)
 400e544:	0005883a 	mov	r2,zero
 400e548:	1900200c 	andi	r4,r3,128
 400e54c:	203fe126 	beq	r4,zero,400e4d4 <__alt_data_end+0xfc00e4d4>
 400e550:	18c01014 	ori	r3,r3,64
 400e554:	80c0030d 	sth	r3,12(r16)
 400e558:	00bfffc4 	movi	r2,-1
 400e55c:	003fdd06 	br	400e4d4 <__alt_data_end+0xfc00e4d4>
 400e560:	40104780 	call	4010478 <__sinit>
 400e564:	003fcd06 	br	400e49c <__alt_data_end+0xfc00e49c>
 400e568:	0005883a 	mov	r2,zero
 400e56c:	003fd606 	br	400e4c8 <__alt_data_end+0xfc00e4c8>
 400e570:	81400c17 	ldw	r5,48(r16)
 400e574:	28000626 	beq	r5,zero,400e590 <__swsetup_r+0x124>
 400e578:	80801004 	addi	r2,r16,64
 400e57c:	28800326 	beq	r5,r2,400e58c <__swsetup_r+0x120>
 400e580:	8809883a 	mov	r4,r17
 400e584:	40105ec0 	call	40105ec <_free_r>
 400e588:	8100030b 	ldhu	r4,12(r16)
 400e58c:	80000c15 	stw	zero,48(r16)
 400e590:	80c00417 	ldw	r3,16(r16)
 400e594:	00bff6c4 	movi	r2,-37
 400e598:	1108703a 	and	r4,r2,r4
 400e59c:	80000115 	stw	zero,4(r16)
 400e5a0:	80c00015 	stw	r3,0(r16)
 400e5a4:	003fd506 	br	400e4fc <__alt_data_end+0xfc00e4fc>
 400e5a8:	00800244 	movi	r2,9
 400e5ac:	88800015 	stw	r2,0(r17)
 400e5b0:	20801014 	ori	r2,r4,64
 400e5b4:	8080030d 	sth	r2,12(r16)
 400e5b8:	00bfffc4 	movi	r2,-1
 400e5bc:	003fc506 	br	400e4d4 <__alt_data_end+0xfc00e4d4>

0400e5c0 <quorem>:
 400e5c0:	defff204 	addi	sp,sp,-56
 400e5c4:	ddc00b15 	stw	r23,44(sp)
 400e5c8:	20800417 	ldw	r2,16(r4)
 400e5cc:	2dc00417 	ldw	r23,16(r5)
 400e5d0:	dfc00d15 	stw	ra,52(sp)
 400e5d4:	df000c15 	stw	fp,48(sp)
 400e5d8:	dd800a15 	stw	r22,40(sp)
 400e5dc:	dd400915 	stw	r21,36(sp)
 400e5e0:	dd000815 	stw	r20,32(sp)
 400e5e4:	dcc00715 	stw	r19,28(sp)
 400e5e8:	dc800615 	stw	r18,24(sp)
 400e5ec:	dc400515 	stw	r17,20(sp)
 400e5f0:	dc000415 	stw	r16,16(sp)
 400e5f4:	15c07a16 	blt	r2,r23,400e7e0 <quorem+0x220>
 400e5f8:	bdffffc4 	addi	r23,r23,-1
 400e5fc:	bde9883a 	add	r20,r23,r23
 400e600:	28c00504 	addi	r3,r5,20
 400e604:	a529883a 	add	r20,r20,r20
 400e608:	1d39883a 	add	fp,r3,r20
 400e60c:	24c00504 	addi	r19,r4,20
 400e610:	d9400215 	stw	r5,8(sp)
 400e614:	9d29883a 	add	r20,r19,r20
 400e618:	e1400017 	ldw	r5,0(fp)
 400e61c:	d9000015 	stw	r4,0(sp)
 400e620:	a1000017 	ldw	r4,0(r20)
 400e624:	29400044 	addi	r5,r5,1
 400e628:	d8c00115 	stw	r3,4(sp)
 400e62c:	dd000315 	stw	r20,12(sp)
 400e630:	400a9780 	call	400a978 <__udivsi3>
 400e634:	1025883a 	mov	r18,r2
 400e638:	10003026 	beq	r2,zero,400e6fc <quorem+0x13c>
 400e63c:	dc400117 	ldw	r17,4(sp)
 400e640:	9829883a 	mov	r20,r19
 400e644:	002d883a 	mov	r22,zero
 400e648:	0021883a 	mov	r16,zero
 400e64c:	8d400017 	ldw	r21,0(r17)
 400e650:	900b883a 	mov	r5,r18
 400e654:	8c400104 	addi	r17,r17,4
 400e658:	a93fffcc 	andi	r4,r21,65535
 400e65c:	400aa340 	call	400aa34 <__mulsi3>
 400e660:	a808d43a 	srli	r4,r21,16
 400e664:	900b883a 	mov	r5,r18
 400e668:	15ad883a 	add	r22,r2,r22
 400e66c:	400aa340 	call	400aa34 <__mulsi3>
 400e670:	a1000017 	ldw	r4,0(r20)
 400e674:	b00cd43a 	srli	r6,r22,16
 400e678:	b0ffffcc 	andi	r3,r22,65535
 400e67c:	217fffcc 	andi	r5,r4,65535
 400e680:	2c21883a 	add	r16,r5,r16
 400e684:	80c7c83a 	sub	r3,r16,r3
 400e688:	2008d43a 	srli	r4,r4,16
 400e68c:	1185883a 	add	r2,r2,r6
 400e690:	1821d43a 	srai	r16,r3,16
 400e694:	117fffcc 	andi	r5,r2,65535
 400e698:	2149c83a 	sub	r4,r4,r5
 400e69c:	2421883a 	add	r16,r4,r16
 400e6a0:	8008943a 	slli	r4,r16,16
 400e6a4:	18ffffcc 	andi	r3,r3,65535
 400e6a8:	102cd43a 	srli	r22,r2,16
 400e6ac:	20c8b03a 	or	r4,r4,r3
 400e6b0:	a1000015 	stw	r4,0(r20)
 400e6b4:	8021d43a 	srai	r16,r16,16
 400e6b8:	a5000104 	addi	r20,r20,4
 400e6bc:	e47fe32e 	bgeu	fp,r17,400e64c <__alt_data_end+0xfc00e64c>
 400e6c0:	d8c00317 	ldw	r3,12(sp)
 400e6c4:	18800017 	ldw	r2,0(r3)
 400e6c8:	10000c1e 	bne	r2,zero,400e6fc <quorem+0x13c>
 400e6cc:	18bfff04 	addi	r2,r3,-4
 400e6d0:	9880082e 	bgeu	r19,r2,400e6f4 <quorem+0x134>
 400e6d4:	18ffff17 	ldw	r3,-4(r3)
 400e6d8:	18000326 	beq	r3,zero,400e6e8 <quorem+0x128>
 400e6dc:	00000506 	br	400e6f4 <quorem+0x134>
 400e6e0:	10c00017 	ldw	r3,0(r2)
 400e6e4:	1800031e 	bne	r3,zero,400e6f4 <quorem+0x134>
 400e6e8:	10bfff04 	addi	r2,r2,-4
 400e6ec:	bdffffc4 	addi	r23,r23,-1
 400e6f0:	98bffb36 	bltu	r19,r2,400e6e0 <__alt_data_end+0xfc00e6e0>
 400e6f4:	d8c00017 	ldw	r3,0(sp)
 400e6f8:	1dc00415 	stw	r23,16(r3)
 400e6fc:	d9400217 	ldw	r5,8(sp)
 400e700:	d9000017 	ldw	r4,0(sp)
 400e704:	4011da80 	call	4011da8 <__mcmp>
 400e708:	10002816 	blt	r2,zero,400e7ac <quorem+0x1ec>
 400e70c:	dc400117 	ldw	r17,4(sp)
 400e710:	94800044 	addi	r18,r18,1
 400e714:	980d883a 	mov	r6,r19
 400e718:	0007883a 	mov	r3,zero
 400e71c:	31000017 	ldw	r4,0(r6)
 400e720:	89400017 	ldw	r5,0(r17)
 400e724:	31800104 	addi	r6,r6,4
 400e728:	20bfffcc 	andi	r2,r4,65535
 400e72c:	10c7883a 	add	r3,r2,r3
 400e730:	28bfffcc 	andi	r2,r5,65535
 400e734:	1885c83a 	sub	r2,r3,r2
 400e738:	280ad43a 	srli	r5,r5,16
 400e73c:	2008d43a 	srli	r4,r4,16
 400e740:	1007d43a 	srai	r3,r2,16
 400e744:	10bfffcc 	andi	r2,r2,65535
 400e748:	2149c83a 	sub	r4,r4,r5
 400e74c:	20c9883a 	add	r4,r4,r3
 400e750:	200a943a 	slli	r5,r4,16
 400e754:	8c400104 	addi	r17,r17,4
 400e758:	2007d43a 	srai	r3,r4,16
 400e75c:	2884b03a 	or	r2,r5,r2
 400e760:	30bfff15 	stw	r2,-4(r6)
 400e764:	e47fed2e 	bgeu	fp,r17,400e71c <__alt_data_end+0xfc00e71c>
 400e768:	bdc5883a 	add	r2,r23,r23
 400e76c:	1085883a 	add	r2,r2,r2
 400e770:	9887883a 	add	r3,r19,r2
 400e774:	18800017 	ldw	r2,0(r3)
 400e778:	10000c1e 	bne	r2,zero,400e7ac <quorem+0x1ec>
 400e77c:	18bfff04 	addi	r2,r3,-4
 400e780:	9880082e 	bgeu	r19,r2,400e7a4 <quorem+0x1e4>
 400e784:	18ffff17 	ldw	r3,-4(r3)
 400e788:	18000326 	beq	r3,zero,400e798 <quorem+0x1d8>
 400e78c:	00000506 	br	400e7a4 <quorem+0x1e4>
 400e790:	10c00017 	ldw	r3,0(r2)
 400e794:	1800031e 	bne	r3,zero,400e7a4 <quorem+0x1e4>
 400e798:	10bfff04 	addi	r2,r2,-4
 400e79c:	bdffffc4 	addi	r23,r23,-1
 400e7a0:	98bffb36 	bltu	r19,r2,400e790 <__alt_data_end+0xfc00e790>
 400e7a4:	d8c00017 	ldw	r3,0(sp)
 400e7a8:	1dc00415 	stw	r23,16(r3)
 400e7ac:	9005883a 	mov	r2,r18
 400e7b0:	dfc00d17 	ldw	ra,52(sp)
 400e7b4:	df000c17 	ldw	fp,48(sp)
 400e7b8:	ddc00b17 	ldw	r23,44(sp)
 400e7bc:	dd800a17 	ldw	r22,40(sp)
 400e7c0:	dd400917 	ldw	r21,36(sp)
 400e7c4:	dd000817 	ldw	r20,32(sp)
 400e7c8:	dcc00717 	ldw	r19,28(sp)
 400e7cc:	dc800617 	ldw	r18,24(sp)
 400e7d0:	dc400517 	ldw	r17,20(sp)
 400e7d4:	dc000417 	ldw	r16,16(sp)
 400e7d8:	dec00e04 	addi	sp,sp,56
 400e7dc:	f800283a 	ret
 400e7e0:	0005883a 	mov	r2,zero
 400e7e4:	003ff206 	br	400e7b0 <__alt_data_end+0xfc00e7b0>

0400e7e8 <_dtoa_r>:
 400e7e8:	20801017 	ldw	r2,64(r4)
 400e7ec:	deffde04 	addi	sp,sp,-136
 400e7f0:	df002015 	stw	fp,128(sp)
 400e7f4:	dcc01b15 	stw	r19,108(sp)
 400e7f8:	dc801a15 	stw	r18,104(sp)
 400e7fc:	dc401915 	stw	r17,100(sp)
 400e800:	dc001815 	stw	r16,96(sp)
 400e804:	dfc02115 	stw	ra,132(sp)
 400e808:	ddc01f15 	stw	r23,124(sp)
 400e80c:	dd801e15 	stw	r22,120(sp)
 400e810:	dd401d15 	stw	r21,116(sp)
 400e814:	dd001c15 	stw	r20,112(sp)
 400e818:	d9c00315 	stw	r7,12(sp)
 400e81c:	2039883a 	mov	fp,r4
 400e820:	3023883a 	mov	r17,r6
 400e824:	2825883a 	mov	r18,r5
 400e828:	dc002417 	ldw	r16,144(sp)
 400e82c:	3027883a 	mov	r19,r6
 400e830:	10000826 	beq	r2,zero,400e854 <_dtoa_r+0x6c>
 400e834:	21801117 	ldw	r6,68(r4)
 400e838:	00c00044 	movi	r3,1
 400e83c:	100b883a 	mov	r5,r2
 400e840:	1986983a 	sll	r3,r3,r6
 400e844:	11800115 	stw	r6,4(r2)
 400e848:	10c00215 	stw	r3,8(r2)
 400e84c:	40114cc0 	call	40114cc <_Bfree>
 400e850:	e0001015 	stw	zero,64(fp)
 400e854:	88002e16 	blt	r17,zero,400e910 <_dtoa_r+0x128>
 400e858:	80000015 	stw	zero,0(r16)
 400e85c:	889ffc2c 	andhi	r2,r17,32752
 400e860:	00dffc34 	movhi	r3,32752
 400e864:	10c01c26 	beq	r2,r3,400e8d8 <_dtoa_r+0xf0>
 400e868:	000d883a 	mov	r6,zero
 400e86c:	000f883a 	mov	r7,zero
 400e870:	9009883a 	mov	r4,r18
 400e874:	980b883a 	mov	r5,r19
 400e878:	4016bd80 	call	4016bd8 <__eqdf2>
 400e87c:	10002b1e 	bne	r2,zero,400e92c <_dtoa_r+0x144>
 400e880:	d9c02317 	ldw	r7,140(sp)
 400e884:	00800044 	movi	r2,1
 400e888:	38800015 	stw	r2,0(r7)
 400e88c:	d8802517 	ldw	r2,148(sp)
 400e890:	10019e26 	beq	r2,zero,400ef0c <_dtoa_r+0x724>
 400e894:	d8c02517 	ldw	r3,148(sp)
 400e898:	008100b4 	movhi	r2,1026
 400e89c:	1086e444 	addi	r2,r2,7057
 400e8a0:	18800015 	stw	r2,0(r3)
 400e8a4:	10bfffc4 	addi	r2,r2,-1
 400e8a8:	dfc02117 	ldw	ra,132(sp)
 400e8ac:	df002017 	ldw	fp,128(sp)
 400e8b0:	ddc01f17 	ldw	r23,124(sp)
 400e8b4:	dd801e17 	ldw	r22,120(sp)
 400e8b8:	dd401d17 	ldw	r21,116(sp)
 400e8bc:	dd001c17 	ldw	r20,112(sp)
 400e8c0:	dcc01b17 	ldw	r19,108(sp)
 400e8c4:	dc801a17 	ldw	r18,104(sp)
 400e8c8:	dc401917 	ldw	r17,100(sp)
 400e8cc:	dc001817 	ldw	r16,96(sp)
 400e8d0:	dec02204 	addi	sp,sp,136
 400e8d4:	f800283a 	ret
 400e8d8:	d8c02317 	ldw	r3,140(sp)
 400e8dc:	0089c3c4 	movi	r2,9999
 400e8e0:	18800015 	stw	r2,0(r3)
 400e8e4:	90017726 	beq	r18,zero,400eec4 <_dtoa_r+0x6dc>
 400e8e8:	008100b4 	movhi	r2,1026
 400e8ec:	1086f004 	addi	r2,r2,7104
 400e8f0:	d9002517 	ldw	r4,148(sp)
 400e8f4:	203fec26 	beq	r4,zero,400e8a8 <__alt_data_end+0xfc00e8a8>
 400e8f8:	10c000c7 	ldb	r3,3(r2)
 400e8fc:	1801781e 	bne	r3,zero,400eee0 <_dtoa_r+0x6f8>
 400e900:	10c000c4 	addi	r3,r2,3
 400e904:	d9802517 	ldw	r6,148(sp)
 400e908:	30c00015 	stw	r3,0(r6)
 400e90c:	003fe606 	br	400e8a8 <__alt_data_end+0xfc00e8a8>
 400e910:	04e00034 	movhi	r19,32768
 400e914:	9cffffc4 	addi	r19,r19,-1
 400e918:	00800044 	movi	r2,1
 400e91c:	8ce6703a 	and	r19,r17,r19
 400e920:	80800015 	stw	r2,0(r16)
 400e924:	9823883a 	mov	r17,r19
 400e928:	003fcc06 	br	400e85c <__alt_data_end+0xfc00e85c>
 400e92c:	d8800204 	addi	r2,sp,8
 400e930:	d8800015 	stw	r2,0(sp)
 400e934:	d9c00104 	addi	r7,sp,4
 400e938:	900b883a 	mov	r5,r18
 400e93c:	980d883a 	mov	r6,r19
 400e940:	e009883a 	mov	r4,fp
 400e944:	8820d53a 	srli	r16,r17,20
 400e948:	40121740 	call	4012174 <__d2b>
 400e94c:	d8800915 	stw	r2,36(sp)
 400e950:	8001651e 	bne	r16,zero,400eee8 <_dtoa_r+0x700>
 400e954:	dd800217 	ldw	r22,8(sp)
 400e958:	dc000117 	ldw	r16,4(sp)
 400e95c:	00800804 	movi	r2,32
 400e960:	b421883a 	add	r16,r22,r16
 400e964:	80c10c84 	addi	r3,r16,1074
 400e968:	10c2d10e 	bge	r2,r3,400f4b0 <_dtoa_r+0xcc8>
 400e96c:	00801004 	movi	r2,64
 400e970:	81010484 	addi	r4,r16,1042
 400e974:	10c7c83a 	sub	r3,r2,r3
 400e978:	9108d83a 	srl	r4,r18,r4
 400e97c:	88e2983a 	sll	r17,r17,r3
 400e980:	2448b03a 	or	r4,r4,r17
 400e984:	40180f40 	call	40180f4 <__floatunsidf>
 400e988:	017f8434 	movhi	r5,65040
 400e98c:	01800044 	movi	r6,1
 400e990:	1009883a 	mov	r4,r2
 400e994:	194b883a 	add	r5,r3,r5
 400e998:	843fffc4 	addi	r16,r16,-1
 400e99c:	d9801115 	stw	r6,68(sp)
 400e9a0:	000d883a 	mov	r6,zero
 400e9a4:	01cffe34 	movhi	r7,16376
 400e9a8:	401769c0 	call	401769c <__subdf3>
 400e9ac:	0198dbf4 	movhi	r6,25455
 400e9b0:	01cff4f4 	movhi	r7,16339
 400e9b4:	3190d844 	addi	r6,r6,17249
 400e9b8:	39e1e9c4 	addi	r7,r7,-30809
 400e9bc:	1009883a 	mov	r4,r2
 400e9c0:	180b883a 	mov	r5,r3
 400e9c4:	4016e300 	call	4016e30 <__muldf3>
 400e9c8:	01a2d874 	movhi	r6,35681
 400e9cc:	01cff1f4 	movhi	r7,16327
 400e9d0:	31b22cc4 	addi	r6,r6,-14157
 400e9d4:	39e28a04 	addi	r7,r7,-30168
 400e9d8:	180b883a 	mov	r5,r3
 400e9dc:	1009883a 	mov	r4,r2
 400e9e0:	401595c0 	call	401595c <__adddf3>
 400e9e4:	8009883a 	mov	r4,r16
 400e9e8:	1029883a 	mov	r20,r2
 400e9ec:	1823883a 	mov	r17,r3
 400e9f0:	40180180 	call	4018018 <__floatsidf>
 400e9f4:	019427f4 	movhi	r6,20639
 400e9f8:	01cff4f4 	movhi	r7,16339
 400e9fc:	319e7ec4 	addi	r6,r6,31227
 400ea00:	39d104c4 	addi	r7,r7,17427
 400ea04:	1009883a 	mov	r4,r2
 400ea08:	180b883a 	mov	r5,r3
 400ea0c:	4016e300 	call	4016e30 <__muldf3>
 400ea10:	100d883a 	mov	r6,r2
 400ea14:	180f883a 	mov	r7,r3
 400ea18:	a009883a 	mov	r4,r20
 400ea1c:	880b883a 	mov	r5,r17
 400ea20:	401595c0 	call	401595c <__adddf3>
 400ea24:	1009883a 	mov	r4,r2
 400ea28:	180b883a 	mov	r5,r3
 400ea2c:	1029883a 	mov	r20,r2
 400ea30:	1823883a 	mov	r17,r3
 400ea34:	4017f980 	call	4017f98 <__fixdfsi>
 400ea38:	000d883a 	mov	r6,zero
 400ea3c:	000f883a 	mov	r7,zero
 400ea40:	a009883a 	mov	r4,r20
 400ea44:	880b883a 	mov	r5,r17
 400ea48:	d8800515 	stw	r2,20(sp)
 400ea4c:	4016d3c0 	call	4016d3c <__ledf2>
 400ea50:	10028716 	blt	r2,zero,400f470 <_dtoa_r+0xc88>
 400ea54:	d8c00517 	ldw	r3,20(sp)
 400ea58:	00800584 	movi	r2,22
 400ea5c:	10c27536 	bltu	r2,r3,400f434 <_dtoa_r+0xc4c>
 400ea60:	180490fa 	slli	r2,r3,3
 400ea64:	00c100b4 	movhi	r3,1026
 400ea68:	18c70b04 	addi	r3,r3,7212
 400ea6c:	1885883a 	add	r2,r3,r2
 400ea70:	11000017 	ldw	r4,0(r2)
 400ea74:	11400117 	ldw	r5,4(r2)
 400ea78:	900d883a 	mov	r6,r18
 400ea7c:	980f883a 	mov	r7,r19
 400ea80:	4016c600 	call	4016c60 <__gedf2>
 400ea84:	00828d0e 	bge	zero,r2,400f4bc <_dtoa_r+0xcd4>
 400ea88:	d9000517 	ldw	r4,20(sp)
 400ea8c:	d8000e15 	stw	zero,56(sp)
 400ea90:	213fffc4 	addi	r4,r4,-1
 400ea94:	d9000515 	stw	r4,20(sp)
 400ea98:	b42dc83a 	sub	r22,r22,r16
 400ea9c:	b5bfffc4 	addi	r22,r22,-1
 400eaa0:	b0026f16 	blt	r22,zero,400f460 <_dtoa_r+0xc78>
 400eaa4:	d8000815 	stw	zero,32(sp)
 400eaa8:	d9c00517 	ldw	r7,20(sp)
 400eaac:	38026416 	blt	r7,zero,400f440 <_dtoa_r+0xc58>
 400eab0:	b1ed883a 	add	r22,r22,r7
 400eab4:	d9c00d15 	stw	r7,52(sp)
 400eab8:	d8000a15 	stw	zero,40(sp)
 400eabc:	d9800317 	ldw	r6,12(sp)
 400eac0:	00800244 	movi	r2,9
 400eac4:	11811436 	bltu	r2,r6,400ef18 <_dtoa_r+0x730>
 400eac8:	00800144 	movi	r2,5
 400eacc:	1184e10e 	bge	r2,r6,400fe54 <_dtoa_r+0x166c>
 400ead0:	31bfff04 	addi	r6,r6,-4
 400ead4:	d9800315 	stw	r6,12(sp)
 400ead8:	0023883a 	mov	r17,zero
 400eadc:	d9800317 	ldw	r6,12(sp)
 400eae0:	008000c4 	movi	r2,3
 400eae4:	30836726 	beq	r6,r2,400f884 <_dtoa_r+0x109c>
 400eae8:	1183410e 	bge	r2,r6,400f7f0 <_dtoa_r+0x1008>
 400eaec:	d9c00317 	ldw	r7,12(sp)
 400eaf0:	00800104 	movi	r2,4
 400eaf4:	38827c26 	beq	r7,r2,400f4e8 <_dtoa_r+0xd00>
 400eaf8:	00800144 	movi	r2,5
 400eafc:	3884c41e 	bne	r7,r2,400fe10 <_dtoa_r+0x1628>
 400eb00:	00800044 	movi	r2,1
 400eb04:	d8800b15 	stw	r2,44(sp)
 400eb08:	d8c00517 	ldw	r3,20(sp)
 400eb0c:	d9002217 	ldw	r4,136(sp)
 400eb10:	1907883a 	add	r3,r3,r4
 400eb14:	19800044 	addi	r6,r3,1
 400eb18:	d8c00c15 	stw	r3,48(sp)
 400eb1c:	d9800615 	stw	r6,24(sp)
 400eb20:	0183a40e 	bge	zero,r6,400f9b4 <_dtoa_r+0x11cc>
 400eb24:	d9800617 	ldw	r6,24(sp)
 400eb28:	3021883a 	mov	r16,r6
 400eb2c:	e0001115 	stw	zero,68(fp)
 400eb30:	008005c4 	movi	r2,23
 400eb34:	1184c92e 	bgeu	r2,r6,400fe5c <_dtoa_r+0x1674>
 400eb38:	00c00044 	movi	r3,1
 400eb3c:	00800104 	movi	r2,4
 400eb40:	1085883a 	add	r2,r2,r2
 400eb44:	11000504 	addi	r4,r2,20
 400eb48:	180b883a 	mov	r5,r3
 400eb4c:	18c00044 	addi	r3,r3,1
 400eb50:	313ffb2e 	bgeu	r6,r4,400eb40 <__alt_data_end+0xfc00eb40>
 400eb54:	e1401115 	stw	r5,68(fp)
 400eb58:	e009883a 	mov	r4,fp
 400eb5c:	40114240 	call	4011424 <_Balloc>
 400eb60:	d8800715 	stw	r2,28(sp)
 400eb64:	e0801015 	stw	r2,64(fp)
 400eb68:	00800384 	movi	r2,14
 400eb6c:	1400f736 	bltu	r2,r16,400ef4c <_dtoa_r+0x764>
 400eb70:	8800f626 	beq	r17,zero,400ef4c <_dtoa_r+0x764>
 400eb74:	d9c00517 	ldw	r7,20(sp)
 400eb78:	01c39a0e 	bge	zero,r7,400f9e4 <_dtoa_r+0x11fc>
 400eb7c:	388003cc 	andi	r2,r7,15
 400eb80:	100490fa 	slli	r2,r2,3
 400eb84:	382bd13a 	srai	r21,r7,4
 400eb88:	00c100b4 	movhi	r3,1026
 400eb8c:	18c70b04 	addi	r3,r3,7212
 400eb90:	1885883a 	add	r2,r3,r2
 400eb94:	a8c0040c 	andi	r3,r21,16
 400eb98:	12400017 	ldw	r9,0(r2)
 400eb9c:	12000117 	ldw	r8,4(r2)
 400eba0:	18037926 	beq	r3,zero,400f988 <_dtoa_r+0x11a0>
 400eba4:	008100b4 	movhi	r2,1026
 400eba8:	10870104 	addi	r2,r2,7172
 400ebac:	11800817 	ldw	r6,32(r2)
 400ebb0:	11c00917 	ldw	r7,36(r2)
 400ebb4:	9009883a 	mov	r4,r18
 400ebb8:	980b883a 	mov	r5,r19
 400ebbc:	da001715 	stw	r8,92(sp)
 400ebc0:	da401615 	stw	r9,88(sp)
 400ebc4:	40162080 	call	4016208 <__divdf3>
 400ebc8:	da001717 	ldw	r8,92(sp)
 400ebcc:	da401617 	ldw	r9,88(sp)
 400ebd0:	ad4003cc 	andi	r21,r21,15
 400ebd4:	040000c4 	movi	r16,3
 400ebd8:	1023883a 	mov	r17,r2
 400ebdc:	1829883a 	mov	r20,r3
 400ebe0:	a8001126 	beq	r21,zero,400ec28 <_dtoa_r+0x440>
 400ebe4:	05c100b4 	movhi	r23,1026
 400ebe8:	bdc70104 	addi	r23,r23,7172
 400ebec:	4805883a 	mov	r2,r9
 400ebf0:	4007883a 	mov	r3,r8
 400ebf4:	a980004c 	andi	r6,r21,1
 400ebf8:	1009883a 	mov	r4,r2
 400ebfc:	a82bd07a 	srai	r21,r21,1
 400ec00:	180b883a 	mov	r5,r3
 400ec04:	30000426 	beq	r6,zero,400ec18 <_dtoa_r+0x430>
 400ec08:	b9800017 	ldw	r6,0(r23)
 400ec0c:	b9c00117 	ldw	r7,4(r23)
 400ec10:	84000044 	addi	r16,r16,1
 400ec14:	4016e300 	call	4016e30 <__muldf3>
 400ec18:	bdc00204 	addi	r23,r23,8
 400ec1c:	a83ff51e 	bne	r21,zero,400ebf4 <__alt_data_end+0xfc00ebf4>
 400ec20:	1013883a 	mov	r9,r2
 400ec24:	1811883a 	mov	r8,r3
 400ec28:	480d883a 	mov	r6,r9
 400ec2c:	400f883a 	mov	r7,r8
 400ec30:	8809883a 	mov	r4,r17
 400ec34:	a00b883a 	mov	r5,r20
 400ec38:	40162080 	call	4016208 <__divdf3>
 400ec3c:	d8800f15 	stw	r2,60(sp)
 400ec40:	d8c01015 	stw	r3,64(sp)
 400ec44:	d8c00e17 	ldw	r3,56(sp)
 400ec48:	18000626 	beq	r3,zero,400ec64 <_dtoa_r+0x47c>
 400ec4c:	d9000f17 	ldw	r4,60(sp)
 400ec50:	d9401017 	ldw	r5,64(sp)
 400ec54:	000d883a 	mov	r6,zero
 400ec58:	01cffc34 	movhi	r7,16368
 400ec5c:	4016d3c0 	call	4016d3c <__ledf2>
 400ec60:	10040b16 	blt	r2,zero,400fc90 <_dtoa_r+0x14a8>
 400ec64:	8009883a 	mov	r4,r16
 400ec68:	40180180 	call	4018018 <__floatsidf>
 400ec6c:	d9800f17 	ldw	r6,60(sp)
 400ec70:	d9c01017 	ldw	r7,64(sp)
 400ec74:	1009883a 	mov	r4,r2
 400ec78:	180b883a 	mov	r5,r3
 400ec7c:	4016e300 	call	4016e30 <__muldf3>
 400ec80:	000d883a 	mov	r6,zero
 400ec84:	01d00734 	movhi	r7,16412
 400ec88:	1009883a 	mov	r4,r2
 400ec8c:	180b883a 	mov	r5,r3
 400ec90:	401595c0 	call	401595c <__adddf3>
 400ec94:	1021883a 	mov	r16,r2
 400ec98:	d8800617 	ldw	r2,24(sp)
 400ec9c:	047f3034 	movhi	r17,64704
 400eca0:	1c63883a 	add	r17,r3,r17
 400eca4:	10031826 	beq	r2,zero,400f908 <_dtoa_r+0x1120>
 400eca8:	d8c00517 	ldw	r3,20(sp)
 400ecac:	db000617 	ldw	r12,24(sp)
 400ecb0:	d8c01315 	stw	r3,76(sp)
 400ecb4:	d9000b17 	ldw	r4,44(sp)
 400ecb8:	20038f26 	beq	r4,zero,400faf8 <_dtoa_r+0x1310>
 400ecbc:	60bfffc4 	addi	r2,r12,-1
 400ecc0:	100490fa 	slli	r2,r2,3
 400ecc4:	00c100b4 	movhi	r3,1026
 400ecc8:	18c70b04 	addi	r3,r3,7212
 400eccc:	1885883a 	add	r2,r3,r2
 400ecd0:	11800017 	ldw	r6,0(r2)
 400ecd4:	11c00117 	ldw	r7,4(r2)
 400ecd8:	d8800717 	ldw	r2,28(sp)
 400ecdc:	0009883a 	mov	r4,zero
 400ece0:	014ff834 	movhi	r5,16352
 400ece4:	db001615 	stw	r12,88(sp)
 400ece8:	15c00044 	addi	r23,r2,1
 400ecec:	40162080 	call	4016208 <__divdf3>
 400ecf0:	800d883a 	mov	r6,r16
 400ecf4:	880f883a 	mov	r7,r17
 400ecf8:	1009883a 	mov	r4,r2
 400ecfc:	180b883a 	mov	r5,r3
 400ed00:	401769c0 	call	401769c <__subdf3>
 400ed04:	d9401017 	ldw	r5,64(sp)
 400ed08:	d9000f17 	ldw	r4,60(sp)
 400ed0c:	102b883a 	mov	r21,r2
 400ed10:	d8c01215 	stw	r3,72(sp)
 400ed14:	4017f980 	call	4017f98 <__fixdfsi>
 400ed18:	1009883a 	mov	r4,r2
 400ed1c:	1029883a 	mov	r20,r2
 400ed20:	40180180 	call	4018018 <__floatsidf>
 400ed24:	d9000f17 	ldw	r4,60(sp)
 400ed28:	d9401017 	ldw	r5,64(sp)
 400ed2c:	100d883a 	mov	r6,r2
 400ed30:	180f883a 	mov	r7,r3
 400ed34:	401769c0 	call	401769c <__subdf3>
 400ed38:	1823883a 	mov	r17,r3
 400ed3c:	d8c00717 	ldw	r3,28(sp)
 400ed40:	d9401217 	ldw	r5,72(sp)
 400ed44:	a2000c04 	addi	r8,r20,48
 400ed48:	1021883a 	mov	r16,r2
 400ed4c:	1a000005 	stb	r8,0(r3)
 400ed50:	800d883a 	mov	r6,r16
 400ed54:	880f883a 	mov	r7,r17
 400ed58:	a809883a 	mov	r4,r21
 400ed5c:	4029883a 	mov	r20,r8
 400ed60:	4016c600 	call	4016c60 <__gedf2>
 400ed64:	00841d16 	blt	zero,r2,400fddc <_dtoa_r+0x15f4>
 400ed68:	800d883a 	mov	r6,r16
 400ed6c:	880f883a 	mov	r7,r17
 400ed70:	0009883a 	mov	r4,zero
 400ed74:	014ffc34 	movhi	r5,16368
 400ed78:	401769c0 	call	401769c <__subdf3>
 400ed7c:	d9401217 	ldw	r5,72(sp)
 400ed80:	100d883a 	mov	r6,r2
 400ed84:	180f883a 	mov	r7,r3
 400ed88:	a809883a 	mov	r4,r21
 400ed8c:	4016c600 	call	4016c60 <__gedf2>
 400ed90:	db001617 	ldw	r12,88(sp)
 400ed94:	00840e16 	blt	zero,r2,400fdd0 <_dtoa_r+0x15e8>
 400ed98:	00800044 	movi	r2,1
 400ed9c:	13006b0e 	bge	r2,r12,400ef4c <_dtoa_r+0x764>
 400eda0:	d9000717 	ldw	r4,28(sp)
 400eda4:	dd800f15 	stw	r22,60(sp)
 400eda8:	dcc01015 	stw	r19,64(sp)
 400edac:	2319883a 	add	r12,r4,r12
 400edb0:	dcc01217 	ldw	r19,72(sp)
 400edb4:	602d883a 	mov	r22,r12
 400edb8:	dc801215 	stw	r18,72(sp)
 400edbc:	b825883a 	mov	r18,r23
 400edc0:	00000906 	br	400ede8 <_dtoa_r+0x600>
 400edc4:	401769c0 	call	401769c <__subdf3>
 400edc8:	a80d883a 	mov	r6,r21
 400edcc:	980f883a 	mov	r7,r19
 400edd0:	1009883a 	mov	r4,r2
 400edd4:	180b883a 	mov	r5,r3
 400edd8:	4016d3c0 	call	4016d3c <__ledf2>
 400eddc:	1003e816 	blt	r2,zero,400fd80 <_dtoa_r+0x1598>
 400ede0:	b825883a 	mov	r18,r23
 400ede4:	bd83e926 	beq	r23,r22,400fd8c <_dtoa_r+0x15a4>
 400ede8:	a809883a 	mov	r4,r21
 400edec:	980b883a 	mov	r5,r19
 400edf0:	000d883a 	mov	r6,zero
 400edf4:	01d00934 	movhi	r7,16420
 400edf8:	4016e300 	call	4016e30 <__muldf3>
 400edfc:	000d883a 	mov	r6,zero
 400ee00:	01d00934 	movhi	r7,16420
 400ee04:	8009883a 	mov	r4,r16
 400ee08:	880b883a 	mov	r5,r17
 400ee0c:	102b883a 	mov	r21,r2
 400ee10:	1827883a 	mov	r19,r3
 400ee14:	4016e300 	call	4016e30 <__muldf3>
 400ee18:	180b883a 	mov	r5,r3
 400ee1c:	1009883a 	mov	r4,r2
 400ee20:	1821883a 	mov	r16,r3
 400ee24:	1023883a 	mov	r17,r2
 400ee28:	4017f980 	call	4017f98 <__fixdfsi>
 400ee2c:	1009883a 	mov	r4,r2
 400ee30:	1029883a 	mov	r20,r2
 400ee34:	40180180 	call	4018018 <__floatsidf>
 400ee38:	8809883a 	mov	r4,r17
 400ee3c:	800b883a 	mov	r5,r16
 400ee40:	100d883a 	mov	r6,r2
 400ee44:	180f883a 	mov	r7,r3
 400ee48:	401769c0 	call	401769c <__subdf3>
 400ee4c:	a5000c04 	addi	r20,r20,48
 400ee50:	a80d883a 	mov	r6,r21
 400ee54:	980f883a 	mov	r7,r19
 400ee58:	1009883a 	mov	r4,r2
 400ee5c:	180b883a 	mov	r5,r3
 400ee60:	95000005 	stb	r20,0(r18)
 400ee64:	1021883a 	mov	r16,r2
 400ee68:	1823883a 	mov	r17,r3
 400ee6c:	4016d3c0 	call	4016d3c <__ledf2>
 400ee70:	bdc00044 	addi	r23,r23,1
 400ee74:	800d883a 	mov	r6,r16
 400ee78:	880f883a 	mov	r7,r17
 400ee7c:	0009883a 	mov	r4,zero
 400ee80:	014ffc34 	movhi	r5,16368
 400ee84:	103fcf0e 	bge	r2,zero,400edc4 <__alt_data_end+0xfc00edc4>
 400ee88:	d8c01317 	ldw	r3,76(sp)
 400ee8c:	d8c00515 	stw	r3,20(sp)
 400ee90:	d9400917 	ldw	r5,36(sp)
 400ee94:	e009883a 	mov	r4,fp
 400ee98:	40114cc0 	call	40114cc <_Bfree>
 400ee9c:	d9000517 	ldw	r4,20(sp)
 400eea0:	d9802317 	ldw	r6,140(sp)
 400eea4:	d9c02517 	ldw	r7,148(sp)
 400eea8:	b8000005 	stb	zero,0(r23)
 400eeac:	20800044 	addi	r2,r4,1
 400eeb0:	30800015 	stw	r2,0(r6)
 400eeb4:	3802aa26 	beq	r7,zero,400f960 <_dtoa_r+0x1178>
 400eeb8:	3dc00015 	stw	r23,0(r7)
 400eebc:	d8800717 	ldw	r2,28(sp)
 400eec0:	003e7906 	br	400e8a8 <__alt_data_end+0xfc00e8a8>
 400eec4:	00800434 	movhi	r2,16
 400eec8:	10bfffc4 	addi	r2,r2,-1
 400eecc:	88a2703a 	and	r17,r17,r2
 400eed0:	883e851e 	bne	r17,zero,400e8e8 <__alt_data_end+0xfc00e8e8>
 400eed4:	008100b4 	movhi	r2,1026
 400eed8:	1086ed04 	addi	r2,r2,7092
 400eedc:	003e8406 	br	400e8f0 <__alt_data_end+0xfc00e8f0>
 400eee0:	10c00204 	addi	r3,r2,8
 400eee4:	003e8706 	br	400e904 <__alt_data_end+0xfc00e904>
 400eee8:	01400434 	movhi	r5,16
 400eeec:	297fffc4 	addi	r5,r5,-1
 400eef0:	994a703a 	and	r5,r19,r5
 400eef4:	9009883a 	mov	r4,r18
 400eef8:	843f0044 	addi	r16,r16,-1023
 400eefc:	294ffc34 	orhi	r5,r5,16368
 400ef00:	dd800217 	ldw	r22,8(sp)
 400ef04:	d8001115 	stw	zero,68(sp)
 400ef08:	003ea506 	br	400e9a0 <__alt_data_end+0xfc00e9a0>
 400ef0c:	008100b4 	movhi	r2,1026
 400ef10:	1086e404 	addi	r2,r2,7056
 400ef14:	003e6406 	br	400e8a8 <__alt_data_end+0xfc00e8a8>
 400ef18:	e0001115 	stw	zero,68(fp)
 400ef1c:	000b883a 	mov	r5,zero
 400ef20:	e009883a 	mov	r4,fp
 400ef24:	40114240 	call	4011424 <_Balloc>
 400ef28:	01bfffc4 	movi	r6,-1
 400ef2c:	01c00044 	movi	r7,1
 400ef30:	d8800715 	stw	r2,28(sp)
 400ef34:	d9800c15 	stw	r6,48(sp)
 400ef38:	e0801015 	stw	r2,64(fp)
 400ef3c:	d8000315 	stw	zero,12(sp)
 400ef40:	d9c00b15 	stw	r7,44(sp)
 400ef44:	d9800615 	stw	r6,24(sp)
 400ef48:	d8002215 	stw	zero,136(sp)
 400ef4c:	d8800117 	ldw	r2,4(sp)
 400ef50:	10008916 	blt	r2,zero,400f178 <_dtoa_r+0x990>
 400ef54:	d9000517 	ldw	r4,20(sp)
 400ef58:	00c00384 	movi	r3,14
 400ef5c:	19008616 	blt	r3,r4,400f178 <_dtoa_r+0x990>
 400ef60:	200490fa 	slli	r2,r4,3
 400ef64:	00c100b4 	movhi	r3,1026
 400ef68:	d9802217 	ldw	r6,136(sp)
 400ef6c:	18c70b04 	addi	r3,r3,7212
 400ef70:	1885883a 	add	r2,r3,r2
 400ef74:	14000017 	ldw	r16,0(r2)
 400ef78:	14400117 	ldw	r17,4(r2)
 400ef7c:	30016316 	blt	r6,zero,400f50c <_dtoa_r+0xd24>
 400ef80:	800d883a 	mov	r6,r16
 400ef84:	880f883a 	mov	r7,r17
 400ef88:	9009883a 	mov	r4,r18
 400ef8c:	980b883a 	mov	r5,r19
 400ef90:	40162080 	call	4016208 <__divdf3>
 400ef94:	180b883a 	mov	r5,r3
 400ef98:	1009883a 	mov	r4,r2
 400ef9c:	4017f980 	call	4017f98 <__fixdfsi>
 400efa0:	1009883a 	mov	r4,r2
 400efa4:	102b883a 	mov	r21,r2
 400efa8:	40180180 	call	4018018 <__floatsidf>
 400efac:	800d883a 	mov	r6,r16
 400efb0:	880f883a 	mov	r7,r17
 400efb4:	1009883a 	mov	r4,r2
 400efb8:	180b883a 	mov	r5,r3
 400efbc:	4016e300 	call	4016e30 <__muldf3>
 400efc0:	100d883a 	mov	r6,r2
 400efc4:	180f883a 	mov	r7,r3
 400efc8:	9009883a 	mov	r4,r18
 400efcc:	980b883a 	mov	r5,r19
 400efd0:	401769c0 	call	401769c <__subdf3>
 400efd4:	d9c00717 	ldw	r7,28(sp)
 400efd8:	1009883a 	mov	r4,r2
 400efdc:	a8800c04 	addi	r2,r21,48
 400efe0:	38800005 	stb	r2,0(r7)
 400efe4:	3dc00044 	addi	r23,r7,1
 400efe8:	d9c00617 	ldw	r7,24(sp)
 400efec:	01800044 	movi	r6,1
 400eff0:	180b883a 	mov	r5,r3
 400eff4:	2005883a 	mov	r2,r4
 400eff8:	39803826 	beq	r7,r6,400f0dc <_dtoa_r+0x8f4>
 400effc:	000d883a 	mov	r6,zero
 400f000:	01d00934 	movhi	r7,16420
 400f004:	4016e300 	call	4016e30 <__muldf3>
 400f008:	000d883a 	mov	r6,zero
 400f00c:	000f883a 	mov	r7,zero
 400f010:	1009883a 	mov	r4,r2
 400f014:	180b883a 	mov	r5,r3
 400f018:	1025883a 	mov	r18,r2
 400f01c:	1827883a 	mov	r19,r3
 400f020:	4016bd80 	call	4016bd8 <__eqdf2>
 400f024:	103f9a26 	beq	r2,zero,400ee90 <__alt_data_end+0xfc00ee90>
 400f028:	d9c00617 	ldw	r7,24(sp)
 400f02c:	d8c00717 	ldw	r3,28(sp)
 400f030:	b829883a 	mov	r20,r23
 400f034:	38bfffc4 	addi	r2,r7,-1
 400f038:	18ad883a 	add	r22,r3,r2
 400f03c:	00000a06 	br	400f068 <_dtoa_r+0x880>
 400f040:	4016e300 	call	4016e30 <__muldf3>
 400f044:	000d883a 	mov	r6,zero
 400f048:	000f883a 	mov	r7,zero
 400f04c:	1009883a 	mov	r4,r2
 400f050:	180b883a 	mov	r5,r3
 400f054:	1025883a 	mov	r18,r2
 400f058:	1827883a 	mov	r19,r3
 400f05c:	b829883a 	mov	r20,r23
 400f060:	4016bd80 	call	4016bd8 <__eqdf2>
 400f064:	103f8a26 	beq	r2,zero,400ee90 <__alt_data_end+0xfc00ee90>
 400f068:	800d883a 	mov	r6,r16
 400f06c:	880f883a 	mov	r7,r17
 400f070:	9009883a 	mov	r4,r18
 400f074:	980b883a 	mov	r5,r19
 400f078:	40162080 	call	4016208 <__divdf3>
 400f07c:	180b883a 	mov	r5,r3
 400f080:	1009883a 	mov	r4,r2
 400f084:	4017f980 	call	4017f98 <__fixdfsi>
 400f088:	1009883a 	mov	r4,r2
 400f08c:	102b883a 	mov	r21,r2
 400f090:	40180180 	call	4018018 <__floatsidf>
 400f094:	800d883a 	mov	r6,r16
 400f098:	880f883a 	mov	r7,r17
 400f09c:	1009883a 	mov	r4,r2
 400f0a0:	180b883a 	mov	r5,r3
 400f0a4:	4016e300 	call	4016e30 <__muldf3>
 400f0a8:	100d883a 	mov	r6,r2
 400f0ac:	180f883a 	mov	r7,r3
 400f0b0:	9009883a 	mov	r4,r18
 400f0b4:	980b883a 	mov	r5,r19
 400f0b8:	401769c0 	call	401769c <__subdf3>
 400f0bc:	aa000c04 	addi	r8,r21,48
 400f0c0:	a2000005 	stb	r8,0(r20)
 400f0c4:	000d883a 	mov	r6,zero
 400f0c8:	01d00934 	movhi	r7,16420
 400f0cc:	1009883a 	mov	r4,r2
 400f0d0:	180b883a 	mov	r5,r3
 400f0d4:	a5c00044 	addi	r23,r20,1
 400f0d8:	b53fd91e 	bne	r22,r20,400f040 <__alt_data_end+0xfc00f040>
 400f0dc:	100d883a 	mov	r6,r2
 400f0e0:	180f883a 	mov	r7,r3
 400f0e4:	1009883a 	mov	r4,r2
 400f0e8:	180b883a 	mov	r5,r3
 400f0ec:	401595c0 	call	401595c <__adddf3>
 400f0f0:	100d883a 	mov	r6,r2
 400f0f4:	180f883a 	mov	r7,r3
 400f0f8:	8009883a 	mov	r4,r16
 400f0fc:	880b883a 	mov	r5,r17
 400f100:	1027883a 	mov	r19,r2
 400f104:	1825883a 	mov	r18,r3
 400f108:	4016d3c0 	call	4016d3c <__ledf2>
 400f10c:	10000816 	blt	r2,zero,400f130 <_dtoa_r+0x948>
 400f110:	980d883a 	mov	r6,r19
 400f114:	900f883a 	mov	r7,r18
 400f118:	8009883a 	mov	r4,r16
 400f11c:	880b883a 	mov	r5,r17
 400f120:	4016bd80 	call	4016bd8 <__eqdf2>
 400f124:	103f5a1e 	bne	r2,zero,400ee90 <__alt_data_end+0xfc00ee90>
 400f128:	ad40004c 	andi	r21,r21,1
 400f12c:	a83f5826 	beq	r21,zero,400ee90 <__alt_data_end+0xfc00ee90>
 400f130:	bd3fffc3 	ldbu	r20,-1(r23)
 400f134:	b8bfffc4 	addi	r2,r23,-1
 400f138:	1007883a 	mov	r3,r2
 400f13c:	01400e44 	movi	r5,57
 400f140:	d9800717 	ldw	r6,28(sp)
 400f144:	00000506 	br	400f15c <_dtoa_r+0x974>
 400f148:	18ffffc4 	addi	r3,r3,-1
 400f14c:	11824726 	beq	r2,r6,400fa6c <_dtoa_r+0x1284>
 400f150:	1d000003 	ldbu	r20,0(r3)
 400f154:	102f883a 	mov	r23,r2
 400f158:	10bfffc4 	addi	r2,r2,-1
 400f15c:	a1003fcc 	andi	r4,r20,255
 400f160:	2100201c 	xori	r4,r4,128
 400f164:	213fe004 	addi	r4,r4,-128
 400f168:	217ff726 	beq	r4,r5,400f148 <__alt_data_end+0xfc00f148>
 400f16c:	a2000044 	addi	r8,r20,1
 400f170:	12000005 	stb	r8,0(r2)
 400f174:	003f4606 	br	400ee90 <__alt_data_end+0xfc00ee90>
 400f178:	d9000b17 	ldw	r4,44(sp)
 400f17c:	2000c826 	beq	r4,zero,400f4a0 <_dtoa_r+0xcb8>
 400f180:	d9800317 	ldw	r6,12(sp)
 400f184:	00c00044 	movi	r3,1
 400f188:	1980f90e 	bge	r3,r6,400f570 <_dtoa_r+0xd88>
 400f18c:	d8800617 	ldw	r2,24(sp)
 400f190:	d8c00a17 	ldw	r3,40(sp)
 400f194:	157fffc4 	addi	r21,r2,-1
 400f198:	1d41f316 	blt	r3,r21,400f968 <_dtoa_r+0x1180>
 400f19c:	1d6bc83a 	sub	r21,r3,r21
 400f1a0:	d9c00617 	ldw	r7,24(sp)
 400f1a4:	3802aa16 	blt	r7,zero,400fc50 <_dtoa_r+0x1468>
 400f1a8:	dd000817 	ldw	r20,32(sp)
 400f1ac:	d8800617 	ldw	r2,24(sp)
 400f1b0:	d8c00817 	ldw	r3,32(sp)
 400f1b4:	01400044 	movi	r5,1
 400f1b8:	e009883a 	mov	r4,fp
 400f1bc:	1887883a 	add	r3,r3,r2
 400f1c0:	d8c00815 	stw	r3,32(sp)
 400f1c4:	b0ad883a 	add	r22,r22,r2
 400f1c8:	40118580 	call	4011858 <__i2b>
 400f1cc:	1023883a 	mov	r17,r2
 400f1d0:	a0000826 	beq	r20,zero,400f1f4 <_dtoa_r+0xa0c>
 400f1d4:	0580070e 	bge	zero,r22,400f1f4 <_dtoa_r+0xa0c>
 400f1d8:	a005883a 	mov	r2,r20
 400f1dc:	b500b916 	blt	r22,r20,400f4c4 <_dtoa_r+0xcdc>
 400f1e0:	d9000817 	ldw	r4,32(sp)
 400f1e4:	a0a9c83a 	sub	r20,r20,r2
 400f1e8:	b0adc83a 	sub	r22,r22,r2
 400f1ec:	2089c83a 	sub	r4,r4,r2
 400f1f0:	d9000815 	stw	r4,32(sp)
 400f1f4:	d9800a17 	ldw	r6,40(sp)
 400f1f8:	0181810e 	bge	zero,r6,400f800 <_dtoa_r+0x1018>
 400f1fc:	d9c00b17 	ldw	r7,44(sp)
 400f200:	3800b326 	beq	r7,zero,400f4d0 <_dtoa_r+0xce8>
 400f204:	a800b226 	beq	r21,zero,400f4d0 <_dtoa_r+0xce8>
 400f208:	880b883a 	mov	r5,r17
 400f20c:	a80d883a 	mov	r6,r21
 400f210:	e009883a 	mov	r4,fp
 400f214:	4011b200 	call	4011b20 <__pow5mult>
 400f218:	d9800917 	ldw	r6,36(sp)
 400f21c:	100b883a 	mov	r5,r2
 400f220:	e009883a 	mov	r4,fp
 400f224:	1023883a 	mov	r17,r2
 400f228:	40118940 	call	4011894 <__multiply>
 400f22c:	1021883a 	mov	r16,r2
 400f230:	d8800a17 	ldw	r2,40(sp)
 400f234:	d9400917 	ldw	r5,36(sp)
 400f238:	e009883a 	mov	r4,fp
 400f23c:	1545c83a 	sub	r2,r2,r21
 400f240:	d8800a15 	stw	r2,40(sp)
 400f244:	40114cc0 	call	40114cc <_Bfree>
 400f248:	d8c00a17 	ldw	r3,40(sp)
 400f24c:	18009f1e 	bne	r3,zero,400f4cc <_dtoa_r+0xce4>
 400f250:	05c00044 	movi	r23,1
 400f254:	e009883a 	mov	r4,fp
 400f258:	b80b883a 	mov	r5,r23
 400f25c:	40118580 	call	4011858 <__i2b>
 400f260:	d9000d17 	ldw	r4,52(sp)
 400f264:	102b883a 	mov	r21,r2
 400f268:	2000ce26 	beq	r4,zero,400f5a4 <_dtoa_r+0xdbc>
 400f26c:	200d883a 	mov	r6,r4
 400f270:	100b883a 	mov	r5,r2
 400f274:	e009883a 	mov	r4,fp
 400f278:	4011b200 	call	4011b20 <__pow5mult>
 400f27c:	d9800317 	ldw	r6,12(sp)
 400f280:	102b883a 	mov	r21,r2
 400f284:	b981810e 	bge	r23,r6,400f88c <_dtoa_r+0x10a4>
 400f288:	0027883a 	mov	r19,zero
 400f28c:	a8800417 	ldw	r2,16(r21)
 400f290:	05c00804 	movi	r23,32
 400f294:	10800104 	addi	r2,r2,4
 400f298:	1085883a 	add	r2,r2,r2
 400f29c:	1085883a 	add	r2,r2,r2
 400f2a0:	a885883a 	add	r2,r21,r2
 400f2a4:	11000017 	ldw	r4,0(r2)
 400f2a8:	40117400 	call	4011740 <__hi0bits>
 400f2ac:	b885c83a 	sub	r2,r23,r2
 400f2b0:	1585883a 	add	r2,r2,r22
 400f2b4:	108007cc 	andi	r2,r2,31
 400f2b8:	1000b326 	beq	r2,zero,400f588 <_dtoa_r+0xda0>
 400f2bc:	00c00804 	movi	r3,32
 400f2c0:	1887c83a 	sub	r3,r3,r2
 400f2c4:	01000104 	movi	r4,4
 400f2c8:	20c2cd0e 	bge	r4,r3,400fe00 <_dtoa_r+0x1618>
 400f2cc:	00c00704 	movi	r3,28
 400f2d0:	1885c83a 	sub	r2,r3,r2
 400f2d4:	d8c00817 	ldw	r3,32(sp)
 400f2d8:	a0a9883a 	add	r20,r20,r2
 400f2dc:	b0ad883a 	add	r22,r22,r2
 400f2e0:	1887883a 	add	r3,r3,r2
 400f2e4:	d8c00815 	stw	r3,32(sp)
 400f2e8:	d9800817 	ldw	r6,32(sp)
 400f2ec:	0180040e 	bge	zero,r6,400f300 <_dtoa_r+0xb18>
 400f2f0:	800b883a 	mov	r5,r16
 400f2f4:	e009883a 	mov	r4,fp
 400f2f8:	4011c600 	call	4011c60 <__lshift>
 400f2fc:	1021883a 	mov	r16,r2
 400f300:	0580050e 	bge	zero,r22,400f318 <_dtoa_r+0xb30>
 400f304:	a80b883a 	mov	r5,r21
 400f308:	b00d883a 	mov	r6,r22
 400f30c:	e009883a 	mov	r4,fp
 400f310:	4011c600 	call	4011c60 <__lshift>
 400f314:	102b883a 	mov	r21,r2
 400f318:	d9c00e17 	ldw	r7,56(sp)
 400f31c:	3801211e 	bne	r7,zero,400f7a4 <_dtoa_r+0xfbc>
 400f320:	d9800617 	ldw	r6,24(sp)
 400f324:	0181380e 	bge	zero,r6,400f808 <_dtoa_r+0x1020>
 400f328:	d8c00b17 	ldw	r3,44(sp)
 400f32c:	1800ab1e 	bne	r3,zero,400f5dc <_dtoa_r+0xdf4>
 400f330:	dc800717 	ldw	r18,28(sp)
 400f334:	dcc00617 	ldw	r19,24(sp)
 400f338:	9029883a 	mov	r20,r18
 400f33c:	00000206 	br	400f348 <_dtoa_r+0xb60>
 400f340:	40114f40 	call	40114f4 <__multadd>
 400f344:	1021883a 	mov	r16,r2
 400f348:	a80b883a 	mov	r5,r21
 400f34c:	8009883a 	mov	r4,r16
 400f350:	400e5c00 	call	400e5c0 <quorem>
 400f354:	10800c04 	addi	r2,r2,48
 400f358:	90800005 	stb	r2,0(r18)
 400f35c:	94800044 	addi	r18,r18,1
 400f360:	9507c83a 	sub	r3,r18,r20
 400f364:	000f883a 	mov	r7,zero
 400f368:	01800284 	movi	r6,10
 400f36c:	800b883a 	mov	r5,r16
 400f370:	e009883a 	mov	r4,fp
 400f374:	1cfff216 	blt	r3,r19,400f340 <__alt_data_end+0xfc00f340>
 400f378:	1011883a 	mov	r8,r2
 400f37c:	d8800617 	ldw	r2,24(sp)
 400f380:	0082370e 	bge	zero,r2,400fc60 <_dtoa_r+0x1478>
 400f384:	d9000717 	ldw	r4,28(sp)
 400f388:	0025883a 	mov	r18,zero
 400f38c:	20af883a 	add	r23,r4,r2
 400f390:	01800044 	movi	r6,1
 400f394:	800b883a 	mov	r5,r16
 400f398:	e009883a 	mov	r4,fp
 400f39c:	da001715 	stw	r8,92(sp)
 400f3a0:	4011c600 	call	4011c60 <__lshift>
 400f3a4:	a80b883a 	mov	r5,r21
 400f3a8:	1009883a 	mov	r4,r2
 400f3ac:	d8800915 	stw	r2,36(sp)
 400f3b0:	4011da80 	call	4011da8 <__mcmp>
 400f3b4:	da001717 	ldw	r8,92(sp)
 400f3b8:	0081800e 	bge	zero,r2,400f9bc <_dtoa_r+0x11d4>
 400f3bc:	b93fffc3 	ldbu	r4,-1(r23)
 400f3c0:	b8bfffc4 	addi	r2,r23,-1
 400f3c4:	1007883a 	mov	r3,r2
 400f3c8:	01800e44 	movi	r6,57
 400f3cc:	d9c00717 	ldw	r7,28(sp)
 400f3d0:	00000506 	br	400f3e8 <_dtoa_r+0xc00>
 400f3d4:	18ffffc4 	addi	r3,r3,-1
 400f3d8:	11c12326 	beq	r2,r7,400f868 <_dtoa_r+0x1080>
 400f3dc:	19000003 	ldbu	r4,0(r3)
 400f3e0:	102f883a 	mov	r23,r2
 400f3e4:	10bfffc4 	addi	r2,r2,-1
 400f3e8:	21403fcc 	andi	r5,r4,255
 400f3ec:	2940201c 	xori	r5,r5,128
 400f3f0:	297fe004 	addi	r5,r5,-128
 400f3f4:	29bff726 	beq	r5,r6,400f3d4 <__alt_data_end+0xfc00f3d4>
 400f3f8:	21000044 	addi	r4,r4,1
 400f3fc:	11000005 	stb	r4,0(r2)
 400f400:	a80b883a 	mov	r5,r21
 400f404:	e009883a 	mov	r4,fp
 400f408:	40114cc0 	call	40114cc <_Bfree>
 400f40c:	883ea026 	beq	r17,zero,400ee90 <__alt_data_end+0xfc00ee90>
 400f410:	90000426 	beq	r18,zero,400f424 <_dtoa_r+0xc3c>
 400f414:	94400326 	beq	r18,r17,400f424 <_dtoa_r+0xc3c>
 400f418:	900b883a 	mov	r5,r18
 400f41c:	e009883a 	mov	r4,fp
 400f420:	40114cc0 	call	40114cc <_Bfree>
 400f424:	880b883a 	mov	r5,r17
 400f428:	e009883a 	mov	r4,fp
 400f42c:	40114cc0 	call	40114cc <_Bfree>
 400f430:	003e9706 	br	400ee90 <__alt_data_end+0xfc00ee90>
 400f434:	01800044 	movi	r6,1
 400f438:	d9800e15 	stw	r6,56(sp)
 400f43c:	003d9606 	br	400ea98 <__alt_data_end+0xfc00ea98>
 400f440:	d8800817 	ldw	r2,32(sp)
 400f444:	d8c00517 	ldw	r3,20(sp)
 400f448:	d8000d15 	stw	zero,52(sp)
 400f44c:	10c5c83a 	sub	r2,r2,r3
 400f450:	00c9c83a 	sub	r4,zero,r3
 400f454:	d8800815 	stw	r2,32(sp)
 400f458:	d9000a15 	stw	r4,40(sp)
 400f45c:	003d9706 	br	400eabc <__alt_data_end+0xfc00eabc>
 400f460:	05adc83a 	sub	r22,zero,r22
 400f464:	dd800815 	stw	r22,32(sp)
 400f468:	002d883a 	mov	r22,zero
 400f46c:	003d8e06 	br	400eaa8 <__alt_data_end+0xfc00eaa8>
 400f470:	d9000517 	ldw	r4,20(sp)
 400f474:	40180180 	call	4018018 <__floatsidf>
 400f478:	100d883a 	mov	r6,r2
 400f47c:	180f883a 	mov	r7,r3
 400f480:	a009883a 	mov	r4,r20
 400f484:	880b883a 	mov	r5,r17
 400f488:	4016bd80 	call	4016bd8 <__eqdf2>
 400f48c:	103d7126 	beq	r2,zero,400ea54 <__alt_data_end+0xfc00ea54>
 400f490:	d9c00517 	ldw	r7,20(sp)
 400f494:	39ffffc4 	addi	r7,r7,-1
 400f498:	d9c00515 	stw	r7,20(sp)
 400f49c:	003d6d06 	br	400ea54 <__alt_data_end+0xfc00ea54>
 400f4a0:	dd400a17 	ldw	r21,40(sp)
 400f4a4:	dd000817 	ldw	r20,32(sp)
 400f4a8:	0023883a 	mov	r17,zero
 400f4ac:	003f4806 	br	400f1d0 <__alt_data_end+0xfc00f1d0>
 400f4b0:	10e3c83a 	sub	r17,r2,r3
 400f4b4:	9448983a 	sll	r4,r18,r17
 400f4b8:	003d3206 	br	400e984 <__alt_data_end+0xfc00e984>
 400f4bc:	d8000e15 	stw	zero,56(sp)
 400f4c0:	003d7506 	br	400ea98 <__alt_data_end+0xfc00ea98>
 400f4c4:	b005883a 	mov	r2,r22
 400f4c8:	003f4506 	br	400f1e0 <__alt_data_end+0xfc00f1e0>
 400f4cc:	dc000915 	stw	r16,36(sp)
 400f4d0:	d9800a17 	ldw	r6,40(sp)
 400f4d4:	d9400917 	ldw	r5,36(sp)
 400f4d8:	e009883a 	mov	r4,fp
 400f4dc:	4011b200 	call	4011b20 <__pow5mult>
 400f4e0:	1021883a 	mov	r16,r2
 400f4e4:	003f5a06 	br	400f250 <__alt_data_end+0xfc00f250>
 400f4e8:	01c00044 	movi	r7,1
 400f4ec:	d9c00b15 	stw	r7,44(sp)
 400f4f0:	d8802217 	ldw	r2,136(sp)
 400f4f4:	0081280e 	bge	zero,r2,400f998 <_dtoa_r+0x11b0>
 400f4f8:	100d883a 	mov	r6,r2
 400f4fc:	1021883a 	mov	r16,r2
 400f500:	d8800c15 	stw	r2,48(sp)
 400f504:	d8800615 	stw	r2,24(sp)
 400f508:	003d8806 	br	400eb2c <__alt_data_end+0xfc00eb2c>
 400f50c:	d8800617 	ldw	r2,24(sp)
 400f510:	00be9b16 	blt	zero,r2,400ef80 <__alt_data_end+0xfc00ef80>
 400f514:	10010f1e 	bne	r2,zero,400f954 <_dtoa_r+0x116c>
 400f518:	880b883a 	mov	r5,r17
 400f51c:	000d883a 	mov	r6,zero
 400f520:	01d00534 	movhi	r7,16404
 400f524:	8009883a 	mov	r4,r16
 400f528:	4016e300 	call	4016e30 <__muldf3>
 400f52c:	900d883a 	mov	r6,r18
 400f530:	980f883a 	mov	r7,r19
 400f534:	1009883a 	mov	r4,r2
 400f538:	180b883a 	mov	r5,r3
 400f53c:	4016c600 	call	4016c60 <__gedf2>
 400f540:	002b883a 	mov	r21,zero
 400f544:	0023883a 	mov	r17,zero
 400f548:	1000bf16 	blt	r2,zero,400f848 <_dtoa_r+0x1060>
 400f54c:	d9802217 	ldw	r6,136(sp)
 400f550:	ddc00717 	ldw	r23,28(sp)
 400f554:	018c303a 	nor	r6,zero,r6
 400f558:	d9800515 	stw	r6,20(sp)
 400f55c:	a80b883a 	mov	r5,r21
 400f560:	e009883a 	mov	r4,fp
 400f564:	40114cc0 	call	40114cc <_Bfree>
 400f568:	883e4926 	beq	r17,zero,400ee90 <__alt_data_end+0xfc00ee90>
 400f56c:	003fad06 	br	400f424 <__alt_data_end+0xfc00f424>
 400f570:	d9c01117 	ldw	r7,68(sp)
 400f574:	3801bc26 	beq	r7,zero,400fc68 <_dtoa_r+0x1480>
 400f578:	10810cc4 	addi	r2,r2,1075
 400f57c:	dd400a17 	ldw	r21,40(sp)
 400f580:	dd000817 	ldw	r20,32(sp)
 400f584:	003f0a06 	br	400f1b0 <__alt_data_end+0xfc00f1b0>
 400f588:	00800704 	movi	r2,28
 400f58c:	d9000817 	ldw	r4,32(sp)
 400f590:	a0a9883a 	add	r20,r20,r2
 400f594:	b0ad883a 	add	r22,r22,r2
 400f598:	2089883a 	add	r4,r4,r2
 400f59c:	d9000815 	stw	r4,32(sp)
 400f5a0:	003f5106 	br	400f2e8 <__alt_data_end+0xfc00f2e8>
 400f5a4:	d8c00317 	ldw	r3,12(sp)
 400f5a8:	b8c1fc0e 	bge	r23,r3,400fd9c <_dtoa_r+0x15b4>
 400f5ac:	0027883a 	mov	r19,zero
 400f5b0:	b805883a 	mov	r2,r23
 400f5b4:	003f3e06 	br	400f2b0 <__alt_data_end+0xfc00f2b0>
 400f5b8:	880b883a 	mov	r5,r17
 400f5bc:	e009883a 	mov	r4,fp
 400f5c0:	000f883a 	mov	r7,zero
 400f5c4:	01800284 	movi	r6,10
 400f5c8:	40114f40 	call	40114f4 <__multadd>
 400f5cc:	d9000c17 	ldw	r4,48(sp)
 400f5d0:	1023883a 	mov	r17,r2
 400f5d4:	0102040e 	bge	zero,r4,400fde8 <_dtoa_r+0x1600>
 400f5d8:	d9000615 	stw	r4,24(sp)
 400f5dc:	0500050e 	bge	zero,r20,400f5f4 <_dtoa_r+0xe0c>
 400f5e0:	880b883a 	mov	r5,r17
 400f5e4:	a00d883a 	mov	r6,r20
 400f5e8:	e009883a 	mov	r4,fp
 400f5ec:	4011c600 	call	4011c60 <__lshift>
 400f5f0:	1023883a 	mov	r17,r2
 400f5f4:	9801241e 	bne	r19,zero,400fa88 <_dtoa_r+0x12a0>
 400f5f8:	8829883a 	mov	r20,r17
 400f5fc:	d9000617 	ldw	r4,24(sp)
 400f600:	dcc00717 	ldw	r19,28(sp)
 400f604:	9480004c 	andi	r18,r18,1
 400f608:	20bfffc4 	addi	r2,r4,-1
 400f60c:	9885883a 	add	r2,r19,r2
 400f610:	d8800415 	stw	r2,16(sp)
 400f614:	dc800615 	stw	r18,24(sp)
 400f618:	a80b883a 	mov	r5,r21
 400f61c:	8009883a 	mov	r4,r16
 400f620:	400e5c00 	call	400e5c0 <quorem>
 400f624:	880b883a 	mov	r5,r17
 400f628:	8009883a 	mov	r4,r16
 400f62c:	102f883a 	mov	r23,r2
 400f630:	4011da80 	call	4011da8 <__mcmp>
 400f634:	a80b883a 	mov	r5,r21
 400f638:	a00d883a 	mov	r6,r20
 400f63c:	e009883a 	mov	r4,fp
 400f640:	102d883a 	mov	r22,r2
 400f644:	4011e080 	call	4011e08 <__mdiff>
 400f648:	1007883a 	mov	r3,r2
 400f64c:	10800317 	ldw	r2,12(r2)
 400f650:	bc800c04 	addi	r18,r23,48
 400f654:	180b883a 	mov	r5,r3
 400f658:	10004e1e 	bne	r2,zero,400f794 <_dtoa_r+0xfac>
 400f65c:	8009883a 	mov	r4,r16
 400f660:	d8c01615 	stw	r3,88(sp)
 400f664:	4011da80 	call	4011da8 <__mcmp>
 400f668:	d8c01617 	ldw	r3,88(sp)
 400f66c:	e009883a 	mov	r4,fp
 400f670:	d8801615 	stw	r2,88(sp)
 400f674:	180b883a 	mov	r5,r3
 400f678:	40114cc0 	call	40114cc <_Bfree>
 400f67c:	d8801617 	ldw	r2,88(sp)
 400f680:	1000041e 	bne	r2,zero,400f694 <_dtoa_r+0xeac>
 400f684:	d9800317 	ldw	r6,12(sp)
 400f688:	3000021e 	bne	r6,zero,400f694 <_dtoa_r+0xeac>
 400f68c:	d8c00617 	ldw	r3,24(sp)
 400f690:	18003726 	beq	r3,zero,400f770 <_dtoa_r+0xf88>
 400f694:	b0002016 	blt	r22,zero,400f718 <_dtoa_r+0xf30>
 400f698:	b000041e 	bne	r22,zero,400f6ac <_dtoa_r+0xec4>
 400f69c:	d9000317 	ldw	r4,12(sp)
 400f6a0:	2000021e 	bne	r4,zero,400f6ac <_dtoa_r+0xec4>
 400f6a4:	d8c00617 	ldw	r3,24(sp)
 400f6a8:	18001b26 	beq	r3,zero,400f718 <_dtoa_r+0xf30>
 400f6ac:	00810716 	blt	zero,r2,400facc <_dtoa_r+0x12e4>
 400f6b0:	d8c00417 	ldw	r3,16(sp)
 400f6b4:	9d800044 	addi	r22,r19,1
 400f6b8:	9c800005 	stb	r18,0(r19)
 400f6bc:	b02f883a 	mov	r23,r22
 400f6c0:	98c10626 	beq	r19,r3,400fadc <_dtoa_r+0x12f4>
 400f6c4:	800b883a 	mov	r5,r16
 400f6c8:	000f883a 	mov	r7,zero
 400f6cc:	01800284 	movi	r6,10
 400f6d0:	e009883a 	mov	r4,fp
 400f6d4:	40114f40 	call	40114f4 <__multadd>
 400f6d8:	1021883a 	mov	r16,r2
 400f6dc:	000f883a 	mov	r7,zero
 400f6e0:	01800284 	movi	r6,10
 400f6e4:	880b883a 	mov	r5,r17
 400f6e8:	e009883a 	mov	r4,fp
 400f6ec:	8d002526 	beq	r17,r20,400f784 <_dtoa_r+0xf9c>
 400f6f0:	40114f40 	call	40114f4 <__multadd>
 400f6f4:	a00b883a 	mov	r5,r20
 400f6f8:	000f883a 	mov	r7,zero
 400f6fc:	01800284 	movi	r6,10
 400f700:	e009883a 	mov	r4,fp
 400f704:	1023883a 	mov	r17,r2
 400f708:	40114f40 	call	40114f4 <__multadd>
 400f70c:	1029883a 	mov	r20,r2
 400f710:	b027883a 	mov	r19,r22
 400f714:	003fc006 	br	400f618 <__alt_data_end+0xfc00f618>
 400f718:	9011883a 	mov	r8,r18
 400f71c:	00800e0e 	bge	zero,r2,400f758 <_dtoa_r+0xf70>
 400f720:	800b883a 	mov	r5,r16
 400f724:	01800044 	movi	r6,1
 400f728:	e009883a 	mov	r4,fp
 400f72c:	da001715 	stw	r8,92(sp)
 400f730:	4011c600 	call	4011c60 <__lshift>
 400f734:	a80b883a 	mov	r5,r21
 400f738:	1009883a 	mov	r4,r2
 400f73c:	1021883a 	mov	r16,r2
 400f740:	4011da80 	call	4011da8 <__mcmp>
 400f744:	da001717 	ldw	r8,92(sp)
 400f748:	0081960e 	bge	zero,r2,400fda4 <_dtoa_r+0x15bc>
 400f74c:	00800e44 	movi	r2,57
 400f750:	40817026 	beq	r8,r2,400fd14 <_dtoa_r+0x152c>
 400f754:	ba000c44 	addi	r8,r23,49
 400f758:	8825883a 	mov	r18,r17
 400f75c:	9dc00044 	addi	r23,r19,1
 400f760:	9a000005 	stb	r8,0(r19)
 400f764:	a023883a 	mov	r17,r20
 400f768:	dc000915 	stw	r16,36(sp)
 400f76c:	003f2406 	br	400f400 <__alt_data_end+0xfc00f400>
 400f770:	00800e44 	movi	r2,57
 400f774:	9011883a 	mov	r8,r18
 400f778:	90816626 	beq	r18,r2,400fd14 <_dtoa_r+0x152c>
 400f77c:	05bff516 	blt	zero,r22,400f754 <__alt_data_end+0xfc00f754>
 400f780:	003ff506 	br	400f758 <__alt_data_end+0xfc00f758>
 400f784:	40114f40 	call	40114f4 <__multadd>
 400f788:	1023883a 	mov	r17,r2
 400f78c:	1029883a 	mov	r20,r2
 400f790:	003fdf06 	br	400f710 <__alt_data_end+0xfc00f710>
 400f794:	e009883a 	mov	r4,fp
 400f798:	40114cc0 	call	40114cc <_Bfree>
 400f79c:	00800044 	movi	r2,1
 400f7a0:	003fbc06 	br	400f694 <__alt_data_end+0xfc00f694>
 400f7a4:	a80b883a 	mov	r5,r21
 400f7a8:	8009883a 	mov	r4,r16
 400f7ac:	4011da80 	call	4011da8 <__mcmp>
 400f7b0:	103edb0e 	bge	r2,zero,400f320 <__alt_data_end+0xfc00f320>
 400f7b4:	800b883a 	mov	r5,r16
 400f7b8:	000f883a 	mov	r7,zero
 400f7bc:	01800284 	movi	r6,10
 400f7c0:	e009883a 	mov	r4,fp
 400f7c4:	40114f40 	call	40114f4 <__multadd>
 400f7c8:	1021883a 	mov	r16,r2
 400f7cc:	d8800517 	ldw	r2,20(sp)
 400f7d0:	d8c00b17 	ldw	r3,44(sp)
 400f7d4:	10bfffc4 	addi	r2,r2,-1
 400f7d8:	d8800515 	stw	r2,20(sp)
 400f7dc:	183f761e 	bne	r3,zero,400f5b8 <__alt_data_end+0xfc00f5b8>
 400f7e0:	d9000c17 	ldw	r4,48(sp)
 400f7e4:	0101730e 	bge	zero,r4,400fdb4 <_dtoa_r+0x15cc>
 400f7e8:	d9000615 	stw	r4,24(sp)
 400f7ec:	003ed006 	br	400f330 <__alt_data_end+0xfc00f330>
 400f7f0:	00800084 	movi	r2,2
 400f7f4:	3081861e 	bne	r6,r2,400fe10 <_dtoa_r+0x1628>
 400f7f8:	d8000b15 	stw	zero,44(sp)
 400f7fc:	003f3c06 	br	400f4f0 <__alt_data_end+0xfc00f4f0>
 400f800:	dc000917 	ldw	r16,36(sp)
 400f804:	003e9206 	br	400f250 <__alt_data_end+0xfc00f250>
 400f808:	d9c00317 	ldw	r7,12(sp)
 400f80c:	00800084 	movi	r2,2
 400f810:	11fec50e 	bge	r2,r7,400f328 <__alt_data_end+0xfc00f328>
 400f814:	d9000617 	ldw	r4,24(sp)
 400f818:	20013c1e 	bne	r4,zero,400fd0c <_dtoa_r+0x1524>
 400f81c:	a80b883a 	mov	r5,r21
 400f820:	000f883a 	mov	r7,zero
 400f824:	01800144 	movi	r6,5
 400f828:	e009883a 	mov	r4,fp
 400f82c:	40114f40 	call	40114f4 <__multadd>
 400f830:	100b883a 	mov	r5,r2
 400f834:	8009883a 	mov	r4,r16
 400f838:	102b883a 	mov	r21,r2
 400f83c:	4011da80 	call	4011da8 <__mcmp>
 400f840:	dc000915 	stw	r16,36(sp)
 400f844:	00bf410e 	bge	zero,r2,400f54c <__alt_data_end+0xfc00f54c>
 400f848:	d9c00717 	ldw	r7,28(sp)
 400f84c:	00800c44 	movi	r2,49
 400f850:	38800005 	stb	r2,0(r7)
 400f854:	d8800517 	ldw	r2,20(sp)
 400f858:	3dc00044 	addi	r23,r7,1
 400f85c:	10800044 	addi	r2,r2,1
 400f860:	d8800515 	stw	r2,20(sp)
 400f864:	003f3d06 	br	400f55c <__alt_data_end+0xfc00f55c>
 400f868:	d9800517 	ldw	r6,20(sp)
 400f86c:	d9c00717 	ldw	r7,28(sp)
 400f870:	00800c44 	movi	r2,49
 400f874:	31800044 	addi	r6,r6,1
 400f878:	d9800515 	stw	r6,20(sp)
 400f87c:	38800005 	stb	r2,0(r7)
 400f880:	003edf06 	br	400f400 <__alt_data_end+0xfc00f400>
 400f884:	d8000b15 	stw	zero,44(sp)
 400f888:	003c9f06 	br	400eb08 <__alt_data_end+0xfc00eb08>
 400f88c:	903e7e1e 	bne	r18,zero,400f288 <__alt_data_end+0xfc00f288>
 400f890:	00800434 	movhi	r2,16
 400f894:	10bfffc4 	addi	r2,r2,-1
 400f898:	9884703a 	and	r2,r19,r2
 400f89c:	1000ea1e 	bne	r2,zero,400fc48 <_dtoa_r+0x1460>
 400f8a0:	9cdffc2c 	andhi	r19,r19,32752
 400f8a4:	9800e826 	beq	r19,zero,400fc48 <_dtoa_r+0x1460>
 400f8a8:	d9c00817 	ldw	r7,32(sp)
 400f8ac:	b5800044 	addi	r22,r22,1
 400f8b0:	04c00044 	movi	r19,1
 400f8b4:	39c00044 	addi	r7,r7,1
 400f8b8:	d9c00815 	stw	r7,32(sp)
 400f8bc:	d8800d17 	ldw	r2,52(sp)
 400f8c0:	103e721e 	bne	r2,zero,400f28c <__alt_data_end+0xfc00f28c>
 400f8c4:	00800044 	movi	r2,1
 400f8c8:	003e7906 	br	400f2b0 <__alt_data_end+0xfc00f2b0>
 400f8cc:	8009883a 	mov	r4,r16
 400f8d0:	40180180 	call	4018018 <__floatsidf>
 400f8d4:	d9800f17 	ldw	r6,60(sp)
 400f8d8:	d9c01017 	ldw	r7,64(sp)
 400f8dc:	1009883a 	mov	r4,r2
 400f8e0:	180b883a 	mov	r5,r3
 400f8e4:	4016e300 	call	4016e30 <__muldf3>
 400f8e8:	000d883a 	mov	r6,zero
 400f8ec:	01d00734 	movhi	r7,16412
 400f8f0:	1009883a 	mov	r4,r2
 400f8f4:	180b883a 	mov	r5,r3
 400f8f8:	401595c0 	call	401595c <__adddf3>
 400f8fc:	047f3034 	movhi	r17,64704
 400f900:	1021883a 	mov	r16,r2
 400f904:	1c63883a 	add	r17,r3,r17
 400f908:	d9000f17 	ldw	r4,60(sp)
 400f90c:	d9401017 	ldw	r5,64(sp)
 400f910:	000d883a 	mov	r6,zero
 400f914:	01d00534 	movhi	r7,16404
 400f918:	401769c0 	call	401769c <__subdf3>
 400f91c:	800d883a 	mov	r6,r16
 400f920:	880f883a 	mov	r7,r17
 400f924:	1009883a 	mov	r4,r2
 400f928:	180b883a 	mov	r5,r3
 400f92c:	102b883a 	mov	r21,r2
 400f930:	1829883a 	mov	r20,r3
 400f934:	4016c600 	call	4016c60 <__gedf2>
 400f938:	00806c16 	blt	zero,r2,400faec <_dtoa_r+0x1304>
 400f93c:	89e0003c 	xorhi	r7,r17,32768
 400f940:	800d883a 	mov	r6,r16
 400f944:	a809883a 	mov	r4,r21
 400f948:	a00b883a 	mov	r5,r20
 400f94c:	4016d3c0 	call	4016d3c <__ledf2>
 400f950:	103d7e0e 	bge	r2,zero,400ef4c <__alt_data_end+0xfc00ef4c>
 400f954:	002b883a 	mov	r21,zero
 400f958:	0023883a 	mov	r17,zero
 400f95c:	003efb06 	br	400f54c <__alt_data_end+0xfc00f54c>
 400f960:	d8800717 	ldw	r2,28(sp)
 400f964:	003bd006 	br	400e8a8 <__alt_data_end+0xfc00e8a8>
 400f968:	d9000a17 	ldw	r4,40(sp)
 400f96c:	d9800d17 	ldw	r6,52(sp)
 400f970:	dd400a15 	stw	r21,40(sp)
 400f974:	a905c83a 	sub	r2,r21,r4
 400f978:	308d883a 	add	r6,r6,r2
 400f97c:	d9800d15 	stw	r6,52(sp)
 400f980:	002b883a 	mov	r21,zero
 400f984:	003e0606 	br	400f1a0 <__alt_data_end+0xfc00f1a0>
 400f988:	9023883a 	mov	r17,r18
 400f98c:	9829883a 	mov	r20,r19
 400f990:	04000084 	movi	r16,2
 400f994:	003c9206 	br	400ebe0 <__alt_data_end+0xfc00ebe0>
 400f998:	04000044 	movi	r16,1
 400f99c:	dc000c15 	stw	r16,48(sp)
 400f9a0:	dc000615 	stw	r16,24(sp)
 400f9a4:	dc002215 	stw	r16,136(sp)
 400f9a8:	e0001115 	stw	zero,68(fp)
 400f9ac:	000b883a 	mov	r5,zero
 400f9b0:	003c6906 	br	400eb58 <__alt_data_end+0xfc00eb58>
 400f9b4:	3021883a 	mov	r16,r6
 400f9b8:	003ffb06 	br	400f9a8 <__alt_data_end+0xfc00f9a8>
 400f9bc:	1000021e 	bne	r2,zero,400f9c8 <_dtoa_r+0x11e0>
 400f9c0:	4200004c 	andi	r8,r8,1
 400f9c4:	403e7d1e 	bne	r8,zero,400f3bc <__alt_data_end+0xfc00f3bc>
 400f9c8:	01000c04 	movi	r4,48
 400f9cc:	00000106 	br	400f9d4 <_dtoa_r+0x11ec>
 400f9d0:	102f883a 	mov	r23,r2
 400f9d4:	b8bfffc4 	addi	r2,r23,-1
 400f9d8:	10c00007 	ldb	r3,0(r2)
 400f9dc:	193ffc26 	beq	r3,r4,400f9d0 <__alt_data_end+0xfc00f9d0>
 400f9e0:	003e8706 	br	400f400 <__alt_data_end+0xfc00f400>
 400f9e4:	d8800517 	ldw	r2,20(sp)
 400f9e8:	00a3c83a 	sub	r17,zero,r2
 400f9ec:	8800a426 	beq	r17,zero,400fc80 <_dtoa_r+0x1498>
 400f9f0:	888003cc 	andi	r2,r17,15
 400f9f4:	100490fa 	slli	r2,r2,3
 400f9f8:	00c100b4 	movhi	r3,1026
 400f9fc:	18c70b04 	addi	r3,r3,7212
 400fa00:	1885883a 	add	r2,r3,r2
 400fa04:	11800017 	ldw	r6,0(r2)
 400fa08:	11c00117 	ldw	r7,4(r2)
 400fa0c:	9009883a 	mov	r4,r18
 400fa10:	980b883a 	mov	r5,r19
 400fa14:	8823d13a 	srai	r17,r17,4
 400fa18:	4016e300 	call	4016e30 <__muldf3>
 400fa1c:	d8800f15 	stw	r2,60(sp)
 400fa20:	d8c01015 	stw	r3,64(sp)
 400fa24:	8800e826 	beq	r17,zero,400fdc8 <_dtoa_r+0x15e0>
 400fa28:	050100b4 	movhi	r20,1026
 400fa2c:	a5070104 	addi	r20,r20,7172
 400fa30:	04000084 	movi	r16,2
 400fa34:	8980004c 	andi	r6,r17,1
 400fa38:	1009883a 	mov	r4,r2
 400fa3c:	8823d07a 	srai	r17,r17,1
 400fa40:	180b883a 	mov	r5,r3
 400fa44:	30000426 	beq	r6,zero,400fa58 <_dtoa_r+0x1270>
 400fa48:	a1800017 	ldw	r6,0(r20)
 400fa4c:	a1c00117 	ldw	r7,4(r20)
 400fa50:	84000044 	addi	r16,r16,1
 400fa54:	4016e300 	call	4016e30 <__muldf3>
 400fa58:	a5000204 	addi	r20,r20,8
 400fa5c:	883ff51e 	bne	r17,zero,400fa34 <__alt_data_end+0xfc00fa34>
 400fa60:	d8800f15 	stw	r2,60(sp)
 400fa64:	d8c01015 	stw	r3,64(sp)
 400fa68:	003c7606 	br	400ec44 <__alt_data_end+0xfc00ec44>
 400fa6c:	00c00c04 	movi	r3,48
 400fa70:	10c00005 	stb	r3,0(r2)
 400fa74:	d8c00517 	ldw	r3,20(sp)
 400fa78:	bd3fffc3 	ldbu	r20,-1(r23)
 400fa7c:	18c00044 	addi	r3,r3,1
 400fa80:	d8c00515 	stw	r3,20(sp)
 400fa84:	003db906 	br	400f16c <__alt_data_end+0xfc00f16c>
 400fa88:	89400117 	ldw	r5,4(r17)
 400fa8c:	e009883a 	mov	r4,fp
 400fa90:	40114240 	call	4011424 <_Balloc>
 400fa94:	89800417 	ldw	r6,16(r17)
 400fa98:	89400304 	addi	r5,r17,12
 400fa9c:	11000304 	addi	r4,r2,12
 400faa0:	31800084 	addi	r6,r6,2
 400faa4:	318d883a 	add	r6,r6,r6
 400faa8:	318d883a 	add	r6,r6,r6
 400faac:	1027883a 	mov	r19,r2
 400fab0:	400b8140 	call	400b814 <memcpy>
 400fab4:	01800044 	movi	r6,1
 400fab8:	980b883a 	mov	r5,r19
 400fabc:	e009883a 	mov	r4,fp
 400fac0:	4011c600 	call	4011c60 <__lshift>
 400fac4:	1029883a 	mov	r20,r2
 400fac8:	003ecc06 	br	400f5fc <__alt_data_end+0xfc00f5fc>
 400facc:	00800e44 	movi	r2,57
 400fad0:	90809026 	beq	r18,r2,400fd14 <_dtoa_r+0x152c>
 400fad4:	92000044 	addi	r8,r18,1
 400fad8:	003f1f06 	br	400f758 <__alt_data_end+0xfc00f758>
 400fadc:	9011883a 	mov	r8,r18
 400fae0:	8825883a 	mov	r18,r17
 400fae4:	a023883a 	mov	r17,r20
 400fae8:	003e2906 	br	400f390 <__alt_data_end+0xfc00f390>
 400faec:	002b883a 	mov	r21,zero
 400faf0:	0023883a 	mov	r17,zero
 400faf4:	003f5406 	br	400f848 <__alt_data_end+0xfc00f848>
 400faf8:	61bfffc4 	addi	r6,r12,-1
 400fafc:	300490fa 	slli	r2,r6,3
 400fb00:	00c100b4 	movhi	r3,1026
 400fb04:	18c70b04 	addi	r3,r3,7212
 400fb08:	1885883a 	add	r2,r3,r2
 400fb0c:	11000017 	ldw	r4,0(r2)
 400fb10:	11400117 	ldw	r5,4(r2)
 400fb14:	d8800717 	ldw	r2,28(sp)
 400fb18:	880f883a 	mov	r7,r17
 400fb1c:	d9801215 	stw	r6,72(sp)
 400fb20:	800d883a 	mov	r6,r16
 400fb24:	db001615 	stw	r12,88(sp)
 400fb28:	15c00044 	addi	r23,r2,1
 400fb2c:	4016e300 	call	4016e30 <__muldf3>
 400fb30:	d9401017 	ldw	r5,64(sp)
 400fb34:	d9000f17 	ldw	r4,60(sp)
 400fb38:	d8c01515 	stw	r3,84(sp)
 400fb3c:	d8801415 	stw	r2,80(sp)
 400fb40:	4017f980 	call	4017f98 <__fixdfsi>
 400fb44:	1009883a 	mov	r4,r2
 400fb48:	1021883a 	mov	r16,r2
 400fb4c:	40180180 	call	4018018 <__floatsidf>
 400fb50:	d9000f17 	ldw	r4,60(sp)
 400fb54:	d9401017 	ldw	r5,64(sp)
 400fb58:	100d883a 	mov	r6,r2
 400fb5c:	180f883a 	mov	r7,r3
 400fb60:	401769c0 	call	401769c <__subdf3>
 400fb64:	1829883a 	mov	r20,r3
 400fb68:	d8c00717 	ldw	r3,28(sp)
 400fb6c:	84000c04 	addi	r16,r16,48
 400fb70:	1023883a 	mov	r17,r2
 400fb74:	1c000005 	stb	r16,0(r3)
 400fb78:	db001617 	ldw	r12,88(sp)
 400fb7c:	00800044 	movi	r2,1
 400fb80:	60802226 	beq	r12,r2,400fc0c <_dtoa_r+0x1424>
 400fb84:	d9c00717 	ldw	r7,28(sp)
 400fb88:	8805883a 	mov	r2,r17
 400fb8c:	b82b883a 	mov	r21,r23
 400fb90:	3b19883a 	add	r12,r7,r12
 400fb94:	6023883a 	mov	r17,r12
 400fb98:	a007883a 	mov	r3,r20
 400fb9c:	dc800f15 	stw	r18,60(sp)
 400fba0:	000d883a 	mov	r6,zero
 400fba4:	01d00934 	movhi	r7,16420
 400fba8:	1009883a 	mov	r4,r2
 400fbac:	180b883a 	mov	r5,r3
 400fbb0:	4016e300 	call	4016e30 <__muldf3>
 400fbb4:	180b883a 	mov	r5,r3
 400fbb8:	1009883a 	mov	r4,r2
 400fbbc:	1829883a 	mov	r20,r3
 400fbc0:	1025883a 	mov	r18,r2
 400fbc4:	4017f980 	call	4017f98 <__fixdfsi>
 400fbc8:	1009883a 	mov	r4,r2
 400fbcc:	1021883a 	mov	r16,r2
 400fbd0:	40180180 	call	4018018 <__floatsidf>
 400fbd4:	100d883a 	mov	r6,r2
 400fbd8:	180f883a 	mov	r7,r3
 400fbdc:	9009883a 	mov	r4,r18
 400fbe0:	a00b883a 	mov	r5,r20
 400fbe4:	84000c04 	addi	r16,r16,48
 400fbe8:	401769c0 	call	401769c <__subdf3>
 400fbec:	ad400044 	addi	r21,r21,1
 400fbf0:	ac3fffc5 	stb	r16,-1(r21)
 400fbf4:	ac7fea1e 	bne	r21,r17,400fba0 <__alt_data_end+0xfc00fba0>
 400fbf8:	1023883a 	mov	r17,r2
 400fbfc:	d8801217 	ldw	r2,72(sp)
 400fc00:	dc800f17 	ldw	r18,60(sp)
 400fc04:	1829883a 	mov	r20,r3
 400fc08:	b8af883a 	add	r23,r23,r2
 400fc0c:	d9001417 	ldw	r4,80(sp)
 400fc10:	d9401517 	ldw	r5,84(sp)
 400fc14:	000d883a 	mov	r6,zero
 400fc18:	01cff834 	movhi	r7,16352
 400fc1c:	401595c0 	call	401595c <__adddf3>
 400fc20:	880d883a 	mov	r6,r17
 400fc24:	a00f883a 	mov	r7,r20
 400fc28:	1009883a 	mov	r4,r2
 400fc2c:	180b883a 	mov	r5,r3
 400fc30:	4016d3c0 	call	4016d3c <__ledf2>
 400fc34:	10003e0e 	bge	r2,zero,400fd30 <_dtoa_r+0x1548>
 400fc38:	d9001317 	ldw	r4,76(sp)
 400fc3c:	bd3fffc3 	ldbu	r20,-1(r23)
 400fc40:	d9000515 	stw	r4,20(sp)
 400fc44:	003d3b06 	br	400f134 <__alt_data_end+0xfc00f134>
 400fc48:	0027883a 	mov	r19,zero
 400fc4c:	003f1b06 	br	400f8bc <__alt_data_end+0xfc00f8bc>
 400fc50:	d8800817 	ldw	r2,32(sp)
 400fc54:	11e9c83a 	sub	r20,r2,r7
 400fc58:	0005883a 	mov	r2,zero
 400fc5c:	003d5406 	br	400f1b0 <__alt_data_end+0xfc00f1b0>
 400fc60:	00800044 	movi	r2,1
 400fc64:	003dc706 	br	400f384 <__alt_data_end+0xfc00f384>
 400fc68:	d8c00217 	ldw	r3,8(sp)
 400fc6c:	00800d84 	movi	r2,54
 400fc70:	dd400a17 	ldw	r21,40(sp)
 400fc74:	10c5c83a 	sub	r2,r2,r3
 400fc78:	dd000817 	ldw	r20,32(sp)
 400fc7c:	003d4c06 	br	400f1b0 <__alt_data_end+0xfc00f1b0>
 400fc80:	dc800f15 	stw	r18,60(sp)
 400fc84:	dcc01015 	stw	r19,64(sp)
 400fc88:	04000084 	movi	r16,2
 400fc8c:	003bed06 	br	400ec44 <__alt_data_end+0xfc00ec44>
 400fc90:	d9000617 	ldw	r4,24(sp)
 400fc94:	203f0d26 	beq	r4,zero,400f8cc <__alt_data_end+0xfc00f8cc>
 400fc98:	d9800c17 	ldw	r6,48(sp)
 400fc9c:	01bcab0e 	bge	zero,r6,400ef4c <__alt_data_end+0xfc00ef4c>
 400fca0:	d9401017 	ldw	r5,64(sp)
 400fca4:	d9000f17 	ldw	r4,60(sp)
 400fca8:	000d883a 	mov	r6,zero
 400fcac:	01d00934 	movhi	r7,16420
 400fcb0:	4016e300 	call	4016e30 <__muldf3>
 400fcb4:	81000044 	addi	r4,r16,1
 400fcb8:	d8800f15 	stw	r2,60(sp)
 400fcbc:	d8c01015 	stw	r3,64(sp)
 400fcc0:	40180180 	call	4018018 <__floatsidf>
 400fcc4:	d9800f17 	ldw	r6,60(sp)
 400fcc8:	d9c01017 	ldw	r7,64(sp)
 400fccc:	1009883a 	mov	r4,r2
 400fcd0:	180b883a 	mov	r5,r3
 400fcd4:	4016e300 	call	4016e30 <__muldf3>
 400fcd8:	01d00734 	movhi	r7,16412
 400fcdc:	000d883a 	mov	r6,zero
 400fce0:	1009883a 	mov	r4,r2
 400fce4:	180b883a 	mov	r5,r3
 400fce8:	401595c0 	call	401595c <__adddf3>
 400fcec:	d9c00517 	ldw	r7,20(sp)
 400fcf0:	047f3034 	movhi	r17,64704
 400fcf4:	1021883a 	mov	r16,r2
 400fcf8:	39ffffc4 	addi	r7,r7,-1
 400fcfc:	d9c01315 	stw	r7,76(sp)
 400fd00:	1c63883a 	add	r17,r3,r17
 400fd04:	db000c17 	ldw	r12,48(sp)
 400fd08:	003bea06 	br	400ecb4 <__alt_data_end+0xfc00ecb4>
 400fd0c:	dc000915 	stw	r16,36(sp)
 400fd10:	003e0e06 	br	400f54c <__alt_data_end+0xfc00f54c>
 400fd14:	01000e44 	movi	r4,57
 400fd18:	8825883a 	mov	r18,r17
 400fd1c:	9dc00044 	addi	r23,r19,1
 400fd20:	99000005 	stb	r4,0(r19)
 400fd24:	a023883a 	mov	r17,r20
 400fd28:	dc000915 	stw	r16,36(sp)
 400fd2c:	003da406 	br	400f3c0 <__alt_data_end+0xfc00f3c0>
 400fd30:	d9801417 	ldw	r6,80(sp)
 400fd34:	d9c01517 	ldw	r7,84(sp)
 400fd38:	0009883a 	mov	r4,zero
 400fd3c:	014ff834 	movhi	r5,16352
 400fd40:	401769c0 	call	401769c <__subdf3>
 400fd44:	880d883a 	mov	r6,r17
 400fd48:	a00f883a 	mov	r7,r20
 400fd4c:	1009883a 	mov	r4,r2
 400fd50:	180b883a 	mov	r5,r3
 400fd54:	4016c600 	call	4016c60 <__gedf2>
 400fd58:	00bc7c0e 	bge	zero,r2,400ef4c <__alt_data_end+0xfc00ef4c>
 400fd5c:	01000c04 	movi	r4,48
 400fd60:	00000106 	br	400fd68 <_dtoa_r+0x1580>
 400fd64:	102f883a 	mov	r23,r2
 400fd68:	b8bfffc4 	addi	r2,r23,-1
 400fd6c:	10c00007 	ldb	r3,0(r2)
 400fd70:	193ffc26 	beq	r3,r4,400fd64 <__alt_data_end+0xfc00fd64>
 400fd74:	d9801317 	ldw	r6,76(sp)
 400fd78:	d9800515 	stw	r6,20(sp)
 400fd7c:	003c4406 	br	400ee90 <__alt_data_end+0xfc00ee90>
 400fd80:	d9801317 	ldw	r6,76(sp)
 400fd84:	d9800515 	stw	r6,20(sp)
 400fd88:	003cea06 	br	400f134 <__alt_data_end+0xfc00f134>
 400fd8c:	dd800f17 	ldw	r22,60(sp)
 400fd90:	dcc01017 	ldw	r19,64(sp)
 400fd94:	dc801217 	ldw	r18,72(sp)
 400fd98:	003c6c06 	br	400ef4c <__alt_data_end+0xfc00ef4c>
 400fd9c:	903e031e 	bne	r18,zero,400f5ac <__alt_data_end+0xfc00f5ac>
 400fda0:	003ebb06 	br	400f890 <__alt_data_end+0xfc00f890>
 400fda4:	103e6c1e 	bne	r2,zero,400f758 <__alt_data_end+0xfc00f758>
 400fda8:	4080004c 	andi	r2,r8,1
 400fdac:	103e6a26 	beq	r2,zero,400f758 <__alt_data_end+0xfc00f758>
 400fdb0:	003e6606 	br	400f74c <__alt_data_end+0xfc00f74c>
 400fdb4:	d8c00317 	ldw	r3,12(sp)
 400fdb8:	00800084 	movi	r2,2
 400fdbc:	10c02916 	blt	r2,r3,400fe64 <_dtoa_r+0x167c>
 400fdc0:	d9000c17 	ldw	r4,48(sp)
 400fdc4:	003e8806 	br	400f7e8 <__alt_data_end+0xfc00f7e8>
 400fdc8:	04000084 	movi	r16,2
 400fdcc:	003b9d06 	br	400ec44 <__alt_data_end+0xfc00ec44>
 400fdd0:	d9001317 	ldw	r4,76(sp)
 400fdd4:	d9000515 	stw	r4,20(sp)
 400fdd8:	003cd606 	br	400f134 <__alt_data_end+0xfc00f134>
 400fddc:	d8801317 	ldw	r2,76(sp)
 400fde0:	d8800515 	stw	r2,20(sp)
 400fde4:	003c2a06 	br	400ee90 <__alt_data_end+0xfc00ee90>
 400fde8:	d9800317 	ldw	r6,12(sp)
 400fdec:	00800084 	movi	r2,2
 400fdf0:	11801516 	blt	r2,r6,400fe48 <_dtoa_r+0x1660>
 400fdf4:	d9c00c17 	ldw	r7,48(sp)
 400fdf8:	d9c00615 	stw	r7,24(sp)
 400fdfc:	003df706 	br	400f5dc <__alt_data_end+0xfc00f5dc>
 400fe00:	193d3926 	beq	r3,r4,400f2e8 <__alt_data_end+0xfc00f2e8>
 400fe04:	00c00f04 	movi	r3,60
 400fe08:	1885c83a 	sub	r2,r3,r2
 400fe0c:	003ddf06 	br	400f58c <__alt_data_end+0xfc00f58c>
 400fe10:	e009883a 	mov	r4,fp
 400fe14:	e0001115 	stw	zero,68(fp)
 400fe18:	000b883a 	mov	r5,zero
 400fe1c:	40114240 	call	4011424 <_Balloc>
 400fe20:	d8800715 	stw	r2,28(sp)
 400fe24:	d8c00717 	ldw	r3,28(sp)
 400fe28:	00bfffc4 	movi	r2,-1
 400fe2c:	01000044 	movi	r4,1
 400fe30:	d8800c15 	stw	r2,48(sp)
 400fe34:	e0c01015 	stw	r3,64(fp)
 400fe38:	d9000b15 	stw	r4,44(sp)
 400fe3c:	d8800615 	stw	r2,24(sp)
 400fe40:	d8002215 	stw	zero,136(sp)
 400fe44:	003c4106 	br	400ef4c <__alt_data_end+0xfc00ef4c>
 400fe48:	d8c00c17 	ldw	r3,48(sp)
 400fe4c:	d8c00615 	stw	r3,24(sp)
 400fe50:	003e7006 	br	400f814 <__alt_data_end+0xfc00f814>
 400fe54:	04400044 	movi	r17,1
 400fe58:	003b2006 	br	400eadc <__alt_data_end+0xfc00eadc>
 400fe5c:	000b883a 	mov	r5,zero
 400fe60:	003b3d06 	br	400eb58 <__alt_data_end+0xfc00eb58>
 400fe64:	d8800c17 	ldw	r2,48(sp)
 400fe68:	d8800615 	stw	r2,24(sp)
 400fe6c:	003e6906 	br	400f814 <__alt_data_end+0xfc00f814>

0400fe70 <__sflush_r>:
 400fe70:	2880030b 	ldhu	r2,12(r5)
 400fe74:	defffb04 	addi	sp,sp,-20
 400fe78:	dcc00315 	stw	r19,12(sp)
 400fe7c:	dc400115 	stw	r17,4(sp)
 400fe80:	dfc00415 	stw	ra,16(sp)
 400fe84:	dc800215 	stw	r18,8(sp)
 400fe88:	dc000015 	stw	r16,0(sp)
 400fe8c:	10c0020c 	andi	r3,r2,8
 400fe90:	2823883a 	mov	r17,r5
 400fe94:	2027883a 	mov	r19,r4
 400fe98:	1800311e 	bne	r3,zero,400ff60 <__sflush_r+0xf0>
 400fe9c:	28c00117 	ldw	r3,4(r5)
 400fea0:	10820014 	ori	r2,r2,2048
 400fea4:	2880030d 	sth	r2,12(r5)
 400fea8:	00c04b0e 	bge	zero,r3,400ffd8 <__sflush_r+0x168>
 400feac:	8a000a17 	ldw	r8,40(r17)
 400feb0:	40002326 	beq	r8,zero,400ff40 <__sflush_r+0xd0>
 400feb4:	9c000017 	ldw	r16,0(r19)
 400feb8:	10c4000c 	andi	r3,r2,4096
 400febc:	98000015 	stw	zero,0(r19)
 400fec0:	18004826 	beq	r3,zero,400ffe4 <__sflush_r+0x174>
 400fec4:	89801417 	ldw	r6,80(r17)
 400fec8:	10c0010c 	andi	r3,r2,4
 400fecc:	18000626 	beq	r3,zero,400fee8 <__sflush_r+0x78>
 400fed0:	88c00117 	ldw	r3,4(r17)
 400fed4:	88800c17 	ldw	r2,48(r17)
 400fed8:	30cdc83a 	sub	r6,r6,r3
 400fedc:	10000226 	beq	r2,zero,400fee8 <__sflush_r+0x78>
 400fee0:	88800f17 	ldw	r2,60(r17)
 400fee4:	308dc83a 	sub	r6,r6,r2
 400fee8:	89400717 	ldw	r5,28(r17)
 400feec:	000f883a 	mov	r7,zero
 400fef0:	9809883a 	mov	r4,r19
 400fef4:	403ee83a 	callr	r8
 400fef8:	00ffffc4 	movi	r3,-1
 400fefc:	10c04426 	beq	r2,r3,4010010 <__sflush_r+0x1a0>
 400ff00:	88c0030b 	ldhu	r3,12(r17)
 400ff04:	89000417 	ldw	r4,16(r17)
 400ff08:	88000115 	stw	zero,4(r17)
 400ff0c:	197dffcc 	andi	r5,r3,63487
 400ff10:	8940030d 	sth	r5,12(r17)
 400ff14:	89000015 	stw	r4,0(r17)
 400ff18:	18c4000c 	andi	r3,r3,4096
 400ff1c:	18002c1e 	bne	r3,zero,400ffd0 <__sflush_r+0x160>
 400ff20:	89400c17 	ldw	r5,48(r17)
 400ff24:	9c000015 	stw	r16,0(r19)
 400ff28:	28000526 	beq	r5,zero,400ff40 <__sflush_r+0xd0>
 400ff2c:	88801004 	addi	r2,r17,64
 400ff30:	28800226 	beq	r5,r2,400ff3c <__sflush_r+0xcc>
 400ff34:	9809883a 	mov	r4,r19
 400ff38:	40105ec0 	call	40105ec <_free_r>
 400ff3c:	88000c15 	stw	zero,48(r17)
 400ff40:	0005883a 	mov	r2,zero
 400ff44:	dfc00417 	ldw	ra,16(sp)
 400ff48:	dcc00317 	ldw	r19,12(sp)
 400ff4c:	dc800217 	ldw	r18,8(sp)
 400ff50:	dc400117 	ldw	r17,4(sp)
 400ff54:	dc000017 	ldw	r16,0(sp)
 400ff58:	dec00504 	addi	sp,sp,20
 400ff5c:	f800283a 	ret
 400ff60:	2c800417 	ldw	r18,16(r5)
 400ff64:	903ff626 	beq	r18,zero,400ff40 <__alt_data_end+0xfc00ff40>
 400ff68:	2c000017 	ldw	r16,0(r5)
 400ff6c:	108000cc 	andi	r2,r2,3
 400ff70:	2c800015 	stw	r18,0(r5)
 400ff74:	84a1c83a 	sub	r16,r16,r18
 400ff78:	1000131e 	bne	r2,zero,400ffc8 <__sflush_r+0x158>
 400ff7c:	28800517 	ldw	r2,20(r5)
 400ff80:	88800215 	stw	r2,8(r17)
 400ff84:	04000316 	blt	zero,r16,400ff94 <__sflush_r+0x124>
 400ff88:	003fed06 	br	400ff40 <__alt_data_end+0xfc00ff40>
 400ff8c:	90a5883a 	add	r18,r18,r2
 400ff90:	043feb0e 	bge	zero,r16,400ff40 <__alt_data_end+0xfc00ff40>
 400ff94:	88800917 	ldw	r2,36(r17)
 400ff98:	89400717 	ldw	r5,28(r17)
 400ff9c:	800f883a 	mov	r7,r16
 400ffa0:	900d883a 	mov	r6,r18
 400ffa4:	9809883a 	mov	r4,r19
 400ffa8:	103ee83a 	callr	r2
 400ffac:	80a1c83a 	sub	r16,r16,r2
 400ffb0:	00bff616 	blt	zero,r2,400ff8c <__alt_data_end+0xfc00ff8c>
 400ffb4:	88c0030b 	ldhu	r3,12(r17)
 400ffb8:	00bfffc4 	movi	r2,-1
 400ffbc:	18c01014 	ori	r3,r3,64
 400ffc0:	88c0030d 	sth	r3,12(r17)
 400ffc4:	003fdf06 	br	400ff44 <__alt_data_end+0xfc00ff44>
 400ffc8:	0005883a 	mov	r2,zero
 400ffcc:	003fec06 	br	400ff80 <__alt_data_end+0xfc00ff80>
 400ffd0:	88801415 	stw	r2,80(r17)
 400ffd4:	003fd206 	br	400ff20 <__alt_data_end+0xfc00ff20>
 400ffd8:	28c00f17 	ldw	r3,60(r5)
 400ffdc:	00ffb316 	blt	zero,r3,400feac <__alt_data_end+0xfc00feac>
 400ffe0:	003fd706 	br	400ff40 <__alt_data_end+0xfc00ff40>
 400ffe4:	89400717 	ldw	r5,28(r17)
 400ffe8:	000d883a 	mov	r6,zero
 400ffec:	01c00044 	movi	r7,1
 400fff0:	9809883a 	mov	r4,r19
 400fff4:	403ee83a 	callr	r8
 400fff8:	100d883a 	mov	r6,r2
 400fffc:	00bfffc4 	movi	r2,-1
 4010000:	30801426 	beq	r6,r2,4010054 <__sflush_r+0x1e4>
 4010004:	8880030b 	ldhu	r2,12(r17)
 4010008:	8a000a17 	ldw	r8,40(r17)
 401000c:	003fae06 	br	400fec8 <__alt_data_end+0xfc00fec8>
 4010010:	98c00017 	ldw	r3,0(r19)
 4010014:	183fba26 	beq	r3,zero,400ff00 <__alt_data_end+0xfc00ff00>
 4010018:	01000744 	movi	r4,29
 401001c:	19000626 	beq	r3,r4,4010038 <__sflush_r+0x1c8>
 4010020:	01000584 	movi	r4,22
 4010024:	19000426 	beq	r3,r4,4010038 <__sflush_r+0x1c8>
 4010028:	88c0030b 	ldhu	r3,12(r17)
 401002c:	18c01014 	ori	r3,r3,64
 4010030:	88c0030d 	sth	r3,12(r17)
 4010034:	003fc306 	br	400ff44 <__alt_data_end+0xfc00ff44>
 4010038:	8880030b 	ldhu	r2,12(r17)
 401003c:	88c00417 	ldw	r3,16(r17)
 4010040:	88000115 	stw	zero,4(r17)
 4010044:	10bdffcc 	andi	r2,r2,63487
 4010048:	8880030d 	sth	r2,12(r17)
 401004c:	88c00015 	stw	r3,0(r17)
 4010050:	003fb306 	br	400ff20 <__alt_data_end+0xfc00ff20>
 4010054:	98800017 	ldw	r2,0(r19)
 4010058:	103fea26 	beq	r2,zero,4010004 <__alt_data_end+0xfc010004>
 401005c:	00c00744 	movi	r3,29
 4010060:	10c00226 	beq	r2,r3,401006c <__sflush_r+0x1fc>
 4010064:	00c00584 	movi	r3,22
 4010068:	10c0031e 	bne	r2,r3,4010078 <__sflush_r+0x208>
 401006c:	9c000015 	stw	r16,0(r19)
 4010070:	0005883a 	mov	r2,zero
 4010074:	003fb306 	br	400ff44 <__alt_data_end+0xfc00ff44>
 4010078:	88c0030b 	ldhu	r3,12(r17)
 401007c:	3005883a 	mov	r2,r6
 4010080:	18c01014 	ori	r3,r3,64
 4010084:	88c0030d 	sth	r3,12(r17)
 4010088:	003fae06 	br	400ff44 <__alt_data_end+0xfc00ff44>

0401008c <_fflush_r>:
 401008c:	defffd04 	addi	sp,sp,-12
 4010090:	dc000115 	stw	r16,4(sp)
 4010094:	dfc00215 	stw	ra,8(sp)
 4010098:	2021883a 	mov	r16,r4
 401009c:	20000226 	beq	r4,zero,40100a8 <_fflush_r+0x1c>
 40100a0:	20800e17 	ldw	r2,56(r4)
 40100a4:	10000c26 	beq	r2,zero,40100d8 <_fflush_r+0x4c>
 40100a8:	2880030f 	ldh	r2,12(r5)
 40100ac:	1000051e 	bne	r2,zero,40100c4 <_fflush_r+0x38>
 40100b0:	0005883a 	mov	r2,zero
 40100b4:	dfc00217 	ldw	ra,8(sp)
 40100b8:	dc000117 	ldw	r16,4(sp)
 40100bc:	dec00304 	addi	sp,sp,12
 40100c0:	f800283a 	ret
 40100c4:	8009883a 	mov	r4,r16
 40100c8:	dfc00217 	ldw	ra,8(sp)
 40100cc:	dc000117 	ldw	r16,4(sp)
 40100d0:	dec00304 	addi	sp,sp,12
 40100d4:	400fe701 	jmpi	400fe70 <__sflush_r>
 40100d8:	d9400015 	stw	r5,0(sp)
 40100dc:	40104780 	call	4010478 <__sinit>
 40100e0:	d9400017 	ldw	r5,0(sp)
 40100e4:	003ff006 	br	40100a8 <__alt_data_end+0xfc0100a8>

040100e8 <fflush>:
 40100e8:	20000526 	beq	r4,zero,4010100 <fflush+0x18>
 40100ec:	008100b4 	movhi	r2,1026
 40100f0:	1093f304 	addi	r2,r2,20428
 40100f4:	200b883a 	mov	r5,r4
 40100f8:	11000017 	ldw	r4,0(r2)
 40100fc:	401008c1 	jmpi	401008c <_fflush_r>
 4010100:	008100b4 	movhi	r2,1026
 4010104:	1093f204 	addi	r2,r2,20424
 4010108:	11000017 	ldw	r4,0(r2)
 401010c:	01410074 	movhi	r5,1025
 4010110:	29402304 	addi	r5,r5,140
 4010114:	4010e881 	jmpi	4010e88 <_fwalk_reent>

04010118 <__fp_unlock>:
 4010118:	0005883a 	mov	r2,zero
 401011c:	f800283a 	ret

04010120 <_cleanup_r>:
 4010120:	01410074 	movhi	r5,1025
 4010124:	2951ce04 	addi	r5,r5,18232
 4010128:	4010e881 	jmpi	4010e88 <_fwalk_reent>

0401012c <__sinit.part.1>:
 401012c:	defff704 	addi	sp,sp,-36
 4010130:	00c10074 	movhi	r3,1025
 4010134:	dfc00815 	stw	ra,32(sp)
 4010138:	ddc00715 	stw	r23,28(sp)
 401013c:	dd800615 	stw	r22,24(sp)
 4010140:	dd400515 	stw	r21,20(sp)
 4010144:	dd000415 	stw	r20,16(sp)
 4010148:	dcc00315 	stw	r19,12(sp)
 401014c:	dc800215 	stw	r18,8(sp)
 4010150:	dc400115 	stw	r17,4(sp)
 4010154:	dc000015 	stw	r16,0(sp)
 4010158:	18c04804 	addi	r3,r3,288
 401015c:	24000117 	ldw	r16,4(r4)
 4010160:	20c00f15 	stw	r3,60(r4)
 4010164:	2080bb04 	addi	r2,r4,748
 4010168:	00c000c4 	movi	r3,3
 401016c:	20c0b915 	stw	r3,740(r4)
 4010170:	2080ba15 	stw	r2,744(r4)
 4010174:	2000b815 	stw	zero,736(r4)
 4010178:	05c00204 	movi	r23,8
 401017c:	00800104 	movi	r2,4
 4010180:	2025883a 	mov	r18,r4
 4010184:	b80d883a 	mov	r6,r23
 4010188:	81001704 	addi	r4,r16,92
 401018c:	000b883a 	mov	r5,zero
 4010190:	80000015 	stw	zero,0(r16)
 4010194:	80000115 	stw	zero,4(r16)
 4010198:	80000215 	stw	zero,8(r16)
 401019c:	8080030d 	sth	r2,12(r16)
 40101a0:	80001915 	stw	zero,100(r16)
 40101a4:	8000038d 	sth	zero,14(r16)
 40101a8:	80000415 	stw	zero,16(r16)
 40101ac:	80000515 	stw	zero,20(r16)
 40101b0:	80000615 	stw	zero,24(r16)
 40101b4:	400b95c0 	call	400b95c <memset>
 40101b8:	05810074 	movhi	r22,1025
 40101bc:	94400217 	ldw	r17,8(r18)
 40101c0:	05410074 	movhi	r21,1025
 40101c4:	05010074 	movhi	r20,1025
 40101c8:	04c10074 	movhi	r19,1025
 40101cc:	b58b0704 	addi	r22,r22,11292
 40101d0:	ad4b1e04 	addi	r21,r21,11384
 40101d4:	a50b3d04 	addi	r20,r20,11508
 40101d8:	9ccb5404 	addi	r19,r19,11600
 40101dc:	85800815 	stw	r22,32(r16)
 40101e0:	85400915 	stw	r21,36(r16)
 40101e4:	85000a15 	stw	r20,40(r16)
 40101e8:	84c00b15 	stw	r19,44(r16)
 40101ec:	84000715 	stw	r16,28(r16)
 40101f0:	00800284 	movi	r2,10
 40101f4:	8880030d 	sth	r2,12(r17)
 40101f8:	00800044 	movi	r2,1
 40101fc:	b80d883a 	mov	r6,r23
 4010200:	89001704 	addi	r4,r17,92
 4010204:	000b883a 	mov	r5,zero
 4010208:	88000015 	stw	zero,0(r17)
 401020c:	88000115 	stw	zero,4(r17)
 4010210:	88000215 	stw	zero,8(r17)
 4010214:	88001915 	stw	zero,100(r17)
 4010218:	8880038d 	sth	r2,14(r17)
 401021c:	88000415 	stw	zero,16(r17)
 4010220:	88000515 	stw	zero,20(r17)
 4010224:	88000615 	stw	zero,24(r17)
 4010228:	400b95c0 	call	400b95c <memset>
 401022c:	94000317 	ldw	r16,12(r18)
 4010230:	00800484 	movi	r2,18
 4010234:	8c400715 	stw	r17,28(r17)
 4010238:	8d800815 	stw	r22,32(r17)
 401023c:	8d400915 	stw	r21,36(r17)
 4010240:	8d000a15 	stw	r20,40(r17)
 4010244:	8cc00b15 	stw	r19,44(r17)
 4010248:	8080030d 	sth	r2,12(r16)
 401024c:	00800084 	movi	r2,2
 4010250:	80000015 	stw	zero,0(r16)
 4010254:	80000115 	stw	zero,4(r16)
 4010258:	80000215 	stw	zero,8(r16)
 401025c:	80001915 	stw	zero,100(r16)
 4010260:	8080038d 	sth	r2,14(r16)
 4010264:	80000415 	stw	zero,16(r16)
 4010268:	80000515 	stw	zero,20(r16)
 401026c:	80000615 	stw	zero,24(r16)
 4010270:	b80d883a 	mov	r6,r23
 4010274:	000b883a 	mov	r5,zero
 4010278:	81001704 	addi	r4,r16,92
 401027c:	400b95c0 	call	400b95c <memset>
 4010280:	00800044 	movi	r2,1
 4010284:	84000715 	stw	r16,28(r16)
 4010288:	85800815 	stw	r22,32(r16)
 401028c:	85400915 	stw	r21,36(r16)
 4010290:	85000a15 	stw	r20,40(r16)
 4010294:	84c00b15 	stw	r19,44(r16)
 4010298:	90800e15 	stw	r2,56(r18)
 401029c:	dfc00817 	ldw	ra,32(sp)
 40102a0:	ddc00717 	ldw	r23,28(sp)
 40102a4:	dd800617 	ldw	r22,24(sp)
 40102a8:	dd400517 	ldw	r21,20(sp)
 40102ac:	dd000417 	ldw	r20,16(sp)
 40102b0:	dcc00317 	ldw	r19,12(sp)
 40102b4:	dc800217 	ldw	r18,8(sp)
 40102b8:	dc400117 	ldw	r17,4(sp)
 40102bc:	dc000017 	ldw	r16,0(sp)
 40102c0:	dec00904 	addi	sp,sp,36
 40102c4:	f800283a 	ret

040102c8 <__fp_lock>:
 40102c8:	0005883a 	mov	r2,zero
 40102cc:	f800283a 	ret

040102d0 <__sfmoreglue>:
 40102d0:	defffc04 	addi	sp,sp,-16
 40102d4:	dc800215 	stw	r18,8(sp)
 40102d8:	2825883a 	mov	r18,r5
 40102dc:	dc000015 	stw	r16,0(sp)
 40102e0:	01401a04 	movi	r5,104
 40102e4:	2021883a 	mov	r16,r4
 40102e8:	913fffc4 	addi	r4,r18,-1
 40102ec:	dfc00315 	stw	ra,12(sp)
 40102f0:	dc400115 	stw	r17,4(sp)
 40102f4:	400aa340 	call	400aa34 <__mulsi3>
 40102f8:	8009883a 	mov	r4,r16
 40102fc:	11401d04 	addi	r5,r2,116
 4010300:	1023883a 	mov	r17,r2
 4010304:	400b0080 	call	400b008 <_malloc_r>
 4010308:	1021883a 	mov	r16,r2
 401030c:	10000726 	beq	r2,zero,401032c <__sfmoreglue+0x5c>
 4010310:	11000304 	addi	r4,r2,12
 4010314:	10000015 	stw	zero,0(r2)
 4010318:	14800115 	stw	r18,4(r2)
 401031c:	11000215 	stw	r4,8(r2)
 4010320:	89801a04 	addi	r6,r17,104
 4010324:	000b883a 	mov	r5,zero
 4010328:	400b95c0 	call	400b95c <memset>
 401032c:	8005883a 	mov	r2,r16
 4010330:	dfc00317 	ldw	ra,12(sp)
 4010334:	dc800217 	ldw	r18,8(sp)
 4010338:	dc400117 	ldw	r17,4(sp)
 401033c:	dc000017 	ldw	r16,0(sp)
 4010340:	dec00404 	addi	sp,sp,16
 4010344:	f800283a 	ret

04010348 <__sfp>:
 4010348:	defffb04 	addi	sp,sp,-20
 401034c:	dc000015 	stw	r16,0(sp)
 4010350:	040100b4 	movhi	r16,1026
 4010354:	8413f204 	addi	r16,r16,20424
 4010358:	dcc00315 	stw	r19,12(sp)
 401035c:	2027883a 	mov	r19,r4
 4010360:	81000017 	ldw	r4,0(r16)
 4010364:	dfc00415 	stw	ra,16(sp)
 4010368:	dc800215 	stw	r18,8(sp)
 401036c:	20800e17 	ldw	r2,56(r4)
 4010370:	dc400115 	stw	r17,4(sp)
 4010374:	1000021e 	bne	r2,zero,4010380 <__sfp+0x38>
 4010378:	401012c0 	call	401012c <__sinit.part.1>
 401037c:	81000017 	ldw	r4,0(r16)
 4010380:	2480b804 	addi	r18,r4,736
 4010384:	047fffc4 	movi	r17,-1
 4010388:	91000117 	ldw	r4,4(r18)
 401038c:	94000217 	ldw	r16,8(r18)
 4010390:	213fffc4 	addi	r4,r4,-1
 4010394:	20000a16 	blt	r4,zero,40103c0 <__sfp+0x78>
 4010398:	8080030f 	ldh	r2,12(r16)
 401039c:	10000c26 	beq	r2,zero,40103d0 <__sfp+0x88>
 40103a0:	80c01d04 	addi	r3,r16,116
 40103a4:	00000206 	br	40103b0 <__sfp+0x68>
 40103a8:	18bfe60f 	ldh	r2,-104(r3)
 40103ac:	10000826 	beq	r2,zero,40103d0 <__sfp+0x88>
 40103b0:	213fffc4 	addi	r4,r4,-1
 40103b4:	1c3ffd04 	addi	r16,r3,-12
 40103b8:	18c01a04 	addi	r3,r3,104
 40103bc:	247ffa1e 	bne	r4,r17,40103a8 <__alt_data_end+0xfc0103a8>
 40103c0:	90800017 	ldw	r2,0(r18)
 40103c4:	10001d26 	beq	r2,zero,401043c <__sfp+0xf4>
 40103c8:	1025883a 	mov	r18,r2
 40103cc:	003fee06 	br	4010388 <__alt_data_end+0xfc010388>
 40103d0:	00bfffc4 	movi	r2,-1
 40103d4:	8080038d 	sth	r2,14(r16)
 40103d8:	00800044 	movi	r2,1
 40103dc:	8080030d 	sth	r2,12(r16)
 40103e0:	80001915 	stw	zero,100(r16)
 40103e4:	80000015 	stw	zero,0(r16)
 40103e8:	80000215 	stw	zero,8(r16)
 40103ec:	80000115 	stw	zero,4(r16)
 40103f0:	80000415 	stw	zero,16(r16)
 40103f4:	80000515 	stw	zero,20(r16)
 40103f8:	80000615 	stw	zero,24(r16)
 40103fc:	01800204 	movi	r6,8
 4010400:	000b883a 	mov	r5,zero
 4010404:	81001704 	addi	r4,r16,92
 4010408:	400b95c0 	call	400b95c <memset>
 401040c:	8005883a 	mov	r2,r16
 4010410:	80000c15 	stw	zero,48(r16)
 4010414:	80000d15 	stw	zero,52(r16)
 4010418:	80001115 	stw	zero,68(r16)
 401041c:	80001215 	stw	zero,72(r16)
 4010420:	dfc00417 	ldw	ra,16(sp)
 4010424:	dcc00317 	ldw	r19,12(sp)
 4010428:	dc800217 	ldw	r18,8(sp)
 401042c:	dc400117 	ldw	r17,4(sp)
 4010430:	dc000017 	ldw	r16,0(sp)
 4010434:	dec00504 	addi	sp,sp,20
 4010438:	f800283a 	ret
 401043c:	01400104 	movi	r5,4
 4010440:	9809883a 	mov	r4,r19
 4010444:	40102d00 	call	40102d0 <__sfmoreglue>
 4010448:	90800015 	stw	r2,0(r18)
 401044c:	103fde1e 	bne	r2,zero,40103c8 <__alt_data_end+0xfc0103c8>
 4010450:	00800304 	movi	r2,12
 4010454:	98800015 	stw	r2,0(r19)
 4010458:	0005883a 	mov	r2,zero
 401045c:	003ff006 	br	4010420 <__alt_data_end+0xfc010420>

04010460 <_cleanup>:
 4010460:	008100b4 	movhi	r2,1026
 4010464:	1093f204 	addi	r2,r2,20424
 4010468:	11000017 	ldw	r4,0(r2)
 401046c:	01410074 	movhi	r5,1025
 4010470:	2951ce04 	addi	r5,r5,18232
 4010474:	4010e881 	jmpi	4010e88 <_fwalk_reent>

04010478 <__sinit>:
 4010478:	20800e17 	ldw	r2,56(r4)
 401047c:	10000126 	beq	r2,zero,4010484 <__sinit+0xc>
 4010480:	f800283a 	ret
 4010484:	401012c1 	jmpi	401012c <__sinit.part.1>

04010488 <__sfp_lock_acquire>:
 4010488:	f800283a 	ret

0401048c <__sfp_lock_release>:
 401048c:	f800283a 	ret

04010490 <__sinit_lock_acquire>:
 4010490:	f800283a 	ret

04010494 <__sinit_lock_release>:
 4010494:	f800283a 	ret

04010498 <__fp_lock_all>:
 4010498:	008100b4 	movhi	r2,1026
 401049c:	1093f304 	addi	r2,r2,20428
 40104a0:	11000017 	ldw	r4,0(r2)
 40104a4:	01410074 	movhi	r5,1025
 40104a8:	2940b204 	addi	r5,r5,712
 40104ac:	4010dc41 	jmpi	4010dc4 <_fwalk>

040104b0 <__fp_unlock_all>:
 40104b0:	008100b4 	movhi	r2,1026
 40104b4:	1093f304 	addi	r2,r2,20428
 40104b8:	11000017 	ldw	r4,0(r2)
 40104bc:	01410074 	movhi	r5,1025
 40104c0:	29404604 	addi	r5,r5,280
 40104c4:	4010dc41 	jmpi	4010dc4 <_fwalk>

040104c8 <_malloc_trim_r>:
 40104c8:	defffb04 	addi	sp,sp,-20
 40104cc:	dcc00315 	stw	r19,12(sp)
 40104d0:	04c100b4 	movhi	r19,1026
 40104d4:	dc800215 	stw	r18,8(sp)
 40104d8:	dc400115 	stw	r17,4(sp)
 40104dc:	dc000015 	stw	r16,0(sp)
 40104e0:	dfc00415 	stw	ra,16(sp)
 40104e4:	2821883a 	mov	r16,r5
 40104e8:	9cc89804 	addi	r19,r19,8800
 40104ec:	2025883a 	mov	r18,r4
 40104f0:	40187800 	call	4018780 <__malloc_lock>
 40104f4:	98800217 	ldw	r2,8(r19)
 40104f8:	14400117 	ldw	r17,4(r2)
 40104fc:	00bfff04 	movi	r2,-4
 4010500:	88a2703a 	and	r17,r17,r2
 4010504:	8c21c83a 	sub	r16,r17,r16
 4010508:	8403fbc4 	addi	r16,r16,4079
 401050c:	8020d33a 	srli	r16,r16,12
 4010510:	0083ffc4 	movi	r2,4095
 4010514:	843fffc4 	addi	r16,r16,-1
 4010518:	8020933a 	slli	r16,r16,12
 401051c:	1400060e 	bge	r2,r16,4010538 <_malloc_trim_r+0x70>
 4010520:	000b883a 	mov	r5,zero
 4010524:	9009883a 	mov	r4,r18
 4010528:	400bbe40 	call	400bbe4 <_sbrk_r>
 401052c:	98c00217 	ldw	r3,8(r19)
 4010530:	1c47883a 	add	r3,r3,r17
 4010534:	10c00a26 	beq	r2,r3,4010560 <_malloc_trim_r+0x98>
 4010538:	9009883a 	mov	r4,r18
 401053c:	40187840 	call	4018784 <__malloc_unlock>
 4010540:	0005883a 	mov	r2,zero
 4010544:	dfc00417 	ldw	ra,16(sp)
 4010548:	dcc00317 	ldw	r19,12(sp)
 401054c:	dc800217 	ldw	r18,8(sp)
 4010550:	dc400117 	ldw	r17,4(sp)
 4010554:	dc000017 	ldw	r16,0(sp)
 4010558:	dec00504 	addi	sp,sp,20
 401055c:	f800283a 	ret
 4010560:	040bc83a 	sub	r5,zero,r16
 4010564:	9009883a 	mov	r4,r18
 4010568:	400bbe40 	call	400bbe4 <_sbrk_r>
 401056c:	00ffffc4 	movi	r3,-1
 4010570:	10c00d26 	beq	r2,r3,40105a8 <_malloc_trim_r+0xe0>
 4010574:	00c100f4 	movhi	r3,1027
 4010578:	18e0e704 	addi	r3,r3,-31844
 401057c:	18800017 	ldw	r2,0(r3)
 4010580:	99000217 	ldw	r4,8(r19)
 4010584:	8c23c83a 	sub	r17,r17,r16
 4010588:	8c400054 	ori	r17,r17,1
 401058c:	1421c83a 	sub	r16,r2,r16
 4010590:	24400115 	stw	r17,4(r4)
 4010594:	9009883a 	mov	r4,r18
 4010598:	1c000015 	stw	r16,0(r3)
 401059c:	40187840 	call	4018784 <__malloc_unlock>
 40105a0:	00800044 	movi	r2,1
 40105a4:	003fe706 	br	4010544 <__alt_data_end+0xfc010544>
 40105a8:	000b883a 	mov	r5,zero
 40105ac:	9009883a 	mov	r4,r18
 40105b0:	400bbe40 	call	400bbe4 <_sbrk_r>
 40105b4:	99000217 	ldw	r4,8(r19)
 40105b8:	014003c4 	movi	r5,15
 40105bc:	1107c83a 	sub	r3,r2,r4
 40105c0:	28ffdd0e 	bge	r5,r3,4010538 <__alt_data_end+0xfc010538>
 40105c4:	014100b4 	movhi	r5,1026
 40105c8:	2953f404 	addi	r5,r5,20432
 40105cc:	29400017 	ldw	r5,0(r5)
 40105d0:	18c00054 	ori	r3,r3,1
 40105d4:	20c00115 	stw	r3,4(r4)
 40105d8:	00c100f4 	movhi	r3,1027
 40105dc:	1145c83a 	sub	r2,r2,r5
 40105e0:	18e0e704 	addi	r3,r3,-31844
 40105e4:	18800015 	stw	r2,0(r3)
 40105e8:	003fd306 	br	4010538 <__alt_data_end+0xfc010538>

040105ec <_free_r>:
 40105ec:	28004126 	beq	r5,zero,40106f4 <_free_r+0x108>
 40105f0:	defffd04 	addi	sp,sp,-12
 40105f4:	dc400115 	stw	r17,4(sp)
 40105f8:	dc000015 	stw	r16,0(sp)
 40105fc:	2023883a 	mov	r17,r4
 4010600:	2821883a 	mov	r16,r5
 4010604:	dfc00215 	stw	ra,8(sp)
 4010608:	40187800 	call	4018780 <__malloc_lock>
 401060c:	81ffff17 	ldw	r7,-4(r16)
 4010610:	00bfff84 	movi	r2,-2
 4010614:	010100b4 	movhi	r4,1026
 4010618:	81bffe04 	addi	r6,r16,-8
 401061c:	3884703a 	and	r2,r7,r2
 4010620:	21089804 	addi	r4,r4,8800
 4010624:	308b883a 	add	r5,r6,r2
 4010628:	2a400117 	ldw	r9,4(r5)
 401062c:	22000217 	ldw	r8,8(r4)
 4010630:	00ffff04 	movi	r3,-4
 4010634:	48c6703a 	and	r3,r9,r3
 4010638:	2a005726 	beq	r5,r8,4010798 <_free_r+0x1ac>
 401063c:	28c00115 	stw	r3,4(r5)
 4010640:	39c0004c 	andi	r7,r7,1
 4010644:	3800091e 	bne	r7,zero,401066c <_free_r+0x80>
 4010648:	823ffe17 	ldw	r8,-8(r16)
 401064c:	22400204 	addi	r9,r4,8
 4010650:	320dc83a 	sub	r6,r6,r8
 4010654:	31c00217 	ldw	r7,8(r6)
 4010658:	1205883a 	add	r2,r2,r8
 401065c:	3a406526 	beq	r7,r9,40107f4 <_free_r+0x208>
 4010660:	32000317 	ldw	r8,12(r6)
 4010664:	3a000315 	stw	r8,12(r7)
 4010668:	41c00215 	stw	r7,8(r8)
 401066c:	28cf883a 	add	r7,r5,r3
 4010670:	39c00117 	ldw	r7,4(r7)
 4010674:	39c0004c 	andi	r7,r7,1
 4010678:	38003a26 	beq	r7,zero,4010764 <_free_r+0x178>
 401067c:	10c00054 	ori	r3,r2,1
 4010680:	30c00115 	stw	r3,4(r6)
 4010684:	3087883a 	add	r3,r6,r2
 4010688:	18800015 	stw	r2,0(r3)
 401068c:	00c07fc4 	movi	r3,511
 4010690:	18801936 	bltu	r3,r2,40106f8 <_free_r+0x10c>
 4010694:	1004d0fa 	srli	r2,r2,3
 4010698:	01c00044 	movi	r7,1
 401069c:	21400117 	ldw	r5,4(r4)
 40106a0:	10c00044 	addi	r3,r2,1
 40106a4:	18c7883a 	add	r3,r3,r3
 40106a8:	1005d0ba 	srai	r2,r2,2
 40106ac:	18c7883a 	add	r3,r3,r3
 40106b0:	18c7883a 	add	r3,r3,r3
 40106b4:	1907883a 	add	r3,r3,r4
 40106b8:	3884983a 	sll	r2,r7,r2
 40106bc:	19c00017 	ldw	r7,0(r3)
 40106c0:	1a3ffe04 	addi	r8,r3,-8
 40106c4:	1144b03a 	or	r2,r2,r5
 40106c8:	32000315 	stw	r8,12(r6)
 40106cc:	31c00215 	stw	r7,8(r6)
 40106d0:	20800115 	stw	r2,4(r4)
 40106d4:	19800015 	stw	r6,0(r3)
 40106d8:	39800315 	stw	r6,12(r7)
 40106dc:	8809883a 	mov	r4,r17
 40106e0:	dfc00217 	ldw	ra,8(sp)
 40106e4:	dc400117 	ldw	r17,4(sp)
 40106e8:	dc000017 	ldw	r16,0(sp)
 40106ec:	dec00304 	addi	sp,sp,12
 40106f0:	40187841 	jmpi	4018784 <__malloc_unlock>
 40106f4:	f800283a 	ret
 40106f8:	100ad27a 	srli	r5,r2,9
 40106fc:	00c00104 	movi	r3,4
 4010700:	19404a36 	bltu	r3,r5,401082c <_free_r+0x240>
 4010704:	100ad1ba 	srli	r5,r2,6
 4010708:	28c00e44 	addi	r3,r5,57
 401070c:	18c7883a 	add	r3,r3,r3
 4010710:	29400e04 	addi	r5,r5,56
 4010714:	18c7883a 	add	r3,r3,r3
 4010718:	18c7883a 	add	r3,r3,r3
 401071c:	1909883a 	add	r4,r3,r4
 4010720:	20c00017 	ldw	r3,0(r4)
 4010724:	01c100b4 	movhi	r7,1026
 4010728:	213ffe04 	addi	r4,r4,-8
 401072c:	39c89804 	addi	r7,r7,8800
 4010730:	20c04426 	beq	r4,r3,4010844 <_free_r+0x258>
 4010734:	01ffff04 	movi	r7,-4
 4010738:	19400117 	ldw	r5,4(r3)
 401073c:	29ca703a 	and	r5,r5,r7
 4010740:	1140022e 	bgeu	r2,r5,401074c <_free_r+0x160>
 4010744:	18c00217 	ldw	r3,8(r3)
 4010748:	20fffb1e 	bne	r4,r3,4010738 <__alt_data_end+0xfc010738>
 401074c:	19000317 	ldw	r4,12(r3)
 4010750:	31000315 	stw	r4,12(r6)
 4010754:	30c00215 	stw	r3,8(r6)
 4010758:	21800215 	stw	r6,8(r4)
 401075c:	19800315 	stw	r6,12(r3)
 4010760:	003fde06 	br	40106dc <__alt_data_end+0xfc0106dc>
 4010764:	29c00217 	ldw	r7,8(r5)
 4010768:	10c5883a 	add	r2,r2,r3
 401076c:	00c100b4 	movhi	r3,1026
 4010770:	18c89a04 	addi	r3,r3,8808
 4010774:	38c03b26 	beq	r7,r3,4010864 <_free_r+0x278>
 4010778:	2a000317 	ldw	r8,12(r5)
 401077c:	11400054 	ori	r5,r2,1
 4010780:	3087883a 	add	r3,r6,r2
 4010784:	3a000315 	stw	r8,12(r7)
 4010788:	41c00215 	stw	r7,8(r8)
 401078c:	31400115 	stw	r5,4(r6)
 4010790:	18800015 	stw	r2,0(r3)
 4010794:	003fbd06 	br	401068c <__alt_data_end+0xfc01068c>
 4010798:	39c0004c 	andi	r7,r7,1
 401079c:	10c5883a 	add	r2,r2,r3
 40107a0:	3800071e 	bne	r7,zero,40107c0 <_free_r+0x1d4>
 40107a4:	81fffe17 	ldw	r7,-8(r16)
 40107a8:	31cdc83a 	sub	r6,r6,r7
 40107ac:	30c00317 	ldw	r3,12(r6)
 40107b0:	31400217 	ldw	r5,8(r6)
 40107b4:	11c5883a 	add	r2,r2,r7
 40107b8:	28c00315 	stw	r3,12(r5)
 40107bc:	19400215 	stw	r5,8(r3)
 40107c0:	10c00054 	ori	r3,r2,1
 40107c4:	30c00115 	stw	r3,4(r6)
 40107c8:	00c100b4 	movhi	r3,1026
 40107cc:	18d3f504 	addi	r3,r3,20436
 40107d0:	18c00017 	ldw	r3,0(r3)
 40107d4:	21800215 	stw	r6,8(r4)
 40107d8:	10ffc036 	bltu	r2,r3,40106dc <__alt_data_end+0xfc0106dc>
 40107dc:	008100f4 	movhi	r2,1027
 40107e0:	10a08304 	addi	r2,r2,-32244
 40107e4:	11400017 	ldw	r5,0(r2)
 40107e8:	8809883a 	mov	r4,r17
 40107ec:	40104c80 	call	40104c8 <_malloc_trim_r>
 40107f0:	003fba06 	br	40106dc <__alt_data_end+0xfc0106dc>
 40107f4:	28c9883a 	add	r4,r5,r3
 40107f8:	21000117 	ldw	r4,4(r4)
 40107fc:	2100004c 	andi	r4,r4,1
 4010800:	2000391e 	bne	r4,zero,40108e8 <_free_r+0x2fc>
 4010804:	29c00217 	ldw	r7,8(r5)
 4010808:	29000317 	ldw	r4,12(r5)
 401080c:	1885883a 	add	r2,r3,r2
 4010810:	10c00054 	ori	r3,r2,1
 4010814:	39000315 	stw	r4,12(r7)
 4010818:	21c00215 	stw	r7,8(r4)
 401081c:	30c00115 	stw	r3,4(r6)
 4010820:	308d883a 	add	r6,r6,r2
 4010824:	30800015 	stw	r2,0(r6)
 4010828:	003fac06 	br	40106dc <__alt_data_end+0xfc0106dc>
 401082c:	00c00504 	movi	r3,20
 4010830:	19401536 	bltu	r3,r5,4010888 <_free_r+0x29c>
 4010834:	28c01704 	addi	r3,r5,92
 4010838:	18c7883a 	add	r3,r3,r3
 401083c:	294016c4 	addi	r5,r5,91
 4010840:	003fb406 	br	4010714 <__alt_data_end+0xfc010714>
 4010844:	280bd0ba 	srai	r5,r5,2
 4010848:	00c00044 	movi	r3,1
 401084c:	38800117 	ldw	r2,4(r7)
 4010850:	194a983a 	sll	r5,r3,r5
 4010854:	2007883a 	mov	r3,r4
 4010858:	2884b03a 	or	r2,r5,r2
 401085c:	38800115 	stw	r2,4(r7)
 4010860:	003fbb06 	br	4010750 <__alt_data_end+0xfc010750>
 4010864:	21800515 	stw	r6,20(r4)
 4010868:	21800415 	stw	r6,16(r4)
 401086c:	10c00054 	ori	r3,r2,1
 4010870:	31c00315 	stw	r7,12(r6)
 4010874:	31c00215 	stw	r7,8(r6)
 4010878:	30c00115 	stw	r3,4(r6)
 401087c:	308d883a 	add	r6,r6,r2
 4010880:	30800015 	stw	r2,0(r6)
 4010884:	003f9506 	br	40106dc <__alt_data_end+0xfc0106dc>
 4010888:	00c01504 	movi	r3,84
 401088c:	19400536 	bltu	r3,r5,40108a4 <_free_r+0x2b8>
 4010890:	100ad33a 	srli	r5,r2,12
 4010894:	28c01bc4 	addi	r3,r5,111
 4010898:	18c7883a 	add	r3,r3,r3
 401089c:	29401b84 	addi	r5,r5,110
 40108a0:	003f9c06 	br	4010714 <__alt_data_end+0xfc010714>
 40108a4:	00c05504 	movi	r3,340
 40108a8:	19400536 	bltu	r3,r5,40108c0 <_free_r+0x2d4>
 40108ac:	100ad3fa 	srli	r5,r2,15
 40108b0:	28c01e04 	addi	r3,r5,120
 40108b4:	18c7883a 	add	r3,r3,r3
 40108b8:	29401dc4 	addi	r5,r5,119
 40108bc:	003f9506 	br	4010714 <__alt_data_end+0xfc010714>
 40108c0:	00c15504 	movi	r3,1364
 40108c4:	19400536 	bltu	r3,r5,40108dc <_free_r+0x2f0>
 40108c8:	100ad4ba 	srli	r5,r2,18
 40108cc:	28c01f44 	addi	r3,r5,125
 40108d0:	18c7883a 	add	r3,r3,r3
 40108d4:	29401f04 	addi	r5,r5,124
 40108d8:	003f8e06 	br	4010714 <__alt_data_end+0xfc010714>
 40108dc:	00c03f84 	movi	r3,254
 40108e0:	01401f84 	movi	r5,126
 40108e4:	003f8b06 	br	4010714 <__alt_data_end+0xfc010714>
 40108e8:	10c00054 	ori	r3,r2,1
 40108ec:	30c00115 	stw	r3,4(r6)
 40108f0:	308d883a 	add	r6,r6,r2
 40108f4:	30800015 	stw	r2,0(r6)
 40108f8:	003f7806 	br	40106dc <__alt_data_end+0xfc0106dc>

040108fc <__sfvwrite_r>:
 40108fc:	30800217 	ldw	r2,8(r6)
 4010900:	10006726 	beq	r2,zero,4010aa0 <__sfvwrite_r+0x1a4>
 4010904:	28c0030b 	ldhu	r3,12(r5)
 4010908:	defff404 	addi	sp,sp,-48
 401090c:	dd400715 	stw	r21,28(sp)
 4010910:	dd000615 	stw	r20,24(sp)
 4010914:	dc000215 	stw	r16,8(sp)
 4010918:	dfc00b15 	stw	ra,44(sp)
 401091c:	df000a15 	stw	fp,40(sp)
 4010920:	ddc00915 	stw	r23,36(sp)
 4010924:	dd800815 	stw	r22,32(sp)
 4010928:	dcc00515 	stw	r19,20(sp)
 401092c:	dc800415 	stw	r18,16(sp)
 4010930:	dc400315 	stw	r17,12(sp)
 4010934:	1880020c 	andi	r2,r3,8
 4010938:	2821883a 	mov	r16,r5
 401093c:	202b883a 	mov	r21,r4
 4010940:	3029883a 	mov	r20,r6
 4010944:	10002726 	beq	r2,zero,40109e4 <__sfvwrite_r+0xe8>
 4010948:	28800417 	ldw	r2,16(r5)
 401094c:	10002526 	beq	r2,zero,40109e4 <__sfvwrite_r+0xe8>
 4010950:	1880008c 	andi	r2,r3,2
 4010954:	a4400017 	ldw	r17,0(r20)
 4010958:	10002a26 	beq	r2,zero,4010a04 <__sfvwrite_r+0x108>
 401095c:	05a00034 	movhi	r22,32768
 4010960:	0027883a 	mov	r19,zero
 4010964:	0025883a 	mov	r18,zero
 4010968:	b5bf0004 	addi	r22,r22,-1024
 401096c:	980d883a 	mov	r6,r19
 4010970:	a809883a 	mov	r4,r21
 4010974:	90004626 	beq	r18,zero,4010a90 <__sfvwrite_r+0x194>
 4010978:	900f883a 	mov	r7,r18
 401097c:	b480022e 	bgeu	r22,r18,4010988 <__sfvwrite_r+0x8c>
 4010980:	01e00034 	movhi	r7,32768
 4010984:	39ff0004 	addi	r7,r7,-1024
 4010988:	80800917 	ldw	r2,36(r16)
 401098c:	81400717 	ldw	r5,28(r16)
 4010990:	103ee83a 	callr	r2
 4010994:	00805a0e 	bge	zero,r2,4010b00 <__sfvwrite_r+0x204>
 4010998:	a0c00217 	ldw	r3,8(r20)
 401099c:	98a7883a 	add	r19,r19,r2
 40109a0:	90a5c83a 	sub	r18,r18,r2
 40109a4:	1885c83a 	sub	r2,r3,r2
 40109a8:	a0800215 	stw	r2,8(r20)
 40109ac:	103fef1e 	bne	r2,zero,401096c <__alt_data_end+0xfc01096c>
 40109b0:	0005883a 	mov	r2,zero
 40109b4:	dfc00b17 	ldw	ra,44(sp)
 40109b8:	df000a17 	ldw	fp,40(sp)
 40109bc:	ddc00917 	ldw	r23,36(sp)
 40109c0:	dd800817 	ldw	r22,32(sp)
 40109c4:	dd400717 	ldw	r21,28(sp)
 40109c8:	dd000617 	ldw	r20,24(sp)
 40109cc:	dcc00517 	ldw	r19,20(sp)
 40109d0:	dc800417 	ldw	r18,16(sp)
 40109d4:	dc400317 	ldw	r17,12(sp)
 40109d8:	dc000217 	ldw	r16,8(sp)
 40109dc:	dec00c04 	addi	sp,sp,48
 40109e0:	f800283a 	ret
 40109e4:	800b883a 	mov	r5,r16
 40109e8:	a809883a 	mov	r4,r21
 40109ec:	400e46c0 	call	400e46c <__swsetup_r>
 40109f0:	1000ee1e 	bne	r2,zero,4010dac <__sfvwrite_r+0x4b0>
 40109f4:	80c0030b 	ldhu	r3,12(r16)
 40109f8:	a4400017 	ldw	r17,0(r20)
 40109fc:	1880008c 	andi	r2,r3,2
 4010a00:	103fd61e 	bne	r2,zero,401095c <__alt_data_end+0xfc01095c>
 4010a04:	1880004c 	andi	r2,r3,1
 4010a08:	1000421e 	bne	r2,zero,4010b14 <__sfvwrite_r+0x218>
 4010a0c:	0039883a 	mov	fp,zero
 4010a10:	0025883a 	mov	r18,zero
 4010a14:	90001a26 	beq	r18,zero,4010a80 <__sfvwrite_r+0x184>
 4010a18:	1880800c 	andi	r2,r3,512
 4010a1c:	84c00217 	ldw	r19,8(r16)
 4010a20:	10002126 	beq	r2,zero,4010aa8 <__sfvwrite_r+0x1ac>
 4010a24:	982f883a 	mov	r23,r19
 4010a28:	94c09636 	bltu	r18,r19,4010c84 <__sfvwrite_r+0x388>
 4010a2c:	1881200c 	andi	r2,r3,1152
 4010a30:	1000a11e 	bne	r2,zero,4010cb8 <__sfvwrite_r+0x3bc>
 4010a34:	81000017 	ldw	r4,0(r16)
 4010a38:	b80d883a 	mov	r6,r23
 4010a3c:	e00b883a 	mov	r5,fp
 4010a40:	40112c80 	call	40112c8 <memmove>
 4010a44:	80c00217 	ldw	r3,8(r16)
 4010a48:	81000017 	ldw	r4,0(r16)
 4010a4c:	9005883a 	mov	r2,r18
 4010a50:	1ce7c83a 	sub	r19,r3,r19
 4010a54:	25cf883a 	add	r7,r4,r23
 4010a58:	84c00215 	stw	r19,8(r16)
 4010a5c:	81c00015 	stw	r7,0(r16)
 4010a60:	a0c00217 	ldw	r3,8(r20)
 4010a64:	e0b9883a 	add	fp,fp,r2
 4010a68:	90a5c83a 	sub	r18,r18,r2
 4010a6c:	18a7c83a 	sub	r19,r3,r2
 4010a70:	a4c00215 	stw	r19,8(r20)
 4010a74:	983fce26 	beq	r19,zero,40109b0 <__alt_data_end+0xfc0109b0>
 4010a78:	80c0030b 	ldhu	r3,12(r16)
 4010a7c:	903fe61e 	bne	r18,zero,4010a18 <__alt_data_end+0xfc010a18>
 4010a80:	8f000017 	ldw	fp,0(r17)
 4010a84:	8c800117 	ldw	r18,4(r17)
 4010a88:	8c400204 	addi	r17,r17,8
 4010a8c:	003fe106 	br	4010a14 <__alt_data_end+0xfc010a14>
 4010a90:	8cc00017 	ldw	r19,0(r17)
 4010a94:	8c800117 	ldw	r18,4(r17)
 4010a98:	8c400204 	addi	r17,r17,8
 4010a9c:	003fb306 	br	401096c <__alt_data_end+0xfc01096c>
 4010aa0:	0005883a 	mov	r2,zero
 4010aa4:	f800283a 	ret
 4010aa8:	81000017 	ldw	r4,0(r16)
 4010aac:	80800417 	ldw	r2,16(r16)
 4010ab0:	11005a36 	bltu	r2,r4,4010c1c <__sfvwrite_r+0x320>
 4010ab4:	85c00517 	ldw	r23,20(r16)
 4010ab8:	95c05836 	bltu	r18,r23,4010c1c <__sfvwrite_r+0x320>
 4010abc:	00a00034 	movhi	r2,32768
 4010ac0:	10bfffc4 	addi	r2,r2,-1
 4010ac4:	9009883a 	mov	r4,r18
 4010ac8:	1480012e 	bgeu	r2,r18,4010ad0 <__sfvwrite_r+0x1d4>
 4010acc:	1009883a 	mov	r4,r2
 4010ad0:	b80b883a 	mov	r5,r23
 4010ad4:	400a8800 	call	400a880 <__divsi3>
 4010ad8:	b80b883a 	mov	r5,r23
 4010adc:	1009883a 	mov	r4,r2
 4010ae0:	400aa340 	call	400aa34 <__mulsi3>
 4010ae4:	81400717 	ldw	r5,28(r16)
 4010ae8:	80c00917 	ldw	r3,36(r16)
 4010aec:	100f883a 	mov	r7,r2
 4010af0:	e00d883a 	mov	r6,fp
 4010af4:	a809883a 	mov	r4,r21
 4010af8:	183ee83a 	callr	r3
 4010afc:	00bfd816 	blt	zero,r2,4010a60 <__alt_data_end+0xfc010a60>
 4010b00:	8080030b 	ldhu	r2,12(r16)
 4010b04:	10801014 	ori	r2,r2,64
 4010b08:	8080030d 	sth	r2,12(r16)
 4010b0c:	00bfffc4 	movi	r2,-1
 4010b10:	003fa806 	br	40109b4 <__alt_data_end+0xfc0109b4>
 4010b14:	0027883a 	mov	r19,zero
 4010b18:	0011883a 	mov	r8,zero
 4010b1c:	0039883a 	mov	fp,zero
 4010b20:	0025883a 	mov	r18,zero
 4010b24:	90001f26 	beq	r18,zero,4010ba4 <__sfvwrite_r+0x2a8>
 4010b28:	40005a26 	beq	r8,zero,4010c94 <__sfvwrite_r+0x398>
 4010b2c:	982d883a 	mov	r22,r19
 4010b30:	94c0012e 	bgeu	r18,r19,4010b38 <__sfvwrite_r+0x23c>
 4010b34:	902d883a 	mov	r22,r18
 4010b38:	81000017 	ldw	r4,0(r16)
 4010b3c:	80800417 	ldw	r2,16(r16)
 4010b40:	b02f883a 	mov	r23,r22
 4010b44:	81c00517 	ldw	r7,20(r16)
 4010b48:	1100032e 	bgeu	r2,r4,4010b58 <__sfvwrite_r+0x25c>
 4010b4c:	80c00217 	ldw	r3,8(r16)
 4010b50:	38c7883a 	add	r3,r7,r3
 4010b54:	1d801816 	blt	r3,r22,4010bb8 <__sfvwrite_r+0x2bc>
 4010b58:	b1c03e16 	blt	r22,r7,4010c54 <__sfvwrite_r+0x358>
 4010b5c:	80800917 	ldw	r2,36(r16)
 4010b60:	81400717 	ldw	r5,28(r16)
 4010b64:	e00d883a 	mov	r6,fp
 4010b68:	da000115 	stw	r8,4(sp)
 4010b6c:	a809883a 	mov	r4,r21
 4010b70:	103ee83a 	callr	r2
 4010b74:	102f883a 	mov	r23,r2
 4010b78:	da000117 	ldw	r8,4(sp)
 4010b7c:	00bfe00e 	bge	zero,r2,4010b00 <__alt_data_end+0xfc010b00>
 4010b80:	9de7c83a 	sub	r19,r19,r23
 4010b84:	98001f26 	beq	r19,zero,4010c04 <__sfvwrite_r+0x308>
 4010b88:	a0800217 	ldw	r2,8(r20)
 4010b8c:	e5f9883a 	add	fp,fp,r23
 4010b90:	95e5c83a 	sub	r18,r18,r23
 4010b94:	15efc83a 	sub	r23,r2,r23
 4010b98:	a5c00215 	stw	r23,8(r20)
 4010b9c:	b83f8426 	beq	r23,zero,40109b0 <__alt_data_end+0xfc0109b0>
 4010ba0:	903fe11e 	bne	r18,zero,4010b28 <__alt_data_end+0xfc010b28>
 4010ba4:	8f000017 	ldw	fp,0(r17)
 4010ba8:	8c800117 	ldw	r18,4(r17)
 4010bac:	0011883a 	mov	r8,zero
 4010bb0:	8c400204 	addi	r17,r17,8
 4010bb4:	003fdb06 	br	4010b24 <__alt_data_end+0xfc010b24>
 4010bb8:	180d883a 	mov	r6,r3
 4010bbc:	e00b883a 	mov	r5,fp
 4010bc0:	da000115 	stw	r8,4(sp)
 4010bc4:	d8c00015 	stw	r3,0(sp)
 4010bc8:	40112c80 	call	40112c8 <memmove>
 4010bcc:	d8c00017 	ldw	r3,0(sp)
 4010bd0:	80800017 	ldw	r2,0(r16)
 4010bd4:	800b883a 	mov	r5,r16
 4010bd8:	a809883a 	mov	r4,r21
 4010bdc:	10c5883a 	add	r2,r2,r3
 4010be0:	80800015 	stw	r2,0(r16)
 4010be4:	d8c00015 	stw	r3,0(sp)
 4010be8:	401008c0 	call	401008c <_fflush_r>
 4010bec:	d8c00017 	ldw	r3,0(sp)
 4010bf0:	da000117 	ldw	r8,4(sp)
 4010bf4:	103fc21e 	bne	r2,zero,4010b00 <__alt_data_end+0xfc010b00>
 4010bf8:	182f883a 	mov	r23,r3
 4010bfc:	9de7c83a 	sub	r19,r19,r23
 4010c00:	983fe11e 	bne	r19,zero,4010b88 <__alt_data_end+0xfc010b88>
 4010c04:	800b883a 	mov	r5,r16
 4010c08:	a809883a 	mov	r4,r21
 4010c0c:	401008c0 	call	401008c <_fflush_r>
 4010c10:	103fbb1e 	bne	r2,zero,4010b00 <__alt_data_end+0xfc010b00>
 4010c14:	0011883a 	mov	r8,zero
 4010c18:	003fdb06 	br	4010b88 <__alt_data_end+0xfc010b88>
 4010c1c:	94c0012e 	bgeu	r18,r19,4010c24 <__sfvwrite_r+0x328>
 4010c20:	9027883a 	mov	r19,r18
 4010c24:	980d883a 	mov	r6,r19
 4010c28:	e00b883a 	mov	r5,fp
 4010c2c:	40112c80 	call	40112c8 <memmove>
 4010c30:	80800217 	ldw	r2,8(r16)
 4010c34:	80c00017 	ldw	r3,0(r16)
 4010c38:	14c5c83a 	sub	r2,r2,r19
 4010c3c:	1cc7883a 	add	r3,r3,r19
 4010c40:	80800215 	stw	r2,8(r16)
 4010c44:	80c00015 	stw	r3,0(r16)
 4010c48:	10004326 	beq	r2,zero,4010d58 <__sfvwrite_r+0x45c>
 4010c4c:	9805883a 	mov	r2,r19
 4010c50:	003f8306 	br	4010a60 <__alt_data_end+0xfc010a60>
 4010c54:	b00d883a 	mov	r6,r22
 4010c58:	e00b883a 	mov	r5,fp
 4010c5c:	da000115 	stw	r8,4(sp)
 4010c60:	40112c80 	call	40112c8 <memmove>
 4010c64:	80800217 	ldw	r2,8(r16)
 4010c68:	80c00017 	ldw	r3,0(r16)
 4010c6c:	da000117 	ldw	r8,4(sp)
 4010c70:	1585c83a 	sub	r2,r2,r22
 4010c74:	1dad883a 	add	r22,r3,r22
 4010c78:	80800215 	stw	r2,8(r16)
 4010c7c:	85800015 	stw	r22,0(r16)
 4010c80:	003fbf06 	br	4010b80 <__alt_data_end+0xfc010b80>
 4010c84:	81000017 	ldw	r4,0(r16)
 4010c88:	9027883a 	mov	r19,r18
 4010c8c:	902f883a 	mov	r23,r18
 4010c90:	003f6906 	br	4010a38 <__alt_data_end+0xfc010a38>
 4010c94:	900d883a 	mov	r6,r18
 4010c98:	01400284 	movi	r5,10
 4010c9c:	e009883a 	mov	r4,fp
 4010ca0:	40111e40 	call	40111e4 <memchr>
 4010ca4:	10003e26 	beq	r2,zero,4010da0 <__sfvwrite_r+0x4a4>
 4010ca8:	10800044 	addi	r2,r2,1
 4010cac:	1727c83a 	sub	r19,r2,fp
 4010cb0:	02000044 	movi	r8,1
 4010cb4:	003f9d06 	br	4010b2c <__alt_data_end+0xfc010b2c>
 4010cb8:	80800517 	ldw	r2,20(r16)
 4010cbc:	81400417 	ldw	r5,16(r16)
 4010cc0:	81c00017 	ldw	r7,0(r16)
 4010cc4:	10a7883a 	add	r19,r2,r2
 4010cc8:	9885883a 	add	r2,r19,r2
 4010ccc:	1026d7fa 	srli	r19,r2,31
 4010cd0:	396dc83a 	sub	r22,r7,r5
 4010cd4:	b1000044 	addi	r4,r22,1
 4010cd8:	9885883a 	add	r2,r19,r2
 4010cdc:	1027d07a 	srai	r19,r2,1
 4010ce0:	2485883a 	add	r2,r4,r18
 4010ce4:	980d883a 	mov	r6,r19
 4010ce8:	9880022e 	bgeu	r19,r2,4010cf4 <__sfvwrite_r+0x3f8>
 4010cec:	1027883a 	mov	r19,r2
 4010cf0:	100d883a 	mov	r6,r2
 4010cf4:	18c1000c 	andi	r3,r3,1024
 4010cf8:	18001c26 	beq	r3,zero,4010d6c <__sfvwrite_r+0x470>
 4010cfc:	300b883a 	mov	r5,r6
 4010d00:	a809883a 	mov	r4,r21
 4010d04:	400b0080 	call	400b008 <_malloc_r>
 4010d08:	102f883a 	mov	r23,r2
 4010d0c:	10002926 	beq	r2,zero,4010db4 <__sfvwrite_r+0x4b8>
 4010d10:	81400417 	ldw	r5,16(r16)
 4010d14:	b00d883a 	mov	r6,r22
 4010d18:	1009883a 	mov	r4,r2
 4010d1c:	400b8140 	call	400b814 <memcpy>
 4010d20:	8080030b 	ldhu	r2,12(r16)
 4010d24:	00fedfc4 	movi	r3,-1153
 4010d28:	10c4703a 	and	r2,r2,r3
 4010d2c:	10802014 	ori	r2,r2,128
 4010d30:	8080030d 	sth	r2,12(r16)
 4010d34:	bd89883a 	add	r4,r23,r22
 4010d38:	9d8fc83a 	sub	r7,r19,r22
 4010d3c:	85c00415 	stw	r23,16(r16)
 4010d40:	84c00515 	stw	r19,20(r16)
 4010d44:	81000015 	stw	r4,0(r16)
 4010d48:	9027883a 	mov	r19,r18
 4010d4c:	81c00215 	stw	r7,8(r16)
 4010d50:	902f883a 	mov	r23,r18
 4010d54:	003f3806 	br	4010a38 <__alt_data_end+0xfc010a38>
 4010d58:	800b883a 	mov	r5,r16
 4010d5c:	a809883a 	mov	r4,r21
 4010d60:	401008c0 	call	401008c <_fflush_r>
 4010d64:	103fb926 	beq	r2,zero,4010c4c <__alt_data_end+0xfc010c4c>
 4010d68:	003f6506 	br	4010b00 <__alt_data_end+0xfc010b00>
 4010d6c:	a809883a 	mov	r4,r21
 4010d70:	40126440 	call	4012644 <_realloc_r>
 4010d74:	102f883a 	mov	r23,r2
 4010d78:	103fee1e 	bne	r2,zero,4010d34 <__alt_data_end+0xfc010d34>
 4010d7c:	81400417 	ldw	r5,16(r16)
 4010d80:	a809883a 	mov	r4,r21
 4010d84:	40105ec0 	call	40105ec <_free_r>
 4010d88:	8080030b 	ldhu	r2,12(r16)
 4010d8c:	00ffdfc4 	movi	r3,-129
 4010d90:	1884703a 	and	r2,r3,r2
 4010d94:	00c00304 	movi	r3,12
 4010d98:	a8c00015 	stw	r3,0(r21)
 4010d9c:	003f5906 	br	4010b04 <__alt_data_end+0xfc010b04>
 4010da0:	94c00044 	addi	r19,r18,1
 4010da4:	02000044 	movi	r8,1
 4010da8:	003f6006 	br	4010b2c <__alt_data_end+0xfc010b2c>
 4010dac:	00bfffc4 	movi	r2,-1
 4010db0:	003f0006 	br	40109b4 <__alt_data_end+0xfc0109b4>
 4010db4:	00800304 	movi	r2,12
 4010db8:	a8800015 	stw	r2,0(r21)
 4010dbc:	8080030b 	ldhu	r2,12(r16)
 4010dc0:	003f5006 	br	4010b04 <__alt_data_end+0xfc010b04>

04010dc4 <_fwalk>:
 4010dc4:	defff704 	addi	sp,sp,-36
 4010dc8:	dd000415 	stw	r20,16(sp)
 4010dcc:	dfc00815 	stw	ra,32(sp)
 4010dd0:	ddc00715 	stw	r23,28(sp)
 4010dd4:	dd800615 	stw	r22,24(sp)
 4010dd8:	dd400515 	stw	r21,20(sp)
 4010ddc:	dcc00315 	stw	r19,12(sp)
 4010de0:	dc800215 	stw	r18,8(sp)
 4010de4:	dc400115 	stw	r17,4(sp)
 4010de8:	dc000015 	stw	r16,0(sp)
 4010dec:	2500b804 	addi	r20,r4,736
 4010df0:	a0002326 	beq	r20,zero,4010e80 <_fwalk+0xbc>
 4010df4:	282b883a 	mov	r21,r5
 4010df8:	002f883a 	mov	r23,zero
 4010dfc:	05800044 	movi	r22,1
 4010e00:	04ffffc4 	movi	r19,-1
 4010e04:	a4400117 	ldw	r17,4(r20)
 4010e08:	a4800217 	ldw	r18,8(r20)
 4010e0c:	8c7fffc4 	addi	r17,r17,-1
 4010e10:	88000d16 	blt	r17,zero,4010e48 <_fwalk+0x84>
 4010e14:	94000304 	addi	r16,r18,12
 4010e18:	94800384 	addi	r18,r18,14
 4010e1c:	8080000b 	ldhu	r2,0(r16)
 4010e20:	8c7fffc4 	addi	r17,r17,-1
 4010e24:	813ffd04 	addi	r4,r16,-12
 4010e28:	b080042e 	bgeu	r22,r2,4010e3c <_fwalk+0x78>
 4010e2c:	9080000f 	ldh	r2,0(r18)
 4010e30:	14c00226 	beq	r2,r19,4010e3c <_fwalk+0x78>
 4010e34:	a83ee83a 	callr	r21
 4010e38:	b8aeb03a 	or	r23,r23,r2
 4010e3c:	84001a04 	addi	r16,r16,104
 4010e40:	94801a04 	addi	r18,r18,104
 4010e44:	8cfff51e 	bne	r17,r19,4010e1c <__alt_data_end+0xfc010e1c>
 4010e48:	a5000017 	ldw	r20,0(r20)
 4010e4c:	a03fed1e 	bne	r20,zero,4010e04 <__alt_data_end+0xfc010e04>
 4010e50:	b805883a 	mov	r2,r23
 4010e54:	dfc00817 	ldw	ra,32(sp)
 4010e58:	ddc00717 	ldw	r23,28(sp)
 4010e5c:	dd800617 	ldw	r22,24(sp)
 4010e60:	dd400517 	ldw	r21,20(sp)
 4010e64:	dd000417 	ldw	r20,16(sp)
 4010e68:	dcc00317 	ldw	r19,12(sp)
 4010e6c:	dc800217 	ldw	r18,8(sp)
 4010e70:	dc400117 	ldw	r17,4(sp)
 4010e74:	dc000017 	ldw	r16,0(sp)
 4010e78:	dec00904 	addi	sp,sp,36
 4010e7c:	f800283a 	ret
 4010e80:	002f883a 	mov	r23,zero
 4010e84:	003ff206 	br	4010e50 <__alt_data_end+0xfc010e50>

04010e88 <_fwalk_reent>:
 4010e88:	defff704 	addi	sp,sp,-36
 4010e8c:	dd000415 	stw	r20,16(sp)
 4010e90:	dfc00815 	stw	ra,32(sp)
 4010e94:	ddc00715 	stw	r23,28(sp)
 4010e98:	dd800615 	stw	r22,24(sp)
 4010e9c:	dd400515 	stw	r21,20(sp)
 4010ea0:	dcc00315 	stw	r19,12(sp)
 4010ea4:	dc800215 	stw	r18,8(sp)
 4010ea8:	dc400115 	stw	r17,4(sp)
 4010eac:	dc000015 	stw	r16,0(sp)
 4010eb0:	2500b804 	addi	r20,r4,736
 4010eb4:	a0002326 	beq	r20,zero,4010f44 <_fwalk_reent+0xbc>
 4010eb8:	282b883a 	mov	r21,r5
 4010ebc:	2027883a 	mov	r19,r4
 4010ec0:	002f883a 	mov	r23,zero
 4010ec4:	05800044 	movi	r22,1
 4010ec8:	04bfffc4 	movi	r18,-1
 4010ecc:	a4400117 	ldw	r17,4(r20)
 4010ed0:	a4000217 	ldw	r16,8(r20)
 4010ed4:	8c7fffc4 	addi	r17,r17,-1
 4010ed8:	88000c16 	blt	r17,zero,4010f0c <_fwalk_reent+0x84>
 4010edc:	84000304 	addi	r16,r16,12
 4010ee0:	8080000b 	ldhu	r2,0(r16)
 4010ee4:	8c7fffc4 	addi	r17,r17,-1
 4010ee8:	817ffd04 	addi	r5,r16,-12
 4010eec:	b080052e 	bgeu	r22,r2,4010f04 <_fwalk_reent+0x7c>
 4010ef0:	8080008f 	ldh	r2,2(r16)
 4010ef4:	9809883a 	mov	r4,r19
 4010ef8:	14800226 	beq	r2,r18,4010f04 <_fwalk_reent+0x7c>
 4010efc:	a83ee83a 	callr	r21
 4010f00:	b8aeb03a 	or	r23,r23,r2
 4010f04:	84001a04 	addi	r16,r16,104
 4010f08:	8cbff51e 	bne	r17,r18,4010ee0 <__alt_data_end+0xfc010ee0>
 4010f0c:	a5000017 	ldw	r20,0(r20)
 4010f10:	a03fee1e 	bne	r20,zero,4010ecc <__alt_data_end+0xfc010ecc>
 4010f14:	b805883a 	mov	r2,r23
 4010f18:	dfc00817 	ldw	ra,32(sp)
 4010f1c:	ddc00717 	ldw	r23,28(sp)
 4010f20:	dd800617 	ldw	r22,24(sp)
 4010f24:	dd400517 	ldw	r21,20(sp)
 4010f28:	dd000417 	ldw	r20,16(sp)
 4010f2c:	dcc00317 	ldw	r19,12(sp)
 4010f30:	dc800217 	ldw	r18,8(sp)
 4010f34:	dc400117 	ldw	r17,4(sp)
 4010f38:	dc000017 	ldw	r16,0(sp)
 4010f3c:	dec00904 	addi	sp,sp,36
 4010f40:	f800283a 	ret
 4010f44:	002f883a 	mov	r23,zero
 4010f48:	003ff206 	br	4010f14 <__alt_data_end+0xfc010f14>

04010f4c <_setlocale_r>:
 4010f4c:	30001b26 	beq	r6,zero,4010fbc <_setlocale_r+0x70>
 4010f50:	014100b4 	movhi	r5,1026
 4010f54:	defffe04 	addi	sp,sp,-8
 4010f58:	2946f104 	addi	r5,r5,7108
 4010f5c:	3009883a 	mov	r4,r6
 4010f60:	dc000015 	stw	r16,0(sp)
 4010f64:	dfc00115 	stw	ra,4(sp)
 4010f68:	3021883a 	mov	r16,r6
 4010f6c:	400bf3c0 	call	400bf3c <strcmp>
 4010f70:	1000061e 	bne	r2,zero,4010f8c <_setlocale_r+0x40>
 4010f74:	008100b4 	movhi	r2,1026
 4010f78:	1086d204 	addi	r2,r2,6984
 4010f7c:	dfc00117 	ldw	ra,4(sp)
 4010f80:	dc000017 	ldw	r16,0(sp)
 4010f84:	dec00204 	addi	sp,sp,8
 4010f88:	f800283a 	ret
 4010f8c:	014100b4 	movhi	r5,1026
 4010f90:	2946d204 	addi	r5,r5,6984
 4010f94:	8009883a 	mov	r4,r16
 4010f98:	400bf3c0 	call	400bf3c <strcmp>
 4010f9c:	103ff526 	beq	r2,zero,4010f74 <__alt_data_end+0xfc010f74>
 4010fa0:	014100b4 	movhi	r5,1026
 4010fa4:	2946dc04 	addi	r5,r5,7024
 4010fa8:	8009883a 	mov	r4,r16
 4010fac:	400bf3c0 	call	400bf3c <strcmp>
 4010fb0:	103ff026 	beq	r2,zero,4010f74 <__alt_data_end+0xfc010f74>
 4010fb4:	0005883a 	mov	r2,zero
 4010fb8:	003ff006 	br	4010f7c <__alt_data_end+0xfc010f7c>
 4010fbc:	008100b4 	movhi	r2,1026
 4010fc0:	1086d204 	addi	r2,r2,6984
 4010fc4:	f800283a 	ret

04010fc8 <__locale_charset>:
 4010fc8:	008100b4 	movhi	r2,1026
 4010fcc:	1089a204 	addi	r2,r2,9864
 4010fd0:	f800283a 	ret

04010fd4 <__locale_mb_cur_max>:
 4010fd4:	008100b4 	movhi	r2,1026
 4010fd8:	1093f604 	addi	r2,r2,20440
 4010fdc:	10800017 	ldw	r2,0(r2)
 4010fe0:	f800283a 	ret

04010fe4 <__locale_msgcharset>:
 4010fe4:	008100b4 	movhi	r2,1026
 4010fe8:	10899a04 	addi	r2,r2,9832
 4010fec:	f800283a 	ret

04010ff0 <__locale_cjk_lang>:
 4010ff0:	0005883a 	mov	r2,zero
 4010ff4:	f800283a 	ret

04010ff8 <_localeconv_r>:
 4010ff8:	008100b4 	movhi	r2,1026
 4010ffc:	1089aa04 	addi	r2,r2,9896
 4011000:	f800283a 	ret

04011004 <setlocale>:
 4011004:	008100b4 	movhi	r2,1026
 4011008:	1093f304 	addi	r2,r2,20428
 401100c:	280d883a 	mov	r6,r5
 4011010:	200b883a 	mov	r5,r4
 4011014:	11000017 	ldw	r4,0(r2)
 4011018:	4010f4c1 	jmpi	4010f4c <_setlocale_r>

0401101c <localeconv>:
 401101c:	008100b4 	movhi	r2,1026
 4011020:	1089aa04 	addi	r2,r2,9896
 4011024:	f800283a 	ret

04011028 <__smakebuf_r>:
 4011028:	2880030b 	ldhu	r2,12(r5)
 401102c:	10c0008c 	andi	r3,r2,2
 4011030:	1800411e 	bne	r3,zero,4011138 <__smakebuf_r+0x110>
 4011034:	deffec04 	addi	sp,sp,-80
 4011038:	dc000f15 	stw	r16,60(sp)
 401103c:	2821883a 	mov	r16,r5
 4011040:	2940038f 	ldh	r5,14(r5)
 4011044:	dc401015 	stw	r17,64(sp)
 4011048:	dfc01315 	stw	ra,76(sp)
 401104c:	dcc01215 	stw	r19,72(sp)
 4011050:	dc801115 	stw	r18,68(sp)
 4011054:	2023883a 	mov	r17,r4
 4011058:	28001c16 	blt	r5,zero,40110cc <__smakebuf_r+0xa4>
 401105c:	d80d883a 	mov	r6,sp
 4011060:	4014a440 	call	4014a44 <_fstat_r>
 4011064:	10001816 	blt	r2,zero,40110c8 <__smakebuf_r+0xa0>
 4011068:	d8800117 	ldw	r2,4(sp)
 401106c:	00e00014 	movui	r3,32768
 4011070:	10bc000c 	andi	r2,r2,61440
 4011074:	14c80020 	cmpeqi	r19,r2,8192
 4011078:	10c03726 	beq	r2,r3,4011158 <__smakebuf_r+0x130>
 401107c:	80c0030b 	ldhu	r3,12(r16)
 4011080:	18c20014 	ori	r3,r3,2048
 4011084:	80c0030d 	sth	r3,12(r16)
 4011088:	00c80004 	movi	r3,8192
 401108c:	10c0521e 	bne	r2,r3,40111d8 <__smakebuf_r+0x1b0>
 4011090:	8140038f 	ldh	r5,14(r16)
 4011094:	8809883a 	mov	r4,r17
 4011098:	4014aa00 	call	4014aa0 <_isatty_r>
 401109c:	10004c26 	beq	r2,zero,40111d0 <__smakebuf_r+0x1a8>
 40110a0:	8080030b 	ldhu	r2,12(r16)
 40110a4:	80c010c4 	addi	r3,r16,67
 40110a8:	80c00015 	stw	r3,0(r16)
 40110ac:	10800054 	ori	r2,r2,1
 40110b0:	8080030d 	sth	r2,12(r16)
 40110b4:	00800044 	movi	r2,1
 40110b8:	80c00415 	stw	r3,16(r16)
 40110bc:	80800515 	stw	r2,20(r16)
 40110c0:	04810004 	movi	r18,1024
 40110c4:	00000706 	br	40110e4 <__smakebuf_r+0xbc>
 40110c8:	8080030b 	ldhu	r2,12(r16)
 40110cc:	10c0200c 	andi	r3,r2,128
 40110d0:	18001f1e 	bne	r3,zero,4011150 <__smakebuf_r+0x128>
 40110d4:	04810004 	movi	r18,1024
 40110d8:	10820014 	ori	r2,r2,2048
 40110dc:	8080030d 	sth	r2,12(r16)
 40110e0:	0027883a 	mov	r19,zero
 40110e4:	900b883a 	mov	r5,r18
 40110e8:	8809883a 	mov	r4,r17
 40110ec:	400b0080 	call	400b008 <_malloc_r>
 40110f0:	10002c26 	beq	r2,zero,40111a4 <__smakebuf_r+0x17c>
 40110f4:	80c0030b 	ldhu	r3,12(r16)
 40110f8:	01010074 	movhi	r4,1025
 40110fc:	21004804 	addi	r4,r4,288
 4011100:	89000f15 	stw	r4,60(r17)
 4011104:	18c02014 	ori	r3,r3,128
 4011108:	80c0030d 	sth	r3,12(r16)
 401110c:	80800015 	stw	r2,0(r16)
 4011110:	80800415 	stw	r2,16(r16)
 4011114:	84800515 	stw	r18,20(r16)
 4011118:	98001a1e 	bne	r19,zero,4011184 <__smakebuf_r+0x15c>
 401111c:	dfc01317 	ldw	ra,76(sp)
 4011120:	dcc01217 	ldw	r19,72(sp)
 4011124:	dc801117 	ldw	r18,68(sp)
 4011128:	dc401017 	ldw	r17,64(sp)
 401112c:	dc000f17 	ldw	r16,60(sp)
 4011130:	dec01404 	addi	sp,sp,80
 4011134:	f800283a 	ret
 4011138:	288010c4 	addi	r2,r5,67
 401113c:	28800015 	stw	r2,0(r5)
 4011140:	28800415 	stw	r2,16(r5)
 4011144:	00800044 	movi	r2,1
 4011148:	28800515 	stw	r2,20(r5)
 401114c:	f800283a 	ret
 4011150:	04801004 	movi	r18,64
 4011154:	003fe006 	br	40110d8 <__alt_data_end+0xfc0110d8>
 4011158:	81000a17 	ldw	r4,40(r16)
 401115c:	00c10074 	movhi	r3,1025
 4011160:	18cb3d04 	addi	r3,r3,11508
 4011164:	20ffc51e 	bne	r4,r3,401107c <__alt_data_end+0xfc01107c>
 4011168:	8080030b 	ldhu	r2,12(r16)
 401116c:	04810004 	movi	r18,1024
 4011170:	84801315 	stw	r18,76(r16)
 4011174:	1484b03a 	or	r2,r2,r18
 4011178:	8080030d 	sth	r2,12(r16)
 401117c:	0027883a 	mov	r19,zero
 4011180:	003fd806 	br	40110e4 <__alt_data_end+0xfc0110e4>
 4011184:	8140038f 	ldh	r5,14(r16)
 4011188:	8809883a 	mov	r4,r17
 401118c:	4014aa00 	call	4014aa0 <_isatty_r>
 4011190:	103fe226 	beq	r2,zero,401111c <__alt_data_end+0xfc01111c>
 4011194:	8080030b 	ldhu	r2,12(r16)
 4011198:	10800054 	ori	r2,r2,1
 401119c:	8080030d 	sth	r2,12(r16)
 40111a0:	003fde06 	br	401111c <__alt_data_end+0xfc01111c>
 40111a4:	8080030b 	ldhu	r2,12(r16)
 40111a8:	10c0800c 	andi	r3,r2,512
 40111ac:	183fdb1e 	bne	r3,zero,401111c <__alt_data_end+0xfc01111c>
 40111b0:	10800094 	ori	r2,r2,2
 40111b4:	80c010c4 	addi	r3,r16,67
 40111b8:	8080030d 	sth	r2,12(r16)
 40111bc:	00800044 	movi	r2,1
 40111c0:	80c00015 	stw	r3,0(r16)
 40111c4:	80c00415 	stw	r3,16(r16)
 40111c8:	80800515 	stw	r2,20(r16)
 40111cc:	003fd306 	br	401111c <__alt_data_end+0xfc01111c>
 40111d0:	04810004 	movi	r18,1024
 40111d4:	003fc306 	br	40110e4 <__alt_data_end+0xfc0110e4>
 40111d8:	0027883a 	mov	r19,zero
 40111dc:	04810004 	movi	r18,1024
 40111e0:	003fc006 	br	40110e4 <__alt_data_end+0xfc0110e4>

040111e4 <memchr>:
 40111e4:	208000cc 	andi	r2,r4,3
 40111e8:	280f883a 	mov	r7,r5
 40111ec:	10003426 	beq	r2,zero,40112c0 <memchr+0xdc>
 40111f0:	30bfffc4 	addi	r2,r6,-1
 40111f4:	30001a26 	beq	r6,zero,4011260 <memchr+0x7c>
 40111f8:	20c00003 	ldbu	r3,0(r4)
 40111fc:	29803fcc 	andi	r6,r5,255
 4011200:	30c0051e 	bne	r6,r3,4011218 <memchr+0x34>
 4011204:	00001806 	br	4011268 <memchr+0x84>
 4011208:	10001526 	beq	r2,zero,4011260 <memchr+0x7c>
 401120c:	20c00003 	ldbu	r3,0(r4)
 4011210:	10bfffc4 	addi	r2,r2,-1
 4011214:	30c01426 	beq	r6,r3,4011268 <memchr+0x84>
 4011218:	21000044 	addi	r4,r4,1
 401121c:	20c000cc 	andi	r3,r4,3
 4011220:	183ff91e 	bne	r3,zero,4011208 <__alt_data_end+0xfc011208>
 4011224:	020000c4 	movi	r8,3
 4011228:	40801136 	bltu	r8,r2,4011270 <memchr+0x8c>
 401122c:	10000c26 	beq	r2,zero,4011260 <memchr+0x7c>
 4011230:	20c00003 	ldbu	r3,0(r4)
 4011234:	29403fcc 	andi	r5,r5,255
 4011238:	28c00b26 	beq	r5,r3,4011268 <memchr+0x84>
 401123c:	20c00044 	addi	r3,r4,1
 4011240:	39803fcc 	andi	r6,r7,255
 4011244:	2089883a 	add	r4,r4,r2
 4011248:	00000306 	br	4011258 <memchr+0x74>
 401124c:	18c00044 	addi	r3,r3,1
 4011250:	197fffc3 	ldbu	r5,-1(r3)
 4011254:	31400526 	beq	r6,r5,401126c <memchr+0x88>
 4011258:	1805883a 	mov	r2,r3
 401125c:	20fffb1e 	bne	r4,r3,401124c <__alt_data_end+0xfc01124c>
 4011260:	0005883a 	mov	r2,zero
 4011264:	f800283a 	ret
 4011268:	2005883a 	mov	r2,r4
 401126c:	f800283a 	ret
 4011270:	28c03fcc 	andi	r3,r5,255
 4011274:	1812923a 	slli	r9,r3,8
 4011278:	02ffbff4 	movhi	r11,65279
 401127c:	02a02074 	movhi	r10,32897
 4011280:	48d2b03a 	or	r9,r9,r3
 4011284:	4806943a 	slli	r3,r9,16
 4011288:	5affbfc4 	addi	r11,r11,-257
 401128c:	52a02004 	addi	r10,r10,-32640
 4011290:	48d2b03a 	or	r9,r9,r3
 4011294:	20c00017 	ldw	r3,0(r4)
 4011298:	48c6f03a 	xor	r3,r9,r3
 401129c:	1acd883a 	add	r6,r3,r11
 40112a0:	00c6303a 	nor	r3,zero,r3
 40112a4:	30c6703a 	and	r3,r6,r3
 40112a8:	1a86703a 	and	r3,r3,r10
 40112ac:	183fe01e 	bne	r3,zero,4011230 <__alt_data_end+0xfc011230>
 40112b0:	10bfff04 	addi	r2,r2,-4
 40112b4:	21000104 	addi	r4,r4,4
 40112b8:	40bff636 	bltu	r8,r2,4011294 <__alt_data_end+0xfc011294>
 40112bc:	003fdb06 	br	401122c <__alt_data_end+0xfc01122c>
 40112c0:	3005883a 	mov	r2,r6
 40112c4:	003fd706 	br	4011224 <__alt_data_end+0xfc011224>

040112c8 <memmove>:
 40112c8:	2005883a 	mov	r2,r4
 40112cc:	29000b2e 	bgeu	r5,r4,40112fc <memmove+0x34>
 40112d0:	298f883a 	add	r7,r5,r6
 40112d4:	21c0092e 	bgeu	r4,r7,40112fc <memmove+0x34>
 40112d8:	2187883a 	add	r3,r4,r6
 40112dc:	198bc83a 	sub	r5,r3,r6
 40112e0:	30004826 	beq	r6,zero,4011404 <memmove+0x13c>
 40112e4:	39ffffc4 	addi	r7,r7,-1
 40112e8:	39000003 	ldbu	r4,0(r7)
 40112ec:	18ffffc4 	addi	r3,r3,-1
 40112f0:	19000005 	stb	r4,0(r3)
 40112f4:	28fffb1e 	bne	r5,r3,40112e4 <__alt_data_end+0xfc0112e4>
 40112f8:	f800283a 	ret
 40112fc:	00c003c4 	movi	r3,15
 4011300:	1980412e 	bgeu	r3,r6,4011408 <memmove+0x140>
 4011304:	2886b03a 	or	r3,r5,r2
 4011308:	18c000cc 	andi	r3,r3,3
 401130c:	1800401e 	bne	r3,zero,4011410 <memmove+0x148>
 4011310:	33fffc04 	addi	r15,r6,-16
 4011314:	781ed13a 	srli	r15,r15,4
 4011318:	28c00104 	addi	r3,r5,4
 401131c:	13400104 	addi	r13,r2,4
 4011320:	781c913a 	slli	r14,r15,4
 4011324:	2b000204 	addi	r12,r5,8
 4011328:	12c00204 	addi	r11,r2,8
 401132c:	73800504 	addi	r14,r14,20
 4011330:	2a800304 	addi	r10,r5,12
 4011334:	12400304 	addi	r9,r2,12
 4011338:	2b9d883a 	add	r14,r5,r14
 401133c:	2811883a 	mov	r8,r5
 4011340:	100f883a 	mov	r7,r2
 4011344:	41000017 	ldw	r4,0(r8)
 4011348:	39c00404 	addi	r7,r7,16
 401134c:	18c00404 	addi	r3,r3,16
 4011350:	393ffc15 	stw	r4,-16(r7)
 4011354:	193ffc17 	ldw	r4,-16(r3)
 4011358:	6b400404 	addi	r13,r13,16
 401135c:	5ac00404 	addi	r11,r11,16
 4011360:	693ffc15 	stw	r4,-16(r13)
 4011364:	61000017 	ldw	r4,0(r12)
 4011368:	4a400404 	addi	r9,r9,16
 401136c:	42000404 	addi	r8,r8,16
 4011370:	593ffc15 	stw	r4,-16(r11)
 4011374:	51000017 	ldw	r4,0(r10)
 4011378:	63000404 	addi	r12,r12,16
 401137c:	52800404 	addi	r10,r10,16
 4011380:	493ffc15 	stw	r4,-16(r9)
 4011384:	1bbfef1e 	bne	r3,r14,4011344 <__alt_data_end+0xfc011344>
 4011388:	79000044 	addi	r4,r15,1
 401138c:	2008913a 	slli	r4,r4,4
 4011390:	328003cc 	andi	r10,r6,15
 4011394:	02c000c4 	movi	r11,3
 4011398:	1107883a 	add	r3,r2,r4
 401139c:	290b883a 	add	r5,r5,r4
 40113a0:	5a801e2e 	bgeu	r11,r10,401141c <memmove+0x154>
 40113a4:	1813883a 	mov	r9,r3
 40113a8:	2811883a 	mov	r8,r5
 40113ac:	500f883a 	mov	r7,r10
 40113b0:	41000017 	ldw	r4,0(r8)
 40113b4:	4a400104 	addi	r9,r9,4
 40113b8:	39ffff04 	addi	r7,r7,-4
 40113bc:	493fff15 	stw	r4,-4(r9)
 40113c0:	42000104 	addi	r8,r8,4
 40113c4:	59fffa36 	bltu	r11,r7,40113b0 <__alt_data_end+0xfc0113b0>
 40113c8:	513fff04 	addi	r4,r10,-4
 40113cc:	2008d0ba 	srli	r4,r4,2
 40113d0:	318000cc 	andi	r6,r6,3
 40113d4:	21000044 	addi	r4,r4,1
 40113d8:	2109883a 	add	r4,r4,r4
 40113dc:	2109883a 	add	r4,r4,r4
 40113e0:	1907883a 	add	r3,r3,r4
 40113e4:	290b883a 	add	r5,r5,r4
 40113e8:	30000b26 	beq	r6,zero,4011418 <memmove+0x150>
 40113ec:	198d883a 	add	r6,r3,r6
 40113f0:	29c00003 	ldbu	r7,0(r5)
 40113f4:	18c00044 	addi	r3,r3,1
 40113f8:	29400044 	addi	r5,r5,1
 40113fc:	19ffffc5 	stb	r7,-1(r3)
 4011400:	19bffb1e 	bne	r3,r6,40113f0 <__alt_data_end+0xfc0113f0>
 4011404:	f800283a 	ret
 4011408:	1007883a 	mov	r3,r2
 401140c:	003ff606 	br	40113e8 <__alt_data_end+0xfc0113e8>
 4011410:	1007883a 	mov	r3,r2
 4011414:	003ff506 	br	40113ec <__alt_data_end+0xfc0113ec>
 4011418:	f800283a 	ret
 401141c:	500d883a 	mov	r6,r10
 4011420:	003ff106 	br	40113e8 <__alt_data_end+0xfc0113e8>

04011424 <_Balloc>:
 4011424:	20801317 	ldw	r2,76(r4)
 4011428:	defffc04 	addi	sp,sp,-16
 401142c:	dc400115 	stw	r17,4(sp)
 4011430:	dc000015 	stw	r16,0(sp)
 4011434:	dfc00315 	stw	ra,12(sp)
 4011438:	dc800215 	stw	r18,8(sp)
 401143c:	2023883a 	mov	r17,r4
 4011440:	2821883a 	mov	r16,r5
 4011444:	10000f26 	beq	r2,zero,4011484 <_Balloc+0x60>
 4011448:	8407883a 	add	r3,r16,r16
 401144c:	18c7883a 	add	r3,r3,r3
 4011450:	10c7883a 	add	r3,r2,r3
 4011454:	18800017 	ldw	r2,0(r3)
 4011458:	10001126 	beq	r2,zero,40114a0 <_Balloc+0x7c>
 401145c:	11000017 	ldw	r4,0(r2)
 4011460:	19000015 	stw	r4,0(r3)
 4011464:	10000415 	stw	zero,16(r2)
 4011468:	10000315 	stw	zero,12(r2)
 401146c:	dfc00317 	ldw	ra,12(sp)
 4011470:	dc800217 	ldw	r18,8(sp)
 4011474:	dc400117 	ldw	r17,4(sp)
 4011478:	dc000017 	ldw	r16,0(sp)
 401147c:	dec00404 	addi	sp,sp,16
 4011480:	f800283a 	ret
 4011484:	01800844 	movi	r6,33
 4011488:	01400104 	movi	r5,4
 401148c:	401465c0 	call	401465c <_calloc_r>
 4011490:	88801315 	stw	r2,76(r17)
 4011494:	103fec1e 	bne	r2,zero,4011448 <__alt_data_end+0xfc011448>
 4011498:	0005883a 	mov	r2,zero
 401149c:	003ff306 	br	401146c <__alt_data_end+0xfc01146c>
 40114a0:	01400044 	movi	r5,1
 40114a4:	2c24983a 	sll	r18,r5,r16
 40114a8:	8809883a 	mov	r4,r17
 40114ac:	91800144 	addi	r6,r18,5
 40114b0:	318d883a 	add	r6,r6,r6
 40114b4:	318d883a 	add	r6,r6,r6
 40114b8:	401465c0 	call	401465c <_calloc_r>
 40114bc:	103ff626 	beq	r2,zero,4011498 <__alt_data_end+0xfc011498>
 40114c0:	14000115 	stw	r16,4(r2)
 40114c4:	14800215 	stw	r18,8(r2)
 40114c8:	003fe606 	br	4011464 <__alt_data_end+0xfc011464>

040114cc <_Bfree>:
 40114cc:	28000826 	beq	r5,zero,40114f0 <_Bfree+0x24>
 40114d0:	28c00117 	ldw	r3,4(r5)
 40114d4:	20801317 	ldw	r2,76(r4)
 40114d8:	18c7883a 	add	r3,r3,r3
 40114dc:	18c7883a 	add	r3,r3,r3
 40114e0:	10c5883a 	add	r2,r2,r3
 40114e4:	10c00017 	ldw	r3,0(r2)
 40114e8:	28c00015 	stw	r3,0(r5)
 40114ec:	11400015 	stw	r5,0(r2)
 40114f0:	f800283a 	ret

040114f4 <__multadd>:
 40114f4:	defff704 	addi	sp,sp,-36
 40114f8:	dc800215 	stw	r18,8(sp)
 40114fc:	2c800417 	ldw	r18,16(r5)
 4011500:	dd800615 	stw	r22,24(sp)
 4011504:	dd400515 	stw	r21,20(sp)
 4011508:	dd000415 	stw	r20,16(sp)
 401150c:	dcc00315 	stw	r19,12(sp)
 4011510:	dc400115 	stw	r17,4(sp)
 4011514:	dc000015 	stw	r16,0(sp)
 4011518:	dfc00815 	stw	ra,32(sp)
 401151c:	ddc00715 	stw	r23,28(sp)
 4011520:	2827883a 	mov	r19,r5
 4011524:	2029883a 	mov	r20,r4
 4011528:	3023883a 	mov	r17,r6
 401152c:	3821883a 	mov	r16,r7
 4011530:	2d400504 	addi	r21,r5,20
 4011534:	002d883a 	mov	r22,zero
 4011538:	adc00017 	ldw	r23,0(r21)
 401153c:	880b883a 	mov	r5,r17
 4011540:	ad400104 	addi	r21,r21,4
 4011544:	b93fffcc 	andi	r4,r23,65535
 4011548:	400aa340 	call	400aa34 <__mulsi3>
 401154c:	b808d43a 	srli	r4,r23,16
 4011550:	880b883a 	mov	r5,r17
 4011554:	1421883a 	add	r16,r2,r16
 4011558:	400aa340 	call	400aa34 <__mulsi3>
 401155c:	800ed43a 	srli	r7,r16,16
 4011560:	80ffffcc 	andi	r3,r16,65535
 4011564:	b5800044 	addi	r22,r22,1
 4011568:	11c5883a 	add	r2,r2,r7
 401156c:	100e943a 	slli	r7,r2,16
 4011570:	1020d43a 	srli	r16,r2,16
 4011574:	38c7883a 	add	r3,r7,r3
 4011578:	a8ffff15 	stw	r3,-4(r21)
 401157c:	b4bfee16 	blt	r22,r18,4011538 <__alt_data_end+0xfc011538>
 4011580:	80000926 	beq	r16,zero,40115a8 <__multadd+0xb4>
 4011584:	98800217 	ldw	r2,8(r19)
 4011588:	9080130e 	bge	r18,r2,40115d8 <__multadd+0xe4>
 401158c:	90800144 	addi	r2,r18,5
 4011590:	1085883a 	add	r2,r2,r2
 4011594:	1085883a 	add	r2,r2,r2
 4011598:	9885883a 	add	r2,r19,r2
 401159c:	14000015 	stw	r16,0(r2)
 40115a0:	94800044 	addi	r18,r18,1
 40115a4:	9c800415 	stw	r18,16(r19)
 40115a8:	9805883a 	mov	r2,r19
 40115ac:	dfc00817 	ldw	ra,32(sp)
 40115b0:	ddc00717 	ldw	r23,28(sp)
 40115b4:	dd800617 	ldw	r22,24(sp)
 40115b8:	dd400517 	ldw	r21,20(sp)
 40115bc:	dd000417 	ldw	r20,16(sp)
 40115c0:	dcc00317 	ldw	r19,12(sp)
 40115c4:	dc800217 	ldw	r18,8(sp)
 40115c8:	dc400117 	ldw	r17,4(sp)
 40115cc:	dc000017 	ldw	r16,0(sp)
 40115d0:	dec00904 	addi	sp,sp,36
 40115d4:	f800283a 	ret
 40115d8:	99400117 	ldw	r5,4(r19)
 40115dc:	a009883a 	mov	r4,r20
 40115e0:	29400044 	addi	r5,r5,1
 40115e4:	40114240 	call	4011424 <_Balloc>
 40115e8:	99800417 	ldw	r6,16(r19)
 40115ec:	99400304 	addi	r5,r19,12
 40115f0:	11000304 	addi	r4,r2,12
 40115f4:	31800084 	addi	r6,r6,2
 40115f8:	318d883a 	add	r6,r6,r6
 40115fc:	318d883a 	add	r6,r6,r6
 4011600:	1023883a 	mov	r17,r2
 4011604:	400b8140 	call	400b814 <memcpy>
 4011608:	98000a26 	beq	r19,zero,4011634 <__multadd+0x140>
 401160c:	98c00117 	ldw	r3,4(r19)
 4011610:	a0801317 	ldw	r2,76(r20)
 4011614:	18c7883a 	add	r3,r3,r3
 4011618:	18c7883a 	add	r3,r3,r3
 401161c:	10c5883a 	add	r2,r2,r3
 4011620:	10c00017 	ldw	r3,0(r2)
 4011624:	98c00015 	stw	r3,0(r19)
 4011628:	14c00015 	stw	r19,0(r2)
 401162c:	8827883a 	mov	r19,r17
 4011630:	003fd606 	br	401158c <__alt_data_end+0xfc01158c>
 4011634:	8827883a 	mov	r19,r17
 4011638:	003fd406 	br	401158c <__alt_data_end+0xfc01158c>

0401163c <__s2b>:
 401163c:	defff904 	addi	sp,sp,-28
 4011640:	dc400115 	stw	r17,4(sp)
 4011644:	dc000015 	stw	r16,0(sp)
 4011648:	2023883a 	mov	r17,r4
 401164c:	2821883a 	mov	r16,r5
 4011650:	39000204 	addi	r4,r7,8
 4011654:	01400244 	movi	r5,9
 4011658:	dcc00315 	stw	r19,12(sp)
 401165c:	dc800215 	stw	r18,8(sp)
 4011660:	dfc00615 	stw	ra,24(sp)
 4011664:	dd400515 	stw	r21,20(sp)
 4011668:	dd000415 	stw	r20,16(sp)
 401166c:	3825883a 	mov	r18,r7
 4011670:	3027883a 	mov	r19,r6
 4011674:	400a8800 	call	400a880 <__divsi3>
 4011678:	00c00044 	movi	r3,1
 401167c:	000b883a 	mov	r5,zero
 4011680:	1880030e 	bge	r3,r2,4011690 <__s2b+0x54>
 4011684:	18c7883a 	add	r3,r3,r3
 4011688:	29400044 	addi	r5,r5,1
 401168c:	18bffd16 	blt	r3,r2,4011684 <__alt_data_end+0xfc011684>
 4011690:	8809883a 	mov	r4,r17
 4011694:	40114240 	call	4011424 <_Balloc>
 4011698:	d8c00717 	ldw	r3,28(sp)
 401169c:	10c00515 	stw	r3,20(r2)
 40116a0:	00c00044 	movi	r3,1
 40116a4:	10c00415 	stw	r3,16(r2)
 40116a8:	00c00244 	movi	r3,9
 40116ac:	1cc0210e 	bge	r3,r19,4011734 <__s2b+0xf8>
 40116b0:	80eb883a 	add	r21,r16,r3
 40116b4:	a829883a 	mov	r20,r21
 40116b8:	84e1883a 	add	r16,r16,r19
 40116bc:	a1c00007 	ldb	r7,0(r20)
 40116c0:	01800284 	movi	r6,10
 40116c4:	a5000044 	addi	r20,r20,1
 40116c8:	100b883a 	mov	r5,r2
 40116cc:	39fff404 	addi	r7,r7,-48
 40116d0:	8809883a 	mov	r4,r17
 40116d4:	40114f40 	call	40114f4 <__multadd>
 40116d8:	a43ff81e 	bne	r20,r16,40116bc <__alt_data_end+0xfc0116bc>
 40116dc:	ace1883a 	add	r16,r21,r19
 40116e0:	843ffe04 	addi	r16,r16,-8
 40116e4:	9c800a0e 	bge	r19,r18,4011710 <__s2b+0xd4>
 40116e8:	94e5c83a 	sub	r18,r18,r19
 40116ec:	84a5883a 	add	r18,r16,r18
 40116f0:	81c00007 	ldb	r7,0(r16)
 40116f4:	01800284 	movi	r6,10
 40116f8:	84000044 	addi	r16,r16,1
 40116fc:	100b883a 	mov	r5,r2
 4011700:	39fff404 	addi	r7,r7,-48
 4011704:	8809883a 	mov	r4,r17
 4011708:	40114f40 	call	40114f4 <__multadd>
 401170c:	84bff81e 	bne	r16,r18,40116f0 <__alt_data_end+0xfc0116f0>
 4011710:	dfc00617 	ldw	ra,24(sp)
 4011714:	dd400517 	ldw	r21,20(sp)
 4011718:	dd000417 	ldw	r20,16(sp)
 401171c:	dcc00317 	ldw	r19,12(sp)
 4011720:	dc800217 	ldw	r18,8(sp)
 4011724:	dc400117 	ldw	r17,4(sp)
 4011728:	dc000017 	ldw	r16,0(sp)
 401172c:	dec00704 	addi	sp,sp,28
 4011730:	f800283a 	ret
 4011734:	84000284 	addi	r16,r16,10
 4011738:	1827883a 	mov	r19,r3
 401173c:	003fe906 	br	40116e4 <__alt_data_end+0xfc0116e4>

04011740 <__hi0bits>:
 4011740:	20bfffec 	andhi	r2,r4,65535
 4011744:	1000141e 	bne	r2,zero,4011798 <__hi0bits+0x58>
 4011748:	2008943a 	slli	r4,r4,16
 401174c:	00800404 	movi	r2,16
 4011750:	20ffc02c 	andhi	r3,r4,65280
 4011754:	1800021e 	bne	r3,zero,4011760 <__hi0bits+0x20>
 4011758:	2008923a 	slli	r4,r4,8
 401175c:	10800204 	addi	r2,r2,8
 4011760:	20fc002c 	andhi	r3,r4,61440
 4011764:	1800021e 	bne	r3,zero,4011770 <__hi0bits+0x30>
 4011768:	2008913a 	slli	r4,r4,4
 401176c:	10800104 	addi	r2,r2,4
 4011770:	20f0002c 	andhi	r3,r4,49152
 4011774:	1800031e 	bne	r3,zero,4011784 <__hi0bits+0x44>
 4011778:	2109883a 	add	r4,r4,r4
 401177c:	10800084 	addi	r2,r2,2
 4011780:	2109883a 	add	r4,r4,r4
 4011784:	20000316 	blt	r4,zero,4011794 <__hi0bits+0x54>
 4011788:	2110002c 	andhi	r4,r4,16384
 401178c:	2000041e 	bne	r4,zero,40117a0 <__hi0bits+0x60>
 4011790:	00800804 	movi	r2,32
 4011794:	f800283a 	ret
 4011798:	0005883a 	mov	r2,zero
 401179c:	003fec06 	br	4011750 <__alt_data_end+0xfc011750>
 40117a0:	10800044 	addi	r2,r2,1
 40117a4:	f800283a 	ret

040117a8 <__lo0bits>:
 40117a8:	20c00017 	ldw	r3,0(r4)
 40117ac:	188001cc 	andi	r2,r3,7
 40117b0:	10000826 	beq	r2,zero,40117d4 <__lo0bits+0x2c>
 40117b4:	1880004c 	andi	r2,r3,1
 40117b8:	1000211e 	bne	r2,zero,4011840 <__lo0bits+0x98>
 40117bc:	1880008c 	andi	r2,r3,2
 40117c0:	1000211e 	bne	r2,zero,4011848 <__lo0bits+0xa0>
 40117c4:	1806d0ba 	srli	r3,r3,2
 40117c8:	00800084 	movi	r2,2
 40117cc:	20c00015 	stw	r3,0(r4)
 40117d0:	f800283a 	ret
 40117d4:	18bfffcc 	andi	r2,r3,65535
 40117d8:	10001326 	beq	r2,zero,4011828 <__lo0bits+0x80>
 40117dc:	0005883a 	mov	r2,zero
 40117e0:	19403fcc 	andi	r5,r3,255
 40117e4:	2800021e 	bne	r5,zero,40117f0 <__lo0bits+0x48>
 40117e8:	1806d23a 	srli	r3,r3,8
 40117ec:	10800204 	addi	r2,r2,8
 40117f0:	194003cc 	andi	r5,r3,15
 40117f4:	2800021e 	bne	r5,zero,4011800 <__lo0bits+0x58>
 40117f8:	1806d13a 	srli	r3,r3,4
 40117fc:	10800104 	addi	r2,r2,4
 4011800:	194000cc 	andi	r5,r3,3
 4011804:	2800021e 	bne	r5,zero,4011810 <__lo0bits+0x68>
 4011808:	1806d0ba 	srli	r3,r3,2
 401180c:	10800084 	addi	r2,r2,2
 4011810:	1940004c 	andi	r5,r3,1
 4011814:	2800081e 	bne	r5,zero,4011838 <__lo0bits+0x90>
 4011818:	1806d07a 	srli	r3,r3,1
 401181c:	1800051e 	bne	r3,zero,4011834 <__lo0bits+0x8c>
 4011820:	00800804 	movi	r2,32
 4011824:	f800283a 	ret
 4011828:	1806d43a 	srli	r3,r3,16
 401182c:	00800404 	movi	r2,16
 4011830:	003feb06 	br	40117e0 <__alt_data_end+0xfc0117e0>
 4011834:	10800044 	addi	r2,r2,1
 4011838:	20c00015 	stw	r3,0(r4)
 401183c:	f800283a 	ret
 4011840:	0005883a 	mov	r2,zero
 4011844:	f800283a 	ret
 4011848:	1806d07a 	srli	r3,r3,1
 401184c:	00800044 	movi	r2,1
 4011850:	20c00015 	stw	r3,0(r4)
 4011854:	f800283a 	ret

04011858 <__i2b>:
 4011858:	defffd04 	addi	sp,sp,-12
 401185c:	dc000015 	stw	r16,0(sp)
 4011860:	04000044 	movi	r16,1
 4011864:	dc400115 	stw	r17,4(sp)
 4011868:	2823883a 	mov	r17,r5
 401186c:	800b883a 	mov	r5,r16
 4011870:	dfc00215 	stw	ra,8(sp)
 4011874:	40114240 	call	4011424 <_Balloc>
 4011878:	14400515 	stw	r17,20(r2)
 401187c:	14000415 	stw	r16,16(r2)
 4011880:	dfc00217 	ldw	ra,8(sp)
 4011884:	dc400117 	ldw	r17,4(sp)
 4011888:	dc000017 	ldw	r16,0(sp)
 401188c:	dec00304 	addi	sp,sp,12
 4011890:	f800283a 	ret

04011894 <__multiply>:
 4011894:	deffef04 	addi	sp,sp,-68
 4011898:	dc400815 	stw	r17,32(sp)
 401189c:	dc000715 	stw	r16,28(sp)
 40118a0:	34400417 	ldw	r17,16(r6)
 40118a4:	2c000417 	ldw	r16,16(r5)
 40118a8:	dd800d15 	stw	r22,52(sp)
 40118ac:	dc800915 	stw	r18,36(sp)
 40118b0:	dfc01015 	stw	ra,64(sp)
 40118b4:	df000f15 	stw	fp,60(sp)
 40118b8:	ddc00e15 	stw	r23,56(sp)
 40118bc:	dd400c15 	stw	r21,48(sp)
 40118c0:	dd000b15 	stw	r20,44(sp)
 40118c4:	dcc00a15 	stw	r19,40(sp)
 40118c8:	2825883a 	mov	r18,r5
 40118cc:	302d883a 	mov	r22,r6
 40118d0:	8440050e 	bge	r16,r17,40118e8 <__multiply+0x54>
 40118d4:	8007883a 	mov	r3,r16
 40118d8:	3025883a 	mov	r18,r6
 40118dc:	8821883a 	mov	r16,r17
 40118e0:	282d883a 	mov	r22,r5
 40118e4:	1823883a 	mov	r17,r3
 40118e8:	90800217 	ldw	r2,8(r18)
 40118ec:	8447883a 	add	r3,r16,r17
 40118f0:	d8c00215 	stw	r3,8(sp)
 40118f4:	91400117 	ldw	r5,4(r18)
 40118f8:	10c0010e 	bge	r2,r3,4011900 <__multiply+0x6c>
 40118fc:	29400044 	addi	r5,r5,1
 4011900:	40114240 	call	4011424 <_Balloc>
 4011904:	d8c00217 	ldw	r3,8(sp)
 4011908:	d8800615 	stw	r2,24(sp)
 401190c:	18eb883a 	add	r21,r3,r3
 4011910:	ad6b883a 	add	r21,r21,r21
 4011914:	10c00504 	addi	r3,r2,20
 4011918:	1d6b883a 	add	r21,r3,r21
 401191c:	d8c00115 	stw	r3,4(sp)
 4011920:	dd400315 	stw	r21,12(sp)
 4011924:	1805883a 	mov	r2,r3
 4011928:	1d40042e 	bgeu	r3,r21,401193c <__multiply+0xa8>
 401192c:	d8c00317 	ldw	r3,12(sp)
 4011930:	10000015 	stw	zero,0(r2)
 4011934:	10800104 	addi	r2,r2,4
 4011938:	10fffc36 	bltu	r2,r3,401192c <__alt_data_end+0xfc01192c>
 401193c:	8c63883a 	add	r17,r17,r17
 4011940:	b5800504 	addi	r22,r22,20
 4011944:	8c63883a 	add	r17,r17,r17
 4011948:	94800504 	addi	r18,r18,20
 401194c:	8421883a 	add	r16,r16,r16
 4011950:	b463883a 	add	r17,r22,r17
 4011954:	8421883a 	add	r16,r16,r16
 4011958:	dd800015 	stw	r22,0(sp)
 401195c:	dc800415 	stw	r18,16(sp)
 4011960:	dc400515 	stw	r17,20(sp)
 4011964:	9429883a 	add	r20,r18,r16
 4011968:	b4404f2e 	bgeu	r22,r17,4011aa8 <__multiply+0x214>
 401196c:	d8c00017 	ldw	r3,0(sp)
 4011970:	1c800017 	ldw	r18,0(r3)
 4011974:	947fffcc 	andi	r17,r18,65535
 4011978:	88001e26 	beq	r17,zero,40119f4 <__multiply+0x160>
 401197c:	dd800117 	ldw	r22,4(sp)
 4011980:	dd400417 	ldw	r21,16(sp)
 4011984:	0027883a 	mov	r19,zero
 4011988:	ac800017 	ldw	r18,0(r21)
 401198c:	b4000017 	ldw	r16,0(r22)
 4011990:	880b883a 	mov	r5,r17
 4011994:	913fffcc 	andi	r4,r18,65535
 4011998:	400aa340 	call	400aa34 <__mulsi3>
 401199c:	9008d43a 	srli	r4,r18,16
 40119a0:	84bfffcc 	andi	r18,r16,65535
 40119a4:	1485883a 	add	r2,r2,r18
 40119a8:	14e5883a 	add	r18,r2,r19
 40119ac:	8020d43a 	srli	r16,r16,16
 40119b0:	9026d43a 	srli	r19,r18,16
 40119b4:	880b883a 	mov	r5,r17
 40119b8:	400aa340 	call	400aa34 <__mulsi3>
 40119bc:	1405883a 	add	r2,r2,r16
 40119c0:	14e1883a 	add	r16,r2,r19
 40119c4:	90ffffcc 	andi	r3,r18,65535
 40119c8:	8024943a 	slli	r18,r16,16
 40119cc:	ad400104 	addi	r21,r21,4
 40119d0:	b005883a 	mov	r2,r22
 40119d4:	90c6b03a 	or	r3,r18,r3
 40119d8:	b0c00015 	stw	r3,0(r22)
 40119dc:	8026d43a 	srli	r19,r16,16
 40119e0:	b5800104 	addi	r22,r22,4
 40119e4:	ad3fe836 	bltu	r21,r20,4011988 <__alt_data_end+0xfc011988>
 40119e8:	d8c00017 	ldw	r3,0(sp)
 40119ec:	14c00115 	stw	r19,4(r2)
 40119f0:	1c800017 	ldw	r18,0(r3)
 40119f4:	9024d43a 	srli	r18,r18,16
 40119f8:	90002226 	beq	r18,zero,4011a84 <__multiply+0x1f0>
 40119fc:	d8c00117 	ldw	r3,4(sp)
 4011a00:	dd800417 	ldw	r22,16(sp)
 4011a04:	002f883a 	mov	r23,zero
 4011a08:	1f000017 	ldw	fp,0(r3)
 4011a0c:	1823883a 	mov	r17,r3
 4011a10:	182b883a 	mov	r21,r3
 4011a14:	e021883a 	mov	r16,fp
 4011a18:	00000106 	br	4011a20 <__multiply+0x18c>
 4011a1c:	982b883a 	mov	r21,r19
 4011a20:	b100000b 	ldhu	r4,0(r22)
 4011a24:	8020d43a 	srli	r16,r16,16
 4011a28:	900b883a 	mov	r5,r18
 4011a2c:	400aa340 	call	400aa34 <__mulsi3>
 4011a30:	1405883a 	add	r2,r2,r16
 4011a34:	15ef883a 	add	r23,r2,r23
 4011a38:	b804943a 	slli	r2,r23,16
 4011a3c:	e0ffffcc 	andi	r3,fp,65535
 4011a40:	8c400104 	addi	r17,r17,4
 4011a44:	10c6b03a 	or	r3,r2,r3
 4011a48:	88ffff15 	stw	r3,-4(r17)
 4011a4c:	b5800104 	addi	r22,r22,4
 4011a50:	b13fff17 	ldw	r4,-4(r22)
 4011a54:	acc00104 	addi	r19,r21,4
 4011a58:	900b883a 	mov	r5,r18
 4011a5c:	2008d43a 	srli	r4,r4,16
 4011a60:	9c000017 	ldw	r16,0(r19)
 4011a64:	400aa340 	call	400aa34 <__mulsi3>
 4011a68:	b806d43a 	srli	r3,r23,16
 4011a6c:	813fffcc 	andi	r4,r16,65535
 4011a70:	1105883a 	add	r2,r2,r4
 4011a74:	10f9883a 	add	fp,r2,r3
 4011a78:	e02ed43a 	srli	r23,fp,16
 4011a7c:	b53fe736 	bltu	r22,r20,4011a1c <__alt_data_end+0xfc011a1c>
 4011a80:	af000115 	stw	fp,4(r21)
 4011a84:	d8c00017 	ldw	r3,0(sp)
 4011a88:	d9000517 	ldw	r4,20(sp)
 4011a8c:	18c00104 	addi	r3,r3,4
 4011a90:	d8c00015 	stw	r3,0(sp)
 4011a94:	d8c00117 	ldw	r3,4(sp)
 4011a98:	18c00104 	addi	r3,r3,4
 4011a9c:	d8c00115 	stw	r3,4(sp)
 4011aa0:	d8c00017 	ldw	r3,0(sp)
 4011aa4:	193fb136 	bltu	r3,r4,401196c <__alt_data_end+0xfc01196c>
 4011aa8:	d8c00217 	ldw	r3,8(sp)
 4011aac:	00c00c0e 	bge	zero,r3,4011ae0 <__multiply+0x24c>
 4011ab0:	d8c00317 	ldw	r3,12(sp)
 4011ab4:	18bfff17 	ldw	r2,-4(r3)
 4011ab8:	1d7fff04 	addi	r21,r3,-4
 4011abc:	10000326 	beq	r2,zero,4011acc <__multiply+0x238>
 4011ac0:	00000706 	br	4011ae0 <__multiply+0x24c>
 4011ac4:	a8800017 	ldw	r2,0(r21)
 4011ac8:	1000051e 	bne	r2,zero,4011ae0 <__multiply+0x24c>
 4011acc:	d8c00217 	ldw	r3,8(sp)
 4011ad0:	ad7fff04 	addi	r21,r21,-4
 4011ad4:	18ffffc4 	addi	r3,r3,-1
 4011ad8:	d8c00215 	stw	r3,8(sp)
 4011adc:	183ff91e 	bne	r3,zero,4011ac4 <__alt_data_end+0xfc011ac4>
 4011ae0:	d8c00617 	ldw	r3,24(sp)
 4011ae4:	d9000217 	ldw	r4,8(sp)
 4011ae8:	1805883a 	mov	r2,r3
 4011aec:	19000415 	stw	r4,16(r3)
 4011af0:	dfc01017 	ldw	ra,64(sp)
 4011af4:	df000f17 	ldw	fp,60(sp)
 4011af8:	ddc00e17 	ldw	r23,56(sp)
 4011afc:	dd800d17 	ldw	r22,52(sp)
 4011b00:	dd400c17 	ldw	r21,48(sp)
 4011b04:	dd000b17 	ldw	r20,44(sp)
 4011b08:	dcc00a17 	ldw	r19,40(sp)
 4011b0c:	dc800917 	ldw	r18,36(sp)
 4011b10:	dc400817 	ldw	r17,32(sp)
 4011b14:	dc000717 	ldw	r16,28(sp)
 4011b18:	dec01104 	addi	sp,sp,68
 4011b1c:	f800283a 	ret

04011b20 <__pow5mult>:
 4011b20:	defffa04 	addi	sp,sp,-24
 4011b24:	dcc00315 	stw	r19,12(sp)
 4011b28:	dc000015 	stw	r16,0(sp)
 4011b2c:	dfc00515 	stw	ra,20(sp)
 4011b30:	dd000415 	stw	r20,16(sp)
 4011b34:	dc800215 	stw	r18,8(sp)
 4011b38:	dc400115 	stw	r17,4(sp)
 4011b3c:	308000cc 	andi	r2,r6,3
 4011b40:	3021883a 	mov	r16,r6
 4011b44:	2027883a 	mov	r19,r4
 4011b48:	10002f1e 	bne	r2,zero,4011c08 <__pow5mult+0xe8>
 4011b4c:	2825883a 	mov	r18,r5
 4011b50:	8021d0ba 	srai	r16,r16,2
 4011b54:	80001a26 	beq	r16,zero,4011bc0 <__pow5mult+0xa0>
 4011b58:	9c401217 	ldw	r17,72(r19)
 4011b5c:	8800061e 	bne	r17,zero,4011b78 <__pow5mult+0x58>
 4011b60:	00003406 	br	4011c34 <__pow5mult+0x114>
 4011b64:	8021d07a 	srai	r16,r16,1
 4011b68:	80001526 	beq	r16,zero,4011bc0 <__pow5mult+0xa0>
 4011b6c:	88800017 	ldw	r2,0(r17)
 4011b70:	10001c26 	beq	r2,zero,4011be4 <__pow5mult+0xc4>
 4011b74:	1023883a 	mov	r17,r2
 4011b78:	8080004c 	andi	r2,r16,1
 4011b7c:	103ff926 	beq	r2,zero,4011b64 <__alt_data_end+0xfc011b64>
 4011b80:	880d883a 	mov	r6,r17
 4011b84:	900b883a 	mov	r5,r18
 4011b88:	9809883a 	mov	r4,r19
 4011b8c:	40118940 	call	4011894 <__multiply>
 4011b90:	90001b26 	beq	r18,zero,4011c00 <__pow5mult+0xe0>
 4011b94:	91000117 	ldw	r4,4(r18)
 4011b98:	98c01317 	ldw	r3,76(r19)
 4011b9c:	8021d07a 	srai	r16,r16,1
 4011ba0:	2109883a 	add	r4,r4,r4
 4011ba4:	2109883a 	add	r4,r4,r4
 4011ba8:	1907883a 	add	r3,r3,r4
 4011bac:	19000017 	ldw	r4,0(r3)
 4011bb0:	91000015 	stw	r4,0(r18)
 4011bb4:	1c800015 	stw	r18,0(r3)
 4011bb8:	1025883a 	mov	r18,r2
 4011bbc:	803feb1e 	bne	r16,zero,4011b6c <__alt_data_end+0xfc011b6c>
 4011bc0:	9005883a 	mov	r2,r18
 4011bc4:	dfc00517 	ldw	ra,20(sp)
 4011bc8:	dd000417 	ldw	r20,16(sp)
 4011bcc:	dcc00317 	ldw	r19,12(sp)
 4011bd0:	dc800217 	ldw	r18,8(sp)
 4011bd4:	dc400117 	ldw	r17,4(sp)
 4011bd8:	dc000017 	ldw	r16,0(sp)
 4011bdc:	dec00604 	addi	sp,sp,24
 4011be0:	f800283a 	ret
 4011be4:	880d883a 	mov	r6,r17
 4011be8:	880b883a 	mov	r5,r17
 4011bec:	9809883a 	mov	r4,r19
 4011bf0:	40118940 	call	4011894 <__multiply>
 4011bf4:	88800015 	stw	r2,0(r17)
 4011bf8:	10000015 	stw	zero,0(r2)
 4011bfc:	003fdd06 	br	4011b74 <__alt_data_end+0xfc011b74>
 4011c00:	1025883a 	mov	r18,r2
 4011c04:	003fd706 	br	4011b64 <__alt_data_end+0xfc011b64>
 4011c08:	10bfffc4 	addi	r2,r2,-1
 4011c0c:	1085883a 	add	r2,r2,r2
 4011c10:	00c100b4 	movhi	r3,1026
 4011c14:	18c6f404 	addi	r3,r3,7120
 4011c18:	1085883a 	add	r2,r2,r2
 4011c1c:	1885883a 	add	r2,r3,r2
 4011c20:	11800017 	ldw	r6,0(r2)
 4011c24:	000f883a 	mov	r7,zero
 4011c28:	40114f40 	call	40114f4 <__multadd>
 4011c2c:	1025883a 	mov	r18,r2
 4011c30:	003fc706 	br	4011b50 <__alt_data_end+0xfc011b50>
 4011c34:	05000044 	movi	r20,1
 4011c38:	a00b883a 	mov	r5,r20
 4011c3c:	9809883a 	mov	r4,r19
 4011c40:	40114240 	call	4011424 <_Balloc>
 4011c44:	1023883a 	mov	r17,r2
 4011c48:	00809c44 	movi	r2,625
 4011c4c:	88800515 	stw	r2,20(r17)
 4011c50:	8d000415 	stw	r20,16(r17)
 4011c54:	9c401215 	stw	r17,72(r19)
 4011c58:	88000015 	stw	zero,0(r17)
 4011c5c:	003fc606 	br	4011b78 <__alt_data_end+0xfc011b78>

04011c60 <__lshift>:
 4011c60:	defff904 	addi	sp,sp,-28
 4011c64:	dd400515 	stw	r21,20(sp)
 4011c68:	dcc00315 	stw	r19,12(sp)
 4011c6c:	302bd17a 	srai	r21,r6,5
 4011c70:	2cc00417 	ldw	r19,16(r5)
 4011c74:	28800217 	ldw	r2,8(r5)
 4011c78:	dd000415 	stw	r20,16(sp)
 4011c7c:	ace7883a 	add	r19,r21,r19
 4011c80:	dc800215 	stw	r18,8(sp)
 4011c84:	dc400115 	stw	r17,4(sp)
 4011c88:	dc000015 	stw	r16,0(sp)
 4011c8c:	dfc00615 	stw	ra,24(sp)
 4011c90:	9c000044 	addi	r16,r19,1
 4011c94:	2823883a 	mov	r17,r5
 4011c98:	3029883a 	mov	r20,r6
 4011c9c:	2025883a 	mov	r18,r4
 4011ca0:	29400117 	ldw	r5,4(r5)
 4011ca4:	1400030e 	bge	r2,r16,4011cb4 <__lshift+0x54>
 4011ca8:	1085883a 	add	r2,r2,r2
 4011cac:	29400044 	addi	r5,r5,1
 4011cb0:	143ffd16 	blt	r2,r16,4011ca8 <__alt_data_end+0xfc011ca8>
 4011cb4:	9009883a 	mov	r4,r18
 4011cb8:	40114240 	call	4011424 <_Balloc>
 4011cbc:	10c00504 	addi	r3,r2,20
 4011cc0:	0540070e 	bge	zero,r21,4011ce0 <__lshift+0x80>
 4011cc4:	ad6b883a 	add	r21,r21,r21
 4011cc8:	ad6b883a 	add	r21,r21,r21
 4011ccc:	1809883a 	mov	r4,r3
 4011cd0:	1d47883a 	add	r3,r3,r21
 4011cd4:	20000015 	stw	zero,0(r4)
 4011cd8:	21000104 	addi	r4,r4,4
 4011cdc:	193ffd1e 	bne	r3,r4,4011cd4 <__alt_data_end+0xfc011cd4>
 4011ce0:	8a000417 	ldw	r8,16(r17)
 4011ce4:	89000504 	addi	r4,r17,20
 4011ce8:	a18007cc 	andi	r6,r20,31
 4011cec:	4211883a 	add	r8,r8,r8
 4011cf0:	4211883a 	add	r8,r8,r8
 4011cf4:	2211883a 	add	r8,r4,r8
 4011cf8:	30002326 	beq	r6,zero,4011d88 <__lshift+0x128>
 4011cfc:	02400804 	movi	r9,32
 4011d00:	4993c83a 	sub	r9,r9,r6
 4011d04:	000b883a 	mov	r5,zero
 4011d08:	21c00017 	ldw	r7,0(r4)
 4011d0c:	1815883a 	mov	r10,r3
 4011d10:	18c00104 	addi	r3,r3,4
 4011d14:	398e983a 	sll	r7,r7,r6
 4011d18:	21000104 	addi	r4,r4,4
 4011d1c:	394ab03a 	or	r5,r7,r5
 4011d20:	197fff15 	stw	r5,-4(r3)
 4011d24:	217fff17 	ldw	r5,-4(r4)
 4011d28:	2a4ad83a 	srl	r5,r5,r9
 4011d2c:	223ff636 	bltu	r4,r8,4011d08 <__alt_data_end+0xfc011d08>
 4011d30:	51400115 	stw	r5,4(r10)
 4011d34:	28001a1e 	bne	r5,zero,4011da0 <__lshift+0x140>
 4011d38:	843fffc4 	addi	r16,r16,-1
 4011d3c:	14000415 	stw	r16,16(r2)
 4011d40:	88000826 	beq	r17,zero,4011d64 <__lshift+0x104>
 4011d44:	89000117 	ldw	r4,4(r17)
 4011d48:	90c01317 	ldw	r3,76(r18)
 4011d4c:	2109883a 	add	r4,r4,r4
 4011d50:	2109883a 	add	r4,r4,r4
 4011d54:	1907883a 	add	r3,r3,r4
 4011d58:	19000017 	ldw	r4,0(r3)
 4011d5c:	89000015 	stw	r4,0(r17)
 4011d60:	1c400015 	stw	r17,0(r3)
 4011d64:	dfc00617 	ldw	ra,24(sp)
 4011d68:	dd400517 	ldw	r21,20(sp)
 4011d6c:	dd000417 	ldw	r20,16(sp)
 4011d70:	dcc00317 	ldw	r19,12(sp)
 4011d74:	dc800217 	ldw	r18,8(sp)
 4011d78:	dc400117 	ldw	r17,4(sp)
 4011d7c:	dc000017 	ldw	r16,0(sp)
 4011d80:	dec00704 	addi	sp,sp,28
 4011d84:	f800283a 	ret
 4011d88:	21400017 	ldw	r5,0(r4)
 4011d8c:	18c00104 	addi	r3,r3,4
 4011d90:	21000104 	addi	r4,r4,4
 4011d94:	197fff15 	stw	r5,-4(r3)
 4011d98:	223ffb36 	bltu	r4,r8,4011d88 <__alt_data_end+0xfc011d88>
 4011d9c:	003fe606 	br	4011d38 <__alt_data_end+0xfc011d38>
 4011da0:	9c000084 	addi	r16,r19,2
 4011da4:	003fe406 	br	4011d38 <__alt_data_end+0xfc011d38>

04011da8 <__mcmp>:
 4011da8:	20800417 	ldw	r2,16(r4)
 4011dac:	28c00417 	ldw	r3,16(r5)
 4011db0:	10c5c83a 	sub	r2,r2,r3
 4011db4:	1000111e 	bne	r2,zero,4011dfc <__mcmp+0x54>
 4011db8:	18c7883a 	add	r3,r3,r3
 4011dbc:	18c7883a 	add	r3,r3,r3
 4011dc0:	21000504 	addi	r4,r4,20
 4011dc4:	29400504 	addi	r5,r5,20
 4011dc8:	20c5883a 	add	r2,r4,r3
 4011dcc:	28cb883a 	add	r5,r5,r3
 4011dd0:	00000106 	br	4011dd8 <__mcmp+0x30>
 4011dd4:	20800a2e 	bgeu	r4,r2,4011e00 <__mcmp+0x58>
 4011dd8:	10bfff04 	addi	r2,r2,-4
 4011ddc:	297fff04 	addi	r5,r5,-4
 4011de0:	11800017 	ldw	r6,0(r2)
 4011de4:	28c00017 	ldw	r3,0(r5)
 4011de8:	30fffa26 	beq	r6,r3,4011dd4 <__alt_data_end+0xfc011dd4>
 4011dec:	30c00236 	bltu	r6,r3,4011df8 <__mcmp+0x50>
 4011df0:	00800044 	movi	r2,1
 4011df4:	f800283a 	ret
 4011df8:	00bfffc4 	movi	r2,-1
 4011dfc:	f800283a 	ret
 4011e00:	0005883a 	mov	r2,zero
 4011e04:	f800283a 	ret

04011e08 <__mdiff>:
 4011e08:	28c00417 	ldw	r3,16(r5)
 4011e0c:	30800417 	ldw	r2,16(r6)
 4011e10:	defffa04 	addi	sp,sp,-24
 4011e14:	dcc00315 	stw	r19,12(sp)
 4011e18:	dc800215 	stw	r18,8(sp)
 4011e1c:	dfc00515 	stw	ra,20(sp)
 4011e20:	dd000415 	stw	r20,16(sp)
 4011e24:	dc400115 	stw	r17,4(sp)
 4011e28:	dc000015 	stw	r16,0(sp)
 4011e2c:	1887c83a 	sub	r3,r3,r2
 4011e30:	2825883a 	mov	r18,r5
 4011e34:	3027883a 	mov	r19,r6
 4011e38:	1800141e 	bne	r3,zero,4011e8c <__mdiff+0x84>
 4011e3c:	1085883a 	add	r2,r2,r2
 4011e40:	1085883a 	add	r2,r2,r2
 4011e44:	2a000504 	addi	r8,r5,20
 4011e48:	34000504 	addi	r16,r6,20
 4011e4c:	4087883a 	add	r3,r8,r2
 4011e50:	8085883a 	add	r2,r16,r2
 4011e54:	00000106 	br	4011e5c <__mdiff+0x54>
 4011e58:	40c0592e 	bgeu	r8,r3,4011fc0 <__mdiff+0x1b8>
 4011e5c:	18ffff04 	addi	r3,r3,-4
 4011e60:	10bfff04 	addi	r2,r2,-4
 4011e64:	19c00017 	ldw	r7,0(r3)
 4011e68:	11400017 	ldw	r5,0(r2)
 4011e6c:	397ffa26 	beq	r7,r5,4011e58 <__alt_data_end+0xfc011e58>
 4011e70:	3940592e 	bgeu	r7,r5,4011fd8 <__mdiff+0x1d0>
 4011e74:	9005883a 	mov	r2,r18
 4011e78:	4023883a 	mov	r17,r8
 4011e7c:	9825883a 	mov	r18,r19
 4011e80:	05000044 	movi	r20,1
 4011e84:	1027883a 	mov	r19,r2
 4011e88:	00000406 	br	4011e9c <__mdiff+0x94>
 4011e8c:	18005616 	blt	r3,zero,4011fe8 <__mdiff+0x1e0>
 4011e90:	34400504 	addi	r17,r6,20
 4011e94:	2c000504 	addi	r16,r5,20
 4011e98:	0029883a 	mov	r20,zero
 4011e9c:	91400117 	ldw	r5,4(r18)
 4011ea0:	40114240 	call	4011424 <_Balloc>
 4011ea4:	92400417 	ldw	r9,16(r18)
 4011ea8:	9b000417 	ldw	r12,16(r19)
 4011eac:	12c00504 	addi	r11,r2,20
 4011eb0:	4a51883a 	add	r8,r9,r9
 4011eb4:	6319883a 	add	r12,r12,r12
 4011eb8:	4211883a 	add	r8,r8,r8
 4011ebc:	6319883a 	add	r12,r12,r12
 4011ec0:	15000315 	stw	r20,12(r2)
 4011ec4:	8211883a 	add	r8,r16,r8
 4011ec8:	8b19883a 	add	r12,r17,r12
 4011ecc:	0007883a 	mov	r3,zero
 4011ed0:	81400017 	ldw	r5,0(r16)
 4011ed4:	89c00017 	ldw	r7,0(r17)
 4011ed8:	59800104 	addi	r6,r11,4
 4011edc:	293fffcc 	andi	r4,r5,65535
 4011ee0:	20c7883a 	add	r3,r4,r3
 4011ee4:	393fffcc 	andi	r4,r7,65535
 4011ee8:	1909c83a 	sub	r4,r3,r4
 4011eec:	280ad43a 	srli	r5,r5,16
 4011ef0:	380ed43a 	srli	r7,r7,16
 4011ef4:	2007d43a 	srai	r3,r4,16
 4011ef8:	213fffcc 	andi	r4,r4,65535
 4011efc:	29cbc83a 	sub	r5,r5,r7
 4011f00:	28c7883a 	add	r3,r5,r3
 4011f04:	180a943a 	slli	r5,r3,16
 4011f08:	8c400104 	addi	r17,r17,4
 4011f0c:	84000104 	addi	r16,r16,4
 4011f10:	2908b03a 	or	r4,r5,r4
 4011f14:	59000015 	stw	r4,0(r11)
 4011f18:	1807d43a 	srai	r3,r3,16
 4011f1c:	3015883a 	mov	r10,r6
 4011f20:	3017883a 	mov	r11,r6
 4011f24:	8b3fea36 	bltu	r17,r12,4011ed0 <__alt_data_end+0xfc011ed0>
 4011f28:	8200162e 	bgeu	r16,r8,4011f84 <__mdiff+0x17c>
 4011f2c:	8017883a 	mov	r11,r16
 4011f30:	59400017 	ldw	r5,0(r11)
 4011f34:	31800104 	addi	r6,r6,4
 4011f38:	5ac00104 	addi	r11,r11,4
 4011f3c:	293fffcc 	andi	r4,r5,65535
 4011f40:	20c7883a 	add	r3,r4,r3
 4011f44:	280ed43a 	srli	r7,r5,16
 4011f48:	180bd43a 	srai	r5,r3,16
 4011f4c:	193fffcc 	andi	r4,r3,65535
 4011f50:	3947883a 	add	r3,r7,r5
 4011f54:	180a943a 	slli	r5,r3,16
 4011f58:	1807d43a 	srai	r3,r3,16
 4011f5c:	2908b03a 	or	r4,r5,r4
 4011f60:	313fff15 	stw	r4,-4(r6)
 4011f64:	5a3ff236 	bltu	r11,r8,4011f30 <__alt_data_end+0xfc011f30>
 4011f68:	0406303a 	nor	r3,zero,r16
 4011f6c:	1a07883a 	add	r3,r3,r8
 4011f70:	1806d0ba 	srli	r3,r3,2
 4011f74:	18c00044 	addi	r3,r3,1
 4011f78:	18c7883a 	add	r3,r3,r3
 4011f7c:	18c7883a 	add	r3,r3,r3
 4011f80:	50d5883a 	add	r10,r10,r3
 4011f84:	50ffff04 	addi	r3,r10,-4
 4011f88:	2000041e 	bne	r4,zero,4011f9c <__mdiff+0x194>
 4011f8c:	18ffff04 	addi	r3,r3,-4
 4011f90:	19000017 	ldw	r4,0(r3)
 4011f94:	4a7fffc4 	addi	r9,r9,-1
 4011f98:	203ffc26 	beq	r4,zero,4011f8c <__alt_data_end+0xfc011f8c>
 4011f9c:	12400415 	stw	r9,16(r2)
 4011fa0:	dfc00517 	ldw	ra,20(sp)
 4011fa4:	dd000417 	ldw	r20,16(sp)
 4011fa8:	dcc00317 	ldw	r19,12(sp)
 4011fac:	dc800217 	ldw	r18,8(sp)
 4011fb0:	dc400117 	ldw	r17,4(sp)
 4011fb4:	dc000017 	ldw	r16,0(sp)
 4011fb8:	dec00604 	addi	sp,sp,24
 4011fbc:	f800283a 	ret
 4011fc0:	000b883a 	mov	r5,zero
 4011fc4:	40114240 	call	4011424 <_Balloc>
 4011fc8:	00c00044 	movi	r3,1
 4011fcc:	10c00415 	stw	r3,16(r2)
 4011fd0:	10000515 	stw	zero,20(r2)
 4011fd4:	003ff206 	br	4011fa0 <__alt_data_end+0xfc011fa0>
 4011fd8:	8023883a 	mov	r17,r16
 4011fdc:	0029883a 	mov	r20,zero
 4011fe0:	4021883a 	mov	r16,r8
 4011fe4:	003fad06 	br	4011e9c <__alt_data_end+0xfc011e9c>
 4011fe8:	9005883a 	mov	r2,r18
 4011fec:	94400504 	addi	r17,r18,20
 4011ff0:	9c000504 	addi	r16,r19,20
 4011ff4:	9825883a 	mov	r18,r19
 4011ff8:	05000044 	movi	r20,1
 4011ffc:	1027883a 	mov	r19,r2
 4012000:	003fa606 	br	4011e9c <__alt_data_end+0xfc011e9c>

04012004 <__ulp>:
 4012004:	295ffc2c 	andhi	r5,r5,32752
 4012008:	00bf3034 	movhi	r2,64704
 401200c:	2887883a 	add	r3,r5,r2
 4012010:	00c0020e 	bge	zero,r3,401201c <__ulp+0x18>
 4012014:	0005883a 	mov	r2,zero
 4012018:	f800283a 	ret
 401201c:	00c7c83a 	sub	r3,zero,r3
 4012020:	1807d53a 	srai	r3,r3,20
 4012024:	008004c4 	movi	r2,19
 4012028:	10c00b0e 	bge	r2,r3,4012058 <__ulp+0x54>
 401202c:	18bffb04 	addi	r2,r3,-20
 4012030:	01000784 	movi	r4,30
 4012034:	0007883a 	mov	r3,zero
 4012038:	20800516 	blt	r4,r2,4012050 <__ulp+0x4c>
 401203c:	010007c4 	movi	r4,31
 4012040:	2089c83a 	sub	r4,r4,r2
 4012044:	00800044 	movi	r2,1
 4012048:	1104983a 	sll	r2,r2,r4
 401204c:	f800283a 	ret
 4012050:	00800044 	movi	r2,1
 4012054:	f800283a 	ret
 4012058:	01400234 	movhi	r5,8
 401205c:	28c7d83a 	sra	r3,r5,r3
 4012060:	0005883a 	mov	r2,zero
 4012064:	f800283a 	ret

04012068 <__b2d>:
 4012068:	defffa04 	addi	sp,sp,-24
 401206c:	dc000015 	stw	r16,0(sp)
 4012070:	24000417 	ldw	r16,16(r4)
 4012074:	dc400115 	stw	r17,4(sp)
 4012078:	24400504 	addi	r17,r4,20
 401207c:	8421883a 	add	r16,r16,r16
 4012080:	8421883a 	add	r16,r16,r16
 4012084:	8c21883a 	add	r16,r17,r16
 4012088:	dc800215 	stw	r18,8(sp)
 401208c:	84bfff17 	ldw	r18,-4(r16)
 4012090:	dd000415 	stw	r20,16(sp)
 4012094:	dcc00315 	stw	r19,12(sp)
 4012098:	9009883a 	mov	r4,r18
 401209c:	2829883a 	mov	r20,r5
 40120a0:	dfc00515 	stw	ra,20(sp)
 40120a4:	40117400 	call	4011740 <__hi0bits>
 40120a8:	00c00804 	movi	r3,32
 40120ac:	1889c83a 	sub	r4,r3,r2
 40120b0:	a1000015 	stw	r4,0(r20)
 40120b4:	01000284 	movi	r4,10
 40120b8:	84ffff04 	addi	r19,r16,-4
 40120bc:	20801216 	blt	r4,r2,4012108 <__b2d+0xa0>
 40120c0:	018002c4 	movi	r6,11
 40120c4:	308dc83a 	sub	r6,r6,r2
 40120c8:	9186d83a 	srl	r3,r18,r6
 40120cc:	18cffc34 	orhi	r3,r3,16368
 40120d0:	8cc0212e 	bgeu	r17,r19,4012158 <__b2d+0xf0>
 40120d4:	813ffe17 	ldw	r4,-8(r16)
 40120d8:	218cd83a 	srl	r6,r4,r6
 40120dc:	10800544 	addi	r2,r2,21
 40120e0:	9084983a 	sll	r2,r18,r2
 40120e4:	1184b03a 	or	r2,r2,r6
 40120e8:	dfc00517 	ldw	ra,20(sp)
 40120ec:	dd000417 	ldw	r20,16(sp)
 40120f0:	dcc00317 	ldw	r19,12(sp)
 40120f4:	dc800217 	ldw	r18,8(sp)
 40120f8:	dc400117 	ldw	r17,4(sp)
 40120fc:	dc000017 	ldw	r16,0(sp)
 4012100:	dec00604 	addi	sp,sp,24
 4012104:	f800283a 	ret
 4012108:	8cc00f2e 	bgeu	r17,r19,4012148 <__b2d+0xe0>
 401210c:	117ffd44 	addi	r5,r2,-11
 4012110:	80bffe17 	ldw	r2,-8(r16)
 4012114:	28000e26 	beq	r5,zero,4012150 <__b2d+0xe8>
 4012118:	1949c83a 	sub	r4,r3,r5
 401211c:	9164983a 	sll	r18,r18,r5
 4012120:	1106d83a 	srl	r3,r2,r4
 4012124:	81bffe04 	addi	r6,r16,-8
 4012128:	948ffc34 	orhi	r18,r18,16368
 401212c:	90c6b03a 	or	r3,r18,r3
 4012130:	89800e2e 	bgeu	r17,r6,401216c <__b2d+0x104>
 4012134:	81bffd17 	ldw	r6,-12(r16)
 4012138:	1144983a 	sll	r2,r2,r5
 401213c:	310ad83a 	srl	r5,r6,r4
 4012140:	2884b03a 	or	r2,r5,r2
 4012144:	003fe806 	br	40120e8 <__alt_data_end+0xfc0120e8>
 4012148:	10bffd44 	addi	r2,r2,-11
 401214c:	1000041e 	bne	r2,zero,4012160 <__b2d+0xf8>
 4012150:	90cffc34 	orhi	r3,r18,16368
 4012154:	003fe406 	br	40120e8 <__alt_data_end+0xfc0120e8>
 4012158:	000d883a 	mov	r6,zero
 401215c:	003fdf06 	br	40120dc <__alt_data_end+0xfc0120dc>
 4012160:	90a4983a 	sll	r18,r18,r2
 4012164:	0005883a 	mov	r2,zero
 4012168:	003ff906 	br	4012150 <__alt_data_end+0xfc012150>
 401216c:	1144983a 	sll	r2,r2,r5
 4012170:	003fdd06 	br	40120e8 <__alt_data_end+0xfc0120e8>

04012174 <__d2b>:
 4012174:	defff804 	addi	sp,sp,-32
 4012178:	dc000215 	stw	r16,8(sp)
 401217c:	3021883a 	mov	r16,r6
 4012180:	dc400315 	stw	r17,12(sp)
 4012184:	8022907a 	slli	r17,r16,1
 4012188:	dd000615 	stw	r20,24(sp)
 401218c:	2829883a 	mov	r20,r5
 4012190:	01400044 	movi	r5,1
 4012194:	dcc00515 	stw	r19,20(sp)
 4012198:	dc800415 	stw	r18,16(sp)
 401219c:	dfc00715 	stw	ra,28(sp)
 40121a0:	3825883a 	mov	r18,r7
 40121a4:	8822d57a 	srli	r17,r17,21
 40121a8:	40114240 	call	4011424 <_Balloc>
 40121ac:	1027883a 	mov	r19,r2
 40121b0:	00800434 	movhi	r2,16
 40121b4:	10bfffc4 	addi	r2,r2,-1
 40121b8:	808c703a 	and	r6,r16,r2
 40121bc:	88000126 	beq	r17,zero,40121c4 <__d2b+0x50>
 40121c0:	31800434 	orhi	r6,r6,16
 40121c4:	d9800015 	stw	r6,0(sp)
 40121c8:	a0002426 	beq	r20,zero,401225c <__d2b+0xe8>
 40121cc:	d9000104 	addi	r4,sp,4
 40121d0:	dd000115 	stw	r20,4(sp)
 40121d4:	40117a80 	call	40117a8 <__lo0bits>
 40121d8:	d8c00017 	ldw	r3,0(sp)
 40121dc:	10002f1e 	bne	r2,zero,401229c <__d2b+0x128>
 40121e0:	d9000117 	ldw	r4,4(sp)
 40121e4:	99000515 	stw	r4,20(r19)
 40121e8:	1821003a 	cmpeq	r16,r3,zero
 40121ec:	01000084 	movi	r4,2
 40121f0:	2421c83a 	sub	r16,r4,r16
 40121f4:	98c00615 	stw	r3,24(r19)
 40121f8:	9c000415 	stw	r16,16(r19)
 40121fc:	88001f1e 	bne	r17,zero,401227c <__d2b+0x108>
 4012200:	10bef384 	addi	r2,r2,-1074
 4012204:	90800015 	stw	r2,0(r18)
 4012208:	00900034 	movhi	r2,16384
 401220c:	10bfffc4 	addi	r2,r2,-1
 4012210:	8085883a 	add	r2,r16,r2
 4012214:	1085883a 	add	r2,r2,r2
 4012218:	1085883a 	add	r2,r2,r2
 401221c:	9885883a 	add	r2,r19,r2
 4012220:	11000517 	ldw	r4,20(r2)
 4012224:	8020917a 	slli	r16,r16,5
 4012228:	40117400 	call	4011740 <__hi0bits>
 401222c:	d8c00817 	ldw	r3,32(sp)
 4012230:	8085c83a 	sub	r2,r16,r2
 4012234:	18800015 	stw	r2,0(r3)
 4012238:	9805883a 	mov	r2,r19
 401223c:	dfc00717 	ldw	ra,28(sp)
 4012240:	dd000617 	ldw	r20,24(sp)
 4012244:	dcc00517 	ldw	r19,20(sp)
 4012248:	dc800417 	ldw	r18,16(sp)
 401224c:	dc400317 	ldw	r17,12(sp)
 4012250:	dc000217 	ldw	r16,8(sp)
 4012254:	dec00804 	addi	sp,sp,32
 4012258:	f800283a 	ret
 401225c:	d809883a 	mov	r4,sp
 4012260:	40117a80 	call	40117a8 <__lo0bits>
 4012264:	d8c00017 	ldw	r3,0(sp)
 4012268:	04000044 	movi	r16,1
 401226c:	9c000415 	stw	r16,16(r19)
 4012270:	98c00515 	stw	r3,20(r19)
 4012274:	10800804 	addi	r2,r2,32
 4012278:	883fe126 	beq	r17,zero,4012200 <__alt_data_end+0xfc012200>
 401227c:	00c00d44 	movi	r3,53
 4012280:	8c7ef344 	addi	r17,r17,-1075
 4012284:	88a3883a 	add	r17,r17,r2
 4012288:	1885c83a 	sub	r2,r3,r2
 401228c:	d8c00817 	ldw	r3,32(sp)
 4012290:	94400015 	stw	r17,0(r18)
 4012294:	18800015 	stw	r2,0(r3)
 4012298:	003fe706 	br	4012238 <__alt_data_end+0xfc012238>
 401229c:	01000804 	movi	r4,32
 40122a0:	2089c83a 	sub	r4,r4,r2
 40122a4:	1908983a 	sll	r4,r3,r4
 40122a8:	d9400117 	ldw	r5,4(sp)
 40122ac:	1886d83a 	srl	r3,r3,r2
 40122b0:	2148b03a 	or	r4,r4,r5
 40122b4:	99000515 	stw	r4,20(r19)
 40122b8:	d8c00015 	stw	r3,0(sp)
 40122bc:	003fca06 	br	40121e8 <__alt_data_end+0xfc0121e8>

040122c0 <__ratio>:
 40122c0:	defff904 	addi	sp,sp,-28
 40122c4:	dc400315 	stw	r17,12(sp)
 40122c8:	2823883a 	mov	r17,r5
 40122cc:	d9400104 	addi	r5,sp,4
 40122d0:	dfc00615 	stw	ra,24(sp)
 40122d4:	dcc00515 	stw	r19,20(sp)
 40122d8:	dc800415 	stw	r18,16(sp)
 40122dc:	2027883a 	mov	r19,r4
 40122e0:	dc000215 	stw	r16,8(sp)
 40122e4:	40120680 	call	4012068 <__b2d>
 40122e8:	d80b883a 	mov	r5,sp
 40122ec:	8809883a 	mov	r4,r17
 40122f0:	1025883a 	mov	r18,r2
 40122f4:	1821883a 	mov	r16,r3
 40122f8:	40120680 	call	4012068 <__b2d>
 40122fc:	8a000417 	ldw	r8,16(r17)
 4012300:	99000417 	ldw	r4,16(r19)
 4012304:	d9400117 	ldw	r5,4(sp)
 4012308:	2209c83a 	sub	r4,r4,r8
 401230c:	2010917a 	slli	r8,r4,5
 4012310:	d9000017 	ldw	r4,0(sp)
 4012314:	2909c83a 	sub	r4,r5,r4
 4012318:	4109883a 	add	r4,r8,r4
 401231c:	01000e0e 	bge	zero,r4,4012358 <__ratio+0x98>
 4012320:	2008953a 	slli	r4,r4,20
 4012324:	2421883a 	add	r16,r4,r16
 4012328:	100d883a 	mov	r6,r2
 401232c:	180f883a 	mov	r7,r3
 4012330:	9009883a 	mov	r4,r18
 4012334:	800b883a 	mov	r5,r16
 4012338:	40162080 	call	4016208 <__divdf3>
 401233c:	dfc00617 	ldw	ra,24(sp)
 4012340:	dcc00517 	ldw	r19,20(sp)
 4012344:	dc800417 	ldw	r18,16(sp)
 4012348:	dc400317 	ldw	r17,12(sp)
 401234c:	dc000217 	ldw	r16,8(sp)
 4012350:	dec00704 	addi	sp,sp,28
 4012354:	f800283a 	ret
 4012358:	2008953a 	slli	r4,r4,20
 401235c:	1907c83a 	sub	r3,r3,r4
 4012360:	003ff106 	br	4012328 <__alt_data_end+0xfc012328>

04012364 <_mprec_log10>:
 4012364:	defffe04 	addi	sp,sp,-8
 4012368:	dc000015 	stw	r16,0(sp)
 401236c:	dfc00115 	stw	ra,4(sp)
 4012370:	008005c4 	movi	r2,23
 4012374:	2021883a 	mov	r16,r4
 4012378:	11000d0e 	bge	r2,r4,40123b0 <_mprec_log10+0x4c>
 401237c:	0005883a 	mov	r2,zero
 4012380:	00cffc34 	movhi	r3,16368
 4012384:	843fffc4 	addi	r16,r16,-1
 4012388:	000d883a 	mov	r6,zero
 401238c:	01d00934 	movhi	r7,16420
 4012390:	1009883a 	mov	r4,r2
 4012394:	180b883a 	mov	r5,r3
 4012398:	4016e300 	call	4016e30 <__muldf3>
 401239c:	803ff91e 	bne	r16,zero,4012384 <__alt_data_end+0xfc012384>
 40123a0:	dfc00117 	ldw	ra,4(sp)
 40123a4:	dc000017 	ldw	r16,0(sp)
 40123a8:	dec00204 	addi	sp,sp,8
 40123ac:	f800283a 	ret
 40123b0:	202090fa 	slli	r16,r4,3
 40123b4:	008100b4 	movhi	r2,1026
 40123b8:	10870b04 	addi	r2,r2,7212
 40123bc:	1421883a 	add	r16,r2,r16
 40123c0:	80800017 	ldw	r2,0(r16)
 40123c4:	80c00117 	ldw	r3,4(r16)
 40123c8:	dfc00117 	ldw	ra,4(sp)
 40123cc:	dc000017 	ldw	r16,0(sp)
 40123d0:	dec00204 	addi	sp,sp,8
 40123d4:	f800283a 	ret

040123d8 <__copybits>:
 40123d8:	297fffc4 	addi	r5,r5,-1
 40123dc:	280fd17a 	srai	r7,r5,5
 40123e0:	30c00417 	ldw	r3,16(r6)
 40123e4:	30800504 	addi	r2,r6,20
 40123e8:	39c00044 	addi	r7,r7,1
 40123ec:	18c7883a 	add	r3,r3,r3
 40123f0:	39cf883a 	add	r7,r7,r7
 40123f4:	18c7883a 	add	r3,r3,r3
 40123f8:	39cf883a 	add	r7,r7,r7
 40123fc:	10c7883a 	add	r3,r2,r3
 4012400:	21cf883a 	add	r7,r4,r7
 4012404:	10c00d2e 	bgeu	r2,r3,401243c <__copybits+0x64>
 4012408:	200b883a 	mov	r5,r4
 401240c:	12000017 	ldw	r8,0(r2)
 4012410:	29400104 	addi	r5,r5,4
 4012414:	10800104 	addi	r2,r2,4
 4012418:	2a3fff15 	stw	r8,-4(r5)
 401241c:	10fffb36 	bltu	r2,r3,401240c <__alt_data_end+0xfc01240c>
 4012420:	1985c83a 	sub	r2,r3,r6
 4012424:	10bffac4 	addi	r2,r2,-21
 4012428:	1004d0ba 	srli	r2,r2,2
 401242c:	10800044 	addi	r2,r2,1
 4012430:	1085883a 	add	r2,r2,r2
 4012434:	1085883a 	add	r2,r2,r2
 4012438:	2089883a 	add	r4,r4,r2
 401243c:	21c0032e 	bgeu	r4,r7,401244c <__copybits+0x74>
 4012440:	20000015 	stw	zero,0(r4)
 4012444:	21000104 	addi	r4,r4,4
 4012448:	21fffd36 	bltu	r4,r7,4012440 <__alt_data_end+0xfc012440>
 401244c:	f800283a 	ret

04012450 <__any_on>:
 4012450:	20c00417 	ldw	r3,16(r4)
 4012454:	2805d17a 	srai	r2,r5,5
 4012458:	21000504 	addi	r4,r4,20
 401245c:	18800d0e 	bge	r3,r2,4012494 <__any_on+0x44>
 4012460:	18c7883a 	add	r3,r3,r3
 4012464:	18c7883a 	add	r3,r3,r3
 4012468:	20c7883a 	add	r3,r4,r3
 401246c:	20c0192e 	bgeu	r4,r3,40124d4 <__any_on+0x84>
 4012470:	18bfff17 	ldw	r2,-4(r3)
 4012474:	18ffff04 	addi	r3,r3,-4
 4012478:	1000041e 	bne	r2,zero,401248c <__any_on+0x3c>
 401247c:	20c0142e 	bgeu	r4,r3,40124d0 <__any_on+0x80>
 4012480:	18ffff04 	addi	r3,r3,-4
 4012484:	19400017 	ldw	r5,0(r3)
 4012488:	283ffc26 	beq	r5,zero,401247c <__alt_data_end+0xfc01247c>
 401248c:	00800044 	movi	r2,1
 4012490:	f800283a 	ret
 4012494:	10c00a0e 	bge	r2,r3,40124c0 <__any_on+0x70>
 4012498:	1085883a 	add	r2,r2,r2
 401249c:	1085883a 	add	r2,r2,r2
 40124a0:	294007cc 	andi	r5,r5,31
 40124a4:	2087883a 	add	r3,r4,r2
 40124a8:	283ff026 	beq	r5,zero,401246c <__alt_data_end+0xfc01246c>
 40124ac:	19800017 	ldw	r6,0(r3)
 40124b0:	3144d83a 	srl	r2,r6,r5
 40124b4:	114a983a 	sll	r5,r2,r5
 40124b8:	317ff41e 	bne	r6,r5,401248c <__alt_data_end+0xfc01248c>
 40124bc:	003feb06 	br	401246c <__alt_data_end+0xfc01246c>
 40124c0:	1085883a 	add	r2,r2,r2
 40124c4:	1085883a 	add	r2,r2,r2
 40124c8:	2087883a 	add	r3,r4,r2
 40124cc:	003fe706 	br	401246c <__alt_data_end+0xfc01246c>
 40124d0:	f800283a 	ret
 40124d4:	0005883a 	mov	r2,zero
 40124d8:	f800283a 	ret

040124dc <_putc_r>:
 40124dc:	defffc04 	addi	sp,sp,-16
 40124e0:	dc000215 	stw	r16,8(sp)
 40124e4:	dfc00315 	stw	ra,12(sp)
 40124e8:	2021883a 	mov	r16,r4
 40124ec:	20000226 	beq	r4,zero,40124f8 <_putc_r+0x1c>
 40124f0:	20800e17 	ldw	r2,56(r4)
 40124f4:	10001b26 	beq	r2,zero,4012564 <_putc_r+0x88>
 40124f8:	30800217 	ldw	r2,8(r6)
 40124fc:	10bfffc4 	addi	r2,r2,-1
 4012500:	30800215 	stw	r2,8(r6)
 4012504:	10000a16 	blt	r2,zero,4012530 <_putc_r+0x54>
 4012508:	30800017 	ldw	r2,0(r6)
 401250c:	11400005 	stb	r5,0(r2)
 4012510:	30800017 	ldw	r2,0(r6)
 4012514:	10c00044 	addi	r3,r2,1
 4012518:	30c00015 	stw	r3,0(r6)
 401251c:	10800003 	ldbu	r2,0(r2)
 4012520:	dfc00317 	ldw	ra,12(sp)
 4012524:	dc000217 	ldw	r16,8(sp)
 4012528:	dec00404 	addi	sp,sp,16
 401252c:	f800283a 	ret
 4012530:	30c00617 	ldw	r3,24(r6)
 4012534:	10c00616 	blt	r2,r3,4012550 <_putc_r+0x74>
 4012538:	30800017 	ldw	r2,0(r6)
 401253c:	00c00284 	movi	r3,10
 4012540:	11400005 	stb	r5,0(r2)
 4012544:	30800017 	ldw	r2,0(r6)
 4012548:	11400003 	ldbu	r5,0(r2)
 401254c:	28fff11e 	bne	r5,r3,4012514 <__alt_data_end+0xfc012514>
 4012550:	8009883a 	mov	r4,r16
 4012554:	dfc00317 	ldw	ra,12(sp)
 4012558:	dc000217 	ldw	r16,8(sp)
 401255c:	dec00404 	addi	sp,sp,16
 4012560:	40144501 	jmpi	4014450 <__swbuf_r>
 4012564:	d9400015 	stw	r5,0(sp)
 4012568:	d9800115 	stw	r6,4(sp)
 401256c:	40104780 	call	4010478 <__sinit>
 4012570:	d9800117 	ldw	r6,4(sp)
 4012574:	d9400017 	ldw	r5,0(sp)
 4012578:	003fdf06 	br	40124f8 <__alt_data_end+0xfc0124f8>

0401257c <putc>:
 401257c:	008100b4 	movhi	r2,1026
 4012580:	defffc04 	addi	sp,sp,-16
 4012584:	1093f304 	addi	r2,r2,20428
 4012588:	dc000115 	stw	r16,4(sp)
 401258c:	14000017 	ldw	r16,0(r2)
 4012590:	dc400215 	stw	r17,8(sp)
 4012594:	dfc00315 	stw	ra,12(sp)
 4012598:	2023883a 	mov	r17,r4
 401259c:	80000226 	beq	r16,zero,40125a8 <putc+0x2c>
 40125a0:	80800e17 	ldw	r2,56(r16)
 40125a4:	10001a26 	beq	r2,zero,4012610 <putc+0x94>
 40125a8:	28800217 	ldw	r2,8(r5)
 40125ac:	10bfffc4 	addi	r2,r2,-1
 40125b0:	28800215 	stw	r2,8(r5)
 40125b4:	10000b16 	blt	r2,zero,40125e4 <putc+0x68>
 40125b8:	28800017 	ldw	r2,0(r5)
 40125bc:	14400005 	stb	r17,0(r2)
 40125c0:	28800017 	ldw	r2,0(r5)
 40125c4:	10c00044 	addi	r3,r2,1
 40125c8:	28c00015 	stw	r3,0(r5)
 40125cc:	10800003 	ldbu	r2,0(r2)
 40125d0:	dfc00317 	ldw	ra,12(sp)
 40125d4:	dc400217 	ldw	r17,8(sp)
 40125d8:	dc000117 	ldw	r16,4(sp)
 40125dc:	dec00404 	addi	sp,sp,16
 40125e0:	f800283a 	ret
 40125e4:	28c00617 	ldw	r3,24(r5)
 40125e8:	10c00e16 	blt	r2,r3,4012624 <putc+0xa8>
 40125ec:	28800017 	ldw	r2,0(r5)
 40125f0:	01000284 	movi	r4,10
 40125f4:	14400005 	stb	r17,0(r2)
 40125f8:	28800017 	ldw	r2,0(r5)
 40125fc:	10c00003 	ldbu	r3,0(r2)
 4012600:	193ff01e 	bne	r3,r4,40125c4 <__alt_data_end+0xfc0125c4>
 4012604:	280d883a 	mov	r6,r5
 4012608:	180b883a 	mov	r5,r3
 401260c:	00000706 	br	401262c <putc+0xb0>
 4012610:	8009883a 	mov	r4,r16
 4012614:	d9400015 	stw	r5,0(sp)
 4012618:	40104780 	call	4010478 <__sinit>
 401261c:	d9400017 	ldw	r5,0(sp)
 4012620:	003fe106 	br	40125a8 <__alt_data_end+0xfc0125a8>
 4012624:	280d883a 	mov	r6,r5
 4012628:	880b883a 	mov	r5,r17
 401262c:	8009883a 	mov	r4,r16
 4012630:	dfc00317 	ldw	ra,12(sp)
 4012634:	dc400217 	ldw	r17,8(sp)
 4012638:	dc000117 	ldw	r16,4(sp)
 401263c:	dec00404 	addi	sp,sp,16
 4012640:	40144501 	jmpi	4014450 <__swbuf_r>

04012644 <_realloc_r>:
 4012644:	defff604 	addi	sp,sp,-40
 4012648:	dc800215 	stw	r18,8(sp)
 401264c:	dfc00915 	stw	ra,36(sp)
 4012650:	df000815 	stw	fp,32(sp)
 4012654:	ddc00715 	stw	r23,28(sp)
 4012658:	dd800615 	stw	r22,24(sp)
 401265c:	dd400515 	stw	r21,20(sp)
 4012660:	dd000415 	stw	r20,16(sp)
 4012664:	dcc00315 	stw	r19,12(sp)
 4012668:	dc400115 	stw	r17,4(sp)
 401266c:	dc000015 	stw	r16,0(sp)
 4012670:	3025883a 	mov	r18,r6
 4012674:	2800b726 	beq	r5,zero,4012954 <_realloc_r+0x310>
 4012678:	282b883a 	mov	r21,r5
 401267c:	2029883a 	mov	r20,r4
 4012680:	40187800 	call	4018780 <__malloc_lock>
 4012684:	a8bfff17 	ldw	r2,-4(r21)
 4012688:	043fff04 	movi	r16,-4
 401268c:	90c002c4 	addi	r3,r18,11
 4012690:	01000584 	movi	r4,22
 4012694:	acfffe04 	addi	r19,r21,-8
 4012698:	1420703a 	and	r16,r2,r16
 401269c:	20c0332e 	bgeu	r4,r3,401276c <_realloc_r+0x128>
 40126a0:	047ffe04 	movi	r17,-8
 40126a4:	1c62703a 	and	r17,r3,r17
 40126a8:	8807883a 	mov	r3,r17
 40126ac:	88005816 	blt	r17,zero,4012810 <_realloc_r+0x1cc>
 40126b0:	8c805736 	bltu	r17,r18,4012810 <_realloc_r+0x1cc>
 40126b4:	80c0300e 	bge	r16,r3,4012778 <_realloc_r+0x134>
 40126b8:	070100b4 	movhi	fp,1026
 40126bc:	e7089804 	addi	fp,fp,8800
 40126c0:	e1c00217 	ldw	r7,8(fp)
 40126c4:	9c09883a 	add	r4,r19,r16
 40126c8:	22000117 	ldw	r8,4(r4)
 40126cc:	21c06326 	beq	r4,r7,401285c <_realloc_r+0x218>
 40126d0:	017fff84 	movi	r5,-2
 40126d4:	414a703a 	and	r5,r8,r5
 40126d8:	214b883a 	add	r5,r4,r5
 40126dc:	29800117 	ldw	r6,4(r5)
 40126e0:	3180004c 	andi	r6,r6,1
 40126e4:	30003f26 	beq	r6,zero,40127e4 <_realloc_r+0x1a0>
 40126e8:	1080004c 	andi	r2,r2,1
 40126ec:	10008326 	beq	r2,zero,40128fc <_realloc_r+0x2b8>
 40126f0:	900b883a 	mov	r5,r18
 40126f4:	a009883a 	mov	r4,r20
 40126f8:	400b0080 	call	400b008 <_malloc_r>
 40126fc:	1025883a 	mov	r18,r2
 4012700:	10011e26 	beq	r2,zero,4012b7c <_realloc_r+0x538>
 4012704:	a93fff17 	ldw	r4,-4(r21)
 4012708:	10fffe04 	addi	r3,r2,-8
 401270c:	00bfff84 	movi	r2,-2
 4012710:	2084703a 	and	r2,r4,r2
 4012714:	9885883a 	add	r2,r19,r2
 4012718:	1880ee26 	beq	r3,r2,4012ad4 <_realloc_r+0x490>
 401271c:	81bfff04 	addi	r6,r16,-4
 4012720:	00800904 	movi	r2,36
 4012724:	1180b836 	bltu	r2,r6,4012a08 <_realloc_r+0x3c4>
 4012728:	00c004c4 	movi	r3,19
 401272c:	19809636 	bltu	r3,r6,4012988 <_realloc_r+0x344>
 4012730:	9005883a 	mov	r2,r18
 4012734:	a807883a 	mov	r3,r21
 4012738:	19000017 	ldw	r4,0(r3)
 401273c:	11000015 	stw	r4,0(r2)
 4012740:	19000117 	ldw	r4,4(r3)
 4012744:	11000115 	stw	r4,4(r2)
 4012748:	18c00217 	ldw	r3,8(r3)
 401274c:	10c00215 	stw	r3,8(r2)
 4012750:	a80b883a 	mov	r5,r21
 4012754:	a009883a 	mov	r4,r20
 4012758:	40105ec0 	call	40105ec <_free_r>
 401275c:	a009883a 	mov	r4,r20
 4012760:	40187840 	call	4018784 <__malloc_unlock>
 4012764:	9005883a 	mov	r2,r18
 4012768:	00001206 	br	40127b4 <_realloc_r+0x170>
 401276c:	00c00404 	movi	r3,16
 4012770:	1823883a 	mov	r17,r3
 4012774:	003fce06 	br	40126b0 <__alt_data_end+0xfc0126b0>
 4012778:	a825883a 	mov	r18,r21
 401277c:	8445c83a 	sub	r2,r16,r17
 4012780:	00c003c4 	movi	r3,15
 4012784:	18802636 	bltu	r3,r2,4012820 <_realloc_r+0x1dc>
 4012788:	99800117 	ldw	r6,4(r19)
 401278c:	9c07883a 	add	r3,r19,r16
 4012790:	3180004c 	andi	r6,r6,1
 4012794:	3420b03a 	or	r16,r6,r16
 4012798:	9c000115 	stw	r16,4(r19)
 401279c:	18800117 	ldw	r2,4(r3)
 40127a0:	10800054 	ori	r2,r2,1
 40127a4:	18800115 	stw	r2,4(r3)
 40127a8:	a009883a 	mov	r4,r20
 40127ac:	40187840 	call	4018784 <__malloc_unlock>
 40127b0:	9005883a 	mov	r2,r18
 40127b4:	dfc00917 	ldw	ra,36(sp)
 40127b8:	df000817 	ldw	fp,32(sp)
 40127bc:	ddc00717 	ldw	r23,28(sp)
 40127c0:	dd800617 	ldw	r22,24(sp)
 40127c4:	dd400517 	ldw	r21,20(sp)
 40127c8:	dd000417 	ldw	r20,16(sp)
 40127cc:	dcc00317 	ldw	r19,12(sp)
 40127d0:	dc800217 	ldw	r18,8(sp)
 40127d4:	dc400117 	ldw	r17,4(sp)
 40127d8:	dc000017 	ldw	r16,0(sp)
 40127dc:	dec00a04 	addi	sp,sp,40
 40127e0:	f800283a 	ret
 40127e4:	017fff04 	movi	r5,-4
 40127e8:	414a703a 	and	r5,r8,r5
 40127ec:	814d883a 	add	r6,r16,r5
 40127f0:	30c01f16 	blt	r6,r3,4012870 <_realloc_r+0x22c>
 40127f4:	20800317 	ldw	r2,12(r4)
 40127f8:	20c00217 	ldw	r3,8(r4)
 40127fc:	a825883a 	mov	r18,r21
 4012800:	3021883a 	mov	r16,r6
 4012804:	18800315 	stw	r2,12(r3)
 4012808:	10c00215 	stw	r3,8(r2)
 401280c:	003fdb06 	br	401277c <__alt_data_end+0xfc01277c>
 4012810:	00800304 	movi	r2,12
 4012814:	a0800015 	stw	r2,0(r20)
 4012818:	0005883a 	mov	r2,zero
 401281c:	003fe506 	br	40127b4 <__alt_data_end+0xfc0127b4>
 4012820:	98c00117 	ldw	r3,4(r19)
 4012824:	9c4b883a 	add	r5,r19,r17
 4012828:	11000054 	ori	r4,r2,1
 401282c:	18c0004c 	andi	r3,r3,1
 4012830:	1c62b03a 	or	r17,r3,r17
 4012834:	9c400115 	stw	r17,4(r19)
 4012838:	29000115 	stw	r4,4(r5)
 401283c:	2885883a 	add	r2,r5,r2
 4012840:	10c00117 	ldw	r3,4(r2)
 4012844:	29400204 	addi	r5,r5,8
 4012848:	a009883a 	mov	r4,r20
 401284c:	18c00054 	ori	r3,r3,1
 4012850:	10c00115 	stw	r3,4(r2)
 4012854:	40105ec0 	call	40105ec <_free_r>
 4012858:	003fd306 	br	40127a8 <__alt_data_end+0xfc0127a8>
 401285c:	017fff04 	movi	r5,-4
 4012860:	414a703a 	and	r5,r8,r5
 4012864:	89800404 	addi	r6,r17,16
 4012868:	8151883a 	add	r8,r16,r5
 401286c:	4180590e 	bge	r8,r6,40129d4 <_realloc_r+0x390>
 4012870:	1080004c 	andi	r2,r2,1
 4012874:	103f9e1e 	bne	r2,zero,40126f0 <__alt_data_end+0xfc0126f0>
 4012878:	adbffe17 	ldw	r22,-8(r21)
 401287c:	00bfff04 	movi	r2,-4
 4012880:	9dadc83a 	sub	r22,r19,r22
 4012884:	b1800117 	ldw	r6,4(r22)
 4012888:	3084703a 	and	r2,r6,r2
 401288c:	20002026 	beq	r4,zero,4012910 <_realloc_r+0x2cc>
 4012890:	80af883a 	add	r23,r16,r2
 4012894:	b96f883a 	add	r23,r23,r5
 4012898:	21c05f26 	beq	r4,r7,4012a18 <_realloc_r+0x3d4>
 401289c:	b8c01c16 	blt	r23,r3,4012910 <_realloc_r+0x2cc>
 40128a0:	20800317 	ldw	r2,12(r4)
 40128a4:	20c00217 	ldw	r3,8(r4)
 40128a8:	81bfff04 	addi	r6,r16,-4
 40128ac:	01000904 	movi	r4,36
 40128b0:	18800315 	stw	r2,12(r3)
 40128b4:	10c00215 	stw	r3,8(r2)
 40128b8:	b0c00217 	ldw	r3,8(r22)
 40128bc:	b0800317 	ldw	r2,12(r22)
 40128c0:	b4800204 	addi	r18,r22,8
 40128c4:	18800315 	stw	r2,12(r3)
 40128c8:	10c00215 	stw	r3,8(r2)
 40128cc:	21801b36 	bltu	r4,r6,401293c <_realloc_r+0x2f8>
 40128d0:	008004c4 	movi	r2,19
 40128d4:	1180352e 	bgeu	r2,r6,40129ac <_realloc_r+0x368>
 40128d8:	a8800017 	ldw	r2,0(r21)
 40128dc:	b0800215 	stw	r2,8(r22)
 40128e0:	a8800117 	ldw	r2,4(r21)
 40128e4:	b0800315 	stw	r2,12(r22)
 40128e8:	008006c4 	movi	r2,27
 40128ec:	11807f36 	bltu	r2,r6,4012aec <_realloc_r+0x4a8>
 40128f0:	b0800404 	addi	r2,r22,16
 40128f4:	ad400204 	addi	r21,r21,8
 40128f8:	00002d06 	br	40129b0 <_realloc_r+0x36c>
 40128fc:	adbffe17 	ldw	r22,-8(r21)
 4012900:	00bfff04 	movi	r2,-4
 4012904:	9dadc83a 	sub	r22,r19,r22
 4012908:	b1000117 	ldw	r4,4(r22)
 401290c:	2084703a 	and	r2,r4,r2
 4012910:	b03f7726 	beq	r22,zero,40126f0 <__alt_data_end+0xfc0126f0>
 4012914:	80af883a 	add	r23,r16,r2
 4012918:	b8ff7516 	blt	r23,r3,40126f0 <__alt_data_end+0xfc0126f0>
 401291c:	b0800317 	ldw	r2,12(r22)
 4012920:	b0c00217 	ldw	r3,8(r22)
 4012924:	81bfff04 	addi	r6,r16,-4
 4012928:	01000904 	movi	r4,36
 401292c:	18800315 	stw	r2,12(r3)
 4012930:	10c00215 	stw	r3,8(r2)
 4012934:	b4800204 	addi	r18,r22,8
 4012938:	21bfe52e 	bgeu	r4,r6,40128d0 <__alt_data_end+0xfc0128d0>
 401293c:	a80b883a 	mov	r5,r21
 4012940:	9009883a 	mov	r4,r18
 4012944:	40112c80 	call	40112c8 <memmove>
 4012948:	b821883a 	mov	r16,r23
 401294c:	b027883a 	mov	r19,r22
 4012950:	003f8a06 	br	401277c <__alt_data_end+0xfc01277c>
 4012954:	300b883a 	mov	r5,r6
 4012958:	dfc00917 	ldw	ra,36(sp)
 401295c:	df000817 	ldw	fp,32(sp)
 4012960:	ddc00717 	ldw	r23,28(sp)
 4012964:	dd800617 	ldw	r22,24(sp)
 4012968:	dd400517 	ldw	r21,20(sp)
 401296c:	dd000417 	ldw	r20,16(sp)
 4012970:	dcc00317 	ldw	r19,12(sp)
 4012974:	dc800217 	ldw	r18,8(sp)
 4012978:	dc400117 	ldw	r17,4(sp)
 401297c:	dc000017 	ldw	r16,0(sp)
 4012980:	dec00a04 	addi	sp,sp,40
 4012984:	400b0081 	jmpi	400b008 <_malloc_r>
 4012988:	a8c00017 	ldw	r3,0(r21)
 401298c:	90c00015 	stw	r3,0(r18)
 4012990:	a8c00117 	ldw	r3,4(r21)
 4012994:	90c00115 	stw	r3,4(r18)
 4012998:	00c006c4 	movi	r3,27
 401299c:	19804536 	bltu	r3,r6,4012ab4 <_realloc_r+0x470>
 40129a0:	90800204 	addi	r2,r18,8
 40129a4:	a8c00204 	addi	r3,r21,8
 40129a8:	003f6306 	br	4012738 <__alt_data_end+0xfc012738>
 40129ac:	9005883a 	mov	r2,r18
 40129b0:	a8c00017 	ldw	r3,0(r21)
 40129b4:	b821883a 	mov	r16,r23
 40129b8:	b027883a 	mov	r19,r22
 40129bc:	10c00015 	stw	r3,0(r2)
 40129c0:	a8c00117 	ldw	r3,4(r21)
 40129c4:	10c00115 	stw	r3,4(r2)
 40129c8:	a8c00217 	ldw	r3,8(r21)
 40129cc:	10c00215 	stw	r3,8(r2)
 40129d0:	003f6a06 	br	401277c <__alt_data_end+0xfc01277c>
 40129d4:	9c67883a 	add	r19,r19,r17
 40129d8:	4445c83a 	sub	r2,r8,r17
 40129dc:	e4c00215 	stw	r19,8(fp)
 40129e0:	10800054 	ori	r2,r2,1
 40129e4:	98800115 	stw	r2,4(r19)
 40129e8:	a8bfff17 	ldw	r2,-4(r21)
 40129ec:	a009883a 	mov	r4,r20
 40129f0:	1080004c 	andi	r2,r2,1
 40129f4:	1462b03a 	or	r17,r2,r17
 40129f8:	ac7fff15 	stw	r17,-4(r21)
 40129fc:	40187840 	call	4018784 <__malloc_unlock>
 4012a00:	a805883a 	mov	r2,r21
 4012a04:	003f6b06 	br	40127b4 <__alt_data_end+0xfc0127b4>
 4012a08:	a80b883a 	mov	r5,r21
 4012a0c:	9009883a 	mov	r4,r18
 4012a10:	40112c80 	call	40112c8 <memmove>
 4012a14:	003f4e06 	br	4012750 <__alt_data_end+0xfc012750>
 4012a18:	89000404 	addi	r4,r17,16
 4012a1c:	b93fbc16 	blt	r23,r4,4012910 <__alt_data_end+0xfc012910>
 4012a20:	b0800317 	ldw	r2,12(r22)
 4012a24:	b0c00217 	ldw	r3,8(r22)
 4012a28:	81bfff04 	addi	r6,r16,-4
 4012a2c:	01000904 	movi	r4,36
 4012a30:	18800315 	stw	r2,12(r3)
 4012a34:	10c00215 	stw	r3,8(r2)
 4012a38:	b4800204 	addi	r18,r22,8
 4012a3c:	21804336 	bltu	r4,r6,4012b4c <_realloc_r+0x508>
 4012a40:	008004c4 	movi	r2,19
 4012a44:	11803f2e 	bgeu	r2,r6,4012b44 <_realloc_r+0x500>
 4012a48:	a8800017 	ldw	r2,0(r21)
 4012a4c:	b0800215 	stw	r2,8(r22)
 4012a50:	a8800117 	ldw	r2,4(r21)
 4012a54:	b0800315 	stw	r2,12(r22)
 4012a58:	008006c4 	movi	r2,27
 4012a5c:	11803f36 	bltu	r2,r6,4012b5c <_realloc_r+0x518>
 4012a60:	b0800404 	addi	r2,r22,16
 4012a64:	ad400204 	addi	r21,r21,8
 4012a68:	a8c00017 	ldw	r3,0(r21)
 4012a6c:	10c00015 	stw	r3,0(r2)
 4012a70:	a8c00117 	ldw	r3,4(r21)
 4012a74:	10c00115 	stw	r3,4(r2)
 4012a78:	a8c00217 	ldw	r3,8(r21)
 4012a7c:	10c00215 	stw	r3,8(r2)
 4012a80:	b447883a 	add	r3,r22,r17
 4012a84:	bc45c83a 	sub	r2,r23,r17
 4012a88:	e0c00215 	stw	r3,8(fp)
 4012a8c:	10800054 	ori	r2,r2,1
 4012a90:	18800115 	stw	r2,4(r3)
 4012a94:	b0800117 	ldw	r2,4(r22)
 4012a98:	a009883a 	mov	r4,r20
 4012a9c:	1080004c 	andi	r2,r2,1
 4012aa0:	1462b03a 	or	r17,r2,r17
 4012aa4:	b4400115 	stw	r17,4(r22)
 4012aa8:	40187840 	call	4018784 <__malloc_unlock>
 4012aac:	9005883a 	mov	r2,r18
 4012ab0:	003f4006 	br	40127b4 <__alt_data_end+0xfc0127b4>
 4012ab4:	a8c00217 	ldw	r3,8(r21)
 4012ab8:	90c00215 	stw	r3,8(r18)
 4012abc:	a8c00317 	ldw	r3,12(r21)
 4012ac0:	90c00315 	stw	r3,12(r18)
 4012ac4:	30801126 	beq	r6,r2,4012b0c <_realloc_r+0x4c8>
 4012ac8:	90800404 	addi	r2,r18,16
 4012acc:	a8c00404 	addi	r3,r21,16
 4012ad0:	003f1906 	br	4012738 <__alt_data_end+0xfc012738>
 4012ad4:	90ffff17 	ldw	r3,-4(r18)
 4012ad8:	00bfff04 	movi	r2,-4
 4012adc:	a825883a 	mov	r18,r21
 4012ae0:	1884703a 	and	r2,r3,r2
 4012ae4:	80a1883a 	add	r16,r16,r2
 4012ae8:	003f2406 	br	401277c <__alt_data_end+0xfc01277c>
 4012aec:	a8800217 	ldw	r2,8(r21)
 4012af0:	b0800415 	stw	r2,16(r22)
 4012af4:	a8800317 	ldw	r2,12(r21)
 4012af8:	b0800515 	stw	r2,20(r22)
 4012afc:	31000a26 	beq	r6,r4,4012b28 <_realloc_r+0x4e4>
 4012b00:	b0800604 	addi	r2,r22,24
 4012b04:	ad400404 	addi	r21,r21,16
 4012b08:	003fa906 	br	40129b0 <__alt_data_end+0xfc0129b0>
 4012b0c:	a9000417 	ldw	r4,16(r21)
 4012b10:	90800604 	addi	r2,r18,24
 4012b14:	a8c00604 	addi	r3,r21,24
 4012b18:	91000415 	stw	r4,16(r18)
 4012b1c:	a9000517 	ldw	r4,20(r21)
 4012b20:	91000515 	stw	r4,20(r18)
 4012b24:	003f0406 	br	4012738 <__alt_data_end+0xfc012738>
 4012b28:	a8c00417 	ldw	r3,16(r21)
 4012b2c:	ad400604 	addi	r21,r21,24
 4012b30:	b0800804 	addi	r2,r22,32
 4012b34:	b0c00615 	stw	r3,24(r22)
 4012b38:	a8ffff17 	ldw	r3,-4(r21)
 4012b3c:	b0c00715 	stw	r3,28(r22)
 4012b40:	003f9b06 	br	40129b0 <__alt_data_end+0xfc0129b0>
 4012b44:	9005883a 	mov	r2,r18
 4012b48:	003fc706 	br	4012a68 <__alt_data_end+0xfc012a68>
 4012b4c:	a80b883a 	mov	r5,r21
 4012b50:	9009883a 	mov	r4,r18
 4012b54:	40112c80 	call	40112c8 <memmove>
 4012b58:	003fc906 	br	4012a80 <__alt_data_end+0xfc012a80>
 4012b5c:	a8800217 	ldw	r2,8(r21)
 4012b60:	b0800415 	stw	r2,16(r22)
 4012b64:	a8800317 	ldw	r2,12(r21)
 4012b68:	b0800515 	stw	r2,20(r22)
 4012b6c:	31000726 	beq	r6,r4,4012b8c <_realloc_r+0x548>
 4012b70:	b0800604 	addi	r2,r22,24
 4012b74:	ad400404 	addi	r21,r21,16
 4012b78:	003fbb06 	br	4012a68 <__alt_data_end+0xfc012a68>
 4012b7c:	a009883a 	mov	r4,r20
 4012b80:	40187840 	call	4018784 <__malloc_unlock>
 4012b84:	0005883a 	mov	r2,zero
 4012b88:	003f0a06 	br	40127b4 <__alt_data_end+0xfc0127b4>
 4012b8c:	a8c00417 	ldw	r3,16(r21)
 4012b90:	ad400604 	addi	r21,r21,24
 4012b94:	b0800804 	addi	r2,r22,32
 4012b98:	b0c00615 	stw	r3,24(r22)
 4012b9c:	a8ffff17 	ldw	r3,-4(r21)
 4012ba0:	b0c00715 	stw	r3,28(r22)
 4012ba4:	003fb006 	br	4012a68 <__alt_data_end+0xfc012a68>

04012ba8 <__fpclassifyd>:
 4012ba8:	00a00034 	movhi	r2,32768
 4012bac:	10bfffc4 	addi	r2,r2,-1
 4012bb0:	2884703a 	and	r2,r5,r2
 4012bb4:	10000726 	beq	r2,zero,4012bd4 <__fpclassifyd+0x2c>
 4012bb8:	00fffc34 	movhi	r3,65520
 4012bbc:	019ff834 	movhi	r6,32736
 4012bc0:	28c7883a 	add	r3,r5,r3
 4012bc4:	31bfffc4 	addi	r6,r6,-1
 4012bc8:	30c00536 	bltu	r6,r3,4012be0 <__fpclassifyd+0x38>
 4012bcc:	00800104 	movi	r2,4
 4012bd0:	f800283a 	ret
 4012bd4:	2000021e 	bne	r4,zero,4012be0 <__fpclassifyd+0x38>
 4012bd8:	00800084 	movi	r2,2
 4012bdc:	f800283a 	ret
 4012be0:	00dffc34 	movhi	r3,32752
 4012be4:	019ff834 	movhi	r6,32736
 4012be8:	28cb883a 	add	r5,r5,r3
 4012bec:	31bfffc4 	addi	r6,r6,-1
 4012bf0:	317ff62e 	bgeu	r6,r5,4012bcc <__alt_data_end+0xfc012bcc>
 4012bf4:	01400434 	movhi	r5,16
 4012bf8:	297fffc4 	addi	r5,r5,-1
 4012bfc:	28800236 	bltu	r5,r2,4012c08 <__fpclassifyd+0x60>
 4012c00:	008000c4 	movi	r2,3
 4012c04:	f800283a 	ret
 4012c08:	10c00226 	beq	r2,r3,4012c14 <__fpclassifyd+0x6c>
 4012c0c:	0005883a 	mov	r2,zero
 4012c10:	f800283a 	ret
 4012c14:	2005003a 	cmpeq	r2,r4,zero
 4012c18:	f800283a 	ret

04012c1c <__sread>:
 4012c1c:	defffe04 	addi	sp,sp,-8
 4012c20:	dc000015 	stw	r16,0(sp)
 4012c24:	2821883a 	mov	r16,r5
 4012c28:	2940038f 	ldh	r5,14(r5)
 4012c2c:	dfc00115 	stw	ra,4(sp)
 4012c30:	4014b540 	call	4014b54 <_read_r>
 4012c34:	10000716 	blt	r2,zero,4012c54 <__sread+0x38>
 4012c38:	80c01417 	ldw	r3,80(r16)
 4012c3c:	1887883a 	add	r3,r3,r2
 4012c40:	80c01415 	stw	r3,80(r16)
 4012c44:	dfc00117 	ldw	ra,4(sp)
 4012c48:	dc000017 	ldw	r16,0(sp)
 4012c4c:	dec00204 	addi	sp,sp,8
 4012c50:	f800283a 	ret
 4012c54:	80c0030b 	ldhu	r3,12(r16)
 4012c58:	18fbffcc 	andi	r3,r3,61439
 4012c5c:	80c0030d 	sth	r3,12(r16)
 4012c60:	dfc00117 	ldw	ra,4(sp)
 4012c64:	dc000017 	ldw	r16,0(sp)
 4012c68:	dec00204 	addi	sp,sp,8
 4012c6c:	f800283a 	ret

04012c70 <__seofread>:
 4012c70:	0005883a 	mov	r2,zero
 4012c74:	f800283a 	ret

04012c78 <__swrite>:
 4012c78:	2880030b 	ldhu	r2,12(r5)
 4012c7c:	defffb04 	addi	sp,sp,-20
 4012c80:	dcc00315 	stw	r19,12(sp)
 4012c84:	dc800215 	stw	r18,8(sp)
 4012c88:	dc400115 	stw	r17,4(sp)
 4012c8c:	dc000015 	stw	r16,0(sp)
 4012c90:	dfc00415 	stw	ra,16(sp)
 4012c94:	10c0400c 	andi	r3,r2,256
 4012c98:	2821883a 	mov	r16,r5
 4012c9c:	2023883a 	mov	r17,r4
 4012ca0:	3025883a 	mov	r18,r6
 4012ca4:	3827883a 	mov	r19,r7
 4012ca8:	18000526 	beq	r3,zero,4012cc0 <__swrite+0x48>
 4012cac:	2940038f 	ldh	r5,14(r5)
 4012cb0:	01c00084 	movi	r7,2
 4012cb4:	000d883a 	mov	r6,zero
 4012cb8:	4014af40 	call	4014af4 <_lseek_r>
 4012cbc:	8080030b 	ldhu	r2,12(r16)
 4012cc0:	8140038f 	ldh	r5,14(r16)
 4012cc4:	10bbffcc 	andi	r2,r2,61439
 4012cc8:	980f883a 	mov	r7,r19
 4012ccc:	900d883a 	mov	r6,r18
 4012cd0:	8809883a 	mov	r4,r17
 4012cd4:	8080030d 	sth	r2,12(r16)
 4012cd8:	dfc00417 	ldw	ra,16(sp)
 4012cdc:	dcc00317 	ldw	r19,12(sp)
 4012ce0:	dc800217 	ldw	r18,8(sp)
 4012ce4:	dc400117 	ldw	r17,4(sp)
 4012ce8:	dc000017 	ldw	r16,0(sp)
 4012cec:	dec00504 	addi	sp,sp,20
 4012cf0:	40145a81 	jmpi	40145a8 <_write_r>

04012cf4 <__sseek>:
 4012cf4:	defffe04 	addi	sp,sp,-8
 4012cf8:	dc000015 	stw	r16,0(sp)
 4012cfc:	2821883a 	mov	r16,r5
 4012d00:	2940038f 	ldh	r5,14(r5)
 4012d04:	dfc00115 	stw	ra,4(sp)
 4012d08:	4014af40 	call	4014af4 <_lseek_r>
 4012d0c:	00ffffc4 	movi	r3,-1
 4012d10:	10c00826 	beq	r2,r3,4012d34 <__sseek+0x40>
 4012d14:	80c0030b 	ldhu	r3,12(r16)
 4012d18:	80801415 	stw	r2,80(r16)
 4012d1c:	18c40014 	ori	r3,r3,4096
 4012d20:	80c0030d 	sth	r3,12(r16)
 4012d24:	dfc00117 	ldw	ra,4(sp)
 4012d28:	dc000017 	ldw	r16,0(sp)
 4012d2c:	dec00204 	addi	sp,sp,8
 4012d30:	f800283a 	ret
 4012d34:	80c0030b 	ldhu	r3,12(r16)
 4012d38:	18fbffcc 	andi	r3,r3,61439
 4012d3c:	80c0030d 	sth	r3,12(r16)
 4012d40:	dfc00117 	ldw	ra,4(sp)
 4012d44:	dc000017 	ldw	r16,0(sp)
 4012d48:	dec00204 	addi	sp,sp,8
 4012d4c:	f800283a 	ret

04012d50 <__sclose>:
 4012d50:	2940038f 	ldh	r5,14(r5)
 4012d54:	40146081 	jmpi	4014608 <_close_r>

04012d58 <__sprint_r.part.0>:
 4012d58:	28801917 	ldw	r2,100(r5)
 4012d5c:	defff604 	addi	sp,sp,-40
 4012d60:	dd400515 	stw	r21,20(sp)
 4012d64:	dfc00915 	stw	ra,36(sp)
 4012d68:	df000815 	stw	fp,32(sp)
 4012d6c:	ddc00715 	stw	r23,28(sp)
 4012d70:	dd800615 	stw	r22,24(sp)
 4012d74:	dd000415 	stw	r20,16(sp)
 4012d78:	dcc00315 	stw	r19,12(sp)
 4012d7c:	dc800215 	stw	r18,8(sp)
 4012d80:	dc400115 	stw	r17,4(sp)
 4012d84:	dc000015 	stw	r16,0(sp)
 4012d88:	1088000c 	andi	r2,r2,8192
 4012d8c:	302b883a 	mov	r21,r6
 4012d90:	10002e26 	beq	r2,zero,4012e4c <__sprint_r.part.0+0xf4>
 4012d94:	30800217 	ldw	r2,8(r6)
 4012d98:	35800017 	ldw	r22,0(r6)
 4012d9c:	10002926 	beq	r2,zero,4012e44 <__sprint_r.part.0+0xec>
 4012da0:	2827883a 	mov	r19,r5
 4012da4:	2029883a 	mov	r20,r4
 4012da8:	b5c00104 	addi	r23,r22,4
 4012dac:	04bfffc4 	movi	r18,-1
 4012db0:	bc400017 	ldw	r17,0(r23)
 4012db4:	b4000017 	ldw	r16,0(r22)
 4012db8:	0039883a 	mov	fp,zero
 4012dbc:	8822d0ba 	srli	r17,r17,2
 4012dc0:	8800031e 	bne	r17,zero,4012dd0 <__sprint_r.part.0+0x78>
 4012dc4:	00001806 	br	4012e28 <__sprint_r.part.0+0xd0>
 4012dc8:	84000104 	addi	r16,r16,4
 4012dcc:	8f001526 	beq	r17,fp,4012e24 <__sprint_r.part.0+0xcc>
 4012dd0:	81400017 	ldw	r5,0(r16)
 4012dd4:	980d883a 	mov	r6,r19
 4012dd8:	a009883a 	mov	r4,r20
 4012ddc:	40149a00 	call	40149a0 <_fputwc_r>
 4012de0:	e7000044 	addi	fp,fp,1
 4012de4:	14bff81e 	bne	r2,r18,4012dc8 <__alt_data_end+0xfc012dc8>
 4012de8:	9005883a 	mov	r2,r18
 4012dec:	a8000215 	stw	zero,8(r21)
 4012df0:	a8000115 	stw	zero,4(r21)
 4012df4:	dfc00917 	ldw	ra,36(sp)
 4012df8:	df000817 	ldw	fp,32(sp)
 4012dfc:	ddc00717 	ldw	r23,28(sp)
 4012e00:	dd800617 	ldw	r22,24(sp)
 4012e04:	dd400517 	ldw	r21,20(sp)
 4012e08:	dd000417 	ldw	r20,16(sp)
 4012e0c:	dcc00317 	ldw	r19,12(sp)
 4012e10:	dc800217 	ldw	r18,8(sp)
 4012e14:	dc400117 	ldw	r17,4(sp)
 4012e18:	dc000017 	ldw	r16,0(sp)
 4012e1c:	dec00a04 	addi	sp,sp,40
 4012e20:	f800283a 	ret
 4012e24:	a8800217 	ldw	r2,8(r21)
 4012e28:	8c63883a 	add	r17,r17,r17
 4012e2c:	8c63883a 	add	r17,r17,r17
 4012e30:	1445c83a 	sub	r2,r2,r17
 4012e34:	a8800215 	stw	r2,8(r21)
 4012e38:	b5800204 	addi	r22,r22,8
 4012e3c:	bdc00204 	addi	r23,r23,8
 4012e40:	103fdb1e 	bne	r2,zero,4012db0 <__alt_data_end+0xfc012db0>
 4012e44:	0005883a 	mov	r2,zero
 4012e48:	003fe806 	br	4012dec <__alt_data_end+0xfc012dec>
 4012e4c:	40108fc0 	call	40108fc <__sfvwrite_r>
 4012e50:	003fe606 	br	4012dec <__alt_data_end+0xfc012dec>

04012e54 <__sprint_r>:
 4012e54:	30c00217 	ldw	r3,8(r6)
 4012e58:	18000126 	beq	r3,zero,4012e60 <__sprint_r+0xc>
 4012e5c:	4012d581 	jmpi	4012d58 <__sprint_r.part.0>
 4012e60:	30000115 	stw	zero,4(r6)
 4012e64:	0005883a 	mov	r2,zero
 4012e68:	f800283a 	ret

04012e6c <___vfiprintf_internal_r>:
 4012e6c:	deffca04 	addi	sp,sp,-216
 4012e70:	dd403115 	stw	r21,196(sp)
 4012e74:	dfc03515 	stw	ra,212(sp)
 4012e78:	df003415 	stw	fp,208(sp)
 4012e7c:	ddc03315 	stw	r23,204(sp)
 4012e80:	dd803215 	stw	r22,200(sp)
 4012e84:	dd003015 	stw	r20,192(sp)
 4012e88:	dcc02f15 	stw	r19,188(sp)
 4012e8c:	dc802e15 	stw	r18,184(sp)
 4012e90:	dc402d15 	stw	r17,180(sp)
 4012e94:	dc002c15 	stw	r16,176(sp)
 4012e98:	d9002115 	stw	r4,132(sp)
 4012e9c:	d9402015 	stw	r5,128(sp)
 4012ea0:	d9c02215 	stw	r7,136(sp)
 4012ea4:	302b883a 	mov	r21,r6
 4012ea8:	20000226 	beq	r4,zero,4012eb4 <___vfiprintf_internal_r+0x48>
 4012eac:	20800e17 	ldw	r2,56(r4)
 4012eb0:	1000cf26 	beq	r2,zero,40131f0 <___vfiprintf_internal_r+0x384>
 4012eb4:	d8c02017 	ldw	r3,128(sp)
 4012eb8:	1880030b 	ldhu	r2,12(r3)
 4012ebc:	10c8000c 	andi	r3,r2,8192
 4012ec0:	1800071e 	bne	r3,zero,4012ee0 <___vfiprintf_internal_r+0x74>
 4012ec4:	d9402017 	ldw	r5,128(sp)
 4012ec8:	00f7ffc4 	movi	r3,-8193
 4012ecc:	10880014 	ori	r2,r2,8192
 4012ed0:	29001917 	ldw	r4,100(r5)
 4012ed4:	2880030d 	sth	r2,12(r5)
 4012ed8:	20c6703a 	and	r3,r4,r3
 4012edc:	28c01915 	stw	r3,100(r5)
 4012ee0:	10c0020c 	andi	r3,r2,8
 4012ee4:	1800a526 	beq	r3,zero,401317c <___vfiprintf_internal_r+0x310>
 4012ee8:	d9002017 	ldw	r4,128(sp)
 4012eec:	20c00417 	ldw	r3,16(r4)
 4012ef0:	1800a226 	beq	r3,zero,401317c <___vfiprintf_internal_r+0x310>
 4012ef4:	1080068c 	andi	r2,r2,26
 4012ef8:	00c00284 	movi	r3,10
 4012efc:	10c0a826 	beq	r2,r3,40131a0 <___vfiprintf_internal_r+0x334>
 4012f00:	d9001a04 	addi	r4,sp,104
 4012f04:	d94019c4 	addi	r5,sp,103
 4012f08:	048100b4 	movhi	r18,1026
 4012f0c:	2145c83a 	sub	r2,r4,r5
 4012f10:	94873d04 	addi	r18,r18,7412
 4012f14:	d9001e15 	stw	r4,120(sp)
 4012f18:	d9401f15 	stw	r5,124(sp)
 4012f1c:	dec01a15 	stw	sp,104(sp)
 4012f20:	d8001c15 	stw	zero,112(sp)
 4012f24:	d8001b15 	stw	zero,108(sp)
 4012f28:	d811883a 	mov	r8,sp
 4012f2c:	d8002615 	stw	zero,152(sp)
 4012f30:	d8002415 	stw	zero,144(sp)
 4012f34:	d8802815 	stw	r2,160(sp)
 4012f38:	a82d883a 	mov	r22,r21
 4012f3c:	b0800007 	ldb	r2,0(r22)
 4012f40:	10040d26 	beq	r2,zero,4013f78 <___vfiprintf_internal_r+0x110c>
 4012f44:	00c00944 	movi	r3,37
 4012f48:	b029883a 	mov	r20,r22
 4012f4c:	10c0021e 	bne	r2,r3,4012f58 <___vfiprintf_internal_r+0xec>
 4012f50:	00001606 	br	4012fac <___vfiprintf_internal_r+0x140>
 4012f54:	10c00326 	beq	r2,r3,4012f64 <___vfiprintf_internal_r+0xf8>
 4012f58:	a5000044 	addi	r20,r20,1
 4012f5c:	a0800007 	ldb	r2,0(r20)
 4012f60:	103ffc1e 	bne	r2,zero,4012f54 <__alt_data_end+0xfc012f54>
 4012f64:	a5a1c83a 	sub	r16,r20,r22
 4012f68:	80001026 	beq	r16,zero,4012fac <___vfiprintf_internal_r+0x140>
 4012f6c:	d8c01c17 	ldw	r3,112(sp)
 4012f70:	d8801b17 	ldw	r2,108(sp)
 4012f74:	45800015 	stw	r22,0(r8)
 4012f78:	80c7883a 	add	r3,r16,r3
 4012f7c:	10800044 	addi	r2,r2,1
 4012f80:	44000115 	stw	r16,4(r8)
 4012f84:	d8c01c15 	stw	r3,112(sp)
 4012f88:	d8801b15 	stw	r2,108(sp)
 4012f8c:	010001c4 	movi	r4,7
 4012f90:	2080750e 	bge	r4,r2,4013168 <___vfiprintf_internal_r+0x2fc>
 4012f94:	1803951e 	bne	r3,zero,4013dec <___vfiprintf_internal_r+0xf80>
 4012f98:	d8c02417 	ldw	r3,144(sp)
 4012f9c:	d8001b15 	stw	zero,108(sp)
 4012fa0:	d811883a 	mov	r8,sp
 4012fa4:	1c07883a 	add	r3,r3,r16
 4012fa8:	d8c02415 	stw	r3,144(sp)
 4012fac:	a0800007 	ldb	r2,0(r20)
 4012fb0:	1002e026 	beq	r2,zero,4013b34 <___vfiprintf_internal_r+0xcc8>
 4012fb4:	a5800044 	addi	r22,r20,1
 4012fb8:	a0c00047 	ldb	r3,1(r20)
 4012fbc:	d8001d85 	stb	zero,118(sp)
 4012fc0:	0027883a 	mov	r19,zero
 4012fc4:	d8002305 	stb	zero,140(sp)
 4012fc8:	043fffc4 	movi	r16,-1
 4012fcc:	d8002515 	stw	zero,148(sp)
 4012fd0:	0023883a 	mov	r17,zero
 4012fd4:	05001604 	movi	r20,88
 4012fd8:	05400244 	movi	r21,9
 4012fdc:	402f883a 	mov	r23,r8
 4012fe0:	b5800044 	addi	r22,r22,1
 4012fe4:	18bff804 	addi	r2,r3,-32
 4012fe8:	a0827736 	bltu	r20,r2,40139c8 <___vfiprintf_internal_r+0xb5c>
 4012fec:	100490ba 	slli	r2,r2,2
 4012ff0:	01010074 	movhi	r4,1025
 4012ff4:	210c0104 	addi	r4,r4,12292
 4012ff8:	1105883a 	add	r2,r2,r4
 4012ffc:	10800017 	ldw	r2,0(r2)
 4013000:	1000683a 	jmp	r2
 4013004:	040136c8 	cmpgei	r16,zero,1243
 4013008:	040139c8 	cmpgei	r16,zero,1255
 401300c:	040139c8 	cmpgei	r16,zero,1255
 4013010:	040136e4 	muli	r16,zero,1243
 4013014:	040139c8 	cmpgei	r16,zero,1255
 4013018:	040139c8 	cmpgei	r16,zero,1255
 401301c:	040139c8 	cmpgei	r16,zero,1255
 4013020:	040139c8 	cmpgei	r16,zero,1255
 4013024:	040139c8 	cmpgei	r16,zero,1255
 4013028:	040139c8 	cmpgei	r16,zero,1255
 401302c:	040138ec 	andhi	r16,zero,1251
 4013030:	04013910 	cmplti	r16,zero,1252
 4013034:	040139c8 	cmpgei	r16,zero,1255
 4013038:	04013208 	cmpgei	r16,zero,1224
 401303c:	04013924 	muli	r16,zero,1252
 4013040:	040139c8 	cmpgei	r16,zero,1255
 4013044:	040136f0 	cmpltui	r16,zero,1243
 4013048:	040136fc 	xorhi	r16,zero,1243
 401304c:	040136fc 	xorhi	r16,zero,1243
 4013050:	040136fc 	xorhi	r16,zero,1243
 4013054:	040136fc 	xorhi	r16,zero,1243
 4013058:	040136fc 	xorhi	r16,zero,1243
 401305c:	040136fc 	xorhi	r16,zero,1243
 4013060:	040136fc 	xorhi	r16,zero,1243
 4013064:	040136fc 	xorhi	r16,zero,1243
 4013068:	040136fc 	xorhi	r16,zero,1243
 401306c:	040139c8 	cmpgei	r16,zero,1255
 4013070:	040139c8 	cmpgei	r16,zero,1255
 4013074:	040139c8 	cmpgei	r16,zero,1255
 4013078:	040139c8 	cmpgei	r16,zero,1255
 401307c:	040139c8 	cmpgei	r16,zero,1255
 4013080:	040139c8 	cmpgei	r16,zero,1255
 4013084:	040139c8 	cmpgei	r16,zero,1255
 4013088:	040139c8 	cmpgei	r16,zero,1255
 401308c:	040139c8 	cmpgei	r16,zero,1255
 4013090:	040139c8 	cmpgei	r16,zero,1255
 4013094:	0401373c 	xorhi	r16,zero,1244
 4013098:	040139c8 	cmpgei	r16,zero,1255
 401309c:	040139c8 	cmpgei	r16,zero,1255
 40130a0:	040139c8 	cmpgei	r16,zero,1255
 40130a4:	040139c8 	cmpgei	r16,zero,1255
 40130a8:	040139c8 	cmpgei	r16,zero,1255
 40130ac:	040139c8 	cmpgei	r16,zero,1255
 40130b0:	040139c8 	cmpgei	r16,zero,1255
 40130b4:	040139c8 	cmpgei	r16,zero,1255
 40130b8:	040139c8 	cmpgei	r16,zero,1255
 40130bc:	040139c8 	cmpgei	r16,zero,1255
 40130c0:	04013778 	rdprs	r16,zero,1245
 40130c4:	040139c8 	cmpgei	r16,zero,1255
 40130c8:	040139c8 	cmpgei	r16,zero,1255
 40130cc:	040139c8 	cmpgei	r16,zero,1255
 40130d0:	040139c8 	cmpgei	r16,zero,1255
 40130d4:	040139c8 	cmpgei	r16,zero,1255
 40130d8:	040137d4 	movui	r16,1247
 40130dc:	040139c8 	cmpgei	r16,zero,1255
 40130e0:	040139c8 	cmpgei	r16,zero,1255
 40130e4:	04013848 	cmpgei	r16,zero,1249
 40130e8:	040139c8 	cmpgei	r16,zero,1255
 40130ec:	040139c8 	cmpgei	r16,zero,1255
 40130f0:	040139c8 	cmpgei	r16,zero,1255
 40130f4:	040139c8 	cmpgei	r16,zero,1255
 40130f8:	040139c8 	cmpgei	r16,zero,1255
 40130fc:	040139c8 	cmpgei	r16,zero,1255
 4013100:	040139c8 	cmpgei	r16,zero,1255
 4013104:	040139c8 	cmpgei	r16,zero,1255
 4013108:	040139c8 	cmpgei	r16,zero,1255
 401310c:	040139c8 	cmpgei	r16,zero,1255
 4013110:	040135f0 	cmpltui	r16,zero,1239
 4013114:	04013620 	cmpeqi	r16,zero,1240
 4013118:	040139c8 	cmpgei	r16,zero,1255
 401311c:	040139c8 	cmpgei	r16,zero,1255
 4013120:	040139c8 	cmpgei	r16,zero,1255
 4013124:	04013970 	cmpltui	r16,zero,1253
 4013128:	04013620 	cmpeqi	r16,zero,1240
 401312c:	040139c8 	cmpgei	r16,zero,1255
 4013130:	040139c8 	cmpgei	r16,zero,1255
 4013134:	040134c8 	cmpgei	r16,zero,1235
 4013138:	040139c8 	cmpgei	r16,zero,1255
 401313c:	040134dc 	xori	r16,zero,1235
 4013140:	04013514 	movui	r16,1236
 4013144:	04013214 	movui	r16,1224
 4013148:	040134bc 	xorhi	r16,zero,1234
 401314c:	040139c8 	cmpgei	r16,zero,1255
 4013150:	04013888 	cmpgei	r16,zero,1250
 4013154:	040139c8 	cmpgei	r16,zero,1255
 4013158:	040138d4 	movui	r16,1251
 401315c:	040139c8 	cmpgei	r16,zero,1255
 4013160:	040139c8 	cmpgei	r16,zero,1255
 4013164:	04013598 	cmpnei	r16,zero,1238
 4013168:	42000204 	addi	r8,r8,8
 401316c:	d8c02417 	ldw	r3,144(sp)
 4013170:	1c07883a 	add	r3,r3,r16
 4013174:	d8c02415 	stw	r3,144(sp)
 4013178:	003f8c06 	br	4012fac <__alt_data_end+0xfc012fac>
 401317c:	d9402017 	ldw	r5,128(sp)
 4013180:	d9002117 	ldw	r4,132(sp)
 4013184:	400e46c0 	call	400e46c <__swsetup_r>
 4013188:	1003c11e 	bne	r2,zero,4014090 <___vfiprintf_internal_r+0x1224>
 401318c:	d9402017 	ldw	r5,128(sp)
 4013190:	00c00284 	movi	r3,10
 4013194:	2880030b 	ldhu	r2,12(r5)
 4013198:	1080068c 	andi	r2,r2,26
 401319c:	10ff581e 	bne	r2,r3,4012f00 <__alt_data_end+0xfc012f00>
 40131a0:	d8c02017 	ldw	r3,128(sp)
 40131a4:	1880038f 	ldh	r2,14(r3)
 40131a8:	103f5516 	blt	r2,zero,4012f00 <__alt_data_end+0xfc012f00>
 40131ac:	d9c02217 	ldw	r7,136(sp)
 40131b0:	d9002117 	ldw	r4,132(sp)
 40131b4:	a80d883a 	mov	r6,r21
 40131b8:	180b883a 	mov	r5,r3
 40131bc:	40143940 	call	4014394 <__sbprintf>
 40131c0:	dfc03517 	ldw	ra,212(sp)
 40131c4:	df003417 	ldw	fp,208(sp)
 40131c8:	ddc03317 	ldw	r23,204(sp)
 40131cc:	dd803217 	ldw	r22,200(sp)
 40131d0:	dd403117 	ldw	r21,196(sp)
 40131d4:	dd003017 	ldw	r20,192(sp)
 40131d8:	dcc02f17 	ldw	r19,188(sp)
 40131dc:	dc802e17 	ldw	r18,184(sp)
 40131e0:	dc402d17 	ldw	r17,180(sp)
 40131e4:	dc002c17 	ldw	r16,176(sp)
 40131e8:	dec03604 	addi	sp,sp,216
 40131ec:	f800283a 	ret
 40131f0:	40104780 	call	4010478 <__sinit>
 40131f4:	003f2f06 	br	4012eb4 <__alt_data_end+0xfc012eb4>
 40131f8:	d8c02517 	ldw	r3,148(sp)
 40131fc:	d8802215 	stw	r2,136(sp)
 4013200:	00c7c83a 	sub	r3,zero,r3
 4013204:	d8c02515 	stw	r3,148(sp)
 4013208:	8c400114 	ori	r17,r17,4
 401320c:	b0c00007 	ldb	r3,0(r22)
 4013210:	003f7306 	br	4012fe0 <__alt_data_end+0xfc012fe0>
 4013214:	00800c04 	movi	r2,48
 4013218:	d9402217 	ldw	r5,136(sp)
 401321c:	d8801d05 	stb	r2,116(sp)
 4013220:	00801e04 	movi	r2,120
 4013224:	d8801d45 	stb	r2,117(sp)
 4013228:	d8001d85 	stb	zero,118(sp)
 401322c:	b811883a 	mov	r8,r23
 4013230:	28c00104 	addi	r3,r5,4
 4013234:	2cc00017 	ldw	r19,0(r5)
 4013238:	0029883a 	mov	r20,zero
 401323c:	88800094 	ori	r2,r17,2
 4013240:	80032516 	blt	r16,zero,4013ed8 <___vfiprintf_internal_r+0x106c>
 4013244:	00bfdfc4 	movi	r2,-129
 4013248:	88a2703a 	and	r17,r17,r2
 401324c:	d8c02215 	stw	r3,136(sp)
 4013250:	8c400094 	ori	r17,r17,2
 4013254:	98032a1e 	bne	r19,zero,4013f00 <___vfiprintf_internal_r+0x1094>
 4013258:	008100b4 	movhi	r2,1026
 401325c:	1086dd04 	addi	r2,r2,7028
 4013260:	d8802615 	stw	r2,152(sp)
 4013264:	002b883a 	mov	r21,zero
 4013268:	8001741e 	bne	r16,zero,401383c <___vfiprintf_internal_r+0x9d0>
 401326c:	0021883a 	mov	r16,zero
 4013270:	0029883a 	mov	r20,zero
 4013274:	ddc01a04 	addi	r23,sp,104
 4013278:	8027883a 	mov	r19,r16
 401327c:	8500010e 	bge	r16,r20,4013284 <___vfiprintf_internal_r+0x418>
 4013280:	a027883a 	mov	r19,r20
 4013284:	ad403fcc 	andi	r21,r21,255
 4013288:	ad40201c 	xori	r21,r21,128
 401328c:	ad7fe004 	addi	r21,r21,-128
 4013290:	a8000126 	beq	r21,zero,4013298 <___vfiprintf_internal_r+0x42c>
 4013294:	9cc00044 	addi	r19,r19,1
 4013298:	89c0008c 	andi	r7,r17,2
 401329c:	38000126 	beq	r7,zero,40132a4 <___vfiprintf_internal_r+0x438>
 40132a0:	9cc00084 	addi	r19,r19,2
 40132a4:	88c0210c 	andi	r3,r17,132
 40132a8:	1801dd1e 	bne	r3,zero,4013a20 <___vfiprintf_internal_r+0xbb4>
 40132ac:	d9402517 	ldw	r5,148(sp)
 40132b0:	2cebc83a 	sub	r21,r5,r19
 40132b4:	0541da0e 	bge	zero,r21,4013a20 <___vfiprintf_internal_r+0xbb4>
 40132b8:	07000404 	movi	fp,16
 40132bc:	d8801c17 	ldw	r2,112(sp)
 40132c0:	e543be0e 	bge	fp,r21,40141bc <___vfiprintf_internal_r+0x1350>
 40132c4:	014100b4 	movhi	r5,1026
 40132c8:	29474104 	addi	r5,r5,7428
 40132cc:	dc002715 	stw	r16,156(sp)
 40132d0:	d9801b17 	ldw	r6,108(sp)
 40132d4:	a821883a 	mov	r16,r21
 40132d8:	d9402315 	stw	r5,140(sp)
 40132dc:	028001c4 	movi	r10,7
 40132e0:	d9c02915 	stw	r7,164(sp)
 40132e4:	182b883a 	mov	r21,r3
 40132e8:	00000506 	br	4013300 <___vfiprintf_internal_r+0x494>
 40132ec:	31000084 	addi	r4,r6,2
 40132f0:	42000204 	addi	r8,r8,8
 40132f4:	180d883a 	mov	r6,r3
 40132f8:	843ffc04 	addi	r16,r16,-16
 40132fc:	e4000f0e 	bge	fp,r16,401333c <___vfiprintf_internal_r+0x4d0>
 4013300:	010100b4 	movhi	r4,1026
 4013304:	10800404 	addi	r2,r2,16
 4013308:	30c00044 	addi	r3,r6,1
 401330c:	21074104 	addi	r4,r4,7428
 4013310:	41000015 	stw	r4,0(r8)
 4013314:	47000115 	stw	fp,4(r8)
 4013318:	d8801c15 	stw	r2,112(sp)
 401331c:	d8c01b15 	stw	r3,108(sp)
 4013320:	50fff20e 	bge	r10,r3,40132ec <__alt_data_end+0xfc0132ec>
 4013324:	1001b21e 	bne	r2,zero,40139f0 <___vfiprintf_internal_r+0xb84>
 4013328:	843ffc04 	addi	r16,r16,-16
 401332c:	000d883a 	mov	r6,zero
 4013330:	01000044 	movi	r4,1
 4013334:	d811883a 	mov	r8,sp
 4013338:	e43ff116 	blt	fp,r16,4013300 <__alt_data_end+0xfc013300>
 401333c:	a807883a 	mov	r3,r21
 4013340:	d9c02917 	ldw	r7,164(sp)
 4013344:	802b883a 	mov	r21,r16
 4013348:	dc002717 	ldw	r16,156(sp)
 401334c:	d9402317 	ldw	r5,140(sp)
 4013350:	a885883a 	add	r2,r21,r2
 4013354:	45400115 	stw	r21,4(r8)
 4013358:	41400015 	stw	r5,0(r8)
 401335c:	d8801c15 	stw	r2,112(sp)
 4013360:	d9001b15 	stw	r4,108(sp)
 4013364:	014001c4 	movi	r5,7
 4013368:	29026216 	blt	r5,r4,4013cf4 <___vfiprintf_internal_r+0xe88>
 401336c:	d9801d87 	ldb	r6,118(sp)
 4013370:	42000204 	addi	r8,r8,8
 4013374:	21400044 	addi	r5,r4,1
 4013378:	3001ae1e 	bne	r6,zero,4013a34 <___vfiprintf_internal_r+0xbc8>
 401337c:	3801bb26 	beq	r7,zero,4013a6c <___vfiprintf_internal_r+0xc00>
 4013380:	d9001d04 	addi	r4,sp,116
 4013384:	10800084 	addi	r2,r2,2
 4013388:	41000015 	stw	r4,0(r8)
 401338c:	01000084 	movi	r4,2
 4013390:	41000115 	stw	r4,4(r8)
 4013394:	d8801c15 	stw	r2,112(sp)
 4013398:	d9401b15 	stw	r5,108(sp)
 401339c:	010001c4 	movi	r4,7
 40133a0:	2142680e 	bge	r4,r5,4013d44 <___vfiprintf_internal_r+0xed8>
 40133a4:	1002b11e 	bne	r2,zero,4013e6c <___vfiprintf_internal_r+0x1000>
 40133a8:	01802004 	movi	r6,128
 40133ac:	01400044 	movi	r5,1
 40133b0:	0009883a 	mov	r4,zero
 40133b4:	d811883a 	mov	r8,sp
 40133b8:	1981ae1e 	bne	r3,r6,4013a74 <___vfiprintf_internal_r+0xc08>
 40133bc:	d8c02517 	ldw	r3,148(sp)
 40133c0:	1cf9c83a 	sub	fp,r3,r19
 40133c4:	0701ab0e 	bge	zero,fp,4013a74 <___vfiprintf_internal_r+0xc08>
 40133c8:	05400404 	movi	r21,16
 40133cc:	af03a90e 	bge	r21,fp,4014274 <___vfiprintf_internal_r+0x1408>
 40133d0:	014100b4 	movhi	r5,1026
 40133d4:	29473d04 	addi	r5,r5,7412
 40133d8:	d9402315 	stw	r5,140(sp)
 40133dc:	01c001c4 	movi	r7,7
 40133e0:	00000506 	br	40133f8 <___vfiprintf_internal_r+0x58c>
 40133e4:	21800084 	addi	r6,r4,2
 40133e8:	42000204 	addi	r8,r8,8
 40133ec:	1809883a 	mov	r4,r3
 40133f0:	e73ffc04 	addi	fp,fp,-16
 40133f4:	af000d0e 	bge	r21,fp,401342c <___vfiprintf_internal_r+0x5c0>
 40133f8:	10800404 	addi	r2,r2,16
 40133fc:	20c00044 	addi	r3,r4,1
 4013400:	44800015 	stw	r18,0(r8)
 4013404:	45400115 	stw	r21,4(r8)
 4013408:	d8801c15 	stw	r2,112(sp)
 401340c:	d8c01b15 	stw	r3,108(sp)
 4013410:	38fff40e 	bge	r7,r3,40133e4 <__alt_data_end+0xfc0133e4>
 4013414:	10022b1e 	bne	r2,zero,4013cc4 <___vfiprintf_internal_r+0xe58>
 4013418:	e73ffc04 	addi	fp,fp,-16
 401341c:	01800044 	movi	r6,1
 4013420:	0009883a 	mov	r4,zero
 4013424:	d811883a 	mov	r8,sp
 4013428:	af3ff316 	blt	r21,fp,40133f8 <__alt_data_end+0xfc0133f8>
 401342c:	d8c02317 	ldw	r3,140(sp)
 4013430:	1705883a 	add	r2,r2,fp
 4013434:	47000115 	stw	fp,4(r8)
 4013438:	40c00015 	stw	r3,0(r8)
 401343c:	d8801c15 	stw	r2,112(sp)
 4013440:	d9801b15 	stw	r6,108(sp)
 4013444:	00c001c4 	movi	r3,7
 4013448:	19829416 	blt	r3,r6,4013e9c <___vfiprintf_internal_r+0x1030>
 401344c:	8521c83a 	sub	r16,r16,r20
 4013450:	42000204 	addi	r8,r8,8
 4013454:	31400044 	addi	r5,r6,1
 4013458:	3009883a 	mov	r4,r6
 401345c:	04018716 	blt	zero,r16,4013a7c <___vfiprintf_internal_r+0xc10>
 4013460:	a085883a 	add	r2,r20,r2
 4013464:	45c00015 	stw	r23,0(r8)
 4013468:	45000115 	stw	r20,4(r8)
 401346c:	d8801c15 	stw	r2,112(sp)
 4013470:	d9401b15 	stw	r5,108(sp)
 4013474:	00c001c4 	movi	r3,7
 4013478:	1941c20e 	bge	r3,r5,4013b84 <___vfiprintf_internal_r+0xd18>
 401347c:	1002531e 	bne	r2,zero,4013dcc <___vfiprintf_internal_r+0xf60>
 4013480:	d8001b15 	stw	zero,108(sp)
 4013484:	8c40010c 	andi	r17,r17,4
 4013488:	88023226 	beq	r17,zero,4013d54 <___vfiprintf_internal_r+0xee8>
 401348c:	d9002517 	ldw	r4,148(sp)
 4013490:	24e3c83a 	sub	r17,r4,r19
 4013494:	04432916 	blt	zero,r17,401413c <___vfiprintf_internal_r+0x12d0>
 4013498:	d8802517 	ldw	r2,148(sp)
 401349c:	14c0010e 	bge	r2,r19,40134a4 <___vfiprintf_internal_r+0x638>
 40134a0:	9805883a 	mov	r2,r19
 40134a4:	d8c02417 	ldw	r3,144(sp)
 40134a8:	1887883a 	add	r3,r3,r2
 40134ac:	d8c02415 	stw	r3,144(sp)
 40134b0:	d8001b15 	stw	zero,108(sp)
 40134b4:	d811883a 	mov	r8,sp
 40134b8:	003ea006 	br	4012f3c <__alt_data_end+0xfc012f3c>
 40134bc:	8c400814 	ori	r17,r17,32
 40134c0:	b0c00007 	ldb	r3,0(r22)
 40134c4:	003ec606 	br	4012fe0 <__alt_data_end+0xfc012fe0>
 40134c8:	b0c00007 	ldb	r3,0(r22)
 40134cc:	00801b04 	movi	r2,108
 40134d0:	18832026 	beq	r3,r2,4014154 <___vfiprintf_internal_r+0x12e8>
 40134d4:	8c400414 	ori	r17,r17,16
 40134d8:	003ec106 	br	4012fe0 <__alt_data_end+0xfc012fe0>
 40134dc:	9cc03fcc 	andi	r19,r19,255
 40134e0:	b811883a 	mov	r8,r23
 40134e4:	9803981e 	bne	r19,zero,4014348 <___vfiprintf_internal_r+0x14dc>
 40134e8:	8880080c 	andi	r2,r17,32
 40134ec:	1002be26 	beq	r2,zero,4013fe8 <___vfiprintf_internal_r+0x117c>
 40134f0:	d9002217 	ldw	r4,136(sp)
 40134f4:	d9402417 	ldw	r5,144(sp)
 40134f8:	20800017 	ldw	r2,0(r4)
 40134fc:	2807d7fa 	srai	r3,r5,31
 4013500:	21000104 	addi	r4,r4,4
 4013504:	d9002215 	stw	r4,136(sp)
 4013508:	11400015 	stw	r5,0(r2)
 401350c:	10c00115 	stw	r3,4(r2)
 4013510:	003e8a06 	br	4012f3c <__alt_data_end+0xfc012f3c>
 4013514:	9cc03fcc 	andi	r19,r19,255
 4013518:	b811883a 	mov	r8,r23
 401351c:	9803871e 	bne	r19,zero,401433c <___vfiprintf_internal_r+0x14d0>
 4013520:	8880080c 	andi	r2,r17,32
 4013524:	10009a26 	beq	r2,zero,4013790 <___vfiprintf_internal_r+0x924>
 4013528:	d9002217 	ldw	r4,136(sp)
 401352c:	d8001d85 	stb	zero,118(sp)
 4013530:	20800204 	addi	r2,r4,8
 4013534:	24c00017 	ldw	r19,0(r4)
 4013538:	25000117 	ldw	r20,4(r4)
 401353c:	8002a416 	blt	r16,zero,4013fd0 <___vfiprintf_internal_r+0x1164>
 4013540:	013fdfc4 	movi	r4,-129
 4013544:	9d06b03a 	or	r3,r19,r20
 4013548:	d8802215 	stw	r2,136(sp)
 401354c:	8922703a 	and	r17,r17,r4
 4013550:	18009b26 	beq	r3,zero,40137c0 <___vfiprintf_internal_r+0x954>
 4013554:	002b883a 	mov	r21,zero
 4013558:	ddc01a04 	addi	r23,sp,104
 401355c:	9806d0fa 	srli	r3,r19,3
 4013560:	a008977a 	slli	r4,r20,29
 4013564:	a028d0fa 	srli	r20,r20,3
 4013568:	9cc001cc 	andi	r19,r19,7
 401356c:	98800c04 	addi	r2,r19,48
 4013570:	bdffffc4 	addi	r23,r23,-1
 4013574:	20e6b03a 	or	r19,r4,r3
 4013578:	b8800005 	stb	r2,0(r23)
 401357c:	9d06b03a 	or	r3,r19,r20
 4013580:	183ff61e 	bne	r3,zero,401355c <__alt_data_end+0xfc01355c>
 4013584:	88c0004c 	andi	r3,r17,1
 4013588:	18021f1e 	bne	r3,zero,4013e08 <___vfiprintf_internal_r+0xf9c>
 401358c:	d9401e17 	ldw	r5,120(sp)
 4013590:	2de9c83a 	sub	r20,r5,r23
 4013594:	003f3806 	br	4013278 <__alt_data_end+0xfc013278>
 4013598:	9cc03fcc 	andi	r19,r19,255
 401359c:	b811883a 	mov	r8,r23
 40135a0:	98034f1e 	bne	r19,zero,40142e0 <___vfiprintf_internal_r+0x1474>
 40135a4:	008100b4 	movhi	r2,1026
 40135a8:	1086dd04 	addi	r2,r2,7028
 40135ac:	d8802615 	stw	r2,152(sp)
 40135b0:	8880080c 	andi	r2,r17,32
 40135b4:	1000ac26 	beq	r2,zero,4013868 <___vfiprintf_internal_r+0x9fc>
 40135b8:	d9002217 	ldw	r4,136(sp)
 40135bc:	24c00017 	ldw	r19,0(r4)
 40135c0:	25000117 	ldw	r20,4(r4)
 40135c4:	21000204 	addi	r4,r4,8
 40135c8:	d9002215 	stw	r4,136(sp)
 40135cc:	8880004c 	andi	r2,r17,1
 40135d0:	1001e726 	beq	r2,zero,4013d70 <___vfiprintf_internal_r+0xf04>
 40135d4:	9d04b03a 	or	r2,r19,r20
 40135d8:	10025c1e 	bne	r2,zero,4013f4c <___vfiprintf_internal_r+0x10e0>
 40135dc:	d8001d85 	stb	zero,118(sp)
 40135e0:	80024416 	blt	r16,zero,4013ef4 <___vfiprintf_internal_r+0x1088>
 40135e4:	00bfdfc4 	movi	r2,-129
 40135e8:	88a2703a 	and	r17,r17,r2
 40135ec:	003f1d06 	br	4013264 <__alt_data_end+0xfc013264>
 40135f0:	d8c02217 	ldw	r3,136(sp)
 40135f4:	04c00044 	movi	r19,1
 40135f8:	b811883a 	mov	r8,r23
 40135fc:	18800017 	ldw	r2,0(r3)
 4013600:	18c00104 	addi	r3,r3,4
 4013604:	d8001d85 	stb	zero,118(sp)
 4013608:	d8801005 	stb	r2,64(sp)
 401360c:	d8c02215 	stw	r3,136(sp)
 4013610:	9829883a 	mov	r20,r19
 4013614:	ddc01004 	addi	r23,sp,64
 4013618:	0021883a 	mov	r16,zero
 401361c:	003f1e06 	br	4013298 <__alt_data_end+0xfc013298>
 4013620:	9cc03fcc 	andi	r19,r19,255
 4013624:	b811883a 	mov	r8,r23
 4013628:	9803331e 	bne	r19,zero,40142f8 <___vfiprintf_internal_r+0x148c>
 401362c:	8880080c 	andi	r2,r17,32
 4013630:	10004826 	beq	r2,zero,4013754 <___vfiprintf_internal_r+0x8e8>
 4013634:	d9002217 	ldw	r4,136(sp)
 4013638:	20800117 	ldw	r2,4(r4)
 401363c:	24c00017 	ldw	r19,0(r4)
 4013640:	21000204 	addi	r4,r4,8
 4013644:	d9002215 	stw	r4,136(sp)
 4013648:	1029883a 	mov	r20,r2
 401364c:	10024c16 	blt	r2,zero,4013f80 <___vfiprintf_internal_r+0x1114>
 4013650:	dd401d83 	ldbu	r21,118(sp)
 4013654:	80007116 	blt	r16,zero,401381c <___vfiprintf_internal_r+0x9b0>
 4013658:	00ffdfc4 	movi	r3,-129
 401365c:	9d04b03a 	or	r2,r19,r20
 4013660:	88e2703a 	and	r17,r17,r3
 4013664:	1000d126 	beq	r2,zero,40139ac <___vfiprintf_internal_r+0xb40>
 4013668:	a0023526 	beq	r20,zero,4013f40 <___vfiprintf_internal_r+0x10d4>
 401366c:	ddc01a04 	addi	r23,sp,104
 4013670:	4039883a 	mov	fp,r8
 4013674:	9809883a 	mov	r4,r19
 4013678:	a00b883a 	mov	r5,r20
 401367c:	01800284 	movi	r6,10
 4013680:	000f883a 	mov	r7,zero
 4013684:	40153980 	call	4015398 <__umoddi3>
 4013688:	10800c04 	addi	r2,r2,48
 401368c:	bdffffc4 	addi	r23,r23,-1
 4013690:	9809883a 	mov	r4,r19
 4013694:	a00b883a 	mov	r5,r20
 4013698:	b8800005 	stb	r2,0(r23)
 401369c:	01800284 	movi	r6,10
 40136a0:	000f883a 	mov	r7,zero
 40136a4:	4014d9c0 	call	4014d9c <__udivdi3>
 40136a8:	1027883a 	mov	r19,r2
 40136ac:	10c4b03a 	or	r2,r2,r3
 40136b0:	1829883a 	mov	r20,r3
 40136b4:	103fef1e 	bne	r2,zero,4013674 <__alt_data_end+0xfc013674>
 40136b8:	d9001e17 	ldw	r4,120(sp)
 40136bc:	e011883a 	mov	r8,fp
 40136c0:	25e9c83a 	sub	r20,r4,r23
 40136c4:	003eec06 	br	4013278 <__alt_data_end+0xfc013278>
 40136c8:	d8802307 	ldb	r2,140(sp)
 40136cc:	1002361e 	bne	r2,zero,4013fa8 <___vfiprintf_internal_r+0x113c>
 40136d0:	00c00804 	movi	r3,32
 40136d4:	d8c02305 	stb	r3,140(sp)
 40136d8:	04c00044 	movi	r19,1
 40136dc:	b0c00007 	ldb	r3,0(r22)
 40136e0:	003e3f06 	br	4012fe0 <__alt_data_end+0xfc012fe0>
 40136e4:	8c400054 	ori	r17,r17,1
 40136e8:	b0c00007 	ldb	r3,0(r22)
 40136ec:	003e3c06 	br	4012fe0 <__alt_data_end+0xfc012fe0>
 40136f0:	8c402014 	ori	r17,r17,128
 40136f4:	b0c00007 	ldb	r3,0(r22)
 40136f8:	003e3906 	br	4012fe0 <__alt_data_end+0xfc012fe0>
 40136fc:	dc002715 	stw	r16,156(sp)
 4013700:	d8002515 	stw	zero,148(sp)
 4013704:	1f3ff404 	addi	fp,r3,-48
 4013708:	0009883a 	mov	r4,zero
 401370c:	b021883a 	mov	r16,r22
 4013710:	01400284 	movi	r5,10
 4013714:	400aa340 	call	400aa34 <__mulsi3>
 4013718:	80c00007 	ldb	r3,0(r16)
 401371c:	e089883a 	add	r4,fp,r2
 4013720:	b5800044 	addi	r22,r22,1
 4013724:	1f3ff404 	addi	fp,r3,-48
 4013728:	b021883a 	mov	r16,r22
 401372c:	af3ff82e 	bgeu	r21,fp,4013710 <__alt_data_end+0xfc013710>
 4013730:	d9002515 	stw	r4,148(sp)
 4013734:	dc002717 	ldw	r16,156(sp)
 4013738:	003e2a06 	br	4012fe4 <__alt_data_end+0xfc012fe4>
 401373c:	9cc03fcc 	andi	r19,r19,255
 4013740:	b811883a 	mov	r8,r23
 4013744:	9802e91e 	bne	r19,zero,40142ec <___vfiprintf_internal_r+0x1480>
 4013748:	8c400414 	ori	r17,r17,16
 401374c:	8880080c 	andi	r2,r17,32
 4013750:	103fb81e 	bne	r2,zero,4013634 <__alt_data_end+0xfc013634>
 4013754:	8880040c 	andi	r2,r17,16
 4013758:	10022e26 	beq	r2,zero,4014014 <___vfiprintf_internal_r+0x11a8>
 401375c:	d9402217 	ldw	r5,136(sp)
 4013760:	2cc00017 	ldw	r19,0(r5)
 4013764:	29400104 	addi	r5,r5,4
 4013768:	d9402215 	stw	r5,136(sp)
 401376c:	9829d7fa 	srai	r20,r19,31
 4013770:	a005883a 	mov	r2,r20
 4013774:	003fb506 	br	401364c <__alt_data_end+0xfc01364c>
 4013778:	9cc03fcc 	andi	r19,r19,255
 401377c:	b811883a 	mov	r8,r23
 4013780:	9802fa1e 	bne	r19,zero,401436c <___vfiprintf_internal_r+0x1500>
 4013784:	8c400414 	ori	r17,r17,16
 4013788:	8880080c 	andi	r2,r17,32
 401378c:	103f661e 	bne	r2,zero,4013528 <__alt_data_end+0xfc013528>
 4013790:	8880040c 	andi	r2,r17,16
 4013794:	10020626 	beq	r2,zero,4013fb0 <___vfiprintf_internal_r+0x1144>
 4013798:	d9402217 	ldw	r5,136(sp)
 401379c:	d8001d85 	stb	zero,118(sp)
 40137a0:	0029883a 	mov	r20,zero
 40137a4:	28800104 	addi	r2,r5,4
 40137a8:	2cc00017 	ldw	r19,0(r5)
 40137ac:	80020816 	blt	r16,zero,4013fd0 <___vfiprintf_internal_r+0x1164>
 40137b0:	00ffdfc4 	movi	r3,-129
 40137b4:	d8802215 	stw	r2,136(sp)
 40137b8:	88e2703a 	and	r17,r17,r3
 40137bc:	983f651e 	bne	r19,zero,4013554 <__alt_data_end+0xfc013554>
 40137c0:	002b883a 	mov	r21,zero
 40137c4:	8002cf26 	beq	r16,zero,4014304 <___vfiprintf_internal_r+0x1498>
 40137c8:	0027883a 	mov	r19,zero
 40137cc:	0029883a 	mov	r20,zero
 40137d0:	003f6106 	br	4013558 <__alt_data_end+0xfc013558>
 40137d4:	9cc03fcc 	andi	r19,r19,255
 40137d8:	b811883a 	mov	r8,r23
 40137dc:	9802e01e 	bne	r19,zero,4014360 <___vfiprintf_internal_r+0x14f4>
 40137e0:	8c400414 	ori	r17,r17,16
 40137e4:	8880080c 	andi	r2,r17,32
 40137e8:	1000641e 	bne	r2,zero,401397c <___vfiprintf_internal_r+0xb10>
 40137ec:	8880040c 	andi	r2,r17,16
 40137f0:	1001c81e 	bne	r2,zero,4013f14 <___vfiprintf_internal_r+0x10a8>
 40137f4:	8880100c 	andi	r2,r17,64
 40137f8:	d8001d85 	stb	zero,118(sp)
 40137fc:	1002281e 	bne	r2,zero,40140a0 <___vfiprintf_internal_r+0x1234>
 4013800:	d9002217 	ldw	r4,136(sp)
 4013804:	0029883a 	mov	r20,zero
 4013808:	20800104 	addi	r2,r4,4
 401380c:	24c00017 	ldw	r19,0(r4)
 4013810:	8001c60e 	bge	r16,zero,4013f2c <___vfiprintf_internal_r+0x10c0>
 4013814:	d8802215 	stw	r2,136(sp)
 4013818:	002b883a 	mov	r21,zero
 401381c:	9d04b03a 	or	r2,r19,r20
 4013820:	103f911e 	bne	r2,zero,4013668 <__alt_data_end+0xfc013668>
 4013824:	00800044 	movi	r2,1
 4013828:	10803fcc 	andi	r2,r2,255
 401382c:	00c00044 	movi	r3,1
 4013830:	10c05f26 	beq	r2,r3,40139b0 <___vfiprintf_internal_r+0xb44>
 4013834:	00c00084 	movi	r3,2
 4013838:	10ffe31e 	bne	r2,r3,40137c8 <__alt_data_end+0xfc0137c8>
 401383c:	0027883a 	mov	r19,zero
 4013840:	0029883a 	mov	r20,zero
 4013844:	00015106 	br	4013d8c <___vfiprintf_internal_r+0xf20>
 4013848:	9cc03fcc 	andi	r19,r19,255
 401384c:	b811883a 	mov	r8,r23
 4013850:	9802c01e 	bne	r19,zero,4014354 <___vfiprintf_internal_r+0x14e8>
 4013854:	014100b4 	movhi	r5,1026
 4013858:	2946d804 	addi	r5,r5,7008
 401385c:	d9402615 	stw	r5,152(sp)
 4013860:	8880080c 	andi	r2,r17,32
 4013864:	103f541e 	bne	r2,zero,40135b8 <__alt_data_end+0xfc0135b8>
 4013868:	8880040c 	andi	r2,r17,16
 401386c:	1001f226 	beq	r2,zero,4014038 <___vfiprintf_internal_r+0x11cc>
 4013870:	d9402217 	ldw	r5,136(sp)
 4013874:	0029883a 	mov	r20,zero
 4013878:	2cc00017 	ldw	r19,0(r5)
 401387c:	29400104 	addi	r5,r5,4
 4013880:	d9402215 	stw	r5,136(sp)
 4013884:	003f5106 	br	40135cc <__alt_data_end+0xfc0135cc>
 4013888:	d8c02217 	ldw	r3,136(sp)
 401388c:	b811883a 	mov	r8,r23
 4013890:	d8001d85 	stb	zero,118(sp)
 4013894:	1dc00017 	ldw	r23,0(r3)
 4013898:	1f000104 	addi	fp,r3,4
 401389c:	b8025926 	beq	r23,zero,4014204 <___vfiprintf_internal_r+0x1398>
 40138a0:	80023316 	blt	r16,zero,4014170 <___vfiprintf_internal_r+0x1304>
 40138a4:	800d883a 	mov	r6,r16
 40138a8:	000b883a 	mov	r5,zero
 40138ac:	b809883a 	mov	r4,r23
 40138b0:	da002a15 	stw	r8,168(sp)
 40138b4:	40111e40 	call	40111e4 <memchr>
 40138b8:	da002a17 	ldw	r8,168(sp)
 40138bc:	10026826 	beq	r2,zero,4014260 <___vfiprintf_internal_r+0x13f4>
 40138c0:	15e9c83a 	sub	r20,r2,r23
 40138c4:	dd401d83 	ldbu	r21,118(sp)
 40138c8:	df002215 	stw	fp,136(sp)
 40138cc:	0021883a 	mov	r16,zero
 40138d0:	003e6906 	br	4013278 <__alt_data_end+0xfc013278>
 40138d4:	9cc03fcc 	andi	r19,r19,255
 40138d8:	b811883a 	mov	r8,r23
 40138dc:	983fc126 	beq	r19,zero,40137e4 <__alt_data_end+0xfc0137e4>
 40138e0:	d8c02303 	ldbu	r3,140(sp)
 40138e4:	d8c01d85 	stb	r3,118(sp)
 40138e8:	003fbe06 	br	40137e4 <__alt_data_end+0xfc0137e4>
 40138ec:	d9002217 	ldw	r4,136(sp)
 40138f0:	d9402217 	ldw	r5,136(sp)
 40138f4:	21000017 	ldw	r4,0(r4)
 40138f8:	28800104 	addi	r2,r5,4
 40138fc:	d9002515 	stw	r4,148(sp)
 4013900:	203e3d16 	blt	r4,zero,40131f8 <__alt_data_end+0xfc0131f8>
 4013904:	d8802215 	stw	r2,136(sp)
 4013908:	b0c00007 	ldb	r3,0(r22)
 401390c:	003db406 	br	4012fe0 <__alt_data_end+0xfc012fe0>
 4013910:	00c00ac4 	movi	r3,43
 4013914:	d8c02305 	stb	r3,140(sp)
 4013918:	04c00044 	movi	r19,1
 401391c:	b0c00007 	ldb	r3,0(r22)
 4013920:	003daf06 	br	4012fe0 <__alt_data_end+0xfc012fe0>
 4013924:	b0c00007 	ldb	r3,0(r22)
 4013928:	01000a84 	movi	r4,42
 401392c:	b4000044 	addi	r16,r22,1
 4013930:	19025e26 	beq	r3,r4,40142ac <___vfiprintf_internal_r+0x1440>
 4013934:	1f3ff404 	addi	fp,r3,-48
 4013938:	0009883a 	mov	r4,zero
 401393c:	af025236 	bltu	r21,fp,4014288 <___vfiprintf_internal_r+0x141c>
 4013940:	01400284 	movi	r5,10
 4013944:	400aa340 	call	400aa34 <__mulsi3>
 4013948:	80c00007 	ldb	r3,0(r16)
 401394c:	1709883a 	add	r4,r2,fp
 4013950:	85800044 	addi	r22,r16,1
 4013954:	1f3ff404 	addi	fp,r3,-48
 4013958:	b021883a 	mov	r16,r22
 401395c:	af3ff82e 	bgeu	r21,fp,4013940 <__alt_data_end+0xfc013940>
 4013960:	2021883a 	mov	r16,r4
 4013964:	203d9f0e 	bge	r4,zero,4012fe4 <__alt_data_end+0xfc012fe4>
 4013968:	043fffc4 	movi	r16,-1
 401396c:	003d9d06 	br	4012fe4 <__alt_data_end+0xfc012fe4>
 4013970:	8c401014 	ori	r17,r17,64
 4013974:	b0c00007 	ldb	r3,0(r22)
 4013978:	003d9906 	br	4012fe0 <__alt_data_end+0xfc012fe0>
 401397c:	d9002217 	ldw	r4,136(sp)
 4013980:	d8001d85 	stb	zero,118(sp)
 4013984:	20c00204 	addi	r3,r4,8
 4013988:	24c00017 	ldw	r19,0(r4)
 401398c:	25000117 	ldw	r20,4(r4)
 4013990:	8001e716 	blt	r16,zero,4014130 <___vfiprintf_internal_r+0x12c4>
 4013994:	013fdfc4 	movi	r4,-129
 4013998:	9d04b03a 	or	r2,r19,r20
 401399c:	d8c02215 	stw	r3,136(sp)
 40139a0:	8922703a 	and	r17,r17,r4
 40139a4:	002b883a 	mov	r21,zero
 40139a8:	103f2f1e 	bne	r2,zero,4013668 <__alt_data_end+0xfc013668>
 40139ac:	803e2f26 	beq	r16,zero,401326c <__alt_data_end+0xfc01326c>
 40139b0:	0027883a 	mov	r19,zero
 40139b4:	9cc00c04 	addi	r19,r19,48
 40139b8:	dcc019c5 	stb	r19,103(sp)
 40139bc:	dd002817 	ldw	r20,160(sp)
 40139c0:	ddc019c4 	addi	r23,sp,103
 40139c4:	003e2c06 	br	4013278 <__alt_data_end+0xfc013278>
 40139c8:	9cc03fcc 	andi	r19,r19,255
 40139cc:	b811883a 	mov	r8,r23
 40139d0:	9802571e 	bne	r19,zero,4014330 <___vfiprintf_internal_r+0x14c4>
 40139d4:	18005726 	beq	r3,zero,4013b34 <___vfiprintf_internal_r+0xcc8>
 40139d8:	04c00044 	movi	r19,1
 40139dc:	d8c01005 	stb	r3,64(sp)
 40139e0:	d8001d85 	stb	zero,118(sp)
 40139e4:	9829883a 	mov	r20,r19
 40139e8:	ddc01004 	addi	r23,sp,64
 40139ec:	003f0a06 	br	4013618 <__alt_data_end+0xfc013618>
 40139f0:	d9402017 	ldw	r5,128(sp)
 40139f4:	d9002117 	ldw	r4,132(sp)
 40139f8:	d9801a04 	addi	r6,sp,104
 40139fc:	da802a15 	stw	r10,168(sp)
 4013a00:	4012d580 	call	4012d58 <__sprint_r.part.0>
 4013a04:	da802a17 	ldw	r10,168(sp)
 4013a08:	1000501e 	bne	r2,zero,4013b4c <___vfiprintf_internal_r+0xce0>
 4013a0c:	d9801b17 	ldw	r6,108(sp)
 4013a10:	d8801c17 	ldw	r2,112(sp)
 4013a14:	d811883a 	mov	r8,sp
 4013a18:	31000044 	addi	r4,r6,1
 4013a1c:	003e3606 	br	40132f8 <__alt_data_end+0xfc0132f8>
 4013a20:	d9001b17 	ldw	r4,108(sp)
 4013a24:	d8801c17 	ldw	r2,112(sp)
 4013a28:	21400044 	addi	r5,r4,1
 4013a2c:	d9801d87 	ldb	r6,118(sp)
 4013a30:	303e5226 	beq	r6,zero,401337c <__alt_data_end+0xfc01337c>
 4013a34:	01800044 	movi	r6,1
 4013a38:	d9001d84 	addi	r4,sp,118
 4013a3c:	1185883a 	add	r2,r2,r6
 4013a40:	41000015 	stw	r4,0(r8)
 4013a44:	41800115 	stw	r6,4(r8)
 4013a48:	d8801c15 	stw	r2,112(sp)
 4013a4c:	d9401b15 	stw	r5,108(sp)
 4013a50:	010001c4 	movi	r4,7
 4013a54:	2140b00e 	bge	r4,r5,4013d18 <___vfiprintf_internal_r+0xeac>
 4013a58:	1000f61e 	bne	r2,zero,4013e34 <___vfiprintf_internal_r+0xfc8>
 4013a5c:	3800b31e 	bne	r7,zero,4013d2c <___vfiprintf_internal_r+0xec0>
 4013a60:	0009883a 	mov	r4,zero
 4013a64:	300b883a 	mov	r5,r6
 4013a68:	d811883a 	mov	r8,sp
 4013a6c:	01802004 	movi	r6,128
 4013a70:	19be5226 	beq	r3,r6,40133bc <__alt_data_end+0xfc0133bc>
 4013a74:	8521c83a 	sub	r16,r16,r20
 4013a78:	043e790e 	bge	zero,r16,4013460 <__alt_data_end+0xfc013460>
 4013a7c:	05400404 	movi	r21,16
 4013a80:	ac01b00e 	bge	r21,r16,4014144 <___vfiprintf_internal_r+0x12d8>
 4013a84:	014100b4 	movhi	r5,1026
 4013a88:	29473d04 	addi	r5,r5,7412
 4013a8c:	d9402315 	stw	r5,140(sp)
 4013a90:	070001c4 	movi	fp,7
 4013a94:	00000506 	br	4013aac <___vfiprintf_internal_r+0xc40>
 4013a98:	21400084 	addi	r5,r4,2
 4013a9c:	42000204 	addi	r8,r8,8
 4013aa0:	1809883a 	mov	r4,r3
 4013aa4:	843ffc04 	addi	r16,r16,-16
 4013aa8:	ac000d0e 	bge	r21,r16,4013ae0 <___vfiprintf_internal_r+0xc74>
 4013aac:	10800404 	addi	r2,r2,16
 4013ab0:	20c00044 	addi	r3,r4,1
 4013ab4:	44800015 	stw	r18,0(r8)
 4013ab8:	45400115 	stw	r21,4(r8)
 4013abc:	d8801c15 	stw	r2,112(sp)
 4013ac0:	d8c01b15 	stw	r3,108(sp)
 4013ac4:	e0fff40e 	bge	fp,r3,4013a98 <__alt_data_end+0xfc013a98>
 4013ac8:	1000101e 	bne	r2,zero,4013b0c <___vfiprintf_internal_r+0xca0>
 4013acc:	843ffc04 	addi	r16,r16,-16
 4013ad0:	01400044 	movi	r5,1
 4013ad4:	0009883a 	mov	r4,zero
 4013ad8:	d811883a 	mov	r8,sp
 4013adc:	ac3ff316 	blt	r21,r16,4013aac <__alt_data_end+0xfc013aac>
 4013ae0:	d8c02317 	ldw	r3,140(sp)
 4013ae4:	1405883a 	add	r2,r2,r16
 4013ae8:	44000115 	stw	r16,4(r8)
 4013aec:	40c00015 	stw	r3,0(r8)
 4013af0:	d8801c15 	stw	r2,112(sp)
 4013af4:	d9401b15 	stw	r5,108(sp)
 4013af8:	00c001c4 	movi	r3,7
 4013afc:	19401916 	blt	r3,r5,4013b64 <___vfiprintf_internal_r+0xcf8>
 4013b00:	42000204 	addi	r8,r8,8
 4013b04:	29400044 	addi	r5,r5,1
 4013b08:	003e5506 	br	4013460 <__alt_data_end+0xfc013460>
 4013b0c:	d9402017 	ldw	r5,128(sp)
 4013b10:	d9002117 	ldw	r4,132(sp)
 4013b14:	d9801a04 	addi	r6,sp,104
 4013b18:	4012d580 	call	4012d58 <__sprint_r.part.0>
 4013b1c:	10000b1e 	bne	r2,zero,4013b4c <___vfiprintf_internal_r+0xce0>
 4013b20:	d9001b17 	ldw	r4,108(sp)
 4013b24:	d8801c17 	ldw	r2,112(sp)
 4013b28:	d811883a 	mov	r8,sp
 4013b2c:	21400044 	addi	r5,r4,1
 4013b30:	003fdc06 	br	4013aa4 <__alt_data_end+0xfc013aa4>
 4013b34:	d8801c17 	ldw	r2,112(sp)
 4013b38:	10000426 	beq	r2,zero,4013b4c <___vfiprintf_internal_r+0xce0>
 4013b3c:	d9402017 	ldw	r5,128(sp)
 4013b40:	d9002117 	ldw	r4,132(sp)
 4013b44:	d9801a04 	addi	r6,sp,104
 4013b48:	4012d580 	call	4012d58 <__sprint_r.part.0>
 4013b4c:	d9402017 	ldw	r5,128(sp)
 4013b50:	2880030b 	ldhu	r2,12(r5)
 4013b54:	1080100c 	andi	r2,r2,64
 4013b58:	10014d1e 	bne	r2,zero,4014090 <___vfiprintf_internal_r+0x1224>
 4013b5c:	d8802417 	ldw	r2,144(sp)
 4013b60:	003d9706 	br	40131c0 <__alt_data_end+0xfc0131c0>
 4013b64:	1000d21e 	bne	r2,zero,4013eb0 <___vfiprintf_internal_r+0x1044>
 4013b68:	00c00044 	movi	r3,1
 4013b6c:	a005883a 	mov	r2,r20
 4013b70:	ddc00015 	stw	r23,0(sp)
 4013b74:	dd000115 	stw	r20,4(sp)
 4013b78:	dd001c15 	stw	r20,112(sp)
 4013b7c:	d8c01b15 	stw	r3,108(sp)
 4013b80:	d811883a 	mov	r8,sp
 4013b84:	42000204 	addi	r8,r8,8
 4013b88:	8c40010c 	andi	r17,r17,4
 4013b8c:	88004026 	beq	r17,zero,4013c90 <___vfiprintf_internal_r+0xe24>
 4013b90:	d9002517 	ldw	r4,148(sp)
 4013b94:	24e3c83a 	sub	r17,r4,r19
 4013b98:	04403d0e 	bge	zero,r17,4013c90 <___vfiprintf_internal_r+0xe24>
 4013b9c:	04000404 	movi	r16,16
 4013ba0:	8441a90e 	bge	r16,r17,4014248 <___vfiprintf_internal_r+0x13dc>
 4013ba4:	00c100b4 	movhi	r3,1026
 4013ba8:	18c74104 	addi	r3,r3,7428
 4013bac:	d9001b17 	ldw	r4,108(sp)
 4013bb0:	d8c02315 	stw	r3,140(sp)
 4013bb4:	050001c4 	movi	r20,7
 4013bb8:	dd402117 	ldw	r21,132(sp)
 4013bbc:	ddc02017 	ldw	r23,128(sp)
 4013bc0:	00000506 	br	4013bd8 <___vfiprintf_internal_r+0xd6c>
 4013bc4:	21400084 	addi	r5,r4,2
 4013bc8:	42000204 	addi	r8,r8,8
 4013bcc:	1809883a 	mov	r4,r3
 4013bd0:	8c7ffc04 	addi	r17,r17,-16
 4013bd4:	84400f0e 	bge	r16,r17,4013c14 <___vfiprintf_internal_r+0xda8>
 4013bd8:	014100b4 	movhi	r5,1026
 4013bdc:	10800404 	addi	r2,r2,16
 4013be0:	20c00044 	addi	r3,r4,1
 4013be4:	29474104 	addi	r5,r5,7428
 4013be8:	41400015 	stw	r5,0(r8)
 4013bec:	44000115 	stw	r16,4(r8)
 4013bf0:	d8801c15 	stw	r2,112(sp)
 4013bf4:	d8c01b15 	stw	r3,108(sp)
 4013bf8:	a0fff20e 	bge	r20,r3,4013bc4 <__alt_data_end+0xfc013bc4>
 4013bfc:	1000141e 	bne	r2,zero,4013c50 <___vfiprintf_internal_r+0xde4>
 4013c00:	8c7ffc04 	addi	r17,r17,-16
 4013c04:	01400044 	movi	r5,1
 4013c08:	0009883a 	mov	r4,zero
 4013c0c:	d811883a 	mov	r8,sp
 4013c10:	847ff116 	blt	r16,r17,4013bd8 <__alt_data_end+0xfc013bd8>
 4013c14:	d8c02317 	ldw	r3,140(sp)
 4013c18:	1445883a 	add	r2,r2,r17
 4013c1c:	44400115 	stw	r17,4(r8)
 4013c20:	40c00015 	stw	r3,0(r8)
 4013c24:	d8801c15 	stw	r2,112(sp)
 4013c28:	d9401b15 	stw	r5,108(sp)
 4013c2c:	00c001c4 	movi	r3,7
 4013c30:	1940170e 	bge	r3,r5,4013c90 <___vfiprintf_internal_r+0xe24>
 4013c34:	1000101e 	bne	r2,zero,4013c78 <___vfiprintf_internal_r+0xe0c>
 4013c38:	d8802517 	ldw	r2,148(sp)
 4013c3c:	14c11616 	blt	r2,r19,4014098 <___vfiprintf_internal_r+0x122c>
 4013c40:	d9002417 	ldw	r4,144(sp)
 4013c44:	2089883a 	add	r4,r4,r2
 4013c48:	d9002415 	stw	r4,144(sp)
 4013c4c:	003e1806 	br	40134b0 <__alt_data_end+0xfc0134b0>
 4013c50:	d9801a04 	addi	r6,sp,104
 4013c54:	b80b883a 	mov	r5,r23
 4013c58:	a809883a 	mov	r4,r21
 4013c5c:	4012d580 	call	4012d58 <__sprint_r.part.0>
 4013c60:	103fba1e 	bne	r2,zero,4013b4c <__alt_data_end+0xfc013b4c>
 4013c64:	d9001b17 	ldw	r4,108(sp)
 4013c68:	d8801c17 	ldw	r2,112(sp)
 4013c6c:	d811883a 	mov	r8,sp
 4013c70:	21400044 	addi	r5,r4,1
 4013c74:	003fd606 	br	4013bd0 <__alt_data_end+0xfc013bd0>
 4013c78:	d9402017 	ldw	r5,128(sp)
 4013c7c:	d9002117 	ldw	r4,132(sp)
 4013c80:	d9801a04 	addi	r6,sp,104
 4013c84:	4012d580 	call	4012d58 <__sprint_r.part.0>
 4013c88:	103fb01e 	bne	r2,zero,4013b4c <__alt_data_end+0xfc013b4c>
 4013c8c:	d8801c17 	ldw	r2,112(sp)
 4013c90:	d8c02517 	ldw	r3,148(sp)
 4013c94:	1cc0010e 	bge	r3,r19,4013c9c <___vfiprintf_internal_r+0xe30>
 4013c98:	9807883a 	mov	r3,r19
 4013c9c:	d9002417 	ldw	r4,144(sp)
 4013ca0:	20c9883a 	add	r4,r4,r3
 4013ca4:	d9002415 	stw	r4,144(sp)
 4013ca8:	103e0126 	beq	r2,zero,40134b0 <__alt_data_end+0xfc0134b0>
 4013cac:	d9402017 	ldw	r5,128(sp)
 4013cb0:	d9002117 	ldw	r4,132(sp)
 4013cb4:	d9801a04 	addi	r6,sp,104
 4013cb8:	4012d580 	call	4012d58 <__sprint_r.part.0>
 4013cbc:	103dfc26 	beq	r2,zero,40134b0 <__alt_data_end+0xfc0134b0>
 4013cc0:	003fa206 	br	4013b4c <__alt_data_end+0xfc013b4c>
 4013cc4:	d9402017 	ldw	r5,128(sp)
 4013cc8:	d9002117 	ldw	r4,132(sp)
 4013ccc:	d9801a04 	addi	r6,sp,104
 4013cd0:	d9c02b15 	stw	r7,172(sp)
 4013cd4:	4012d580 	call	4012d58 <__sprint_r.part.0>
 4013cd8:	d9c02b17 	ldw	r7,172(sp)
 4013cdc:	103f9b1e 	bne	r2,zero,4013b4c <__alt_data_end+0xfc013b4c>
 4013ce0:	d9001b17 	ldw	r4,108(sp)
 4013ce4:	d8801c17 	ldw	r2,112(sp)
 4013ce8:	d811883a 	mov	r8,sp
 4013cec:	21800044 	addi	r6,r4,1
 4013cf0:	003dbf06 	br	40133f0 <__alt_data_end+0xfc0133f0>
 4013cf4:	1000d81e 	bne	r2,zero,4014058 <___vfiprintf_internal_r+0x11ec>
 4013cf8:	d9001d87 	ldb	r4,118(sp)
 4013cfc:	20000a26 	beq	r4,zero,4013d28 <___vfiprintf_internal_r+0xebc>
 4013d00:	00800044 	movi	r2,1
 4013d04:	d9001d84 	addi	r4,sp,118
 4013d08:	100b883a 	mov	r5,r2
 4013d0c:	d9000015 	stw	r4,0(sp)
 4013d10:	d8800115 	stw	r2,4(sp)
 4013d14:	d811883a 	mov	r8,sp
 4013d18:	2809883a 	mov	r4,r5
 4013d1c:	42000204 	addi	r8,r8,8
 4013d20:	29400044 	addi	r5,r5,1
 4013d24:	003d9506 	br	401337c <__alt_data_end+0xfc01337c>
 4013d28:	3800fd26 	beq	r7,zero,4014120 <___vfiprintf_internal_r+0x12b4>
 4013d2c:	00800084 	movi	r2,2
 4013d30:	d9001d04 	addi	r4,sp,116
 4013d34:	d9000015 	stw	r4,0(sp)
 4013d38:	d8800115 	stw	r2,4(sp)
 4013d3c:	01400044 	movi	r5,1
 4013d40:	d811883a 	mov	r8,sp
 4013d44:	2809883a 	mov	r4,r5
 4013d48:	42000204 	addi	r8,r8,8
 4013d4c:	29400044 	addi	r5,r5,1
 4013d50:	003f4606 	br	4013a6c <__alt_data_end+0xfc013a6c>
 4013d54:	d8802517 	ldw	r2,148(sp)
 4013d58:	14c0010e 	bge	r2,r19,4013d60 <___vfiprintf_internal_r+0xef4>
 4013d5c:	9805883a 	mov	r2,r19
 4013d60:	d9402417 	ldw	r5,144(sp)
 4013d64:	288b883a 	add	r5,r5,r2
 4013d68:	d9402415 	stw	r5,144(sp)
 4013d6c:	003dd006 	br	40134b0 <__alt_data_end+0xfc0134b0>
 4013d70:	d8001d85 	stb	zero,118(sp)
 4013d74:	80005d16 	blt	r16,zero,4013eec <___vfiprintf_internal_r+0x1080>
 4013d78:	00ffdfc4 	movi	r3,-129
 4013d7c:	9d04b03a 	or	r2,r19,r20
 4013d80:	88e2703a 	and	r17,r17,r3
 4013d84:	103d3726 	beq	r2,zero,4013264 <__alt_data_end+0xfc013264>
 4013d88:	002b883a 	mov	r21,zero
 4013d8c:	d9002617 	ldw	r4,152(sp)
 4013d90:	ddc01a04 	addi	r23,sp,104
 4013d94:	988003cc 	andi	r2,r19,15
 4013d98:	a006973a 	slli	r3,r20,28
 4013d9c:	2085883a 	add	r2,r4,r2
 4013da0:	9826d13a 	srli	r19,r19,4
 4013da4:	10800003 	ldbu	r2,0(r2)
 4013da8:	a028d13a 	srli	r20,r20,4
 4013dac:	bdffffc4 	addi	r23,r23,-1
 4013db0:	1ce6b03a 	or	r19,r3,r19
 4013db4:	b8800005 	stb	r2,0(r23)
 4013db8:	9d04b03a 	or	r2,r19,r20
 4013dbc:	103ff51e 	bne	r2,zero,4013d94 <__alt_data_end+0xfc013d94>
 4013dc0:	d8801e17 	ldw	r2,120(sp)
 4013dc4:	15e9c83a 	sub	r20,r2,r23
 4013dc8:	003d2b06 	br	4013278 <__alt_data_end+0xfc013278>
 4013dcc:	d9402017 	ldw	r5,128(sp)
 4013dd0:	d9002117 	ldw	r4,132(sp)
 4013dd4:	d9801a04 	addi	r6,sp,104
 4013dd8:	4012d580 	call	4012d58 <__sprint_r.part.0>
 4013ddc:	103f5b1e 	bne	r2,zero,4013b4c <__alt_data_end+0xfc013b4c>
 4013de0:	d8801c17 	ldw	r2,112(sp)
 4013de4:	d811883a 	mov	r8,sp
 4013de8:	003f6706 	br	4013b88 <__alt_data_end+0xfc013b88>
 4013dec:	d9402017 	ldw	r5,128(sp)
 4013df0:	d9002117 	ldw	r4,132(sp)
 4013df4:	d9801a04 	addi	r6,sp,104
 4013df8:	4012d580 	call	4012d58 <__sprint_r.part.0>
 4013dfc:	103f531e 	bne	r2,zero,4013b4c <__alt_data_end+0xfc013b4c>
 4013e00:	d811883a 	mov	r8,sp
 4013e04:	003cd906 	br	401316c <__alt_data_end+0xfc01316c>
 4013e08:	10803fcc 	andi	r2,r2,255
 4013e0c:	1080201c 	xori	r2,r2,128
 4013e10:	10bfe004 	addi	r2,r2,-128
 4013e14:	00c00c04 	movi	r3,48
 4013e18:	10ffe926 	beq	r2,r3,4013dc0 <__alt_data_end+0xfc013dc0>
 4013e1c:	b8ffffc5 	stb	r3,-1(r23)
 4013e20:	d8c01e17 	ldw	r3,120(sp)
 4013e24:	b8bfffc4 	addi	r2,r23,-1
 4013e28:	102f883a 	mov	r23,r2
 4013e2c:	18a9c83a 	sub	r20,r3,r2
 4013e30:	003d1106 	br	4013278 <__alt_data_end+0xfc013278>
 4013e34:	d9402017 	ldw	r5,128(sp)
 4013e38:	d9002117 	ldw	r4,132(sp)
 4013e3c:	d9801a04 	addi	r6,sp,104
 4013e40:	d8c02a15 	stw	r3,168(sp)
 4013e44:	d9c02b15 	stw	r7,172(sp)
 4013e48:	4012d580 	call	4012d58 <__sprint_r.part.0>
 4013e4c:	d8c02a17 	ldw	r3,168(sp)
 4013e50:	d9c02b17 	ldw	r7,172(sp)
 4013e54:	103f3d1e 	bne	r2,zero,4013b4c <__alt_data_end+0xfc013b4c>
 4013e58:	d9001b17 	ldw	r4,108(sp)
 4013e5c:	d8801c17 	ldw	r2,112(sp)
 4013e60:	d811883a 	mov	r8,sp
 4013e64:	21400044 	addi	r5,r4,1
 4013e68:	003d4406 	br	401337c <__alt_data_end+0xfc01337c>
 4013e6c:	d9402017 	ldw	r5,128(sp)
 4013e70:	d9002117 	ldw	r4,132(sp)
 4013e74:	d9801a04 	addi	r6,sp,104
 4013e78:	d8c02a15 	stw	r3,168(sp)
 4013e7c:	4012d580 	call	4012d58 <__sprint_r.part.0>
 4013e80:	d8c02a17 	ldw	r3,168(sp)
 4013e84:	103f311e 	bne	r2,zero,4013b4c <__alt_data_end+0xfc013b4c>
 4013e88:	d9001b17 	ldw	r4,108(sp)
 4013e8c:	d8801c17 	ldw	r2,112(sp)
 4013e90:	d811883a 	mov	r8,sp
 4013e94:	21400044 	addi	r5,r4,1
 4013e98:	003ef406 	br	4013a6c <__alt_data_end+0xfc013a6c>
 4013e9c:	1000bd1e 	bne	r2,zero,4014194 <___vfiprintf_internal_r+0x1328>
 4013ea0:	01400044 	movi	r5,1
 4013ea4:	0009883a 	mov	r4,zero
 4013ea8:	d811883a 	mov	r8,sp
 4013eac:	003ef106 	br	4013a74 <__alt_data_end+0xfc013a74>
 4013eb0:	d9402017 	ldw	r5,128(sp)
 4013eb4:	d9002117 	ldw	r4,132(sp)
 4013eb8:	d9801a04 	addi	r6,sp,104
 4013ebc:	4012d580 	call	4012d58 <__sprint_r.part.0>
 4013ec0:	103f221e 	bne	r2,zero,4013b4c <__alt_data_end+0xfc013b4c>
 4013ec4:	d9401b17 	ldw	r5,108(sp)
 4013ec8:	d8801c17 	ldw	r2,112(sp)
 4013ecc:	d811883a 	mov	r8,sp
 4013ed0:	29400044 	addi	r5,r5,1
 4013ed4:	003d6206 	br	4013460 <__alt_data_end+0xfc013460>
 4013ed8:	014100b4 	movhi	r5,1026
 4013edc:	2946dd04 	addi	r5,r5,7028
 4013ee0:	d9402615 	stw	r5,152(sp)
 4013ee4:	d8c02215 	stw	r3,136(sp)
 4013ee8:	1023883a 	mov	r17,r2
 4013eec:	9d04b03a 	or	r2,r19,r20
 4013ef0:	103fa51e 	bne	r2,zero,4013d88 <__alt_data_end+0xfc013d88>
 4013ef4:	002b883a 	mov	r21,zero
 4013ef8:	00800084 	movi	r2,2
 4013efc:	003e4a06 	br	4013828 <__alt_data_end+0xfc013828>
 4013f00:	014100b4 	movhi	r5,1026
 4013f04:	2946dd04 	addi	r5,r5,7028
 4013f08:	002b883a 	mov	r21,zero
 4013f0c:	d9402615 	stw	r5,152(sp)
 4013f10:	003f9e06 	br	4013d8c <__alt_data_end+0xfc013d8c>
 4013f14:	d9402217 	ldw	r5,136(sp)
 4013f18:	d8001d85 	stb	zero,118(sp)
 4013f1c:	0029883a 	mov	r20,zero
 4013f20:	28800104 	addi	r2,r5,4
 4013f24:	2cc00017 	ldw	r19,0(r5)
 4013f28:	803e3a16 	blt	r16,zero,4013814 <__alt_data_end+0xfc013814>
 4013f2c:	00ffdfc4 	movi	r3,-129
 4013f30:	d8802215 	stw	r2,136(sp)
 4013f34:	88e2703a 	and	r17,r17,r3
 4013f38:	002b883a 	mov	r21,zero
 4013f3c:	983e9b26 	beq	r19,zero,40139ac <__alt_data_end+0xfc0139ac>
 4013f40:	00800244 	movi	r2,9
 4013f44:	14fdc936 	bltu	r2,r19,401366c <__alt_data_end+0xfc01366c>
 4013f48:	003e9a06 	br	40139b4 <__alt_data_end+0xfc0139b4>
 4013f4c:	00800c04 	movi	r2,48
 4013f50:	d8c01d45 	stb	r3,117(sp)
 4013f54:	d8801d05 	stb	r2,116(sp)
 4013f58:	d8001d85 	stb	zero,118(sp)
 4013f5c:	88c00094 	ori	r3,r17,2
 4013f60:	80009c16 	blt	r16,zero,40141d4 <___vfiprintf_internal_r+0x1368>
 4013f64:	00bfdfc4 	movi	r2,-129
 4013f68:	88a2703a 	and	r17,r17,r2
 4013f6c:	8c400094 	ori	r17,r17,2
 4013f70:	002b883a 	mov	r21,zero
 4013f74:	003f8506 	br	4013d8c <__alt_data_end+0xfc013d8c>
 4013f78:	b029883a 	mov	r20,r22
 4013f7c:	003c0b06 	br	4012fac <__alt_data_end+0xfc012fac>
 4013f80:	04e7c83a 	sub	r19,zero,r19
 4013f84:	05400b44 	movi	r21,45
 4013f88:	9804c03a 	cmpne	r2,r19,zero
 4013f8c:	0529c83a 	sub	r20,zero,r20
 4013f90:	dd401d85 	stb	r21,118(sp)
 4013f94:	a0a9c83a 	sub	r20,r20,r2
 4013f98:	80009716 	blt	r16,zero,40141f8 <___vfiprintf_internal_r+0x138c>
 4013f9c:	00bfdfc4 	movi	r2,-129
 4013fa0:	88a2703a 	and	r17,r17,r2
 4013fa4:	003db006 	br	4013668 <__alt_data_end+0xfc013668>
 4013fa8:	b0c00007 	ldb	r3,0(r22)
 4013fac:	003c0c06 	br	4012fe0 <__alt_data_end+0xfc012fe0>
 4013fb0:	8880100c 	andi	r2,r17,64
 4013fb4:	d8001d85 	stb	zero,118(sp)
 4013fb8:	1000461e 	bne	r2,zero,40140d4 <___vfiprintf_internal_r+0x1268>
 4013fbc:	d9002217 	ldw	r4,136(sp)
 4013fc0:	0029883a 	mov	r20,zero
 4013fc4:	20800104 	addi	r2,r4,4
 4013fc8:	24c00017 	ldw	r19,0(r4)
 4013fcc:	803df80e 	bge	r16,zero,40137b0 <__alt_data_end+0xfc0137b0>
 4013fd0:	9d06b03a 	or	r3,r19,r20
 4013fd4:	d8802215 	stw	r2,136(sp)
 4013fd8:	183d5e1e 	bne	r3,zero,4013554 <__alt_data_end+0xfc013554>
 4013fdc:	002b883a 	mov	r21,zero
 4013fe0:	0005883a 	mov	r2,zero
 4013fe4:	003e1006 	br	4013828 <__alt_data_end+0xfc013828>
 4013fe8:	8880040c 	andi	r2,r17,16
 4013fec:	1000321e 	bne	r2,zero,40140b8 <___vfiprintf_internal_r+0x124c>
 4013ff0:	8c40100c 	andi	r17,r17,64
 4013ff4:	88008d26 	beq	r17,zero,401422c <___vfiprintf_internal_r+0x13c0>
 4013ff8:	d9402217 	ldw	r5,136(sp)
 4013ffc:	d8c02417 	ldw	r3,144(sp)
 4014000:	28800017 	ldw	r2,0(r5)
 4014004:	29400104 	addi	r5,r5,4
 4014008:	d9402215 	stw	r5,136(sp)
 401400c:	10c0000d 	sth	r3,0(r2)
 4014010:	003bca06 	br	4012f3c <__alt_data_end+0xfc012f3c>
 4014014:	8880100c 	andi	r2,r17,64
 4014018:	10003a26 	beq	r2,zero,4014104 <___vfiprintf_internal_r+0x1298>
 401401c:	d8802217 	ldw	r2,136(sp)
 4014020:	14c0000f 	ldh	r19,0(r2)
 4014024:	10800104 	addi	r2,r2,4
 4014028:	d8802215 	stw	r2,136(sp)
 401402c:	9829d7fa 	srai	r20,r19,31
 4014030:	a005883a 	mov	r2,r20
 4014034:	003d8506 	br	401364c <__alt_data_end+0xfc01364c>
 4014038:	8880100c 	andi	r2,r17,64
 401403c:	10002b26 	beq	r2,zero,40140ec <___vfiprintf_internal_r+0x1280>
 4014040:	d8802217 	ldw	r2,136(sp)
 4014044:	0029883a 	mov	r20,zero
 4014048:	14c0000b 	ldhu	r19,0(r2)
 401404c:	10800104 	addi	r2,r2,4
 4014050:	d8802215 	stw	r2,136(sp)
 4014054:	003d5d06 	br	40135cc <__alt_data_end+0xfc0135cc>
 4014058:	d9402017 	ldw	r5,128(sp)
 401405c:	d9002117 	ldw	r4,132(sp)
 4014060:	d9801a04 	addi	r6,sp,104
 4014064:	d8c02a15 	stw	r3,168(sp)
 4014068:	d9c02b15 	stw	r7,172(sp)
 401406c:	4012d580 	call	4012d58 <__sprint_r.part.0>
 4014070:	d8c02a17 	ldw	r3,168(sp)
 4014074:	d9c02b17 	ldw	r7,172(sp)
 4014078:	103eb41e 	bne	r2,zero,4013b4c <__alt_data_end+0xfc013b4c>
 401407c:	d9001b17 	ldw	r4,108(sp)
 4014080:	d8801c17 	ldw	r2,112(sp)
 4014084:	d811883a 	mov	r8,sp
 4014088:	21400044 	addi	r5,r4,1
 401408c:	003e6706 	br	4013a2c <__alt_data_end+0xfc013a2c>
 4014090:	00bfffc4 	movi	r2,-1
 4014094:	003c4a06 	br	40131c0 <__alt_data_end+0xfc0131c0>
 4014098:	9805883a 	mov	r2,r19
 401409c:	003ee806 	br	4013c40 <__alt_data_end+0xfc013c40>
 40140a0:	d8c02217 	ldw	r3,136(sp)
 40140a4:	0029883a 	mov	r20,zero
 40140a8:	18800104 	addi	r2,r3,4
 40140ac:	1cc0000b 	ldhu	r19,0(r3)
 40140b0:	803f9e0e 	bge	r16,zero,4013f2c <__alt_data_end+0xfc013f2c>
 40140b4:	003dd706 	br	4013814 <__alt_data_end+0xfc013814>
 40140b8:	d8c02217 	ldw	r3,136(sp)
 40140bc:	d9002417 	ldw	r4,144(sp)
 40140c0:	18800017 	ldw	r2,0(r3)
 40140c4:	18c00104 	addi	r3,r3,4
 40140c8:	d8c02215 	stw	r3,136(sp)
 40140cc:	11000015 	stw	r4,0(r2)
 40140d0:	003b9a06 	br	4012f3c <__alt_data_end+0xfc012f3c>
 40140d4:	d8c02217 	ldw	r3,136(sp)
 40140d8:	0029883a 	mov	r20,zero
 40140dc:	18800104 	addi	r2,r3,4
 40140e0:	1cc0000b 	ldhu	r19,0(r3)
 40140e4:	803db20e 	bge	r16,zero,40137b0 <__alt_data_end+0xfc0137b0>
 40140e8:	003fb906 	br	4013fd0 <__alt_data_end+0xfc013fd0>
 40140ec:	d9002217 	ldw	r4,136(sp)
 40140f0:	0029883a 	mov	r20,zero
 40140f4:	24c00017 	ldw	r19,0(r4)
 40140f8:	21000104 	addi	r4,r4,4
 40140fc:	d9002215 	stw	r4,136(sp)
 4014100:	003d3206 	br	40135cc <__alt_data_end+0xfc0135cc>
 4014104:	d8c02217 	ldw	r3,136(sp)
 4014108:	1cc00017 	ldw	r19,0(r3)
 401410c:	18c00104 	addi	r3,r3,4
 4014110:	d8c02215 	stw	r3,136(sp)
 4014114:	9829d7fa 	srai	r20,r19,31
 4014118:	a005883a 	mov	r2,r20
 401411c:	003d4b06 	br	401364c <__alt_data_end+0xfc01364c>
 4014120:	0009883a 	mov	r4,zero
 4014124:	01400044 	movi	r5,1
 4014128:	d811883a 	mov	r8,sp
 401412c:	003e4f06 	br	4013a6c <__alt_data_end+0xfc013a6c>
 4014130:	d8c02215 	stw	r3,136(sp)
 4014134:	002b883a 	mov	r21,zero
 4014138:	003db806 	br	401381c <__alt_data_end+0xfc01381c>
 401413c:	d811883a 	mov	r8,sp
 4014140:	003e9606 	br	4013b9c <__alt_data_end+0xfc013b9c>
 4014144:	010100b4 	movhi	r4,1026
 4014148:	21073d04 	addi	r4,r4,7412
 401414c:	d9002315 	stw	r4,140(sp)
 4014150:	003e6306 	br	4013ae0 <__alt_data_end+0xfc013ae0>
 4014154:	b0c00043 	ldbu	r3,1(r22)
 4014158:	8c400814 	ori	r17,r17,32
 401415c:	b5800044 	addi	r22,r22,1
 4014160:	18c03fcc 	andi	r3,r3,255
 4014164:	18c0201c 	xori	r3,r3,128
 4014168:	18ffe004 	addi	r3,r3,-128
 401416c:	003b9c06 	br	4012fe0 <__alt_data_end+0xfc012fe0>
 4014170:	b809883a 	mov	r4,r23
 4014174:	da002a15 	stw	r8,168(sp)
 4014178:	400c0180 	call	400c018 <strlen>
 401417c:	1029883a 	mov	r20,r2
 4014180:	dd401d83 	ldbu	r21,118(sp)
 4014184:	df002215 	stw	fp,136(sp)
 4014188:	0021883a 	mov	r16,zero
 401418c:	da002a17 	ldw	r8,168(sp)
 4014190:	003c3906 	br	4013278 <__alt_data_end+0xfc013278>
 4014194:	d9402017 	ldw	r5,128(sp)
 4014198:	d9002117 	ldw	r4,132(sp)
 401419c:	d9801a04 	addi	r6,sp,104
 40141a0:	4012d580 	call	4012d58 <__sprint_r.part.0>
 40141a4:	103e691e 	bne	r2,zero,4013b4c <__alt_data_end+0xfc013b4c>
 40141a8:	d9001b17 	ldw	r4,108(sp)
 40141ac:	d8801c17 	ldw	r2,112(sp)
 40141b0:	d811883a 	mov	r8,sp
 40141b4:	21400044 	addi	r5,r4,1
 40141b8:	003e2e06 	br	4013a74 <__alt_data_end+0xfc013a74>
 40141bc:	010100b4 	movhi	r4,1026
 40141c0:	21074104 	addi	r4,r4,7428
 40141c4:	d9002315 	stw	r4,140(sp)
 40141c8:	d9001b17 	ldw	r4,108(sp)
 40141cc:	21000044 	addi	r4,r4,1
 40141d0:	003c5e06 	br	401334c <__alt_data_end+0xfc01334c>
 40141d4:	002b883a 	mov	r21,zero
 40141d8:	00800084 	movi	r2,2
 40141dc:	10803fcc 	andi	r2,r2,255
 40141e0:	01000044 	movi	r4,1
 40141e4:	11002b26 	beq	r2,r4,4014294 <___vfiprintf_internal_r+0x1428>
 40141e8:	01000084 	movi	r4,2
 40141ec:	11002b1e 	bne	r2,r4,401429c <___vfiprintf_internal_r+0x1430>
 40141f0:	1823883a 	mov	r17,r3
 40141f4:	003ee506 	br	4013d8c <__alt_data_end+0xfc013d8c>
 40141f8:	8807883a 	mov	r3,r17
 40141fc:	00800044 	movi	r2,1
 4014200:	003ff606 	br	40141dc <__alt_data_end+0xfc0141dc>
 4014204:	00800184 	movi	r2,6
 4014208:	1400012e 	bgeu	r2,r16,4014210 <___vfiprintf_internal_r+0x13a4>
 401420c:	1021883a 	mov	r16,r2
 4014210:	8029883a 	mov	r20,r16
 4014214:	8027883a 	mov	r19,r16
 4014218:	80002216 	blt	r16,zero,40142a4 <___vfiprintf_internal_r+0x1438>
 401421c:	05c100b4 	movhi	r23,1026
 4014220:	df002215 	stw	fp,136(sp)
 4014224:	bdc6e204 	addi	r23,r23,7048
 4014228:	003cfb06 	br	4013618 <__alt_data_end+0xfc013618>
 401422c:	d9002217 	ldw	r4,136(sp)
 4014230:	d9402417 	ldw	r5,144(sp)
 4014234:	20800017 	ldw	r2,0(r4)
 4014238:	21000104 	addi	r4,r4,4
 401423c:	d9002215 	stw	r4,136(sp)
 4014240:	11400015 	stw	r5,0(r2)
 4014244:	003b3d06 	br	4012f3c <__alt_data_end+0xfc012f3c>
 4014248:	014100b4 	movhi	r5,1026
 401424c:	29474104 	addi	r5,r5,7428
 4014250:	d9402315 	stw	r5,140(sp)
 4014254:	d9401b17 	ldw	r5,108(sp)
 4014258:	29400044 	addi	r5,r5,1
 401425c:	003e6d06 	br	4013c14 <__alt_data_end+0xfc013c14>
 4014260:	8029883a 	mov	r20,r16
 4014264:	dd401d83 	ldbu	r21,118(sp)
 4014268:	df002215 	stw	fp,136(sp)
 401426c:	0021883a 	mov	r16,zero
 4014270:	003c0106 	br	4013278 <__alt_data_end+0xfc013278>
 4014274:	00c100b4 	movhi	r3,1026
 4014278:	18c73d04 	addi	r3,r3,7412
 401427c:	d8c02315 	stw	r3,140(sp)
 4014280:	280d883a 	mov	r6,r5
 4014284:	003c6906 	br	401342c <__alt_data_end+0xfc01342c>
 4014288:	802d883a 	mov	r22,r16
 401428c:	0021883a 	mov	r16,zero
 4014290:	003b5406 	br	4012fe4 <__alt_data_end+0xfc012fe4>
 4014294:	1823883a 	mov	r17,r3
 4014298:	003cf306 	br	4013668 <__alt_data_end+0xfc013668>
 401429c:	1823883a 	mov	r17,r3
 40142a0:	003cad06 	br	4013558 <__alt_data_end+0xfc013558>
 40142a4:	0027883a 	mov	r19,zero
 40142a8:	003fdc06 	br	401421c <__alt_data_end+0xfc01421c>
 40142ac:	d9402217 	ldw	r5,136(sp)
 40142b0:	8005883a 	mov	r2,r16
 40142b4:	b0c00043 	ldbu	r3,1(r22)
 40142b8:	2c000017 	ldw	r16,0(r5)
 40142bc:	29000104 	addi	r4,r5,4
 40142c0:	d9002215 	stw	r4,136(sp)
 40142c4:	102d883a 	mov	r22,r2
 40142c8:	803fa50e 	bge	r16,zero,4014160 <__alt_data_end+0xfc014160>
 40142cc:	18c03fcc 	andi	r3,r3,255
 40142d0:	18c0201c 	xori	r3,r3,128
 40142d4:	043fffc4 	movi	r16,-1
 40142d8:	18ffe004 	addi	r3,r3,-128
 40142dc:	003b4006 	br	4012fe0 <__alt_data_end+0xfc012fe0>
 40142e0:	d9402303 	ldbu	r5,140(sp)
 40142e4:	d9401d85 	stb	r5,118(sp)
 40142e8:	003cae06 	br	40135a4 <__alt_data_end+0xfc0135a4>
 40142ec:	d8c02303 	ldbu	r3,140(sp)
 40142f0:	d8c01d85 	stb	r3,118(sp)
 40142f4:	003d1406 	br	4013748 <__alt_data_end+0xfc013748>
 40142f8:	d8c02303 	ldbu	r3,140(sp)
 40142fc:	d8c01d85 	stb	r3,118(sp)
 4014300:	003cca06 	br	401362c <__alt_data_end+0xfc01362c>
 4014304:	8880004c 	andi	r2,r17,1
 4014308:	002b883a 	mov	r21,zero
 401430c:	10000526 	beq	r2,zero,4014324 <___vfiprintf_internal_r+0x14b8>
 4014310:	00800c04 	movi	r2,48
 4014314:	d88019c5 	stb	r2,103(sp)
 4014318:	dd002817 	ldw	r20,160(sp)
 401431c:	ddc019c4 	addi	r23,sp,103
 4014320:	003bd506 	br	4013278 <__alt_data_end+0xfc013278>
 4014324:	0029883a 	mov	r20,zero
 4014328:	ddc01a04 	addi	r23,sp,104
 401432c:	003bd206 	br	4013278 <__alt_data_end+0xfc013278>
 4014330:	d9002303 	ldbu	r4,140(sp)
 4014334:	d9001d85 	stb	r4,118(sp)
 4014338:	003da606 	br	40139d4 <__alt_data_end+0xfc0139d4>
 401433c:	d8c02303 	ldbu	r3,140(sp)
 4014340:	d8c01d85 	stb	r3,118(sp)
 4014344:	003c7606 	br	4013520 <__alt_data_end+0xfc013520>
 4014348:	d8c02303 	ldbu	r3,140(sp)
 401434c:	d8c01d85 	stb	r3,118(sp)
 4014350:	003c6506 	br	40134e8 <__alt_data_end+0xfc0134e8>
 4014354:	d9002303 	ldbu	r4,140(sp)
 4014358:	d9001d85 	stb	r4,118(sp)
 401435c:	003d3d06 	br	4013854 <__alt_data_end+0xfc013854>
 4014360:	d8c02303 	ldbu	r3,140(sp)
 4014364:	d8c01d85 	stb	r3,118(sp)
 4014368:	003d1d06 	br	40137e0 <__alt_data_end+0xfc0137e0>
 401436c:	d8c02303 	ldbu	r3,140(sp)
 4014370:	d8c01d85 	stb	r3,118(sp)
 4014374:	003d0306 	br	4013784 <__alt_data_end+0xfc013784>

04014378 <__vfiprintf_internal>:
 4014378:	008100b4 	movhi	r2,1026
 401437c:	1093f304 	addi	r2,r2,20428
 4014380:	300f883a 	mov	r7,r6
 4014384:	280d883a 	mov	r6,r5
 4014388:	200b883a 	mov	r5,r4
 401438c:	11000017 	ldw	r4,0(r2)
 4014390:	4012e6c1 	jmpi	4012e6c <___vfiprintf_internal_r>

04014394 <__sbprintf>:
 4014394:	2880030b 	ldhu	r2,12(r5)
 4014398:	2ac01917 	ldw	r11,100(r5)
 401439c:	2a80038b 	ldhu	r10,14(r5)
 40143a0:	2a400717 	ldw	r9,28(r5)
 40143a4:	2a000917 	ldw	r8,36(r5)
 40143a8:	defee204 	addi	sp,sp,-1144
 40143ac:	00c10004 	movi	r3,1024
 40143b0:	dc011a15 	stw	r16,1128(sp)
 40143b4:	10bfff4c 	andi	r2,r2,65533
 40143b8:	2821883a 	mov	r16,r5
 40143bc:	d8cb883a 	add	r5,sp,r3
 40143c0:	dc811c15 	stw	r18,1136(sp)
 40143c4:	dc411b15 	stw	r17,1132(sp)
 40143c8:	dfc11d15 	stw	ra,1140(sp)
 40143cc:	2025883a 	mov	r18,r4
 40143d0:	d881030d 	sth	r2,1036(sp)
 40143d4:	dac11915 	stw	r11,1124(sp)
 40143d8:	da81038d 	sth	r10,1038(sp)
 40143dc:	da410715 	stw	r9,1052(sp)
 40143e0:	da010915 	stw	r8,1060(sp)
 40143e4:	dec10015 	stw	sp,1024(sp)
 40143e8:	dec10415 	stw	sp,1040(sp)
 40143ec:	d8c10215 	stw	r3,1032(sp)
 40143f0:	d8c10515 	stw	r3,1044(sp)
 40143f4:	d8010615 	stw	zero,1048(sp)
 40143f8:	4012e6c0 	call	4012e6c <___vfiprintf_internal_r>
 40143fc:	1023883a 	mov	r17,r2
 4014400:	10000416 	blt	r2,zero,4014414 <__sbprintf+0x80>
 4014404:	d9410004 	addi	r5,sp,1024
 4014408:	9009883a 	mov	r4,r18
 401440c:	401008c0 	call	401008c <_fflush_r>
 4014410:	10000d1e 	bne	r2,zero,4014448 <__sbprintf+0xb4>
 4014414:	d881030b 	ldhu	r2,1036(sp)
 4014418:	1080100c 	andi	r2,r2,64
 401441c:	10000326 	beq	r2,zero,401442c <__sbprintf+0x98>
 4014420:	8080030b 	ldhu	r2,12(r16)
 4014424:	10801014 	ori	r2,r2,64
 4014428:	8080030d 	sth	r2,12(r16)
 401442c:	8805883a 	mov	r2,r17
 4014430:	dfc11d17 	ldw	ra,1140(sp)
 4014434:	dc811c17 	ldw	r18,1136(sp)
 4014438:	dc411b17 	ldw	r17,1132(sp)
 401443c:	dc011a17 	ldw	r16,1128(sp)
 4014440:	dec11e04 	addi	sp,sp,1144
 4014444:	f800283a 	ret
 4014448:	047fffc4 	movi	r17,-1
 401444c:	003ff106 	br	4014414 <__alt_data_end+0xfc014414>

04014450 <__swbuf_r>:
 4014450:	defffb04 	addi	sp,sp,-20
 4014454:	dcc00315 	stw	r19,12(sp)
 4014458:	dc800215 	stw	r18,8(sp)
 401445c:	dc000015 	stw	r16,0(sp)
 4014460:	dfc00415 	stw	ra,16(sp)
 4014464:	dc400115 	stw	r17,4(sp)
 4014468:	2025883a 	mov	r18,r4
 401446c:	2827883a 	mov	r19,r5
 4014470:	3021883a 	mov	r16,r6
 4014474:	20000226 	beq	r4,zero,4014480 <__swbuf_r+0x30>
 4014478:	20800e17 	ldw	r2,56(r4)
 401447c:	10004226 	beq	r2,zero,4014588 <__swbuf_r+0x138>
 4014480:	80800617 	ldw	r2,24(r16)
 4014484:	8100030b 	ldhu	r4,12(r16)
 4014488:	80800215 	stw	r2,8(r16)
 401448c:	2080020c 	andi	r2,r4,8
 4014490:	10003626 	beq	r2,zero,401456c <__swbuf_r+0x11c>
 4014494:	80c00417 	ldw	r3,16(r16)
 4014498:	18003426 	beq	r3,zero,401456c <__swbuf_r+0x11c>
 401449c:	2088000c 	andi	r2,r4,8192
 40144a0:	9c403fcc 	andi	r17,r19,255
 40144a4:	10001a26 	beq	r2,zero,4014510 <__swbuf_r+0xc0>
 40144a8:	80800017 	ldw	r2,0(r16)
 40144ac:	81000517 	ldw	r4,20(r16)
 40144b0:	10c7c83a 	sub	r3,r2,r3
 40144b4:	1900200e 	bge	r3,r4,4014538 <__swbuf_r+0xe8>
 40144b8:	18c00044 	addi	r3,r3,1
 40144bc:	81000217 	ldw	r4,8(r16)
 40144c0:	11400044 	addi	r5,r2,1
 40144c4:	81400015 	stw	r5,0(r16)
 40144c8:	213fffc4 	addi	r4,r4,-1
 40144cc:	81000215 	stw	r4,8(r16)
 40144d0:	14c00005 	stb	r19,0(r2)
 40144d4:	80800517 	ldw	r2,20(r16)
 40144d8:	10c01e26 	beq	r2,r3,4014554 <__swbuf_r+0x104>
 40144dc:	8080030b 	ldhu	r2,12(r16)
 40144e0:	1080004c 	andi	r2,r2,1
 40144e4:	10000226 	beq	r2,zero,40144f0 <__swbuf_r+0xa0>
 40144e8:	00800284 	movi	r2,10
 40144ec:	88801926 	beq	r17,r2,4014554 <__swbuf_r+0x104>
 40144f0:	8805883a 	mov	r2,r17
 40144f4:	dfc00417 	ldw	ra,16(sp)
 40144f8:	dcc00317 	ldw	r19,12(sp)
 40144fc:	dc800217 	ldw	r18,8(sp)
 4014500:	dc400117 	ldw	r17,4(sp)
 4014504:	dc000017 	ldw	r16,0(sp)
 4014508:	dec00504 	addi	sp,sp,20
 401450c:	f800283a 	ret
 4014510:	81401917 	ldw	r5,100(r16)
 4014514:	00b7ffc4 	movi	r2,-8193
 4014518:	21080014 	ori	r4,r4,8192
 401451c:	2884703a 	and	r2,r5,r2
 4014520:	80801915 	stw	r2,100(r16)
 4014524:	80800017 	ldw	r2,0(r16)
 4014528:	8100030d 	sth	r4,12(r16)
 401452c:	81000517 	ldw	r4,20(r16)
 4014530:	10c7c83a 	sub	r3,r2,r3
 4014534:	193fe016 	blt	r3,r4,40144b8 <__alt_data_end+0xfc0144b8>
 4014538:	800b883a 	mov	r5,r16
 401453c:	9009883a 	mov	r4,r18
 4014540:	401008c0 	call	401008c <_fflush_r>
 4014544:	1000071e 	bne	r2,zero,4014564 <__swbuf_r+0x114>
 4014548:	80800017 	ldw	r2,0(r16)
 401454c:	00c00044 	movi	r3,1
 4014550:	003fda06 	br	40144bc <__alt_data_end+0xfc0144bc>
 4014554:	800b883a 	mov	r5,r16
 4014558:	9009883a 	mov	r4,r18
 401455c:	401008c0 	call	401008c <_fflush_r>
 4014560:	103fe326 	beq	r2,zero,40144f0 <__alt_data_end+0xfc0144f0>
 4014564:	00bfffc4 	movi	r2,-1
 4014568:	003fe206 	br	40144f4 <__alt_data_end+0xfc0144f4>
 401456c:	800b883a 	mov	r5,r16
 4014570:	9009883a 	mov	r4,r18
 4014574:	400e46c0 	call	400e46c <__swsetup_r>
 4014578:	103ffa1e 	bne	r2,zero,4014564 <__alt_data_end+0xfc014564>
 401457c:	8100030b 	ldhu	r4,12(r16)
 4014580:	80c00417 	ldw	r3,16(r16)
 4014584:	003fc506 	br	401449c <__alt_data_end+0xfc01449c>
 4014588:	40104780 	call	4010478 <__sinit>
 401458c:	003fbc06 	br	4014480 <__alt_data_end+0xfc014480>

04014590 <__swbuf>:
 4014590:	008100b4 	movhi	r2,1026
 4014594:	1093f304 	addi	r2,r2,20428
 4014598:	280d883a 	mov	r6,r5
 401459c:	200b883a 	mov	r5,r4
 40145a0:	11000017 	ldw	r4,0(r2)
 40145a4:	40144501 	jmpi	4014450 <__swbuf_r>

040145a8 <_write_r>:
 40145a8:	defffd04 	addi	sp,sp,-12
 40145ac:	2805883a 	mov	r2,r5
 40145b0:	dc000015 	stw	r16,0(sp)
 40145b4:	040100f4 	movhi	r16,1027
 40145b8:	dc400115 	stw	r17,4(sp)
 40145bc:	300b883a 	mov	r5,r6
 40145c0:	84208404 	addi	r16,r16,-32240
 40145c4:	2023883a 	mov	r17,r4
 40145c8:	380d883a 	mov	r6,r7
 40145cc:	1009883a 	mov	r4,r2
 40145d0:	dfc00215 	stw	ra,8(sp)
 40145d4:	80000015 	stw	zero,0(r16)
 40145d8:	40189a80 	call	40189a8 <write>
 40145dc:	00ffffc4 	movi	r3,-1
 40145e0:	10c00526 	beq	r2,r3,40145f8 <_write_r+0x50>
 40145e4:	dfc00217 	ldw	ra,8(sp)
 40145e8:	dc400117 	ldw	r17,4(sp)
 40145ec:	dc000017 	ldw	r16,0(sp)
 40145f0:	dec00304 	addi	sp,sp,12
 40145f4:	f800283a 	ret
 40145f8:	80c00017 	ldw	r3,0(r16)
 40145fc:	183ff926 	beq	r3,zero,40145e4 <__alt_data_end+0xfc0145e4>
 4014600:	88c00015 	stw	r3,0(r17)
 4014604:	003ff706 	br	40145e4 <__alt_data_end+0xfc0145e4>

04014608 <_close_r>:
 4014608:	defffd04 	addi	sp,sp,-12
 401460c:	dc000015 	stw	r16,0(sp)
 4014610:	040100f4 	movhi	r16,1027
 4014614:	dc400115 	stw	r17,4(sp)
 4014618:	84208404 	addi	r16,r16,-32240
 401461c:	2023883a 	mov	r17,r4
 4014620:	2809883a 	mov	r4,r5
 4014624:	dfc00215 	stw	ra,8(sp)
 4014628:	80000015 	stw	zero,0(r16)
 401462c:	40182000 	call	4018200 <close>
 4014630:	00ffffc4 	movi	r3,-1
 4014634:	10c00526 	beq	r2,r3,401464c <_close_r+0x44>
 4014638:	dfc00217 	ldw	ra,8(sp)
 401463c:	dc400117 	ldw	r17,4(sp)
 4014640:	dc000017 	ldw	r16,0(sp)
 4014644:	dec00304 	addi	sp,sp,12
 4014648:	f800283a 	ret
 401464c:	80c00017 	ldw	r3,0(r16)
 4014650:	183ff926 	beq	r3,zero,4014638 <__alt_data_end+0xfc014638>
 4014654:	88c00015 	stw	r3,0(r17)
 4014658:	003ff706 	br	4014638 <__alt_data_end+0xfc014638>

0401465c <_calloc_r>:
 401465c:	defffe04 	addi	sp,sp,-8
 4014660:	2805883a 	mov	r2,r5
 4014664:	dc000015 	stw	r16,0(sp)
 4014668:	300b883a 	mov	r5,r6
 401466c:	2021883a 	mov	r16,r4
 4014670:	1009883a 	mov	r4,r2
 4014674:	dfc00115 	stw	ra,4(sp)
 4014678:	400aa340 	call	400aa34 <__mulsi3>
 401467c:	100b883a 	mov	r5,r2
 4014680:	8009883a 	mov	r4,r16
 4014684:	400b0080 	call	400b008 <_malloc_r>
 4014688:	10002926 	beq	r2,zero,4014730 <_calloc_r+0xd4>
 401468c:	11bfff17 	ldw	r6,-4(r2)
 4014690:	1021883a 	mov	r16,r2
 4014694:	00bfff04 	movi	r2,-4
 4014698:	308c703a 	and	r6,r6,r2
 401469c:	00c00904 	movi	r3,36
 40146a0:	308d883a 	add	r6,r6,r2
 40146a4:	19801636 	bltu	r3,r6,4014700 <_calloc_r+0xa4>
 40146a8:	008004c4 	movi	r2,19
 40146ac:	11800b2e 	bgeu	r2,r6,40146dc <_calloc_r+0x80>
 40146b0:	80000015 	stw	zero,0(r16)
 40146b4:	80000115 	stw	zero,4(r16)
 40146b8:	008006c4 	movi	r2,27
 40146bc:	11801a2e 	bgeu	r2,r6,4014728 <_calloc_r+0xcc>
 40146c0:	80000215 	stw	zero,8(r16)
 40146c4:	80000315 	stw	zero,12(r16)
 40146c8:	30c0151e 	bne	r6,r3,4014720 <_calloc_r+0xc4>
 40146cc:	80000415 	stw	zero,16(r16)
 40146d0:	80800604 	addi	r2,r16,24
 40146d4:	80000515 	stw	zero,20(r16)
 40146d8:	00000106 	br	40146e0 <_calloc_r+0x84>
 40146dc:	8005883a 	mov	r2,r16
 40146e0:	10000015 	stw	zero,0(r2)
 40146e4:	10000115 	stw	zero,4(r2)
 40146e8:	10000215 	stw	zero,8(r2)
 40146ec:	8005883a 	mov	r2,r16
 40146f0:	dfc00117 	ldw	ra,4(sp)
 40146f4:	dc000017 	ldw	r16,0(sp)
 40146f8:	dec00204 	addi	sp,sp,8
 40146fc:	f800283a 	ret
 4014700:	000b883a 	mov	r5,zero
 4014704:	8009883a 	mov	r4,r16
 4014708:	400b95c0 	call	400b95c <memset>
 401470c:	8005883a 	mov	r2,r16
 4014710:	dfc00117 	ldw	ra,4(sp)
 4014714:	dc000017 	ldw	r16,0(sp)
 4014718:	dec00204 	addi	sp,sp,8
 401471c:	f800283a 	ret
 4014720:	80800404 	addi	r2,r16,16
 4014724:	003fee06 	br	40146e0 <__alt_data_end+0xfc0146e0>
 4014728:	80800204 	addi	r2,r16,8
 401472c:	003fec06 	br	40146e0 <__alt_data_end+0xfc0146e0>
 4014730:	0005883a 	mov	r2,zero
 4014734:	003fee06 	br	40146f0 <__alt_data_end+0xfc0146f0>

04014738 <_fclose_r>:
 4014738:	28003926 	beq	r5,zero,4014820 <_fclose_r+0xe8>
 401473c:	defffc04 	addi	sp,sp,-16
 4014740:	dc400115 	stw	r17,4(sp)
 4014744:	dc000015 	stw	r16,0(sp)
 4014748:	dfc00315 	stw	ra,12(sp)
 401474c:	dc800215 	stw	r18,8(sp)
 4014750:	2023883a 	mov	r17,r4
 4014754:	2821883a 	mov	r16,r5
 4014758:	20000226 	beq	r4,zero,4014764 <_fclose_r+0x2c>
 401475c:	20800e17 	ldw	r2,56(r4)
 4014760:	10002726 	beq	r2,zero,4014800 <_fclose_r+0xc8>
 4014764:	8080030f 	ldh	r2,12(r16)
 4014768:	1000071e 	bne	r2,zero,4014788 <_fclose_r+0x50>
 401476c:	0005883a 	mov	r2,zero
 4014770:	dfc00317 	ldw	ra,12(sp)
 4014774:	dc800217 	ldw	r18,8(sp)
 4014778:	dc400117 	ldw	r17,4(sp)
 401477c:	dc000017 	ldw	r16,0(sp)
 4014780:	dec00404 	addi	sp,sp,16
 4014784:	f800283a 	ret
 4014788:	800b883a 	mov	r5,r16
 401478c:	8809883a 	mov	r4,r17
 4014790:	400fe700 	call	400fe70 <__sflush_r>
 4014794:	1025883a 	mov	r18,r2
 4014798:	80800b17 	ldw	r2,44(r16)
 401479c:	10000426 	beq	r2,zero,40147b0 <_fclose_r+0x78>
 40147a0:	81400717 	ldw	r5,28(r16)
 40147a4:	8809883a 	mov	r4,r17
 40147a8:	103ee83a 	callr	r2
 40147ac:	10001616 	blt	r2,zero,4014808 <_fclose_r+0xd0>
 40147b0:	8080030b 	ldhu	r2,12(r16)
 40147b4:	1080200c 	andi	r2,r2,128
 40147b8:	1000151e 	bne	r2,zero,4014810 <_fclose_r+0xd8>
 40147bc:	81400c17 	ldw	r5,48(r16)
 40147c0:	28000526 	beq	r5,zero,40147d8 <_fclose_r+0xa0>
 40147c4:	80801004 	addi	r2,r16,64
 40147c8:	28800226 	beq	r5,r2,40147d4 <_fclose_r+0x9c>
 40147cc:	8809883a 	mov	r4,r17
 40147d0:	40105ec0 	call	40105ec <_free_r>
 40147d4:	80000c15 	stw	zero,48(r16)
 40147d8:	81401117 	ldw	r5,68(r16)
 40147dc:	28000326 	beq	r5,zero,40147ec <_fclose_r+0xb4>
 40147e0:	8809883a 	mov	r4,r17
 40147e4:	40105ec0 	call	40105ec <_free_r>
 40147e8:	80001115 	stw	zero,68(r16)
 40147ec:	40104880 	call	4010488 <__sfp_lock_acquire>
 40147f0:	8000030d 	sth	zero,12(r16)
 40147f4:	401048c0 	call	401048c <__sfp_lock_release>
 40147f8:	9005883a 	mov	r2,r18
 40147fc:	003fdc06 	br	4014770 <__alt_data_end+0xfc014770>
 4014800:	40104780 	call	4010478 <__sinit>
 4014804:	003fd706 	br	4014764 <__alt_data_end+0xfc014764>
 4014808:	04bfffc4 	movi	r18,-1
 401480c:	003fe806 	br	40147b0 <__alt_data_end+0xfc0147b0>
 4014810:	81400417 	ldw	r5,16(r16)
 4014814:	8809883a 	mov	r4,r17
 4014818:	40105ec0 	call	40105ec <_free_r>
 401481c:	003fe706 	br	40147bc <__alt_data_end+0xfc0147bc>
 4014820:	0005883a 	mov	r2,zero
 4014824:	f800283a 	ret

04014828 <fclose>:
 4014828:	008100b4 	movhi	r2,1026
 401482c:	1093f304 	addi	r2,r2,20428
 4014830:	200b883a 	mov	r5,r4
 4014834:	11000017 	ldw	r4,0(r2)
 4014838:	40147381 	jmpi	4014738 <_fclose_r>

0401483c <__fputwc>:
 401483c:	defff804 	addi	sp,sp,-32
 4014840:	dcc00415 	stw	r19,16(sp)
 4014844:	dc800315 	stw	r18,12(sp)
 4014848:	dc000115 	stw	r16,4(sp)
 401484c:	dfc00715 	stw	ra,28(sp)
 4014850:	dd400615 	stw	r21,24(sp)
 4014854:	dd000515 	stw	r20,20(sp)
 4014858:	dc400215 	stw	r17,8(sp)
 401485c:	2027883a 	mov	r19,r4
 4014860:	2825883a 	mov	r18,r5
 4014864:	3021883a 	mov	r16,r6
 4014868:	4010fd40 	call	4010fd4 <__locale_mb_cur_max>
 401486c:	00c00044 	movi	r3,1
 4014870:	10c03e26 	beq	r2,r3,401496c <__fputwc+0x130>
 4014874:	81c01704 	addi	r7,r16,92
 4014878:	900d883a 	mov	r6,r18
 401487c:	d80b883a 	mov	r5,sp
 4014880:	9809883a 	mov	r4,r19
 4014884:	4014bb40 	call	4014bb4 <_wcrtomb_r>
 4014888:	1029883a 	mov	r20,r2
 401488c:	00bfffc4 	movi	r2,-1
 4014890:	a0802026 	beq	r20,r2,4014914 <__fputwc+0xd8>
 4014894:	d9400003 	ldbu	r5,0(sp)
 4014898:	a0001c26 	beq	r20,zero,401490c <__fputwc+0xd0>
 401489c:	0023883a 	mov	r17,zero
 40148a0:	05400284 	movi	r21,10
 40148a4:	00000906 	br	40148cc <__fputwc+0x90>
 40148a8:	80800017 	ldw	r2,0(r16)
 40148ac:	11400005 	stb	r5,0(r2)
 40148b0:	80c00017 	ldw	r3,0(r16)
 40148b4:	18c00044 	addi	r3,r3,1
 40148b8:	80c00015 	stw	r3,0(r16)
 40148bc:	8c400044 	addi	r17,r17,1
 40148c0:	dc45883a 	add	r2,sp,r17
 40148c4:	8d00112e 	bgeu	r17,r20,401490c <__fputwc+0xd0>
 40148c8:	11400003 	ldbu	r5,0(r2)
 40148cc:	80c00217 	ldw	r3,8(r16)
 40148d0:	18ffffc4 	addi	r3,r3,-1
 40148d4:	80c00215 	stw	r3,8(r16)
 40148d8:	183ff30e 	bge	r3,zero,40148a8 <__alt_data_end+0xfc0148a8>
 40148dc:	80800617 	ldw	r2,24(r16)
 40148e0:	18801916 	blt	r3,r2,4014948 <__fputwc+0x10c>
 40148e4:	80800017 	ldw	r2,0(r16)
 40148e8:	11400005 	stb	r5,0(r2)
 40148ec:	80800017 	ldw	r2,0(r16)
 40148f0:	10c00003 	ldbu	r3,0(r2)
 40148f4:	10800044 	addi	r2,r2,1
 40148f8:	1d402326 	beq	r3,r21,4014988 <__fputwc+0x14c>
 40148fc:	80800015 	stw	r2,0(r16)
 4014900:	8c400044 	addi	r17,r17,1
 4014904:	dc45883a 	add	r2,sp,r17
 4014908:	8d3fef36 	bltu	r17,r20,40148c8 <__alt_data_end+0xfc0148c8>
 401490c:	9005883a 	mov	r2,r18
 4014910:	00000406 	br	4014924 <__fputwc+0xe8>
 4014914:	80c0030b 	ldhu	r3,12(r16)
 4014918:	a005883a 	mov	r2,r20
 401491c:	18c01014 	ori	r3,r3,64
 4014920:	80c0030d 	sth	r3,12(r16)
 4014924:	dfc00717 	ldw	ra,28(sp)
 4014928:	dd400617 	ldw	r21,24(sp)
 401492c:	dd000517 	ldw	r20,20(sp)
 4014930:	dcc00417 	ldw	r19,16(sp)
 4014934:	dc800317 	ldw	r18,12(sp)
 4014938:	dc400217 	ldw	r17,8(sp)
 401493c:	dc000117 	ldw	r16,4(sp)
 4014940:	dec00804 	addi	sp,sp,32
 4014944:	f800283a 	ret
 4014948:	800d883a 	mov	r6,r16
 401494c:	29403fcc 	andi	r5,r5,255
 4014950:	9809883a 	mov	r4,r19
 4014954:	40144500 	call	4014450 <__swbuf_r>
 4014958:	10bfffe0 	cmpeqi	r2,r2,-1
 401495c:	10803fcc 	andi	r2,r2,255
 4014960:	103fd626 	beq	r2,zero,40148bc <__alt_data_end+0xfc0148bc>
 4014964:	00bfffc4 	movi	r2,-1
 4014968:	003fee06 	br	4014924 <__alt_data_end+0xfc014924>
 401496c:	90ffffc4 	addi	r3,r18,-1
 4014970:	01003f84 	movi	r4,254
 4014974:	20ffbf36 	bltu	r4,r3,4014874 <__alt_data_end+0xfc014874>
 4014978:	900b883a 	mov	r5,r18
 401497c:	dc800005 	stb	r18,0(sp)
 4014980:	1029883a 	mov	r20,r2
 4014984:	003fc506 	br	401489c <__alt_data_end+0xfc01489c>
 4014988:	800d883a 	mov	r6,r16
 401498c:	a80b883a 	mov	r5,r21
 4014990:	9809883a 	mov	r4,r19
 4014994:	40144500 	call	4014450 <__swbuf_r>
 4014998:	10bfffe0 	cmpeqi	r2,r2,-1
 401499c:	003fef06 	br	401495c <__alt_data_end+0xfc01495c>

040149a0 <_fputwc_r>:
 40149a0:	3080030b 	ldhu	r2,12(r6)
 40149a4:	10c8000c 	andi	r3,r2,8192
 40149a8:	1800051e 	bne	r3,zero,40149c0 <_fputwc_r+0x20>
 40149ac:	30c01917 	ldw	r3,100(r6)
 40149b0:	10880014 	ori	r2,r2,8192
 40149b4:	3080030d 	sth	r2,12(r6)
 40149b8:	18880014 	ori	r2,r3,8192
 40149bc:	30801915 	stw	r2,100(r6)
 40149c0:	401483c1 	jmpi	401483c <__fputwc>

040149c4 <fputwc>:
 40149c4:	008100b4 	movhi	r2,1026
 40149c8:	defffc04 	addi	sp,sp,-16
 40149cc:	1093f304 	addi	r2,r2,20428
 40149d0:	dc000115 	stw	r16,4(sp)
 40149d4:	14000017 	ldw	r16,0(r2)
 40149d8:	dc400215 	stw	r17,8(sp)
 40149dc:	dfc00315 	stw	ra,12(sp)
 40149e0:	2023883a 	mov	r17,r4
 40149e4:	80000226 	beq	r16,zero,40149f0 <fputwc+0x2c>
 40149e8:	80800e17 	ldw	r2,56(r16)
 40149ec:	10001026 	beq	r2,zero,4014a30 <fputwc+0x6c>
 40149f0:	2880030b 	ldhu	r2,12(r5)
 40149f4:	10c8000c 	andi	r3,r2,8192
 40149f8:	1800051e 	bne	r3,zero,4014a10 <fputwc+0x4c>
 40149fc:	28c01917 	ldw	r3,100(r5)
 4014a00:	10880014 	ori	r2,r2,8192
 4014a04:	2880030d 	sth	r2,12(r5)
 4014a08:	18880014 	ori	r2,r3,8192
 4014a0c:	28801915 	stw	r2,100(r5)
 4014a10:	280d883a 	mov	r6,r5
 4014a14:	8009883a 	mov	r4,r16
 4014a18:	880b883a 	mov	r5,r17
 4014a1c:	dfc00317 	ldw	ra,12(sp)
 4014a20:	dc400217 	ldw	r17,8(sp)
 4014a24:	dc000117 	ldw	r16,4(sp)
 4014a28:	dec00404 	addi	sp,sp,16
 4014a2c:	401483c1 	jmpi	401483c <__fputwc>
 4014a30:	8009883a 	mov	r4,r16
 4014a34:	d9400015 	stw	r5,0(sp)
 4014a38:	40104780 	call	4010478 <__sinit>
 4014a3c:	d9400017 	ldw	r5,0(sp)
 4014a40:	003feb06 	br	40149f0 <__alt_data_end+0xfc0149f0>

04014a44 <_fstat_r>:
 4014a44:	defffd04 	addi	sp,sp,-12
 4014a48:	2805883a 	mov	r2,r5
 4014a4c:	dc000015 	stw	r16,0(sp)
 4014a50:	040100f4 	movhi	r16,1027
 4014a54:	dc400115 	stw	r17,4(sp)
 4014a58:	84208404 	addi	r16,r16,-32240
 4014a5c:	2023883a 	mov	r17,r4
 4014a60:	300b883a 	mov	r5,r6
 4014a64:	1009883a 	mov	r4,r2
 4014a68:	dfc00215 	stw	ra,8(sp)
 4014a6c:	80000015 	stw	zero,0(r16)
 4014a70:	40182dc0 	call	40182dc <fstat>
 4014a74:	00ffffc4 	movi	r3,-1
 4014a78:	10c00526 	beq	r2,r3,4014a90 <_fstat_r+0x4c>
 4014a7c:	dfc00217 	ldw	ra,8(sp)
 4014a80:	dc400117 	ldw	r17,4(sp)
 4014a84:	dc000017 	ldw	r16,0(sp)
 4014a88:	dec00304 	addi	sp,sp,12
 4014a8c:	f800283a 	ret
 4014a90:	80c00017 	ldw	r3,0(r16)
 4014a94:	183ff926 	beq	r3,zero,4014a7c <__alt_data_end+0xfc014a7c>
 4014a98:	88c00015 	stw	r3,0(r17)
 4014a9c:	003ff706 	br	4014a7c <__alt_data_end+0xfc014a7c>

04014aa0 <_isatty_r>:
 4014aa0:	defffd04 	addi	sp,sp,-12
 4014aa4:	dc000015 	stw	r16,0(sp)
 4014aa8:	040100f4 	movhi	r16,1027
 4014aac:	dc400115 	stw	r17,4(sp)
 4014ab0:	84208404 	addi	r16,r16,-32240
 4014ab4:	2023883a 	mov	r17,r4
 4014ab8:	2809883a 	mov	r4,r5
 4014abc:	dfc00215 	stw	ra,8(sp)
 4014ac0:	80000015 	stw	zero,0(r16)
 4014ac4:	40183ac0 	call	40183ac <isatty>
 4014ac8:	00ffffc4 	movi	r3,-1
 4014acc:	10c00526 	beq	r2,r3,4014ae4 <_isatty_r+0x44>
 4014ad0:	dfc00217 	ldw	ra,8(sp)
 4014ad4:	dc400117 	ldw	r17,4(sp)
 4014ad8:	dc000017 	ldw	r16,0(sp)
 4014adc:	dec00304 	addi	sp,sp,12
 4014ae0:	f800283a 	ret
 4014ae4:	80c00017 	ldw	r3,0(r16)
 4014ae8:	183ff926 	beq	r3,zero,4014ad0 <__alt_data_end+0xfc014ad0>
 4014aec:	88c00015 	stw	r3,0(r17)
 4014af0:	003ff706 	br	4014ad0 <__alt_data_end+0xfc014ad0>

04014af4 <_lseek_r>:
 4014af4:	defffd04 	addi	sp,sp,-12
 4014af8:	2805883a 	mov	r2,r5
 4014afc:	dc000015 	stw	r16,0(sp)
 4014b00:	040100f4 	movhi	r16,1027
 4014b04:	dc400115 	stw	r17,4(sp)
 4014b08:	300b883a 	mov	r5,r6
 4014b0c:	84208404 	addi	r16,r16,-32240
 4014b10:	2023883a 	mov	r17,r4
 4014b14:	380d883a 	mov	r6,r7
 4014b18:	1009883a 	mov	r4,r2
 4014b1c:	dfc00215 	stw	ra,8(sp)
 4014b20:	80000015 	stw	zero,0(r16)
 4014b24:	40186580 	call	4018658 <lseek>
 4014b28:	00ffffc4 	movi	r3,-1
 4014b2c:	10c00526 	beq	r2,r3,4014b44 <_lseek_r+0x50>
 4014b30:	dfc00217 	ldw	ra,8(sp)
 4014b34:	dc400117 	ldw	r17,4(sp)
 4014b38:	dc000017 	ldw	r16,0(sp)
 4014b3c:	dec00304 	addi	sp,sp,12
 4014b40:	f800283a 	ret
 4014b44:	80c00017 	ldw	r3,0(r16)
 4014b48:	183ff926 	beq	r3,zero,4014b30 <__alt_data_end+0xfc014b30>
 4014b4c:	88c00015 	stw	r3,0(r17)
 4014b50:	003ff706 	br	4014b30 <__alt_data_end+0xfc014b30>

04014b54 <_read_r>:
 4014b54:	defffd04 	addi	sp,sp,-12
 4014b58:	2805883a 	mov	r2,r5
 4014b5c:	dc000015 	stw	r16,0(sp)
 4014b60:	040100f4 	movhi	r16,1027
 4014b64:	dc400115 	stw	r17,4(sp)
 4014b68:	300b883a 	mov	r5,r6
 4014b6c:	84208404 	addi	r16,r16,-32240
 4014b70:	2023883a 	mov	r17,r4
 4014b74:	380d883a 	mov	r6,r7
 4014b78:	1009883a 	mov	r4,r2
 4014b7c:	dfc00215 	stw	ra,8(sp)
 4014b80:	80000015 	stw	zero,0(r16)
 4014b84:	40187880 	call	4018788 <read>
 4014b88:	00ffffc4 	movi	r3,-1
 4014b8c:	10c00526 	beq	r2,r3,4014ba4 <_read_r+0x50>
 4014b90:	dfc00217 	ldw	ra,8(sp)
 4014b94:	dc400117 	ldw	r17,4(sp)
 4014b98:	dc000017 	ldw	r16,0(sp)
 4014b9c:	dec00304 	addi	sp,sp,12
 4014ba0:	f800283a 	ret
 4014ba4:	80c00017 	ldw	r3,0(r16)
 4014ba8:	183ff926 	beq	r3,zero,4014b90 <__alt_data_end+0xfc014b90>
 4014bac:	88c00015 	stw	r3,0(r17)
 4014bb0:	003ff706 	br	4014b90 <__alt_data_end+0xfc014b90>

04014bb4 <_wcrtomb_r>:
 4014bb4:	defff604 	addi	sp,sp,-40
 4014bb8:	008100b4 	movhi	r2,1026
 4014bbc:	dc800815 	stw	r18,32(sp)
 4014bc0:	dc400715 	stw	r17,28(sp)
 4014bc4:	dc000615 	stw	r16,24(sp)
 4014bc8:	1093f704 	addi	r2,r2,20444
 4014bcc:	dfc00915 	stw	ra,36(sp)
 4014bd0:	2021883a 	mov	r16,r4
 4014bd4:	3823883a 	mov	r17,r7
 4014bd8:	14800017 	ldw	r18,0(r2)
 4014bdc:	28001426 	beq	r5,zero,4014c30 <_wcrtomb_r+0x7c>
 4014be0:	d9400415 	stw	r5,16(sp)
 4014be4:	d9800515 	stw	r6,20(sp)
 4014be8:	4010fc80 	call	4010fc8 <__locale_charset>
 4014bec:	d9800517 	ldw	r6,20(sp)
 4014bf0:	d9400417 	ldw	r5,16(sp)
 4014bf4:	100f883a 	mov	r7,r2
 4014bf8:	dc400015 	stw	r17,0(sp)
 4014bfc:	8009883a 	mov	r4,r16
 4014c00:	903ee83a 	callr	r18
 4014c04:	00ffffc4 	movi	r3,-1
 4014c08:	10c0031e 	bne	r2,r3,4014c18 <_wcrtomb_r+0x64>
 4014c0c:	88000015 	stw	zero,0(r17)
 4014c10:	00c02284 	movi	r3,138
 4014c14:	80c00015 	stw	r3,0(r16)
 4014c18:	dfc00917 	ldw	ra,36(sp)
 4014c1c:	dc800817 	ldw	r18,32(sp)
 4014c20:	dc400717 	ldw	r17,28(sp)
 4014c24:	dc000617 	ldw	r16,24(sp)
 4014c28:	dec00a04 	addi	sp,sp,40
 4014c2c:	f800283a 	ret
 4014c30:	4010fc80 	call	4010fc8 <__locale_charset>
 4014c34:	100f883a 	mov	r7,r2
 4014c38:	dc400015 	stw	r17,0(sp)
 4014c3c:	000d883a 	mov	r6,zero
 4014c40:	d9400104 	addi	r5,sp,4
 4014c44:	8009883a 	mov	r4,r16
 4014c48:	903ee83a 	callr	r18
 4014c4c:	003fed06 	br	4014c04 <__alt_data_end+0xfc014c04>

04014c50 <wcrtomb>:
 4014c50:	defff604 	addi	sp,sp,-40
 4014c54:	008100b4 	movhi	r2,1026
 4014c58:	dc800615 	stw	r18,24(sp)
 4014c5c:	dc400515 	stw	r17,20(sp)
 4014c60:	1093f304 	addi	r2,r2,20428
 4014c64:	dfc00915 	stw	ra,36(sp)
 4014c68:	dd000815 	stw	r20,32(sp)
 4014c6c:	dcc00715 	stw	r19,28(sp)
 4014c70:	dc000415 	stw	r16,16(sp)
 4014c74:	3025883a 	mov	r18,r6
 4014c78:	14400017 	ldw	r17,0(r2)
 4014c7c:	20001926 	beq	r4,zero,4014ce4 <wcrtomb+0x94>
 4014c80:	008100b4 	movhi	r2,1026
 4014c84:	1093f704 	addi	r2,r2,20444
 4014c88:	15000017 	ldw	r20,0(r2)
 4014c8c:	2021883a 	mov	r16,r4
 4014c90:	2827883a 	mov	r19,r5
 4014c94:	4010fc80 	call	4010fc8 <__locale_charset>
 4014c98:	100f883a 	mov	r7,r2
 4014c9c:	dc800015 	stw	r18,0(sp)
 4014ca0:	980d883a 	mov	r6,r19
 4014ca4:	800b883a 	mov	r5,r16
 4014ca8:	8809883a 	mov	r4,r17
 4014cac:	a03ee83a 	callr	r20
 4014cb0:	00ffffc4 	movi	r3,-1
 4014cb4:	10c0031e 	bne	r2,r3,4014cc4 <wcrtomb+0x74>
 4014cb8:	90000015 	stw	zero,0(r18)
 4014cbc:	00c02284 	movi	r3,138
 4014cc0:	88c00015 	stw	r3,0(r17)
 4014cc4:	dfc00917 	ldw	ra,36(sp)
 4014cc8:	dd000817 	ldw	r20,32(sp)
 4014ccc:	dcc00717 	ldw	r19,28(sp)
 4014cd0:	dc800617 	ldw	r18,24(sp)
 4014cd4:	dc400517 	ldw	r17,20(sp)
 4014cd8:	dc000417 	ldw	r16,16(sp)
 4014cdc:	dec00a04 	addi	sp,sp,40
 4014ce0:	f800283a 	ret
 4014ce4:	008100b4 	movhi	r2,1026
 4014ce8:	1093f704 	addi	r2,r2,20444
 4014cec:	14000017 	ldw	r16,0(r2)
 4014cf0:	4010fc80 	call	4010fc8 <__locale_charset>
 4014cf4:	100f883a 	mov	r7,r2
 4014cf8:	dc800015 	stw	r18,0(sp)
 4014cfc:	000d883a 	mov	r6,zero
 4014d00:	d9400104 	addi	r5,sp,4
 4014d04:	8809883a 	mov	r4,r17
 4014d08:	803ee83a 	callr	r16
 4014d0c:	003fe806 	br	4014cb0 <__alt_data_end+0xfc014cb0>

04014d10 <__ascii_wctomb>:
 4014d10:	28000526 	beq	r5,zero,4014d28 <__ascii_wctomb+0x18>
 4014d14:	00803fc4 	movi	r2,255
 4014d18:	11800536 	bltu	r2,r6,4014d30 <__ascii_wctomb+0x20>
 4014d1c:	29800005 	stb	r6,0(r5)
 4014d20:	00800044 	movi	r2,1
 4014d24:	f800283a 	ret
 4014d28:	0005883a 	mov	r2,zero
 4014d2c:	f800283a 	ret
 4014d30:	00802284 	movi	r2,138
 4014d34:	20800015 	stw	r2,0(r4)
 4014d38:	00bfffc4 	movi	r2,-1
 4014d3c:	f800283a 	ret

04014d40 <_wctomb_r>:
 4014d40:	008100b4 	movhi	r2,1026
 4014d44:	defff904 	addi	sp,sp,-28
 4014d48:	1093f704 	addi	r2,r2,20444
 4014d4c:	dfc00615 	stw	ra,24(sp)
 4014d50:	dc400515 	stw	r17,20(sp)
 4014d54:	dc000415 	stw	r16,16(sp)
 4014d58:	3823883a 	mov	r17,r7
 4014d5c:	14000017 	ldw	r16,0(r2)
 4014d60:	d9000115 	stw	r4,4(sp)
 4014d64:	d9400215 	stw	r5,8(sp)
 4014d68:	d9800315 	stw	r6,12(sp)
 4014d6c:	4010fc80 	call	4010fc8 <__locale_charset>
 4014d70:	d9800317 	ldw	r6,12(sp)
 4014d74:	d9400217 	ldw	r5,8(sp)
 4014d78:	d9000117 	ldw	r4,4(sp)
 4014d7c:	100f883a 	mov	r7,r2
 4014d80:	dc400015 	stw	r17,0(sp)
 4014d84:	803ee83a 	callr	r16
 4014d88:	dfc00617 	ldw	ra,24(sp)
 4014d8c:	dc400517 	ldw	r17,20(sp)
 4014d90:	dc000417 	ldw	r16,16(sp)
 4014d94:	dec00704 	addi	sp,sp,28
 4014d98:	f800283a 	ret

04014d9c <__udivdi3>:
 4014d9c:	defff404 	addi	sp,sp,-48
 4014da0:	dcc00515 	stw	r19,20(sp)
 4014da4:	dc000215 	stw	r16,8(sp)
 4014da8:	dfc00b15 	stw	ra,44(sp)
 4014dac:	df000a15 	stw	fp,40(sp)
 4014db0:	ddc00915 	stw	r23,36(sp)
 4014db4:	dd800815 	stw	r22,32(sp)
 4014db8:	dd400715 	stw	r21,28(sp)
 4014dbc:	dd000615 	stw	r20,24(sp)
 4014dc0:	dc800415 	stw	r18,16(sp)
 4014dc4:	dc400315 	stw	r17,12(sp)
 4014dc8:	2027883a 	mov	r19,r4
 4014dcc:	2821883a 	mov	r16,r5
 4014dd0:	3800461e 	bne	r7,zero,4014eec <__udivdi3+0x150>
 4014dd4:	3023883a 	mov	r17,r6
 4014dd8:	2025883a 	mov	r18,r4
 4014ddc:	2980572e 	bgeu	r5,r6,4014f3c <__udivdi3+0x1a0>
 4014de0:	00bfffd4 	movui	r2,65535
 4014de4:	282d883a 	mov	r22,r5
 4014de8:	1180b236 	bltu	r2,r6,40150b4 <__udivdi3+0x318>
 4014dec:	00803fc4 	movi	r2,255
 4014df0:	1185803a 	cmpltu	r2,r2,r6
 4014df4:	100490fa 	slli	r2,r2,3
 4014df8:	3086d83a 	srl	r3,r6,r2
 4014dfc:	010100b4 	movhi	r4,1026
 4014e00:	21074504 	addi	r4,r4,7444
 4014e04:	20c7883a 	add	r3,r4,r3
 4014e08:	18c00003 	ldbu	r3,0(r3)
 4014e0c:	1885883a 	add	r2,r3,r2
 4014e10:	00c00804 	movi	r3,32
 4014e14:	1887c83a 	sub	r3,r3,r2
 4014e18:	18000526 	beq	r3,zero,4014e30 <__udivdi3+0x94>
 4014e1c:	80e0983a 	sll	r16,r16,r3
 4014e20:	9884d83a 	srl	r2,r19,r2
 4014e24:	30e2983a 	sll	r17,r6,r3
 4014e28:	98e4983a 	sll	r18,r19,r3
 4014e2c:	142cb03a 	or	r22,r2,r16
 4014e30:	882ad43a 	srli	r21,r17,16
 4014e34:	b009883a 	mov	r4,r22
 4014e38:	8d3fffcc 	andi	r20,r17,65535
 4014e3c:	a80b883a 	mov	r5,r21
 4014e40:	400a9dc0 	call	400a9dc <__umodsi3>
 4014e44:	b009883a 	mov	r4,r22
 4014e48:	a80b883a 	mov	r5,r21
 4014e4c:	1027883a 	mov	r19,r2
 4014e50:	400a9780 	call	400a978 <__udivsi3>
 4014e54:	100b883a 	mov	r5,r2
 4014e58:	a009883a 	mov	r4,r20
 4014e5c:	102d883a 	mov	r22,r2
 4014e60:	400aa340 	call	400aa34 <__mulsi3>
 4014e64:	9826943a 	slli	r19,r19,16
 4014e68:	9006d43a 	srli	r3,r18,16
 4014e6c:	1cc6b03a 	or	r3,r3,r19
 4014e70:	1880052e 	bgeu	r3,r2,4014e88 <__udivdi3+0xec>
 4014e74:	1c47883a 	add	r3,r3,r17
 4014e78:	b13fffc4 	addi	r4,r22,-1
 4014e7c:	1c400136 	bltu	r3,r17,4014e84 <__udivdi3+0xe8>
 4014e80:	18814236 	bltu	r3,r2,401538c <__udivdi3+0x5f0>
 4014e84:	202d883a 	mov	r22,r4
 4014e88:	18a1c83a 	sub	r16,r3,r2
 4014e8c:	8009883a 	mov	r4,r16
 4014e90:	a80b883a 	mov	r5,r21
 4014e94:	400a9dc0 	call	400a9dc <__umodsi3>
 4014e98:	1027883a 	mov	r19,r2
 4014e9c:	8009883a 	mov	r4,r16
 4014ea0:	a80b883a 	mov	r5,r21
 4014ea4:	9826943a 	slli	r19,r19,16
 4014ea8:	400a9780 	call	400a978 <__udivsi3>
 4014eac:	100b883a 	mov	r5,r2
 4014eb0:	a009883a 	mov	r4,r20
 4014eb4:	94bfffcc 	andi	r18,r18,65535
 4014eb8:	1021883a 	mov	r16,r2
 4014ebc:	94e4b03a 	or	r18,r18,r19
 4014ec0:	400aa340 	call	400aa34 <__mulsi3>
 4014ec4:	9080052e 	bgeu	r18,r2,4014edc <__udivdi3+0x140>
 4014ec8:	8ca5883a 	add	r18,r17,r18
 4014ecc:	80ffffc4 	addi	r3,r16,-1
 4014ed0:	94410c36 	bltu	r18,r17,4015304 <__udivdi3+0x568>
 4014ed4:	90810b2e 	bgeu	r18,r2,4015304 <__udivdi3+0x568>
 4014ed8:	843fff84 	addi	r16,r16,-2
 4014edc:	b004943a 	slli	r2,r22,16
 4014ee0:	0007883a 	mov	r3,zero
 4014ee4:	1404b03a 	or	r2,r2,r16
 4014ee8:	00005e06 	br	4015064 <__udivdi3+0x2c8>
 4014eec:	29c05b36 	bltu	r5,r7,401505c <__udivdi3+0x2c0>
 4014ef0:	00bfffd4 	movui	r2,65535
 4014ef4:	11c0672e 	bgeu	r2,r7,4015094 <__udivdi3+0x2f8>
 4014ef8:	00804034 	movhi	r2,256
 4014efc:	10bfffc4 	addi	r2,r2,-1
 4014f00:	11c10a36 	bltu	r2,r7,401532c <__udivdi3+0x590>
 4014f04:	00800404 	movi	r2,16
 4014f08:	3886d83a 	srl	r3,r7,r2
 4014f0c:	010100b4 	movhi	r4,1026
 4014f10:	21074504 	addi	r4,r4,7444
 4014f14:	20c7883a 	add	r3,r4,r3
 4014f18:	18c00003 	ldbu	r3,0(r3)
 4014f1c:	05c00804 	movi	r23,32
 4014f20:	1885883a 	add	r2,r3,r2
 4014f24:	b8afc83a 	sub	r23,r23,r2
 4014f28:	b800671e 	bne	r23,zero,40150c8 <__udivdi3+0x32c>
 4014f2c:	3c010536 	bltu	r7,r16,4015344 <__udivdi3+0x5a8>
 4014f30:	9985403a 	cmpgeu	r2,r19,r6
 4014f34:	0007883a 	mov	r3,zero
 4014f38:	00004a06 	br	4015064 <__udivdi3+0x2c8>
 4014f3c:	3000041e 	bne	r6,zero,4014f50 <__udivdi3+0x1b4>
 4014f40:	000b883a 	mov	r5,zero
 4014f44:	01000044 	movi	r4,1
 4014f48:	400a9780 	call	400a978 <__udivsi3>
 4014f4c:	1023883a 	mov	r17,r2
 4014f50:	00bfffd4 	movui	r2,65535
 4014f54:	1440532e 	bgeu	r2,r17,40150a4 <__udivdi3+0x308>
 4014f58:	00804034 	movhi	r2,256
 4014f5c:	10bfffc4 	addi	r2,r2,-1
 4014f60:	1440f436 	bltu	r2,r17,4015334 <__udivdi3+0x598>
 4014f64:	00800404 	movi	r2,16
 4014f68:	8886d83a 	srl	r3,r17,r2
 4014f6c:	010100b4 	movhi	r4,1026
 4014f70:	21074504 	addi	r4,r4,7444
 4014f74:	20c7883a 	add	r3,r4,r3
 4014f78:	18c00003 	ldbu	r3,0(r3)
 4014f7c:	1885883a 	add	r2,r3,r2
 4014f80:	00c00804 	movi	r3,32
 4014f84:	1887c83a 	sub	r3,r3,r2
 4014f88:	1800a51e 	bne	r3,zero,4015220 <__udivdi3+0x484>
 4014f8c:	882ad43a 	srli	r21,r17,16
 4014f90:	8461c83a 	sub	r16,r16,r17
 4014f94:	8d3fffcc 	andi	r20,r17,65535
 4014f98:	00c00044 	movi	r3,1
 4014f9c:	a80b883a 	mov	r5,r21
 4014fa0:	8009883a 	mov	r4,r16
 4014fa4:	d8c00115 	stw	r3,4(sp)
 4014fa8:	400a9dc0 	call	400a9dc <__umodsi3>
 4014fac:	a80b883a 	mov	r5,r21
 4014fb0:	8009883a 	mov	r4,r16
 4014fb4:	1027883a 	mov	r19,r2
 4014fb8:	400a9780 	call	400a978 <__udivsi3>
 4014fbc:	a00b883a 	mov	r5,r20
 4014fc0:	1009883a 	mov	r4,r2
 4014fc4:	102d883a 	mov	r22,r2
 4014fc8:	400aa340 	call	400aa34 <__mulsi3>
 4014fcc:	9826943a 	slli	r19,r19,16
 4014fd0:	900ed43a 	srli	r7,r18,16
 4014fd4:	d8c00117 	ldw	r3,4(sp)
 4014fd8:	3cceb03a 	or	r7,r7,r19
 4014fdc:	3880052e 	bgeu	r7,r2,4014ff4 <__udivdi3+0x258>
 4014fe0:	3c4f883a 	add	r7,r7,r17
 4014fe4:	b13fffc4 	addi	r4,r22,-1
 4014fe8:	3c400136 	bltu	r7,r17,4014ff0 <__udivdi3+0x254>
 4014fec:	3880e436 	bltu	r7,r2,4015380 <__udivdi3+0x5e4>
 4014ff0:	202d883a 	mov	r22,r4
 4014ff4:	38a1c83a 	sub	r16,r7,r2
 4014ff8:	8009883a 	mov	r4,r16
 4014ffc:	a80b883a 	mov	r5,r21
 4015000:	d8c00115 	stw	r3,4(sp)
 4015004:	400a9dc0 	call	400a9dc <__umodsi3>
 4015008:	1027883a 	mov	r19,r2
 401500c:	8009883a 	mov	r4,r16
 4015010:	a80b883a 	mov	r5,r21
 4015014:	9826943a 	slli	r19,r19,16
 4015018:	400a9780 	call	400a978 <__udivsi3>
 401501c:	a00b883a 	mov	r5,r20
 4015020:	1009883a 	mov	r4,r2
 4015024:	94bfffcc 	andi	r18,r18,65535
 4015028:	1021883a 	mov	r16,r2
 401502c:	94e4b03a 	or	r18,r18,r19
 4015030:	400aa340 	call	400aa34 <__mulsi3>
 4015034:	d8c00117 	ldw	r3,4(sp)
 4015038:	9080052e 	bgeu	r18,r2,4015050 <__udivdi3+0x2b4>
 401503c:	8ca5883a 	add	r18,r17,r18
 4015040:	813fffc4 	addi	r4,r16,-1
 4015044:	9440ad36 	bltu	r18,r17,40152fc <__udivdi3+0x560>
 4015048:	9080ac2e 	bgeu	r18,r2,40152fc <__udivdi3+0x560>
 401504c:	843fff84 	addi	r16,r16,-2
 4015050:	b004943a 	slli	r2,r22,16
 4015054:	1404b03a 	or	r2,r2,r16
 4015058:	00000206 	br	4015064 <__udivdi3+0x2c8>
 401505c:	0007883a 	mov	r3,zero
 4015060:	0005883a 	mov	r2,zero
 4015064:	dfc00b17 	ldw	ra,44(sp)
 4015068:	df000a17 	ldw	fp,40(sp)
 401506c:	ddc00917 	ldw	r23,36(sp)
 4015070:	dd800817 	ldw	r22,32(sp)
 4015074:	dd400717 	ldw	r21,28(sp)
 4015078:	dd000617 	ldw	r20,24(sp)
 401507c:	dcc00517 	ldw	r19,20(sp)
 4015080:	dc800417 	ldw	r18,16(sp)
 4015084:	dc400317 	ldw	r17,12(sp)
 4015088:	dc000217 	ldw	r16,8(sp)
 401508c:	dec00c04 	addi	sp,sp,48
 4015090:	f800283a 	ret
 4015094:	00803fc4 	movi	r2,255
 4015098:	11c5803a 	cmpltu	r2,r2,r7
 401509c:	100490fa 	slli	r2,r2,3
 40150a0:	003f9906 	br	4014f08 <__alt_data_end+0xfc014f08>
 40150a4:	00803fc4 	movi	r2,255
 40150a8:	1445803a 	cmpltu	r2,r2,r17
 40150ac:	100490fa 	slli	r2,r2,3
 40150b0:	003fad06 	br	4014f68 <__alt_data_end+0xfc014f68>
 40150b4:	00804034 	movhi	r2,256
 40150b8:	10bfffc4 	addi	r2,r2,-1
 40150bc:	11809f36 	bltu	r2,r6,401533c <__udivdi3+0x5a0>
 40150c0:	00800404 	movi	r2,16
 40150c4:	003f4c06 	br	4014df8 <__alt_data_end+0xfc014df8>
 40150c8:	3dce983a 	sll	r7,r7,r23
 40150cc:	30b8d83a 	srl	fp,r6,r2
 40150d0:	80a2d83a 	srl	r17,r16,r2
 40150d4:	35cc983a 	sll	r6,r6,r23
 40150d8:	3f38b03a 	or	fp,r7,fp
 40150dc:	e024d43a 	srli	r18,fp,16
 40150e0:	9884d83a 	srl	r2,r19,r2
 40150e4:	85e0983a 	sll	r16,r16,r23
 40150e8:	8809883a 	mov	r4,r17
 40150ec:	900b883a 	mov	r5,r18
 40150f0:	d9800015 	stw	r6,0(sp)
 40150f4:	1420b03a 	or	r16,r2,r16
 40150f8:	400a9dc0 	call	400a9dc <__umodsi3>
 40150fc:	900b883a 	mov	r5,r18
 4015100:	8809883a 	mov	r4,r17
 4015104:	1029883a 	mov	r20,r2
 4015108:	e5bfffcc 	andi	r22,fp,65535
 401510c:	400a9780 	call	400a978 <__udivsi3>
 4015110:	100b883a 	mov	r5,r2
 4015114:	b009883a 	mov	r4,r22
 4015118:	102b883a 	mov	r21,r2
 401511c:	400aa340 	call	400aa34 <__mulsi3>
 4015120:	a028943a 	slli	r20,r20,16
 4015124:	8006d43a 	srli	r3,r16,16
 4015128:	1d06b03a 	or	r3,r3,r20
 401512c:	1880042e 	bgeu	r3,r2,4015140 <__udivdi3+0x3a4>
 4015130:	1f07883a 	add	r3,r3,fp
 4015134:	a93fffc4 	addi	r4,r21,-1
 4015138:	1f00892e 	bgeu	r3,fp,4015360 <__udivdi3+0x5c4>
 401513c:	202b883a 	mov	r21,r4
 4015140:	18a3c83a 	sub	r17,r3,r2
 4015144:	8809883a 	mov	r4,r17
 4015148:	900b883a 	mov	r5,r18
 401514c:	400a9dc0 	call	400a9dc <__umodsi3>
 4015150:	1029883a 	mov	r20,r2
 4015154:	8809883a 	mov	r4,r17
 4015158:	900b883a 	mov	r5,r18
 401515c:	a028943a 	slli	r20,r20,16
 4015160:	400a9780 	call	400a978 <__udivsi3>
 4015164:	100b883a 	mov	r5,r2
 4015168:	b009883a 	mov	r4,r22
 401516c:	843fffcc 	andi	r16,r16,65535
 4015170:	1023883a 	mov	r17,r2
 4015174:	8520b03a 	or	r16,r16,r20
 4015178:	400aa340 	call	400aa34 <__mulsi3>
 401517c:	8080042e 	bgeu	r16,r2,4015190 <__udivdi3+0x3f4>
 4015180:	8721883a 	add	r16,r16,fp
 4015184:	88ffffc4 	addi	r3,r17,-1
 4015188:	8700712e 	bgeu	r16,fp,4015350 <__udivdi3+0x5b4>
 401518c:	1823883a 	mov	r17,r3
 4015190:	a80e943a 	slli	r7,r21,16
 4015194:	d8c00017 	ldw	r3,0(sp)
 4015198:	80a1c83a 	sub	r16,r16,r2
 401519c:	3c64b03a 	or	r18,r7,r17
 40151a0:	1d3fffcc 	andi	r20,r3,65535
 40151a4:	9022d43a 	srli	r17,r18,16
 40151a8:	95bfffcc 	andi	r22,r18,65535
 40151ac:	a00b883a 	mov	r5,r20
 40151b0:	b009883a 	mov	r4,r22
 40151b4:	182ad43a 	srli	r21,r3,16
 40151b8:	400aa340 	call	400aa34 <__mulsi3>
 40151bc:	a00b883a 	mov	r5,r20
 40151c0:	8809883a 	mov	r4,r17
 40151c4:	1039883a 	mov	fp,r2
 40151c8:	400aa340 	call	400aa34 <__mulsi3>
 40151cc:	8809883a 	mov	r4,r17
 40151d0:	a80b883a 	mov	r5,r21
 40151d4:	1029883a 	mov	r20,r2
 40151d8:	400aa340 	call	400aa34 <__mulsi3>
 40151dc:	a80b883a 	mov	r5,r21
 40151e0:	b009883a 	mov	r4,r22
 40151e4:	1023883a 	mov	r17,r2
 40151e8:	400aa340 	call	400aa34 <__mulsi3>
 40151ec:	e006d43a 	srli	r3,fp,16
 40151f0:	1505883a 	add	r2,r2,r20
 40151f4:	1887883a 	add	r3,r3,r2
 40151f8:	1d00022e 	bgeu	r3,r20,4015204 <__udivdi3+0x468>
 40151fc:	00800074 	movhi	r2,1
 4015200:	88a3883a 	add	r17,r17,r2
 4015204:	1804d43a 	srli	r2,r3,16
 4015208:	1463883a 	add	r17,r2,r17
 401520c:	84404436 	bltu	r16,r17,4015320 <__udivdi3+0x584>
 4015210:	84403e26 	beq	r16,r17,401530c <__udivdi3+0x570>
 4015214:	9005883a 	mov	r2,r18
 4015218:	0007883a 	mov	r3,zero
 401521c:	003f9106 	br	4015064 <__alt_data_end+0xfc015064>
 4015220:	88e2983a 	sll	r17,r17,r3
 4015224:	80aed83a 	srl	r23,r16,r2
 4015228:	80e0983a 	sll	r16,r16,r3
 401522c:	882ad43a 	srli	r21,r17,16
 4015230:	9884d83a 	srl	r2,r19,r2
 4015234:	b809883a 	mov	r4,r23
 4015238:	a80b883a 	mov	r5,r21
 401523c:	98e4983a 	sll	r18,r19,r3
 4015240:	142cb03a 	or	r22,r2,r16
 4015244:	400a9dc0 	call	400a9dc <__umodsi3>
 4015248:	b809883a 	mov	r4,r23
 401524c:	a80b883a 	mov	r5,r21
 4015250:	1027883a 	mov	r19,r2
 4015254:	8d3fffcc 	andi	r20,r17,65535
 4015258:	400a9780 	call	400a978 <__udivsi3>
 401525c:	a009883a 	mov	r4,r20
 4015260:	100b883a 	mov	r5,r2
 4015264:	102f883a 	mov	r23,r2
 4015268:	400aa340 	call	400aa34 <__mulsi3>
 401526c:	9826943a 	slli	r19,r19,16
 4015270:	b008d43a 	srli	r4,r22,16
 4015274:	24c8b03a 	or	r4,r4,r19
 4015278:	2080062e 	bgeu	r4,r2,4015294 <__udivdi3+0x4f8>
 401527c:	2449883a 	add	r4,r4,r17
 4015280:	b8ffffc4 	addi	r3,r23,-1
 4015284:	24403c36 	bltu	r4,r17,4015378 <__udivdi3+0x5dc>
 4015288:	20803b2e 	bgeu	r4,r2,4015378 <__udivdi3+0x5dc>
 401528c:	bdffff84 	addi	r23,r23,-2
 4015290:	2449883a 	add	r4,r4,r17
 4015294:	20a1c83a 	sub	r16,r4,r2
 4015298:	a80b883a 	mov	r5,r21
 401529c:	8009883a 	mov	r4,r16
 40152a0:	400a9dc0 	call	400a9dc <__umodsi3>
 40152a4:	a80b883a 	mov	r5,r21
 40152a8:	8009883a 	mov	r4,r16
 40152ac:	1027883a 	mov	r19,r2
 40152b0:	400a9780 	call	400a978 <__udivsi3>
 40152b4:	a009883a 	mov	r4,r20
 40152b8:	100b883a 	mov	r5,r2
 40152bc:	9826943a 	slli	r19,r19,16
 40152c0:	1039883a 	mov	fp,r2
 40152c4:	400aa340 	call	400aa34 <__mulsi3>
 40152c8:	b13fffcc 	andi	r4,r22,65535
 40152cc:	24c8b03a 	or	r4,r4,r19
 40152d0:	2080062e 	bgeu	r4,r2,40152ec <__udivdi3+0x550>
 40152d4:	2449883a 	add	r4,r4,r17
 40152d8:	e0ffffc4 	addi	r3,fp,-1
 40152dc:	24402436 	bltu	r4,r17,4015370 <__udivdi3+0x5d4>
 40152e0:	2080232e 	bgeu	r4,r2,4015370 <__udivdi3+0x5d4>
 40152e4:	e73fff84 	addi	fp,fp,-2
 40152e8:	2449883a 	add	r4,r4,r17
 40152ec:	b82e943a 	slli	r23,r23,16
 40152f0:	20a1c83a 	sub	r16,r4,r2
 40152f4:	bf06b03a 	or	r3,r23,fp
 40152f8:	003f2806 	br	4014f9c <__alt_data_end+0xfc014f9c>
 40152fc:	2021883a 	mov	r16,r4
 4015300:	003f5306 	br	4015050 <__alt_data_end+0xfc015050>
 4015304:	1821883a 	mov	r16,r3
 4015308:	003ef406 	br	4014edc <__alt_data_end+0xfc014edc>
 401530c:	1806943a 	slli	r3,r3,16
 4015310:	9de6983a 	sll	r19,r19,r23
 4015314:	e73fffcc 	andi	fp,fp,65535
 4015318:	1f07883a 	add	r3,r3,fp
 401531c:	98ffbd2e 	bgeu	r19,r3,4015214 <__alt_data_end+0xfc015214>
 4015320:	90bfffc4 	addi	r2,r18,-1
 4015324:	0007883a 	mov	r3,zero
 4015328:	003f4e06 	br	4015064 <__alt_data_end+0xfc015064>
 401532c:	00800604 	movi	r2,24
 4015330:	003ef506 	br	4014f08 <__alt_data_end+0xfc014f08>
 4015334:	00800604 	movi	r2,24
 4015338:	003f0b06 	br	4014f68 <__alt_data_end+0xfc014f68>
 401533c:	00800604 	movi	r2,24
 4015340:	003ead06 	br	4014df8 <__alt_data_end+0xfc014df8>
 4015344:	0007883a 	mov	r3,zero
 4015348:	00800044 	movi	r2,1
 401534c:	003f4506 	br	4015064 <__alt_data_end+0xfc015064>
 4015350:	80bf8e2e 	bgeu	r16,r2,401518c <__alt_data_end+0xfc01518c>
 4015354:	8c7fff84 	addi	r17,r17,-2
 4015358:	8721883a 	add	r16,r16,fp
 401535c:	003f8c06 	br	4015190 <__alt_data_end+0xfc015190>
 4015360:	18bf762e 	bgeu	r3,r2,401513c <__alt_data_end+0xfc01513c>
 4015364:	ad7fff84 	addi	r21,r21,-2
 4015368:	1f07883a 	add	r3,r3,fp
 401536c:	003f7406 	br	4015140 <__alt_data_end+0xfc015140>
 4015370:	1839883a 	mov	fp,r3
 4015374:	003fdd06 	br	40152ec <__alt_data_end+0xfc0152ec>
 4015378:	182f883a 	mov	r23,r3
 401537c:	003fc506 	br	4015294 <__alt_data_end+0xfc015294>
 4015380:	b5bfff84 	addi	r22,r22,-2
 4015384:	3c4f883a 	add	r7,r7,r17
 4015388:	003f1a06 	br	4014ff4 <__alt_data_end+0xfc014ff4>
 401538c:	b5bfff84 	addi	r22,r22,-2
 4015390:	1c47883a 	add	r3,r3,r17
 4015394:	003ebc06 	br	4014e88 <__alt_data_end+0xfc014e88>

04015398 <__umoddi3>:
 4015398:	defff304 	addi	sp,sp,-52
 401539c:	df000b15 	stw	fp,44(sp)
 40153a0:	dc400415 	stw	r17,16(sp)
 40153a4:	dc000315 	stw	r16,12(sp)
 40153a8:	dfc00c15 	stw	ra,48(sp)
 40153ac:	ddc00a15 	stw	r23,40(sp)
 40153b0:	dd800915 	stw	r22,36(sp)
 40153b4:	dd400815 	stw	r21,32(sp)
 40153b8:	dd000715 	stw	r20,28(sp)
 40153bc:	dcc00615 	stw	r19,24(sp)
 40153c0:	dc800515 	stw	r18,20(sp)
 40153c4:	2021883a 	mov	r16,r4
 40153c8:	2823883a 	mov	r17,r5
 40153cc:	2839883a 	mov	fp,r5
 40153d0:	3800401e 	bne	r7,zero,40154d4 <__umoddi3+0x13c>
 40153d4:	3027883a 	mov	r19,r6
 40153d8:	2029883a 	mov	r20,r4
 40153dc:	2980552e 	bgeu	r5,r6,4015534 <__umoddi3+0x19c>
 40153e0:	00bfffd4 	movui	r2,65535
 40153e4:	1180a236 	bltu	r2,r6,4015670 <__umoddi3+0x2d8>
 40153e8:	01003fc4 	movi	r4,255
 40153ec:	2189803a 	cmpltu	r4,r4,r6
 40153f0:	200890fa 	slli	r4,r4,3
 40153f4:	3104d83a 	srl	r2,r6,r4
 40153f8:	00c100b4 	movhi	r3,1026
 40153fc:	18c74504 	addi	r3,r3,7444
 4015400:	1885883a 	add	r2,r3,r2
 4015404:	10c00003 	ldbu	r3,0(r2)
 4015408:	00800804 	movi	r2,32
 401540c:	1909883a 	add	r4,r3,r4
 4015410:	1125c83a 	sub	r18,r2,r4
 4015414:	90000526 	beq	r18,zero,401542c <__umoddi3+0x94>
 4015418:	8ca2983a 	sll	r17,r17,r18
 401541c:	8108d83a 	srl	r4,r16,r4
 4015420:	34a6983a 	sll	r19,r6,r18
 4015424:	84a8983a 	sll	r20,r16,r18
 4015428:	2478b03a 	or	fp,r4,r17
 401542c:	982cd43a 	srli	r22,r19,16
 4015430:	e009883a 	mov	r4,fp
 4015434:	9dffffcc 	andi	r23,r19,65535
 4015438:	b00b883a 	mov	r5,r22
 401543c:	400a9dc0 	call	400a9dc <__umodsi3>
 4015440:	b00b883a 	mov	r5,r22
 4015444:	e009883a 	mov	r4,fp
 4015448:	102b883a 	mov	r21,r2
 401544c:	400a9780 	call	400a978 <__udivsi3>
 4015450:	100b883a 	mov	r5,r2
 4015454:	b809883a 	mov	r4,r23
 4015458:	400aa340 	call	400aa34 <__mulsi3>
 401545c:	a82a943a 	slli	r21,r21,16
 4015460:	a006d43a 	srli	r3,r20,16
 4015464:	1d46b03a 	or	r3,r3,r21
 4015468:	1880032e 	bgeu	r3,r2,4015478 <__umoddi3+0xe0>
 401546c:	1cc7883a 	add	r3,r3,r19
 4015470:	1cc00136 	bltu	r3,r19,4015478 <__umoddi3+0xe0>
 4015474:	18813136 	bltu	r3,r2,401593c <__umoddi3+0x5a4>
 4015478:	18a1c83a 	sub	r16,r3,r2
 401547c:	b00b883a 	mov	r5,r22
 4015480:	8009883a 	mov	r4,r16
 4015484:	400a9dc0 	call	400a9dc <__umodsi3>
 4015488:	b00b883a 	mov	r5,r22
 401548c:	8009883a 	mov	r4,r16
 4015490:	1023883a 	mov	r17,r2
 4015494:	400a9780 	call	400a978 <__udivsi3>
 4015498:	100b883a 	mov	r5,r2
 401549c:	b809883a 	mov	r4,r23
 40154a0:	8822943a 	slli	r17,r17,16
 40154a4:	400aa340 	call	400aa34 <__mulsi3>
 40154a8:	a0ffffcc 	andi	r3,r20,65535
 40154ac:	1c46b03a 	or	r3,r3,r17
 40154b0:	1880042e 	bgeu	r3,r2,40154c4 <__umoddi3+0x12c>
 40154b4:	1cc7883a 	add	r3,r3,r19
 40154b8:	1cc00236 	bltu	r3,r19,40154c4 <__umoddi3+0x12c>
 40154bc:	1880012e 	bgeu	r3,r2,40154c4 <__umoddi3+0x12c>
 40154c0:	1cc7883a 	add	r3,r3,r19
 40154c4:	1885c83a 	sub	r2,r3,r2
 40154c8:	1484d83a 	srl	r2,r2,r18
 40154cc:	0007883a 	mov	r3,zero
 40154d0:	00005306 	br	4015620 <__umoddi3+0x288>
 40154d4:	29c05036 	bltu	r5,r7,4015618 <__umoddi3+0x280>
 40154d8:	00bfffd4 	movui	r2,65535
 40154dc:	11c05c2e 	bgeu	r2,r7,4015650 <__umoddi3+0x2b8>
 40154e0:	00804034 	movhi	r2,256
 40154e4:	10bfffc4 	addi	r2,r2,-1
 40154e8:	11c10636 	bltu	r2,r7,4015904 <__umoddi3+0x56c>
 40154ec:	01000404 	movi	r4,16
 40154f0:	3904d83a 	srl	r2,r7,r4
 40154f4:	00c100b4 	movhi	r3,1026
 40154f8:	18c74504 	addi	r3,r3,7444
 40154fc:	1885883a 	add	r2,r3,r2
 4015500:	14c00003 	ldbu	r19,0(r2)
 4015504:	00c00804 	movi	r3,32
 4015508:	9927883a 	add	r19,r19,r4
 401550c:	1ce9c83a 	sub	r20,r3,r19
 4015510:	a0005c1e 	bne	r20,zero,4015684 <__umoddi3+0x2ec>
 4015514:	3c400136 	bltu	r7,r17,401551c <__umoddi3+0x184>
 4015518:	81810a36 	bltu	r16,r6,4015944 <__umoddi3+0x5ac>
 401551c:	8185c83a 	sub	r2,r16,r6
 4015520:	89e3c83a 	sub	r17,r17,r7
 4015524:	8089803a 	cmpltu	r4,r16,r2
 4015528:	8939c83a 	sub	fp,r17,r4
 401552c:	e007883a 	mov	r3,fp
 4015530:	00003b06 	br	4015620 <__umoddi3+0x288>
 4015534:	3000041e 	bne	r6,zero,4015548 <__umoddi3+0x1b0>
 4015538:	000b883a 	mov	r5,zero
 401553c:	01000044 	movi	r4,1
 4015540:	400a9780 	call	400a978 <__udivsi3>
 4015544:	1027883a 	mov	r19,r2
 4015548:	00bfffd4 	movui	r2,65535
 401554c:	14c0442e 	bgeu	r2,r19,4015660 <__umoddi3+0x2c8>
 4015550:	00804034 	movhi	r2,256
 4015554:	10bfffc4 	addi	r2,r2,-1
 4015558:	14c0ec36 	bltu	r2,r19,401590c <__umoddi3+0x574>
 401555c:	00800404 	movi	r2,16
 4015560:	9886d83a 	srl	r3,r19,r2
 4015564:	010100b4 	movhi	r4,1026
 4015568:	21074504 	addi	r4,r4,7444
 401556c:	20c7883a 	add	r3,r4,r3
 4015570:	18c00003 	ldbu	r3,0(r3)
 4015574:	1887883a 	add	r3,r3,r2
 4015578:	00800804 	movi	r2,32
 401557c:	10e5c83a 	sub	r18,r2,r3
 4015580:	9000ab1e 	bne	r18,zero,4015830 <__umoddi3+0x498>
 4015584:	982cd43a 	srli	r22,r19,16
 4015588:	8ce3c83a 	sub	r17,r17,r19
 401558c:	9dffffcc 	andi	r23,r19,65535
 4015590:	b00b883a 	mov	r5,r22
 4015594:	8809883a 	mov	r4,r17
 4015598:	400a9dc0 	call	400a9dc <__umodsi3>
 401559c:	b00b883a 	mov	r5,r22
 40155a0:	8809883a 	mov	r4,r17
 40155a4:	102b883a 	mov	r21,r2
 40155a8:	400a9780 	call	400a978 <__udivsi3>
 40155ac:	b80b883a 	mov	r5,r23
 40155b0:	1009883a 	mov	r4,r2
 40155b4:	400aa340 	call	400aa34 <__mulsi3>
 40155b8:	a82a943a 	slli	r21,r21,16
 40155bc:	a006d43a 	srli	r3,r20,16
 40155c0:	1d46b03a 	or	r3,r3,r21
 40155c4:	1880042e 	bgeu	r3,r2,40155d8 <__umoddi3+0x240>
 40155c8:	1cc7883a 	add	r3,r3,r19
 40155cc:	1cc00236 	bltu	r3,r19,40155d8 <__umoddi3+0x240>
 40155d0:	1880012e 	bgeu	r3,r2,40155d8 <__umoddi3+0x240>
 40155d4:	1cc7883a 	add	r3,r3,r19
 40155d8:	18a1c83a 	sub	r16,r3,r2
 40155dc:	b00b883a 	mov	r5,r22
 40155e0:	8009883a 	mov	r4,r16
 40155e4:	400a9dc0 	call	400a9dc <__umodsi3>
 40155e8:	1023883a 	mov	r17,r2
 40155ec:	b00b883a 	mov	r5,r22
 40155f0:	8009883a 	mov	r4,r16
 40155f4:	400a9780 	call	400a978 <__udivsi3>
 40155f8:	8822943a 	slli	r17,r17,16
 40155fc:	b80b883a 	mov	r5,r23
 4015600:	1009883a 	mov	r4,r2
 4015604:	400aa340 	call	400aa34 <__mulsi3>
 4015608:	a53fffcc 	andi	r20,r20,65535
 401560c:	a446b03a 	or	r3,r20,r17
 4015610:	18bfac2e 	bgeu	r3,r2,40154c4 <__alt_data_end+0xfc0154c4>
 4015614:	003fa706 	br	40154b4 <__alt_data_end+0xfc0154b4>
 4015618:	2005883a 	mov	r2,r4
 401561c:	2807883a 	mov	r3,r5
 4015620:	dfc00c17 	ldw	ra,48(sp)
 4015624:	df000b17 	ldw	fp,44(sp)
 4015628:	ddc00a17 	ldw	r23,40(sp)
 401562c:	dd800917 	ldw	r22,36(sp)
 4015630:	dd400817 	ldw	r21,32(sp)
 4015634:	dd000717 	ldw	r20,28(sp)
 4015638:	dcc00617 	ldw	r19,24(sp)
 401563c:	dc800517 	ldw	r18,20(sp)
 4015640:	dc400417 	ldw	r17,16(sp)
 4015644:	dc000317 	ldw	r16,12(sp)
 4015648:	dec00d04 	addi	sp,sp,52
 401564c:	f800283a 	ret
 4015650:	04c03fc4 	movi	r19,255
 4015654:	99c9803a 	cmpltu	r4,r19,r7
 4015658:	200890fa 	slli	r4,r4,3
 401565c:	003fa406 	br	40154f0 <__alt_data_end+0xfc0154f0>
 4015660:	00803fc4 	movi	r2,255
 4015664:	14c5803a 	cmpltu	r2,r2,r19
 4015668:	100490fa 	slli	r2,r2,3
 401566c:	003fbc06 	br	4015560 <__alt_data_end+0xfc015560>
 4015670:	00804034 	movhi	r2,256
 4015674:	10bfffc4 	addi	r2,r2,-1
 4015678:	1180a636 	bltu	r2,r6,4015914 <__umoddi3+0x57c>
 401567c:	01000404 	movi	r4,16
 4015680:	003f5c06 	br	40153f4 <__alt_data_end+0xfc0153f4>
 4015684:	3d0e983a 	sll	r7,r7,r20
 4015688:	34ead83a 	srl	r21,r6,r19
 401568c:	8cc6d83a 	srl	r3,r17,r19
 4015690:	8d10983a 	sll	r8,r17,r20
 4015694:	3d6ab03a 	or	r21,r7,r21
 4015698:	a82cd43a 	srli	r22,r21,16
 401569c:	84e2d83a 	srl	r17,r16,r19
 40156a0:	1809883a 	mov	r4,r3
 40156a4:	b00b883a 	mov	r5,r22
 40156a8:	8a22b03a 	or	r17,r17,r8
 40156ac:	3524983a 	sll	r18,r6,r20
 40156b0:	dc400015 	stw	r17,0(sp)
 40156b4:	d8c00115 	stw	r3,4(sp)
 40156b8:	400a9dc0 	call	400a9dc <__umodsi3>
 40156bc:	d8c00117 	ldw	r3,4(sp)
 40156c0:	b00b883a 	mov	r5,r22
 40156c4:	1039883a 	mov	fp,r2
 40156c8:	1809883a 	mov	r4,r3
 40156cc:	400a9780 	call	400a978 <__udivsi3>
 40156d0:	adffffcc 	andi	r23,r21,65535
 40156d4:	100b883a 	mov	r5,r2
 40156d8:	b809883a 	mov	r4,r23
 40156dc:	1023883a 	mov	r17,r2
 40156e0:	400aa340 	call	400aa34 <__mulsi3>
 40156e4:	d9400017 	ldw	r5,0(sp)
 40156e8:	e008943a 	slli	r4,fp,16
 40156ec:	8520983a 	sll	r16,r16,r20
 40156f0:	2806d43a 	srli	r3,r5,16
 40156f4:	1906b03a 	or	r3,r3,r4
 40156f8:	1880042e 	bgeu	r3,r2,401570c <__umoddi3+0x374>
 40156fc:	1d47883a 	add	r3,r3,r21
 4015700:	893fffc4 	addi	r4,r17,-1
 4015704:	1d40892e 	bgeu	r3,r21,401592c <__umoddi3+0x594>
 4015708:	2023883a 	mov	r17,r4
 401570c:	18b9c83a 	sub	fp,r3,r2
 4015710:	b00b883a 	mov	r5,r22
 4015714:	e009883a 	mov	r4,fp
 4015718:	400a9dc0 	call	400a9dc <__umodsi3>
 401571c:	b00b883a 	mov	r5,r22
 4015720:	e009883a 	mov	r4,fp
 4015724:	d8800215 	stw	r2,8(sp)
 4015728:	400a9780 	call	400a978 <__udivsi3>
 401572c:	100b883a 	mov	r5,r2
 4015730:	b809883a 	mov	r4,r23
 4015734:	102d883a 	mov	r22,r2
 4015738:	400aa340 	call	400aa34 <__mulsi3>
 401573c:	d9800217 	ldw	r6,8(sp)
 4015740:	d8c00017 	ldw	r3,0(sp)
 4015744:	300c943a 	slli	r6,r6,16
 4015748:	1a3fffcc 	andi	r8,r3,65535
 401574c:	4190b03a 	or	r8,r8,r6
 4015750:	4080042e 	bgeu	r8,r2,4015764 <__umoddi3+0x3cc>
 4015754:	4551883a 	add	r8,r8,r21
 4015758:	b0ffffc4 	addi	r3,r22,-1
 401575c:	45406f2e 	bgeu	r8,r21,401591c <__umoddi3+0x584>
 4015760:	182d883a 	mov	r22,r3
 4015764:	880e943a 	slli	r7,r17,16
 4015768:	9006d43a 	srli	r3,r18,16
 401576c:	91bfffcc 	andi	r6,r18,65535
 4015770:	3dacb03a 	or	r22,r7,r22
 4015774:	b02ed43a 	srli	r23,r22,16
 4015778:	b5bfffcc 	andi	r22,r22,65535
 401577c:	300b883a 	mov	r5,r6
 4015780:	b009883a 	mov	r4,r22
 4015784:	40a3c83a 	sub	r17,r8,r2
 4015788:	d8c00115 	stw	r3,4(sp)
 401578c:	d9800215 	stw	r6,8(sp)
 4015790:	400aa340 	call	400aa34 <__mulsi3>
 4015794:	d9800217 	ldw	r6,8(sp)
 4015798:	b809883a 	mov	r4,r23
 401579c:	1039883a 	mov	fp,r2
 40157a0:	300b883a 	mov	r5,r6
 40157a4:	400aa340 	call	400aa34 <__mulsi3>
 40157a8:	d8c00117 	ldw	r3,4(sp)
 40157ac:	b809883a 	mov	r4,r23
 40157b0:	d8800215 	stw	r2,8(sp)
 40157b4:	180b883a 	mov	r5,r3
 40157b8:	400aa340 	call	400aa34 <__mulsi3>
 40157bc:	d8c00117 	ldw	r3,4(sp)
 40157c0:	b009883a 	mov	r4,r22
 40157c4:	102f883a 	mov	r23,r2
 40157c8:	180b883a 	mov	r5,r3
 40157cc:	400aa340 	call	400aa34 <__mulsi3>
 40157d0:	d9800217 	ldw	r6,8(sp)
 40157d4:	e006d43a 	srli	r3,fp,16
 40157d8:	1185883a 	add	r2,r2,r6
 40157dc:	1885883a 	add	r2,r3,r2
 40157e0:	1180022e 	bgeu	r2,r6,40157ec <__umoddi3+0x454>
 40157e4:	00c00074 	movhi	r3,1
 40157e8:	b8ef883a 	add	r23,r23,r3
 40157ec:	1006d43a 	srli	r3,r2,16
 40157f0:	1004943a 	slli	r2,r2,16
 40157f4:	e73fffcc 	andi	fp,fp,65535
 40157f8:	1dc7883a 	add	r3,r3,r23
 40157fc:	1739883a 	add	fp,r2,fp
 4015800:	88c03a36 	bltu	r17,r3,40158ec <__umoddi3+0x554>
 4015804:	88c05126 	beq	r17,r3,401594c <__umoddi3+0x5b4>
 4015808:	88c9c83a 	sub	r4,r17,r3
 401580c:	e00f883a 	mov	r7,fp
 4015810:	81cfc83a 	sub	r7,r16,r7
 4015814:	81c7803a 	cmpltu	r3,r16,r7
 4015818:	20c7c83a 	sub	r3,r4,r3
 401581c:	1cc4983a 	sll	r2,r3,r19
 4015820:	3d0ed83a 	srl	r7,r7,r20
 4015824:	1d06d83a 	srl	r3,r3,r20
 4015828:	11c4b03a 	or	r2,r2,r7
 401582c:	003f7c06 	br	4015620 <__alt_data_end+0xfc015620>
 4015830:	9ca6983a 	sll	r19,r19,r18
 4015834:	88f8d83a 	srl	fp,r17,r3
 4015838:	80c4d83a 	srl	r2,r16,r3
 401583c:	982cd43a 	srli	r22,r19,16
 4015840:	8ca2983a 	sll	r17,r17,r18
 4015844:	e009883a 	mov	r4,fp
 4015848:	b00b883a 	mov	r5,r22
 401584c:	146ab03a 	or	r21,r2,r17
 4015850:	400a9dc0 	call	400a9dc <__umodsi3>
 4015854:	b00b883a 	mov	r5,r22
 4015858:	e009883a 	mov	r4,fp
 401585c:	1029883a 	mov	r20,r2
 4015860:	9dffffcc 	andi	r23,r19,65535
 4015864:	400a9780 	call	400a978 <__udivsi3>
 4015868:	b809883a 	mov	r4,r23
 401586c:	100b883a 	mov	r5,r2
 4015870:	400aa340 	call	400aa34 <__mulsi3>
 4015874:	a008943a 	slli	r4,r20,16
 4015878:	a806d43a 	srli	r3,r21,16
 401587c:	84a8983a 	sll	r20,r16,r18
 4015880:	1906b03a 	or	r3,r3,r4
 4015884:	1880042e 	bgeu	r3,r2,4015898 <__umoddi3+0x500>
 4015888:	1cc7883a 	add	r3,r3,r19
 401588c:	1cc00236 	bltu	r3,r19,4015898 <__umoddi3+0x500>
 4015890:	1880012e 	bgeu	r3,r2,4015898 <__umoddi3+0x500>
 4015894:	1cc7883a 	add	r3,r3,r19
 4015898:	18a3c83a 	sub	r17,r3,r2
 401589c:	b00b883a 	mov	r5,r22
 40158a0:	8809883a 	mov	r4,r17
 40158a4:	400a9dc0 	call	400a9dc <__umodsi3>
 40158a8:	b00b883a 	mov	r5,r22
 40158ac:	8809883a 	mov	r4,r17
 40158b0:	1021883a 	mov	r16,r2
 40158b4:	400a9780 	call	400a978 <__udivsi3>
 40158b8:	100b883a 	mov	r5,r2
 40158bc:	b809883a 	mov	r4,r23
 40158c0:	8020943a 	slli	r16,r16,16
 40158c4:	400aa340 	call	400aa34 <__mulsi3>
 40158c8:	a8ffffcc 	andi	r3,r21,65535
 40158cc:	1c06b03a 	or	r3,r3,r16
 40158d0:	1880042e 	bgeu	r3,r2,40158e4 <__umoddi3+0x54c>
 40158d4:	1cc7883a 	add	r3,r3,r19
 40158d8:	1cc00236 	bltu	r3,r19,40158e4 <__umoddi3+0x54c>
 40158dc:	1880012e 	bgeu	r3,r2,40158e4 <__umoddi3+0x54c>
 40158e0:	1cc7883a 	add	r3,r3,r19
 40158e4:	18a3c83a 	sub	r17,r3,r2
 40158e8:	003f2906 	br	4015590 <__alt_data_end+0xfc015590>
 40158ec:	e48fc83a 	sub	r7,fp,r18
 40158f0:	1d49c83a 	sub	r4,r3,r21
 40158f4:	e1f9803a 	cmpltu	fp,fp,r7
 40158f8:	2739c83a 	sub	fp,r4,fp
 40158fc:	8f09c83a 	sub	r4,r17,fp
 4015900:	003fc306 	br	4015810 <__alt_data_end+0xfc015810>
 4015904:	01000604 	movi	r4,24
 4015908:	003ef906 	br	40154f0 <__alt_data_end+0xfc0154f0>
 401590c:	00800604 	movi	r2,24
 4015910:	003f1306 	br	4015560 <__alt_data_end+0xfc015560>
 4015914:	01000604 	movi	r4,24
 4015918:	003eb606 	br	40153f4 <__alt_data_end+0xfc0153f4>
 401591c:	40bf902e 	bgeu	r8,r2,4015760 <__alt_data_end+0xfc015760>
 4015920:	b5bfff84 	addi	r22,r22,-2
 4015924:	4551883a 	add	r8,r8,r21
 4015928:	003f8e06 	br	4015764 <__alt_data_end+0xfc015764>
 401592c:	18bf762e 	bgeu	r3,r2,4015708 <__alt_data_end+0xfc015708>
 4015930:	8c7fff84 	addi	r17,r17,-2
 4015934:	1d47883a 	add	r3,r3,r21
 4015938:	003f7406 	br	401570c <__alt_data_end+0xfc01570c>
 401593c:	1cc7883a 	add	r3,r3,r19
 4015940:	003ecd06 	br	4015478 <__alt_data_end+0xfc015478>
 4015944:	8005883a 	mov	r2,r16
 4015948:	003ef806 	br	401552c <__alt_data_end+0xfc01552c>
 401594c:	873fe736 	bltu	r16,fp,40158ec <__alt_data_end+0xfc0158ec>
 4015950:	e00f883a 	mov	r7,fp
 4015954:	0009883a 	mov	r4,zero
 4015958:	003fad06 	br	4015810 <__alt_data_end+0xfc015810>

0401595c <__adddf3>:
 401595c:	02c00434 	movhi	r11,16
 4015960:	5affffc4 	addi	r11,r11,-1
 4015964:	2806d7fa 	srli	r3,r5,31
 4015968:	2ad4703a 	and	r10,r5,r11
 401596c:	3ad2703a 	and	r9,r7,r11
 4015970:	3804d53a 	srli	r2,r7,20
 4015974:	3018d77a 	srli	r12,r6,29
 4015978:	280ad53a 	srli	r5,r5,20
 401597c:	501490fa 	slli	r10,r10,3
 4015980:	2010d77a 	srli	r8,r4,29
 4015984:	481290fa 	slli	r9,r9,3
 4015988:	380ed7fa 	srli	r7,r7,31
 401598c:	defffb04 	addi	sp,sp,-20
 4015990:	dc800215 	stw	r18,8(sp)
 4015994:	dc400115 	stw	r17,4(sp)
 4015998:	dc000015 	stw	r16,0(sp)
 401599c:	dfc00415 	stw	ra,16(sp)
 40159a0:	dcc00315 	stw	r19,12(sp)
 40159a4:	1c803fcc 	andi	r18,r3,255
 40159a8:	2c01ffcc 	andi	r16,r5,2047
 40159ac:	5210b03a 	or	r8,r10,r8
 40159b0:	202290fa 	slli	r17,r4,3
 40159b4:	1081ffcc 	andi	r2,r2,2047
 40159b8:	4b12b03a 	or	r9,r9,r12
 40159bc:	300c90fa 	slli	r6,r6,3
 40159c0:	91c07526 	beq	r18,r7,4015b98 <__adddf3+0x23c>
 40159c4:	8087c83a 	sub	r3,r16,r2
 40159c8:	00c0ab0e 	bge	zero,r3,4015c78 <__adddf3+0x31c>
 40159cc:	10002a1e 	bne	r2,zero,4015a78 <__adddf3+0x11c>
 40159d0:	4984b03a 	or	r2,r9,r6
 40159d4:	1000961e 	bne	r2,zero,4015c30 <__adddf3+0x2d4>
 40159d8:	888001cc 	andi	r2,r17,7
 40159dc:	10000726 	beq	r2,zero,40159fc <__adddf3+0xa0>
 40159e0:	888003cc 	andi	r2,r17,15
 40159e4:	00c00104 	movi	r3,4
 40159e8:	10c00426 	beq	r2,r3,40159fc <__adddf3+0xa0>
 40159ec:	88c7883a 	add	r3,r17,r3
 40159f0:	1c63803a 	cmpltu	r17,r3,r17
 40159f4:	4451883a 	add	r8,r8,r17
 40159f8:	1823883a 	mov	r17,r3
 40159fc:	4080202c 	andhi	r2,r8,128
 4015a00:	10005926 	beq	r2,zero,4015b68 <__adddf3+0x20c>
 4015a04:	84000044 	addi	r16,r16,1
 4015a08:	0081ffc4 	movi	r2,2047
 4015a0c:	8080ba26 	beq	r16,r2,4015cf8 <__adddf3+0x39c>
 4015a10:	00bfe034 	movhi	r2,65408
 4015a14:	10bfffc4 	addi	r2,r2,-1
 4015a18:	4090703a 	and	r8,r8,r2
 4015a1c:	4004977a 	slli	r2,r8,29
 4015a20:	4010927a 	slli	r8,r8,9
 4015a24:	8822d0fa 	srli	r17,r17,3
 4015a28:	8401ffcc 	andi	r16,r16,2047
 4015a2c:	4010d33a 	srli	r8,r8,12
 4015a30:	9007883a 	mov	r3,r18
 4015a34:	1444b03a 	or	r2,r2,r17
 4015a38:	8401ffcc 	andi	r16,r16,2047
 4015a3c:	8020953a 	slli	r16,r16,20
 4015a40:	18c03fcc 	andi	r3,r3,255
 4015a44:	01000434 	movhi	r4,16
 4015a48:	213fffc4 	addi	r4,r4,-1
 4015a4c:	180697fa 	slli	r3,r3,31
 4015a50:	4110703a 	and	r8,r8,r4
 4015a54:	4410b03a 	or	r8,r8,r16
 4015a58:	40c6b03a 	or	r3,r8,r3
 4015a5c:	dfc00417 	ldw	ra,16(sp)
 4015a60:	dcc00317 	ldw	r19,12(sp)
 4015a64:	dc800217 	ldw	r18,8(sp)
 4015a68:	dc400117 	ldw	r17,4(sp)
 4015a6c:	dc000017 	ldw	r16,0(sp)
 4015a70:	dec00504 	addi	sp,sp,20
 4015a74:	f800283a 	ret
 4015a78:	0081ffc4 	movi	r2,2047
 4015a7c:	80bfd626 	beq	r16,r2,40159d8 <__alt_data_end+0xfc0159d8>
 4015a80:	4a402034 	orhi	r9,r9,128
 4015a84:	00800e04 	movi	r2,56
 4015a88:	10c09f16 	blt	r2,r3,4015d08 <__adddf3+0x3ac>
 4015a8c:	008007c4 	movi	r2,31
 4015a90:	10c0c216 	blt	r2,r3,4015d9c <__adddf3+0x440>
 4015a94:	00800804 	movi	r2,32
 4015a98:	10c5c83a 	sub	r2,r2,r3
 4015a9c:	488a983a 	sll	r5,r9,r2
 4015aa0:	30c8d83a 	srl	r4,r6,r3
 4015aa4:	3084983a 	sll	r2,r6,r2
 4015aa8:	48c6d83a 	srl	r3,r9,r3
 4015aac:	290cb03a 	or	r6,r5,r4
 4015ab0:	1004c03a 	cmpne	r2,r2,zero
 4015ab4:	308cb03a 	or	r6,r6,r2
 4015ab8:	898dc83a 	sub	r6,r17,r6
 4015abc:	89a3803a 	cmpltu	r17,r17,r6
 4015ac0:	40d1c83a 	sub	r8,r8,r3
 4015ac4:	4451c83a 	sub	r8,r8,r17
 4015ac8:	3023883a 	mov	r17,r6
 4015acc:	4080202c 	andhi	r2,r8,128
 4015ad0:	10002326 	beq	r2,zero,4015b60 <__adddf3+0x204>
 4015ad4:	04c02034 	movhi	r19,128
 4015ad8:	9cffffc4 	addi	r19,r19,-1
 4015adc:	44e6703a 	and	r19,r8,r19
 4015ae0:	98007626 	beq	r19,zero,4015cbc <__adddf3+0x360>
 4015ae4:	9809883a 	mov	r4,r19
 4015ae8:	401819c0 	call	401819c <__clzsi2>
 4015aec:	10fffe04 	addi	r3,r2,-8
 4015af0:	010007c4 	movi	r4,31
 4015af4:	20c07716 	blt	r4,r3,4015cd4 <__adddf3+0x378>
 4015af8:	00800804 	movi	r2,32
 4015afc:	10c5c83a 	sub	r2,r2,r3
 4015b00:	8884d83a 	srl	r2,r17,r2
 4015b04:	98d0983a 	sll	r8,r19,r3
 4015b08:	88e2983a 	sll	r17,r17,r3
 4015b0c:	1204b03a 	or	r2,r2,r8
 4015b10:	1c007416 	blt	r3,r16,4015ce4 <__adddf3+0x388>
 4015b14:	1c21c83a 	sub	r16,r3,r16
 4015b18:	82000044 	addi	r8,r16,1
 4015b1c:	00c007c4 	movi	r3,31
 4015b20:	1a009116 	blt	r3,r8,4015d68 <__adddf3+0x40c>
 4015b24:	00c00804 	movi	r3,32
 4015b28:	1a07c83a 	sub	r3,r3,r8
 4015b2c:	8a08d83a 	srl	r4,r17,r8
 4015b30:	88e2983a 	sll	r17,r17,r3
 4015b34:	10c6983a 	sll	r3,r2,r3
 4015b38:	1210d83a 	srl	r8,r2,r8
 4015b3c:	8804c03a 	cmpne	r2,r17,zero
 4015b40:	1906b03a 	or	r3,r3,r4
 4015b44:	18a2b03a 	or	r17,r3,r2
 4015b48:	0021883a 	mov	r16,zero
 4015b4c:	003fa206 	br	40159d8 <__alt_data_end+0xfc0159d8>
 4015b50:	1890b03a 	or	r8,r3,r2
 4015b54:	40017d26 	beq	r8,zero,401614c <__adddf3+0x7f0>
 4015b58:	1011883a 	mov	r8,r2
 4015b5c:	1823883a 	mov	r17,r3
 4015b60:	888001cc 	andi	r2,r17,7
 4015b64:	103f9e1e 	bne	r2,zero,40159e0 <__alt_data_end+0xfc0159e0>
 4015b68:	4004977a 	slli	r2,r8,29
 4015b6c:	8822d0fa 	srli	r17,r17,3
 4015b70:	4010d0fa 	srli	r8,r8,3
 4015b74:	9007883a 	mov	r3,r18
 4015b78:	1444b03a 	or	r2,r2,r17
 4015b7c:	0101ffc4 	movi	r4,2047
 4015b80:	81002426 	beq	r16,r4,4015c14 <__adddf3+0x2b8>
 4015b84:	8120703a 	and	r16,r16,r4
 4015b88:	01000434 	movhi	r4,16
 4015b8c:	213fffc4 	addi	r4,r4,-1
 4015b90:	4110703a 	and	r8,r8,r4
 4015b94:	003fa806 	br	4015a38 <__alt_data_end+0xfc015a38>
 4015b98:	8089c83a 	sub	r4,r16,r2
 4015b9c:	01005e0e 	bge	zero,r4,4015d18 <__adddf3+0x3bc>
 4015ba0:	10002b26 	beq	r2,zero,4015c50 <__adddf3+0x2f4>
 4015ba4:	0081ffc4 	movi	r2,2047
 4015ba8:	80bf8b26 	beq	r16,r2,40159d8 <__alt_data_end+0xfc0159d8>
 4015bac:	4a402034 	orhi	r9,r9,128
 4015bb0:	00800e04 	movi	r2,56
 4015bb4:	1100a40e 	bge	r2,r4,4015e48 <__adddf3+0x4ec>
 4015bb8:	498cb03a 	or	r6,r9,r6
 4015bbc:	300ac03a 	cmpne	r5,r6,zero
 4015bc0:	0013883a 	mov	r9,zero
 4015bc4:	2c4b883a 	add	r5,r5,r17
 4015bc8:	2c63803a 	cmpltu	r17,r5,r17
 4015bcc:	4a11883a 	add	r8,r9,r8
 4015bd0:	8a11883a 	add	r8,r17,r8
 4015bd4:	2823883a 	mov	r17,r5
 4015bd8:	4080202c 	andhi	r2,r8,128
 4015bdc:	103fe026 	beq	r2,zero,4015b60 <__alt_data_end+0xfc015b60>
 4015be0:	84000044 	addi	r16,r16,1
 4015be4:	0081ffc4 	movi	r2,2047
 4015be8:	8080d226 	beq	r16,r2,4015f34 <__adddf3+0x5d8>
 4015bec:	00bfe034 	movhi	r2,65408
 4015bf0:	10bfffc4 	addi	r2,r2,-1
 4015bf4:	4090703a 	and	r8,r8,r2
 4015bf8:	880ad07a 	srli	r5,r17,1
 4015bfc:	400897fa 	slli	r4,r8,31
 4015c00:	88c0004c 	andi	r3,r17,1
 4015c04:	28e2b03a 	or	r17,r5,r3
 4015c08:	4010d07a 	srli	r8,r8,1
 4015c0c:	2462b03a 	or	r17,r4,r17
 4015c10:	003f7106 	br	40159d8 <__alt_data_end+0xfc0159d8>
 4015c14:	4088b03a 	or	r4,r8,r2
 4015c18:	20014526 	beq	r4,zero,4016130 <__adddf3+0x7d4>
 4015c1c:	01000434 	movhi	r4,16
 4015c20:	42000234 	orhi	r8,r8,8
 4015c24:	213fffc4 	addi	r4,r4,-1
 4015c28:	4110703a 	and	r8,r8,r4
 4015c2c:	003f8206 	br	4015a38 <__alt_data_end+0xfc015a38>
 4015c30:	18ffffc4 	addi	r3,r3,-1
 4015c34:	1800491e 	bne	r3,zero,4015d5c <__adddf3+0x400>
 4015c38:	898bc83a 	sub	r5,r17,r6
 4015c3c:	8963803a 	cmpltu	r17,r17,r5
 4015c40:	4251c83a 	sub	r8,r8,r9
 4015c44:	4451c83a 	sub	r8,r8,r17
 4015c48:	2823883a 	mov	r17,r5
 4015c4c:	003f9f06 	br	4015acc <__alt_data_end+0xfc015acc>
 4015c50:	4984b03a 	or	r2,r9,r6
 4015c54:	103f6026 	beq	r2,zero,40159d8 <__alt_data_end+0xfc0159d8>
 4015c58:	213fffc4 	addi	r4,r4,-1
 4015c5c:	2000931e 	bne	r4,zero,4015eac <__adddf3+0x550>
 4015c60:	898d883a 	add	r6,r17,r6
 4015c64:	3463803a 	cmpltu	r17,r6,r17
 4015c68:	4251883a 	add	r8,r8,r9
 4015c6c:	8a11883a 	add	r8,r17,r8
 4015c70:	3023883a 	mov	r17,r6
 4015c74:	003fd806 	br	4015bd8 <__alt_data_end+0xfc015bd8>
 4015c78:	1800541e 	bne	r3,zero,4015dcc <__adddf3+0x470>
 4015c7c:	80800044 	addi	r2,r16,1
 4015c80:	1081ffcc 	andi	r2,r2,2047
 4015c84:	00c00044 	movi	r3,1
 4015c88:	1880a00e 	bge	r3,r2,4015f0c <__adddf3+0x5b0>
 4015c8c:	8989c83a 	sub	r4,r17,r6
 4015c90:	8905803a 	cmpltu	r2,r17,r4
 4015c94:	4267c83a 	sub	r19,r8,r9
 4015c98:	98a7c83a 	sub	r19,r19,r2
 4015c9c:	9880202c 	andhi	r2,r19,128
 4015ca0:	10006326 	beq	r2,zero,4015e30 <__adddf3+0x4d4>
 4015ca4:	3463c83a 	sub	r17,r6,r17
 4015ca8:	4a07c83a 	sub	r3,r9,r8
 4015cac:	344d803a 	cmpltu	r6,r6,r17
 4015cb0:	19a7c83a 	sub	r19,r3,r6
 4015cb4:	3825883a 	mov	r18,r7
 4015cb8:	983f8a1e 	bne	r19,zero,4015ae4 <__alt_data_end+0xfc015ae4>
 4015cbc:	8809883a 	mov	r4,r17
 4015cc0:	401819c0 	call	401819c <__clzsi2>
 4015cc4:	10800804 	addi	r2,r2,32
 4015cc8:	10fffe04 	addi	r3,r2,-8
 4015ccc:	010007c4 	movi	r4,31
 4015cd0:	20ff890e 	bge	r4,r3,4015af8 <__alt_data_end+0xfc015af8>
 4015cd4:	10bff604 	addi	r2,r2,-40
 4015cd8:	8884983a 	sll	r2,r17,r2
 4015cdc:	0023883a 	mov	r17,zero
 4015ce0:	1c3f8c0e 	bge	r3,r16,4015b14 <__alt_data_end+0xfc015b14>
 4015ce4:	023fe034 	movhi	r8,65408
 4015ce8:	423fffc4 	addi	r8,r8,-1
 4015cec:	80e1c83a 	sub	r16,r16,r3
 4015cf0:	1210703a 	and	r8,r2,r8
 4015cf4:	003f3806 	br	40159d8 <__alt_data_end+0xfc0159d8>
 4015cf8:	9007883a 	mov	r3,r18
 4015cfc:	0011883a 	mov	r8,zero
 4015d00:	0005883a 	mov	r2,zero
 4015d04:	003f4c06 	br	4015a38 <__alt_data_end+0xfc015a38>
 4015d08:	498cb03a 	or	r6,r9,r6
 4015d0c:	300cc03a 	cmpne	r6,r6,zero
 4015d10:	0007883a 	mov	r3,zero
 4015d14:	003f6806 	br	4015ab8 <__alt_data_end+0xfc015ab8>
 4015d18:	20009c1e 	bne	r4,zero,4015f8c <__adddf3+0x630>
 4015d1c:	80800044 	addi	r2,r16,1
 4015d20:	1141ffcc 	andi	r5,r2,2047
 4015d24:	01000044 	movi	r4,1
 4015d28:	2140670e 	bge	r4,r5,4015ec8 <__adddf3+0x56c>
 4015d2c:	0101ffc4 	movi	r4,2047
 4015d30:	11007f26 	beq	r2,r4,4015f30 <__adddf3+0x5d4>
 4015d34:	898d883a 	add	r6,r17,r6
 4015d38:	4247883a 	add	r3,r8,r9
 4015d3c:	3451803a 	cmpltu	r8,r6,r17
 4015d40:	40d1883a 	add	r8,r8,r3
 4015d44:	402297fa 	slli	r17,r8,31
 4015d48:	300cd07a 	srli	r6,r6,1
 4015d4c:	4010d07a 	srli	r8,r8,1
 4015d50:	1021883a 	mov	r16,r2
 4015d54:	89a2b03a 	or	r17,r17,r6
 4015d58:	003f1f06 	br	40159d8 <__alt_data_end+0xfc0159d8>
 4015d5c:	0081ffc4 	movi	r2,2047
 4015d60:	80bf481e 	bne	r16,r2,4015a84 <__alt_data_end+0xfc015a84>
 4015d64:	003f1c06 	br	40159d8 <__alt_data_end+0xfc0159d8>
 4015d68:	843ff844 	addi	r16,r16,-31
 4015d6c:	01000804 	movi	r4,32
 4015d70:	1406d83a 	srl	r3,r2,r16
 4015d74:	41005026 	beq	r8,r4,4015eb8 <__adddf3+0x55c>
 4015d78:	01001004 	movi	r4,64
 4015d7c:	2211c83a 	sub	r8,r4,r8
 4015d80:	1204983a 	sll	r2,r2,r8
 4015d84:	88a2b03a 	or	r17,r17,r2
 4015d88:	8822c03a 	cmpne	r17,r17,zero
 4015d8c:	1c62b03a 	or	r17,r3,r17
 4015d90:	0011883a 	mov	r8,zero
 4015d94:	0021883a 	mov	r16,zero
 4015d98:	003f7106 	br	4015b60 <__alt_data_end+0xfc015b60>
 4015d9c:	193ff804 	addi	r4,r3,-32
 4015da0:	00800804 	movi	r2,32
 4015da4:	4908d83a 	srl	r4,r9,r4
 4015da8:	18804526 	beq	r3,r2,4015ec0 <__adddf3+0x564>
 4015dac:	00801004 	movi	r2,64
 4015db0:	10c5c83a 	sub	r2,r2,r3
 4015db4:	4886983a 	sll	r3,r9,r2
 4015db8:	198cb03a 	or	r6,r3,r6
 4015dbc:	300cc03a 	cmpne	r6,r6,zero
 4015dc0:	218cb03a 	or	r6,r4,r6
 4015dc4:	0007883a 	mov	r3,zero
 4015dc8:	003f3b06 	br	4015ab8 <__alt_data_end+0xfc015ab8>
 4015dcc:	80002a26 	beq	r16,zero,4015e78 <__adddf3+0x51c>
 4015dd0:	0101ffc4 	movi	r4,2047
 4015dd4:	11006826 	beq	r2,r4,4015f78 <__adddf3+0x61c>
 4015dd8:	00c7c83a 	sub	r3,zero,r3
 4015ddc:	42002034 	orhi	r8,r8,128
 4015de0:	01000e04 	movi	r4,56
 4015de4:	20c07c16 	blt	r4,r3,4015fd8 <__adddf3+0x67c>
 4015de8:	010007c4 	movi	r4,31
 4015dec:	20c0da16 	blt	r4,r3,4016158 <__adddf3+0x7fc>
 4015df0:	01000804 	movi	r4,32
 4015df4:	20c9c83a 	sub	r4,r4,r3
 4015df8:	4114983a 	sll	r10,r8,r4
 4015dfc:	88cad83a 	srl	r5,r17,r3
 4015e00:	8908983a 	sll	r4,r17,r4
 4015e04:	40c6d83a 	srl	r3,r8,r3
 4015e08:	5162b03a 	or	r17,r10,r5
 4015e0c:	2008c03a 	cmpne	r4,r4,zero
 4015e10:	8922b03a 	or	r17,r17,r4
 4015e14:	3463c83a 	sub	r17,r6,r17
 4015e18:	48c7c83a 	sub	r3,r9,r3
 4015e1c:	344d803a 	cmpltu	r6,r6,r17
 4015e20:	1991c83a 	sub	r8,r3,r6
 4015e24:	1021883a 	mov	r16,r2
 4015e28:	3825883a 	mov	r18,r7
 4015e2c:	003f2706 	br	4015acc <__alt_data_end+0xfc015acc>
 4015e30:	24d0b03a 	or	r8,r4,r19
 4015e34:	40001b1e 	bne	r8,zero,4015ea4 <__adddf3+0x548>
 4015e38:	0005883a 	mov	r2,zero
 4015e3c:	0007883a 	mov	r3,zero
 4015e40:	0021883a 	mov	r16,zero
 4015e44:	003f4d06 	br	4015b7c <__alt_data_end+0xfc015b7c>
 4015e48:	008007c4 	movi	r2,31
 4015e4c:	11003c16 	blt	r2,r4,4015f40 <__adddf3+0x5e4>
 4015e50:	00800804 	movi	r2,32
 4015e54:	1105c83a 	sub	r2,r2,r4
 4015e58:	488e983a 	sll	r7,r9,r2
 4015e5c:	310ad83a 	srl	r5,r6,r4
 4015e60:	3084983a 	sll	r2,r6,r2
 4015e64:	4912d83a 	srl	r9,r9,r4
 4015e68:	394ab03a 	or	r5,r7,r5
 4015e6c:	1004c03a 	cmpne	r2,r2,zero
 4015e70:	288ab03a 	or	r5,r5,r2
 4015e74:	003f5306 	br	4015bc4 <__alt_data_end+0xfc015bc4>
 4015e78:	4448b03a 	or	r4,r8,r17
 4015e7c:	20003e26 	beq	r4,zero,4015f78 <__adddf3+0x61c>
 4015e80:	00c6303a 	nor	r3,zero,r3
 4015e84:	18003a1e 	bne	r3,zero,4015f70 <__adddf3+0x614>
 4015e88:	3463c83a 	sub	r17,r6,r17
 4015e8c:	4a07c83a 	sub	r3,r9,r8
 4015e90:	344d803a 	cmpltu	r6,r6,r17
 4015e94:	1991c83a 	sub	r8,r3,r6
 4015e98:	1021883a 	mov	r16,r2
 4015e9c:	3825883a 	mov	r18,r7
 4015ea0:	003f0a06 	br	4015acc <__alt_data_end+0xfc015acc>
 4015ea4:	2023883a 	mov	r17,r4
 4015ea8:	003f0d06 	br	4015ae0 <__alt_data_end+0xfc015ae0>
 4015eac:	0081ffc4 	movi	r2,2047
 4015eb0:	80bf3f1e 	bne	r16,r2,4015bb0 <__alt_data_end+0xfc015bb0>
 4015eb4:	003ec806 	br	40159d8 <__alt_data_end+0xfc0159d8>
 4015eb8:	0005883a 	mov	r2,zero
 4015ebc:	003fb106 	br	4015d84 <__alt_data_end+0xfc015d84>
 4015ec0:	0007883a 	mov	r3,zero
 4015ec4:	003fbc06 	br	4015db8 <__alt_data_end+0xfc015db8>
 4015ec8:	4444b03a 	or	r2,r8,r17
 4015ecc:	8000871e 	bne	r16,zero,40160ec <__adddf3+0x790>
 4015ed0:	1000ba26 	beq	r2,zero,40161bc <__adddf3+0x860>
 4015ed4:	4984b03a 	or	r2,r9,r6
 4015ed8:	103ebf26 	beq	r2,zero,40159d8 <__alt_data_end+0xfc0159d8>
 4015edc:	8985883a 	add	r2,r17,r6
 4015ee0:	4247883a 	add	r3,r8,r9
 4015ee4:	1451803a 	cmpltu	r8,r2,r17
 4015ee8:	40d1883a 	add	r8,r8,r3
 4015eec:	40c0202c 	andhi	r3,r8,128
 4015ef0:	1023883a 	mov	r17,r2
 4015ef4:	183f1a26 	beq	r3,zero,4015b60 <__alt_data_end+0xfc015b60>
 4015ef8:	00bfe034 	movhi	r2,65408
 4015efc:	10bfffc4 	addi	r2,r2,-1
 4015f00:	2021883a 	mov	r16,r4
 4015f04:	4090703a 	and	r8,r8,r2
 4015f08:	003eb306 	br	40159d8 <__alt_data_end+0xfc0159d8>
 4015f0c:	4444b03a 	or	r2,r8,r17
 4015f10:	8000291e 	bne	r16,zero,4015fb8 <__adddf3+0x65c>
 4015f14:	10004b1e 	bne	r2,zero,4016044 <__adddf3+0x6e8>
 4015f18:	4990b03a 	or	r8,r9,r6
 4015f1c:	40008b26 	beq	r8,zero,401614c <__adddf3+0x7f0>
 4015f20:	4811883a 	mov	r8,r9
 4015f24:	3023883a 	mov	r17,r6
 4015f28:	3825883a 	mov	r18,r7
 4015f2c:	003eaa06 	br	40159d8 <__alt_data_end+0xfc0159d8>
 4015f30:	1021883a 	mov	r16,r2
 4015f34:	0011883a 	mov	r8,zero
 4015f38:	0005883a 	mov	r2,zero
 4015f3c:	003f0f06 	br	4015b7c <__alt_data_end+0xfc015b7c>
 4015f40:	217ff804 	addi	r5,r4,-32
 4015f44:	00800804 	movi	r2,32
 4015f48:	494ad83a 	srl	r5,r9,r5
 4015f4c:	20807d26 	beq	r4,r2,4016144 <__adddf3+0x7e8>
 4015f50:	00801004 	movi	r2,64
 4015f54:	1109c83a 	sub	r4,r2,r4
 4015f58:	4912983a 	sll	r9,r9,r4
 4015f5c:	498cb03a 	or	r6,r9,r6
 4015f60:	300cc03a 	cmpne	r6,r6,zero
 4015f64:	298ab03a 	or	r5,r5,r6
 4015f68:	0013883a 	mov	r9,zero
 4015f6c:	003f1506 	br	4015bc4 <__alt_data_end+0xfc015bc4>
 4015f70:	0101ffc4 	movi	r4,2047
 4015f74:	113f9a1e 	bne	r2,r4,4015de0 <__alt_data_end+0xfc015de0>
 4015f78:	4811883a 	mov	r8,r9
 4015f7c:	3023883a 	mov	r17,r6
 4015f80:	1021883a 	mov	r16,r2
 4015f84:	3825883a 	mov	r18,r7
 4015f88:	003e9306 	br	40159d8 <__alt_data_end+0xfc0159d8>
 4015f8c:	8000161e 	bne	r16,zero,4015fe8 <__adddf3+0x68c>
 4015f90:	444ab03a 	or	r5,r8,r17
 4015f94:	28005126 	beq	r5,zero,40160dc <__adddf3+0x780>
 4015f98:	0108303a 	nor	r4,zero,r4
 4015f9c:	20004d1e 	bne	r4,zero,40160d4 <__adddf3+0x778>
 4015fa0:	89a3883a 	add	r17,r17,r6
 4015fa4:	4253883a 	add	r9,r8,r9
 4015fa8:	898d803a 	cmpltu	r6,r17,r6
 4015fac:	3251883a 	add	r8,r6,r9
 4015fb0:	1021883a 	mov	r16,r2
 4015fb4:	003f0806 	br	4015bd8 <__alt_data_end+0xfc015bd8>
 4015fb8:	1000301e 	bne	r2,zero,401607c <__adddf3+0x720>
 4015fbc:	4984b03a 	or	r2,r9,r6
 4015fc0:	10007126 	beq	r2,zero,4016188 <__adddf3+0x82c>
 4015fc4:	4811883a 	mov	r8,r9
 4015fc8:	3023883a 	mov	r17,r6
 4015fcc:	3825883a 	mov	r18,r7
 4015fd0:	0401ffc4 	movi	r16,2047
 4015fd4:	003e8006 	br	40159d8 <__alt_data_end+0xfc0159d8>
 4015fd8:	4462b03a 	or	r17,r8,r17
 4015fdc:	8822c03a 	cmpne	r17,r17,zero
 4015fe0:	0007883a 	mov	r3,zero
 4015fe4:	003f8b06 	br	4015e14 <__alt_data_end+0xfc015e14>
 4015fe8:	0141ffc4 	movi	r5,2047
 4015fec:	11403b26 	beq	r2,r5,40160dc <__adddf3+0x780>
 4015ff0:	0109c83a 	sub	r4,zero,r4
 4015ff4:	42002034 	orhi	r8,r8,128
 4015ff8:	01400e04 	movi	r5,56
 4015ffc:	29006716 	blt	r5,r4,401619c <__adddf3+0x840>
 4016000:	014007c4 	movi	r5,31
 4016004:	29007016 	blt	r5,r4,40161c8 <__adddf3+0x86c>
 4016008:	01400804 	movi	r5,32
 401600c:	290bc83a 	sub	r5,r5,r4
 4016010:	4154983a 	sll	r10,r8,r5
 4016014:	890ed83a 	srl	r7,r17,r4
 4016018:	894a983a 	sll	r5,r17,r5
 401601c:	4108d83a 	srl	r4,r8,r4
 4016020:	51e2b03a 	or	r17,r10,r7
 4016024:	280ac03a 	cmpne	r5,r5,zero
 4016028:	8962b03a 	or	r17,r17,r5
 401602c:	89a3883a 	add	r17,r17,r6
 4016030:	2253883a 	add	r9,r4,r9
 4016034:	898d803a 	cmpltu	r6,r17,r6
 4016038:	3251883a 	add	r8,r6,r9
 401603c:	1021883a 	mov	r16,r2
 4016040:	003ee506 	br	4015bd8 <__alt_data_end+0xfc015bd8>
 4016044:	4984b03a 	or	r2,r9,r6
 4016048:	103e6326 	beq	r2,zero,40159d8 <__alt_data_end+0xfc0159d8>
 401604c:	8987c83a 	sub	r3,r17,r6
 4016050:	88c9803a 	cmpltu	r4,r17,r3
 4016054:	4245c83a 	sub	r2,r8,r9
 4016058:	1105c83a 	sub	r2,r2,r4
 401605c:	1100202c 	andhi	r4,r2,128
 4016060:	203ebb26 	beq	r4,zero,4015b50 <__alt_data_end+0xfc015b50>
 4016064:	3463c83a 	sub	r17,r6,r17
 4016068:	4a07c83a 	sub	r3,r9,r8
 401606c:	344d803a 	cmpltu	r6,r6,r17
 4016070:	1991c83a 	sub	r8,r3,r6
 4016074:	3825883a 	mov	r18,r7
 4016078:	003e5706 	br	40159d8 <__alt_data_end+0xfc0159d8>
 401607c:	4984b03a 	or	r2,r9,r6
 4016080:	10002e26 	beq	r2,zero,401613c <__adddf3+0x7e0>
 4016084:	4004d0fa 	srli	r2,r8,3
 4016088:	8822d0fa 	srli	r17,r17,3
 401608c:	4010977a 	slli	r8,r8,29
 4016090:	10c0022c 	andhi	r3,r2,8
 4016094:	4462b03a 	or	r17,r8,r17
 4016098:	18000826 	beq	r3,zero,40160bc <__adddf3+0x760>
 401609c:	4808d0fa 	srli	r4,r9,3
 40160a0:	20c0022c 	andhi	r3,r4,8
 40160a4:	1800051e 	bne	r3,zero,40160bc <__adddf3+0x760>
 40160a8:	300cd0fa 	srli	r6,r6,3
 40160ac:	4806977a 	slli	r3,r9,29
 40160b0:	2005883a 	mov	r2,r4
 40160b4:	3825883a 	mov	r18,r7
 40160b8:	19a2b03a 	or	r17,r3,r6
 40160bc:	8810d77a 	srli	r8,r17,29
 40160c0:	100490fa 	slli	r2,r2,3
 40160c4:	882290fa 	slli	r17,r17,3
 40160c8:	0401ffc4 	movi	r16,2047
 40160cc:	4090b03a 	or	r8,r8,r2
 40160d0:	003e4106 	br	40159d8 <__alt_data_end+0xfc0159d8>
 40160d4:	0141ffc4 	movi	r5,2047
 40160d8:	117fc71e 	bne	r2,r5,4015ff8 <__alt_data_end+0xfc015ff8>
 40160dc:	4811883a 	mov	r8,r9
 40160e0:	3023883a 	mov	r17,r6
 40160e4:	1021883a 	mov	r16,r2
 40160e8:	003e3b06 	br	40159d8 <__alt_data_end+0xfc0159d8>
 40160ec:	10002f26 	beq	r2,zero,40161ac <__adddf3+0x850>
 40160f0:	4984b03a 	or	r2,r9,r6
 40160f4:	10001126 	beq	r2,zero,401613c <__adddf3+0x7e0>
 40160f8:	4004d0fa 	srli	r2,r8,3
 40160fc:	8822d0fa 	srli	r17,r17,3
 4016100:	4010977a 	slli	r8,r8,29
 4016104:	10c0022c 	andhi	r3,r2,8
 4016108:	4462b03a 	or	r17,r8,r17
 401610c:	183feb26 	beq	r3,zero,40160bc <__alt_data_end+0xfc0160bc>
 4016110:	4808d0fa 	srli	r4,r9,3
 4016114:	20c0022c 	andhi	r3,r4,8
 4016118:	183fe81e 	bne	r3,zero,40160bc <__alt_data_end+0xfc0160bc>
 401611c:	300cd0fa 	srli	r6,r6,3
 4016120:	4806977a 	slli	r3,r9,29
 4016124:	2005883a 	mov	r2,r4
 4016128:	19a2b03a 	or	r17,r3,r6
 401612c:	003fe306 	br	40160bc <__alt_data_end+0xfc0160bc>
 4016130:	0011883a 	mov	r8,zero
 4016134:	0005883a 	mov	r2,zero
 4016138:	003e3f06 	br	4015a38 <__alt_data_end+0xfc015a38>
 401613c:	0401ffc4 	movi	r16,2047
 4016140:	003e2506 	br	40159d8 <__alt_data_end+0xfc0159d8>
 4016144:	0013883a 	mov	r9,zero
 4016148:	003f8406 	br	4015f5c <__alt_data_end+0xfc015f5c>
 401614c:	0005883a 	mov	r2,zero
 4016150:	0007883a 	mov	r3,zero
 4016154:	003e8906 	br	4015b7c <__alt_data_end+0xfc015b7c>
 4016158:	197ff804 	addi	r5,r3,-32
 401615c:	01000804 	movi	r4,32
 4016160:	414ad83a 	srl	r5,r8,r5
 4016164:	19002426 	beq	r3,r4,40161f8 <__adddf3+0x89c>
 4016168:	01001004 	movi	r4,64
 401616c:	20c7c83a 	sub	r3,r4,r3
 4016170:	40c6983a 	sll	r3,r8,r3
 4016174:	1c46b03a 	or	r3,r3,r17
 4016178:	1806c03a 	cmpne	r3,r3,zero
 401617c:	28e2b03a 	or	r17,r5,r3
 4016180:	0007883a 	mov	r3,zero
 4016184:	003f2306 	br	4015e14 <__alt_data_end+0xfc015e14>
 4016188:	0007883a 	mov	r3,zero
 401618c:	5811883a 	mov	r8,r11
 4016190:	00bfffc4 	movi	r2,-1
 4016194:	0401ffc4 	movi	r16,2047
 4016198:	003e7806 	br	4015b7c <__alt_data_end+0xfc015b7c>
 401619c:	4462b03a 	or	r17,r8,r17
 40161a0:	8822c03a 	cmpne	r17,r17,zero
 40161a4:	0009883a 	mov	r4,zero
 40161a8:	003fa006 	br	401602c <__alt_data_end+0xfc01602c>
 40161ac:	4811883a 	mov	r8,r9
 40161b0:	3023883a 	mov	r17,r6
 40161b4:	0401ffc4 	movi	r16,2047
 40161b8:	003e0706 	br	40159d8 <__alt_data_end+0xfc0159d8>
 40161bc:	4811883a 	mov	r8,r9
 40161c0:	3023883a 	mov	r17,r6
 40161c4:	003e0406 	br	40159d8 <__alt_data_end+0xfc0159d8>
 40161c8:	21fff804 	addi	r7,r4,-32
 40161cc:	01400804 	movi	r5,32
 40161d0:	41ced83a 	srl	r7,r8,r7
 40161d4:	21400a26 	beq	r4,r5,4016200 <__adddf3+0x8a4>
 40161d8:	01401004 	movi	r5,64
 40161dc:	2909c83a 	sub	r4,r5,r4
 40161e0:	4108983a 	sll	r4,r8,r4
 40161e4:	2448b03a 	or	r4,r4,r17
 40161e8:	2008c03a 	cmpne	r4,r4,zero
 40161ec:	3922b03a 	or	r17,r7,r4
 40161f0:	0009883a 	mov	r4,zero
 40161f4:	003f8d06 	br	401602c <__alt_data_end+0xfc01602c>
 40161f8:	0007883a 	mov	r3,zero
 40161fc:	003fdd06 	br	4016174 <__alt_data_end+0xfc016174>
 4016200:	0009883a 	mov	r4,zero
 4016204:	003ff706 	br	40161e4 <__alt_data_end+0xfc0161e4>

04016208 <__divdf3>:
 4016208:	defff004 	addi	sp,sp,-64
 401620c:	dc800815 	stw	r18,32(sp)
 4016210:	2824d53a 	srli	r18,r5,20
 4016214:	dd800c15 	stw	r22,48(sp)
 4016218:	282cd7fa 	srli	r22,r5,31
 401621c:	dc000615 	stw	r16,24(sp)
 4016220:	04000434 	movhi	r16,16
 4016224:	843fffc4 	addi	r16,r16,-1
 4016228:	dfc00f15 	stw	ra,60(sp)
 401622c:	df000e15 	stw	fp,56(sp)
 4016230:	ddc00d15 	stw	r23,52(sp)
 4016234:	dd400b15 	stw	r21,44(sp)
 4016238:	dd000a15 	stw	r20,40(sp)
 401623c:	dcc00915 	stw	r19,36(sp)
 4016240:	dc400715 	stw	r17,28(sp)
 4016244:	9481ffcc 	andi	r18,r18,2047
 4016248:	2c20703a 	and	r16,r5,r16
 401624c:	b2003fcc 	andi	r8,r22,255
 4016250:	90006126 	beq	r18,zero,40163d8 <__divdf3+0x1d0>
 4016254:	0081ffc4 	movi	r2,2047
 4016258:	202b883a 	mov	r21,r4
 401625c:	90803726 	beq	r18,r2,401633c <__divdf3+0x134>
 4016260:	80800434 	orhi	r2,r16,16
 4016264:	100490fa 	slli	r2,r2,3
 4016268:	2020d77a 	srli	r16,r4,29
 401626c:	202a90fa 	slli	r21,r4,3
 4016270:	94bf0044 	addi	r18,r18,-1023
 4016274:	80a0b03a 	or	r16,r16,r2
 4016278:	0013883a 	mov	r9,zero
 401627c:	000b883a 	mov	r5,zero
 4016280:	3806d53a 	srli	r3,r7,20
 4016284:	382ed7fa 	srli	r23,r7,31
 4016288:	04400434 	movhi	r17,16
 401628c:	8c7fffc4 	addi	r17,r17,-1
 4016290:	18c1ffcc 	andi	r3,r3,2047
 4016294:	3029883a 	mov	r20,r6
 4016298:	3c62703a 	and	r17,r7,r17
 401629c:	bf003fcc 	andi	fp,r23,255
 40162a0:	18006e26 	beq	r3,zero,401645c <__divdf3+0x254>
 40162a4:	0081ffc4 	movi	r2,2047
 40162a8:	18806626 	beq	r3,r2,4016444 <__divdf3+0x23c>
 40162ac:	88800434 	orhi	r2,r17,16
 40162b0:	100490fa 	slli	r2,r2,3
 40162b4:	3022d77a 	srli	r17,r6,29
 40162b8:	302890fa 	slli	r20,r6,3
 40162bc:	18ff0044 	addi	r3,r3,-1023
 40162c0:	88a2b03a 	or	r17,r17,r2
 40162c4:	000f883a 	mov	r7,zero
 40162c8:	b5e6f03a 	xor	r19,r22,r23
 40162cc:	3a4cb03a 	or	r6,r7,r9
 40162d0:	008003c4 	movi	r2,15
 40162d4:	9809883a 	mov	r4,r19
 40162d8:	90c7c83a 	sub	r3,r18,r3
 40162dc:	9cc03fcc 	andi	r19,r19,255
 40162e0:	11809636 	bltu	r2,r6,401653c <__divdf3+0x334>
 40162e4:	300c90ba 	slli	r6,r6,2
 40162e8:	00810074 	movhi	r2,1025
 40162ec:	1098bf04 	addi	r2,r2,25340
 40162f0:	308d883a 	add	r6,r6,r2
 40162f4:	30800017 	ldw	r2,0(r6)
 40162f8:	1000683a 	jmp	r2
 40162fc:	0401653c 	xorhi	r16,zero,1428
 4016300:	04016374 	movhi	r16,1421
 4016304:	0401652c 	andhi	r16,zero,1428
 4016308:	04016368 	cmpgeui	r16,zero,1421
 401630c:	0401652c 	andhi	r16,zero,1428
 4016310:	04016500 	call	401650 <__alt_mem_sdram-0x3bfe9b0>
 4016314:	0401652c 	andhi	r16,zero,1428
 4016318:	04016368 	cmpgeui	r16,zero,1421
 401631c:	04016374 	movhi	r16,1421
 4016320:	04016374 	movhi	r16,1421
 4016324:	04016500 	call	401650 <__alt_mem_sdram-0x3bfe9b0>
 4016328:	04016368 	cmpgeui	r16,zero,1421
 401632c:	04016358 	cmpnei	r16,zero,1421
 4016330:	04016358 	cmpnei	r16,zero,1421
 4016334:	04016358 	cmpnei	r16,zero,1421
 4016338:	040168c4 	movi	r16,1443
 401633c:	2404b03a 	or	r2,r4,r16
 4016340:	10006c1e 	bne	r2,zero,40164f4 <__divdf3+0x2ec>
 4016344:	02400204 	movi	r9,8
 4016348:	0021883a 	mov	r16,zero
 401634c:	002b883a 	mov	r21,zero
 4016350:	01400084 	movi	r5,2
 4016354:	003fca06 	br	4016280 <__alt_data_end+0xfc016280>
 4016358:	8023883a 	mov	r17,r16
 401635c:	a829883a 	mov	r20,r21
 4016360:	4039883a 	mov	fp,r8
 4016364:	280f883a 	mov	r7,r5
 4016368:	00800084 	movi	r2,2
 401636c:	3881601e 	bne	r7,r2,40168f0 <__divdf3+0x6e8>
 4016370:	e027883a 	mov	r19,fp
 4016374:	9900004c 	andi	r4,r19,1
 4016378:	0081ffc4 	movi	r2,2047
 401637c:	0021883a 	mov	r16,zero
 4016380:	002b883a 	mov	r21,zero
 4016384:	1004953a 	slli	r2,r2,20
 4016388:	20c03fcc 	andi	r3,r4,255
 401638c:	01400434 	movhi	r5,16
 4016390:	297fffc4 	addi	r5,r5,-1
 4016394:	180697fa 	slli	r3,r3,31
 4016398:	8160703a 	and	r16,r16,r5
 401639c:	80a0b03a 	or	r16,r16,r2
 40163a0:	80c6b03a 	or	r3,r16,r3
 40163a4:	a805883a 	mov	r2,r21
 40163a8:	dfc00f17 	ldw	ra,60(sp)
 40163ac:	df000e17 	ldw	fp,56(sp)
 40163b0:	ddc00d17 	ldw	r23,52(sp)
 40163b4:	dd800c17 	ldw	r22,48(sp)
 40163b8:	dd400b17 	ldw	r21,44(sp)
 40163bc:	dd000a17 	ldw	r20,40(sp)
 40163c0:	dcc00917 	ldw	r19,36(sp)
 40163c4:	dc800817 	ldw	r18,32(sp)
 40163c8:	dc400717 	ldw	r17,28(sp)
 40163cc:	dc000617 	ldw	r16,24(sp)
 40163d0:	dec01004 	addi	sp,sp,64
 40163d4:	f800283a 	ret
 40163d8:	2404b03a 	or	r2,r4,r16
 40163dc:	2023883a 	mov	r17,r4
 40163e0:	10003f26 	beq	r2,zero,40164e0 <__divdf3+0x2d8>
 40163e4:	80015e26 	beq	r16,zero,4016960 <__divdf3+0x758>
 40163e8:	8009883a 	mov	r4,r16
 40163ec:	d9800215 	stw	r6,8(sp)
 40163f0:	d9c00515 	stw	r7,20(sp)
 40163f4:	da000415 	stw	r8,16(sp)
 40163f8:	401819c0 	call	401819c <__clzsi2>
 40163fc:	d9800217 	ldw	r6,8(sp)
 4016400:	d9c00517 	ldw	r7,20(sp)
 4016404:	da000417 	ldw	r8,16(sp)
 4016408:	113ffd44 	addi	r4,r2,-11
 401640c:	00c00704 	movi	r3,28
 4016410:	19014f16 	blt	r3,r4,4016950 <__divdf3+0x748>
 4016414:	00c00744 	movi	r3,29
 4016418:	157ffe04 	addi	r21,r2,-8
 401641c:	1907c83a 	sub	r3,r3,r4
 4016420:	8560983a 	sll	r16,r16,r21
 4016424:	88c6d83a 	srl	r3,r17,r3
 4016428:	8d6a983a 	sll	r21,r17,r21
 401642c:	1c20b03a 	or	r16,r3,r16
 4016430:	1080fcc4 	addi	r2,r2,1011
 4016434:	00a5c83a 	sub	r18,zero,r2
 4016438:	0013883a 	mov	r9,zero
 401643c:	000b883a 	mov	r5,zero
 4016440:	003f8f06 	br	4016280 <__alt_data_end+0xfc016280>
 4016444:	3444b03a 	or	r2,r6,r17
 4016448:	1000231e 	bne	r2,zero,40164d8 <__divdf3+0x2d0>
 401644c:	0023883a 	mov	r17,zero
 4016450:	0029883a 	mov	r20,zero
 4016454:	01c00084 	movi	r7,2
 4016458:	003f9b06 	br	40162c8 <__alt_data_end+0xfc0162c8>
 401645c:	3444b03a 	or	r2,r6,r17
 4016460:	10001926 	beq	r2,zero,40164c8 <__divdf3+0x2c0>
 4016464:	88014b26 	beq	r17,zero,4016994 <__divdf3+0x78c>
 4016468:	8809883a 	mov	r4,r17
 401646c:	d9400115 	stw	r5,4(sp)
 4016470:	d9800215 	stw	r6,8(sp)
 4016474:	da000415 	stw	r8,16(sp)
 4016478:	da400315 	stw	r9,12(sp)
 401647c:	401819c0 	call	401819c <__clzsi2>
 4016480:	d9400117 	ldw	r5,4(sp)
 4016484:	d9800217 	ldw	r6,8(sp)
 4016488:	da000417 	ldw	r8,16(sp)
 401648c:	da400317 	ldw	r9,12(sp)
 4016490:	113ffd44 	addi	r4,r2,-11
 4016494:	00c00704 	movi	r3,28
 4016498:	19013a16 	blt	r3,r4,4016984 <__divdf3+0x77c>
 401649c:	00c00744 	movi	r3,29
 40164a0:	153ffe04 	addi	r20,r2,-8
 40164a4:	1907c83a 	sub	r3,r3,r4
 40164a8:	8d22983a 	sll	r17,r17,r20
 40164ac:	30c6d83a 	srl	r3,r6,r3
 40164b0:	3528983a 	sll	r20,r6,r20
 40164b4:	1c62b03a 	or	r17,r3,r17
 40164b8:	1080fcc4 	addi	r2,r2,1011
 40164bc:	0087c83a 	sub	r3,zero,r2
 40164c0:	000f883a 	mov	r7,zero
 40164c4:	003f8006 	br	40162c8 <__alt_data_end+0xfc0162c8>
 40164c8:	0023883a 	mov	r17,zero
 40164cc:	0029883a 	mov	r20,zero
 40164d0:	01c00044 	movi	r7,1
 40164d4:	003f7c06 	br	40162c8 <__alt_data_end+0xfc0162c8>
 40164d8:	01c000c4 	movi	r7,3
 40164dc:	003f7a06 	br	40162c8 <__alt_data_end+0xfc0162c8>
 40164e0:	02400104 	movi	r9,4
 40164e4:	0021883a 	mov	r16,zero
 40164e8:	002b883a 	mov	r21,zero
 40164ec:	01400044 	movi	r5,1
 40164f0:	003f6306 	br	4016280 <__alt_data_end+0xfc016280>
 40164f4:	02400304 	movi	r9,12
 40164f8:	014000c4 	movi	r5,3
 40164fc:	003f6006 	br	4016280 <__alt_data_end+0xfc016280>
 4016500:	04000434 	movhi	r16,16
 4016504:	0009883a 	mov	r4,zero
 4016508:	843fffc4 	addi	r16,r16,-1
 401650c:	057fffc4 	movi	r21,-1
 4016510:	0081ffc4 	movi	r2,2047
 4016514:	003f9b06 	br	4016384 <__alt_data_end+0xfc016384>
 4016518:	00c00044 	movi	r3,1
 401651c:	1887c83a 	sub	r3,r3,r2
 4016520:	01000e04 	movi	r4,56
 4016524:	20c1530e 	bge	r4,r3,4016a74 <__divdf3+0x86c>
 4016528:	9900004c 	andi	r4,r19,1
 401652c:	0005883a 	mov	r2,zero
 4016530:	0021883a 	mov	r16,zero
 4016534:	002b883a 	mov	r21,zero
 4016538:	003f9206 	br	4016384 <__alt_data_end+0xfc016384>
 401653c:	8c012e36 	bltu	r17,r16,40169f8 <__divdf3+0x7f0>
 4016540:	84412c26 	beq	r16,r17,40169f4 <__divdf3+0x7ec>
 4016544:	a82f883a 	mov	r23,r21
 4016548:	18ffffc4 	addi	r3,r3,-1
 401654c:	002b883a 	mov	r21,zero
 4016550:	a004d63a 	srli	r2,r20,24
 4016554:	8822923a 	slli	r17,r17,8
 4016558:	a028923a 	slli	r20,r20,8
 401655c:	8009883a 	mov	r4,r16
 4016560:	88acb03a 	or	r22,r17,r2
 4016564:	dd000015 	stw	r20,0(sp)
 4016568:	b028d43a 	srli	r20,r22,16
 401656c:	d8c00215 	stw	r3,8(sp)
 4016570:	b4bfffcc 	andi	r18,r22,65535
 4016574:	a00b883a 	mov	r5,r20
 4016578:	400a9780 	call	400a978 <__udivsi3>
 401657c:	100b883a 	mov	r5,r2
 4016580:	9009883a 	mov	r4,r18
 4016584:	1023883a 	mov	r17,r2
 4016588:	400aa340 	call	400aa34 <__mulsi3>
 401658c:	8009883a 	mov	r4,r16
 4016590:	a00b883a 	mov	r5,r20
 4016594:	1039883a 	mov	fp,r2
 4016598:	400a9dc0 	call	400a9dc <__umodsi3>
 401659c:	1004943a 	slli	r2,r2,16
 40165a0:	b808d43a 	srli	r4,r23,16
 40165a4:	d8c00217 	ldw	r3,8(sp)
 40165a8:	2084b03a 	or	r2,r4,r2
 40165ac:	1700062e 	bgeu	r2,fp,40165c8 <__divdf3+0x3c0>
 40165b0:	1585883a 	add	r2,r2,r22
 40165b4:	893fffc4 	addi	r4,r17,-1
 40165b8:	15811d36 	bltu	r2,r22,4016a30 <__divdf3+0x828>
 40165bc:	17011c2e 	bgeu	r2,fp,4016a30 <__divdf3+0x828>
 40165c0:	8c7fff84 	addi	r17,r17,-2
 40165c4:	1585883a 	add	r2,r2,r22
 40165c8:	1739c83a 	sub	fp,r2,fp
 40165cc:	a00b883a 	mov	r5,r20
 40165d0:	e009883a 	mov	r4,fp
 40165d4:	d8c00215 	stw	r3,8(sp)
 40165d8:	400a9780 	call	400a978 <__udivsi3>
 40165dc:	100b883a 	mov	r5,r2
 40165e0:	9009883a 	mov	r4,r18
 40165e4:	1021883a 	mov	r16,r2
 40165e8:	400aa340 	call	400aa34 <__mulsi3>
 40165ec:	a00b883a 	mov	r5,r20
 40165f0:	e009883a 	mov	r4,fp
 40165f4:	d8800415 	stw	r2,16(sp)
 40165f8:	400a9dc0 	call	400a9dc <__umodsi3>
 40165fc:	1004943a 	slli	r2,r2,16
 4016600:	da000417 	ldw	r8,16(sp)
 4016604:	bdffffcc 	andi	r23,r23,65535
 4016608:	b884b03a 	or	r2,r23,r2
 401660c:	d8c00217 	ldw	r3,8(sp)
 4016610:	1200062e 	bgeu	r2,r8,401662c <__divdf3+0x424>
 4016614:	1585883a 	add	r2,r2,r22
 4016618:	813fffc4 	addi	r4,r16,-1
 401661c:	15810236 	bltu	r2,r22,4016a28 <__divdf3+0x820>
 4016620:	1201012e 	bgeu	r2,r8,4016a28 <__divdf3+0x820>
 4016624:	843fff84 	addi	r16,r16,-2
 4016628:	1585883a 	add	r2,r2,r22
 401662c:	8822943a 	slli	r17,r17,16
 4016630:	d9800017 	ldw	r6,0(sp)
 4016634:	1211c83a 	sub	r8,r2,r8
 4016638:	8c22b03a 	or	r17,r17,r16
 401663c:	373fffcc 	andi	fp,r6,65535
 4016640:	8abfffcc 	andi	r10,r17,65535
 4016644:	8820d43a 	srli	r16,r17,16
 4016648:	5009883a 	mov	r4,r10
 401664c:	e00b883a 	mov	r5,fp
 4016650:	302ed43a 	srli	r23,r6,16
 4016654:	d8c00215 	stw	r3,8(sp)
 4016658:	da000415 	stw	r8,16(sp)
 401665c:	da800115 	stw	r10,4(sp)
 4016660:	400aa340 	call	400aa34 <__mulsi3>
 4016664:	800b883a 	mov	r5,r16
 4016668:	e009883a 	mov	r4,fp
 401666c:	d8800515 	stw	r2,20(sp)
 4016670:	400aa340 	call	400aa34 <__mulsi3>
 4016674:	8009883a 	mov	r4,r16
 4016678:	b80b883a 	mov	r5,r23
 401667c:	d8800315 	stw	r2,12(sp)
 4016680:	400aa340 	call	400aa34 <__mulsi3>
 4016684:	da800117 	ldw	r10,4(sp)
 4016688:	b80b883a 	mov	r5,r23
 401668c:	1021883a 	mov	r16,r2
 4016690:	5009883a 	mov	r4,r10
 4016694:	400aa340 	call	400aa34 <__mulsi3>
 4016698:	d9c00517 	ldw	r7,20(sp)
 401669c:	da400317 	ldw	r9,12(sp)
 40166a0:	d8c00217 	ldw	r3,8(sp)
 40166a4:	3808d43a 	srli	r4,r7,16
 40166a8:	1245883a 	add	r2,r2,r9
 40166ac:	da000417 	ldw	r8,16(sp)
 40166b0:	2085883a 	add	r2,r4,r2
 40166b4:	1240022e 	bgeu	r2,r9,40166c0 <__divdf3+0x4b8>
 40166b8:	01000074 	movhi	r4,1
 40166bc:	8121883a 	add	r16,r16,r4
 40166c0:	1008d43a 	srli	r4,r2,16
 40166c4:	1004943a 	slli	r2,r2,16
 40166c8:	39ffffcc 	andi	r7,r7,65535
 40166cc:	2409883a 	add	r4,r4,r16
 40166d0:	11c5883a 	add	r2,r2,r7
 40166d4:	4100bb36 	bltu	r8,r4,40169c4 <__divdf3+0x7bc>
 40166d8:	4100d726 	beq	r8,r4,4016a38 <__divdf3+0x830>
 40166dc:	4109c83a 	sub	r4,r8,r4
 40166e0:	a8a1c83a 	sub	r16,r21,r2
 40166e4:	ac2b803a 	cmpltu	r21,r21,r16
 40166e8:	256bc83a 	sub	r21,r4,r21
 40166ec:	b540d926 	beq	r22,r21,4016a54 <__divdf3+0x84c>
 40166f0:	a00b883a 	mov	r5,r20
 40166f4:	a809883a 	mov	r4,r21
 40166f8:	d8c00215 	stw	r3,8(sp)
 40166fc:	400a9780 	call	400a978 <__udivsi3>
 4016700:	100b883a 	mov	r5,r2
 4016704:	9009883a 	mov	r4,r18
 4016708:	d8800515 	stw	r2,20(sp)
 401670c:	400aa340 	call	400aa34 <__mulsi3>
 4016710:	a809883a 	mov	r4,r21
 4016714:	a00b883a 	mov	r5,r20
 4016718:	d8800415 	stw	r2,16(sp)
 401671c:	400a9dc0 	call	400a9dc <__umodsi3>
 4016720:	1004943a 	slli	r2,r2,16
 4016724:	8008d43a 	srli	r4,r16,16
 4016728:	da000417 	ldw	r8,16(sp)
 401672c:	d8c00217 	ldw	r3,8(sp)
 4016730:	2084b03a 	or	r2,r4,r2
 4016734:	d9c00517 	ldw	r7,20(sp)
 4016738:	1200062e 	bgeu	r2,r8,4016754 <__divdf3+0x54c>
 401673c:	1585883a 	add	r2,r2,r22
 4016740:	393fffc4 	addi	r4,r7,-1
 4016744:	1580c536 	bltu	r2,r22,4016a5c <__divdf3+0x854>
 4016748:	1200c42e 	bgeu	r2,r8,4016a5c <__divdf3+0x854>
 401674c:	39ffff84 	addi	r7,r7,-2
 4016750:	1585883a 	add	r2,r2,r22
 4016754:	122bc83a 	sub	r21,r2,r8
 4016758:	a00b883a 	mov	r5,r20
 401675c:	a809883a 	mov	r4,r21
 4016760:	d8c00215 	stw	r3,8(sp)
 4016764:	d9c00515 	stw	r7,20(sp)
 4016768:	400a9780 	call	400a978 <__udivsi3>
 401676c:	9009883a 	mov	r4,r18
 4016770:	100b883a 	mov	r5,r2
 4016774:	d8800415 	stw	r2,16(sp)
 4016778:	400aa340 	call	400aa34 <__mulsi3>
 401677c:	a809883a 	mov	r4,r21
 4016780:	a00b883a 	mov	r5,r20
 4016784:	1025883a 	mov	r18,r2
 4016788:	400a9dc0 	call	400a9dc <__umodsi3>
 401678c:	1004943a 	slli	r2,r2,16
 4016790:	813fffcc 	andi	r4,r16,65535
 4016794:	d8c00217 	ldw	r3,8(sp)
 4016798:	20a0b03a 	or	r16,r4,r2
 401679c:	d9c00517 	ldw	r7,20(sp)
 40167a0:	da000417 	ldw	r8,16(sp)
 40167a4:	8480062e 	bgeu	r16,r18,40167c0 <__divdf3+0x5b8>
 40167a8:	85a1883a 	add	r16,r16,r22
 40167ac:	40bfffc4 	addi	r2,r8,-1
 40167b0:	8580ac36 	bltu	r16,r22,4016a64 <__divdf3+0x85c>
 40167b4:	8480ab2e 	bgeu	r16,r18,4016a64 <__divdf3+0x85c>
 40167b8:	423fff84 	addi	r8,r8,-2
 40167bc:	85a1883a 	add	r16,r16,r22
 40167c0:	3804943a 	slli	r2,r7,16
 40167c4:	84a1c83a 	sub	r16,r16,r18
 40167c8:	e009883a 	mov	r4,fp
 40167cc:	1228b03a 	or	r20,r2,r8
 40167d0:	a1ffffcc 	andi	r7,r20,65535
 40167d4:	a024d43a 	srli	r18,r20,16
 40167d8:	380b883a 	mov	r5,r7
 40167dc:	d8c00215 	stw	r3,8(sp)
 40167e0:	d9c00515 	stw	r7,20(sp)
 40167e4:	400aa340 	call	400aa34 <__mulsi3>
 40167e8:	900b883a 	mov	r5,r18
 40167ec:	e009883a 	mov	r4,fp
 40167f0:	102b883a 	mov	r21,r2
 40167f4:	400aa340 	call	400aa34 <__mulsi3>
 40167f8:	900b883a 	mov	r5,r18
 40167fc:	b809883a 	mov	r4,r23
 4016800:	1039883a 	mov	fp,r2
 4016804:	400aa340 	call	400aa34 <__mulsi3>
 4016808:	d9c00517 	ldw	r7,20(sp)
 401680c:	b80b883a 	mov	r5,r23
 4016810:	1025883a 	mov	r18,r2
 4016814:	3809883a 	mov	r4,r7
 4016818:	400aa340 	call	400aa34 <__mulsi3>
 401681c:	a808d43a 	srli	r4,r21,16
 4016820:	1705883a 	add	r2,r2,fp
 4016824:	d8c00217 	ldw	r3,8(sp)
 4016828:	2085883a 	add	r2,r4,r2
 401682c:	1700022e 	bgeu	r2,fp,4016838 <__divdf3+0x630>
 4016830:	01000074 	movhi	r4,1
 4016834:	9125883a 	add	r18,r18,r4
 4016838:	1008d43a 	srli	r4,r2,16
 401683c:	1004943a 	slli	r2,r2,16
 4016840:	ad7fffcc 	andi	r21,r21,65535
 4016844:	2489883a 	add	r4,r4,r18
 4016848:	1545883a 	add	r2,r2,r21
 401684c:	81003836 	bltu	r16,r4,4016930 <__divdf3+0x728>
 4016850:	81003626 	beq	r16,r4,401692c <__divdf3+0x724>
 4016854:	a5000054 	ori	r20,r20,1
 4016858:	1880ffc4 	addi	r2,r3,1023
 401685c:	00bf2e0e 	bge	zero,r2,4016518 <__alt_data_end+0xfc016518>
 4016860:	a10001cc 	andi	r4,r20,7
 4016864:	20000726 	beq	r4,zero,4016884 <__divdf3+0x67c>
 4016868:	a10003cc 	andi	r4,r20,15
 401686c:	01400104 	movi	r5,4
 4016870:	21400426 	beq	r4,r5,4016884 <__divdf3+0x67c>
 4016874:	a149883a 	add	r4,r20,r5
 4016878:	2529803a 	cmpltu	r20,r4,r20
 401687c:	8d23883a 	add	r17,r17,r20
 4016880:	2029883a 	mov	r20,r4
 4016884:	8900402c 	andhi	r4,r17,256
 4016888:	20000426 	beq	r4,zero,401689c <__divdf3+0x694>
 401688c:	18810004 	addi	r2,r3,1024
 4016890:	00ffc034 	movhi	r3,65280
 4016894:	18ffffc4 	addi	r3,r3,-1
 4016898:	88e2703a 	and	r17,r17,r3
 401689c:	00c1ff84 	movi	r3,2046
 40168a0:	18beb416 	blt	r3,r2,4016374 <__alt_data_end+0xfc016374>
 40168a4:	a028d0fa 	srli	r20,r20,3
 40168a8:	882a977a 	slli	r21,r17,29
 40168ac:	8820927a 	slli	r16,r17,9
 40168b0:	1081ffcc 	andi	r2,r2,2047
 40168b4:	ad2ab03a 	or	r21,r21,r20
 40168b8:	8020d33a 	srli	r16,r16,12
 40168bc:	9900004c 	andi	r4,r19,1
 40168c0:	003eb006 	br	4016384 <__alt_data_end+0xfc016384>
 40168c4:	8080022c 	andhi	r2,r16,8
 40168c8:	10001226 	beq	r2,zero,4016914 <__divdf3+0x70c>
 40168cc:	8880022c 	andhi	r2,r17,8
 40168d0:	1000101e 	bne	r2,zero,4016914 <__divdf3+0x70c>
 40168d4:	00800434 	movhi	r2,16
 40168d8:	8c000234 	orhi	r16,r17,8
 40168dc:	10bfffc4 	addi	r2,r2,-1
 40168e0:	b809883a 	mov	r4,r23
 40168e4:	80a0703a 	and	r16,r16,r2
 40168e8:	a02b883a 	mov	r21,r20
 40168ec:	003f0806 	br	4016510 <__alt_data_end+0xfc016510>
 40168f0:	008000c4 	movi	r2,3
 40168f4:	3880b126 	beq	r7,r2,4016bbc <__divdf3+0x9b4>
 40168f8:	00800044 	movi	r2,1
 40168fc:	38805b1e 	bne	r7,r2,4016a6c <__divdf3+0x864>
 4016900:	e009883a 	mov	r4,fp
 4016904:	0005883a 	mov	r2,zero
 4016908:	0021883a 	mov	r16,zero
 401690c:	002b883a 	mov	r21,zero
 4016910:	003e9c06 	br	4016384 <__alt_data_end+0xfc016384>
 4016914:	00800434 	movhi	r2,16
 4016918:	84000234 	orhi	r16,r16,8
 401691c:	10bfffc4 	addi	r2,r2,-1
 4016920:	b009883a 	mov	r4,r22
 4016924:	80a0703a 	and	r16,r16,r2
 4016928:	003ef906 	br	4016510 <__alt_data_end+0xfc016510>
 401692c:	103fca26 	beq	r2,zero,4016858 <__alt_data_end+0xfc016858>
 4016930:	b421883a 	add	r16,r22,r16
 4016934:	a17fffc4 	addi	r5,r20,-1
 4016938:	8580422e 	bgeu	r16,r22,4016a44 <__divdf3+0x83c>
 401693c:	2829883a 	mov	r20,r5
 4016940:	813fc41e 	bne	r16,r4,4016854 <__alt_data_end+0xfc016854>
 4016944:	d9800017 	ldw	r6,0(sp)
 4016948:	30bfc21e 	bne	r6,r2,4016854 <__alt_data_end+0xfc016854>
 401694c:	003fc206 	br	4016858 <__alt_data_end+0xfc016858>
 4016950:	143ff604 	addi	r16,r2,-40
 4016954:	8c20983a 	sll	r16,r17,r16
 4016958:	002b883a 	mov	r21,zero
 401695c:	003eb406 	br	4016430 <__alt_data_end+0xfc016430>
 4016960:	d9800215 	stw	r6,8(sp)
 4016964:	d9c00515 	stw	r7,20(sp)
 4016968:	da000415 	stw	r8,16(sp)
 401696c:	401819c0 	call	401819c <__clzsi2>
 4016970:	10800804 	addi	r2,r2,32
 4016974:	da000417 	ldw	r8,16(sp)
 4016978:	d9c00517 	ldw	r7,20(sp)
 401697c:	d9800217 	ldw	r6,8(sp)
 4016980:	003ea106 	br	4016408 <__alt_data_end+0xfc016408>
 4016984:	147ff604 	addi	r17,r2,-40
 4016988:	3462983a 	sll	r17,r6,r17
 401698c:	0029883a 	mov	r20,zero
 4016990:	003ec906 	br	40164b8 <__alt_data_end+0xfc0164b8>
 4016994:	3009883a 	mov	r4,r6
 4016998:	d9400115 	stw	r5,4(sp)
 401699c:	d9800215 	stw	r6,8(sp)
 40169a0:	da000415 	stw	r8,16(sp)
 40169a4:	da400315 	stw	r9,12(sp)
 40169a8:	401819c0 	call	401819c <__clzsi2>
 40169ac:	10800804 	addi	r2,r2,32
 40169b0:	da400317 	ldw	r9,12(sp)
 40169b4:	da000417 	ldw	r8,16(sp)
 40169b8:	d9800217 	ldw	r6,8(sp)
 40169bc:	d9400117 	ldw	r5,4(sp)
 40169c0:	003eb306 	br	4016490 <__alt_data_end+0xfc016490>
 40169c4:	d9800017 	ldw	r6,0(sp)
 40169c8:	a9ab883a 	add	r21,r21,r6
 40169cc:	a98b803a 	cmpltu	r5,r21,r6
 40169d0:	2d8b883a 	add	r5,r5,r22
 40169d4:	2a11883a 	add	r8,r5,r8
 40169d8:	897fffc4 	addi	r5,r17,-1
 40169dc:	b2000c2e 	bgeu	r22,r8,4016a10 <__divdf3+0x808>
 40169e0:	41003f36 	bltu	r8,r4,4016ae0 <__divdf3+0x8d8>
 40169e4:	22006c26 	beq	r4,r8,4016b98 <__divdf3+0x990>
 40169e8:	4109c83a 	sub	r4,r8,r4
 40169ec:	2823883a 	mov	r17,r5
 40169f0:	003f3b06 	br	40166e0 <__alt_data_end+0xfc0166e0>
 40169f4:	ad3ed336 	bltu	r21,r20,4016544 <__alt_data_end+0xfc016544>
 40169f8:	a804d07a 	srli	r2,r21,1
 40169fc:	802e97fa 	slli	r23,r16,31
 4016a00:	a82a97fa 	slli	r21,r21,31
 4016a04:	8020d07a 	srli	r16,r16,1
 4016a08:	b8aeb03a 	or	r23,r23,r2
 4016a0c:	003ed006 	br	4016550 <__alt_data_end+0xfc016550>
 4016a10:	b23ff51e 	bne	r22,r8,40169e8 <__alt_data_end+0xfc0169e8>
 4016a14:	d9800017 	ldw	r6,0(sp)
 4016a18:	a9bff12e 	bgeu	r21,r6,40169e0 <__alt_data_end+0xfc0169e0>
 4016a1c:	b109c83a 	sub	r4,r22,r4
 4016a20:	2823883a 	mov	r17,r5
 4016a24:	003f2e06 	br	40166e0 <__alt_data_end+0xfc0166e0>
 4016a28:	2021883a 	mov	r16,r4
 4016a2c:	003eff06 	br	401662c <__alt_data_end+0xfc01662c>
 4016a30:	2023883a 	mov	r17,r4
 4016a34:	003ee406 	br	40165c8 <__alt_data_end+0xfc0165c8>
 4016a38:	a8bfe236 	bltu	r21,r2,40169c4 <__alt_data_end+0xfc0169c4>
 4016a3c:	0009883a 	mov	r4,zero
 4016a40:	003f2706 	br	40166e0 <__alt_data_end+0xfc0166e0>
 4016a44:	81002d36 	bltu	r16,r4,4016afc <__divdf3+0x8f4>
 4016a48:	24005626 	beq	r4,r16,4016ba4 <__divdf3+0x99c>
 4016a4c:	2829883a 	mov	r20,r5
 4016a50:	003f8006 	br	4016854 <__alt_data_end+0xfc016854>
 4016a54:	053fffc4 	movi	r20,-1
 4016a58:	003f7f06 	br	4016858 <__alt_data_end+0xfc016858>
 4016a5c:	200f883a 	mov	r7,r4
 4016a60:	003f3c06 	br	4016754 <__alt_data_end+0xfc016754>
 4016a64:	1011883a 	mov	r8,r2
 4016a68:	003f5506 	br	40167c0 <__alt_data_end+0xfc0167c0>
 4016a6c:	e027883a 	mov	r19,fp
 4016a70:	003f7906 	br	4016858 <__alt_data_end+0xfc016858>
 4016a74:	010007c4 	movi	r4,31
 4016a78:	20c02816 	blt	r4,r3,4016b1c <__divdf3+0x914>
 4016a7c:	00800804 	movi	r2,32
 4016a80:	10c5c83a 	sub	r2,r2,r3
 4016a84:	888a983a 	sll	r5,r17,r2
 4016a88:	a0c8d83a 	srl	r4,r20,r3
 4016a8c:	a084983a 	sll	r2,r20,r2
 4016a90:	88e2d83a 	srl	r17,r17,r3
 4016a94:	2906b03a 	or	r3,r5,r4
 4016a98:	1004c03a 	cmpne	r2,r2,zero
 4016a9c:	1886b03a 	or	r3,r3,r2
 4016aa0:	188001cc 	andi	r2,r3,7
 4016aa4:	10000726 	beq	r2,zero,4016ac4 <__divdf3+0x8bc>
 4016aa8:	188003cc 	andi	r2,r3,15
 4016aac:	01000104 	movi	r4,4
 4016ab0:	11000426 	beq	r2,r4,4016ac4 <__divdf3+0x8bc>
 4016ab4:	1805883a 	mov	r2,r3
 4016ab8:	10c00104 	addi	r3,r2,4
 4016abc:	1885803a 	cmpltu	r2,r3,r2
 4016ac0:	88a3883a 	add	r17,r17,r2
 4016ac4:	8880202c 	andhi	r2,r17,128
 4016ac8:	10002926 	beq	r2,zero,4016b70 <__divdf3+0x968>
 4016acc:	9900004c 	andi	r4,r19,1
 4016ad0:	00800044 	movi	r2,1
 4016ad4:	0021883a 	mov	r16,zero
 4016ad8:	002b883a 	mov	r21,zero
 4016adc:	003e2906 	br	4016384 <__alt_data_end+0xfc016384>
 4016ae0:	d9800017 	ldw	r6,0(sp)
 4016ae4:	8c7fff84 	addi	r17,r17,-2
 4016ae8:	a9ab883a 	add	r21,r21,r6
 4016aec:	a98b803a 	cmpltu	r5,r21,r6
 4016af0:	2d8b883a 	add	r5,r5,r22
 4016af4:	2a11883a 	add	r8,r5,r8
 4016af8:	003ef806 	br	40166dc <__alt_data_end+0xfc0166dc>
 4016afc:	d9800017 	ldw	r6,0(sp)
 4016b00:	318f883a 	add	r7,r6,r6
 4016b04:	398b803a 	cmpltu	r5,r7,r6
 4016b08:	2d8d883a 	add	r6,r5,r22
 4016b0c:	81a1883a 	add	r16,r16,r6
 4016b10:	a17fff84 	addi	r5,r20,-2
 4016b14:	d9c00015 	stw	r7,0(sp)
 4016b18:	003f8806 	br	401693c <__alt_data_end+0xfc01693c>
 4016b1c:	013ff844 	movi	r4,-31
 4016b20:	2085c83a 	sub	r2,r4,r2
 4016b24:	8888d83a 	srl	r4,r17,r2
 4016b28:	00800804 	movi	r2,32
 4016b2c:	18802126 	beq	r3,r2,4016bb4 <__divdf3+0x9ac>
 4016b30:	04001004 	movi	r16,64
 4016b34:	80c7c83a 	sub	r3,r16,r3
 4016b38:	88e0983a 	sll	r16,r17,r3
 4016b3c:	8504b03a 	or	r2,r16,r20
 4016b40:	1004c03a 	cmpne	r2,r2,zero
 4016b44:	2084b03a 	or	r2,r4,r2
 4016b48:	144001cc 	andi	r17,r2,7
 4016b4c:	88000d1e 	bne	r17,zero,4016b84 <__divdf3+0x97c>
 4016b50:	0021883a 	mov	r16,zero
 4016b54:	102ad0fa 	srli	r21,r2,3
 4016b58:	9900004c 	andi	r4,r19,1
 4016b5c:	0005883a 	mov	r2,zero
 4016b60:	ac6ab03a 	or	r21,r21,r17
 4016b64:	003e0706 	br	4016384 <__alt_data_end+0xfc016384>
 4016b68:	1007883a 	mov	r3,r2
 4016b6c:	0023883a 	mov	r17,zero
 4016b70:	8820927a 	slli	r16,r17,9
 4016b74:	1805883a 	mov	r2,r3
 4016b78:	8822977a 	slli	r17,r17,29
 4016b7c:	8020d33a 	srli	r16,r16,12
 4016b80:	003ff406 	br	4016b54 <__alt_data_end+0xfc016b54>
 4016b84:	10c003cc 	andi	r3,r2,15
 4016b88:	01000104 	movi	r4,4
 4016b8c:	193ff626 	beq	r3,r4,4016b68 <__alt_data_end+0xfc016b68>
 4016b90:	0023883a 	mov	r17,zero
 4016b94:	003fc806 	br	4016ab8 <__alt_data_end+0xfc016ab8>
 4016b98:	a8bfd136 	bltu	r21,r2,4016ae0 <__alt_data_end+0xfc016ae0>
 4016b9c:	2823883a 	mov	r17,r5
 4016ba0:	003fa606 	br	4016a3c <__alt_data_end+0xfc016a3c>
 4016ba4:	d9800017 	ldw	r6,0(sp)
 4016ba8:	30bfd436 	bltu	r6,r2,4016afc <__alt_data_end+0xfc016afc>
 4016bac:	2829883a 	mov	r20,r5
 4016bb0:	003f6406 	br	4016944 <__alt_data_end+0xfc016944>
 4016bb4:	0021883a 	mov	r16,zero
 4016bb8:	003fe006 	br	4016b3c <__alt_data_end+0xfc016b3c>
 4016bbc:	00800434 	movhi	r2,16
 4016bc0:	8c000234 	orhi	r16,r17,8
 4016bc4:	10bfffc4 	addi	r2,r2,-1
 4016bc8:	e009883a 	mov	r4,fp
 4016bcc:	80a0703a 	and	r16,r16,r2
 4016bd0:	a02b883a 	mov	r21,r20
 4016bd4:	003e4e06 	br	4016510 <__alt_data_end+0xfc016510>

04016bd8 <__eqdf2>:
 4016bd8:	2804d53a 	srli	r2,r5,20
 4016bdc:	3806d53a 	srli	r3,r7,20
 4016be0:	02000434 	movhi	r8,16
 4016be4:	423fffc4 	addi	r8,r8,-1
 4016be8:	1081ffcc 	andi	r2,r2,2047
 4016bec:	0281ffc4 	movi	r10,2047
 4016bf0:	2a12703a 	and	r9,r5,r8
 4016bf4:	18c1ffcc 	andi	r3,r3,2047
 4016bf8:	3a10703a 	and	r8,r7,r8
 4016bfc:	280ad7fa 	srli	r5,r5,31
 4016c00:	380ed7fa 	srli	r7,r7,31
 4016c04:	12801026 	beq	r2,r10,4016c48 <__eqdf2+0x70>
 4016c08:	0281ffc4 	movi	r10,2047
 4016c0c:	1a800a26 	beq	r3,r10,4016c38 <__eqdf2+0x60>
 4016c10:	10c00226 	beq	r2,r3,4016c1c <__eqdf2+0x44>
 4016c14:	00800044 	movi	r2,1
 4016c18:	f800283a 	ret
 4016c1c:	4a3ffd1e 	bne	r9,r8,4016c14 <__alt_data_end+0xfc016c14>
 4016c20:	21bffc1e 	bne	r4,r6,4016c14 <__alt_data_end+0xfc016c14>
 4016c24:	29c00c26 	beq	r5,r7,4016c58 <__eqdf2+0x80>
 4016c28:	103ffa1e 	bne	r2,zero,4016c14 <__alt_data_end+0xfc016c14>
 4016c2c:	2244b03a 	or	r2,r4,r9
 4016c30:	1004c03a 	cmpne	r2,r2,zero
 4016c34:	f800283a 	ret
 4016c38:	3214b03a 	or	r10,r6,r8
 4016c3c:	503ff426 	beq	r10,zero,4016c10 <__alt_data_end+0xfc016c10>
 4016c40:	00800044 	movi	r2,1
 4016c44:	f800283a 	ret
 4016c48:	2254b03a 	or	r10,r4,r9
 4016c4c:	503fee26 	beq	r10,zero,4016c08 <__alt_data_end+0xfc016c08>
 4016c50:	00800044 	movi	r2,1
 4016c54:	f800283a 	ret
 4016c58:	0005883a 	mov	r2,zero
 4016c5c:	f800283a 	ret

04016c60 <__gedf2>:
 4016c60:	2804d53a 	srli	r2,r5,20
 4016c64:	3806d53a 	srli	r3,r7,20
 4016c68:	02000434 	movhi	r8,16
 4016c6c:	423fffc4 	addi	r8,r8,-1
 4016c70:	1081ffcc 	andi	r2,r2,2047
 4016c74:	0241ffc4 	movi	r9,2047
 4016c78:	2a14703a 	and	r10,r5,r8
 4016c7c:	18c1ffcc 	andi	r3,r3,2047
 4016c80:	3a10703a 	and	r8,r7,r8
 4016c84:	280ad7fa 	srli	r5,r5,31
 4016c88:	380ed7fa 	srli	r7,r7,31
 4016c8c:	12401d26 	beq	r2,r9,4016d04 <__gedf2+0xa4>
 4016c90:	0241ffc4 	movi	r9,2047
 4016c94:	1a401226 	beq	r3,r9,4016ce0 <__gedf2+0x80>
 4016c98:	1000081e 	bne	r2,zero,4016cbc <__gedf2+0x5c>
 4016c9c:	2296b03a 	or	r11,r4,r10
 4016ca0:	5813003a 	cmpeq	r9,r11,zero
 4016ca4:	1800091e 	bne	r3,zero,4016ccc <__gedf2+0x6c>
 4016ca8:	3218b03a 	or	r12,r6,r8
 4016cac:	6000071e 	bne	r12,zero,4016ccc <__gedf2+0x6c>
 4016cb0:	0005883a 	mov	r2,zero
 4016cb4:	5800101e 	bne	r11,zero,4016cf8 <__gedf2+0x98>
 4016cb8:	f800283a 	ret
 4016cbc:	18000c1e 	bne	r3,zero,4016cf0 <__gedf2+0x90>
 4016cc0:	3212b03a 	or	r9,r6,r8
 4016cc4:	48000c26 	beq	r9,zero,4016cf8 <__gedf2+0x98>
 4016cc8:	0013883a 	mov	r9,zero
 4016ccc:	39c03fcc 	andi	r7,r7,255
 4016cd0:	48000826 	beq	r9,zero,4016cf4 <__gedf2+0x94>
 4016cd4:	38000926 	beq	r7,zero,4016cfc <__gedf2+0x9c>
 4016cd8:	00800044 	movi	r2,1
 4016cdc:	f800283a 	ret
 4016ce0:	3212b03a 	or	r9,r6,r8
 4016ce4:	483fec26 	beq	r9,zero,4016c98 <__alt_data_end+0xfc016c98>
 4016ce8:	00bfff84 	movi	r2,-2
 4016cec:	f800283a 	ret
 4016cf0:	39c03fcc 	andi	r7,r7,255
 4016cf4:	29c00626 	beq	r5,r7,4016d10 <__gedf2+0xb0>
 4016cf8:	283ff726 	beq	r5,zero,4016cd8 <__alt_data_end+0xfc016cd8>
 4016cfc:	00bfffc4 	movi	r2,-1
 4016d00:	f800283a 	ret
 4016d04:	2292b03a 	or	r9,r4,r10
 4016d08:	483fe126 	beq	r9,zero,4016c90 <__alt_data_end+0xfc016c90>
 4016d0c:	003ff606 	br	4016ce8 <__alt_data_end+0xfc016ce8>
 4016d10:	18bff916 	blt	r3,r2,4016cf8 <__alt_data_end+0xfc016cf8>
 4016d14:	10c00316 	blt	r2,r3,4016d24 <__gedf2+0xc4>
 4016d18:	42bff736 	bltu	r8,r10,4016cf8 <__alt_data_end+0xfc016cf8>
 4016d1c:	52000326 	beq	r10,r8,4016d2c <__gedf2+0xcc>
 4016d20:	5200042e 	bgeu	r10,r8,4016d34 <__gedf2+0xd4>
 4016d24:	283fec1e 	bne	r5,zero,4016cd8 <__alt_data_end+0xfc016cd8>
 4016d28:	003ff406 	br	4016cfc <__alt_data_end+0xfc016cfc>
 4016d2c:	313ff236 	bltu	r6,r4,4016cf8 <__alt_data_end+0xfc016cf8>
 4016d30:	21bffc36 	bltu	r4,r6,4016d24 <__alt_data_end+0xfc016d24>
 4016d34:	0005883a 	mov	r2,zero
 4016d38:	f800283a 	ret

04016d3c <__ledf2>:
 4016d3c:	2804d53a 	srli	r2,r5,20
 4016d40:	3810d53a 	srli	r8,r7,20
 4016d44:	00c00434 	movhi	r3,16
 4016d48:	18ffffc4 	addi	r3,r3,-1
 4016d4c:	1081ffcc 	andi	r2,r2,2047
 4016d50:	0241ffc4 	movi	r9,2047
 4016d54:	28d4703a 	and	r10,r5,r3
 4016d58:	4201ffcc 	andi	r8,r8,2047
 4016d5c:	38c6703a 	and	r3,r7,r3
 4016d60:	280ad7fa 	srli	r5,r5,31
 4016d64:	380ed7fa 	srli	r7,r7,31
 4016d68:	12401f26 	beq	r2,r9,4016de8 <__ledf2+0xac>
 4016d6c:	0241ffc4 	movi	r9,2047
 4016d70:	42401426 	beq	r8,r9,4016dc4 <__ledf2+0x88>
 4016d74:	1000091e 	bne	r2,zero,4016d9c <__ledf2+0x60>
 4016d78:	2296b03a 	or	r11,r4,r10
 4016d7c:	5813003a 	cmpeq	r9,r11,zero
 4016d80:	29403fcc 	andi	r5,r5,255
 4016d84:	40000a1e 	bne	r8,zero,4016db0 <__ledf2+0x74>
 4016d88:	30d8b03a 	or	r12,r6,r3
 4016d8c:	6000081e 	bne	r12,zero,4016db0 <__ledf2+0x74>
 4016d90:	0005883a 	mov	r2,zero
 4016d94:	5800111e 	bne	r11,zero,4016ddc <__ledf2+0xa0>
 4016d98:	f800283a 	ret
 4016d9c:	29403fcc 	andi	r5,r5,255
 4016da0:	40000c1e 	bne	r8,zero,4016dd4 <__ledf2+0x98>
 4016da4:	30d2b03a 	or	r9,r6,r3
 4016da8:	48000c26 	beq	r9,zero,4016ddc <__ledf2+0xa0>
 4016dac:	0013883a 	mov	r9,zero
 4016db0:	39c03fcc 	andi	r7,r7,255
 4016db4:	48000826 	beq	r9,zero,4016dd8 <__ledf2+0x9c>
 4016db8:	38001126 	beq	r7,zero,4016e00 <__ledf2+0xc4>
 4016dbc:	00800044 	movi	r2,1
 4016dc0:	f800283a 	ret
 4016dc4:	30d2b03a 	or	r9,r6,r3
 4016dc8:	483fea26 	beq	r9,zero,4016d74 <__alt_data_end+0xfc016d74>
 4016dcc:	00800084 	movi	r2,2
 4016dd0:	f800283a 	ret
 4016dd4:	39c03fcc 	andi	r7,r7,255
 4016dd8:	39400726 	beq	r7,r5,4016df8 <__ledf2+0xbc>
 4016ddc:	2800081e 	bne	r5,zero,4016e00 <__ledf2+0xc4>
 4016de0:	00800044 	movi	r2,1
 4016de4:	f800283a 	ret
 4016de8:	2292b03a 	or	r9,r4,r10
 4016dec:	483fdf26 	beq	r9,zero,4016d6c <__alt_data_end+0xfc016d6c>
 4016df0:	00800084 	movi	r2,2
 4016df4:	f800283a 	ret
 4016df8:	4080030e 	bge	r8,r2,4016e08 <__ledf2+0xcc>
 4016dfc:	383fef26 	beq	r7,zero,4016dbc <__alt_data_end+0xfc016dbc>
 4016e00:	00bfffc4 	movi	r2,-1
 4016e04:	f800283a 	ret
 4016e08:	123feb16 	blt	r2,r8,4016db8 <__alt_data_end+0xfc016db8>
 4016e0c:	1abff336 	bltu	r3,r10,4016ddc <__alt_data_end+0xfc016ddc>
 4016e10:	50c00326 	beq	r10,r3,4016e20 <__ledf2+0xe4>
 4016e14:	50c0042e 	bgeu	r10,r3,4016e28 <__ledf2+0xec>
 4016e18:	283fe81e 	bne	r5,zero,4016dbc <__alt_data_end+0xfc016dbc>
 4016e1c:	003ff806 	br	4016e00 <__alt_data_end+0xfc016e00>
 4016e20:	313fee36 	bltu	r6,r4,4016ddc <__alt_data_end+0xfc016ddc>
 4016e24:	21bffc36 	bltu	r4,r6,4016e18 <__alt_data_end+0xfc016e18>
 4016e28:	0005883a 	mov	r2,zero
 4016e2c:	f800283a 	ret

04016e30 <__muldf3>:
 4016e30:	deffee04 	addi	sp,sp,-72
 4016e34:	dd000c15 	stw	r20,48(sp)
 4016e38:	2828d53a 	srli	r20,r5,20
 4016e3c:	ddc00f15 	stw	r23,60(sp)
 4016e40:	282ed7fa 	srli	r23,r5,31
 4016e44:	dc000815 	stw	r16,32(sp)
 4016e48:	04000434 	movhi	r16,16
 4016e4c:	dcc00b15 	stw	r19,44(sp)
 4016e50:	843fffc4 	addi	r16,r16,-1
 4016e54:	dfc01115 	stw	ra,68(sp)
 4016e58:	df001015 	stw	fp,64(sp)
 4016e5c:	dd800e15 	stw	r22,56(sp)
 4016e60:	dd400d15 	stw	r21,52(sp)
 4016e64:	dc800a15 	stw	r18,40(sp)
 4016e68:	dc400915 	stw	r17,36(sp)
 4016e6c:	a501ffcc 	andi	r20,r20,2047
 4016e70:	2c20703a 	and	r16,r5,r16
 4016e74:	b827883a 	mov	r19,r23
 4016e78:	ba403fcc 	andi	r9,r23,255
 4016e7c:	a0006026 	beq	r20,zero,4017000 <__muldf3+0x1d0>
 4016e80:	0081ffc4 	movi	r2,2047
 4016e84:	202d883a 	mov	r22,r4
 4016e88:	a0803626 	beq	r20,r2,4016f64 <__muldf3+0x134>
 4016e8c:	84000434 	orhi	r16,r16,16
 4016e90:	200ad77a 	srli	r5,r4,29
 4016e94:	800490fa 	slli	r2,r16,3
 4016e98:	202c90fa 	slli	r22,r4,3
 4016e9c:	a53f0044 	addi	r20,r20,-1023
 4016ea0:	28a0b03a 	or	r16,r5,r2
 4016ea4:	002b883a 	mov	r21,zero
 4016ea8:	000b883a 	mov	r5,zero
 4016eac:	3804d53a 	srli	r2,r7,20
 4016eb0:	3838d7fa 	srli	fp,r7,31
 4016eb4:	04400434 	movhi	r17,16
 4016eb8:	8c7fffc4 	addi	r17,r17,-1
 4016ebc:	1081ffcc 	andi	r2,r2,2047
 4016ec0:	3025883a 	mov	r18,r6
 4016ec4:	3c62703a 	and	r17,r7,r17
 4016ec8:	e2803fcc 	andi	r10,fp,255
 4016ecc:	10006d26 	beq	r2,zero,4017084 <__muldf3+0x254>
 4016ed0:	00c1ffc4 	movi	r3,2047
 4016ed4:	10c06526 	beq	r2,r3,401706c <__muldf3+0x23c>
 4016ed8:	8c400434 	orhi	r17,r17,16
 4016edc:	300ed77a 	srli	r7,r6,29
 4016ee0:	880690fa 	slli	r3,r17,3
 4016ee4:	302490fa 	slli	r18,r6,3
 4016ee8:	10bf0044 	addi	r2,r2,-1023
 4016eec:	38e2b03a 	or	r17,r7,r3
 4016ef0:	000f883a 	mov	r7,zero
 4016ef4:	a087883a 	add	r3,r20,r2
 4016ef8:	010003c4 	movi	r4,15
 4016efc:	3d44b03a 	or	r2,r7,r21
 4016f00:	e5ccf03a 	xor	r6,fp,r23
 4016f04:	1a000044 	addi	r8,r3,1
 4016f08:	20809b36 	bltu	r4,r2,4017178 <__muldf3+0x348>
 4016f0c:	100490ba 	slli	r2,r2,2
 4016f10:	01010074 	movhi	r4,1025
 4016f14:	211bc904 	addi	r4,r4,28452
 4016f18:	1105883a 	add	r2,r2,r4
 4016f1c:	10800017 	ldw	r2,0(r2)
 4016f20:	1000683a 	jmp	r2
 4016f24:	04017178 	rdprs	r16,zero,1477
 4016f28:	04016f84 	movi	r16,1470
 4016f2c:	04016f84 	movi	r16,1470
 4016f30:	04016f80 	call	4016f8 <__alt_mem_sdram-0x3bfe908>
 4016f34:	04017154 	movui	r16,1477
 4016f38:	04017154 	movui	r16,1477
 4016f3c:	0401713c 	xorhi	r16,zero,1476
 4016f40:	04016f80 	call	4016f8 <__alt_mem_sdram-0x3bfe908>
 4016f44:	04017154 	movui	r16,1477
 4016f48:	0401713c 	xorhi	r16,zero,1476
 4016f4c:	04017154 	movui	r16,1477
 4016f50:	04016f80 	call	4016f8 <__alt_mem_sdram-0x3bfe908>
 4016f54:	04017164 	muli	r16,zero,1477
 4016f58:	04017164 	muli	r16,zero,1477
 4016f5c:	04017164 	muli	r16,zero,1477
 4016f60:	040174c4 	movi	r16,1491
 4016f64:	2404b03a 	or	r2,r4,r16
 4016f68:	1000711e 	bne	r2,zero,4017130 <__muldf3+0x300>
 4016f6c:	05400204 	movi	r21,8
 4016f70:	0021883a 	mov	r16,zero
 4016f74:	002d883a 	mov	r22,zero
 4016f78:	01400084 	movi	r5,2
 4016f7c:	003fcb06 	br	4016eac <__alt_data_end+0xfc016eac>
 4016f80:	500d883a 	mov	r6,r10
 4016f84:	00800084 	movi	r2,2
 4016f88:	38805926 	beq	r7,r2,40170f0 <__muldf3+0x2c0>
 4016f8c:	008000c4 	movi	r2,3
 4016f90:	3881bb26 	beq	r7,r2,4017680 <__muldf3+0x850>
 4016f94:	00800044 	movi	r2,1
 4016f98:	3881961e 	bne	r7,r2,40175f4 <__muldf3+0x7c4>
 4016f9c:	3027883a 	mov	r19,r6
 4016fa0:	0005883a 	mov	r2,zero
 4016fa4:	0021883a 	mov	r16,zero
 4016fa8:	002d883a 	mov	r22,zero
 4016fac:	1004953a 	slli	r2,r2,20
 4016fb0:	98c03fcc 	andi	r3,r19,255
 4016fb4:	04400434 	movhi	r17,16
 4016fb8:	8c7fffc4 	addi	r17,r17,-1
 4016fbc:	180697fa 	slli	r3,r3,31
 4016fc0:	8460703a 	and	r16,r16,r17
 4016fc4:	80a0b03a 	or	r16,r16,r2
 4016fc8:	80c6b03a 	or	r3,r16,r3
 4016fcc:	b005883a 	mov	r2,r22
 4016fd0:	dfc01117 	ldw	ra,68(sp)
 4016fd4:	df001017 	ldw	fp,64(sp)
 4016fd8:	ddc00f17 	ldw	r23,60(sp)
 4016fdc:	dd800e17 	ldw	r22,56(sp)
 4016fe0:	dd400d17 	ldw	r21,52(sp)
 4016fe4:	dd000c17 	ldw	r20,48(sp)
 4016fe8:	dcc00b17 	ldw	r19,44(sp)
 4016fec:	dc800a17 	ldw	r18,40(sp)
 4016ff0:	dc400917 	ldw	r17,36(sp)
 4016ff4:	dc000817 	ldw	r16,32(sp)
 4016ff8:	dec01204 	addi	sp,sp,72
 4016ffc:	f800283a 	ret
 4017000:	2404b03a 	or	r2,r4,r16
 4017004:	202b883a 	mov	r21,r4
 4017008:	10004426 	beq	r2,zero,401711c <__muldf3+0x2ec>
 401700c:	80015126 	beq	r16,zero,4017554 <__muldf3+0x724>
 4017010:	8009883a 	mov	r4,r16
 4017014:	d9800715 	stw	r6,28(sp)
 4017018:	d9c00215 	stw	r7,8(sp)
 401701c:	da400415 	stw	r9,16(sp)
 4017020:	401819c0 	call	401819c <__clzsi2>
 4017024:	d9800717 	ldw	r6,28(sp)
 4017028:	d9c00217 	ldw	r7,8(sp)
 401702c:	da400417 	ldw	r9,16(sp)
 4017030:	113ffd44 	addi	r4,r2,-11
 4017034:	00c00704 	movi	r3,28
 4017038:	19014216 	blt	r3,r4,4017544 <__muldf3+0x714>
 401703c:	00c00744 	movi	r3,29
 4017040:	15bffe04 	addi	r22,r2,-8
 4017044:	1907c83a 	sub	r3,r3,r4
 4017048:	85a0983a 	sll	r16,r16,r22
 401704c:	a8c6d83a 	srl	r3,r21,r3
 4017050:	adac983a 	sll	r22,r21,r22
 4017054:	1c20b03a 	or	r16,r3,r16
 4017058:	1080fcc4 	addi	r2,r2,1011
 401705c:	00a9c83a 	sub	r20,zero,r2
 4017060:	002b883a 	mov	r21,zero
 4017064:	000b883a 	mov	r5,zero
 4017068:	003f9006 	br	4016eac <__alt_data_end+0xfc016eac>
 401706c:	3446b03a 	or	r3,r6,r17
 4017070:	1800281e 	bne	r3,zero,4017114 <__muldf3+0x2e4>
 4017074:	0023883a 	mov	r17,zero
 4017078:	0025883a 	mov	r18,zero
 401707c:	01c00084 	movi	r7,2
 4017080:	003f9c06 	br	4016ef4 <__alt_data_end+0xfc016ef4>
 4017084:	3446b03a 	or	r3,r6,r17
 4017088:	18001e26 	beq	r3,zero,4017104 <__muldf3+0x2d4>
 401708c:	88012126 	beq	r17,zero,4017514 <__muldf3+0x6e4>
 4017090:	8809883a 	mov	r4,r17
 4017094:	d9400215 	stw	r5,8(sp)
 4017098:	d9800715 	stw	r6,28(sp)
 401709c:	da400415 	stw	r9,16(sp)
 40170a0:	da800315 	stw	r10,12(sp)
 40170a4:	401819c0 	call	401819c <__clzsi2>
 40170a8:	d9400217 	ldw	r5,8(sp)
 40170ac:	d9800717 	ldw	r6,28(sp)
 40170b0:	da400417 	ldw	r9,16(sp)
 40170b4:	da800317 	ldw	r10,12(sp)
 40170b8:	113ffd44 	addi	r4,r2,-11
 40170bc:	00c00704 	movi	r3,28
 40170c0:	19011016 	blt	r3,r4,4017504 <__muldf3+0x6d4>
 40170c4:	00c00744 	movi	r3,29
 40170c8:	14bffe04 	addi	r18,r2,-8
 40170cc:	1907c83a 	sub	r3,r3,r4
 40170d0:	8ca2983a 	sll	r17,r17,r18
 40170d4:	30c6d83a 	srl	r3,r6,r3
 40170d8:	34a4983a 	sll	r18,r6,r18
 40170dc:	1c62b03a 	or	r17,r3,r17
 40170e0:	1080fcc4 	addi	r2,r2,1011
 40170e4:	0085c83a 	sub	r2,zero,r2
 40170e8:	000f883a 	mov	r7,zero
 40170ec:	003f8106 	br	4016ef4 <__alt_data_end+0xfc016ef4>
 40170f0:	3027883a 	mov	r19,r6
 40170f4:	0081ffc4 	movi	r2,2047
 40170f8:	0021883a 	mov	r16,zero
 40170fc:	002d883a 	mov	r22,zero
 4017100:	003faa06 	br	4016fac <__alt_data_end+0xfc016fac>
 4017104:	0023883a 	mov	r17,zero
 4017108:	0025883a 	mov	r18,zero
 401710c:	01c00044 	movi	r7,1
 4017110:	003f7806 	br	4016ef4 <__alt_data_end+0xfc016ef4>
 4017114:	01c000c4 	movi	r7,3
 4017118:	003f7606 	br	4016ef4 <__alt_data_end+0xfc016ef4>
 401711c:	05400104 	movi	r21,4
 4017120:	0021883a 	mov	r16,zero
 4017124:	002d883a 	mov	r22,zero
 4017128:	01400044 	movi	r5,1
 401712c:	003f5f06 	br	4016eac <__alt_data_end+0xfc016eac>
 4017130:	05400304 	movi	r21,12
 4017134:	014000c4 	movi	r5,3
 4017138:	003f5c06 	br	4016eac <__alt_data_end+0xfc016eac>
 401713c:	04000434 	movhi	r16,16
 4017140:	0027883a 	mov	r19,zero
 4017144:	843fffc4 	addi	r16,r16,-1
 4017148:	05bfffc4 	movi	r22,-1
 401714c:	0081ffc4 	movi	r2,2047
 4017150:	003f9606 	br	4016fac <__alt_data_end+0xfc016fac>
 4017154:	8023883a 	mov	r17,r16
 4017158:	b025883a 	mov	r18,r22
 401715c:	280f883a 	mov	r7,r5
 4017160:	003f8806 	br	4016f84 <__alt_data_end+0xfc016f84>
 4017164:	8023883a 	mov	r17,r16
 4017168:	b025883a 	mov	r18,r22
 401716c:	480d883a 	mov	r6,r9
 4017170:	280f883a 	mov	r7,r5
 4017174:	003f8306 	br	4016f84 <__alt_data_end+0xfc016f84>
 4017178:	b026d43a 	srli	r19,r22,16
 401717c:	902ed43a 	srli	r23,r18,16
 4017180:	b5bfffcc 	andi	r22,r22,65535
 4017184:	94bfffcc 	andi	r18,r18,65535
 4017188:	b00b883a 	mov	r5,r22
 401718c:	9009883a 	mov	r4,r18
 4017190:	d8c00515 	stw	r3,20(sp)
 4017194:	d9800715 	stw	r6,28(sp)
 4017198:	da000615 	stw	r8,24(sp)
 401719c:	400aa340 	call	400aa34 <__mulsi3>
 40171a0:	980b883a 	mov	r5,r19
 40171a4:	9009883a 	mov	r4,r18
 40171a8:	1029883a 	mov	r20,r2
 40171ac:	400aa340 	call	400aa34 <__mulsi3>
 40171b0:	b80b883a 	mov	r5,r23
 40171b4:	9809883a 	mov	r4,r19
 40171b8:	102b883a 	mov	r21,r2
 40171bc:	400aa340 	call	400aa34 <__mulsi3>
 40171c0:	b809883a 	mov	r4,r23
 40171c4:	b00b883a 	mov	r5,r22
 40171c8:	1039883a 	mov	fp,r2
 40171cc:	400aa340 	call	400aa34 <__mulsi3>
 40171d0:	a008d43a 	srli	r4,r20,16
 40171d4:	1545883a 	add	r2,r2,r21
 40171d8:	d8c00517 	ldw	r3,20(sp)
 40171dc:	2085883a 	add	r2,r4,r2
 40171e0:	d9800717 	ldw	r6,28(sp)
 40171e4:	da000617 	ldw	r8,24(sp)
 40171e8:	1540022e 	bgeu	r2,r21,40171f4 <__muldf3+0x3c4>
 40171ec:	01000074 	movhi	r4,1
 40171f0:	e139883a 	add	fp,fp,r4
 40171f4:	100e943a 	slli	r7,r2,16
 40171f8:	1004d43a 	srli	r2,r2,16
 40171fc:	882ad43a 	srli	r21,r17,16
 4017200:	a53fffcc 	andi	r20,r20,65535
 4017204:	8c7fffcc 	andi	r17,r17,65535
 4017208:	3d29883a 	add	r20,r7,r20
 401720c:	b00b883a 	mov	r5,r22
 4017210:	8809883a 	mov	r4,r17
 4017214:	d8c00515 	stw	r3,20(sp)
 4017218:	d9800715 	stw	r6,28(sp)
 401721c:	da000615 	stw	r8,24(sp)
 4017220:	dd000115 	stw	r20,4(sp)
 4017224:	d8800015 	stw	r2,0(sp)
 4017228:	400aa340 	call	400aa34 <__mulsi3>
 401722c:	980b883a 	mov	r5,r19
 4017230:	8809883a 	mov	r4,r17
 4017234:	d8800215 	stw	r2,8(sp)
 4017238:	400aa340 	call	400aa34 <__mulsi3>
 401723c:	9809883a 	mov	r4,r19
 4017240:	a80b883a 	mov	r5,r21
 4017244:	1029883a 	mov	r20,r2
 4017248:	400aa340 	call	400aa34 <__mulsi3>
 401724c:	b00b883a 	mov	r5,r22
 4017250:	a809883a 	mov	r4,r21
 4017254:	d8800415 	stw	r2,16(sp)
 4017258:	400aa340 	call	400aa34 <__mulsi3>
 401725c:	d9c00217 	ldw	r7,8(sp)
 4017260:	1505883a 	add	r2,r2,r20
 4017264:	d8c00517 	ldw	r3,20(sp)
 4017268:	3826d43a 	srli	r19,r7,16
 401726c:	d9800717 	ldw	r6,28(sp)
 4017270:	da000617 	ldw	r8,24(sp)
 4017274:	9885883a 	add	r2,r19,r2
 4017278:	da400417 	ldw	r9,16(sp)
 401727c:	1500022e 	bgeu	r2,r20,4017288 <__muldf3+0x458>
 4017280:	01000074 	movhi	r4,1
 4017284:	4913883a 	add	r9,r9,r4
 4017288:	1028d43a 	srli	r20,r2,16
 401728c:	1004943a 	slli	r2,r2,16
 4017290:	802cd43a 	srli	r22,r16,16
 4017294:	843fffcc 	andi	r16,r16,65535
 4017298:	3cffffcc 	andi	r19,r7,65535
 401729c:	9009883a 	mov	r4,r18
 40172a0:	800b883a 	mov	r5,r16
 40172a4:	a269883a 	add	r20,r20,r9
 40172a8:	d8c00515 	stw	r3,20(sp)
 40172ac:	d9800715 	stw	r6,28(sp)
 40172b0:	da000615 	stw	r8,24(sp)
 40172b4:	14e7883a 	add	r19,r2,r19
 40172b8:	400aa340 	call	400aa34 <__mulsi3>
 40172bc:	9009883a 	mov	r4,r18
 40172c0:	b00b883a 	mov	r5,r22
 40172c4:	d8800315 	stw	r2,12(sp)
 40172c8:	400aa340 	call	400aa34 <__mulsi3>
 40172cc:	b809883a 	mov	r4,r23
 40172d0:	b00b883a 	mov	r5,r22
 40172d4:	d8800215 	stw	r2,8(sp)
 40172d8:	400aa340 	call	400aa34 <__mulsi3>
 40172dc:	b80b883a 	mov	r5,r23
 40172e0:	8009883a 	mov	r4,r16
 40172e4:	d8800415 	stw	r2,16(sp)
 40172e8:	400aa340 	call	400aa34 <__mulsi3>
 40172ec:	da800317 	ldw	r10,12(sp)
 40172f0:	d9c00217 	ldw	r7,8(sp)
 40172f4:	d9000017 	ldw	r4,0(sp)
 40172f8:	502ed43a 	srli	r23,r10,16
 40172fc:	11c5883a 	add	r2,r2,r7
 4017300:	24e5883a 	add	r18,r4,r19
 4017304:	b885883a 	add	r2,r23,r2
 4017308:	d8c00517 	ldw	r3,20(sp)
 401730c:	d9800717 	ldw	r6,28(sp)
 4017310:	da000617 	ldw	r8,24(sp)
 4017314:	da400417 	ldw	r9,16(sp)
 4017318:	11c0022e 	bgeu	r2,r7,4017324 <__muldf3+0x4f4>
 401731c:	01000074 	movhi	r4,1
 4017320:	4913883a 	add	r9,r9,r4
 4017324:	100ed43a 	srli	r7,r2,16
 4017328:	1004943a 	slli	r2,r2,16
 401732c:	55ffffcc 	andi	r23,r10,65535
 4017330:	3a53883a 	add	r9,r7,r9
 4017334:	8809883a 	mov	r4,r17
 4017338:	800b883a 	mov	r5,r16
 401733c:	d8c00515 	stw	r3,20(sp)
 4017340:	d9800715 	stw	r6,28(sp)
 4017344:	da000615 	stw	r8,24(sp)
 4017348:	da400415 	stw	r9,16(sp)
 401734c:	15ef883a 	add	r23,r2,r23
 4017350:	400aa340 	call	400aa34 <__mulsi3>
 4017354:	8809883a 	mov	r4,r17
 4017358:	b00b883a 	mov	r5,r22
 401735c:	d8800215 	stw	r2,8(sp)
 4017360:	400aa340 	call	400aa34 <__mulsi3>
 4017364:	b00b883a 	mov	r5,r22
 4017368:	a809883a 	mov	r4,r21
 401736c:	d8800315 	stw	r2,12(sp)
 4017370:	400aa340 	call	400aa34 <__mulsi3>
 4017374:	8009883a 	mov	r4,r16
 4017378:	a80b883a 	mov	r5,r21
 401737c:	1023883a 	mov	r17,r2
 4017380:	400aa340 	call	400aa34 <__mulsi3>
 4017384:	d9c00217 	ldw	r7,8(sp)
 4017388:	da800317 	ldw	r10,12(sp)
 401738c:	d8c00517 	ldw	r3,20(sp)
 4017390:	3808d43a 	srli	r4,r7,16
 4017394:	1285883a 	add	r2,r2,r10
 4017398:	d9800717 	ldw	r6,28(sp)
 401739c:	2085883a 	add	r2,r4,r2
 40173a0:	da000617 	ldw	r8,24(sp)
 40173a4:	da400417 	ldw	r9,16(sp)
 40173a8:	1280022e 	bgeu	r2,r10,40173b4 <__muldf3+0x584>
 40173ac:	01000074 	movhi	r4,1
 40173b0:	8923883a 	add	r17,r17,r4
 40173b4:	1008943a 	slli	r4,r2,16
 40173b8:	39ffffcc 	andi	r7,r7,65535
 40173bc:	e4b9883a 	add	fp,fp,r18
 40173c0:	21cf883a 	add	r7,r4,r7
 40173c4:	e4e7803a 	cmpltu	r19,fp,r19
 40173c8:	3d0f883a 	add	r7,r7,r20
 40173cc:	bf39883a 	add	fp,r23,fp
 40173d0:	99c9883a 	add	r4,r19,r7
 40173d4:	e5ef803a 	cmpltu	r23,fp,r23
 40173d8:	490b883a 	add	r5,r9,r4
 40173dc:	1004d43a 	srli	r2,r2,16
 40173e0:	b965883a 	add	r18,r23,r5
 40173e4:	24c9803a 	cmpltu	r4,r4,r19
 40173e8:	3d29803a 	cmpltu	r20,r7,r20
 40173ec:	a128b03a 	or	r20,r20,r4
 40173f0:	95ef803a 	cmpltu	r23,r18,r23
 40173f4:	2a53803a 	cmpltu	r9,r5,r9
 40173f8:	a0a9883a 	add	r20,r20,r2
 40173fc:	4deeb03a 	or	r23,r9,r23
 4017400:	a5ef883a 	add	r23,r20,r23
 4017404:	bc63883a 	add	r17,r23,r17
 4017408:	e004927a 	slli	r2,fp,9
 401740c:	d9000117 	ldw	r4,4(sp)
 4017410:	882e927a 	slli	r23,r17,9
 4017414:	9022d5fa 	srli	r17,r18,23
 4017418:	e038d5fa 	srli	fp,fp,23
 401741c:	1104b03a 	or	r2,r2,r4
 4017420:	9024927a 	slli	r18,r18,9
 4017424:	1004c03a 	cmpne	r2,r2,zero
 4017428:	bc62b03a 	or	r17,r23,r17
 401742c:	1738b03a 	or	fp,r2,fp
 4017430:	8880402c 	andhi	r2,r17,256
 4017434:	e4a4b03a 	or	r18,fp,r18
 4017438:	10000726 	beq	r2,zero,4017458 <__muldf3+0x628>
 401743c:	9006d07a 	srli	r3,r18,1
 4017440:	880497fa 	slli	r2,r17,31
 4017444:	9480004c 	andi	r18,r18,1
 4017448:	8822d07a 	srli	r17,r17,1
 401744c:	1ca4b03a 	or	r18,r3,r18
 4017450:	14a4b03a 	or	r18,r2,r18
 4017454:	4007883a 	mov	r3,r8
 4017458:	1880ffc4 	addi	r2,r3,1023
 401745c:	0080460e 	bge	zero,r2,4017578 <__muldf3+0x748>
 4017460:	910001cc 	andi	r4,r18,7
 4017464:	20000726 	beq	r4,zero,4017484 <__muldf3+0x654>
 4017468:	910003cc 	andi	r4,r18,15
 401746c:	01400104 	movi	r5,4
 4017470:	21400426 	beq	r4,r5,4017484 <__muldf3+0x654>
 4017474:	9149883a 	add	r4,r18,r5
 4017478:	24a5803a 	cmpltu	r18,r4,r18
 401747c:	8ca3883a 	add	r17,r17,r18
 4017480:	2025883a 	mov	r18,r4
 4017484:	8900402c 	andhi	r4,r17,256
 4017488:	20000426 	beq	r4,zero,401749c <__muldf3+0x66c>
 401748c:	18810004 	addi	r2,r3,1024
 4017490:	00ffc034 	movhi	r3,65280
 4017494:	18ffffc4 	addi	r3,r3,-1
 4017498:	88e2703a 	and	r17,r17,r3
 401749c:	00c1ff84 	movi	r3,2046
 40174a0:	18bf1316 	blt	r3,r2,40170f0 <__alt_data_end+0xfc0170f0>
 40174a4:	882c977a 	slli	r22,r17,29
 40174a8:	9024d0fa 	srli	r18,r18,3
 40174ac:	8822927a 	slli	r17,r17,9
 40174b0:	1081ffcc 	andi	r2,r2,2047
 40174b4:	b4acb03a 	or	r22,r22,r18
 40174b8:	8820d33a 	srli	r16,r17,12
 40174bc:	3027883a 	mov	r19,r6
 40174c0:	003eba06 	br	4016fac <__alt_data_end+0xfc016fac>
 40174c4:	8080022c 	andhi	r2,r16,8
 40174c8:	10000926 	beq	r2,zero,40174f0 <__muldf3+0x6c0>
 40174cc:	8880022c 	andhi	r2,r17,8
 40174d0:	1000071e 	bne	r2,zero,40174f0 <__muldf3+0x6c0>
 40174d4:	00800434 	movhi	r2,16
 40174d8:	8c000234 	orhi	r16,r17,8
 40174dc:	10bfffc4 	addi	r2,r2,-1
 40174e0:	e027883a 	mov	r19,fp
 40174e4:	80a0703a 	and	r16,r16,r2
 40174e8:	902d883a 	mov	r22,r18
 40174ec:	003f1706 	br	401714c <__alt_data_end+0xfc01714c>
 40174f0:	00800434 	movhi	r2,16
 40174f4:	84000234 	orhi	r16,r16,8
 40174f8:	10bfffc4 	addi	r2,r2,-1
 40174fc:	80a0703a 	and	r16,r16,r2
 4017500:	003f1206 	br	401714c <__alt_data_end+0xfc01714c>
 4017504:	147ff604 	addi	r17,r2,-40
 4017508:	3462983a 	sll	r17,r6,r17
 401750c:	0025883a 	mov	r18,zero
 4017510:	003ef306 	br	40170e0 <__alt_data_end+0xfc0170e0>
 4017514:	3009883a 	mov	r4,r6
 4017518:	d9400215 	stw	r5,8(sp)
 401751c:	d9800715 	stw	r6,28(sp)
 4017520:	da400415 	stw	r9,16(sp)
 4017524:	da800315 	stw	r10,12(sp)
 4017528:	401819c0 	call	401819c <__clzsi2>
 401752c:	10800804 	addi	r2,r2,32
 4017530:	da800317 	ldw	r10,12(sp)
 4017534:	da400417 	ldw	r9,16(sp)
 4017538:	d9800717 	ldw	r6,28(sp)
 401753c:	d9400217 	ldw	r5,8(sp)
 4017540:	003edd06 	br	40170b8 <__alt_data_end+0xfc0170b8>
 4017544:	143ff604 	addi	r16,r2,-40
 4017548:	ac20983a 	sll	r16,r21,r16
 401754c:	002d883a 	mov	r22,zero
 4017550:	003ec106 	br	4017058 <__alt_data_end+0xfc017058>
 4017554:	d9800715 	stw	r6,28(sp)
 4017558:	d9c00215 	stw	r7,8(sp)
 401755c:	da400415 	stw	r9,16(sp)
 4017560:	401819c0 	call	401819c <__clzsi2>
 4017564:	10800804 	addi	r2,r2,32
 4017568:	da400417 	ldw	r9,16(sp)
 401756c:	d9c00217 	ldw	r7,8(sp)
 4017570:	d9800717 	ldw	r6,28(sp)
 4017574:	003eae06 	br	4017030 <__alt_data_end+0xfc017030>
 4017578:	00c00044 	movi	r3,1
 401757c:	1887c83a 	sub	r3,r3,r2
 4017580:	01000e04 	movi	r4,56
 4017584:	20fe8516 	blt	r4,r3,4016f9c <__alt_data_end+0xfc016f9c>
 4017588:	010007c4 	movi	r4,31
 401758c:	20c01b16 	blt	r4,r3,40175fc <__muldf3+0x7cc>
 4017590:	00800804 	movi	r2,32
 4017594:	10c5c83a 	sub	r2,r2,r3
 4017598:	888a983a 	sll	r5,r17,r2
 401759c:	90c8d83a 	srl	r4,r18,r3
 40175a0:	9084983a 	sll	r2,r18,r2
 40175a4:	88e2d83a 	srl	r17,r17,r3
 40175a8:	2906b03a 	or	r3,r5,r4
 40175ac:	1004c03a 	cmpne	r2,r2,zero
 40175b0:	1886b03a 	or	r3,r3,r2
 40175b4:	188001cc 	andi	r2,r3,7
 40175b8:	10000726 	beq	r2,zero,40175d8 <__muldf3+0x7a8>
 40175bc:	188003cc 	andi	r2,r3,15
 40175c0:	01000104 	movi	r4,4
 40175c4:	11000426 	beq	r2,r4,40175d8 <__muldf3+0x7a8>
 40175c8:	1805883a 	mov	r2,r3
 40175cc:	10c00104 	addi	r3,r2,4
 40175d0:	1885803a 	cmpltu	r2,r3,r2
 40175d4:	88a3883a 	add	r17,r17,r2
 40175d8:	8880202c 	andhi	r2,r17,128
 40175dc:	10001c26 	beq	r2,zero,4017650 <__muldf3+0x820>
 40175e0:	3027883a 	mov	r19,r6
 40175e4:	00800044 	movi	r2,1
 40175e8:	0021883a 	mov	r16,zero
 40175ec:	002d883a 	mov	r22,zero
 40175f0:	003e6e06 	br	4016fac <__alt_data_end+0xfc016fac>
 40175f4:	4007883a 	mov	r3,r8
 40175f8:	003f9706 	br	4017458 <__alt_data_end+0xfc017458>
 40175fc:	017ff844 	movi	r5,-31
 4017600:	2885c83a 	sub	r2,r5,r2
 4017604:	888ad83a 	srl	r5,r17,r2
 4017608:	00800804 	movi	r2,32
 401760c:	18801a26 	beq	r3,r2,4017678 <__muldf3+0x848>
 4017610:	01001004 	movi	r4,64
 4017614:	20c7c83a 	sub	r3,r4,r3
 4017618:	88e2983a 	sll	r17,r17,r3
 401761c:	8ca4b03a 	or	r18,r17,r18
 4017620:	9004c03a 	cmpne	r2,r18,zero
 4017624:	2884b03a 	or	r2,r5,r2
 4017628:	144001cc 	andi	r17,r2,7
 401762c:	88000d1e 	bne	r17,zero,4017664 <__muldf3+0x834>
 4017630:	0021883a 	mov	r16,zero
 4017634:	102cd0fa 	srli	r22,r2,3
 4017638:	3027883a 	mov	r19,r6
 401763c:	0005883a 	mov	r2,zero
 4017640:	b46cb03a 	or	r22,r22,r17
 4017644:	003e5906 	br	4016fac <__alt_data_end+0xfc016fac>
 4017648:	1007883a 	mov	r3,r2
 401764c:	0023883a 	mov	r17,zero
 4017650:	8820927a 	slli	r16,r17,9
 4017654:	1805883a 	mov	r2,r3
 4017658:	8822977a 	slli	r17,r17,29
 401765c:	8020d33a 	srli	r16,r16,12
 4017660:	003ff406 	br	4017634 <__alt_data_end+0xfc017634>
 4017664:	10c003cc 	andi	r3,r2,15
 4017668:	01000104 	movi	r4,4
 401766c:	193ff626 	beq	r3,r4,4017648 <__alt_data_end+0xfc017648>
 4017670:	0023883a 	mov	r17,zero
 4017674:	003fd506 	br	40175cc <__alt_data_end+0xfc0175cc>
 4017678:	0023883a 	mov	r17,zero
 401767c:	003fe706 	br	401761c <__alt_data_end+0xfc01761c>
 4017680:	00800434 	movhi	r2,16
 4017684:	8c000234 	orhi	r16,r17,8
 4017688:	10bfffc4 	addi	r2,r2,-1
 401768c:	3027883a 	mov	r19,r6
 4017690:	80a0703a 	and	r16,r16,r2
 4017694:	902d883a 	mov	r22,r18
 4017698:	003eac06 	br	401714c <__alt_data_end+0xfc01714c>

0401769c <__subdf3>:
 401769c:	02000434 	movhi	r8,16
 40176a0:	423fffc4 	addi	r8,r8,-1
 40176a4:	defffb04 	addi	sp,sp,-20
 40176a8:	2a14703a 	and	r10,r5,r8
 40176ac:	3812d53a 	srli	r9,r7,20
 40176b0:	3a10703a 	and	r8,r7,r8
 40176b4:	2006d77a 	srli	r3,r4,29
 40176b8:	3004d77a 	srli	r2,r6,29
 40176bc:	dc000015 	stw	r16,0(sp)
 40176c0:	501490fa 	slli	r10,r10,3
 40176c4:	2820d53a 	srli	r16,r5,20
 40176c8:	401090fa 	slli	r8,r8,3
 40176cc:	dc800215 	stw	r18,8(sp)
 40176d0:	dc400115 	stw	r17,4(sp)
 40176d4:	dfc00415 	stw	ra,16(sp)
 40176d8:	202290fa 	slli	r17,r4,3
 40176dc:	dcc00315 	stw	r19,12(sp)
 40176e0:	4a41ffcc 	andi	r9,r9,2047
 40176e4:	0101ffc4 	movi	r4,2047
 40176e8:	2824d7fa 	srli	r18,r5,31
 40176ec:	8401ffcc 	andi	r16,r16,2047
 40176f0:	50c6b03a 	or	r3,r10,r3
 40176f4:	380ed7fa 	srli	r7,r7,31
 40176f8:	408ab03a 	or	r5,r8,r2
 40176fc:	300c90fa 	slli	r6,r6,3
 4017700:	49009626 	beq	r9,r4,401795c <__subdf3+0x2c0>
 4017704:	39c0005c 	xori	r7,r7,1
 4017708:	8245c83a 	sub	r2,r16,r9
 401770c:	3c807426 	beq	r7,r18,40178e0 <__subdf3+0x244>
 4017710:	0080af0e 	bge	zero,r2,40179d0 <__subdf3+0x334>
 4017714:	48002a1e 	bne	r9,zero,40177c0 <__subdf3+0x124>
 4017718:	2988b03a 	or	r4,r5,r6
 401771c:	20009a1e 	bne	r4,zero,4017988 <__subdf3+0x2ec>
 4017720:	888001cc 	andi	r2,r17,7
 4017724:	10000726 	beq	r2,zero,4017744 <__subdf3+0xa8>
 4017728:	888003cc 	andi	r2,r17,15
 401772c:	01000104 	movi	r4,4
 4017730:	11000426 	beq	r2,r4,4017744 <__subdf3+0xa8>
 4017734:	890b883a 	add	r5,r17,r4
 4017738:	2c63803a 	cmpltu	r17,r5,r17
 401773c:	1c47883a 	add	r3,r3,r17
 4017740:	2823883a 	mov	r17,r5
 4017744:	1880202c 	andhi	r2,r3,128
 4017748:	10005926 	beq	r2,zero,40178b0 <__subdf3+0x214>
 401774c:	84000044 	addi	r16,r16,1
 4017750:	0081ffc4 	movi	r2,2047
 4017754:	8080be26 	beq	r16,r2,4017a50 <__subdf3+0x3b4>
 4017758:	017fe034 	movhi	r5,65408
 401775c:	297fffc4 	addi	r5,r5,-1
 4017760:	1946703a 	and	r3,r3,r5
 4017764:	1804977a 	slli	r2,r3,29
 4017768:	1806927a 	slli	r3,r3,9
 401776c:	8822d0fa 	srli	r17,r17,3
 4017770:	8401ffcc 	andi	r16,r16,2047
 4017774:	180ad33a 	srli	r5,r3,12
 4017778:	9100004c 	andi	r4,r18,1
 401777c:	1444b03a 	or	r2,r2,r17
 4017780:	80c1ffcc 	andi	r3,r16,2047
 4017784:	1820953a 	slli	r16,r3,20
 4017788:	20c03fcc 	andi	r3,r4,255
 401778c:	180897fa 	slli	r4,r3,31
 4017790:	00c00434 	movhi	r3,16
 4017794:	18ffffc4 	addi	r3,r3,-1
 4017798:	28c6703a 	and	r3,r5,r3
 401779c:	1c06b03a 	or	r3,r3,r16
 40177a0:	1906b03a 	or	r3,r3,r4
 40177a4:	dfc00417 	ldw	ra,16(sp)
 40177a8:	dcc00317 	ldw	r19,12(sp)
 40177ac:	dc800217 	ldw	r18,8(sp)
 40177b0:	dc400117 	ldw	r17,4(sp)
 40177b4:	dc000017 	ldw	r16,0(sp)
 40177b8:	dec00504 	addi	sp,sp,20
 40177bc:	f800283a 	ret
 40177c0:	0101ffc4 	movi	r4,2047
 40177c4:	813fd626 	beq	r16,r4,4017720 <__alt_data_end+0xfc017720>
 40177c8:	29402034 	orhi	r5,r5,128
 40177cc:	01000e04 	movi	r4,56
 40177d0:	2080a316 	blt	r4,r2,4017a60 <__subdf3+0x3c4>
 40177d4:	010007c4 	movi	r4,31
 40177d8:	2080c616 	blt	r4,r2,4017af4 <__subdf3+0x458>
 40177dc:	01000804 	movi	r4,32
 40177e0:	2089c83a 	sub	r4,r4,r2
 40177e4:	2910983a 	sll	r8,r5,r4
 40177e8:	308ed83a 	srl	r7,r6,r2
 40177ec:	3108983a 	sll	r4,r6,r4
 40177f0:	2884d83a 	srl	r2,r5,r2
 40177f4:	41ccb03a 	or	r6,r8,r7
 40177f8:	2008c03a 	cmpne	r4,r4,zero
 40177fc:	310cb03a 	or	r6,r6,r4
 4017800:	898dc83a 	sub	r6,r17,r6
 4017804:	89a3803a 	cmpltu	r17,r17,r6
 4017808:	1887c83a 	sub	r3,r3,r2
 401780c:	1c47c83a 	sub	r3,r3,r17
 4017810:	3023883a 	mov	r17,r6
 4017814:	1880202c 	andhi	r2,r3,128
 4017818:	10002326 	beq	r2,zero,40178a8 <__subdf3+0x20c>
 401781c:	04c02034 	movhi	r19,128
 4017820:	9cffffc4 	addi	r19,r19,-1
 4017824:	1ce6703a 	and	r19,r3,r19
 4017828:	98007a26 	beq	r19,zero,4017a14 <__subdf3+0x378>
 401782c:	9809883a 	mov	r4,r19
 4017830:	401819c0 	call	401819c <__clzsi2>
 4017834:	113ffe04 	addi	r4,r2,-8
 4017838:	00c007c4 	movi	r3,31
 401783c:	19007b16 	blt	r3,r4,4017a2c <__subdf3+0x390>
 4017840:	00800804 	movi	r2,32
 4017844:	1105c83a 	sub	r2,r2,r4
 4017848:	8884d83a 	srl	r2,r17,r2
 401784c:	9906983a 	sll	r3,r19,r4
 4017850:	8922983a 	sll	r17,r17,r4
 4017854:	10c4b03a 	or	r2,r2,r3
 4017858:	24007816 	blt	r4,r16,4017a3c <__subdf3+0x3a0>
 401785c:	2421c83a 	sub	r16,r4,r16
 4017860:	80c00044 	addi	r3,r16,1
 4017864:	010007c4 	movi	r4,31
 4017868:	20c09516 	blt	r4,r3,4017ac0 <__subdf3+0x424>
 401786c:	01400804 	movi	r5,32
 4017870:	28cbc83a 	sub	r5,r5,r3
 4017874:	88c8d83a 	srl	r4,r17,r3
 4017878:	8962983a 	sll	r17,r17,r5
 401787c:	114a983a 	sll	r5,r2,r5
 4017880:	10c6d83a 	srl	r3,r2,r3
 4017884:	8804c03a 	cmpne	r2,r17,zero
 4017888:	290ab03a 	or	r5,r5,r4
 401788c:	28a2b03a 	or	r17,r5,r2
 4017890:	0021883a 	mov	r16,zero
 4017894:	003fa206 	br	4017720 <__alt_data_end+0xfc017720>
 4017898:	2090b03a 	or	r8,r4,r2
 401789c:	40018e26 	beq	r8,zero,4017ed8 <__subdf3+0x83c>
 40178a0:	1007883a 	mov	r3,r2
 40178a4:	2023883a 	mov	r17,r4
 40178a8:	888001cc 	andi	r2,r17,7
 40178ac:	103f9e1e 	bne	r2,zero,4017728 <__alt_data_end+0xfc017728>
 40178b0:	1804977a 	slli	r2,r3,29
 40178b4:	8822d0fa 	srli	r17,r17,3
 40178b8:	1810d0fa 	srli	r8,r3,3
 40178bc:	9100004c 	andi	r4,r18,1
 40178c0:	1444b03a 	or	r2,r2,r17
 40178c4:	00c1ffc4 	movi	r3,2047
 40178c8:	80c02826 	beq	r16,r3,401796c <__subdf3+0x2d0>
 40178cc:	01400434 	movhi	r5,16
 40178d0:	297fffc4 	addi	r5,r5,-1
 40178d4:	80e0703a 	and	r16,r16,r3
 40178d8:	414a703a 	and	r5,r8,r5
 40178dc:	003fa806 	br	4017780 <__alt_data_end+0xfc017780>
 40178e0:	0080630e 	bge	zero,r2,4017a70 <__subdf3+0x3d4>
 40178e4:	48003026 	beq	r9,zero,40179a8 <__subdf3+0x30c>
 40178e8:	0101ffc4 	movi	r4,2047
 40178ec:	813f8c26 	beq	r16,r4,4017720 <__alt_data_end+0xfc017720>
 40178f0:	29402034 	orhi	r5,r5,128
 40178f4:	01000e04 	movi	r4,56
 40178f8:	2080a90e 	bge	r4,r2,4017ba0 <__subdf3+0x504>
 40178fc:	298cb03a 	or	r6,r5,r6
 4017900:	3012c03a 	cmpne	r9,r6,zero
 4017904:	0005883a 	mov	r2,zero
 4017908:	4c53883a 	add	r9,r9,r17
 401790c:	4c63803a 	cmpltu	r17,r9,r17
 4017910:	10c7883a 	add	r3,r2,r3
 4017914:	88c7883a 	add	r3,r17,r3
 4017918:	4823883a 	mov	r17,r9
 401791c:	1880202c 	andhi	r2,r3,128
 4017920:	1000d026 	beq	r2,zero,4017c64 <__subdf3+0x5c8>
 4017924:	84000044 	addi	r16,r16,1
 4017928:	0081ffc4 	movi	r2,2047
 401792c:	8080fe26 	beq	r16,r2,4017d28 <__subdf3+0x68c>
 4017930:	00bfe034 	movhi	r2,65408
 4017934:	10bfffc4 	addi	r2,r2,-1
 4017938:	1886703a 	and	r3,r3,r2
 401793c:	880ad07a 	srli	r5,r17,1
 4017940:	180497fa 	slli	r2,r3,31
 4017944:	8900004c 	andi	r4,r17,1
 4017948:	2922b03a 	or	r17,r5,r4
 401794c:	1806d07a 	srli	r3,r3,1
 4017950:	1462b03a 	or	r17,r2,r17
 4017954:	3825883a 	mov	r18,r7
 4017958:	003f7106 	br	4017720 <__alt_data_end+0xfc017720>
 401795c:	2984b03a 	or	r2,r5,r6
 4017960:	103f6826 	beq	r2,zero,4017704 <__alt_data_end+0xfc017704>
 4017964:	39c03fcc 	andi	r7,r7,255
 4017968:	003f6706 	br	4017708 <__alt_data_end+0xfc017708>
 401796c:	4086b03a 	or	r3,r8,r2
 4017970:	18015226 	beq	r3,zero,4017ebc <__subdf3+0x820>
 4017974:	00c00434 	movhi	r3,16
 4017978:	41400234 	orhi	r5,r8,8
 401797c:	18ffffc4 	addi	r3,r3,-1
 4017980:	28ca703a 	and	r5,r5,r3
 4017984:	003f7e06 	br	4017780 <__alt_data_end+0xfc017780>
 4017988:	10bfffc4 	addi	r2,r2,-1
 401798c:	1000491e 	bne	r2,zero,4017ab4 <__subdf3+0x418>
 4017990:	898fc83a 	sub	r7,r17,r6
 4017994:	89e3803a 	cmpltu	r17,r17,r7
 4017998:	1947c83a 	sub	r3,r3,r5
 401799c:	1c47c83a 	sub	r3,r3,r17
 40179a0:	3823883a 	mov	r17,r7
 40179a4:	003f9b06 	br	4017814 <__alt_data_end+0xfc017814>
 40179a8:	2988b03a 	or	r4,r5,r6
 40179ac:	203f5c26 	beq	r4,zero,4017720 <__alt_data_end+0xfc017720>
 40179b0:	10bfffc4 	addi	r2,r2,-1
 40179b4:	1000931e 	bne	r2,zero,4017c04 <__subdf3+0x568>
 40179b8:	898d883a 	add	r6,r17,r6
 40179bc:	3463803a 	cmpltu	r17,r6,r17
 40179c0:	1947883a 	add	r3,r3,r5
 40179c4:	88c7883a 	add	r3,r17,r3
 40179c8:	3023883a 	mov	r17,r6
 40179cc:	003fd306 	br	401791c <__alt_data_end+0xfc01791c>
 40179d0:	1000541e 	bne	r2,zero,4017b24 <__subdf3+0x488>
 40179d4:	80800044 	addi	r2,r16,1
 40179d8:	1081ffcc 	andi	r2,r2,2047
 40179dc:	01000044 	movi	r4,1
 40179e0:	2080a20e 	bge	r4,r2,4017c6c <__subdf3+0x5d0>
 40179e4:	8989c83a 	sub	r4,r17,r6
 40179e8:	8905803a 	cmpltu	r2,r17,r4
 40179ec:	1967c83a 	sub	r19,r3,r5
 40179f0:	98a7c83a 	sub	r19,r19,r2
 40179f4:	9880202c 	andhi	r2,r19,128
 40179f8:	10006326 	beq	r2,zero,4017b88 <__subdf3+0x4ec>
 40179fc:	3463c83a 	sub	r17,r6,r17
 4017a00:	28c7c83a 	sub	r3,r5,r3
 4017a04:	344d803a 	cmpltu	r6,r6,r17
 4017a08:	19a7c83a 	sub	r19,r3,r6
 4017a0c:	3825883a 	mov	r18,r7
 4017a10:	983f861e 	bne	r19,zero,401782c <__alt_data_end+0xfc01782c>
 4017a14:	8809883a 	mov	r4,r17
 4017a18:	401819c0 	call	401819c <__clzsi2>
 4017a1c:	10800804 	addi	r2,r2,32
 4017a20:	113ffe04 	addi	r4,r2,-8
 4017a24:	00c007c4 	movi	r3,31
 4017a28:	193f850e 	bge	r3,r4,4017840 <__alt_data_end+0xfc017840>
 4017a2c:	10bff604 	addi	r2,r2,-40
 4017a30:	8884983a 	sll	r2,r17,r2
 4017a34:	0023883a 	mov	r17,zero
 4017a38:	243f880e 	bge	r4,r16,401785c <__alt_data_end+0xfc01785c>
 4017a3c:	00ffe034 	movhi	r3,65408
 4017a40:	18ffffc4 	addi	r3,r3,-1
 4017a44:	8121c83a 	sub	r16,r16,r4
 4017a48:	10c6703a 	and	r3,r2,r3
 4017a4c:	003f3406 	br	4017720 <__alt_data_end+0xfc017720>
 4017a50:	9100004c 	andi	r4,r18,1
 4017a54:	000b883a 	mov	r5,zero
 4017a58:	0005883a 	mov	r2,zero
 4017a5c:	003f4806 	br	4017780 <__alt_data_end+0xfc017780>
 4017a60:	298cb03a 	or	r6,r5,r6
 4017a64:	300cc03a 	cmpne	r6,r6,zero
 4017a68:	0005883a 	mov	r2,zero
 4017a6c:	003f6406 	br	4017800 <__alt_data_end+0xfc017800>
 4017a70:	10009a1e 	bne	r2,zero,4017cdc <__subdf3+0x640>
 4017a74:	82400044 	addi	r9,r16,1
 4017a78:	4881ffcc 	andi	r2,r9,2047
 4017a7c:	02800044 	movi	r10,1
 4017a80:	5080670e 	bge	r10,r2,4017c20 <__subdf3+0x584>
 4017a84:	0081ffc4 	movi	r2,2047
 4017a88:	4880af26 	beq	r9,r2,4017d48 <__subdf3+0x6ac>
 4017a8c:	898d883a 	add	r6,r17,r6
 4017a90:	1945883a 	add	r2,r3,r5
 4017a94:	3447803a 	cmpltu	r3,r6,r17
 4017a98:	1887883a 	add	r3,r3,r2
 4017a9c:	182297fa 	slli	r17,r3,31
 4017aa0:	300cd07a 	srli	r6,r6,1
 4017aa4:	1806d07a 	srli	r3,r3,1
 4017aa8:	4821883a 	mov	r16,r9
 4017aac:	89a2b03a 	or	r17,r17,r6
 4017ab0:	003f1b06 	br	4017720 <__alt_data_end+0xfc017720>
 4017ab4:	0101ffc4 	movi	r4,2047
 4017ab8:	813f441e 	bne	r16,r4,40177cc <__alt_data_end+0xfc0177cc>
 4017abc:	003f1806 	br	4017720 <__alt_data_end+0xfc017720>
 4017ac0:	843ff844 	addi	r16,r16,-31
 4017ac4:	01400804 	movi	r5,32
 4017ac8:	1408d83a 	srl	r4,r2,r16
 4017acc:	19405026 	beq	r3,r5,4017c10 <__subdf3+0x574>
 4017ad0:	01401004 	movi	r5,64
 4017ad4:	28c7c83a 	sub	r3,r5,r3
 4017ad8:	10c4983a 	sll	r2,r2,r3
 4017adc:	88a2b03a 	or	r17,r17,r2
 4017ae0:	8822c03a 	cmpne	r17,r17,zero
 4017ae4:	2462b03a 	or	r17,r4,r17
 4017ae8:	0007883a 	mov	r3,zero
 4017aec:	0021883a 	mov	r16,zero
 4017af0:	003f6d06 	br	40178a8 <__alt_data_end+0xfc0178a8>
 4017af4:	11fff804 	addi	r7,r2,-32
 4017af8:	01000804 	movi	r4,32
 4017afc:	29ced83a 	srl	r7,r5,r7
 4017b00:	11004526 	beq	r2,r4,4017c18 <__subdf3+0x57c>
 4017b04:	01001004 	movi	r4,64
 4017b08:	2089c83a 	sub	r4,r4,r2
 4017b0c:	2904983a 	sll	r2,r5,r4
 4017b10:	118cb03a 	or	r6,r2,r6
 4017b14:	300cc03a 	cmpne	r6,r6,zero
 4017b18:	398cb03a 	or	r6,r7,r6
 4017b1c:	0005883a 	mov	r2,zero
 4017b20:	003f3706 	br	4017800 <__alt_data_end+0xfc017800>
 4017b24:	80002a26 	beq	r16,zero,4017bd0 <__subdf3+0x534>
 4017b28:	0101ffc4 	movi	r4,2047
 4017b2c:	49006626 	beq	r9,r4,4017cc8 <__subdf3+0x62c>
 4017b30:	0085c83a 	sub	r2,zero,r2
 4017b34:	18c02034 	orhi	r3,r3,128
 4017b38:	01000e04 	movi	r4,56
 4017b3c:	20807e16 	blt	r4,r2,4017d38 <__subdf3+0x69c>
 4017b40:	010007c4 	movi	r4,31
 4017b44:	2080e716 	blt	r4,r2,4017ee4 <__subdf3+0x848>
 4017b48:	01000804 	movi	r4,32
 4017b4c:	2089c83a 	sub	r4,r4,r2
 4017b50:	1914983a 	sll	r10,r3,r4
 4017b54:	8890d83a 	srl	r8,r17,r2
 4017b58:	8908983a 	sll	r4,r17,r4
 4017b5c:	1884d83a 	srl	r2,r3,r2
 4017b60:	5222b03a 	or	r17,r10,r8
 4017b64:	2006c03a 	cmpne	r3,r4,zero
 4017b68:	88e2b03a 	or	r17,r17,r3
 4017b6c:	3463c83a 	sub	r17,r6,r17
 4017b70:	2885c83a 	sub	r2,r5,r2
 4017b74:	344d803a 	cmpltu	r6,r6,r17
 4017b78:	1187c83a 	sub	r3,r2,r6
 4017b7c:	4821883a 	mov	r16,r9
 4017b80:	3825883a 	mov	r18,r7
 4017b84:	003f2306 	br	4017814 <__alt_data_end+0xfc017814>
 4017b88:	24d0b03a 	or	r8,r4,r19
 4017b8c:	40001b1e 	bne	r8,zero,4017bfc <__subdf3+0x560>
 4017b90:	0005883a 	mov	r2,zero
 4017b94:	0009883a 	mov	r4,zero
 4017b98:	0021883a 	mov	r16,zero
 4017b9c:	003f4906 	br	40178c4 <__alt_data_end+0xfc0178c4>
 4017ba0:	010007c4 	movi	r4,31
 4017ba4:	20803a16 	blt	r4,r2,4017c90 <__subdf3+0x5f4>
 4017ba8:	01000804 	movi	r4,32
 4017bac:	2089c83a 	sub	r4,r4,r2
 4017bb0:	2912983a 	sll	r9,r5,r4
 4017bb4:	3090d83a 	srl	r8,r6,r2
 4017bb8:	3108983a 	sll	r4,r6,r4
 4017bbc:	2884d83a 	srl	r2,r5,r2
 4017bc0:	4a12b03a 	or	r9,r9,r8
 4017bc4:	2008c03a 	cmpne	r4,r4,zero
 4017bc8:	4912b03a 	or	r9,r9,r4
 4017bcc:	003f4e06 	br	4017908 <__alt_data_end+0xfc017908>
 4017bd0:	1c48b03a 	or	r4,r3,r17
 4017bd4:	20003c26 	beq	r4,zero,4017cc8 <__subdf3+0x62c>
 4017bd8:	0084303a 	nor	r2,zero,r2
 4017bdc:	1000381e 	bne	r2,zero,4017cc0 <__subdf3+0x624>
 4017be0:	3463c83a 	sub	r17,r6,r17
 4017be4:	28c5c83a 	sub	r2,r5,r3
 4017be8:	344d803a 	cmpltu	r6,r6,r17
 4017bec:	1187c83a 	sub	r3,r2,r6
 4017bf0:	4821883a 	mov	r16,r9
 4017bf4:	3825883a 	mov	r18,r7
 4017bf8:	003f0606 	br	4017814 <__alt_data_end+0xfc017814>
 4017bfc:	2023883a 	mov	r17,r4
 4017c00:	003f0906 	br	4017828 <__alt_data_end+0xfc017828>
 4017c04:	0101ffc4 	movi	r4,2047
 4017c08:	813f3a1e 	bne	r16,r4,40178f4 <__alt_data_end+0xfc0178f4>
 4017c0c:	003ec406 	br	4017720 <__alt_data_end+0xfc017720>
 4017c10:	0005883a 	mov	r2,zero
 4017c14:	003fb106 	br	4017adc <__alt_data_end+0xfc017adc>
 4017c18:	0005883a 	mov	r2,zero
 4017c1c:	003fbc06 	br	4017b10 <__alt_data_end+0xfc017b10>
 4017c20:	1c44b03a 	or	r2,r3,r17
 4017c24:	80008e1e 	bne	r16,zero,4017e60 <__subdf3+0x7c4>
 4017c28:	1000c826 	beq	r2,zero,4017f4c <__subdf3+0x8b0>
 4017c2c:	2984b03a 	or	r2,r5,r6
 4017c30:	103ebb26 	beq	r2,zero,4017720 <__alt_data_end+0xfc017720>
 4017c34:	8989883a 	add	r4,r17,r6
 4017c38:	1945883a 	add	r2,r3,r5
 4017c3c:	2447803a 	cmpltu	r3,r4,r17
 4017c40:	1887883a 	add	r3,r3,r2
 4017c44:	1880202c 	andhi	r2,r3,128
 4017c48:	2023883a 	mov	r17,r4
 4017c4c:	103f1626 	beq	r2,zero,40178a8 <__alt_data_end+0xfc0178a8>
 4017c50:	00bfe034 	movhi	r2,65408
 4017c54:	10bfffc4 	addi	r2,r2,-1
 4017c58:	5021883a 	mov	r16,r10
 4017c5c:	1886703a 	and	r3,r3,r2
 4017c60:	003eaf06 	br	4017720 <__alt_data_end+0xfc017720>
 4017c64:	3825883a 	mov	r18,r7
 4017c68:	003f0f06 	br	40178a8 <__alt_data_end+0xfc0178a8>
 4017c6c:	1c44b03a 	or	r2,r3,r17
 4017c70:	8000251e 	bne	r16,zero,4017d08 <__subdf3+0x66c>
 4017c74:	1000661e 	bne	r2,zero,4017e10 <__subdf3+0x774>
 4017c78:	2990b03a 	or	r8,r5,r6
 4017c7c:	40009626 	beq	r8,zero,4017ed8 <__subdf3+0x83c>
 4017c80:	2807883a 	mov	r3,r5
 4017c84:	3023883a 	mov	r17,r6
 4017c88:	3825883a 	mov	r18,r7
 4017c8c:	003ea406 	br	4017720 <__alt_data_end+0xfc017720>
 4017c90:	127ff804 	addi	r9,r2,-32
 4017c94:	01000804 	movi	r4,32
 4017c98:	2a52d83a 	srl	r9,r5,r9
 4017c9c:	11008c26 	beq	r2,r4,4017ed0 <__subdf3+0x834>
 4017ca0:	01001004 	movi	r4,64
 4017ca4:	2085c83a 	sub	r2,r4,r2
 4017ca8:	2884983a 	sll	r2,r5,r2
 4017cac:	118cb03a 	or	r6,r2,r6
 4017cb0:	300cc03a 	cmpne	r6,r6,zero
 4017cb4:	4992b03a 	or	r9,r9,r6
 4017cb8:	0005883a 	mov	r2,zero
 4017cbc:	003f1206 	br	4017908 <__alt_data_end+0xfc017908>
 4017cc0:	0101ffc4 	movi	r4,2047
 4017cc4:	493f9c1e 	bne	r9,r4,4017b38 <__alt_data_end+0xfc017b38>
 4017cc8:	2807883a 	mov	r3,r5
 4017ccc:	3023883a 	mov	r17,r6
 4017cd0:	4821883a 	mov	r16,r9
 4017cd4:	3825883a 	mov	r18,r7
 4017cd8:	003e9106 	br	4017720 <__alt_data_end+0xfc017720>
 4017cdc:	80001f1e 	bne	r16,zero,4017d5c <__subdf3+0x6c0>
 4017ce0:	1c48b03a 	or	r4,r3,r17
 4017ce4:	20005a26 	beq	r4,zero,4017e50 <__subdf3+0x7b4>
 4017ce8:	0084303a 	nor	r2,zero,r2
 4017cec:	1000561e 	bne	r2,zero,4017e48 <__subdf3+0x7ac>
 4017cf0:	89a3883a 	add	r17,r17,r6
 4017cf4:	1945883a 	add	r2,r3,r5
 4017cf8:	898d803a 	cmpltu	r6,r17,r6
 4017cfc:	3087883a 	add	r3,r6,r2
 4017d00:	4821883a 	mov	r16,r9
 4017d04:	003f0506 	br	401791c <__alt_data_end+0xfc01791c>
 4017d08:	10002b1e 	bne	r2,zero,4017db8 <__subdf3+0x71c>
 4017d0c:	2984b03a 	or	r2,r5,r6
 4017d10:	10008026 	beq	r2,zero,4017f14 <__subdf3+0x878>
 4017d14:	2807883a 	mov	r3,r5
 4017d18:	3023883a 	mov	r17,r6
 4017d1c:	3825883a 	mov	r18,r7
 4017d20:	0401ffc4 	movi	r16,2047
 4017d24:	003e7e06 	br	4017720 <__alt_data_end+0xfc017720>
 4017d28:	3809883a 	mov	r4,r7
 4017d2c:	0011883a 	mov	r8,zero
 4017d30:	0005883a 	mov	r2,zero
 4017d34:	003ee306 	br	40178c4 <__alt_data_end+0xfc0178c4>
 4017d38:	1c62b03a 	or	r17,r3,r17
 4017d3c:	8822c03a 	cmpne	r17,r17,zero
 4017d40:	0005883a 	mov	r2,zero
 4017d44:	003f8906 	br	4017b6c <__alt_data_end+0xfc017b6c>
 4017d48:	3809883a 	mov	r4,r7
 4017d4c:	4821883a 	mov	r16,r9
 4017d50:	0011883a 	mov	r8,zero
 4017d54:	0005883a 	mov	r2,zero
 4017d58:	003eda06 	br	40178c4 <__alt_data_end+0xfc0178c4>
 4017d5c:	0101ffc4 	movi	r4,2047
 4017d60:	49003b26 	beq	r9,r4,4017e50 <__subdf3+0x7b4>
 4017d64:	0085c83a 	sub	r2,zero,r2
 4017d68:	18c02034 	orhi	r3,r3,128
 4017d6c:	01000e04 	movi	r4,56
 4017d70:	20806e16 	blt	r4,r2,4017f2c <__subdf3+0x890>
 4017d74:	010007c4 	movi	r4,31
 4017d78:	20807716 	blt	r4,r2,4017f58 <__subdf3+0x8bc>
 4017d7c:	01000804 	movi	r4,32
 4017d80:	2089c83a 	sub	r4,r4,r2
 4017d84:	1914983a 	sll	r10,r3,r4
 4017d88:	8890d83a 	srl	r8,r17,r2
 4017d8c:	8908983a 	sll	r4,r17,r4
 4017d90:	1884d83a 	srl	r2,r3,r2
 4017d94:	5222b03a 	or	r17,r10,r8
 4017d98:	2006c03a 	cmpne	r3,r4,zero
 4017d9c:	88e2b03a 	or	r17,r17,r3
 4017da0:	89a3883a 	add	r17,r17,r6
 4017da4:	1145883a 	add	r2,r2,r5
 4017da8:	898d803a 	cmpltu	r6,r17,r6
 4017dac:	3087883a 	add	r3,r6,r2
 4017db0:	4821883a 	mov	r16,r9
 4017db4:	003ed906 	br	401791c <__alt_data_end+0xfc01791c>
 4017db8:	2984b03a 	or	r2,r5,r6
 4017dbc:	10004226 	beq	r2,zero,4017ec8 <__subdf3+0x82c>
 4017dc0:	1808d0fa 	srli	r4,r3,3
 4017dc4:	8822d0fa 	srli	r17,r17,3
 4017dc8:	1806977a 	slli	r3,r3,29
 4017dcc:	2080022c 	andhi	r2,r4,8
 4017dd0:	1c62b03a 	or	r17,r3,r17
 4017dd4:	10000826 	beq	r2,zero,4017df8 <__subdf3+0x75c>
 4017dd8:	2812d0fa 	srli	r9,r5,3
 4017ddc:	4880022c 	andhi	r2,r9,8
 4017de0:	1000051e 	bne	r2,zero,4017df8 <__subdf3+0x75c>
 4017de4:	300cd0fa 	srli	r6,r6,3
 4017de8:	2804977a 	slli	r2,r5,29
 4017dec:	4809883a 	mov	r4,r9
 4017df0:	3825883a 	mov	r18,r7
 4017df4:	11a2b03a 	or	r17,r2,r6
 4017df8:	8806d77a 	srli	r3,r17,29
 4017dfc:	200890fa 	slli	r4,r4,3
 4017e00:	882290fa 	slli	r17,r17,3
 4017e04:	0401ffc4 	movi	r16,2047
 4017e08:	1906b03a 	or	r3,r3,r4
 4017e0c:	003e4406 	br	4017720 <__alt_data_end+0xfc017720>
 4017e10:	2984b03a 	or	r2,r5,r6
 4017e14:	103e4226 	beq	r2,zero,4017720 <__alt_data_end+0xfc017720>
 4017e18:	8989c83a 	sub	r4,r17,r6
 4017e1c:	8911803a 	cmpltu	r8,r17,r4
 4017e20:	1945c83a 	sub	r2,r3,r5
 4017e24:	1205c83a 	sub	r2,r2,r8
 4017e28:	1200202c 	andhi	r8,r2,128
 4017e2c:	403e9a26 	beq	r8,zero,4017898 <__alt_data_end+0xfc017898>
 4017e30:	3463c83a 	sub	r17,r6,r17
 4017e34:	28c5c83a 	sub	r2,r5,r3
 4017e38:	344d803a 	cmpltu	r6,r6,r17
 4017e3c:	1187c83a 	sub	r3,r2,r6
 4017e40:	3825883a 	mov	r18,r7
 4017e44:	003e3606 	br	4017720 <__alt_data_end+0xfc017720>
 4017e48:	0101ffc4 	movi	r4,2047
 4017e4c:	493fc71e 	bne	r9,r4,4017d6c <__alt_data_end+0xfc017d6c>
 4017e50:	2807883a 	mov	r3,r5
 4017e54:	3023883a 	mov	r17,r6
 4017e58:	4821883a 	mov	r16,r9
 4017e5c:	003e3006 	br	4017720 <__alt_data_end+0xfc017720>
 4017e60:	10003626 	beq	r2,zero,4017f3c <__subdf3+0x8a0>
 4017e64:	2984b03a 	or	r2,r5,r6
 4017e68:	10001726 	beq	r2,zero,4017ec8 <__subdf3+0x82c>
 4017e6c:	1808d0fa 	srli	r4,r3,3
 4017e70:	8822d0fa 	srli	r17,r17,3
 4017e74:	1806977a 	slli	r3,r3,29
 4017e78:	2080022c 	andhi	r2,r4,8
 4017e7c:	1c62b03a 	or	r17,r3,r17
 4017e80:	10000726 	beq	r2,zero,4017ea0 <__subdf3+0x804>
 4017e84:	2812d0fa 	srli	r9,r5,3
 4017e88:	4880022c 	andhi	r2,r9,8
 4017e8c:	1000041e 	bne	r2,zero,4017ea0 <__subdf3+0x804>
 4017e90:	300cd0fa 	srli	r6,r6,3
 4017e94:	2804977a 	slli	r2,r5,29
 4017e98:	4809883a 	mov	r4,r9
 4017e9c:	11a2b03a 	or	r17,r2,r6
 4017ea0:	8806d77a 	srli	r3,r17,29
 4017ea4:	200890fa 	slli	r4,r4,3
 4017ea8:	882290fa 	slli	r17,r17,3
 4017eac:	3825883a 	mov	r18,r7
 4017eb0:	1906b03a 	or	r3,r3,r4
 4017eb4:	0401ffc4 	movi	r16,2047
 4017eb8:	003e1906 	br	4017720 <__alt_data_end+0xfc017720>
 4017ebc:	000b883a 	mov	r5,zero
 4017ec0:	0005883a 	mov	r2,zero
 4017ec4:	003e2e06 	br	4017780 <__alt_data_end+0xfc017780>
 4017ec8:	0401ffc4 	movi	r16,2047
 4017ecc:	003e1406 	br	4017720 <__alt_data_end+0xfc017720>
 4017ed0:	0005883a 	mov	r2,zero
 4017ed4:	003f7506 	br	4017cac <__alt_data_end+0xfc017cac>
 4017ed8:	0005883a 	mov	r2,zero
 4017edc:	0009883a 	mov	r4,zero
 4017ee0:	003e7806 	br	40178c4 <__alt_data_end+0xfc0178c4>
 4017ee4:	123ff804 	addi	r8,r2,-32
 4017ee8:	01000804 	movi	r4,32
 4017eec:	1a10d83a 	srl	r8,r3,r8
 4017ef0:	11002526 	beq	r2,r4,4017f88 <__subdf3+0x8ec>
 4017ef4:	01001004 	movi	r4,64
 4017ef8:	2085c83a 	sub	r2,r4,r2
 4017efc:	1884983a 	sll	r2,r3,r2
 4017f00:	1444b03a 	or	r2,r2,r17
 4017f04:	1004c03a 	cmpne	r2,r2,zero
 4017f08:	40a2b03a 	or	r17,r8,r2
 4017f0c:	0005883a 	mov	r2,zero
 4017f10:	003f1606 	br	4017b6c <__alt_data_end+0xfc017b6c>
 4017f14:	02000434 	movhi	r8,16
 4017f18:	0009883a 	mov	r4,zero
 4017f1c:	423fffc4 	addi	r8,r8,-1
 4017f20:	00bfffc4 	movi	r2,-1
 4017f24:	0401ffc4 	movi	r16,2047
 4017f28:	003e6606 	br	40178c4 <__alt_data_end+0xfc0178c4>
 4017f2c:	1c62b03a 	or	r17,r3,r17
 4017f30:	8822c03a 	cmpne	r17,r17,zero
 4017f34:	0005883a 	mov	r2,zero
 4017f38:	003f9906 	br	4017da0 <__alt_data_end+0xfc017da0>
 4017f3c:	2807883a 	mov	r3,r5
 4017f40:	3023883a 	mov	r17,r6
 4017f44:	0401ffc4 	movi	r16,2047
 4017f48:	003df506 	br	4017720 <__alt_data_end+0xfc017720>
 4017f4c:	2807883a 	mov	r3,r5
 4017f50:	3023883a 	mov	r17,r6
 4017f54:	003df206 	br	4017720 <__alt_data_end+0xfc017720>
 4017f58:	123ff804 	addi	r8,r2,-32
 4017f5c:	01000804 	movi	r4,32
 4017f60:	1a10d83a 	srl	r8,r3,r8
 4017f64:	11000a26 	beq	r2,r4,4017f90 <__subdf3+0x8f4>
 4017f68:	01001004 	movi	r4,64
 4017f6c:	2085c83a 	sub	r2,r4,r2
 4017f70:	1884983a 	sll	r2,r3,r2
 4017f74:	1444b03a 	or	r2,r2,r17
 4017f78:	1004c03a 	cmpne	r2,r2,zero
 4017f7c:	40a2b03a 	or	r17,r8,r2
 4017f80:	0005883a 	mov	r2,zero
 4017f84:	003f8606 	br	4017da0 <__alt_data_end+0xfc017da0>
 4017f88:	0005883a 	mov	r2,zero
 4017f8c:	003fdc06 	br	4017f00 <__alt_data_end+0xfc017f00>
 4017f90:	0005883a 	mov	r2,zero
 4017f94:	003ff706 	br	4017f74 <__alt_data_end+0xfc017f74>

04017f98 <__fixdfsi>:
 4017f98:	280cd53a 	srli	r6,r5,20
 4017f9c:	00c00434 	movhi	r3,16
 4017fa0:	18ffffc4 	addi	r3,r3,-1
 4017fa4:	3181ffcc 	andi	r6,r6,2047
 4017fa8:	01c0ff84 	movi	r7,1022
 4017fac:	28c6703a 	and	r3,r5,r3
 4017fb0:	280ad7fa 	srli	r5,r5,31
 4017fb4:	3980120e 	bge	r7,r6,4018000 <__fixdfsi+0x68>
 4017fb8:	00810744 	movi	r2,1053
 4017fbc:	11800c16 	blt	r2,r6,4017ff0 <__fixdfsi+0x58>
 4017fc0:	00810cc4 	movi	r2,1075
 4017fc4:	1185c83a 	sub	r2,r2,r6
 4017fc8:	01c007c4 	movi	r7,31
 4017fcc:	18c00434 	orhi	r3,r3,16
 4017fd0:	38800d16 	blt	r7,r2,4018008 <__fixdfsi+0x70>
 4017fd4:	31befb44 	addi	r6,r6,-1043
 4017fd8:	2084d83a 	srl	r2,r4,r2
 4017fdc:	1986983a 	sll	r3,r3,r6
 4017fe0:	1884b03a 	or	r2,r3,r2
 4017fe4:	28000726 	beq	r5,zero,4018004 <__fixdfsi+0x6c>
 4017fe8:	0085c83a 	sub	r2,zero,r2
 4017fec:	f800283a 	ret
 4017ff0:	00a00034 	movhi	r2,32768
 4017ff4:	10bfffc4 	addi	r2,r2,-1
 4017ff8:	2885883a 	add	r2,r5,r2
 4017ffc:	f800283a 	ret
 4018000:	0005883a 	mov	r2,zero
 4018004:	f800283a 	ret
 4018008:	008104c4 	movi	r2,1043
 401800c:	1185c83a 	sub	r2,r2,r6
 4018010:	1884d83a 	srl	r2,r3,r2
 4018014:	003ff306 	br	4017fe4 <__alt_data_end+0xfc017fe4>

04018018 <__floatsidf>:
 4018018:	defffd04 	addi	sp,sp,-12
 401801c:	dfc00215 	stw	ra,8(sp)
 4018020:	dc400115 	stw	r17,4(sp)
 4018024:	dc000015 	stw	r16,0(sp)
 4018028:	20002b26 	beq	r4,zero,40180d8 <__floatsidf+0xc0>
 401802c:	2023883a 	mov	r17,r4
 4018030:	2020d7fa 	srli	r16,r4,31
 4018034:	20002d16 	blt	r4,zero,40180ec <__floatsidf+0xd4>
 4018038:	8809883a 	mov	r4,r17
 401803c:	401819c0 	call	401819c <__clzsi2>
 4018040:	01410784 	movi	r5,1054
 4018044:	288bc83a 	sub	r5,r5,r2
 4018048:	01010cc4 	movi	r4,1075
 401804c:	2149c83a 	sub	r4,r4,r5
 4018050:	00c007c4 	movi	r3,31
 4018054:	1900160e 	bge	r3,r4,40180b0 <__floatsidf+0x98>
 4018058:	00c104c4 	movi	r3,1043
 401805c:	1947c83a 	sub	r3,r3,r5
 4018060:	88c6983a 	sll	r3,r17,r3
 4018064:	00800434 	movhi	r2,16
 4018068:	10bfffc4 	addi	r2,r2,-1
 401806c:	1886703a 	and	r3,r3,r2
 4018070:	2941ffcc 	andi	r5,r5,2047
 4018074:	800d883a 	mov	r6,r16
 4018078:	0005883a 	mov	r2,zero
 401807c:	280a953a 	slli	r5,r5,20
 4018080:	31803fcc 	andi	r6,r6,255
 4018084:	01000434 	movhi	r4,16
 4018088:	300c97fa 	slli	r6,r6,31
 401808c:	213fffc4 	addi	r4,r4,-1
 4018090:	1906703a 	and	r3,r3,r4
 4018094:	1946b03a 	or	r3,r3,r5
 4018098:	1986b03a 	or	r3,r3,r6
 401809c:	dfc00217 	ldw	ra,8(sp)
 40180a0:	dc400117 	ldw	r17,4(sp)
 40180a4:	dc000017 	ldw	r16,0(sp)
 40180a8:	dec00304 	addi	sp,sp,12
 40180ac:	f800283a 	ret
 40180b0:	00c002c4 	movi	r3,11
 40180b4:	1887c83a 	sub	r3,r3,r2
 40180b8:	88c6d83a 	srl	r3,r17,r3
 40180bc:	8904983a 	sll	r2,r17,r4
 40180c0:	01000434 	movhi	r4,16
 40180c4:	213fffc4 	addi	r4,r4,-1
 40180c8:	2941ffcc 	andi	r5,r5,2047
 40180cc:	1906703a 	and	r3,r3,r4
 40180d0:	800d883a 	mov	r6,r16
 40180d4:	003fe906 	br	401807c <__alt_data_end+0xfc01807c>
 40180d8:	000d883a 	mov	r6,zero
 40180dc:	000b883a 	mov	r5,zero
 40180e0:	0007883a 	mov	r3,zero
 40180e4:	0005883a 	mov	r2,zero
 40180e8:	003fe406 	br	401807c <__alt_data_end+0xfc01807c>
 40180ec:	0123c83a 	sub	r17,zero,r4
 40180f0:	003fd106 	br	4018038 <__alt_data_end+0xfc018038>

040180f4 <__floatunsidf>:
 40180f4:	defffe04 	addi	sp,sp,-8
 40180f8:	dc000015 	stw	r16,0(sp)
 40180fc:	dfc00115 	stw	ra,4(sp)
 4018100:	2021883a 	mov	r16,r4
 4018104:	20002226 	beq	r4,zero,4018190 <__floatunsidf+0x9c>
 4018108:	401819c0 	call	401819c <__clzsi2>
 401810c:	01010784 	movi	r4,1054
 4018110:	2089c83a 	sub	r4,r4,r2
 4018114:	01810cc4 	movi	r6,1075
 4018118:	310dc83a 	sub	r6,r6,r4
 401811c:	00c007c4 	movi	r3,31
 4018120:	1980120e 	bge	r3,r6,401816c <__floatunsidf+0x78>
 4018124:	00c104c4 	movi	r3,1043
 4018128:	1907c83a 	sub	r3,r3,r4
 401812c:	80ca983a 	sll	r5,r16,r3
 4018130:	00800434 	movhi	r2,16
 4018134:	10bfffc4 	addi	r2,r2,-1
 4018138:	2101ffcc 	andi	r4,r4,2047
 401813c:	0021883a 	mov	r16,zero
 4018140:	288a703a 	and	r5,r5,r2
 4018144:	2008953a 	slli	r4,r4,20
 4018148:	00c00434 	movhi	r3,16
 401814c:	18ffffc4 	addi	r3,r3,-1
 4018150:	28c6703a 	and	r3,r5,r3
 4018154:	8005883a 	mov	r2,r16
 4018158:	1906b03a 	or	r3,r3,r4
 401815c:	dfc00117 	ldw	ra,4(sp)
 4018160:	dc000017 	ldw	r16,0(sp)
 4018164:	dec00204 	addi	sp,sp,8
 4018168:	f800283a 	ret
 401816c:	00c002c4 	movi	r3,11
 4018170:	188bc83a 	sub	r5,r3,r2
 4018174:	814ad83a 	srl	r5,r16,r5
 4018178:	00c00434 	movhi	r3,16
 401817c:	18ffffc4 	addi	r3,r3,-1
 4018180:	81a0983a 	sll	r16,r16,r6
 4018184:	2101ffcc 	andi	r4,r4,2047
 4018188:	28ca703a 	and	r5,r5,r3
 401818c:	003fed06 	br	4018144 <__alt_data_end+0xfc018144>
 4018190:	0009883a 	mov	r4,zero
 4018194:	000b883a 	mov	r5,zero
 4018198:	003fea06 	br	4018144 <__alt_data_end+0xfc018144>

0401819c <__clzsi2>:
 401819c:	00bfffd4 	movui	r2,65535
 40181a0:	11000536 	bltu	r2,r4,40181b8 <__clzsi2+0x1c>
 40181a4:	00803fc4 	movi	r2,255
 40181a8:	11000f36 	bltu	r2,r4,40181e8 <__clzsi2+0x4c>
 40181ac:	00800804 	movi	r2,32
 40181b0:	0007883a 	mov	r3,zero
 40181b4:	00000506 	br	40181cc <__clzsi2+0x30>
 40181b8:	00804034 	movhi	r2,256
 40181bc:	10bfffc4 	addi	r2,r2,-1
 40181c0:	11000c2e 	bgeu	r2,r4,40181f4 <__clzsi2+0x58>
 40181c4:	00800204 	movi	r2,8
 40181c8:	00c00604 	movi	r3,24
 40181cc:	20c8d83a 	srl	r4,r4,r3
 40181d0:	00c100b4 	movhi	r3,1026
 40181d4:	18c74504 	addi	r3,r3,7444
 40181d8:	1909883a 	add	r4,r3,r4
 40181dc:	20c00003 	ldbu	r3,0(r4)
 40181e0:	10c5c83a 	sub	r2,r2,r3
 40181e4:	f800283a 	ret
 40181e8:	00800604 	movi	r2,24
 40181ec:	00c00204 	movi	r3,8
 40181f0:	003ff606 	br	40181cc <__alt_data_end+0xfc0181cc>
 40181f4:	00800404 	movi	r2,16
 40181f8:	1007883a 	mov	r3,r2
 40181fc:	003ff306 	br	40181cc <__alt_data_end+0xfc0181cc>

04018200 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4018200:	defffd04 	addi	sp,sp,-12
 4018204:	dfc00215 	stw	ra,8(sp)
 4018208:	dc400115 	stw	r17,4(sp)
 401820c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4018210:	20002016 	blt	r4,zero,4018294 <close+0x94>
 4018214:	01400304 	movi	r5,12
 4018218:	2021883a 	mov	r16,r4
 401821c:	400aa340 	call	400aa34 <__mulsi3>
 4018220:	010100b4 	movhi	r4,1026
 4018224:	2109b804 	addi	r4,r4,9952
 4018228:	2089883a 	add	r4,r4,r2

  if (fd)
 401822c:	20001926 	beq	r4,zero,4018294 <close+0x94>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4018230:	20800017 	ldw	r2,0(r4)
 4018234:	10800417 	ldw	r2,16(r2)
 4018238:	10000b26 	beq	r2,zero,4018268 <close+0x68>
 401823c:	103ee83a 	callr	r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4018240:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4018244:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4018248:	401889c0 	call	401889c <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
 401824c:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
 4018250:	88000916 	blt	r17,zero,4018278 <close+0x78>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
 4018254:	dfc00217 	ldw	ra,8(sp)
 4018258:	dc400117 	ldw	r17,4(sp)
 401825c:	dc000017 	ldw	r16,0(sp)
 4018260:	dec00304 	addi	sp,sp,12
 4018264:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4018268:	8009883a 	mov	r4,r16
 401826c:	401889c0 	call	401889c <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
 4018270:	0005883a 	mov	r2,zero
 4018274:	003ff706 	br	4018254 <__alt_data_end+0xfc018254>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 4018278:	d0a5b517 	ldw	r2,-26924(gp)
 401827c:	10000c26 	beq	r2,zero,40182b0 <close+0xb0>
 4018280:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
 4018284:	0463c83a 	sub	r17,zero,r17
 4018288:	14400015 	stw	r17,0(r2)
      return -1;
 401828c:	00bfffc4 	movi	r2,-1
 4018290:	003ff006 	br	4018254 <__alt_data_end+0xfc018254>
 4018294:	d0a5b517 	ldw	r2,-26924(gp)
 4018298:	10000726 	beq	r2,zero,40182b8 <close+0xb8>
 401829c:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40182a0:	00c01444 	movi	r3,81
 40182a4:	10c00015 	stw	r3,0(r2)
    return -1;
 40182a8:	00bfffc4 	movi	r2,-1
 40182ac:	003fe906 	br	4018254 <__alt_data_end+0xfc018254>
 40182b0:	d0b23c04 	addi	r2,gp,-14096
 40182b4:	003ff306 	br	4018284 <__alt_data_end+0xfc018284>
 40182b8:	d0b23c04 	addi	r2,gp,-14096
 40182bc:	003ff806 	br	40182a0 <__alt_data_end+0xfc0182a0>

040182c0 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 40182c0:	3005883a 	mov	r2,r6
 40182c4:	f800283a 	ret

040182c8 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 40182c8:	20000226 	beq	r4,zero,40182d4 <_exit+0xc>
    ALT_SIM_FAIL();
 40182cc:	002af070 	cmpltui	zero,zero,43969
 40182d0:	003fff06 	br	40182d0 <__alt_data_end+0xfc0182d0>
  } else {
    ALT_SIM_PASS();
 40182d4:	002af0b0 	cmpltui	zero,zero,43970
 40182d8:	003ffd06 	br	40182d0 <__alt_data_end+0xfc0182d0>

040182dc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 40182dc:	defffb04 	addi	sp,sp,-20
 40182e0:	dfc00415 	stw	ra,16(sp)
 40182e4:	dcc00315 	stw	r19,12(sp)
 40182e8:	dc800215 	stw	r18,8(sp)
 40182ec:	dc400115 	stw	r17,4(sp)
 40182f0:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40182f4:	20002216 	blt	r4,zero,4018380 <fstat+0xa4>
 40182f8:	2827883a 	mov	r19,r5
 40182fc:	040100b4 	movhi	r16,1026
 4018300:	01400304 	movi	r5,12
 4018304:	2023883a 	mov	r17,r4
 4018308:	8409b804 	addi	r16,r16,9952
 401830c:	400aa340 	call	400aa34 <__mulsi3>
 4018310:	80a5883a 	add	r18,r16,r2
  
  if (fd)
 4018314:	90001a26 	beq	r18,zero,4018380 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4018318:	01400304 	movi	r5,12
 401831c:	8809883a 	mov	r4,r17
 4018320:	400aa340 	call	400aa34 <__mulsi3>
 4018324:	8085883a 	add	r2,r16,r2
 4018328:	10800017 	ldw	r2,0(r2)
 401832c:	10800817 	ldw	r2,32(r2)
 4018330:	10000926 	beq	r2,zero,4018358 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 4018334:	980b883a 	mov	r5,r19
 4018338:	9009883a 	mov	r4,r18
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
 401833c:	dfc00417 	ldw	ra,16(sp)
 4018340:	dcc00317 	ldw	r19,12(sp)
 4018344:	dc800217 	ldw	r18,8(sp)
 4018348:	dc400117 	ldw	r17,4(sp)
 401834c:	dc000017 	ldw	r16,0(sp)
 4018350:	dec00504 	addi	sp,sp,20
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    {
      return fd->dev->fstat(fd, st);
 4018354:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4018358:	00880004 	movi	r2,8192
 401835c:	98800115 	stw	r2,4(r19)
      return 0;
 4018360:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
 4018364:	dfc00417 	ldw	ra,16(sp)
 4018368:	dcc00317 	ldw	r19,12(sp)
 401836c:	dc800217 	ldw	r18,8(sp)
 4018370:	dc400117 	ldw	r17,4(sp)
 4018374:	dc000017 	ldw	r16,0(sp)
 4018378:	dec00504 	addi	sp,sp,20
 401837c:	f800283a 	ret
 4018380:	d0a5b517 	ldw	r2,-26924(gp)
 4018384:	10000526 	beq	r2,zero,401839c <fstat+0xc0>
 4018388:	103ee83a 	callr	r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401838c:	00c01444 	movi	r3,81
 4018390:	10c00015 	stw	r3,0(r2)
    return -1;
 4018394:	00bfffc4 	movi	r2,-1
 4018398:	003ff206 	br	4018364 <__alt_data_end+0xfc018364>
 401839c:	d0b23c04 	addi	r2,gp,-14096
 40183a0:	003ffa06 	br	401838c <__alt_data_end+0xfc01838c>

040183a4 <getpid>:
 */
 
int ALT_GETPID (void)
{
  return 0;
}
 40183a4:	0005883a 	mov	r2,zero
 40183a8:	f800283a 	ret

040183ac <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 40183ac:	deffef04 	addi	sp,sp,-68
 40183b0:	dfc01015 	stw	ra,64(sp)
 40183b4:	dc000f15 	stw	r16,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40183b8:	20001816 	blt	r4,zero,401841c <isatty+0x70>
 40183bc:	01400304 	movi	r5,12
 40183c0:	2021883a 	mov	r16,r4
 40183c4:	400aa340 	call	400aa34 <__mulsi3>
 40183c8:	00c100b4 	movhi	r3,1026
 40183cc:	18c9b804 	addi	r3,r3,9952
 40183d0:	1885883a 	add	r2,r3,r2
  
  if (fd)
 40183d4:	10001126 	beq	r2,zero,401841c <isatty+0x70>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 40183d8:	10800017 	ldw	r2,0(r2)
 40183dc:	10800817 	ldw	r2,32(r2)
 40183e0:	10000926 	beq	r2,zero,4018408 <isatty+0x5c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 40183e4:	d80b883a 	mov	r5,sp
 40183e8:	8009883a 	mov	r4,r16
 40183ec:	40182dc0 	call	40182dc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 40183f0:	d8800117 	ldw	r2,4(sp)
 40183f4:	10880020 	cmpeqi	r2,r2,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
 40183f8:	dfc01017 	ldw	ra,64(sp)
 40183fc:	dc000f17 	ldw	r16,60(sp)
 4018400:	dec01104 	addi	sp,sp,68
 4018404:	f800283a 	ret
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
 4018408:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
 401840c:	dfc01017 	ldw	ra,64(sp)
 4018410:	dc000f17 	ldw	r16,60(sp)
 4018414:	dec01104 	addi	sp,sp,68
 4018418:	f800283a 	ret
 401841c:	d0a5b517 	ldw	r2,-26924(gp)
 4018420:	10000826 	beq	r2,zero,4018444 <isatty+0x98>
 4018424:	103ee83a 	callr	r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4018428:	00c01444 	movi	r3,81
 401842c:	10c00015 	stw	r3,0(r2)
    return 0;
 4018430:	0005883a 	mov	r2,zero
  }
}
 4018434:	dfc01017 	ldw	ra,64(sp)
 4018438:	dc000f17 	ldw	r16,60(sp)
 401843c:	dec01104 	addi	sp,sp,68
 4018440:	f800283a 	ret
 4018444:	d0b23c04 	addi	r2,gp,-14096
 4018448:	003ff706 	br	4018428 <__alt_data_end+0xfc018428>

0401844c <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 401844c:	defffe04 	addi	sp,sp,-8
 4018450:	dfc00115 	stw	ra,4(sp)
 4018454:	dc000015 	stw	r16,0(sp)
  int status = 0;

  if (pid <= 0)
 4018458:	0100050e 	bge	zero,r4,4018470 <kill+0x24>

  else if (pid > 0)
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 401845c:	040000c4 	movi	r16,3
 4018460:	d0a5b517 	ldw	r2,-26924(gp)
 4018464:	10002a26 	beq	r2,zero,4018510 <kill+0xc4>
 4018468:	103ee83a 	callr	r2
 401846c:	00002906 	br	4018514 <kill+0xc8>
{
  int status = 0;

  if (pid <= 0)
  {
    switch (sig)
 4018470:	008007c4 	movi	r2,31
 4018474:	11403136 	bltu	r2,r5,401853c <kill+0xf0>
 4018478:	280a90ba 	slli	r5,r5,2
 401847c:	008100b4 	movhi	r2,1026
 4018480:	10a12404 	addi	r2,r2,-31600
 4018484:	288b883a 	add	r5,r5,r2
 4018488:	28800017 	ldw	r2,0(r5)
 401848c:	1000683a 	jmp	r2
 4018490:	04018520 	cmpeqi	r16,zero,1556
 4018494:	0401853c 	xorhi	r16,zero,1556
 4018498:	0401853c 	xorhi	r16,zero,1556
 401849c:	04018534 	movhi	r16,1556
 40184a0:	04018534 	movhi	r16,1556
 40184a4:	04018534 	movhi	r16,1556
 40184a8:	04018534 	movhi	r16,1556
 40184ac:	0401853c 	xorhi	r16,zero,1556
 40184b0:	04018534 	movhi	r16,1556
 40184b4:	04018534 	movhi	r16,1556
 40184b8:	04018534 	movhi	r16,1556
 40184bc:	04018534 	movhi	r16,1556
 40184c0:	04018534 	movhi	r16,1556
 40184c4:	04018534 	movhi	r16,1556
 40184c8:	04018534 	movhi	r16,1556
 40184cc:	04018534 	movhi	r16,1556
 40184d0:	04018520 	cmpeqi	r16,zero,1556
 40184d4:	0401853c 	xorhi	r16,zero,1556
 40184d8:	0401853c 	xorhi	r16,zero,1556
 40184dc:	0401853c 	xorhi	r16,zero,1556
 40184e0:	04018520 	cmpeqi	r16,zero,1556
 40184e4:	0401853c 	xorhi	r16,zero,1556
 40184e8:	0401853c 	xorhi	r16,zero,1556
 40184ec:	04018534 	movhi	r16,1556
 40184f0:	04018534 	movhi	r16,1556
 40184f4:	04018534 	movhi	r16,1556
 40184f8:	04018534 	movhi	r16,1556
 40184fc:	04018534 	movhi	r16,1556
 4018500:	0401853c 	xorhi	r16,zero,1556
 4018504:	0401853c 	xorhi	r16,zero,1556
 4018508:	04018534 	movhi	r16,1556
 401850c:	04018534 	movhi	r16,1556
 4018510:	d0b23c04 	addi	r2,gp,-14096
    status = ESRCH;
  }

  if (status)
  {
    ALT_ERRNO = status;
 4018514:	14000015 	stw	r16,0(r2)
    return -1;
 4018518:	00bfffc4 	movi	r2,-1
 401851c:	00000106 	br	4018524 <kill+0xd8>
  }

  return 0;
 4018520:	0005883a 	mov	r2,zero
}
 4018524:	dfc00117 	ldw	ra,4(sp)
 4018528:	dc000017 	ldw	r16,0(sp)
 401852c:	dec00204 	addi	sp,sp,8
 4018530:	f800283a 	ret
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 4018534:	0009883a 	mov	r4,zero
 4018538:	40182c80 	call	40182c8 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 401853c:	04000584 	movi	r16,22
 4018540:	003fc706 	br	4018460 <__alt_data_end+0xfc018460>

04018544 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4018544:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4018548:	018100b4 	movhi	r6,1026
 401854c:	01c100b4 	movhi	r7,1026
 4018550:	dfc00015 	stw	ra,0(sp)
 4018554:	31878f04 	addi	r6,r6,7740
 4018558:	39d40404 	addi	r7,r7,20496
 401855c:	31c01026 	beq	r6,r7,40185a0 <alt_load+0x5c>
  {
    while( to != end )
 4018560:	008100b4 	movhi	r2,1026
 4018564:	10940404 	addi	r2,r2,20496
 4018568:	30800d26 	beq	r6,r2,40185a0 <alt_load+0x5c>
 401856c:	30c00104 	addi	r3,r6,4
 4018570:	10c7c83a 	sub	r3,r2,r3
 4018574:	1806d0ba 	srli	r3,r3,2
 4018578:	0005883a 	mov	r2,zero
 401857c:	18c00044 	addi	r3,r3,1
 4018580:	18c7883a 	add	r3,r3,r3
 4018584:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
 4018588:	11c9883a 	add	r4,r2,r7
 401858c:	21400017 	ldw	r5,0(r4)
 4018590:	1189883a 	add	r4,r2,r6
 4018594:	10800104 	addi	r2,r2,4
 4018598:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 401859c:	10fffa1e 	bne	r2,r3,4018588 <__alt_data_end+0xfc018588>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 40185a0:	01810034 	movhi	r6,1024
 40185a4:	01c10034 	movhi	r7,1024
 40185a8:	31800804 	addi	r6,r6,32
 40185ac:	39c00804 	addi	r7,r7,32
 40185b0:	31c01026 	beq	r6,r7,40185f4 <alt_load+0xb0>
  {
    while( to != end )
 40185b4:	00810034 	movhi	r2,1024
 40185b8:	10806104 	addi	r2,r2,388
 40185bc:	30800d26 	beq	r6,r2,40185f4 <alt_load+0xb0>
 40185c0:	30c00104 	addi	r3,r6,4
 40185c4:	10c7c83a 	sub	r3,r2,r3
 40185c8:	1806d0ba 	srli	r3,r3,2
 40185cc:	0005883a 	mov	r2,zero
 40185d0:	18c00044 	addi	r3,r3,1
 40185d4:	18c7883a 	add	r3,r3,r3
 40185d8:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
 40185dc:	11c9883a 	add	r4,r2,r7
 40185e0:	21400017 	ldw	r5,0(r4)
 40185e4:	1189883a 	add	r4,r2,r6
 40185e8:	10800104 	addi	r2,r2,4
 40185ec:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 40185f0:	18bffa1e 	bne	r3,r2,40185dc <__alt_data_end+0xfc0185dc>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 40185f4:	018100b4 	movhi	r6,1026
 40185f8:	01c100b4 	movhi	r7,1026
 40185fc:	31ac6c04 	addi	r6,r6,-20048
 4018600:	39ec6c04 	addi	r7,r7,-20048
 4018604:	31c01026 	beq	r6,r7,4018648 <alt_load+0x104>
  {
    while( to != end )
 4018608:	008100b4 	movhi	r2,1026
 401860c:	10878f04 	addi	r2,r2,7740
 4018610:	30800d26 	beq	r6,r2,4018648 <alt_load+0x104>
 4018614:	30c00104 	addi	r3,r6,4
 4018618:	10c7c83a 	sub	r3,r2,r3
 401861c:	1806d0ba 	srli	r3,r3,2
 4018620:	0005883a 	mov	r2,zero
 4018624:	18c00044 	addi	r3,r3,1
 4018628:	18c7883a 	add	r3,r3,r3
 401862c:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
 4018630:	11c9883a 	add	r4,r2,r7
 4018634:	21400017 	ldw	r5,0(r4)
 4018638:	1189883a 	add	r4,r2,r6
 401863c:	10800104 	addi	r2,r2,4
 4018640:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4018644:	10fffa1e 	bne	r2,r3,4018630 <__alt_data_end+0xfc018630>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4018648:	401a6080 	call	401a608 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 401864c:	dfc00017 	ldw	ra,0(sp)
 4018650:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 4018654:	401a7b81 	jmpi	401a7b8 <alt_icache_flush_all>

04018658 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4018658:	defffa04 	addi	sp,sp,-24
 401865c:	dfc00515 	stw	ra,20(sp)
 4018660:	dd000415 	stw	r20,16(sp)
 4018664:	dcc00315 	stw	r19,12(sp)
 4018668:	dc800215 	stw	r18,8(sp)
 401866c:	dc400115 	stw	r17,4(sp)
 4018670:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4018674:	20001d16 	blt	r4,zero,40186ec <lseek+0x94>
 4018678:	2827883a 	mov	r19,r5
 401867c:	040100b4 	movhi	r16,1026
 4018680:	01400304 	movi	r5,12
 4018684:	2023883a 	mov	r17,r4
 4018688:	3029883a 	mov	r20,r6
 401868c:	8409b804 	addi	r16,r16,9952
 4018690:	400aa340 	call	400aa34 <__mulsi3>
 4018694:	80a5883a 	add	r18,r16,r2
  
  if (fd) 
 4018698:	90001426 	beq	r18,zero,40186ec <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 401869c:	01400304 	movi	r5,12
 40186a0:	8809883a 	mov	r4,r17
 40186a4:	400aa340 	call	400aa34 <__mulsi3>
 40186a8:	8085883a 	add	r2,r16,r2
 40186ac:	10800017 	ldw	r2,0(r2)
 40186b0:	10800717 	ldw	r2,28(r2)
 40186b4:	10001426 	beq	r2,zero,4018708 <lseek+0xb0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 40186b8:	a00d883a 	mov	r6,r20
 40186bc:	980b883a 	mov	r5,r19
 40186c0:	9009883a 	mov	r4,r18
 40186c4:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
 40186c8:	10001316 	blt	r2,zero,4018718 <lseek+0xc0>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
 40186cc:	dfc00517 	ldw	ra,20(sp)
 40186d0:	dd000417 	ldw	r20,16(sp)
 40186d4:	dcc00317 	ldw	r19,12(sp)
 40186d8:	dc800217 	ldw	r18,8(sp)
 40186dc:	dc400117 	ldw	r17,4(sp)
 40186e0:	dc000017 	ldw	r16,0(sp)
 40186e4:	dec00604 	addi	sp,sp,24
 40186e8:	f800283a 	ret
 40186ec:	04001444 	movi	r16,81
 40186f0:	d0a5b517 	ldw	r2,-26924(gp)
 40186f4:	10000626 	beq	r2,zero,4018710 <lseek+0xb8>
 40186f8:	103ee83a 	callr	r2
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
 40186fc:	14000015 	stw	r16,0(r2)
    rc = -1;
 4018700:	00bfffc4 	movi	r2,-1
  }

  return rc;
 4018704:	003ff106 	br	40186cc <__alt_data_end+0xfc0186cc>
 4018708:	04002184 	movi	r16,134
 401870c:	003ff806 	br	40186f0 <__alt_data_end+0xfc0186f0>
 4018710:	d0b23c04 	addi	r2,gp,-14096
 4018714:	003ff906 	br	40186fc <__alt_data_end+0xfc0186fc>
 4018718:	00a1c83a 	sub	r16,zero,r2
 401871c:	003ff406 	br	40186f0 <__alt_data_end+0xfc0186f0>

04018720 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4018720:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4018724:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4018728:	dfc00115 	stw	ra,4(sp)
 401872c:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4018730:	4018ab80 	call	4018ab8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4018734:	4018ad80 	call	4018ad8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4018738:	018100b4 	movhi	r6,1026
 401873c:	31878804 	addi	r6,r6,7712
 4018740:	300b883a 	mov	r5,r6
 4018744:	3009883a 	mov	r4,r6
 4018748:	401a93c0 	call	401a93c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 401874c:	401a6780 	call	401a678 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4018750:	010100b4 	movhi	r4,1026
 4018754:	2129b704 	addi	r4,r4,-22820
 4018758:	401ae100 	call	401ae10 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 401875c:	d1b24017 	ldw	r6,-14080(gp)
 4018760:	d1724117 	ldw	r5,-14076(gp)
 4018764:	d1324217 	ldw	r4,-14072(gp)
 4018768:	4007ed80 	call	4007ed8 <main>
  close(STDOUT_FILENO);
 401876c:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4018770:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
 4018774:	40182000 	call	4018200 <close>
  exit (result);
 4018778:	8009883a 	mov	r4,r16
 401877c:	401ae240 	call	401ae24 <exit>

04018780 <__malloc_lock>:
 4018780:	f800283a 	ret

04018784 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4018784:	f800283a 	ret

04018788 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4018788:	defffa04 	addi	sp,sp,-24
 401878c:	dfc00515 	stw	ra,20(sp)
 4018790:	dd000415 	stw	r20,16(sp)
 4018794:	dcc00315 	stw	r19,12(sp)
 4018798:	dc800215 	stw	r18,8(sp)
 401879c:	dc400115 	stw	r17,4(sp)
 40187a0:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40187a4:	20003016 	blt	r4,zero,4018868 <read+0xe0>
 40187a8:	2827883a 	mov	r19,r5
 40187ac:	040100b4 	movhi	r16,1026
 40187b0:	01400304 	movi	r5,12
 40187b4:	2025883a 	mov	r18,r4
 40187b8:	3029883a 	mov	r20,r6
 40187bc:	8409b804 	addi	r16,r16,9952
 40187c0:	400aa340 	call	400aa34 <__mulsi3>
 40187c4:	80a3883a 	add	r17,r16,r2
  
  if (fd)
 40187c8:	88002726 	beq	r17,zero,4018868 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 40187cc:	88800217 	ldw	r2,8(r17)
 40187d0:	00c00044 	movi	r3,1
 40187d4:	108000cc 	andi	r2,r2,3
 40187d8:	10c01526 	beq	r2,r3,4018830 <read+0xa8>
        (fd->dev->read))
 40187dc:	01400304 	movi	r5,12
 40187e0:	9009883a 	mov	r4,r18
 40187e4:	400aa340 	call	400aa34 <__mulsi3>
 40187e8:	8085883a 	add	r2,r16,r2
 40187ec:	10800017 	ldw	r2,0(r2)
 40187f0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 40187f4:	10000e26 	beq	r2,zero,4018830 <read+0xa8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 40187f8:	a00d883a 	mov	r6,r20
 40187fc:	980b883a 	mov	r5,r19
 4018800:	8809883a 	mov	r4,r17
 4018804:	103ee83a 	callr	r2
 4018808:	1021883a 	mov	r16,r2
 401880c:	10000f16 	blt	r2,zero,401884c <read+0xc4>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
 4018810:	dfc00517 	ldw	ra,20(sp)
 4018814:	dd000417 	ldw	r20,16(sp)
 4018818:	dcc00317 	ldw	r19,12(sp)
 401881c:	dc800217 	ldw	r18,8(sp)
 4018820:	dc400117 	ldw	r17,4(sp)
 4018824:	dc000017 	ldw	r16,0(sp)
 4018828:	dec00604 	addi	sp,sp,24
 401882c:	f800283a 	ret
 4018830:	d0a5b517 	ldw	r2,-26924(gp)
 4018834:	10001326 	beq	r2,zero,4018884 <read+0xfc>
 4018838:	103ee83a 	callr	r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
 401883c:	00c00344 	movi	r3,13
 4018840:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
 4018844:	00bfffc4 	movi	r2,-1
 4018848:	003ff106 	br	4018810 <__alt_data_end+0xfc018810>
 401884c:	d0a5b517 	ldw	r2,-26924(gp)
 4018850:	10000e26 	beq	r2,zero,401888c <read+0x104>
 4018854:	103ee83a 	callr	r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
 4018858:	0421c83a 	sub	r16,zero,r16
 401885c:	14000015 	stw	r16,0(r2)
          return -1;
 4018860:	00bfffc4 	movi	r2,-1
 4018864:	003fea06 	br	4018810 <__alt_data_end+0xfc018810>
 4018868:	d0a5b517 	ldw	r2,-26924(gp)
 401886c:	10000926 	beq	r2,zero,4018894 <read+0x10c>
 4018870:	103ee83a 	callr	r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4018874:	00c01444 	movi	r3,81
 4018878:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 401887c:	00bfffc4 	movi	r2,-1
 4018880:	003fe306 	br	4018810 <__alt_data_end+0xfc018810>
 4018884:	d0b23c04 	addi	r2,gp,-14096
 4018888:	003fec06 	br	401883c <__alt_data_end+0xfc01883c>
 401888c:	d0b23c04 	addi	r2,gp,-14096
 4018890:	003ff106 	br	4018858 <__alt_data_end+0xfc018858>
 4018894:	d0b23c04 	addi	r2,gp,-14096
 4018898:	003ff606 	br	4018874 <__alt_data_end+0xfc018874>

0401889c <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
 401889c:	00c00084 	movi	r3,2
 40188a0:	1900140e 	bge	r3,r4,40188f4 <alt_release_fd+0x58>
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 40188a4:	defffd04 	addi	sp,sp,-12
 40188a8:	dc400115 	stw	r17,4(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
 40188ac:	01400304 	movi	r5,12
 40188b0:	044100b4 	movhi	r17,1026
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 40188b4:	dfc00215 	stw	ra,8(sp)
 40188b8:	dc000015 	stw	r16,0(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
 40188bc:	8c49b804 	addi	r17,r17,9952
 40188c0:	2021883a 	mov	r16,r4
 40188c4:	400aa340 	call	400aa34 <__mulsi3>
 40188c8:	8885883a 	add	r2,r17,r2
    alt_fd_list[fd].dev      = 0;
 40188cc:	01400304 	movi	r5,12
 40188d0:	8009883a 	mov	r4,r16

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
 40188d4:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
 40188d8:	400aa340 	call	400aa34 <__mulsi3>
 40188dc:	8885883a 	add	r2,r17,r2
 40188e0:	10000015 	stw	zero,0(r2)
  }
}
 40188e4:	dfc00217 	ldw	ra,8(sp)
 40188e8:	dc400117 	ldw	r17,4(sp)
 40188ec:	dc000017 	ldw	r16,0(sp)
 40188f0:	dec00304 	addi	sp,sp,12
 40188f4:	f800283a 	ret

040188f8 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40188f8:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40188fc:	00bfff84 	movi	r2,-2
 4018900:	2884703a 	and	r2,r5,r2
 4018904:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4018908:	d0a5b617 	ldw	r2,-26920(gp)
 401890c:	00ffff04 	movi	r3,-4
 4018910:	108000c4 	addi	r2,r2,3
 4018914:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4018918:	00c20034 	movhi	r3,2048
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 401891c:	d0a5b615 	stw	r2,-26920(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4018920:	1109883a 	add	r4,r2,r4
 4018924:	18c00004 	addi	r3,r3,0
 4018928:	19000336 	bltu	r3,r4,4018938 <sbrk+0x40>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
 401892c:	d125b615 	stw	r4,-26920(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4018930:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
 4018934:	f800283a 	ret
 4018938:	2801703a 	wrctl	status,r5
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 401893c:	00bfffc4 	movi	r2,-1
 4018940:	f800283a 	ret

04018944 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
 4018944:	defffe04 	addi	sp,sp,-8
 4018948:	dc000015 	stw	r16,0(sp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 401894c:	d4324517 	ldw	r16,-14060(gp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4018950:	d0b24417 	ldw	r2,-14064(gp)
 4018954:	dfc00115 	stw	ra,4(sp)
  clock_t ticks = alt_nticks(); 

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
 4018958:	8000061e 	bne	r16,zero,4018974 <times+0x30>
 401895c:	d0a5b517 	ldw	r2,-26924(gp)
 4018960:	10000e26 	beq	r2,zero,401899c <times+0x58>
 4018964:	103ee83a 	callr	r2
  {
    ALT_ERRNO = ENOSYS;
 4018968:	00c01604 	movi	r3,88
 401896c:	10c00015 	stw	r3,0(r2)
    return 0;
 4018970:	00000506 	br	4018988 <times+0x44>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
 4018974:	20000015 	stw	zero,0(r4)
  buf->tms_stime  = ticks;
 4018978:	20800115 	stw	r2,4(r4)
  buf->tms_cutime = 0;
 401897c:	20000215 	stw	zero,8(r4)
  buf->tms_cstime = 0;
 4018980:	20000315 	stw	zero,12(r4)

  return ticks;
 4018984:	1021883a 	mov	r16,r2
}
 4018988:	8005883a 	mov	r2,r16
 401898c:	dfc00117 	ldw	ra,4(sp)
 4018990:	dc000017 	ldw	r16,0(sp)
 4018994:	dec00204 	addi	sp,sp,8
 4018998:	f800283a 	ret
 401899c:	d0b23c04 	addi	r2,gp,-14096
 40189a0:	003ff106 	br	4018968 <__alt_data_end+0xfc018968>

040189a4 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
 40189a4:	401a5801 	jmpi	401a580 <alt_busy_sleep>

040189a8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 40189a8:	defffa04 	addi	sp,sp,-24
 40189ac:	dfc00515 	stw	ra,20(sp)
 40189b0:	dd000415 	stw	r20,16(sp)
 40189b4:	dcc00315 	stw	r19,12(sp)
 40189b8:	dc800215 	stw	r18,8(sp)
 40189bc:	dc400115 	stw	r17,4(sp)
 40189c0:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40189c4:	20003116 	blt	r4,zero,4018a8c <write+0xe4>
 40189c8:	2827883a 	mov	r19,r5
 40189cc:	040100b4 	movhi	r16,1026
 40189d0:	01400304 	movi	r5,12
 40189d4:	2025883a 	mov	r18,r4
 40189d8:	3029883a 	mov	r20,r6
 40189dc:	8409b804 	addi	r16,r16,9952
 40189e0:	400aa340 	call	400aa34 <__mulsi3>
 40189e4:	80a3883a 	add	r17,r16,r2
  
  if (fd)
 40189e8:	88002826 	beq	r17,zero,4018a8c <write+0xe4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 40189ec:	88800217 	ldw	r2,8(r17)
 40189f0:	108000cc 	andi	r2,r2,3
 40189f4:	10001526 	beq	r2,zero,4018a4c <write+0xa4>
 40189f8:	01400304 	movi	r5,12
 40189fc:	9009883a 	mov	r4,r18
 4018a00:	400aa340 	call	400aa34 <__mulsi3>
 4018a04:	8085883a 	add	r2,r16,r2
 4018a08:	10800017 	ldw	r2,0(r2)
 4018a0c:	10800617 	ldw	r2,24(r2)
 4018a10:	10000e26 	beq	r2,zero,4018a4c <write+0xa4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4018a14:	a00d883a 	mov	r6,r20
 4018a18:	980b883a 	mov	r5,r19
 4018a1c:	8809883a 	mov	r4,r17
 4018a20:	103ee83a 	callr	r2
 4018a24:	1021883a 	mov	r16,r2
 4018a28:	10001116 	blt	r2,zero,4018a70 <write+0xc8>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
 4018a2c:	dfc00517 	ldw	ra,20(sp)
 4018a30:	dd000417 	ldw	r20,16(sp)
 4018a34:	dcc00317 	ldw	r19,12(sp)
 4018a38:	dc800217 	ldw	r18,8(sp)
 4018a3c:	dc400117 	ldw	r17,4(sp)
 4018a40:	dc000017 	ldw	r16,0(sp)
 4018a44:	dec00604 	addi	sp,sp,24
 4018a48:	f800283a 	ret
 4018a4c:	d0a5b517 	ldw	r2,-26924(gp)
 4018a50:	10000526 	beq	r2,zero,4018a68 <write+0xc0>
 4018a54:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
 4018a58:	00c00344 	movi	r3,13
 4018a5c:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
 4018a60:	00bfffc4 	movi	r2,-1
 4018a64:	003ff106 	br	4018a2c <__alt_data_end+0xfc018a2c>
 4018a68:	d0b23c04 	addi	r2,gp,-14096
 4018a6c:	003ffa06 	br	4018a58 <__alt_data_end+0xfc018a58>
 4018a70:	d0a5b517 	ldw	r2,-26924(gp)
 4018a74:	10000c26 	beq	r2,zero,4018aa8 <write+0x100>
 4018a78:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
 4018a7c:	0421c83a 	sub	r16,zero,r16
 4018a80:	14000015 	stw	r16,0(r2)
        return -1;
 4018a84:	00bfffc4 	movi	r2,-1
 4018a88:	003fe806 	br	4018a2c <__alt_data_end+0xfc018a2c>
 4018a8c:	d0a5b517 	ldw	r2,-26924(gp)
 4018a90:	10000726 	beq	r2,zero,4018ab0 <write+0x108>
 4018a94:	103ee83a 	callr	r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4018a98:	00c01444 	movi	r3,81
 4018a9c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 4018aa0:	00bfffc4 	movi	r2,-1
 4018aa4:	003fe106 	br	4018a2c <__alt_data_end+0xfc018a2c>
 4018aa8:	d0b23c04 	addi	r2,gp,-14096
 4018aac:	003ff306 	br	4018a7c <__alt_data_end+0xfc018a7c>
 4018ab0:	d0b23c04 	addi	r2,gp,-14096
 4018ab4:	003ff806 	br	4018a98 <__alt_data_end+0xfc018a98>

04018ab8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4018ab8:	deffff04 	addi	sp,sp,-4
 4018abc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 4018ac0:	401ac600 	call	401ac60 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4018ac4:	00800044 	movi	r2,1
 4018ac8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4018acc:	dfc00017 	ldw	ra,0(sp)
 4018ad0:	dec00104 	addi	sp,sp,4
 4018ad4:	f800283a 	ret

04018ad8 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 4018ad8:	01020034 	movhi	r4,2048
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4018adc:	defffe04 	addi	sp,sp,-8
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 4018ae0:	01c0fa04 	movi	r7,1000
 4018ae4:	01800084 	movi	r6,2
 4018ae8:	000b883a 	mov	r5,zero
 4018aec:	21040004 	addi	r4,r4,4096
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4018af0:	dfc00115 	stw	ra,4(sp)
 4018af4:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 4018af8:	401a4b80 	call	401a4b8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
 4018afc:	010100b4 	movhi	r4,1026
 4018b00:	210e3a04 	addi	r4,r4,14568
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 4018b04:	040100b4 	movhi	r16,1026
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
 4018b08:	4018da40 	call	4018da4 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 4018b0c:	840a2c04 	addi	r16,r16,10416
 4018b10:	8009883a 	mov	r4,r16
 4018b14:	000b883a 	mov	r5,zero
 4018b18:	01800044 	movi	r6,1
 4018b1c:	4019f780 	call	4019f78 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4018b20:	d165b104 	addi	r5,gp,-26940
 4018b24:	813ff604 	addi	r4,r16,-40
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
    ALTERA_AVALON_SPI_INIT ( SPI_1, spi_1);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
}
 4018b28:	dfc00117 	ldw	ra,4(sp)
 4018b2c:	dc000017 	ldw	r16,0(sp)
 4018b30:	dec00204 	addi	sp,sp,8
 4018b34:	401a60c1 	jmpi	401a60c <alt_dev_llist_insert>

04018b38 <alt_avalon_i2c_irq>:
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 4018b38:	20800317 	ldw	r2,12(r4)
 4018b3c:	10800304 	addi	r2,r2,12
 4018b40:	11400037 	ldwio	r5,0(r2)
{
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   enabled_ints &=  (~mask);
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 4018b44:	10000035 	stwio	zero,0(r2)

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 4018b48:	20800317 	ldw	r2,12(r4)
 4018b4c:	01400704 	movi	r5,28
 4018b50:	11400435 	stwio	r5,16(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
 4018b54:	20c00617 	ldw	r3,24(r4)
 4018b58:	18000c26 	beq	r3,zero,4018b8c <alt_avalon_i2c_irq+0x54>
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
 4018b5c:	defffe04 	addi	sp,sp,-8
 4018b60:	dfc00115 	stw	ra,4(sp)
 4018b64:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4018b68:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4018b6c:	00bfff84 	movi	r2,-2
 4018b70:	8084703a 	and	r2,r16,r2
 4018b74:	1001703a 	wrctl	status,r2
    * interrupt pre-emption.
    */
    if(dev->callback) 
    {
        cpu_sr = alt_irq_disable_all();
        dev->callback(dev);
 4018b78:	183ee83a 	callr	r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4018b7c:	8001703a 	wrctl	status,r16
        alt_irq_enable_all(cpu_sr);
    }

    return;
}
 4018b80:	dfc00117 	ldw	ra,4(sp)
 4018b84:	dc000017 	ldw	r16,0(sp)
 4018b88:	dec00204 	addi	sp,sp,8
 4018b8c:	f800283a 	ret

04018b90 <optional_irq_callback>:
{
   int timeout=100000;
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;
 4018b90:	22000717 	ldw	r8,28(r4)

   if (irq->irq_busy==2)  /*receive request*/
 4018b94:	00800084 	movi	r2,2
 4018b98:	40c00217 	ldw	r3,8(r8)
 4018b9c:	1880221e 	bne	r3,r2,4018c28 <optional_irq_callback+0x98>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
 4018ba0:	41c00017 	ldw	r7,0(r8)
 4018ba4:	41800117 	ldw	r6,4(r8)
}

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
 4018ba8:	0005883a 	mov	r2,zero
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 4018bac:	20c00317 	ldw	r3,12(r4)
 4018bb0:	19400737 	ldwio	r5,28(r3)
 4018bb4:	28000a26 	beq	r5,zero,4018be0 <optional_irq_callback+0x50>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 4018bb8:	19400137 	ldwio	r5,4(r3)
 4018bbc:	3887883a 	add	r3,r7,r2
 4018bc0:	19400005 	stb	r5,0(r3)
       *bytes_read+=1; 
 4018bc4:	10800044 	addi	r2,r2,1
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 4018bc8:	30bff81e 	bne	r6,r2,4018bac <__alt_data_end+0xfc018bac>
 4018bcc:	3000141e 	bne	r6,zero,4018c20 <optional_irq_callback+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 4018bd0:	20c00317 	ldw	r3,12(r4)
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 4018bd4:	3005883a 	mov	r2,r6
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 4018bd8:	19400737 	ldwio	r5,28(r3)
 4018bdc:	283ff61e 	bne	r5,zero,4018bb8 <__alt_data_end+0xfc018bb8>
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
       irq->size-=bytes_read;
 4018be0:	41400117 	ldw	r5,4(r8)
       irq->buffer+=bytes_read;
 4018be4:	41800017 	ldw	r6,0(r8)
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
       irq->size-=bytes_read;
 4018be8:	288bc83a 	sub	r5,r5,r2
       irq->buffer+=bytes_read;
 4018bec:	3085883a 	add	r2,r6,r2
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
       irq->size-=bytes_read;
 4018bf0:	41400115 	stw	r5,4(r8)
       irq->buffer+=bytes_read;
 4018bf4:	40800015 	stw	r2,0(r8)
       if (irq->size > 0)
 4018bf8:	28000c26 	beq	r5,zero,4018c2c <optional_irq_callback+0x9c>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 4018bfc:	00800704 	movi	r2,28
 4018c00:	18800435 	stwio	r2,16(r3)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 4018c04:	20c00317 	ldw	r3,12(r4)
 4018c08:	18c00304 	addi	r3,r3,12
 4018c0c:	18800037 	ldwio	r2,0(r3)
 4018c10:	108007cc 	andi	r2,r2,31
{
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    enabled_ints |= mask;
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 4018c14:	10800094 	ori	r2,r2,2
 4018c18:	18800035 	stwio	r2,0(r3)
 4018c1c:	f800283a 	ret
 4018c20:	20c00317 	ldw	r3,12(r4)
 4018c24:	003fee06 	br	4018be0 <__alt_data_end+0xfc018be0>
 4018c28:	20c00317 	ldw	r3,12(r4)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 4018c2c:	010000b4 	movhi	r4,2
 4018c30:	2121a804 	addi	r4,r4,-31072
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 4018c34:	19400504 	addi	r5,r3,20
 4018c38:	28800037 	ldwio	r2,0(r5)
 4018c3c:	1080004c 	andi	r2,r2,1
 4018c40:	213fffc4 	addi	r4,r4,-1
 4018c44:	1000071e 	bne	r2,zero,4018c64 <optional_irq_callback+0xd4>

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 4018c48:	18c00204 	addi	r3,r3,8
 4018c4c:	19000037 	ldwio	r4,0(r3)
 4018c50:	00bfff84 	movi	r2,-2
 4018c54:	2084703a 	and	r2,r4,r2
 4018c58:	18800035 	stwio	r2,0(r3)
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);

    irq->irq_busy=0;
 4018c5c:	40000215 	stw	zero,8(r8)
 4018c60:	f800283a 	ret
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
 4018c64:	203ff41e 	bne	r4,zero,4018c38 <__alt_data_end+0xfc018c38>
 4018c68:	003ff706 	br	4018c48 <__alt_data_end+0xfc018c48>

04018c6c <alt_avalon_i2c_register_optional_irq_handler>:
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
    dev->callback         = callback;
 4018c6c:	008100b4 	movhi	r2,1026
    irq->irq_busy=0;
}

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   irq_data->irq_busy=0;
 4018c70:	28000215 	stw	zero,8(r5)
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
    dev->callback         = callback;
 4018c74:	10a2e404 	addi	r2,r2,-29808
 4018c78:	20800615 	stw	r2,24(r4)
    dev->callback_context = context;
 4018c7c:	21400715 	stw	r5,28(r4)
    dev->control          = control;
 4018c80:	20000815 	stw	zero,32(r4)
 4018c84:	f800283a 	ret

04018c88 <alt_avalon_i2c_register_callback>:
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
    dev->callback         = callback;
 4018c88:	21400615 	stw	r5,24(r4)
    dev->callback_context = context;
 4018c8c:	21c00715 	stw	r7,28(r4)
    dev->control          = control;
 4018c90:	21800815 	stw	r6,32(r4)
 4018c94:	f800283a 	ret

04018c98 <alt_avalon_i2c_open>:
/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
    ALT_AVALON_I2C_DEV_t* dev = NULL;

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
 4018c98:	d165b704 	addi	r5,gp,-26916
 4018c9c:	401a7401 	jmpi	401a740 <alt_find_dev>

04018ca0 <alt_avalon_i2c_enable>:
}

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 4018ca0:	21400717 	ldw	r5,28(r4)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
 4018ca4:	20c00317 	ldw	r3,12(r4)
 4018ca8:	18800237 	ldwio	r2,8(r3)
   if (enable_status)
 4018cac:	1080004c 	andi	r2,r2,1
 4018cb0:	10000226 	beq	r2,zero,4018cbc <alt_avalon_i2c_enable+0x1c>
   {
     return ALT_AVALON_I2C_BUSY;
 4018cb4:	00bffe44 	movi	r2,-7
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);

   return ALT_AVALON_I2C_SUCCESS;
}
 4018cb8:	f800283a 	ret
   {
     return ALT_AVALON_I2C_BUSY;
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
 4018cbc:	21000617 	ldw	r4,24(r4)
 4018cc0:	008100b4 	movhi	r2,1026
 4018cc4:	10a2e404 	addi	r2,r2,-29808
 4018cc8:	20800626 	beq	r4,r2,4018ce4 <alt_avalon_i2c_enable+0x44>
   {
     irq_data->irq_busy=0;
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
 4018ccc:	18c00204 	addi	r3,r3,8
 4018cd0:	18800037 	ldwio	r2,0(r3)
 4018cd4:	10800054 	ori	r2,r2,1
 4018cd8:	18800035 	stwio	r2,0(r3)
 4018cdc:	0005883a 	mov	r2,zero
 4018ce0:	f800283a 	ret
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   {
     irq_data->irq_busy=0;
 4018ce4:	28000215 	stw	zero,8(r5)
 4018ce8:	003ff806 	br	4018ccc <__alt_data_end+0xfc018ccc>

04018cec <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 4018cec:	20800317 	ldw	r2,12(r4)
 4018cf0:	10800204 	addi	r2,r2,8
 4018cf4:	11000037 	ldwio	r4,0(r2)
 4018cf8:	00ffff84 	movi	r3,-2
 4018cfc:	20c6703a 	and	r3,r4,r3
 4018d00:	10c00035 	stwio	r3,0(r2)
 4018d04:	f800283a 	ret

04018d08 <alt_avalon_i2c_master_config_get>:
/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{

    cfg->addr_mode = i2c_dev->address_mode;
 4018d08:	20c00d17 	ldw	r3,52(r4)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
 4018d0c:	20800317 	ldw	r2,12(r4)
/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{

    cfg->addr_mode = i2c_dev->address_mode;
 4018d10:	28c00015 	stw	r3,0(r5)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
 4018d14:	10800237 	ldwio	r2,8(r2)
 4018d18:	1080008c 	andi	r2,r2,2
 4018d1c:	1005d07a 	srai	r2,r2,1

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
 4018d20:	20c00317 	ldw	r3,12(r4)
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{

    cfg->addr_mode = i2c_dev->address_mode;
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
 4018d24:	28800115 	stw	r2,4(r5)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
 4018d28:	18c00937 	ldwio	r3,36(r3)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
 4018d2c:	20800317 	ldw	r2,12(r4)
{

    cfg->addr_mode = i2c_dev->address_mode;
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
 4018d30:	28c0020d 	sth	r3,8(r5)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
 4018d34:	10c00837 	ldwio	r3,32(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
 4018d38:	20800317 	ldw	r2,12(r4)

    cfg->addr_mode = i2c_dev->address_mode;
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
 4018d3c:	28c0028d 	sth	r3,10(r5)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
 4018d40:	10800a37 	ldwio	r2,40(r2)
 4018d44:	2880030d 	sth	r2,12(r5)
 4018d48:	f800283a 	ret

04018d4c <alt_avalon_i2c_master_config_set>:
/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
    i2c_dev->address_mode   =   cfg->addr_mode;
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
 4018d4c:	21800317 	ldw	r6,12(r4)

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
    i2c_dev->address_mode   =   cfg->addr_mode;
 4018d50:	28800017 	ldw	r2,0(r5)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
 4018d54:	31800204 	addi	r6,r6,8

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
    i2c_dev->address_mode   =   cfg->addr_mode;
 4018d58:	20800d15 	stw	r2,52(r4)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
 4018d5c:	31c00037 	ldwio	r7,0(r6)
 4018d60:	00ffff44 	movi	r3,-3
 4018d64:	28800117 	ldw	r2,4(r5)
 4018d68:	38c6703a 	and	r3,r7,r3
 4018d6c:	1085883a 	add	r2,r2,r2
 4018d70:	1080008c 	andi	r2,r2,2
 4018d74:	10c4b03a 	or	r2,r2,r3
 4018d78:	30800035 	stwio	r2,0(r6)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
 4018d7c:	20800317 	ldw	r2,12(r4)
 4018d80:	28c0020b 	ldhu	r3,8(r5)
 4018d84:	10c00935 	stwio	r3,36(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
 4018d88:	20800317 	ldw	r2,12(r4)
 4018d8c:	28c0028b 	ldhu	r3,10(r5)
 4018d90:	10c00835 	stwio	r3,32(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
 4018d94:	20800317 	ldw	r2,12(r4)
 4018d98:	28c0030b 	ldhu	r3,12(r5)
 4018d9c:	10c00a35 	stwio	r3,40(r2)
 4018da0:	f800283a 	ret

04018da4 <alt_avalon_i2c_init>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 4018da4:	20800317 	ldw	r2,12(r4)

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
 4018da8:	defff904 	addi	sp,sp,-28
 4018dac:	dc000515 	stw	r16,20(sp)

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 4018db0:	10800204 	addi	r2,r2,8

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
 4018db4:	2021883a 	mov	r16,r4
 4018db8:	dfc00615 	stw	ra,24(sp)

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 4018dbc:	11000037 	ldwio	r4,0(r2)
 4018dc0:	00ffff84 	movi	r3,-2
 4018dc4:	20c6703a 	and	r3,r4,r3
 4018dc8:	10c00035 	stwio	r3,0(r2)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 4018dcc:	80800317 	ldw	r2,12(r16)
 4018dd0:	10800304 	addi	r2,r2,12
 4018dd4:	10c00037 	ldwio	r3,0(r2)
{
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   enabled_ints &=  (~mask);
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 4018dd8:	10000035 	stwio	zero,0(r2)

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 4018ddc:	80800317 	ldw	r2,12(r16)
 4018de0:	00c00704 	movi	r3,28
 4018de4:	10c00435 	stwio	r3,16(r2)

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
 4018de8:	80800317 	ldw	r2,12(r16)
 4018dec:	10800204 	addi	r2,r2,8
 4018df0:	10c00037 	ldwio	r3,0(r2)
 4018df4:	18c00314 	ori	r3,r3,12
 4018df8:	10c00035 	stwio	r3,0(r2)

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
 4018dfc:	80800317 	ldw	r2,12(r16)
 4018e00:	10800204 	addi	r2,r2,8
 4018e04:	10c00037 	ldwio	r3,0(r2)
 4018e08:	18c00c14 	ori	r3,r3,48
 4018e0c:	10c00035 	stwio	r3,0(r2)
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
 4018e10:	81000c17 	ldw	r4,48(r16)
 4018e14:	014000f4 	movhi	r5,3
 4018e18:	29435004 	addi	r5,r5,3392
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
 4018e1c:	d8000215 	stw	zero,8(sp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
 4018e20:	d8000115 	stw	zero,4(sp)
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
 4018e24:	400a9780 	call	400a978 <__udivsi3>

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 4018e28:	11bff104 	addi	r6,r2,-60
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    }

    cfg->scl_lcnt = scl_lcnt;
    cfg->scl_hcnt = scl_hcnt;
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
 4018e2c:	3006d07a 	srli	r3,r6,1
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    }

    cfg->scl_lcnt = scl_lcnt;
    cfg->scl_hcnt = scl_hcnt;
 4018e30:	10800f04 	addi	r2,r2,60
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
 4018e34:	d9400104 	addi	r5,sp,4
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    }

    cfg->scl_lcnt = scl_lcnt;
    cfg->scl_hcnt = scl_hcnt;
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
 4018e38:	30c7c83a 	sub	r3,r6,r3
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
 4018e3c:	8009883a 	mov	r4,r16
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    }

    cfg->scl_lcnt = scl_lcnt;
 4018e40:	d980038d 	sth	r6,14(sp)
    cfg->scl_hcnt = scl_hcnt;
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
 4018e44:	d8c0040d 	sth	r3,16(sp)
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    }

    cfg->scl_lcnt = scl_lcnt;
    cfg->scl_hcnt = scl_hcnt;
 4018e48:	d880030d 	sth	r2,12(sp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
 4018e4c:	4018d4c0 	call	4018d4c <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
 4018e50:	8009883a 	mov	r4,r16
 4018e54:	d165b704 	addi	r5,gp,-26916
 4018e58:	401a60c0 	call	401a60c <alt_dev_llist_insert>
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);

    if (!error)
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
 4018e5c:	81400517 	ldw	r5,20(r16)
 4018e60:	81000417 	ldw	r4,16(r16)
 4018e64:	018100b4 	movhi	r6,1026
 4018e68:	31a2ce04 	addi	r6,r6,-29896
 4018e6c:	d8000015 	stw	zero,0(sp)
 4018e70:	800f883a 	mov	r7,r16
 4018e74:	401a7bc0 	call	401a7bc <alt_ic_isr_register>
        alt_printf("failed to create semaphores\n");
    }

    return;

}
 4018e78:	dfc00617 	ldw	ra,24(sp)
 4018e7c:	dc000517 	ldw	r16,20(sp)
 4018e80:	dec00704 	addi	sp,sp,28
 4018e84:	f800283a 	ret

04018e88 <alt_avalon_i2c_master_config_speed_get>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
 4018e88:	2880028b 	ldhu	r2,10(r5)
 4018e8c:	1000021e 	bne	r2,zero,4018e98 <alt_avalon_i2c_master_config_speed_get+0x10>
   {
       return ALT_AVALON_I2C_BAD_ARG;
 4018e90:	00bfff44 	movi	r2,-3
 4018e94:	f800283a 	ret
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
 4018e98:	2940020b 	ldhu	r5,8(r5)
 4018e9c:	283ffc26 	beq	r5,zero,4018e90 <__alt_data_end+0xfc018e90>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
 4018ea0:	21000c17 	ldw	r4,48(r4)
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
 4018ea4:	defffe04 	addi	sp,sp,-8
   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   {
       return ALT_AVALON_I2C_BAD_ARG;
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
 4018ea8:	114b883a 	add	r5,r2,r5
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
 4018eac:	dc000015 	stw	r16,0(sp)
 4018eb0:	dfc00115 	stw	ra,4(sp)
 4018eb4:	3021883a 	mov	r16,r6
   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   {
       return ALT_AVALON_I2C_BAD_ARG;
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
 4018eb8:	400a9780 	call	400a978 <__udivsi3>
 4018ebc:	80800015 	stw	r2,0(r16)

   return ALT_AVALON_I2C_SUCCESS;
 4018ec0:	0005883a 	mov	r2,zero
}
 4018ec4:	dfc00117 	ldw	ra,4(sp)
 4018ec8:	dc000017 	ldw	r16,0(sp)
 4018ecc:	dec00204 	addi	sp,sp,8
 4018ed0:	f800283a 	ret

04018ed4 <alt_avalon_i2c_master_config_speed_set>:
                                                alt_u32 speed_in_hz)
{
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
 4018ed4:	00c001b4 	movhi	r3,6
 4018ed8:	30bfffc4 	addi	r2,r6,-1
 4018edc:	18c69fc4 	addi	r3,r3,6783
 4018ee0:	1880022e 	bgeu	r3,r2,4018eec <alt_avalon_i2c_master_config_speed_set+0x18>
    {
        return ALT_AVALON_I2C_RANGE;
 4018ee4:	00bfff04 	movi	r2,-4
 4018ee8:	f800283a 	ret
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
 4018eec:	21000c17 	ldw	r4,48(r4)
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
 4018ef0:	defffd04 	addi	sp,sp,-12
 4018ef4:	dc400115 	stw	r17,4(sp)
 4018ef8:	2823883a 	mov	r17,r5
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
 4018efc:	318b883a 	add	r5,r6,r6
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
 4018f00:	dc000015 	stw	r16,0(sp)
 4018f04:	dfc00215 	stw	ra,8(sp)
 4018f08:	3021883a 	mov	r16,r6
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
 4018f0c:	400a9780 	call	400a978 <__udivsi3>

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
 4018f10:	00c000b4 	movhi	r3,2
 4018f14:	18e1a804 	addi	r3,r3,-31072

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 4018f18:	11000f04 	addi	r4,r2,60
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 4018f1c:	10bff104 	addi	r2,r2,-60

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
 4018f20:	1c000c36 	bltu	r3,r16,4018f54 <alt_avalon_i2c_master_config_speed_set+0x80>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
 4018f24:	88000115 	stw	zero,4(r17)
    }

    cfg->scl_lcnt = scl_lcnt;
    cfg->scl_hcnt = scl_hcnt;
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
 4018f28:	1006d07a 	srli	r3,r2,1
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    }

    cfg->scl_lcnt = scl_lcnt;
 4018f2c:	8880028d 	sth	r2,10(r17)
    cfg->scl_hcnt = scl_hcnt;
 4018f30:	8900020d 	sth	r4,8(r17)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
 4018f34:	10c5c83a 	sub	r2,r2,r3
 4018f38:	8880030d 	sth	r2,12(r17)
 4018f3c:	0005883a 	mov	r2,zero

    return ALT_AVALON_I2C_SUCCESS;

}
 4018f40:	dfc00217 	ldw	ra,8(sp)
 4018f44:	dc400117 	ldw	r17,4(sp)
 4018f48:	dc000017 	ldw	r16,0(sp)
 4018f4c:	dec00304 	addi	sp,sp,12
 4018f50:	f800283a 	ret
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
 4018f54:	00c00044 	movi	r3,1
 4018f58:	88c00115 	stw	r3,4(r17)
 4018f5c:	003ff206 	br	4018f28 <__alt_data_end+0xfc018f28>

04018f60 <alt_avalon_i2c_is_busy>:
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 4018f60:	20800317 	ldw	r2,12(r4)
 4018f64:	10800537 	ldwio	r2,20(r2)
    {
       return ALT_AVALON_I2C_TRUE;
    }

    return ALT_AVALON_I2C_FALSE;
}
 4018f68:	1080004c 	andi	r2,r2,1
 4018f6c:	f800283a 	ret

04018f70 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
 4018f70:	38000015 	stw	zero,0(r7)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 4018f74:	20c00317 	ldw	r3,12(r4)
 4018f78:	18800737 	ldwio	r2,28(r3)
 4018f7c:	10000926 	beq	r2,zero,4018fa4 <alt_avalon_i2c_rx_read_available+0x34>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 4018f80:	38800017 	ldw	r2,0(r7)
 4018f84:	2885883a 	add	r2,r5,r2
 4018f88:	18c00137 	ldwio	r3,4(r3)
 4018f8c:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
 4018f90:	38800017 	ldw	r2,0(r7)
 4018f94:	10800044 	addi	r2,r2,1
 4018f98:	38800015 	stw	r2,0(r7)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 4018f9c:	11bff51e 	bne	r2,r6,4018f74 <__alt_data_end+0xfc018f74>
 4018fa0:	303ff426 	beq	r6,zero,4018f74 <__alt_data_end+0xfc018f74>
 4018fa4:	f800283a 	ret

04018fa8 <alt_avalon_i2c_rx_read>:
    }
}

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
 4018fa8:	defffb04 	addi	sp,sp,-20
 4018fac:	dc000015 	stw	r16,0(sp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 4018fb0:	040000b4 	movhi	r16,2
    }
}

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
 4018fb4:	dcc00315 	stw	r19,12(sp)
 4018fb8:	dc800215 	stw	r18,8(sp)
 4018fbc:	dc400115 	stw	r17,4(sp)
 4018fc0:	dfc00415 	stw	ra,16(sp)
 4018fc4:	2025883a 	mov	r18,r4
 4018fc8:	2827883a 	mov	r19,r5
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 4018fcc:	8421a804 	addi	r16,r16,-31072
 4018fd0:	20c00317 	ldw	r3,12(r4)
    {
      if (timeout<10) alt_busy_sleep(10000);
 4018fd4:	04400244 	movi	r17,9
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 4018fd8:	00000206 	br	4018fe4 <alt_avalon_i2c_rx_read+0x3c>
 4018fdc:	843fffc4 	addi	r16,r16,-1
    {
      if (timeout<10) alt_busy_sleep(10000);
      if (--timeout == 0)
 4018fe0:	80000826 	beq	r16,zero,4019004 <alt_avalon_i2c_rx_read+0x5c>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 4018fe4:	18800737 	ldwio	r2,28(r3)
 4018fe8:	1000081e 	bne	r2,zero,401900c <alt_avalon_i2c_rx_read+0x64>
    {
      if (timeout<10) alt_busy_sleep(10000);
 4018fec:	8c3ffb36 	bltu	r17,r16,4018fdc <__alt_data_end+0xfc018fdc>
 4018ff0:	0109c404 	movi	r4,10000
 4018ff4:	401a5800 	call	401a580 <alt_busy_sleep>
 4018ff8:	843fffc4 	addi	r16,r16,-1
 4018ffc:	90c00317 	ldw	r3,12(r18)
      if (--timeout == 0)
 4019000:	803ff81e 	bne	r16,zero,4018fe4 <__alt_data_end+0xfc018fe4>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
 4019004:	00bfff84 	movi	r2,-2
 4019008:	00000106 	br	4019010 <alt_avalon_i2c_rx_read+0x68>
}

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
 401900c:	0005883a 	mov	r2,zero
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 4019010:	18c00137 	ldwio	r3,4(r3)
 4019014:	98c00005 	stb	r3,0(r19)
        
    return status;
}
 4019018:	dfc00417 	ldw	ra,16(sp)
 401901c:	dcc00317 	ldw	r19,12(sp)
 4019020:	dc800217 	ldw	r18,8(sp)
 4019024:	dc400117 	ldw	r17,4(sp)
 4019028:	dc000017 	ldw	r16,0(sp)
 401902c:	dec00504 	addi	sp,sp,20
 4019030:	f800283a 	ret

04019034 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
 4019034:	defff904 	addi	sp,sp,-28
 4019038:	dd400515 	stw	r21,20(sp)
 401903c:	dd000415 	stw	r20,16(sp)
 4019040:	dcc00315 	stw	r19,12(sp)
 4019044:	dc800215 	stw	r18,8(sp)
 4019048:	dc400115 	stw	r17,4(sp)
 401904c:	dc000015 	stw	r16,0(sp)
 4019050:	dfc00615 	stw	ra,24(sp)
 4019054:	2023883a 	mov	r17,r4
 4019058:	2829883a 	mov	r20,r5
 401905c:	302b883a 	mov	r21,r6
 4019060:	3827883a 	mov	r19,r7
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 4019064:	0409c404 	movi	r16,10000
    {
      if (timeout<10) alt_busy_sleep(10000);    
 4019068:	04800244 	movi	r18,9
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 401906c:	00000206 	br	4019078 <alt_avalon_i2c_cmd_write+0x44>
 4019070:	843fffc4 	addi	r16,r16,-1
    {
      if (timeout<10) alt_busy_sleep(10000);    
      if (--timeout == 0)
 4019074:	80000926 	beq	r16,zero,401909c <alt_avalon_i2c_cmd_write+0x68>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 4019078:	88c00317 	ldw	r3,12(r17)
 401907c:	18800437 	ldwio	r2,16(r3)
 4019080:	1080004c 	andi	r2,r2,1
 4019084:	1000071e 	bne	r2,zero,40190a4 <alt_avalon_i2c_cmd_write+0x70>
    {
      if (timeout<10) alt_busy_sleep(10000);    
 4019088:	943ff936 	bltu	r18,r16,4019070 <__alt_data_end+0xfc019070>
 401908c:	0109c404 	movi	r4,10000
 4019090:	843fffc4 	addi	r16,r16,-1
 4019094:	401a5800 	call	401a580 <alt_busy_sleep>
      if (--timeout == 0)
 4019098:	803ff71e 	bne	r16,zero,4019078 <__alt_data_end+0xfc019078>
      {
        return ALT_AVALON_I2C_TIMEOUT;
 401909c:	00bfff84 	movi	r2,-2
 40190a0:	00001106 	br	40190e8 <alt_avalon_i2c_cmd_write+0xb4>
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
 40190a4:	a8803fcc 	andi	r2,r21,255
 40190a8:	1004927a 	slli	r2,r2,9
 40190ac:	9cc03fcc 	andi	r19,r19,255
 40190b0:	9826923a 	slli	r19,r19,8
 40190b4:	a5003fcc 	andi	r20,r20,255
 40190b8:	1504b03a 	or	r2,r2,r20
 40190bc:	14c4b03a 	or	r2,r2,r19
 40190c0:	18800035 	stwio	r2,0(r3)
}

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
 40190c4:	88c00317 	ldw	r3,12(r17)
 40190c8:	18800437 	ldwio	r2,16(r3)
 40190cc:	1080010c 	andi	r2,r2,4
 40190d0:	10000e1e 	bne	r2,zero,401910c <alt_avalon_i2c_cmd_write+0xd8>
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 40190d4:	0005883a 	mov	r2,zero
}

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
 40190d8:	18c00437 	ldwio	r3,16(r3)
 40190dc:	18c0020c 	andi	r3,r3,8
 40190e0:	18000126 	beq	r3,zero,40190e8 <alt_avalon_i2c_cmd_write+0xb4>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
 40190e4:	00bffe84 	movi	r2,-6
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
    
    return status;
}
 40190e8:	dfc00617 	ldw	ra,24(sp)
 40190ec:	dd400517 	ldw	r21,20(sp)
 40190f0:	dd000417 	ldw	r20,16(sp)
 40190f4:	dcc00317 	ldw	r19,12(sp)
 40190f8:	dc800217 	ldw	r18,8(sp)
 40190fc:	dc400117 	ldw	r17,4(sp)
 4019100:	dc000017 	ldw	r16,0(sp)
 4019104:	dec00704 	addi	sp,sp,28
 4019108:	f800283a 	ret
/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 401910c:	00bffec4 	movi	r2,-5
 4019110:	003ff106 	br	40190d8 <__alt_data_end+0xfc0190d8>

04019114 <alt_avalon_i2c_send_address>:
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
 4019114:	21c00d17 	ldw	r7,52(r4)
 4019118:	00c00044 	movi	r3,1
 401911c:	38c00726 	beq	r7,r3,401913c <alt_avalon_i2c_send_address+0x28>
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 4019120:	20800917 	ldw	r2,36(r4)
 4019124:	000f883a 	mov	r7,zero
 4019128:	31803fcc 	andi	r6,r6,255
 401912c:	1085883a 	add	r2,r2,r2
 4019130:	114ab03a 	or	r5,r2,r5
 4019134:	29403fcc 	andi	r5,r5,255
 4019138:	40190341 	jmpi	4019034 <alt_avalon_i2c_cmd_write>
{
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 401913c:	20800917 	ldw	r2,36(r4)
 4019140:	00ffff84 	movi	r3,-2

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
 4019144:	defffe04 	addi	sp,sp,-8
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 4019148:	109e0014 	ori	r2,r2,30720
 401914c:	1004d1fa 	srli	r2,r2,7
 4019150:	000f883a 	mov	r7,zero
 4019154:	31803fcc 	andi	r6,r6,255
 4019158:	10c4703a 	and	r2,r2,r3
 401915c:	114ab03a 	or	r5,r2,r5
 4019160:	29403fcc 	andi	r5,r5,255

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
 4019164:	dc000015 	stw	r16,0(sp)
 4019168:	dfc00115 	stw	ra,4(sp)
 401916c:	2021883a 	mov	r16,r4
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 4019170:	40190340 	call	4019034 <alt_avalon_i2c_cmd_write>
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
 4019174:	81400903 	ldbu	r5,36(r16)
 4019178:	000f883a 	mov	r7,zero
 401917c:	000d883a 	mov	r6,zero
 4019180:	8009883a 	mov	r4,r16
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
    }
    
    return status;
}
 4019184:	dfc00117 	ldw	ra,4(sp)
 4019188:	dc000017 	ldw	r16,0(sp)
 401918c:	dec00204 	addi	sp,sp,8
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
 4019190:	40190341 	jmpi	4019034 <alt_avalon_i2c_cmd_write>

04019194 <alt_avalon_i2c_master_target_get>:
}

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
    *target_addr=i2c_dev->master_target_address;
 4019194:	20800917 	ldw	r2,36(r4)
 4019198:	28800015 	stw	r2,0(r5)
 401919c:	f800283a 	ret

040191a0 <alt_avalon_i2c_master_target_set>:
}

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
    i2c_dev->master_target_address=target_addr;
 40191a0:	21400915 	stw	r5,36(r4)
 40191a4:	f800283a 	ret

040191a8 <alt_avalon_i2c_check_nack>:
}

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
 40191a8:	20800317 	ldw	r2,12(r4)
 40191ac:	10800437 	ldwio	r2,16(r2)
 40191b0:	1080010c 	andi	r2,r2,4
 40191b4:	10000226 	beq	r2,zero,40191c0 <alt_avalon_i2c_check_nack+0x18>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 40191b8:	00bffec4 	movi	r2,-5
 40191bc:	28800015 	stw	r2,0(r5)
 40191c0:	f800283a 	ret

040191c4 <alt_avalon_i2c_check_arblost>:
}

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
 40191c4:	20800317 	ldw	r2,12(r4)
 40191c8:	10800437 	ldwio	r2,16(r2)
 40191cc:	1080020c 	andi	r2,r2,8
 40191d0:	10000226 	beq	r2,zero,40191dc <alt_avalon_i2c_check_arblost+0x18>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
 40191d4:	00bffe84 	movi	r2,-6
 40191d8:	28800015 	stw	r2,0(r5)
 40191dc:	f800283a 	ret

040191e0 <alt_avalon_i2c_interrupt_transaction_status>:
    }
}

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 40191e0:	defffa04 	addi	sp,sp,-24
 40191e4:	dc800215 	stw	r18,8(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 40191e8:	24800717 	ldw	r18,28(r4)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 40191ec:	20800317 	ldw	r2,12(r4)
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
    }
}

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 40191f0:	dfc00515 	stw	ra,20(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
    alt_u32 timeout=10000 * irq_data->size + 10000;
 40191f4:	91c00117 	ldw	r7,4(r18)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 40191f8:	10800304 	addi	r2,r2,12
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
    }
}

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 40191fc:	dd000415 	stw	r20,16(sp)
 4019200:	dcc00315 	stw	r19,12(sp)
 4019204:	dc400115 	stw	r17,4(sp)
 4019208:	dc000015 	stw	r16,0(sp)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 401920c:	11800037 	ldwio	r6,0(r2)
 4019210:	11400037 	ldwio	r5,0(r2)
{
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   enabled_ints &=  (~mask);
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 4019214:	30c007cc 	andi	r3,r6,31
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 4019218:	294007cc 	andi	r5,r5,31
{
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   enabled_ints &=  (~mask);
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 401921c:	00c6303a 	nor	r3,zero,r3
 4019220:	1946703a 	and	r3,r3,r5
 4019224:	10c00035 	stwio	r3,0(r2)
}

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
 4019228:	24000317 	ldw	r16,12(r4)
 401922c:	80800437 	ldwio	r2,16(r16)
 4019230:	1080010c 	andi	r2,r2,4
 4019234:	10000b26 	beq	r2,zero,4019264 <alt_avalon_i2c_interrupt_transaction_status+0x84>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
 4019238:	90800217 	ldw	r2,8(r18)
 401923c:	1000121e 	bne	r2,zero,4019288 <alt_avalon_i2c_interrupt_transaction_status+0xa8>
/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 4019240:	00bffec4 	movi	r2,-5
        return ALT_AVALON_I2C_BUSY;
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
}
 4019244:	dfc00517 	ldw	ra,20(sp)
 4019248:	dd000417 	ldw	r20,16(sp)
 401924c:	dcc00317 	ldw	r19,12(sp)
 4019250:	dc800217 	ldw	r18,8(sp)
 4019254:	dc400117 	ldw	r17,4(sp)
 4019258:	dc000017 	ldw	r16,0(sp)
 401925c:	dec00604 	addi	sp,sp,24
 4019260:	f800283a 	ret
      
      /*return nack error so transaction can be retried*/
      return status;
    }
    
    if (irq_data->irq_busy)
 4019264:	90800217 	ldw	r2,8(r18)
 4019268:	103ff626 	beq	r2,zero,4019244 <__alt_data_end+0xfc019244>
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 401926c:	84000304 	addi	r16,r16,12
 4019270:	80800037 	ldwio	r2,0(r16)
{
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    enabled_ints |= mask;
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 4019274:	118cb03a 	or	r6,r2,r6
 4019278:	318007cc 	andi	r6,r6,31
 401927c:	81800035 	stwio	r6,0(r16)
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
 4019280:	00bffe44 	movi	r2,-7
 4019284:	003fef06 	br	4019244 <__alt_data_end+0xfc019244>
 4019288:	2023883a 	mov	r17,r4

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
    alt_u32 timeout=10000 * irq_data->size + 10000;
 401928c:	0149c404 	movi	r5,10000
 4019290:	39000044 	addi	r4,r7,1
 4019294:	400aa340 	call	400aa34 <__mulsi3>
 4019298:	1027883a 	mov	r19,r2
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
              if (timeout<10) alt_busy_sleep(10000);
 401929c:	05000244 	movi	r20,9
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 40192a0:	80800537 	ldwio	r2,20(r16)
 40192a4:	1080004c 	andi	r2,r2,1
 40192a8:	1000101e 	bne	r2,zero,40192ec <alt_avalon_i2c_interrupt_transaction_status+0x10c>
/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 40192ac:	00bffec4 	movi	r2,-5
 40192b0:	90c00017 	ldw	r3,0(r18)
 40192b4:	00000406 	br	40192c8 <alt_avalon_i2c_interrupt_transaction_status+0xe8>
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 40192b8:	81000137 	ldwio	r4,4(r16)
 40192bc:	19000005 	stb	r4,0(r3)
 40192c0:	8c000317 	ldw	r16,12(r17)
 40192c4:	18c00044 	addi	r3,r3,1
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 40192c8:	81000737 	ldwio	r4,28(r16)
 40192cc:	203ffa1e 	bne	r4,zero,40192b8 <__alt_data_end+0xfc0192b8>

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 40192d0:	84000204 	addi	r16,r16,8
 40192d4:	81000037 	ldwio	r4,0(r16)
 40192d8:	00ffff84 	movi	r3,-2
 40192dc:	20c6703a 	and	r3,r4,r3
 40192e0:	80c00035 	stwio	r3,0(r16)
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
          
        /*abort the transaction */
        irq_data->irq_busy=0;
 40192e4:	90000215 	stw	zero,8(r18)
 40192e8:	003fd606 	br	4019244 <__alt_data_end+0xfc019244>
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
              if (timeout<10) alt_busy_sleep(10000);
 40192ec:	a4c0042e 	bgeu	r20,r19,4019300 <alt_avalon_i2c_interrupt_transaction_status+0x120>
              if (--timeout == 0)
 40192f0:	9cffffc4 	addi	r19,r19,-1
 40192f4:	983fea1e 	bne	r19,zero,40192a0 <__alt_data_end+0xfc0192a0>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
 40192f8:	00bfff84 	movi	r2,-2
 40192fc:	003fec06 	br	40192b0 <__alt_data_end+0xfc0192b0>
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
              if (timeout<10) alt_busy_sleep(10000);
 4019300:	0109c404 	movi	r4,10000
 4019304:	401a5800 	call	401a580 <alt_busy_sleep>
 4019308:	8c000317 	ldw	r16,12(r17)
 401930c:	003ff806 	br	40192f0 <__alt_data_end+0xfc0192f0>

04019310 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 4019310:	defff904 	addi	sp,sp,-28
 4019314:	dd400515 	stw	r21,20(sp)
 4019318:	dfc00615 	stw	ra,24(sp)
 401931c:	dd000415 	stw	r20,16(sp)
 4019320:	dcc00315 	stw	r19,12(sp)
 4019324:	dc800215 	stw	r18,8(sp)
 4019328:	dc400115 	stw	r17,4(sp)
 401932c:	dc000015 	stw	r16,0(sp)
 4019330:	dd400717 	ldw	r21,28(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size * 10000;
    
    if (size==0)
 4019334:	30003b26 	beq	r6,zero,4019424 <alt_avalon_i2c_master_transmit+0x114>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 4019338:	3c403fcc 	andi	r17,r7,255
 401933c:	3029883a 	mov	r20,r6
 4019340:	2025883a 	mov	r18,r4
 4019344:	2821883a 	mov	r16,r5
 4019348:	88004026 	beq	r17,zero,401944c <alt_avalon_i2c_master_transmit+0x13c>
      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 401934c:	880d883a 	mov	r6,r17
 4019350:	000b883a 	mov	r5,zero
 4019354:	9009883a 	mov	r4,r18
 4019358:	40191140 	call	4019114 <alt_avalon_i2c_send_address>
 401935c:	1023883a 	mov	r17,r2
      
    if (status == ALT_AVALON_I2C_SUCCESS)
 4019360:	10001826 	beq	r2,zero,40193c4 <alt_avalon_i2c_master_transmit+0xb4>
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size * 10000;
 4019364:	0149c404 	movi	r5,10000
 4019368:	a009883a 	mov	r4,r20
 401936c:	400aa340 	call	400aa34 <__mulsi3>
 4019370:	90c00317 	ldw	r3,12(r18)
 4019374:	1021883a 	mov	r16,r2
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
 4019378:	04c00244 	movi	r19,9
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 401937c:	18800537 	ldwio	r2,20(r3)
 4019380:	1080004c 	andi	r2,r2,1
 4019384:	10000426 	beq	r2,zero,4019398 <alt_avalon_i2c_master_transmit+0x88>
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
 4019388:	9c00362e 	bgeu	r19,r16,4019464 <alt_avalon_i2c_master_transmit+0x154>
            if (--timeout == 0)
 401938c:	843fffc4 	addi	r16,r16,-1
 4019390:	803ffa1e 	bne	r16,zero,401937c <__alt_data_end+0xfc01937c>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 4019394:	047fff84 	movi	r17,-2
}

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
 4019398:	18800437 	ldwio	r2,16(r3)
 401939c:	1080010c 	andi	r2,r2,4
 40193a0:	10000126 	beq	r2,zero,40193a8 <alt_avalon_i2c_master_transmit+0x98>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 40193a4:	047ffec4 	movi	r17,-5

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 40193a8:	18c00204 	addi	r3,r3,8
 40193ac:	19000037 	ldwio	r4,0(r3)
 40193b0:	00bfff84 	movi	r2,-2
 40193b4:	2084703a 	and	r2,r4,r2
 40193b8:	18800035 	stwio	r2,0(r3)
 40193bc:	8805883a 	mov	r2,r17
 40193c0:	00001906 	br	4019428 <alt_avalon_i2c_master_transmit+0x118>
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 40193c4:	00800044 	movi	r2,1
 40193c8:	15002a2e 	bgeu	r2,r20,4019474 <alt_avalon_i2c_master_transmit+0x164>
 40193cc:	a4ffffc4 	addi	r19,r20,-1
 40193d0:	84e7883a 	add	r19,r16,r19
 40193d4:	00000106 	br	40193dc <alt_avalon_i2c_master_transmit+0xcc>
 40193d8:	103fe21e 	bne	r2,zero,4019364 <__alt_data_end+0xfc019364>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 40193dc:	81400003 	ldbu	r5,0(r16)
 40193e0:	000f883a 	mov	r7,zero
 40193e4:	000d883a 	mov	r6,zero
 40193e8:	9009883a 	mov	r4,r18
 40193ec:	40190340 	call	4019034 <alt_avalon_i2c_cmd_write>
            
            ++buffer;
 40193f0:	84000044 	addi	r16,r16,1
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 40193f4:	1023883a 	mov	r17,r2
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 40193f8:	84fff71e 	bne	r16,r19,40193d8 <__alt_data_end+0xfc0193d8>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 40193fc:	103fd91e 	bne	r2,zero,4019364 <__alt_data_end+0xfc019364>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 4019400:	99400003 	ldbu	r5,0(r19)
 4019404:	ad403fcc 	andi	r21,r21,255
 4019408:	a80f883a 	mov	r7,r21
 401940c:	000d883a 	mov	r6,zero
 4019410:	9009883a 	mov	r4,r18
 4019414:	40190340 	call	4019034 <alt_avalon_i2c_cmd_write>
 4019418:	1023883a 	mov	r17,r2
            --size;
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 401941c:	a83fd11e 	bne	r21,zero,4019364 <__alt_data_end+0xfc019364>
 4019420:	103fd01e 	bne	r2,zero,4019364 <__alt_data_end+0xfc019364>
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size * 10000;
    
    if (size==0)
    {
      return ALT_AVALON_I2C_SUCCESS;
 4019424:	0005883a 	mov	r2,zero
        alt_avalon_i2c_disable(i2c_dev);
    }


    return status;
}
 4019428:	dfc00617 	ldw	ra,24(sp)
 401942c:	dd400517 	ldw	r21,20(sp)
 4019430:	dd000417 	ldw	r20,16(sp)
 4019434:	dcc00317 	ldw	r19,12(sp)
 4019438:	dc800217 	ldw	r18,8(sp)
 401943c:	dc400117 	ldw	r17,4(sp)
 4019440:	dc000017 	ldw	r16,0(sp)
 4019444:	dec00704 	addi	sp,sp,28
 4019448:	f800283a 	ret
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 401944c:	4018ca00 	call	4018ca0 <alt_avalon_i2c_enable>
      if (status != ALT_AVALON_I2C_SUCCESS)
 4019450:	103ff51e 	bne	r2,zero,4019428 <__alt_data_end+0xfc019428>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 4019454:	90800317 	ldw	r2,12(r18)
 4019458:	00c00704 	movi	r3,28
 401945c:	10c00435 	stwio	r3,16(r2)
 4019460:	003fba06 	br	401934c <__alt_data_end+0xfc01934c>
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
 4019464:	0109c404 	movi	r4,10000
 4019468:	401a5800 	call	401a580 <alt_busy_sleep>
 401946c:	90c00317 	ldw	r3,12(r18)
 4019470:	003fc606 	br	401938c <__alt_data_end+0xfc01938c>
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 4019474:	8027883a 	mov	r19,r16
 4019478:	003fe106 	br	4019400 <__alt_data_end+0xfc019400>

0401947c <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 401947c:	defff804 	addi	sp,sp,-32
 4019480:	dd000415 	stw	r20,16(sp)
 4019484:	dfc00715 	stw	ra,28(sp)
 4019488:	dd800615 	stw	r22,24(sp)
 401948c:	dd400515 	stw	r21,20(sp)
 4019490:	dcc00315 	stw	r19,12(sp)
 4019494:	dc800215 	stw	r18,8(sp)
 4019498:	dc400115 	stw	r17,4(sp)
 401949c:	dc000015 	stw	r16,0(sp)
 40194a0:	dd000817 	ldw	r20,32(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size*10000;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
    
    if (size==0)
 40194a4:	30003926 	beq	r6,zero,401958c <alt_avalon_i2c_master_transmit_using_interrupts+0x110>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 40194a8:	20c00617 	ldw	r3,24(r4)
 40194ac:	008100b4 	movhi	r2,1026
 40194b0:	10a2e404 	addi	r2,r2,-29808
 40194b4:	2025883a 	mov	r18,r4
 40194b8:	18803626 	beq	r3,r2,4019594 <alt_avalon_i2c_master_transmit_using_interrupts+0x118>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 40194bc:	00bfff44 	movi	r2,-3
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
       }
    }
    
    return status;
}
 40194c0:	dfc00717 	ldw	ra,28(sp)
 40194c4:	dd800617 	ldw	r22,24(sp)
 40194c8:	dd400517 	ldw	r21,20(sp)
 40194cc:	dd000417 	ldw	r20,16(sp)
 40194d0:	dcc00317 	ldw	r19,12(sp)
 40194d4:	dc800217 	ldw	r18,8(sp)
 40194d8:	dc400117 	ldw	r17,4(sp)
 40194dc:	dc000017 	ldw	r16,0(sp)
 40194e0:	dec00804 	addi	sp,sp,32
 40194e4:	f800283a 	ret
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 40194e8:	00800044 	movi	r2,1
 40194ec:	1440522e 	bgeu	r2,r17,4019638 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
 40194f0:	8dbfffc4 	addi	r22,r17,-1
 40194f4:	9dad883a 	add	r22,r19,r22
 40194f8:	00000106 	br	4019500 <alt_avalon_i2c_master_transmit_using_interrupts+0x84>
 40194fc:	1000351e 	bne	r2,zero,40195d4 <alt_avalon_i2c_master_transmit_using_interrupts+0x158>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 4019500:	99400003 	ldbu	r5,0(r19)
 4019504:	000f883a 	mov	r7,zero
 4019508:	000d883a 	mov	r6,zero
 401950c:	9009883a 	mov	r4,r18
 4019510:	40190340 	call	4019034 <alt_avalon_i2c_cmd_write>
            
            ++buffer;
 4019514:	9cc00044 	addi	r19,r19,1
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 4019518:	1021883a 	mov	r16,r2
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 401951c:	b4fff71e 	bne	r22,r19,40194fc <__alt_data_end+0xfc0194fc>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 4019520:	10002c1e 	bne	r2,zero,40195d4 <alt_avalon_i2c_master_transmit_using_interrupts+0x158>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 4019524:	b1400003 	ldbu	r5,0(r22)
 4019528:	a5003fcc 	andi	r20,r20,255
 401952c:	a00f883a 	mov	r7,r20
 4019530:	000d883a 	mov	r6,zero
 4019534:	9009883a 	mov	r4,r18
 4019538:	40190340 	call	4019034 <alt_avalon_i2c_cmd_write>
 401953c:	1021883a 	mov	r16,r2
            --size;
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 4019540:	1000241e 	bne	r2,zero,40195d4 <alt_avalon_i2c_master_transmit_using_interrupts+0x158>
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
    }
    else
    {
       if (issue_stop)
 4019544:	a0001126 	beq	r20,zero,401958c <alt_avalon_i2c_master_transmit_using_interrupts+0x110>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 4019548:	90800317 	ldw	r2,12(r18)
 401954c:	00c00704 	movi	r3,28
 4019550:	10c00435 	stwio	r3,16(r2)

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
 4019554:	90800317 	ldw	r2,12(r18)
 4019558:	10800204 	addi	r2,r2,8
 401955c:	11000037 	ldwio	r4,0(r2)
 4019560:	00fffcc4 	movi	r3,-13
 4019564:	20c6703a 	and	r3,r4,r3
 4019568:	10c00035 	stwio	r3,0(r2)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 401956c:	90c00317 	ldw	r3,12(r18)
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
 4019570:	00800044 	movi	r2,1
 4019574:	a8800215 	stw	r2,8(r21)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 4019578:	18c00304 	addi	r3,r3,12
 401957c:	18800037 	ldwio	r2,0(r3)
 4019580:	108007cc 	andi	r2,r2,31
{
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    enabled_ints |= mask;
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 4019584:	10800054 	ori	r2,r2,1
 4019588:	18800035 	stwio	r2,0(r3)
 401958c:	0005883a 	mov	r2,zero
 4019590:	003fcb06 	br	40194c0 <__alt_data_end+0xfc0194c0>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 4019594:	3c003fcc 	andi	r16,r7,255
 4019598:	3023883a 	mov	r17,r6
 401959c:	2827883a 	mov	r19,r5
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size*10000;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 40195a0:	25400717 	ldw	r21,28(r4)
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 40195a4:	8000051e 	bne	r16,zero,40195bc <alt_avalon_i2c_master_transmit_using_interrupts+0x140>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 40195a8:	4018ca00 	call	4018ca0 <alt_avalon_i2c_enable>
      if (status != ALT_AVALON_I2C_SUCCESS)
 40195ac:	103fc41e 	bne	r2,zero,40194c0 <__alt_data_end+0xfc0194c0>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 40195b0:	90800317 	ldw	r2,12(r18)
 40195b4:	00c00704 	movi	r3,28
 40195b8:	10c00435 	stwio	r3,16(r2)
      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 40195bc:	800d883a 	mov	r6,r16
 40195c0:	000b883a 	mov	r5,zero
 40195c4:	9009883a 	mov	r4,r18
 40195c8:	40191140 	call	4019114 <alt_avalon_i2c_send_address>
 40195cc:	1021883a 	mov	r16,r2
        
    if (status == ALT_AVALON_I2C_SUCCESS)
 40195d0:	103fc526 	beq	r2,zero,40194e8 <__alt_data_end+0xfc0194e8>
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size*10000;
 40195d4:	8809883a 	mov	r4,r17
 40195d8:	0149c404 	movi	r5,10000
 40195dc:	400aa340 	call	400aa34 <__mulsi3>
 40195e0:	90c00317 	ldw	r3,12(r18)
 40195e4:	1023883a 	mov	r17,r2
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);        
 40195e8:	04c00244 	movi	r19,9
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 40195ec:	18800537 	ldwio	r2,20(r3)
 40195f0:	1080004c 	andi	r2,r2,1
 40195f4:	1000071e 	bne	r2,zero,4019614 <alt_avalon_i2c_master_transmit_using_interrupts+0x198>

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 40195f8:	18c00204 	addi	r3,r3,8
 40195fc:	19000037 	ldwio	r4,0(r3)
 4019600:	00bfff84 	movi	r2,-2
 4019604:	2084703a 	and	r2,r4,r2
 4019608:	18800035 	stwio	r2,0(r3)
 401960c:	8005883a 	mov	r2,r16
 4019610:	003fab06 	br	40194c0 <__alt_data_end+0xfc0194c0>
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);        
 4019614:	9c40042e 	bgeu	r19,r17,4019628 <alt_avalon_i2c_master_transmit_using_interrupts+0x1ac>
            if (--timeout == 0)
 4019618:	8c7fffc4 	addi	r17,r17,-1
 401961c:	883ff31e 	bne	r17,zero,40195ec <__alt_data_end+0xfc0195ec>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 4019620:	043fff84 	movi	r16,-2
 4019624:	003ff406 	br	40195f8 <__alt_data_end+0xfc0195f8>
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);        
 4019628:	0109c404 	movi	r4,10000
 401962c:	401a5800 	call	401a580 <alt_busy_sleep>
 4019630:	90c00317 	ldw	r3,12(r18)
 4019634:	003ff806 	br	4019618 <__alt_data_end+0xfc019618>
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 4019638:	982d883a 	mov	r22,r19
 401963c:	003fb906 	br	4019524 <__alt_data_end+0xfc019524>

04019640 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 4019640:	defff504 	addi	sp,sp,-44
 4019644:	df000915 	stw	fp,36(sp)
 4019648:	ddc00815 	stw	r23,32(sp)
 401964c:	dd800715 	stw	r22,28(sp)
 4019650:	dd400615 	stw	r21,24(sp)
 4019654:	dd000515 	stw	r20,20(sp)
 4019658:	dcc00415 	stw	r19,16(sp)
 401965c:	dc800315 	stw	r18,12(sp)
 4019660:	dc400215 	stw	r17,8(sp)
 4019664:	dc000115 	stw	r16,4(sp)
 4019668:	dfc00a15 	stw	ra,40(sp)
 401966c:	2025883a 	mov	r18,r4
 4019670:	2823883a 	mov	r17,r5
 4019674:	3021883a 	mov	r16,r6
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
 4019678:	0709c3c4 	movi	fp,9999
 401967c:	3d403fcc 	andi	r21,r7,255
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
 4019680:	05000044 	movi	r20,1
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4019684:	04c00084 	movi	r19,2
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
 4019688:	05bfffc4 	movi	r22,-1
    {
      if (retry<10) alt_busy_sleep(10000);
 401968c:	05c00244 	movi	r23,9
      if (use_interrupts)
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
 4019690:	000f883a 	mov	r7,zero
 4019694:	800d883a 	mov	r6,r16
 4019698:	880b883a 	mov	r5,r17
 401969c:	9009883a 	mov	r4,r18
    alt_u32 retry=10000;  
    
    while (retry--)
    {
      if (retry<10) alt_busy_sleep(10000);
      if (use_interrupts)
 40196a0:	a8000a26 	beq	r21,zero,40196cc <alt_avalon_i2c_master_tx+0x8c>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
 40196a4:	dd000015 	stw	r20,0(sp)
 40196a8:	401947c0 	call	401947c <alt_avalon_i2c_master_transmit_using_interrupts>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 40196ac:	10c001c4 	addi	r3,r2,7
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
 40196b0:	e73fffc4 	addi	fp,fp,-1
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 40196b4:	98c00e36 	bltu	r19,r3,40196f0 <alt_avalon_i2c_master_tx+0xb0>
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
 40196b8:	e5800d26 	beq	fp,r22,40196f0 <alt_avalon_i2c_master_tx+0xb0>
    {
      if (retry<10) alt_busy_sleep(10000);
 40196bc:	bf3ff436 	bltu	r23,fp,4019690 <__alt_data_end+0xfc019690>
 40196c0:	0109c404 	movi	r4,10000
 40196c4:	401a5800 	call	401a580 <alt_busy_sleep>
 40196c8:	003ff106 	br	4019690 <__alt_data_end+0xfc019690>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
 40196cc:	000f883a 	mov	r7,zero
 40196d0:	800d883a 	mov	r6,r16
 40196d4:	880b883a 	mov	r5,r17
 40196d8:	9009883a 	mov	r4,r18
 40196dc:	dd000015 	stw	r20,0(sp)
 40196e0:	40193100 	call	4019310 <alt_avalon_i2c_master_transmit>
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 40196e4:	10c001c4 	addi	r3,r2,7
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
 40196e8:	e73fffc4 	addi	fp,fp,-1
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 40196ec:	98fff22e 	bgeu	r19,r3,40196b8 <__alt_data_end+0xfc0196b8>
      break;
    }

    return status;
}        
 40196f0:	dfc00a17 	ldw	ra,40(sp)
 40196f4:	df000917 	ldw	fp,36(sp)
 40196f8:	ddc00817 	ldw	r23,32(sp)
 40196fc:	dd800717 	ldw	r22,28(sp)
 4019700:	dd400617 	ldw	r21,24(sp)
 4019704:	dd000517 	ldw	r20,20(sp)
 4019708:	dcc00417 	ldw	r19,16(sp)
 401970c:	dc800317 	ldw	r18,12(sp)
 4019710:	dc400217 	ldw	r17,8(sp)
 4019714:	dc000117 	ldw	r16,4(sp)
 4019718:	dec00b04 	addi	sp,sp,44
 401971c:	f800283a 	ret

04019720 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 4019720:	defff704 	addi	sp,sp,-36
 4019724:	dd000415 	stw	r20,16(sp)
 4019728:	dfc00815 	stw	ra,32(sp)
 401972c:	ddc00715 	stw	r23,28(sp)
 4019730:	dd800615 	stw	r22,24(sp)
 4019734:	dd400515 	stw	r21,20(sp)
 4019738:	dcc00315 	stw	r19,12(sp)
 401973c:	dc800215 	stw	r18,8(sp)
 4019740:	dc400115 	stw	r17,4(sp)
 4019744:	dc000015 	stw	r16,0(sp)
 4019748:	dd000917 	ldw	r20,36(sp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
    alt_u32 bytes_written=0;
    alt_u32 temp_bytes_read;
    
    if (size==0)
 401974c:	30003926 	beq	r6,zero,4019834 <alt_avalon_i2c_master_receive+0x114>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 4019750:	3c403fcc 	andi	r17,r7,255
 4019754:	3027883a 	mov	r19,r6
 4019758:	202b883a 	mov	r21,r4
 401975c:	2821883a 	mov	r16,r5
 4019760:	88004026 	beq	r17,zero,4019864 <alt_avalon_i2c_master_receive+0x144>
      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 4019764:	880d883a 	mov	r6,r17
 4019768:	01400044 	movi	r5,1
 401976c:	a809883a 	mov	r4,r21
 4019770:	40191140 	call	4019114 <alt_avalon_i2c_send_address>
 4019774:	102d883a 	mov	r22,r2

    if (status == ALT_AVALON_I2C_SUCCESS)
 4019778:	10004026 	beq	r2,zero,401987c <alt_avalon_i2c_master_receive+0x15c>
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
 401977c:	9809883a 	mov	r4,r19
 4019780:	0149c404 	movi	r5,10000
 4019784:	400aa340 	call	400aa34 <__mulsi3>
 4019788:	a9000317 	ldw	r4,12(r21)
 401978c:	1021883a 	mov	r16,r2
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
 4019790:	04400244 	movi	r17,9
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 4019794:	20800537 	ldwio	r2,20(r4)
 4019798:	1080004c 	andi	r2,r2,1
 401979c:	10000426 	beq	r2,zero,40197b0 <alt_avalon_i2c_master_receive+0x90>
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
 40197a0:	8c004f2e 	bgeu	r17,r16,40198e0 <alt_avalon_i2c_master_receive+0x1c0>
            if (--timeout == 0)
 40197a4:	843fffc4 	addi	r16,r16,-1
 40197a8:	803ffa1e 	bne	r16,zero,4019794 <__alt_data_end+0xfc019794>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 40197ac:	05bfff84 	movi	r22,-2
}

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
 40197b0:	20800437 	ldwio	r2,16(r4)
 40197b4:	1080010c 	andi	r2,r2,4
 40197b8:	10000126 	beq	r2,zero,40197c0 <alt_avalon_i2c_master_receive+0xa0>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 40197bc:	05bffec4 	movi	r22,-5

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 40197c0:	21000204 	addi	r4,r4,8
 40197c4:	20c00037 	ldwio	r3,0(r4)
 40197c8:	00bfff84 	movi	r2,-2
 40197cc:	1884703a 	and	r2,r3,r2
 40197d0:	20800035 	stwio	r2,0(r4)
 40197d4:	b005883a 	mov	r2,r22
 40197d8:	00001706 	br	4019838 <alt_avalon_i2c_master_receive+0x118>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 40197dc:	b03fe71e 	bne	r22,zero,401977c <__alt_data_end+0xfc01977c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 40197e0:	a5003fcc 	andi	r20,r20,255
 40197e4:	a00f883a 	mov	r7,r20
 40197e8:	000d883a 	mov	r6,zero
 40197ec:	000b883a 	mov	r5,zero
 40197f0:	a809883a 	mov	r4,r21
 40197f4:	40190340 	call	4019034 <alt_avalon_i2c_cmd_write>
 40197f8:	102d883a 	mov	r22,r2
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 40197fc:	8cc00b2e 	bgeu	r17,r19,401982c <alt_avalon_i2c_master_receive+0x10c>
 4019800:	103fde1e 	bne	r2,zero,401977c <__alt_data_end+0xfc01977c>
 4019804:	bc63c83a 	sub	r17,r23,r17
 4019808:	8463883a 	add	r17,r16,r17
 401980c:	00000206 	br	4019818 <alt_avalon_i2c_master_receive+0xf8>
 4019810:	84000044 	addi	r16,r16,1
 4019814:	103fd91e 	bne	r2,zero,401977c <__alt_data_end+0xfc01977c>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
 4019818:	800b883a 	mov	r5,r16
 401981c:	a809883a 	mov	r4,r21
 4019820:	4018fa80 	call	4018fa8 <alt_avalon_i2c_rx_read>
 4019824:	102d883a 	mov	r22,r2
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 4019828:	8c3ff91e 	bne	r17,r16,4019810 <__alt_data_end+0xfc019810>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 401982c:	a03fd31e 	bne	r20,zero,401977c <__alt_data_end+0xfc01977c>
 4019830:	b03fd21e 	bne	r22,zero,401977c <__alt_data_end+0xfc01977c>
    alt_u32 bytes_written=0;
    alt_u32 temp_bytes_read;
    
    if (size==0)
    {
      return ALT_AVALON_I2C_SUCCESS;
 4019834:	0005883a 	mov	r2,zero
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
    }

    return status;
}
 4019838:	dfc00817 	ldw	ra,32(sp)
 401983c:	ddc00717 	ldw	r23,28(sp)
 4019840:	dd800617 	ldw	r22,24(sp)
 4019844:	dd400517 	ldw	r21,20(sp)
 4019848:	dd000417 	ldw	r20,16(sp)
 401984c:	dcc00317 	ldw	r19,12(sp)
 4019850:	dc800217 	ldw	r18,8(sp)
 4019854:	dc400117 	ldw	r17,4(sp)
 4019858:	dc000017 	ldw	r16,0(sp)
 401985c:	dec00904 	addi	sp,sp,36
 4019860:	f800283a 	ret
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 4019864:	4018ca00 	call	4018ca0 <alt_avalon_i2c_enable>
      if (status != ALT_AVALON_I2C_SUCCESS)
 4019868:	103ff31e 	bne	r2,zero,4019838 <__alt_data_end+0xfc019838>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 401986c:	a8800317 	ldw	r2,12(r21)
 4019870:	00c00704 	movi	r3,28
 4019874:	10c00435 	stwio	r3,16(r2)
 4019878:	003fba06 	br	4019764 <__alt_data_end+0xfc019764>
 401987c:	9cbfffc4 	addi	r18,r19,-1
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
 4019880:	002f883a 	mov	r23,zero
 4019884:	0023883a 	mov	r17,zero
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 4019888:	bcbfd426 	beq	r23,r18,40197dc <__alt_data_end+0xfc0197dc>
 401988c:	b03fbb1e 	bne	r22,zero,401977c <__alt_data_end+0xfc01977c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 4019890:	000f883a 	mov	r7,zero
 4019894:	000d883a 	mov	r6,zero
 4019898:	000b883a 	mov	r5,zero
 401989c:	a809883a 	mov	r4,r21
 40198a0:	40190340 	call	4019034 <alt_avalon_i2c_cmd_write>
 40198a4:	102d883a 	mov	r22,r2
            bytes_written++;
 40198a8:	bdc00044 	addi	r23,r23,1
            if (status == ALT_AVALON_I2C_SUCCESS)
 40198ac:	103ff61e 	bne	r2,zero,4019888 <__alt_data_end+0xfc019888>
 40198b0:	8007883a 	mov	r3,r16
 40198b4:	00000306 	br	40198c4 <alt_avalon_i2c_master_receive+0x1a4>
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 40198b8:	21000137 	ldwio	r4,4(r4)
 40198bc:	19000005 	stb	r4,0(r3)
 40198c0:	18c00044 	addi	r3,r3,1
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 40198c4:	a9000317 	ldw	r4,12(r21)
 40198c8:	1c05c83a 	sub	r2,r3,r16
 40198cc:	21400737 	ldwio	r5,28(r4)
 40198d0:	283ff91e 	bne	r5,zero,40198b8 <__alt_data_end+0xfc0198b8>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
            if (status == ALT_AVALON_I2C_SUCCESS)
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
               buffer+=temp_bytes_read;
 40198d4:	80a1883a 	add	r16,r16,r2
               bytes_read+=temp_bytes_read;
 40198d8:	88a3883a 	add	r17,r17,r2
 40198dc:	003fea06 	br	4019888 <__alt_data_end+0xfc019888>
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
 40198e0:	0109c404 	movi	r4,10000
 40198e4:	401a5800 	call	401a580 <alt_busy_sleep>
 40198e8:	a9000317 	ldw	r4,12(r21)
 40198ec:	003fad06 	br	40197a4 <__alt_data_end+0xfc0197a4>

040198f0 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 40198f0:	defff704 	addi	sp,sp,-36
 40198f4:	dd000415 	stw	r20,16(sp)
 40198f8:	dfc00815 	stw	ra,32(sp)
 40198fc:	ddc00715 	stw	r23,28(sp)
 4019900:	dd800615 	stw	r22,24(sp)
 4019904:	dd400515 	stw	r21,20(sp)
 4019908:	dcc00315 	stw	r19,12(sp)
 401990c:	dc800215 	stw	r18,8(sp)
 4019910:	dc400115 	stw	r17,4(sp)
 4019914:	dc000015 	stw	r16,0(sp)
 4019918:	dd000917 	ldw	r20,36(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
    alt_u32 timeout;
    alt_u32 bytes_written=0;
    
    if (size==0)
 401991c:	30003a26 	beq	r6,zero,4019a08 <alt_avalon_i2c_master_receive_using_interrupts+0x118>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 4019920:	22000617 	ldw	r8,24(r4)
 4019924:	00c100b4 	movhi	r3,1026
 4019928:	18e2e404 	addi	r3,r3,-29808
 401992c:	40c03826 	beq	r8,r3,4019a10 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 4019930:	00bfff44 	movi	r2,-3
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
       }
    }

    return status;
}
 4019934:	dfc00817 	ldw	ra,32(sp)
 4019938:	ddc00717 	ldw	r23,28(sp)
 401993c:	dd800617 	ldw	r22,24(sp)
 4019940:	dd400517 	ldw	r21,20(sp)
 4019944:	dd000417 	ldw	r20,16(sp)
 4019948:	dcc00317 	ldw	r19,12(sp)
 401994c:	dc800217 	ldw	r18,8(sp)
 4019950:	dc400117 	ldw	r17,4(sp)
 4019954:	dc000017 	ldw	r16,0(sp)
 4019958:	dec00904 	addi	sp,sp,36
 401995c:	f800283a 	ret
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 4019960:	8dffffc4 	addi	r23,r17,-1
 4019964:	002d883a 	mov	r22,zero
 4019968:	b800021e 	bne	r23,zero,4019974 <alt_avalon_i2c_master_receive_using_interrupts+0x84>
 401996c:	00000a06 	br	4019998 <alt_avalon_i2c_master_receive_using_interrupts+0xa8>
 4019970:	1000381e 	bne	r2,zero,4019a54 <alt_avalon_i2c_master_receive_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 4019974:	000f883a 	mov	r7,zero
 4019978:	000d883a 	mov	r6,zero
 401997c:	000b883a 	mov	r5,zero
 4019980:	9009883a 	mov	r4,r18
 4019984:	40190340 	call	4019034 <alt_avalon_i2c_cmd_write>
            bytes_written++;
 4019988:	b5800044 	addi	r22,r22,1

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 401998c:	1021883a 	mov	r16,r2
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 4019990:	bdbff71e 	bne	r23,r22,4019970 <__alt_data_end+0xfc019970>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 4019994:	10002f1e 	bne	r2,zero,4019a54 <alt_avalon_i2c_master_receive_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 4019998:	a5003fcc 	andi	r20,r20,255
 401999c:	a00f883a 	mov	r7,r20
 40199a0:	000d883a 	mov	r6,zero
 40199a4:	000b883a 	mov	r5,zero
 40199a8:	9009883a 	mov	r4,r18
 40199ac:	40190340 	call	4019034 <alt_avalon_i2c_cmd_write>
 40199b0:	1021883a 	mov	r16,r2
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 40199b4:	1000271e 	bne	r2,zero,4019a54 <alt_avalon_i2c_master_receive_using_interrupts+0x164>
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
    }
    else
    {
       if (issue_stop)
 40199b8:	a0001326 	beq	r20,zero,4019a08 <alt_avalon_i2c_master_receive_using_interrupts+0x118>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 40199bc:	90800317 	ldw	r2,12(r18)
 40199c0:	00c00704 	movi	r3,28
 40199c4:	10c00435 	stwio	r3,16(r2)

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
 40199c8:	90800317 	ldw	r2,12(r18)
 40199cc:	10800204 	addi	r2,r2,8
 40199d0:	11000037 	ldwio	r4,0(r2)
 40199d4:	00fff3c4 	movi	r3,-49
 40199d8:	20c6703a 	and	r3,r4,r3
 40199dc:	10c00035 	stwio	r3,0(r2)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 40199e0:	90c00317 	ldw	r3,12(r18)
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
 40199e4:	00800084 	movi	r2,2
 40199e8:	a8800215 	stw	r2,8(r21)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 40199ec:	18c00304 	addi	r3,r3,12
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
         
         irq_data->buffer = buffer;
 40199f0:	acc00015 	stw	r19,0(r21)
         irq_data->size = size;
 40199f4:	ac400115 	stw	r17,4(r21)
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 40199f8:	18800037 	ldwio	r2,0(r3)
 40199fc:	108007cc 	andi	r2,r2,31
{
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    enabled_ints |= mask;
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 4019a00:	10800094 	ori	r2,r2,2
 4019a04:	18800035 	stwio	r2,0(r3)
 4019a08:	0005883a 	mov	r2,zero
 4019a0c:	003fc906 	br	4019934 <__alt_data_end+0xfc019934>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 4019a10:	3c003fcc 	andi	r16,r7,255
 4019a14:	2827883a 	mov	r19,r5
 4019a18:	2025883a 	mov	r18,r4
 4019a1c:	3023883a 	mov	r17,r6
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 4019a20:	25400717 	ldw	r21,28(r4)
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 4019a24:	8000051e 	bne	r16,zero,4019a3c <alt_avalon_i2c_master_receive_using_interrupts+0x14c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 4019a28:	4018ca00 	call	4018ca0 <alt_avalon_i2c_enable>
      if (status != ALT_AVALON_I2C_SUCCESS)
 4019a2c:	103fc11e 	bne	r2,zero,4019934 <__alt_data_end+0xfc019934>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 4019a30:	90800317 	ldw	r2,12(r18)
 4019a34:	00c00704 	movi	r3,28
 4019a38:	10c00435 	stwio	r3,16(r2)
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 4019a3c:	800d883a 	mov	r6,r16
 4019a40:	01400044 	movi	r5,1
 4019a44:	9009883a 	mov	r4,r18
 4019a48:	40191140 	call	4019114 <alt_avalon_i2c_send_address>
 4019a4c:	1021883a 	mov	r16,r2

    if (status == ALT_AVALON_I2C_SUCCESS)
 4019a50:	103fc326 	beq	r2,zero,4019960 <__alt_data_end+0xfc019960>
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
 4019a54:	8809883a 	mov	r4,r17
 4019a58:	0149c404 	movi	r5,10000
 4019a5c:	400aa340 	call	400aa34 <__mulsi3>
 4019a60:	90c00317 	ldw	r3,12(r18)
 4019a64:	1023883a 	mov	r17,r2
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
 4019a68:	04c00244 	movi	r19,9
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 4019a6c:	18800537 	ldwio	r2,20(r3)
 4019a70:	1080004c 	andi	r2,r2,1
 4019a74:	1000071e 	bne	r2,zero,4019a94 <alt_avalon_i2c_master_receive_using_interrupts+0x1a4>

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 4019a78:	18c00204 	addi	r3,r3,8
 4019a7c:	19000037 	ldwio	r4,0(r3)
 4019a80:	00bfff84 	movi	r2,-2
 4019a84:	2084703a 	and	r2,r4,r2
 4019a88:	18800035 	stwio	r2,0(r3)
 4019a8c:	8005883a 	mov	r2,r16
 4019a90:	003fa806 	br	4019934 <__alt_data_end+0xfc019934>
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
 4019a94:	9c40042e 	bgeu	r19,r17,4019aa8 <alt_avalon_i2c_master_receive_using_interrupts+0x1b8>
            if (--timeout == 0)
 4019a98:	8c7fffc4 	addi	r17,r17,-1
 4019a9c:	883ff31e 	bne	r17,zero,4019a6c <__alt_data_end+0xfc019a6c>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 4019aa0:	043fff84 	movi	r16,-2
 4019aa4:	003ff406 	br	4019a78 <__alt_data_end+0xfc019a78>
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
 4019aa8:	0109c404 	movi	r4,10000
 4019aac:	401a5800 	call	401a580 <alt_busy_sleep>
 4019ab0:	90c00317 	ldw	r3,12(r18)
 4019ab4:	003ff806 	br	4019a98 <__alt_data_end+0xfc019a98>

04019ab8 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 4019ab8:	defff604 	addi	sp,sp,-40
 4019abc:	ddc00815 	stw	r23,32(sp)
 4019ac0:	dd800715 	stw	r22,28(sp)
 4019ac4:	dd400615 	stw	r21,24(sp)
 4019ac8:	dd000515 	stw	r20,20(sp)
 4019acc:	dcc00415 	stw	r19,16(sp)
 4019ad0:	dc800315 	stw	r18,12(sp)
 4019ad4:	dc400215 	stw	r17,8(sp)
 4019ad8:	dc000115 	stw	r16,4(sp)
 4019adc:	dfc00915 	stw	ra,36(sp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
 4019ae0:	39c03fcc 	andi	r7,r7,255
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 4019ae4:	2023883a 	mov	r17,r4
 4019ae8:	2825883a 	mov	r18,r5
 4019aec:	3027883a 	mov	r19,r6
 4019af0:	0409c3c4 	movi	r16,9999
    if (use_interrupts) 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 4019af4:	05400044 	movi	r21,1
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4019af8:	05000084 	movi	r20,2
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
 4019afc:	05bfffc4 	movi	r22,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
 4019b00:	05c00244 	movi	r23,9
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
 4019b04:	38001026 	beq	r7,zero,4019b48 <alt_avalon_i2c_master_rx+0x90>
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 4019b08:	000f883a 	mov	r7,zero
 4019b0c:	980d883a 	mov	r6,r19
 4019b10:	900b883a 	mov	r5,r18
 4019b14:	8809883a 	mov	r4,r17
 4019b18:	dd400015 	stw	r21,0(sp)
 4019b1c:	40198f00 	call	40198f0 <alt_avalon_i2c_master_receive_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4019b20:	10c001c4 	addi	r3,r2,7
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
 4019b24:	843fffc4 	addi	r16,r16,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4019b28:	a0c01336 	bltu	r20,r3,4019b78 <alt_avalon_i2c_master_rx+0xc0>
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
 4019b2c:	85801226 	beq	r16,r22,4019b78 <alt_avalon_i2c_master_rx+0xc0>
      {
        if (retry<10) alt_busy_sleep(10000);      
 4019b30:	bc3ff536 	bltu	r23,r16,4019b08 <__alt_data_end+0xfc019b08>
 4019b34:	0109c404 	movi	r4,10000
 4019b38:	401a5800 	call	401a580 <alt_busy_sleep>
 4019b3c:	003ff206 	br	4019b08 <__alt_data_end+0xfc019b08>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 4019b40:	0109c404 	movi	r4,10000
 4019b44:	401a5800 	call	401a580 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 4019b48:	000f883a 	mov	r7,zero
 4019b4c:	980d883a 	mov	r6,r19
 4019b50:	900b883a 	mov	r5,r18
 4019b54:	8809883a 	mov	r4,r17
 4019b58:	dd400015 	stw	r21,0(sp)
 4019b5c:	40197200 	call	4019720 <alt_avalon_i2c_master_receive>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4019b60:	10c001c4 	addi	r3,r2,7
        break;
      }
    }
    else
    {
      while (retry--) 
 4019b64:	843fffc4 	addi	r16,r16,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4019b68:	a0c00336 	bltu	r20,r3,4019b78 <alt_avalon_i2c_master_rx+0xc0>
        break;
      }
    }
    else
    {
      while (retry--) 
 4019b6c:	85800226 	beq	r16,r22,4019b78 <alt_avalon_i2c_master_rx+0xc0>
      {
        if (retry<10) alt_busy_sleep(10000);      
 4019b70:	bc3ff536 	bltu	r23,r16,4019b48 <__alt_data_end+0xfc019b48>
 4019b74:	003ff206 	br	4019b40 <__alt_data_end+0xfc019b40>
        break;
      }
    }
    
    return status;
}        
 4019b78:	dfc00917 	ldw	ra,36(sp)
 4019b7c:	ddc00817 	ldw	r23,32(sp)
 4019b80:	dd800717 	ldw	r22,28(sp)
 4019b84:	dd400617 	ldw	r21,24(sp)
 4019b88:	dd000517 	ldw	r20,20(sp)
 4019b8c:	dcc00417 	ldw	r19,16(sp)
 4019b90:	dc800317 	ldw	r18,12(sp)
 4019b94:	dc400217 	ldw	r17,8(sp)
 4019b98:	dc000117 	ldw	r16,4(sp)
 4019b9c:	dec00a04 	addi	sp,sp,40
 4019ba0:	f800283a 	ret

04019ba4 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
 4019ba4:	defff504 	addi	sp,sp,-44
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
 4019ba8:	d8800c03 	ldbu	r2,48(sp)
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
 4019bac:	df000915 	stw	fp,36(sp)
 4019bb0:	ddc00815 	stw	r23,32(sp)
 4019bb4:	dd800715 	stw	r22,28(sp)
 4019bb8:	dd400615 	stw	r21,24(sp)
 4019bbc:	dd000515 	stw	r20,20(sp)
 4019bc0:	dcc00415 	stw	r19,16(sp)
 4019bc4:	dc800315 	stw	r18,12(sp)
 4019bc8:	dc400215 	stw	r17,8(sp)
 4019bcc:	dc000115 	stw	r16,4(sp)
 4019bd0:	dfc00a15 	stw	ra,40(sp)
 4019bd4:	2021883a 	mov	r16,r4
 4019bd8:	2823883a 	mov	r17,r5
 4019bdc:	3025883a 	mov	r18,r6
 4019be0:	382d883a 	mov	r22,r7
 4019be4:	0709c3c4 	movi	fp,9999
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4019be8:	04c00084 	movi	r19,2
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 4019bec:	05c00044 	movi	r23,1
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
 4019bf0:	053fffc4 	movi	r20,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
 4019bf4:	05400244 	movi	r21,9
                                       const alt_u8 use_interrupts)                                       
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
 4019bf8:	10001826 	beq	r2,zero,4019c5c <alt_avalon_i2c_master_tx_rx+0xb8>
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 4019bfc:	000f883a 	mov	r7,zero
 4019c00:	900d883a 	mov	r6,r18
 4019c04:	880b883a 	mov	r5,r17
 4019c08:	8009883a 	mov	r4,r16
 4019c0c:	d8000015 	stw	zero,0(sp)
 4019c10:	401947c0 	call	401947c <alt_avalon_i2c_master_transmit_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4019c14:	10c001c4 	addi	r3,r2,7
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
 4019c18:	e73fffc4 	addi	fp,fp,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4019c1c:	98c01936 	bltu	r19,r3,4019c84 <alt_avalon_i2c_master_tx_rx+0xe0>
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
 4019c20:	e5002026 	beq	fp,r20,4019ca4 <alt_avalon_i2c_master_tx_rx+0x100>
      {
        if (retry<10) alt_busy_sleep(10000);      
 4019c24:	af3ff536 	bltu	r21,fp,4019bfc <__alt_data_end+0xfc019bfc>
 4019c28:	0109c404 	movi	r4,10000
 4019c2c:	401a5800 	call	401a580 <alt_busy_sleep>
 4019c30:	003ff206 	br	4019bfc <__alt_data_end+0xfc019bfc>
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 4019c34:	d9800b17 	ldw	r6,44(sp)
 4019c38:	01c00044 	movi	r7,1
 4019c3c:	b00b883a 	mov	r5,r22
 4019c40:	8009883a 	mov	r4,r16
 4019c44:	ddc00015 	stw	r23,0(sp)
 4019c48:	40197200 	call	4019720 <alt_avalon_i2c_master_receive>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4019c4c:	10c001c4 	addi	r3,r2,7
 4019c50:	98c01436 	bltu	r19,r3,4019ca4 <alt_avalon_i2c_master_tx_rx+0x100>
        break;
      }
    }
    else 
    {
      while (retry--) 
 4019c54:	e5001326 	beq	fp,r20,4019ca4 <alt_avalon_i2c_master_tx_rx+0x100>
      {
        if (retry<10) alt_busy_sleep(10000);      
 4019c58:	af001e2e 	bgeu	r21,fp,4019cd4 <alt_avalon_i2c_master_tx_rx+0x130>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 4019c5c:	000f883a 	mov	r7,zero
 4019c60:	900d883a 	mov	r6,r18
 4019c64:	880b883a 	mov	r5,r17
 4019c68:	8009883a 	mov	r4,r16
 4019c6c:	d8000015 	stw	zero,0(sp)
 4019c70:	40193100 	call	4019310 <alt_avalon_i2c_master_transmit>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4019c74:	10c001c4 	addi	r3,r2,7
        break;
      }
    }
    else 
    {
      while (retry--) 
 4019c78:	e73fffc4 	addi	fp,fp,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4019c7c:	98fff52e 	bgeu	r19,r3,4019c54 <__alt_data_end+0xfc019c54>
 4019c80:	003fec06 	br	4019c34 <__alt_data_end+0xfc019c34>
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 4019c84:	d9800b17 	ldw	r6,44(sp)
 4019c88:	01c00044 	movi	r7,1
 4019c8c:	b00b883a 	mov	r5,r22
 4019c90:	8009883a 	mov	r4,r16
 4019c94:	ddc00015 	stw	r23,0(sp)
 4019c98:	40198f00 	call	40198f0 <alt_avalon_i2c_master_receive_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 4019c9c:	10c001c4 	addi	r3,r2,7
 4019ca0:	98ffdf2e 	bgeu	r19,r3,4019c20 <__alt_data_end+0xfc019c20>
        break;
      }
    }
    
    return status;
}                                       
 4019ca4:	dfc00a17 	ldw	ra,40(sp)
 4019ca8:	df000917 	ldw	fp,36(sp)
 4019cac:	ddc00817 	ldw	r23,32(sp)
 4019cb0:	dd800717 	ldw	r22,28(sp)
 4019cb4:	dd400617 	ldw	r21,24(sp)
 4019cb8:	dd000517 	ldw	r20,20(sp)
 4019cbc:	dcc00417 	ldw	r19,16(sp)
 4019cc0:	dc800317 	ldw	r18,12(sp)
 4019cc4:	dc400217 	ldw	r17,8(sp)
 4019cc8:	dc000117 	ldw	r16,4(sp)
 4019ccc:	dec00b04 	addi	sp,sp,44
 4019cd0:	f800283a 	ret
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 4019cd4:	0109c404 	movi	r4,10000
 4019cd8:	401a5800 	call	401a580 <alt_busy_sleep>
 4019cdc:	003fdf06 	br	4019c5c <__alt_data_end+0xfc019c5c>

04019ce0 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
 4019ce0:	20c00317 	ldw	r3,12(r4)
 4019ce4:	19000437 	ldwio	r4,16(r3)
 4019ce8:	18800337 	ldwio	r2,12(r3)
 4019cec:	2084703a 	and	r2,r4,r2
 4019cf0:	28800015 	stw	r2,0(r5)
 4019cf4:	f800283a 	ret

04019cf8 <alt_avalon_i2c_int_raw_status_get>:
/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
 4019cf8:	20800317 	ldw	r2,12(r4)
 4019cfc:	10800437 	ldwio	r2,16(r2)
 4019d00:	28800015 	stw	r2,0(r5)
 4019d04:	f800283a 	ret

04019d08 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 4019d08:	20800317 	ldw	r2,12(r4)
 4019d0c:	11400435 	stwio	r5,16(r2)
 4019d10:	f800283a 	ret

04019d14 <alt_avalon_i2c_int_disable>:
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 4019d14:	20800317 	ldw	r2,12(r4)
 4019d18:	10800304 	addi	r2,r2,12
 4019d1c:	10c00037 	ldwio	r3,0(r2)
{
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   enabled_ints &=  (~mask);
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 4019d20:	014a303a 	nor	r5,zero,r5
 4019d24:	294007cc 	andi	r5,r5,31
 4019d28:	28ca703a 	and	r5,r5,r3
 4019d2c:	11400035 	stwio	r5,0(r2)
 4019d30:	f800283a 	ret

04019d34 <alt_avalon_i2c_int_enable>:
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 4019d34:	20c00317 	ldw	r3,12(r4)
 4019d38:	18c00304 	addi	r3,r3,12
 4019d3c:	18800037 	ldwio	r2,0(r3)
{
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    enabled_ints |= mask;
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 4019d40:	114ab03a 	or	r5,r2,r5
 4019d44:	294007cc 	andi	r5,r5,31
 4019d48:	19400035 	stwio	r5,0(r3)
 4019d4c:	f800283a 	ret

04019d50 <alt_avalon_i2c_enabled_ints_get>:
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 4019d50:	20800317 	ldw	r2,12(r4)
 4019d54:	10800337 	ldwio	r2,12(r2)
 4019d58:	108007cc 	andi	r2,r2,31
 4019d5c:	28800015 	stw	r2,0(r5)
 4019d60:	f800283a 	ret

04019d64 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
 4019d64:	20800317 	ldw	r2,12(r4)
 4019d68:	10800237 	ldwio	r2,8(r2)
 4019d6c:	10800c0c 	andi	r2,r2,48
 4019d70:	1005d13a 	srai	r2,r2,4
 4019d74:	28800015 	stw	r2,0(r5)
 4019d78:	f800283a 	ret

04019d7c <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
 4019d7c:	20c00317 	ldw	r3,12(r4)
 4019d80:	18c00204 	addi	r3,r3,8
 4019d84:	19000037 	ldwio	r4,0(r3)
 4019d88:	00bff3c4 	movi	r2,-49
 4019d8c:	280a913a 	slli	r5,r5,4
 4019d90:	2084703a 	and	r2,r4,r2
 4019d94:	29400c0c 	andi	r5,r5,48
 4019d98:	288ab03a 	or	r5,r5,r2
 4019d9c:	19400035 	stwio	r5,0(r3)
 4019da0:	f800283a 	ret

04019da4 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
 4019da4:	20800317 	ldw	r2,12(r4)
 4019da8:	10800237 	ldwio	r2,8(r2)
 4019dac:	1080030c 	andi	r2,r2,12
 4019db0:	1005d0ba 	srai	r2,r2,2
 4019db4:	28800015 	stw	r2,0(r5)
 4019db8:	f800283a 	ret

04019dbc <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
 4019dbc:	20c00317 	ldw	r3,12(r4)
 4019dc0:	18c00204 	addi	r3,r3,8
 4019dc4:	19000037 	ldwio	r4,0(r3)
 4019dc8:	00bffcc4 	movi	r2,-13
 4019dcc:	294b883a 	add	r5,r5,r5
 4019dd0:	294b883a 	add	r5,r5,r5
 4019dd4:	2084703a 	and	r2,r4,r2
 4019dd8:	2940030c 	andi	r5,r5,12
 4019ddc:	288ab03a 	or	r5,r5,r2
 4019de0:	19400035 	stwio	r5,0(r3)
 4019de4:	f800283a 	ret

04019de8 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4019de8:	20800017 	ldw	r2,0(r4)
 4019dec:	21c00217 	ldw	r7,8(r4)
 4019df0:	11000a04 	addi	r4,r2,40
 4019df4:	401a0981 	jmpi	401a098 <altera_avalon_jtag_uart_read>

04019df8 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4019df8:	20800017 	ldw	r2,0(r4)
 4019dfc:	21c00217 	ldw	r7,8(r4)
 4019e00:	11000a04 	addi	r4,r2,40
 4019e04:	401a1ec1 	jmpi	401a1ec <altera_avalon_jtag_uart_write>

04019e08 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4019e08:	20800017 	ldw	r2,0(r4)
 4019e0c:	21400217 	ldw	r5,8(r4)
 4019e10:	11000a04 	addi	r4,r2,40
 4019e14:	4019ff01 	jmpi	4019ff0 <altera_avalon_jtag_uart_close>

04019e18 <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4019e18:	21000017 	ldw	r4,0(r4)
 4019e1c:	21000a04 	addi	r4,r4,40
 4019e20:	401a0241 	jmpi	401a024 <altera_avalon_jtag_uart_ioctl>

04019e24 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4019e24:	20800017 	ldw	r2,0(r4)
 4019e28:	10800104 	addi	r2,r2,4
 4019e2c:	10c00037 	ldwio	r3,0(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4019e30:	18c1000c 	andi	r3,r3,1024
 4019e34:	1800081e 	bne	r3,zero,4019e58 <altera_avalon_jtag_uart_timeout+0x34>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4019e38:	20800917 	ldw	r2,36(r4)
 4019e3c:	00e00034 	movhi	r3,32768
 4019e40:	18ffff04 	addi	r3,r3,-4
 4019e44:	18800236 	bltu	r3,r2,4019e50 <altera_avalon_jtag_uart_timeout+0x2c>
    sp->host_inactive++;
 4019e48:	10800044 	addi	r2,r2,1
 4019e4c:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4019e50:	d0b24517 	ldw	r2,-14060(gp)
 4019e54:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4019e58:	20c00817 	ldw	r3,32(r4)
 4019e5c:	18c10014 	ori	r3,r3,1024
 4019e60:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 4019e64:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4019e68:	d0b24517 	ldw	r2,-14060(gp)
 4019e6c:	f800283a 	ret

04019e70 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
 4019e70:	21800017 	ldw	r6,0(r4)
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4019e74:	027fff84 	movi	r9,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4019e78:	02bfff44 	movi	r10,-3
 4019e7c:	32000104 	addi	r8,r6,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4019e80:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4019e84:	3880c00c 	andi	r2,r7,768
 4019e88:	10003426 	beq	r2,zero,4019f5c <altera_avalon_jtag_uart_irq+0xec>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4019e8c:	3880400c 	andi	r2,r7,256
 4019e90:	10001726 	beq	r2,zero,4019ef0 <altera_avalon_jtag_uart_irq+0x80>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4019e94:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
 4019e98:	20c00b17 	ldw	r3,44(r4)
 4019e9c:	10800044 	addi	r2,r2,1
 4019ea0:	1081ffcc 	andi	r2,r2,2047
 4019ea4:	18800d1e 	bne	r3,r2,4019edc <altera_avalon_jtag_uart_irq+0x6c>
 4019ea8:	00002d06 	br	4019f60 <altera_avalon_jtag_uart_irq+0xf0>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4019eac:	20800a17 	ldw	r2,40(r4)
 4019eb0:	2085883a 	add	r2,r4,r2
 4019eb4:	10c00e05 	stb	r3,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4019eb8:	20800a17 	ldw	r2,40(r4)
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
 4019ebc:	21400b17 	ldw	r5,44(r4)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4019ec0:	10800044 	addi	r2,r2,1
 4019ec4:	1081ffcc 	andi	r2,r2,2047
 4019ec8:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4019ecc:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
 4019ed0:	10800044 	addi	r2,r2,1
 4019ed4:	1081ffcc 	andi	r2,r2,2047
 4019ed8:	11400326 	beq	r2,r5,4019ee8 <altera_avalon_jtag_uart_irq+0x78>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4019edc:	30c00037 	ldwio	r3,0(r6)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4019ee0:	18a0000c 	andi	r2,r3,32768
 4019ee4:	103ff11e 	bne	r2,zero,4019eac <__alt_data_end+0xfc019eac>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4019ee8:	18ffffec 	andhi	r3,r3,65535
 4019eec:	18001c1e 	bne	r3,zero,4019f60 <altera_avalon_jtag_uart_irq+0xf0>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4019ef0:	3880800c 	andi	r2,r7,512
 4019ef4:	103fe226 	beq	r2,zero,4019e80 <__alt_data_end+0xfc019e80>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4019ef8:	380ed43a 	srli	r7,r7,16

      while (space > 0 && sp->tx_out != sp->tx_in)
 4019efc:	38000b1e 	bne	r7,zero,4019f2c <altera_avalon_jtag_uart_irq+0xbc>
 4019f00:	003fdf06 	br	4019e80 <__alt_data_end+0xfc019e80>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4019f04:	20800d17 	ldw	r2,52(r4)
 4019f08:	2085883a 	add	r2,r4,r2
 4019f0c:	10820e07 	ldb	r2,2104(r2)
 4019f10:	30800035 	stwio	r2,0(r6)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4019f14:	20800d17 	ldw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4019f18:	39ffffc4 	addi	r7,r7,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4019f1c:	10800044 	addi	r2,r2,1
 4019f20:	1081ffcc 	andi	r2,r2,2047
 4019f24:	20800d15 	stw	r2,52(r4)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4019f28:	383fd526 	beq	r7,zero,4019e80 <__alt_data_end+0xfc019e80>
 4019f2c:	20c00d17 	ldw	r3,52(r4)
 4019f30:	20800c17 	ldw	r2,48(r4)
 4019f34:	18bff31e 	bne	r3,r2,4019f04 <__alt_data_end+0xfc019f04>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4019f38:	20800817 	ldw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4019f3c:	20c00017 	ldw	r3,0(r4)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4019f40:	1284703a 	and	r2,r2,r10
 4019f44:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4019f48:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4019f4c:	40800037 	ldwio	r2,0(r8)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4019f50:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4019f54:	3880c00c 	andi	r2,r7,768
 4019f58:	103fcc1e 	bne	r2,zero,4019e8c <__alt_data_end+0xfc019e8c>
 4019f5c:	f800283a 	ret
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4019f60:	20800817 	ldw	r2,32(r4)
 4019f64:	1244703a 	and	r2,r2,r9
 4019f68:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4019f6c:	40800035 	stwio	r2,0(r8)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4019f70:	40800037 	ldwio	r2,0(r8)
 4019f74:	003fde06 	br	4019ef0 <__alt_data_end+0xfc019ef0>

04019f78 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4019f78:	defffd04 	addi	sp,sp,-12
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4019f7c:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4019f80:	dc000115 	stw	r16,4(sp)
 4019f84:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4019f88:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4019f8c:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4019f90:	20800815 	stw	r2,32(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4019f94:	2809883a 	mov	r4,r5
 4019f98:	300b883a 	mov	r5,r6
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4019f9c:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4019fa0:	018100b4 	movhi	r6,1026
 4019fa4:	31a79c04 	addi	r6,r6,-24976
 4019fa8:	800f883a 	mov	r7,r16
 4019fac:	d8000015 	stw	zero,0(sp)
 4019fb0:	401a7bc0 	call	401a7bc <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4019fb4:	d1724517 	ldw	r5,-14060(gp)
 4019fb8:	018100b4 	movhi	r6,1026
 4019fbc:	31a78904 	addi	r6,r6,-25052
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4019fc0:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4019fc4:	800f883a 	mov	r7,r16
 4019fc8:	81000204 	addi	r4,r16,8
 4019fcc:	401a5000 	call	401a500 <alt_alarm_start>
 4019fd0:	1000030e 	bge	r2,zero,4019fe0 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4019fd4:	00a00034 	movhi	r2,32768
 4019fd8:	10bfffc4 	addi	r2,r2,-1
 4019fdc:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4019fe0:	dfc00217 	ldw	ra,8(sp)
 4019fe4:	dc000117 	ldw	r16,4(sp)
 4019fe8:	dec00304 	addi	sp,sp,12
 4019fec:	f800283a 	ret

04019ff0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4019ff0:	21800c17 	ldw	r6,48(r4)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
 4019ff4:	2950000c 	andi	r5,r5,16384
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4019ff8:	00000406 	br	401a00c <altera_avalon_jtag_uart_close+0x1c>
 4019ffc:	20c00917 	ldw	r3,36(r4)
 401a000:	20800117 	ldw	r2,4(r4)
 401a004:	1880032e 	bgeu	r3,r2,401a014 <altera_avalon_jtag_uart_close+0x24>
    if (flags & O_NONBLOCK) {
 401a008:	2800041e 	bne	r5,zero,401a01c <altera_avalon_jtag_uart_close+0x2c>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 401a00c:	20800d17 	ldw	r2,52(r4)
 401a010:	11bffa1e 	bne	r2,r6,4019ffc <__alt_data_end+0xfc019ffc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 401a014:	0005883a 	mov	r2,zero
}
 401a018:	f800283a 	ret
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
 401a01c:	00bffd44 	movi	r2,-11
 401a020:	f800283a 	ret

0401a024 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
 401a024:	009a8044 	movi	r2,27137
 401a028:	28800d26 	beq	r5,r2,401a060 <altera_avalon_jtag_uart_ioctl+0x3c>
 401a02c:	009a8084 	movi	r2,27138
 401a030:	2880091e 	bne	r5,r2,401a058 <altera_avalon_jtag_uart_ioctl+0x34>
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 401a034:	21400117 	ldw	r5,4(r4)
 401a038:	00a00034 	movhi	r2,32768
 401a03c:	10bfffc4 	addi	r2,r2,-1
 401a040:	28800526 	beq	r5,r2,401a058 <altera_avalon_jtag_uart_ioctl+0x34>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 401a044:	20c00917 	ldw	r3,36(r4)
      rc = 0;
 401a048:	0005883a 	mov	r2,zero

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 401a04c:	1947803a 	cmpltu	r3,r3,r5
 401a050:	30c00015 	stw	r3,0(r6)
 401a054:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
 401a058:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
 401a05c:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 401a060:	20c00117 	ldw	r3,4(r4)
 401a064:	00a00034 	movhi	r2,32768
 401a068:	10bfffc4 	addi	r2,r2,-1
 401a06c:	18bffa26 	beq	r3,r2,401a058 <__alt_data_end+0xfc01a058>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 401a070:	30800017 	ldw	r2,0(r6)
 401a074:	01600034 	movhi	r5,32768
 401a078:	297fff04 	addi	r5,r5,-4
 401a07c:	10ffff84 	addi	r3,r2,-2
 401a080:	28c0022e 	bgeu	r5,r3,401a08c <altera_avalon_jtag_uart_ioctl+0x68>
 401a084:	00a00034 	movhi	r2,32768
 401a088:	10bfff84 	addi	r2,r2,-2
 401a08c:	20800115 	stw	r2,4(r4)
      rc = 0;
 401a090:	0005883a 	mov	r2,zero
 401a094:	f800283a 	ret

0401a098 <altera_avalon_jtag_uart_read>:
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 401a098:	01804e0e 	bge	zero,r6,401a1d4 <altera_avalon_jtag_uart_read+0x13c>
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 401a09c:	defff504 	addi	sp,sp,-44
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 401a0a0:	39d0000c 	andi	r7,r7,16384
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 401a0a4:	dd800715 	stw	r22,28(sp)
 401a0a8:	dd400615 	stw	r21,24(sp)
 401a0ac:	dd000515 	stw	r20,20(sp)
 401a0b0:	dcc00415 	stw	r19,16(sp)
 401a0b4:	dc800315 	stw	r18,12(sp)
 401a0b8:	dfc00a15 	stw	ra,40(sp)
 401a0bc:	df000915 	stw	fp,36(sp)
 401a0c0:	ddc00815 	stw	r23,32(sp)
 401a0c4:	dc400215 	stw	r17,8(sp)
 401a0c8:	dc000115 	stw	r16,4(sp)
 401a0cc:	3027883a 	mov	r19,r6
 401a0d0:	2025883a 	mov	r18,r4
 401a0d4:	282d883a 	mov	r22,r5
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 401a0d8:	05420004 	movi	r21,2048
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
 401a0dc:	25000e04 	addi	r20,r4,56
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 401a0e0:	d9c00015 	stw	r7,0(sp)
 401a0e4:	94000b17 	ldw	r16,44(r18)
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 401a0e8:	b02f883a 	mov	r23,r22
 401a0ec:	00000a06 	br	401a118 <altera_avalon_jtag_uart_read+0x80>
 401a0f0:	9880012e 	bgeu	r19,r2,401a0f8 <altera_avalon_jtag_uart_read+0x60>
 401a0f4:	9823883a 	mov	r17,r19

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401a0f8:	8461883a 	add	r16,r16,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
 401a0fc:	880d883a 	mov	r6,r17
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401a100:	8401ffcc 	andi	r16,r16,2047
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
 401a104:	400b8140 	call	400b814 <memcpy>
      ptr   += n;
      space -= n;
 401a108:	9c67c83a 	sub	r19,r19,r17

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401a10c:	94000b15 	stw	r16,44(r18)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
 401a110:	bc6f883a 	add	r23,r23,r17
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
 401a114:	04c0080e 	bge	zero,r19,401a138 <altera_avalon_jtag_uart_read+0xa0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 401a118:	97000a17 	ldw	fp,40(r18)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 401a11c:	ac05c83a 	sub	r2,r21,r16
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
 401a120:	e4000136 	bltu	fp,r16,401a128 <altera_avalon_jtag_uart_read+0x90>
        n = in - out;
 401a124:	e405c83a 	sub	r2,fp,r16
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
 401a128:	a40b883a 	add	r5,r20,r16
 401a12c:	b809883a 	mov	r4,r23
 401a130:	1023883a 	mov	r17,r2
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
 401a134:	103fee1e 	bne	r2,zero,401a0f0 <__alt_data_end+0xfc01a0f0>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 401a138:	bd800d1e 	bne	r23,r22,401a170 <altera_avalon_jtag_uart_read+0xd8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 401a13c:	d8800017 	ldw	r2,0(sp)
 401a140:	10000426 	beq	r2,zero,401a154 <altera_avalon_jtag_uart_read+0xbc>
 401a144:	00002106 	br	401a1cc <altera_avalon_jtag_uart_read+0x134>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 401a148:	90c00917 	ldw	r3,36(r18)
 401a14c:	90800117 	ldw	r2,4(r18)
 401a150:	1880022e 	bgeu	r3,r2,401a15c <altera_avalon_jtag_uart_read+0xc4>
 401a154:	90800a17 	ldw	r2,40(r18)
 401a158:	e0bffb26 	beq	fp,r2,401a148 <__alt_data_end+0xfc01a148>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 401a15c:	90800a17 	ldw	r2,40(r18)
 401a160:	e0800126 	beq	fp,r2,401a168 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 401a164:	04ffdf16 	blt	zero,r19,401a0e4 <__alt_data_end+0xfc01a0e4>
  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
 401a168:	00bffec4 	movi	r2,-5
 401a16c:	00000b06 	br	401a19c <altera_avalon_jtag_uart_read+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401a170:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401a174:	00bfff84 	movi	r2,-2
 401a178:	2084703a 	and	r2,r4,r2
 401a17c:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401a180:	90800817 	ldw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401a184:	91400017 	ldw	r5,0(r18)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401a188:	10800054 	ori	r2,r2,1
 401a18c:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401a190:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401a194:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
 401a198:	bd85c83a 	sub	r2,r23,r22
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
 401a19c:	dfc00a17 	ldw	ra,40(sp)
 401a1a0:	df000917 	ldw	fp,36(sp)
 401a1a4:	ddc00817 	ldw	r23,32(sp)
 401a1a8:	dd800717 	ldw	r22,28(sp)
 401a1ac:	dd400617 	ldw	r21,24(sp)
 401a1b0:	dd000517 	ldw	r20,20(sp)
 401a1b4:	dcc00417 	ldw	r19,16(sp)
 401a1b8:	dc800317 	ldw	r18,12(sp)
 401a1bc:	dc400217 	ldw	r17,8(sp)
 401a1c0:	dc000117 	ldw	r16,4(sp)
 401a1c4:	dec00b04 	addi	sp,sp,44
 401a1c8:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
 401a1cc:	00bffd44 	movi	r2,-11
 401a1d0:	003ff206 	br	401a19c <__alt_data_end+0xfc01a19c>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
 401a1d4:	39d0000c 	andi	r7,r7,16384
 401a1d8:	3800021e 	bne	r7,zero,401a1e4 <altera_avalon_jtag_uart_read+0x14c>
    return -EWOULDBLOCK;
  else
    return -EIO;
 401a1dc:	00bffec4 	movi	r2,-5
}
 401a1e0:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
 401a1e4:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
 401a1e8:	f800283a 	ret

0401a1ec <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 401a1ec:	defff504 	addi	sp,sp,-44
 401a1f0:	dc000115 	stw	r16,4(sp)
 401a1f4:	dfc00a15 	stw	ra,40(sp)
 401a1f8:	df000915 	stw	fp,36(sp)
 401a1fc:	ddc00815 	stw	r23,32(sp)
 401a200:	dd800715 	stw	r22,28(sp)
 401a204:	dd400615 	stw	r21,24(sp)
 401a208:	dd000515 	stw	r20,20(sp)
 401a20c:	dcc00415 	stw	r19,16(sp)
 401a210:	dc800315 	stw	r18,12(sp)
 401a214:	dc400215 	stw	r17,8(sp)
 401a218:	d9c00015 	stw	r7,0(sp)
 401a21c:	2021883a 	mov	r16,r4
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 401a220:	01804e0e 	bge	zero,r6,401a35c <altera_avalon_jtag_uart_write+0x170>
 401a224:	302b883a 	mov	r21,r6
 401a228:	2829883a 	mov	r20,r5
 401a22c:	282f883a 	mov	r23,r5
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401a230:	04ffff84 	movi	r19,-2
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
 401a234:	3c90000c 	andi	r18,r7,16384
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
 401a238:	24420e04 	addi	r17,r4,2104
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 401a23c:	85800c17 	ldw	r22,48(r16)
      out = sp->tx_out;
 401a240:	80c00d17 	ldw	r3,52(r16)

      if (in < out)
 401a244:	b0c03b2e 	bgeu	r22,r3,401a334 <altera_avalon_jtag_uart_write+0x148>
        n = out - 1 - in;
 401a248:	1f3fffc4 	addi	fp,r3,-1
 401a24c:	e5b9c83a 	sub	fp,fp,r22
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
 401a250:	e000141e 	bne	fp,zero,401a2a4 <altera_avalon_jtag_uart_write+0xb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401a254:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401a258:	24c4703a 	and	r2,r4,r19
 401a25c:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401a260:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401a264:	81400017 	ldw	r5,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401a268:	10800094 	ori	r2,r2,2
 401a26c:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401a270:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401a274:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
 401a278:	9000351e 	bne	r18,zero,401a350 <altera_avalon_jtag_uart_write+0x164>
 401a27c:	81000917 	ldw	r4,36(r16)
 401a280:	00000206 	br	401a28c <altera_avalon_jtag_uart_write+0xa0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 401a284:	80800117 	ldw	r2,4(r16)
 401a288:	2080022e 	bgeu	r4,r2,401a294 <altera_avalon_jtag_uart_write+0xa8>
 401a28c:	80800d17 	ldw	r2,52(r16)
 401a290:	18bffc26 	beq	r3,r2,401a284 <__alt_data_end+0xfc01a284>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 401a294:	203fe926 	beq	r4,zero,401a23c <__alt_data_end+0xfc01a23c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 401a298:	bd00191e 	bne	r23,r20,401a300 <altera_avalon_jtag_uart_write+0x114>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 401a29c:	00bffec4 	movi	r2,-5
 401a2a0:	00001806 	br	401a304 <altera_avalon_jtag_uart_write+0x118>
 401a2a4:	af00012e 	bgeu	r21,fp,401a2ac <altera_avalon_jtag_uart_write+0xc0>
 401a2a8:	a839883a 	mov	fp,r21
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
 401a2ac:	b80b883a 	mov	r5,r23
 401a2b0:	e00d883a 	mov	r6,fp
 401a2b4:	8d89883a 	add	r4,r17,r22
 401a2b8:	400b8140 	call	400b814 <memcpy>
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401a2bc:	b70f883a 	add	r7,r22,fp
 401a2c0:	39c1ffcc 	andi	r7,r7,2047
      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
      count -= n;
 401a2c4:	af2bc83a 	sub	r21,r21,fp

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401a2c8:	81c00c15 	stw	r7,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
 401a2cc:	bf2f883a 	add	r23,r23,fp
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 401a2d0:	057fda16 	blt	zero,r21,401a23c <__alt_data_end+0xfc01a23c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401a2d4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401a2d8:	00bfff84 	movi	r2,-2
 401a2dc:	1884703a 	and	r2,r3,r2
 401a2e0:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401a2e4:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401a2e8:	81000017 	ldw	r4,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401a2ec:	10800094 	ori	r2,r2,2
 401a2f0:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401a2f4:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401a2f8:	1801703a 	wrctl	status,r3
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 401a2fc:	a5c02126 	beq	r20,r23,401a384 <altera_avalon_jtag_uart_write+0x198>
    return ptr - start;
 401a300:	bd05c83a 	sub	r2,r23,r20
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
 401a304:	dfc00a17 	ldw	ra,40(sp)
 401a308:	df000917 	ldw	fp,36(sp)
 401a30c:	ddc00817 	ldw	r23,32(sp)
 401a310:	dd800717 	ldw	r22,28(sp)
 401a314:	dd400617 	ldw	r21,24(sp)
 401a318:	dd000517 	ldw	r20,20(sp)
 401a31c:	dcc00417 	ldw	r19,16(sp)
 401a320:	dc800317 	ldw	r18,12(sp)
 401a324:	dc400217 	ldw	r17,8(sp)
 401a328:	dc000117 	ldw	r16,4(sp)
 401a32c:	dec00b04 	addi	sp,sp,44
 401a330:	f800283a 	ret
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
 401a334:	18000326 	beq	r3,zero,401a344 <altera_avalon_jtag_uart_write+0x158>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 401a338:	00820004 	movi	r2,2048
 401a33c:	15b9c83a 	sub	fp,r2,r22
 401a340:	003fc306 	br	401a250 <__alt_data_end+0xfc01a250>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 401a344:	0081ffc4 	movi	r2,2047
 401a348:	15b9c83a 	sub	fp,r2,r22
 401a34c:	003fc006 	br	401a250 <__alt_data_end+0xfc01a250>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 401a350:	bd3feb1e 	bne	r23,r20,401a300 <__alt_data_end+0xfc01a300>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
 401a354:	00bffd44 	movi	r2,-11
 401a358:	003fea06 	br	401a304 <__alt_data_end+0xfc01a304>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401a35c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401a360:	00bfff84 	movi	r2,-2
 401a364:	1884703a 	and	r2,r3,r2
 401a368:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401a36c:	20800817 	ldw	r2,32(r4)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401a370:	21000017 	ldw	r4,0(r4)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401a374:	10800094 	ori	r2,r2,2
 401a378:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401a37c:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401a380:	1801703a 	wrctl	status,r3
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
 401a384:	d8800017 	ldw	r2,0(sp)
 401a388:	15d0000c 	andi	r23,r2,16384
 401a38c:	b83fc326 	beq	r23,zero,401a29c <__alt_data_end+0xfc01a29c>
 401a390:	003ff006 	br	401a354 <__alt_data_end+0xfc01a354>

0401a394 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 401a394:	d8800017 	ldw	r2,0(sp)
 401a398:	da800117 	ldw	r10,4(sp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 401a39c:	00c00044 	movi	r3,1

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 401a3a0:	db800217 	ldw	r14,8(sp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 401a3a4:	194a983a 	sll	r5,r3,r5
int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  const alt_u8 * write_end = write_data + write_length;
 401a3a8:	3999883a 	add	r12,r7,r6
  alt_u8 * read_end = read_data + read_length;
 401a3ac:	509b883a 	add	r13,r10,r2
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 401a3b0:	21400535 	stwio	r5,20(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 401a3b4:	70c0008c 	andi	r3,r14,2
 401a3b8:	18002d26 	beq	r3,zero,401a470 <alt_avalon_spi_command+0xdc>
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 401a3bc:	20c00037 	ldwio	r3,0(r4)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 401a3c0:	02000044 	movi	r8,1
 401a3c4:	22400204 	addi	r9,r4,8
                           alt_u32 flags)
{
  const alt_u8 * write_end = write_data + write_length;
  alt_u8 * read_end = read_data + read_length;

  alt_u32 write_zeros = read_length;
 401a3c8:	1017883a 	mov	r11,r2
      if (write_data < write_end)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
      else if (write_zeros > 0)
      {
        write_zeros--;
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 401a3cc:	23c00104 	addi	r15,r4,4
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 401a3d0:	48c00037 	ldwio	r3,0(r9)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 401a3d4:	1940100c 	andi	r5,r3,64
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401a3d8:	18c0200c 	andi	r3,r3,128
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 401a3dc:	28000626 	beq	r5,zero,401a3f8 <alt_avalon_spi_command+0x64>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401a3e0:	40000526 	beq	r8,zero,401a3f8 <alt_avalon_spi_command+0x64>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 401a3e4:	0200040e 	bge	zero,r8,401a3f8 <alt_avalon_spi_command+0x64>
    {
      credits--;
 401a3e8:	423fffc4 	addi	r8,r8,-1

      if (write_data < write_end)
 401a3ec:	3b001536 	bltu	r7,r12,401a444 <alt_avalon_spi_command+0xb0>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
      else if (write_zeros > 0)
 401a3f0:	5800191e 	bne	r11,zero,401a458 <alt_avalon_spi_command+0xc4>
      {
        write_zeros--;
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
      }
      else
        credits = -1024;
 401a3f4:	023f0004 	movi	r8,-1024
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 401a3f8:	183ff526 	beq	r3,zero,401a3d0 <__alt_data_end+0xfc01a3d0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 401a3fc:	20c00037 	ldwio	r3,0(r4)

      if (read_ignore > 0)
 401a400:	30000626 	beq	r6,zero,401a41c <alt_avalon_spi_command+0x88>
        read_ignore--;
 401a404:	31bfffc4 	addi	r6,r6,-1
      else
        *read_data++ = (alt_u8)rxdata;
      credits++;
 401a408:	42000044 	addi	r8,r8,1

      if (read_ignore == 0 && read_data == read_end)
 401a40c:	303ff01e 	bne	r6,zero,401a3d0 <__alt_data_end+0xfc01a3d0>
 401a410:	6a800626 	beq	r13,r10,401a42c <alt_avalon_spi_command+0x98>
 401a414:	000d883a 	mov	r6,zero
 401a418:	003fed06 	br	401a3d0 <__alt_data_end+0xfc01a3d0>
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);

      if (read_ignore > 0)
        read_ignore--;
      else
        *read_data++ = (alt_u8)rxdata;
 401a41c:	50c00005 	stb	r3,0(r10)
 401a420:	52800044 	addi	r10,r10,1
      credits++;
 401a424:	42000044 	addi	r8,r8,1

      if (read_ignore == 0 && read_data == read_end)
 401a428:	6abffa1e 	bne	r13,r10,401a414 <__alt_data_end+0xfc01a414>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 401a42c:	48c00037 	ldwio	r3,0(r9)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 401a430:	18c0080c 	andi	r3,r3,32
 401a434:	183ffd26 	beq	r3,zero,401a42c <__alt_data_end+0xfc01a42c>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 401a438:	7380004c 	andi	r14,r14,1
 401a43c:	70000a26 	beq	r14,zero,401a468 <alt_avalon_spi_command+0xd4>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);

  return read_length;
}
 401a440:	f800283a 	ret
    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    {
      credits--;

      if (write_data < write_end)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 401a444:	39400003 	ldbu	r5,0(r7)
 401a448:	39c00044 	addi	r7,r7,1
 401a44c:	79400035 	stwio	r5,0(r15)
      }
      else
        credits = -1024;
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 401a450:	183fdf26 	beq	r3,zero,401a3d0 <__alt_data_end+0xfc01a3d0>
 401a454:	003fe906 	br	401a3fc <__alt_data_end+0xfc01a3fc>

      if (write_data < write_end)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
      else if (write_zeros > 0)
      {
        write_zeros--;
 401a458:	5affffc4 	addi	r11,r11,-1
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 401a45c:	78000035 	stwio	zero,0(r15)
      }
      else
        credits = -1024;
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 401a460:	183fdb26 	beq	r3,zero,401a3d0 <__alt_data_end+0xfc01a3d0>
 401a464:	003fe506 	br	401a3fc <__alt_data_end+0xfc01a3fc>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 401a468:	20000335 	stwio	zero,12(r4)

  return read_length;
 401a46c:	f800283a 	ret

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 401a470:	00c10004 	movi	r3,1024
 401a474:	20c00335 	stwio	r3,12(r4)
 401a478:	003fd006 	br	401a3bc <__alt_data_end+0xfc01a3bc>

0401a47c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 401a47c:	defffe04 	addi	sp,sp,-8
 401a480:	dfc00115 	stw	ra,4(sp)
 401a484:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 401a488:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 401a48c:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401a490:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401a494:	00bfff84 	movi	r2,-2
 401a498:	8084703a 	and	r2,r16,r2
 401a49c:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
 401a4a0:	401ab6c0 	call	401ab6c <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401a4a4:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
 401a4a8:	dfc00117 	ldw	ra,4(sp)
 401a4ac:	dc000017 	ldw	r16,0(sp)
 401a4b0:	dec00204 	addi	sp,sp,8
 401a4b4:	f800283a 	ret

0401a4b8 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 401a4b8:	d0f24517 	ldw	r3,-14060(gp)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 401a4bc:	defffe04 	addi	sp,sp,-8
 401a4c0:	dfc00115 	stw	ra,4(sp)
 401a4c4:	2005883a 	mov	r2,r4
 401a4c8:	2809883a 	mov	r4,r5
 401a4cc:	300b883a 	mov	r5,r6
 401a4d0:	1800011e 	bne	r3,zero,401a4d8 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
 401a4d4:	d1f24515 	stw	r7,-14060(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 401a4d8:	00c001c4 	movi	r3,7
 401a4dc:	10c00135 	stwio	r3,4(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 401a4e0:	018100b4 	movhi	r6,1026
 401a4e4:	31a91f04 	addi	r6,r6,-23428
 401a4e8:	d8000015 	stw	zero,0(sp)
 401a4ec:	100f883a 	mov	r7,r2
 401a4f0:	401a7bc0 	call	401a7bc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 401a4f4:	dfc00117 	ldw	ra,4(sp)
 401a4f8:	dec00204 	addi	sp,sp,8
 401a4fc:	f800283a 	ret

0401a500 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
 401a500:	d0b24517 	ldw	r2,-14060(gp)
 401a504:	10001a26 	beq	r2,zero,401a570 <alt_alarm_start+0x70>
  {
    if (alarm)
 401a508:	20001b26 	beq	r4,zero,401a578 <alt_alarm_start+0x78>
    {
      alarm->callback = callback;
 401a50c:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
 401a510:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401a514:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401a518:	00bfff84 	movi	r2,-2
 401a51c:	1884703a 	and	r2,r3,r2
 401a520:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 401a524:	d0b24417 	ldw	r2,-14064(gp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
 401a528:	11800044 	addi	r6,r2,1
 401a52c:	314b883a 	add	r5,r6,r5
 401a530:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 401a534:	28800b36 	bltu	r5,r2,401a564 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
 401a538:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 401a53c:	d0a5ba04 	addi	r2,gp,-26904
 401a540:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
 401a544:	d0a5ba17 	ldw	r2,-26904(gp)
 401a548:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
 401a54c:	d0a5ba17 	ldw	r2,-26904(gp)
  list->next           = entry;
 401a550:	d125ba15 	stw	r4,-26904(gp)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
 401a554:	11000115 	stw	r4,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401a558:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
 401a55c:	0005883a 	mov	r2,zero
 401a560:	f800283a 	ret
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
      {
        alarm->rollover = 1;
 401a564:	00800044 	movi	r2,1
 401a568:	20800405 	stb	r2,16(r4)
 401a56c:	003ff306 	br	401a53c <__alt_data_end+0xfc01a53c>
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
 401a570:	00bfde84 	movi	r2,-134
 401a574:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
 401a578:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
 401a57c:	f800283a 	ret

0401a580 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 401a580:	01424974 	movhi	r5,2341
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 401a584:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 401a588:	29649244 	addi	r5,r5,-28087
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 401a58c:	dc000015 	stw	r16,0(sp)
 401a590:	dfc00115 	stw	ra,4(sp)
 401a594:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 401a598:	400a9780 	call	400a978 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 401a59c:	10001426 	beq	r2,zero,401a5f0 <alt_busy_sleep+0x70>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 401a5a0:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 401a5a4:	013db6f4 	movhi	r4,63195
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 401a5a8:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 401a5ac:	211b6dc4 	addi	r4,r4,28087
 401a5b0:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 401a5b4:	297fffc4 	addi	r5,r5,-1
 401a5b8:	283ffe1e 	bne	r5,zero,401a5b4 <__alt_data_end+0xfc01a5b4>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 401a5bc:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 401a5c0:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 401a5c4:	18bffb16 	blt	r3,r2,401a5b4 <__alt_data_end+0xfc01a5b4>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 401a5c8:	01400384 	movi	r5,14
 401a5cc:	8009883a 	mov	r4,r16
 401a5d0:	400aa340 	call	400aa34 <__mulsi3>
 401a5d4:	10bfffc4 	addi	r2,r2,-1
 401a5d8:	103ffe1e 	bne	r2,zero,401a5d4 <__alt_data_end+0xfc01a5d4>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 401a5dc:	0005883a 	mov	r2,zero
 401a5e0:	dfc00117 	ldw	ra,4(sp)
 401a5e4:	dc000017 	ldw	r16,0(sp)
 401a5e8:	dec00204 	addi	sp,sp,8
 401a5ec:	f800283a 	ret
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 401a5f0:	01400384 	movi	r5,14
 401a5f4:	8009883a 	mov	r4,r16
 401a5f8:	400aa340 	call	400aa34 <__mulsi3>
 401a5fc:	10bfffc4 	addi	r2,r2,-1
 401a600:	00bffe16 	blt	zero,r2,401a5fc <__alt_data_end+0xfc01a5fc>
 401a604:	003ff506 	br	401a5dc <__alt_data_end+0xfc01a5dc>

0401a608 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 401a608:	f800283a 	ret

0401a60c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 401a60c:	20000a26 	beq	r4,zero,401a638 <alt_dev_llist_insert+0x2c>
 401a610:	20800217 	ldw	r2,8(r4)
 401a614:	10000826 	beq	r2,zero,401a638 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
 401a618:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 401a61c:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
 401a620:	0005883a 	mov	r2,zero
  entry->next     = list->next;
 401a624:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
 401a628:	28c00017 	ldw	r3,0(r5)
 401a62c:	19000115 	stw	r4,4(r3)
  list->next           = entry;
 401a630:	29000015 	stw	r4,0(r5)
 401a634:	f800283a 	ret
 401a638:	d0a5b517 	ldw	r2,-26924(gp)
 401a63c:	10000926 	beq	r2,zero,401a664 <alt_dev_llist_insert+0x58>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 401a640:	deffff04 	addi	sp,sp,-4
 401a644:	dfc00015 	stw	ra,0(sp)
 401a648:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 401a64c:	00c00584 	movi	r3,22
 401a650:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 401a654:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 401a658:	dfc00017 	ldw	ra,0(sp)
 401a65c:	dec00104 	addi	sp,sp,4
 401a660:	f800283a 	ret
 401a664:	d0b23c04 	addi	r2,gp,-14096
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 401a668:	00c00584 	movi	r3,22
 401a66c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 401a670:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 401a674:	f800283a 	ret

0401a678 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 401a678:	defffc04 	addi	sp,sp,-16
 401a67c:	dc800215 	stw	r18,8(sp)
 401a680:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401a684:	048100b4 	movhi	r18,1026
 401a688:	040100b4 	movhi	r16,1026
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 401a68c:	dfc00315 	stw	ra,12(sp)
 401a690:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401a694:	842c6b04 	addi	r16,r16,-20052
 401a698:	94ac6a04 	addi	r18,r18,-20056
 401a69c:	84800936 	bltu	r16,r18,401a6c4 <_do_ctors+0x4c>
 401a6a0:	84a5c83a 	sub	r18,r16,r18
 401a6a4:	9024d0ba 	srli	r18,r18,2
 401a6a8:	0023883a 	mov	r17,zero
 401a6ac:	94800044 	addi	r18,r18,1
        (*ctor) (); 
 401a6b0:	80800017 	ldw	r2,0(r16)
 401a6b4:	8c400044 	addi	r17,r17,1

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401a6b8:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
 401a6bc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401a6c0:	8cbffb1e 	bne	r17,r18,401a6b0 <__alt_data_end+0xfc01a6b0>
        (*ctor) (); 
}
 401a6c4:	dfc00317 	ldw	ra,12(sp)
 401a6c8:	dc800217 	ldw	r18,8(sp)
 401a6cc:	dc400117 	ldw	r17,4(sp)
 401a6d0:	dc000017 	ldw	r16,0(sp)
 401a6d4:	dec00404 	addi	sp,sp,16
 401a6d8:	f800283a 	ret

0401a6dc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 401a6dc:	defffc04 	addi	sp,sp,-16
 401a6e0:	dc800215 	stw	r18,8(sp)
 401a6e4:	dc000015 	stw	r16,0(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401a6e8:	048100b4 	movhi	r18,1026
 401a6ec:	040100b4 	movhi	r16,1026
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 401a6f0:	dfc00315 	stw	ra,12(sp)
 401a6f4:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401a6f8:	842c6b04 	addi	r16,r16,-20052
 401a6fc:	94ac6c04 	addi	r18,r18,-20048
 401a700:	84800936 	bltu	r16,r18,401a728 <_do_dtors+0x4c>
 401a704:	84a5c83a 	sub	r18,r16,r18
 401a708:	9024d0ba 	srli	r18,r18,2
 401a70c:	0023883a 	mov	r17,zero
 401a710:	94800044 	addi	r18,r18,1
        (*dtor) (); 
 401a714:	80800017 	ldw	r2,0(r16)
 401a718:	8c400044 	addi	r17,r17,1

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401a71c:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
 401a720:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401a724:	8cbffb1e 	bne	r17,r18,401a714 <__alt_data_end+0xfc01a714>
        (*dtor) (); 
}
 401a728:	dfc00317 	ldw	ra,12(sp)
 401a72c:	dc800217 	ldw	r18,8(sp)
 401a730:	dc400117 	ldw	r17,4(sp)
 401a734:	dc000017 	ldw	r16,0(sp)
 401a738:	dec00404 	addi	sp,sp,16
 401a73c:	f800283a 	ret

0401a740 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 401a740:	defffb04 	addi	sp,sp,-20
 401a744:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
 401a748:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 401a74c:	dc400115 	stw	r17,4(sp)
 401a750:	2823883a 	mov	r17,r5
 401a754:	dcc00315 	stw	r19,12(sp)
 401a758:	dfc00415 	stw	ra,16(sp)
 401a75c:	dc800215 	stw	r18,8(sp)
 401a760:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
 401a764:	400c0180 	call	400c018 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401a768:	8c000b26 	beq	r17,r16,401a798 <alt_find_dev+0x58>
 401a76c:	14800044 	addi	r18,r2,1
 401a770:	00000206 	br	401a77c <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
 401a774:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401a778:	8c000726 	beq	r17,r16,401a798 <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 401a77c:	81000217 	ldw	r4,8(r16)
 401a780:	900d883a 	mov	r6,r18
 401a784:	980b883a 	mov	r5,r19
 401a788:	401ae5c0 	call	401ae5c <memcmp>
 401a78c:	103ff91e 	bne	r2,zero,401a774 <__alt_data_end+0xfc01a774>
 401a790:	8005883a 	mov	r2,r16
 401a794:	00000106 	br	401a79c <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 401a798:	0005883a 	mov	r2,zero
}
 401a79c:	dfc00417 	ldw	ra,16(sp)
 401a7a0:	dcc00317 	ldw	r19,12(sp)
 401a7a4:	dc800217 	ldw	r18,8(sp)
 401a7a8:	dc400117 	ldw	r17,4(sp)
 401a7ac:	dc000017 	ldw	r16,0(sp)
 401a7b0:	dec00504 	addi	sp,sp,20
 401a7b4:	f800283a 	ret

0401a7b8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 401a7b8:	f800283a 	ret

0401a7bc <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 401a7bc:	401a8481 	jmpi	401a848 <alt_iic_isr_register>

0401a7c0 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401a7c0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401a7c4:	00bfff84 	movi	r2,-2
 401a7c8:	2084703a 	and	r2,r4,r2
 401a7cc:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 401a7d0:	00c00044 	movi	r3,1
 401a7d4:	d0b24317 	ldw	r2,-14068(gp)
 401a7d8:	194a983a 	sll	r5,r3,r5
 401a7dc:	288ab03a 	or	r5,r5,r2
 401a7e0:	d1724315 	stw	r5,-14068(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401a7e4:	d0b24317 	ldw	r2,-14068(gp)
 401a7e8:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401a7ec:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
 401a7f0:	0005883a 	mov	r2,zero
 401a7f4:	f800283a 	ret

0401a7f8 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401a7f8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401a7fc:	00bfff84 	movi	r2,-2
 401a800:	2084703a 	and	r2,r4,r2
 401a804:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
 401a808:	00ffff84 	movi	r3,-2
 401a80c:	d0b24317 	ldw	r2,-14068(gp)
 401a810:	194a183a 	rol	r5,r3,r5
 401a814:	288a703a 	and	r5,r5,r2
 401a818:	d1724315 	stw	r5,-14068(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401a81c:	d0b24317 	ldw	r2,-14068(gp)
 401a820:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401a824:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
 401a828:	0005883a 	mov	r2,zero
 401a82c:	f800283a 	ret

0401a830 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 401a830:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
 401a834:	00800044 	movi	r2,1
 401a838:	1144983a 	sll	r2,r2,r5
 401a83c:	10c4703a 	and	r2,r2,r3
}
 401a840:	1004c03a 	cmpne	r2,r2,zero
 401a844:	f800283a 	ret

0401a848 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 401a848:	00c007c4 	movi	r3,31
 401a84c:	19401616 	blt	r3,r5,401a8a8 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401a850:	defffe04 	addi	sp,sp,-8
 401a854:	dfc00115 	stw	ra,4(sp)
 401a858:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401a85c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401a860:	00ffff84 	movi	r3,-2
 401a864:	80c6703a 	and	r3,r16,r3
 401a868:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 401a86c:	280490fa 	slli	r2,r5,3
 401a870:	00c100f4 	movhi	r3,1027
 401a874:	18e0f104 	addi	r3,r3,-31804
 401a878:	1885883a 	add	r2,r3,r2
 401a87c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
 401a880:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 401a884:	30000626 	beq	r6,zero,401a8a0 <alt_iic_isr_register+0x58>
 401a888:	401a7c00 	call	401a7c0 <alt_ic_irq_enable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401a88c:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
 401a890:	dfc00117 	ldw	ra,4(sp)
 401a894:	dc000017 	ldw	r16,0(sp)
 401a898:	dec00204 	addi	sp,sp,8
 401a89c:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 401a8a0:	401a7f80 	call	401a7f8 <alt_ic_irq_disable>
 401a8a4:	003ff906 	br	401a88c <__alt_data_end+0xfc01a88c>
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
 401a8a8:	00bffa84 	movi	r2,-22
 401a8ac:	f800283a 	ret

0401a8b0 <alt_open_fd.constprop.0>:
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
 401a8b0:	defffd04 	addi	sp,sp,-12
 401a8b4:	2805883a 	mov	r2,r5
 401a8b8:	dc400115 	stw	r17,4(sp)
 401a8bc:	300b883a 	mov	r5,r6
 401a8c0:	2023883a 	mov	r17,r4
{
  int old;

  old = open (name, flags, mode);
 401a8c4:	01807fc4 	movi	r6,511
 401a8c8:	1009883a 	mov	r4,r2
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
 401a8cc:	dfc00215 	stw	ra,8(sp)
 401a8d0:	dc000015 	stw	r16,0(sp)
{
  int old;

  old = open (name, flags, mode);
 401a8d4:	401a9b00 	call	401a9b0 <open>

  if (old >= 0)
 401a8d8:	10001316 	blt	r2,zero,401a928 <alt_open_fd.constprop.0+0x78>
  {
    fd->dev      = alt_fd_list[old].dev;
 401a8dc:	1009883a 	mov	r4,r2
 401a8e0:	01400304 	movi	r5,12
 401a8e4:	1021883a 	mov	r16,r2
 401a8e8:	400aa340 	call	400aa34 <__mulsi3>
 401a8ec:	00c100b4 	movhi	r3,1026
 401a8f0:	18c9b804 	addi	r3,r3,9952
 401a8f4:	1885883a 	add	r2,r3,r2
 401a8f8:	11400017 	ldw	r5,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
 401a8fc:	10c00217 	ldw	r3,8(r2)

    alt_release_fd (old);
 401a900:	8009883a 	mov	r4,r16

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
 401a904:	89400015 	stw	r5,0(r17)
    fd->priv     = alt_fd_list[old].priv;
 401a908:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 401a90c:	88c00215 	stw	r3,8(r17)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
 401a910:	88800115 	stw	r2,4(r17)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  }
} 
 401a914:	dfc00217 	ldw	ra,8(sp)
 401a918:	dc400117 	ldw	r17,4(sp)
 401a91c:	dc000017 	ldw	r16,0(sp)
 401a920:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
 401a924:	401889c1 	jmpi	401889c <alt_release_fd>
  }
} 
 401a928:	dfc00217 	ldw	ra,8(sp)
 401a92c:	dc400117 	ldw	r17,4(sp)
 401a930:	dc000017 	ldw	r16,0(sp)
 401a934:	dec00304 	addi	sp,sp,12
 401a938:	f800283a 	ret

0401a93c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 401a93c:	defffb04 	addi	sp,sp,-20
 401a940:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 401a944:	040100b4 	movhi	r16,1026
 401a948:	8409bb04 	addi	r16,r16,9964
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 401a94c:	dc400115 	stw	r17,4(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 401a950:	04400044 	movi	r17,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 401a954:	dcc00315 	stw	r19,12(sp)
 401a958:	dc800215 	stw	r18,8(sp)
 401a95c:	2827883a 	mov	r19,r5
 401a960:	3025883a 	mov	r18,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 401a964:	200b883a 	mov	r5,r4
 401a968:	880d883a 	mov	r6,r17
 401a96c:	8009883a 	mov	r4,r16
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 401a970:	dfc00415 	stw	ra,16(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 401a974:	401a8b00 	call	401a8b0 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 401a978:	813ffd04 	addi	r4,r16,-12
 401a97c:	980b883a 	mov	r5,r19
 401a980:	000d883a 	mov	r6,zero
 401a984:	401a8b00 	call	401a8b0 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 401a988:	880d883a 	mov	r6,r17
 401a98c:	900b883a 	mov	r5,r18
 401a990:	81000304 	addi	r4,r16,12
}  
 401a994:	dfc00417 	ldw	ra,16(sp)
 401a998:	dcc00317 	ldw	r19,12(sp)
 401a99c:	dc800217 	ldw	r18,8(sp)
 401a9a0:	dc400117 	ldw	r17,4(sp)
 401a9a4:	dc000017 	ldw	r16,0(sp)
 401a9a8:	dec00504 	addi	sp,sp,20
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 401a9ac:	401a8b01 	jmpi	401a8b0 <alt_open_fd.constprop.0>

0401a9b0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 401a9b0:	defffa04 	addi	sp,sp,-24
 401a9b4:	dc000015 	stw	r16,0(sp)
 401a9b8:	2821883a 	mov	r16,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 401a9bc:	d165b104 	addi	r5,gp,-26940
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 401a9c0:	dc800215 	stw	r18,8(sp)
 401a9c4:	dc400115 	stw	r17,4(sp)
 401a9c8:	dfc00515 	stw	ra,20(sp)
 401a9cc:	dd000415 	stw	r20,16(sp)
 401a9d0:	dcc00315 	stw	r19,12(sp)
 401a9d4:	2023883a 	mov	r17,r4
 401a9d8:	3025883a 	mov	r18,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 401a9dc:	401a7400 	call	401a740 <alt_find_dev>
 401a9e0:	10004a26 	beq	r2,zero,401ab0c <open+0x15c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
 401a9e4:	1009883a 	mov	r4,r2
 401a9e8:	1029883a 	mov	r20,r2
 401a9ec:	401ad140 	call	401ad14 <alt_get_fd>
 401a9f0:	1027883a 	mov	r19,r2
 401a9f4:	1000090e 	bge	r2,zero,401aa1c <open+0x6c>
 401a9f8:	04e1c83a 	sub	r16,zero,r19

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
 401a9fc:	9809883a 	mov	r4,r19
 401aa00:	401889c0 	call	401889c <alt_release_fd>
 401aa04:	d0a5b517 	ldw	r2,-26924(gp)
 401aa08:	10004726 	beq	r2,zero,401ab28 <open+0x178>
 401aa0c:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
 401aa10:	14000015 	stw	r16,0(r2)
    return -1;
 401aa14:	00bfffc4 	movi	r2,-1
 401aa18:	00003206 	br	401aae4 <open+0x134>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 401aa1c:	01400304 	movi	r5,12
 401aa20:	9809883a 	mov	r4,r19
 401aa24:	400aa340 	call	400aa34 <__mulsi3>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 401aa28:	01500034 	movhi	r5,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 401aa2c:	00c100b4 	movhi	r3,1026

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 401aa30:	297fffc4 	addi	r5,r5,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 401aa34:	18c9b804 	addi	r3,r3,9952

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 401aa38:	814a703a 	and	r5,r16,r5
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 401aa3c:	1889883a 	add	r4,r3,r2

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 401aa40:	29500034 	orhi	r5,r5,16384
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401aa44:	d265b017 	ldw	r9,-26944(gp)
 401aa48:	22000017 	ldw	r8,0(r4)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 401aa4c:	21400215 	stw	r5,8(r4)
 401aa50:	19800204 	addi	r6,r3,8
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401aa54:	000b883a 	mov	r5,zero
 401aa58:	00000306 	br	401aa68 <open+0xb8>
 401aa5c:	18c00304 	addi	r3,r3,12
 401aa60:	31800304 	addi	r6,r6,12
 401aa64:	49401636 	bltu	r9,r5,401aac0 <open+0x110>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401aa68:	19c00017 	ldw	r7,0(r3)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401aa6c:	29400044 	addi	r5,r5,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401aa70:	3a3ffa1e 	bne	r7,r8,401aa5c <__alt_data_end+0xfc01aa5c>
 401aa74:	30800017 	ldw	r2,0(r6)
 401aa78:	103ff80e 	bge	r2,zero,401aa5c <__alt_data_end+0xfc01aa5c>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401aa7c:	20fff726 	beq	r4,r3,401aa5c <__alt_data_end+0xfc01aa5c>
 401aa80:	04000344 	movi	r16,13
 401aa84:	003fdd06 	br	401a9fc <__alt_data_end+0xfc01a9fc>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
 401aa88:	1009883a 	mov	r4,r2
 401aa8c:	401ad140 	call	401ad14 <alt_get_fd>
 401aa90:	1027883a 	mov	r19,r2
 401aa94:	103fd816 	blt	r2,zero,401a9f8 <__alt_data_end+0xfc01a9f8>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 401aa98:	9809883a 	mov	r4,r19
 401aa9c:	01400304 	movi	r5,12
 401aaa0:	400aa340 	call	400aa34 <__mulsi3>
 401aaa4:	010100b4 	movhi	r4,1026
 401aaa8:	2109b804 	addi	r4,r4,9952
 401aaac:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 401aab0:	00900034 	movhi	r2,16384
 401aab4:	10bfffc4 	addi	r2,r2,-1
 401aab8:	8084703a 	and	r2,r16,r2
 401aabc:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 401aac0:	a0800317 	ldw	r2,12(r20)
 401aac4:	10000f26 	beq	r2,zero,401ab04 <open+0x154>
 401aac8:	900f883a 	mov	r7,r18
 401aacc:	800d883a 	mov	r6,r16
 401aad0:	880b883a 	mov	r5,r17
 401aad4:	103ee83a 	callr	r2
 401aad8:	1007883a 	mov	r3,r2
 401aadc:	9805883a 	mov	r2,r19
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 401aae0:	18001316 	blt	r3,zero,401ab30 <open+0x180>
  }
  
  /* return the reference upon success */

  return index;
}
 401aae4:	dfc00517 	ldw	ra,20(sp)
 401aae8:	dd000417 	ldw	r20,16(sp)
 401aaec:	dcc00317 	ldw	r19,12(sp)
 401aaf0:	dc800217 	ldw	r18,8(sp)
 401aaf4:	dc400117 	ldw	r17,4(sp)
 401aaf8:	dc000017 	ldw	r16,0(sp)
 401aafc:	dec00604 	addi	sp,sp,24
 401ab00:	f800283a 	ret
 401ab04:	9805883a 	mov	r2,r19
 401ab08:	003ff606 	br	401aae4 <__alt_data_end+0xfc01aae4>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 401ab0c:	8809883a 	mov	r4,r17
 401ab10:	401ac680 	call	401ac68 <alt_find_file>
 401ab14:	1029883a 	mov	r20,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 401ab18:	103fdb1e 	bne	r2,zero,401aa88 <__alt_data_end+0xfc01aa88>
 401ab1c:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 401ab20:	04ffffc4 	movi	r19,-1
 401ab24:	003fb506 	br	401a9fc <__alt_data_end+0xfc01a9fc>
 401ab28:	d0b23c04 	addi	r2,gp,-14096
 401ab2c:	003fb806 	br	401aa10 <__alt_data_end+0xfc01aa10>
 401ab30:	00e1c83a 	sub	r16,zero,r3
 401ab34:	003fb106 	br	401a9fc <__alt_data_end+0xfc01a9fc>

0401ab38 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401ab38:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401ab3c:	00bfff84 	movi	r2,-2
 401ab40:	1884703a 	and	r2,r3,r2
 401ab44:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 401ab48:	21400117 	ldw	r5,4(r4)
 401ab4c:	20800017 	ldw	r2,0(r4)
 401ab50:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
 401ab54:	21400117 	ldw	r5,4(r4)
 401ab58:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 401ab5c:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
 401ab60:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401ab64:	1801703a 	wrctl	status,r3
 401ab68:	f800283a 	ret

0401ab6c <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 401ab6c:	d0b24417 	ldw	r2,-14064(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 401ab70:	defffa04 	addi	sp,sp,-24
 401ab74:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 401ab78:	d425ba17 	ldw	r16,-26904(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 401ab7c:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 401ab80:	dc800215 	stw	r18,8(sp)
 401ab84:	dfc00515 	stw	ra,20(sp)
 401ab88:	dd000415 	stw	r20,16(sp)
 401ab8c:	dcc00315 	stw	r19,12(sp)
 401ab90:	dc400115 	stw	r17,4(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 401ab94:	d4a5ba04 	addi	r18,gp,-26904

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 401ab98:	d0b24415 	stw	r2,-14064(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401ab9c:	84801126 	beq	r16,r18,401abe4 <alt_tick+0x78>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
 401aba0:	04c00044 	movi	r19,1
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401aba4:	053fff84 	movi	r20,-2
 401aba8:	00000606 	br	401abc4 <alt_tick+0x58>
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    {
      alarm->rollover = 0;
 401abac:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 401abb0:	d0f24417 	ldw	r3,-14064(gp)
 401abb4:	80800217 	ldw	r2,8(r16)
 401abb8:	1880122e 	bgeu	r3,r2,401ac04 <alt_tick+0x98>
 401abbc:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401abc0:	8c800826 	beq	r17,r18,401abe4 <alt_tick+0x78>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 401abc4:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
 401abc8:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 401abcc:	103ff826 	beq	r2,zero,401abb0 <__alt_data_end+0xfc01abb0>
 401abd0:	d0b24417 	ldw	r2,-14064(gp)
 401abd4:	103ff526 	beq	r2,zero,401abac <__alt_data_end+0xfc01abac>
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 401abd8:	d0b24417 	ldw	r2,-14064(gp)
 401abdc:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401abe0:	8cbff81e 	bne	r17,r18,401abc4 <__alt_data_end+0xfc01abc4>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 401abe4:	dfc00517 	ldw	ra,20(sp)
 401abe8:	dd000417 	ldw	r20,16(sp)
 401abec:	dcc00317 	ldw	r19,12(sp)
 401abf0:	dc800217 	ldw	r18,8(sp)
 401abf4:	dc400117 	ldw	r17,4(sp)
 401abf8:	dc000017 	ldw	r16,0(sp)
 401abfc:	dec00604 	addi	sp,sp,24
 401ac00:	f800283a 	ret
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
 401ac04:	80800317 	ldw	r2,12(r16)
 401ac08:	81000517 	ldw	r4,20(r16)
 401ac0c:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 401ac10:	10000726 	beq	r2,zero,401ac30 <alt_tick+0xc4>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
 401ac14:	80c00217 	ldw	r3,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 401ac18:	d1324417 	ldw	r4,-14064(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
 401ac1c:	10c5883a 	add	r2,r2,r3
 401ac20:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 401ac24:	113fe52e 	bgeu	r2,r4,401abbc <__alt_data_end+0xfc01abbc>
        {
          alarm->rollover = 1;
 401ac28:	84c00405 	stb	r19,16(r16)
 401ac2c:	003fe306 	br	401abbc <__alt_data_end+0xfc01abbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401ac30:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401ac34:	1506703a 	and	r3,r2,r20
 401ac38:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 401ac3c:	81000117 	ldw	r4,4(r16)
 401ac40:	80c00017 	ldw	r3,0(r16)
 401ac44:	19000115 	stw	r4,4(r3)
  entry->previous->next = entry->next;
 401ac48:	81000117 	ldw	r4,4(r16)
 401ac4c:	20c00015 	stw	r3,0(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 401ac50:	84000115 	stw	r16,4(r16)
  entry->next     = entry;
 401ac54:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401ac58:	1001703a 	wrctl	status,r2
 401ac5c:	003fd706 	br	401abbc <__alt_data_end+0xfc01abbc>

0401ac60 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 401ac60:	000170fa 	wrctl	ienable,zero
 401ac64:	f800283a 	ret

0401ac68 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 401ac68:	defffa04 	addi	sp,sp,-24
 401ac6c:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 401ac70:	d425b317 	ldw	r16,-26932(gp)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 401ac74:	dd000415 	stw	r20,16(sp)
 401ac78:	dfc00515 	stw	ra,20(sp)
 401ac7c:	dcc00315 	stw	r19,12(sp)
 401ac80:	dc800215 	stw	r18,8(sp)
 401ac84:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 401ac88:	d525b304 	addi	r20,gp,-26932
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401ac8c:	85001626 	beq	r16,r20,401ace8 <alt_find_file+0x80>
 401ac90:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
 401ac94:	04c00bc4 	movi	r19,47
 401ac98:	00000806 	br	401acbc <alt_find_file+0x54>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401ac9c:	9185883a 	add	r2,r18,r6
 401aca0:	10800007 	ldb	r2,0(r2)
 401aca4:	14c00126 	beq	r2,r19,401acac <alt_find_file+0x44>
 401aca8:	1000021e 	bne	r2,zero,401acb4 <alt_find_file+0x4c>
        !memcmp (next->name, name, len))
 401acac:	401ae5c0 	call	401ae5c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401acb0:	10001626 	beq	r2,zero,401ad0c <alt_find_file+0xa4>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
 401acb4:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401acb8:	85000b26 	beq	r16,r20,401ace8 <alt_find_file+0x80>
  {
    len = strlen(next->name);
 401acbc:	84400217 	ldw	r17,8(r16)
 401acc0:	8809883a 	mov	r4,r17
 401acc4:	400c0180 	call	400c018 <strlen>
 401acc8:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
 401accc:	8885883a 	add	r2,r17,r2
 401acd0:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
 401acd4:	900b883a 	mov	r5,r18
 401acd8:	8809883a 	mov	r4,r17
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
 401acdc:	14ffef1e 	bne	r2,r19,401ac9c <__alt_data_end+0xfc01ac9c>
    {
      len -= 1;
 401ace0:	31bfffc4 	addi	r6,r6,-1
 401ace4:	003fed06 	br	401ac9c <__alt_data_end+0xfc01ac9c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 401ace8:	0005883a 	mov	r2,zero
}
 401acec:	dfc00517 	ldw	ra,20(sp)
 401acf0:	dd000417 	ldw	r20,16(sp)
 401acf4:	dcc00317 	ldw	r19,12(sp)
 401acf8:	dc800217 	ldw	r18,8(sp)
 401acfc:	dc400117 	ldw	r17,4(sp)
 401ad00:	dc000017 	ldw	r16,0(sp)
 401ad04:	dec00604 	addi	sp,sp,24
 401ad08:	f800283a 	ret
 401ad0c:	8005883a 	mov	r2,r16
 401ad10:	003ff606 	br	401acec <__alt_data_end+0xfc01acec>

0401ad14 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 401ad14:	defffc04 	addi	sp,sp,-16
 401ad18:	dc400115 	stw	r17,4(sp)
 401ad1c:	044100b4 	movhi	r17,1026
 401ad20:	8c49b804 	addi	r17,r17,9952
 401ad24:	dc000015 	stw	r16,0(sp)
 401ad28:	dfc00315 	stw	ra,12(sp)
 401ad2c:	dc800215 	stw	r18,8(sp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401ad30:	0021883a 	mov	r16,zero
 401ad34:	8805883a 	mov	r2,r17
 401ad38:	01400804 	movi	r5,32
 401ad3c:	00000206 	br	401ad48 <alt_get_fd+0x34>
 401ad40:	84000044 	addi	r16,r16,1
 401ad44:	81401326 	beq	r16,r5,401ad94 <alt_get_fd+0x80>
  {
    if (!alt_fd_list[i].dev)
 401ad48:	10c00017 	ldw	r3,0(r2)
 401ad4c:	10800304 	addi	r2,r2,12
 401ad50:	183ffb1e 	bne	r3,zero,401ad40 <__alt_data_end+0xfc01ad40>
 401ad54:	2025883a 	mov	r18,r4
    {
      alt_fd_list[i].dev = dev;
 401ad58:	01400304 	movi	r5,12
 401ad5c:	8009883a 	mov	r4,r16
 401ad60:	400aa340 	call	400aa34 <__mulsi3>
 401ad64:	8885883a 	add	r2,r17,r2
 401ad68:	14800015 	stw	r18,0(r2)
      if (i > alt_max_fd)
 401ad6c:	d0a5b017 	ldw	r2,-26944(gp)
 401ad70:	1400010e 	bge	r2,r16,401ad78 <alt_get_fd+0x64>
      {
        alt_max_fd = i;
 401ad74:	d425b015 	stw	r16,-26944(gp)
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
 401ad78:	8005883a 	mov	r2,r16
 401ad7c:	dfc00317 	ldw	ra,12(sp)
 401ad80:	dc800217 	ldw	r18,8(sp)
 401ad84:	dc400117 	ldw	r17,4(sp)
 401ad88:	dc000017 	ldw	r16,0(sp)
 401ad8c:	dec00404 	addi	sp,sp,16
 401ad90:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
 401ad94:	043ffa04 	movi	r16,-24
 401ad98:	003ff706 	br	401ad78 <__alt_data_end+0xfc01ad78>

0401ad9c <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
 401ad9c:	213ffe84 	addi	r4,r4,-6
 401ada0:	008003c4 	movi	r2,15
 401ada4:	11001636 	bltu	r2,r4,401ae00 <alt_exception_cause_generated_bad_addr+0x64>
 401ada8:	200890ba 	slli	r4,r4,2
 401adac:	008100b4 	movhi	r2,1026
 401adb0:	10ab7004 	addi	r2,r2,-21056
 401adb4:	2089883a 	add	r4,r4,r2
 401adb8:	20800017 	ldw	r2,0(r4)
 401adbc:	1000683a 	jmp	r2
 401adc0:	0401ae08 	cmpgei	r16,zero,1720
 401adc4:	0401ae08 	cmpgei	r16,zero,1720
 401adc8:	0401ae00 	call	401ae0 <__alt_mem_sdram-0x3bfe520>
 401adcc:	0401ae00 	call	401ae0 <__alt_mem_sdram-0x3bfe520>
 401add0:	0401ae00 	call	401ae0 <__alt_mem_sdram-0x3bfe520>
 401add4:	0401ae08 	cmpgei	r16,zero,1720
 401add8:	0401ae00 	call	401ae0 <__alt_mem_sdram-0x3bfe520>
 401addc:	0401ae00 	call	401ae0 <__alt_mem_sdram-0x3bfe520>
 401ade0:	0401ae08 	cmpgei	r16,zero,1720
 401ade4:	0401ae08 	cmpgei	r16,zero,1720
 401ade8:	0401ae00 	call	401ae0 <__alt_mem_sdram-0x3bfe520>
 401adec:	0401ae08 	cmpgei	r16,zero,1720
 401adf0:	0401ae00 	call	401ae0 <__alt_mem_sdram-0x3bfe520>
 401adf4:	0401ae00 	call	401ae0 <__alt_mem_sdram-0x3bfe520>
 401adf8:	0401ae00 	call	401ae0 <__alt_mem_sdram-0x3bfe520>
 401adfc:	0401ae08 	cmpgei	r16,zero,1720
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 401ae00:	0005883a 	mov	r2,zero
 401ae04:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 401ae08:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
 401ae0c:	f800283a 	ret

0401ae10 <atexit>:
 401ae10:	200b883a 	mov	r5,r4
 401ae14:	000f883a 	mov	r7,zero
 401ae18:	000d883a 	mov	r6,zero
 401ae1c:	0009883a 	mov	r4,zero
 401ae20:	401aed81 	jmpi	401aed8 <__register_exitproc>

0401ae24 <exit>:
 401ae24:	defffe04 	addi	sp,sp,-8
 401ae28:	000b883a 	mov	r5,zero
 401ae2c:	dc000015 	stw	r16,0(sp)
 401ae30:	dfc00115 	stw	ra,4(sp)
 401ae34:	2021883a 	mov	r16,r4
 401ae38:	401aff00 	call	401aff0 <__call_exitprocs>
 401ae3c:	008100b4 	movhi	r2,1026
 401ae40:	1093f204 	addi	r2,r2,20424
 401ae44:	11000017 	ldw	r4,0(r2)
 401ae48:	20800f17 	ldw	r2,60(r4)
 401ae4c:	10000126 	beq	r2,zero,401ae54 <exit+0x30>
 401ae50:	103ee83a 	callr	r2
 401ae54:	8009883a 	mov	r4,r16
 401ae58:	40182c80 	call	40182c8 <_exit>

0401ae5c <memcmp>:
 401ae5c:	01c000c4 	movi	r7,3
 401ae60:	3980192e 	bgeu	r7,r6,401aec8 <memcmp+0x6c>
 401ae64:	2144b03a 	or	r2,r4,r5
 401ae68:	11c4703a 	and	r2,r2,r7
 401ae6c:	10000f26 	beq	r2,zero,401aeac <memcmp+0x50>
 401ae70:	20800003 	ldbu	r2,0(r4)
 401ae74:	28c00003 	ldbu	r3,0(r5)
 401ae78:	10c0151e 	bne	r2,r3,401aed0 <memcmp+0x74>
 401ae7c:	31bfff84 	addi	r6,r6,-2
 401ae80:	01ffffc4 	movi	r7,-1
 401ae84:	00000406 	br	401ae98 <memcmp+0x3c>
 401ae88:	20800003 	ldbu	r2,0(r4)
 401ae8c:	28c00003 	ldbu	r3,0(r5)
 401ae90:	31bfffc4 	addi	r6,r6,-1
 401ae94:	10c00e1e 	bne	r2,r3,401aed0 <memcmp+0x74>
 401ae98:	21000044 	addi	r4,r4,1
 401ae9c:	29400044 	addi	r5,r5,1
 401aea0:	31fff91e 	bne	r6,r7,401ae88 <__alt_data_end+0xfc01ae88>
 401aea4:	0005883a 	mov	r2,zero
 401aea8:	f800283a 	ret
 401aeac:	20c00017 	ldw	r3,0(r4)
 401aeb0:	28800017 	ldw	r2,0(r5)
 401aeb4:	18bfee1e 	bne	r3,r2,401ae70 <__alt_data_end+0xfc01ae70>
 401aeb8:	31bfff04 	addi	r6,r6,-4
 401aebc:	21000104 	addi	r4,r4,4
 401aec0:	29400104 	addi	r5,r5,4
 401aec4:	39bff936 	bltu	r7,r6,401aeac <__alt_data_end+0xfc01aeac>
 401aec8:	303fe91e 	bne	r6,zero,401ae70 <__alt_data_end+0xfc01ae70>
 401aecc:	003ff506 	br	401aea4 <__alt_data_end+0xfc01aea4>
 401aed0:	10c5c83a 	sub	r2,r2,r3
 401aed4:	f800283a 	ret

0401aed8 <__register_exitproc>:
 401aed8:	defffa04 	addi	sp,sp,-24
 401aedc:	dc000315 	stw	r16,12(sp)
 401aee0:	040100b4 	movhi	r16,1026
 401aee4:	8413f204 	addi	r16,r16,20424
 401aee8:	80c00017 	ldw	r3,0(r16)
 401aeec:	dc400415 	stw	r17,16(sp)
 401aef0:	dfc00515 	stw	ra,20(sp)
 401aef4:	18805217 	ldw	r2,328(r3)
 401aef8:	2023883a 	mov	r17,r4
 401aefc:	10003726 	beq	r2,zero,401afdc <__register_exitproc+0x104>
 401af00:	10c00117 	ldw	r3,4(r2)
 401af04:	010007c4 	movi	r4,31
 401af08:	20c00e16 	blt	r4,r3,401af44 <__register_exitproc+0x6c>
 401af0c:	1a000044 	addi	r8,r3,1
 401af10:	8800221e 	bne	r17,zero,401af9c <__register_exitproc+0xc4>
 401af14:	18c00084 	addi	r3,r3,2
 401af18:	18c7883a 	add	r3,r3,r3
 401af1c:	18c7883a 	add	r3,r3,r3
 401af20:	12000115 	stw	r8,4(r2)
 401af24:	10c7883a 	add	r3,r2,r3
 401af28:	19400015 	stw	r5,0(r3)
 401af2c:	0005883a 	mov	r2,zero
 401af30:	dfc00517 	ldw	ra,20(sp)
 401af34:	dc400417 	ldw	r17,16(sp)
 401af38:	dc000317 	ldw	r16,12(sp)
 401af3c:	dec00604 	addi	sp,sp,24
 401af40:	f800283a 	ret
 401af44:	00810074 	movhi	r2,1025
 401af48:	10abf804 	addi	r2,r2,-20512
 401af4c:	10002626 	beq	r2,zero,401afe8 <__register_exitproc+0x110>
 401af50:	01006404 	movi	r4,400
 401af54:	d9400015 	stw	r5,0(sp)
 401af58:	d9800115 	stw	r6,4(sp)
 401af5c:	d9c00215 	stw	r7,8(sp)
 401af60:	400afe00 	call	400afe0 <malloc>
 401af64:	d9400017 	ldw	r5,0(sp)
 401af68:	d9800117 	ldw	r6,4(sp)
 401af6c:	d9c00217 	ldw	r7,8(sp)
 401af70:	10001d26 	beq	r2,zero,401afe8 <__register_exitproc+0x110>
 401af74:	81000017 	ldw	r4,0(r16)
 401af78:	10000115 	stw	zero,4(r2)
 401af7c:	02000044 	movi	r8,1
 401af80:	22405217 	ldw	r9,328(r4)
 401af84:	0007883a 	mov	r3,zero
 401af88:	12400015 	stw	r9,0(r2)
 401af8c:	20805215 	stw	r2,328(r4)
 401af90:	10006215 	stw	zero,392(r2)
 401af94:	10006315 	stw	zero,396(r2)
 401af98:	883fde26 	beq	r17,zero,401af14 <__alt_data_end+0xfc01af14>
 401af9c:	18c9883a 	add	r4,r3,r3
 401afa0:	2109883a 	add	r4,r4,r4
 401afa4:	1109883a 	add	r4,r2,r4
 401afa8:	21802215 	stw	r6,136(r4)
 401afac:	01800044 	movi	r6,1
 401afb0:	12406217 	ldw	r9,392(r2)
 401afb4:	30cc983a 	sll	r6,r6,r3
 401afb8:	4992b03a 	or	r9,r9,r6
 401afbc:	12406215 	stw	r9,392(r2)
 401afc0:	21c04215 	stw	r7,264(r4)
 401afc4:	01000084 	movi	r4,2
 401afc8:	893fd21e 	bne	r17,r4,401af14 <__alt_data_end+0xfc01af14>
 401afcc:	11006317 	ldw	r4,396(r2)
 401afd0:	218cb03a 	or	r6,r4,r6
 401afd4:	11806315 	stw	r6,396(r2)
 401afd8:	003fce06 	br	401af14 <__alt_data_end+0xfc01af14>
 401afdc:	18805304 	addi	r2,r3,332
 401afe0:	18805215 	stw	r2,328(r3)
 401afe4:	003fc606 	br	401af00 <__alt_data_end+0xfc01af00>
 401afe8:	00bfffc4 	movi	r2,-1
 401afec:	003fd006 	br	401af30 <__alt_data_end+0xfc01af30>

0401aff0 <__call_exitprocs>:
 401aff0:	defff504 	addi	sp,sp,-44
 401aff4:	df000915 	stw	fp,36(sp)
 401aff8:	dd400615 	stw	r21,24(sp)
 401affc:	dc800315 	stw	r18,12(sp)
 401b000:	dfc00a15 	stw	ra,40(sp)
 401b004:	ddc00815 	stw	r23,32(sp)
 401b008:	dd800715 	stw	r22,28(sp)
 401b00c:	dd000515 	stw	r20,20(sp)
 401b010:	dcc00415 	stw	r19,16(sp)
 401b014:	dc400215 	stw	r17,8(sp)
 401b018:	dc000115 	stw	r16,4(sp)
 401b01c:	d9000015 	stw	r4,0(sp)
 401b020:	2839883a 	mov	fp,r5
 401b024:	04800044 	movi	r18,1
 401b028:	057fffc4 	movi	r21,-1
 401b02c:	008100b4 	movhi	r2,1026
 401b030:	1093f204 	addi	r2,r2,20424
 401b034:	12000017 	ldw	r8,0(r2)
 401b038:	45005217 	ldw	r20,328(r8)
 401b03c:	44c05204 	addi	r19,r8,328
 401b040:	a0001c26 	beq	r20,zero,401b0b4 <__call_exitprocs+0xc4>
 401b044:	a0800117 	ldw	r2,4(r20)
 401b048:	15ffffc4 	addi	r23,r2,-1
 401b04c:	b8000d16 	blt	r23,zero,401b084 <__call_exitprocs+0x94>
 401b050:	14000044 	addi	r16,r2,1
 401b054:	8421883a 	add	r16,r16,r16
 401b058:	8421883a 	add	r16,r16,r16
 401b05c:	84402004 	addi	r17,r16,128
 401b060:	a463883a 	add	r17,r20,r17
 401b064:	a421883a 	add	r16,r20,r16
 401b068:	e0001e26 	beq	fp,zero,401b0e4 <__call_exitprocs+0xf4>
 401b06c:	80804017 	ldw	r2,256(r16)
 401b070:	e0801c26 	beq	fp,r2,401b0e4 <__call_exitprocs+0xf4>
 401b074:	bdffffc4 	addi	r23,r23,-1
 401b078:	843fff04 	addi	r16,r16,-4
 401b07c:	8c7fff04 	addi	r17,r17,-4
 401b080:	bd7ff91e 	bne	r23,r21,401b068 <__alt_data_end+0xfc01b068>
 401b084:	00810074 	movhi	r2,1025
 401b088:	10abfd04 	addi	r2,r2,-20492
 401b08c:	10000926 	beq	r2,zero,401b0b4 <__call_exitprocs+0xc4>
 401b090:	a0800117 	ldw	r2,4(r20)
 401b094:	1000301e 	bne	r2,zero,401b158 <__call_exitprocs+0x168>
 401b098:	a0800017 	ldw	r2,0(r20)
 401b09c:	10003226 	beq	r2,zero,401b168 <__call_exitprocs+0x178>
 401b0a0:	a009883a 	mov	r4,r20
 401b0a4:	98800015 	stw	r2,0(r19)
 401b0a8:	400aff40 	call	400aff4 <free>
 401b0ac:	9d000017 	ldw	r20,0(r19)
 401b0b0:	a03fe41e 	bne	r20,zero,401b044 <__alt_data_end+0xfc01b044>
 401b0b4:	dfc00a17 	ldw	ra,40(sp)
 401b0b8:	df000917 	ldw	fp,36(sp)
 401b0bc:	ddc00817 	ldw	r23,32(sp)
 401b0c0:	dd800717 	ldw	r22,28(sp)
 401b0c4:	dd400617 	ldw	r21,24(sp)
 401b0c8:	dd000517 	ldw	r20,20(sp)
 401b0cc:	dcc00417 	ldw	r19,16(sp)
 401b0d0:	dc800317 	ldw	r18,12(sp)
 401b0d4:	dc400217 	ldw	r17,8(sp)
 401b0d8:	dc000117 	ldw	r16,4(sp)
 401b0dc:	dec00b04 	addi	sp,sp,44
 401b0e0:	f800283a 	ret
 401b0e4:	a0800117 	ldw	r2,4(r20)
 401b0e8:	80c00017 	ldw	r3,0(r16)
 401b0ec:	10bfffc4 	addi	r2,r2,-1
 401b0f0:	15c01426 	beq	r2,r23,401b144 <__call_exitprocs+0x154>
 401b0f4:	80000015 	stw	zero,0(r16)
 401b0f8:	183fde26 	beq	r3,zero,401b074 <__alt_data_end+0xfc01b074>
 401b0fc:	95c8983a 	sll	r4,r18,r23
 401b100:	a0806217 	ldw	r2,392(r20)
 401b104:	a5800117 	ldw	r22,4(r20)
 401b108:	2084703a 	and	r2,r4,r2
 401b10c:	10000b26 	beq	r2,zero,401b13c <__call_exitprocs+0x14c>
 401b110:	a0806317 	ldw	r2,396(r20)
 401b114:	2088703a 	and	r4,r4,r2
 401b118:	20000c1e 	bne	r4,zero,401b14c <__call_exitprocs+0x15c>
 401b11c:	89400017 	ldw	r5,0(r17)
 401b120:	d9000017 	ldw	r4,0(sp)
 401b124:	183ee83a 	callr	r3
 401b128:	a0800117 	ldw	r2,4(r20)
 401b12c:	15bfbf1e 	bne	r2,r22,401b02c <__alt_data_end+0xfc01b02c>
 401b130:	98800017 	ldw	r2,0(r19)
 401b134:	153fcf26 	beq	r2,r20,401b074 <__alt_data_end+0xfc01b074>
 401b138:	003fbc06 	br	401b02c <__alt_data_end+0xfc01b02c>
 401b13c:	183ee83a 	callr	r3
 401b140:	003ff906 	br	401b128 <__alt_data_end+0xfc01b128>
 401b144:	a5c00115 	stw	r23,4(r20)
 401b148:	003feb06 	br	401b0f8 <__alt_data_end+0xfc01b0f8>
 401b14c:	89000017 	ldw	r4,0(r17)
 401b150:	183ee83a 	callr	r3
 401b154:	003ff406 	br	401b128 <__alt_data_end+0xfc01b128>
 401b158:	a0800017 	ldw	r2,0(r20)
 401b15c:	a027883a 	mov	r19,r20
 401b160:	1029883a 	mov	r20,r2
 401b164:	003fb606 	br	401b040 <__alt_data_end+0xfc01b040>
 401b168:	0005883a 	mov	r2,zero
 401b16c:	003ffb06 	br	401b15c <__alt_data_end+0xfc01b15c>
 401b170:	01110bff 	0x1110bff
 401b174:	01010004 	movi	r4,1024
 401b178:	7f000105 	stb	fp,4(r15)
 401b17c:	007d0000 	call	7d000 <__alt_mem_sdram-0x3f83000>
 401b180:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 401b184:	01883a00 	call	1883a0 <__alt_mem_sdram-0x3e77c60>
 401b188:	010d0bff 	0x10d0bff
 401b18c:	01010002 	0x1010002
	...
 401b198:	010d0bff 	0x10d0bff
 401b19c:	01010004 	movi	r4,1024
 401b1a0:	00000100 	call	10 <__alt_mem_sdram-0x3fffff0>
 401b1a4:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 401b1a8:	04008054 	movui	r16,513
 401b1ac:	0400a77c 	xorhi	r16,zero,669
