
space_jam.elf:     file format elf32-littlenios2
space_jam.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000230

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00027468 memsz 0x00027468 flags r-x
    LOAD off    0x00028488 vaddr 0x04027488 paddr 0x0402a664 align 2**12
         filesz 0x000031dc memsz 0x000031dc flags rw-
    LOAD off    0x0002b840 vaddr 0x0402d840 paddr 0x0402d840 align 2**12
         filesz 0x00000000 memsz 0x0000025c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00020068  04000230  04000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000071f0  04020298  04020298  00021298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000031dc  04027488  0402a664  00028488  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000025c  0402d840  0402d840  0002b840  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0402da9c  0402da9c  0002b664  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0002b664  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000019f0  00000000  00000000  0002b688  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0005031b  00000000  00000000  0002d078  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00010511  00000000  00000000  0007d393  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013ffc  00000000  00000000  0008d8a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000577c  00000000  00000000  000a18a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000fcbf  00000000  00000000  000a701c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001eafd  00000000  00000000  000b6cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000070  00000000  00000000  000d57d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000029f0  00000000  00000000  000d5848  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000f08f9  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000f08fc  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000f0908  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000f0909  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000f090a  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000f090e  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000f0912  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000f0916  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000f0921  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000f092c  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  000f0937  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000021  00000000  00000000  000f093f  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0009cf3c  00000000  00000000  000f0960  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000230 l    d  .text	00000000 .text
04020298 l    d  .rodata	00000000 .rodata
04027488 l    d  .rwdata	00000000 .rwdata
0402d840 l    d  .bss	00000000 .bss
0402da9c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../space_jam_bsp//obj/HAL/src/crt0.o
04000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 sgtl5000.c
00000000 l    df *ABS*	00000000 sgtl5000_test.c
00000000 l    df *ABS*	00000000 Port.cpp
00000000 l    df *ABS*	00000000 SPI.cpp
04028f6c l     O .rwdata	00000001 _ZL9SPI_MODE0
04028f6d l     O .rwdata	00000001 _ZL9SPI_MODE1
04028f6e l     O .rwdata	00000001 _ZL9SPI_MODE2
04028f6f l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 Usb.cpp
04028f70 l     O .rwdata	00000001 _ZL9SPI_MODE0
04028f71 l     O .rwdata	00000001 _ZL9SPI_MODE1
04028f72 l     O .rwdata	00000001 _ZL9SPI_MODE2
04028f73 l     O .rwdata	00000001 _ZL9SPI_MODE3
0402d840 l     O .bss	00000001 _ZL9usb_error
0402d841 l     O .bss	00000001 _ZL14usb_task_state
0402d844 l     O .bss	00000004 _ZZN3USB4TaskEvE5delay
00000000 l    df *ABS*	00000000 XBOXONE.cpp
04028f7c l     O .rwdata	00000001 _ZL9SPI_MODE0
04028f7d l     O .rwdata	00000001 _ZL9SPI_MODE1
04028f7e l     O .rwdata	00000001 _ZL9SPI_MODE2
04028f7f l     O .rwdata	00000001 _ZL9SPI_MODE3
04028f80 l     O .rwdata	00000006 _ZL9XBOX_LEDS
04020586 l     O .rodata	00000024 _ZL12XBOX_BUTTONS
0400442c l     F .text	0000013c .LTHUNK0
00000000 l    df *ABS*	00000000 hidboot.cpp
04028fa0 l     O .rwdata	00000001 _ZL9SPI_MODE0
04028fa1 l     O .rwdata	00000001 _ZL9SPI_MODE1
04028fa2 l     O .rwdata	00000001 _ZL9SPI_MODE2
04028fa3 l     O .rwdata	00000001 _ZL9SPI_MODE3
04028fa4 l     O .rwdata	00000002 _ZL9pstrSpace
04028fa8 l     O .rwdata	00000003 _ZL8pstrCRLF
04028fac l     O .rwdata	00000002 _ZL13pstrSingleTab
04028fb0 l     O .rwdata	00000003 _ZL13pstrDoubleTab
04028fb4 l     O .rwdata	00000004 _ZL13pstrTripleTab
04028fb8 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
040206d4 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
040206e8 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
040206f4 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
04020700 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
0402070c l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
04020718 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
04020728 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
04028fc0 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
04028fc8 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
04028fd0 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
04028fd8 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
04020734 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
04020740 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
04028fdc l     O .rwdata	00000004 _ZL16pstrUsagePagePID
04028fe0 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
0402074c l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
0402075c l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
04028fe8 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
04028ff0 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
0402076c l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
04028ff8 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
0402077c l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
04029000 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
04020794 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
04029004 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
040207a0 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
040207ac l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
0402900c l     O .rwdata	00000008 _ZL16pstrUsagePointer
04029014 l     O .rwdata	00000006 _ZL14pstrUsageMouse
040207b8 l     O .rodata	00000009 _ZL17pstrUsageJoystick
040207c4 l     O .rodata	00000009 _ZL16pstrUsageGamePad
0402901c l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
04029024 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
040207d0 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
040207e0 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
0402902c l     O .rwdata	00000002 _ZL10pstrUsageX
04029030 l     O .rwdata	00000002 _ZL10pstrUsageY
04029034 l     O .rwdata	00000002 _ZL10pstrUsageZ
04029038 l     O .rwdata	00000003 _ZL11pstrUsageRx
0402903c l     O .rwdata	00000003 _ZL11pstrUsageRy
04029040 l     O .rwdata	00000003 _ZL11pstrUsageRz
04029044 l     O .rwdata	00000007 _ZL15pstrUsageSlider
0402904c l     O .rwdata	00000005 _ZL13pstrUsageDial
04029054 l     O .rwdata	00000006 _ZL14pstrUsageWheel
040207f4 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
04020800 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
0402080c l     O .rodata	0000000b _ZL18pstrUsageByteCount
04020818 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
0402905c l     O .rwdata	00000006 _ZL14pstrUsageStart
04029064 l     O .rwdata	00000004 _ZL15pstrUsageSelect
04029068 l     O .rwdata	00000003 _ZL11pstrUsageVx
0402906c l     O .rwdata	00000003 _ZL11pstrUsageVy
04029070 l     O .rwdata	00000003 _ZL11pstrUsageVz
04029074 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
0402907c l     O .rwdata	00000005 _ZL13pstrUsageVbry
04029084 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
0402908c l     O .rwdata	00000004 _ZL12pstrUsageVno
04020828 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
04020838 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
04020844 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
04020850 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
04020860 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
0402086c l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
04020878 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
0402088c l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
0402089c l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
040208ac l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
040208bc l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
040208cc l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
040208dc l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
040208ec l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
040208fc l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
04020908 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
04020918 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
0402092c l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
04020940 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
0402094c l     O .rodata	0000000b _ZL17pstrUsageDPadDown
04020958 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
04020964 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
04020970 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
0402097c l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
04020988 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
04020994 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
040209a0 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
040209ac l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
040209b8 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
040209c4 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
040209d4 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
040209e0 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
040209f0 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
04020a00 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
04020a10 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
04020a20 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
04020a30 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
04020a48 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
04020a60 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
04020a78 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
04020a88 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
04020a98 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
04020aa8 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
04020ab8 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
04020ac8 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
04020ad8 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
04020ae8 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
04020af8 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
04020b08 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
04020b18 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
04020b30 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
04020b40 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
04020b54 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
04020b64 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
04020b70 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
04020b7c l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
04020b88 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
04029090 l     O .rwdata	00000008 _ZL16pstrUsageAileron
04020b94 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
04020ba4 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
04020bb8 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
04020bcc l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
04020bdc l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
04020bec l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
04020bf8 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
04020c0c l     O .rodata	00000009 _ZL17pstrUsageElevator
04020c18 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
04029098 l     O .rwdata	00000007 _ZL15pstrUsageRudder
04020c28 l     O .rodata	00000009 _ZL17pstrUsageThrottle
04020c34 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
04020c40 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
04020c50 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
04020c60 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
040290a0 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
04020c6c l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
04020c78 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
04020c84 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
040290a8 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
040290b0 l     O .rwdata	00000006 _ZL14pstrUsageBrake
040290b8 l     O .rwdata	00000007 _ZL15pstrUsageClutch
040290c0 l     O .rwdata	00000008 _ZL16pstrUsageShifter
04020c90 l     O .rodata	00000009 _ZL17pstrUsageSteering
04020c9c l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
04020ca8 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
04020cb4 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
040290c8 l     O .rwdata	00000008 _ZL16pstrUsageBallast
04020cc0 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
04020cd0 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
04020cdc l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
04020ce8 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
040290d0 l     O .rwdata	00000005 _ZL13pstrUsageBelt
04020cf4 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
040290d8 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
040290e0 l     O .rwdata	00000006 _ZL14pstrUsageGlove
04020d00 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
04020d0c l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
04020d18 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
04020d24 l     O .rodata	0000000b _ZL19pstrUsageOculometer
040290e8 l     O .rwdata	00000005 _ZL13pstrUsageVest
04020d30 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
04020d3c l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
04020d48 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
04020d58 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
04020d68 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
04020d74 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
04020d80 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
040290f0 l     O .rwdata	00000004 _ZL12pstrUsageOar
040290f4 l     O .rwdata	00000006 _ZL14pstrUsageSlope
040290fc l     O .rwdata	00000005 _ZL13pstrUsageRate
04020d8c l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
04020d98 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
04020da8 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
04020db8 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
04020dc8 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
04020dd4 l     O .rodata	0000000b _ZL18pstrUsageStickType
04020de0 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
04029104 l     O .rwdata	00000007 _ZL15pstrUsagePutter
0402910c l     O .rwdata	00000007 _ZL14pstrUsage1Iron
04029114 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0402911c l     O .rwdata	00000007 _ZL14pstrUsage3Iron
04029124 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0402912c l     O .rwdata	00000007 _ZL14pstrUsage5Iron
04029134 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0402913c l     O .rwdata	00000007 _ZL14pstrUsage7Iron
04029144 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0402914c l     O .rwdata	00000007 _ZL14pstrUsage9Iron
04029154 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0402915c l     O .rwdata	00000008 _ZL15pstrUsage11Iron
04020dec l     O .rodata	0000000b _ZL18pstrUsageSandWedge
04020df8 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
04020e04 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
04029164 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0402916c l     O .rwdata	00000007 _ZL14pstrUsage3Wood
04029174 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0402917c l     O .rwdata	00000007 _ZL14pstrUsage7Wood
04029184 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
04020e10 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
04020e20 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0402918c l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
04029194 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
04020e2c l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
04020e3c l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
04020e4c l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
04020e5c l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
04020e6c l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
04020e7c l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
04020e8c l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
04020e9c l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
04020eac l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
04029198 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
04020ebc l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
040291a0 l     O .rwdata	00000005 _ZL13pstrUsageBump
04020ecc l     O .rodata	00000009 _ZL16pstrUsageNewGame
04020ed8 l     O .rodata	0000000b _ZL18pstrUsageShootBall
040291a8 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
04020ee4 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
04020ef0 l     O .rodata	00000009 _ZL16pstrUsageGunClip
040291b0 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
04020efc l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
04020f0c l     O .rodata	0000000a _ZL17pstrUsageGunBurst
04020f18 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
04020f24 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
04020f30 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
04020f44 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
04020f54 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
04020f64 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
04020f70 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
04020f7c l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
04020f94 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
04020fa8 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
04020fc0 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
04020fd4 l     O .rodata	00000009 _ZL16pstrUsageNumLock
04020fe0 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
04020fec l     O .rodata	0000000c _ZL19pstrUsageScrollLock
040291b8 l     O .rwdata	00000008 _ZL16pstrUsageCompose
040291c0 l     O .rwdata	00000005 _ZL13pstrUsageKana
040291c8 l     O .rwdata	00000004 _ZL14pstrUsagePower
040291cc l     O .rwdata	00000006 _ZL14pstrUsageShift
040291d4 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
040291d8 l     O .rwdata	00000005 _ZL13pstrUsageMute
04020ff8 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
04021004 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
04021014 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
040291e0 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
04021024 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
04021034 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
040291e8 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
040291f0 l     O .rwdata	00000007 _ZL15pstrUsageStereo
04021040 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
04021054 l     O .rodata	00000009 _ZL17pstrUsageSpinning
040291f8 l     O .rwdata	00000004 _ZL12pstrUsageCAV
040291fc l     O .rwdata	00000004 _ZL12pstrUsageCLV
04021060 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
04021074 l     O .rodata	00000009 _ZL16pstrUsageOffHook
04029200 l     O .rwdata	00000005 _ZL13pstrUsageRing
04021080 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
0402108c l     O .rodata	0000000a _ZL17pstrUsageDataMode
04029208 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
04029210 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
04029218 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
04029220 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
04021098 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
04029228 l     O .rwdata	00000005 _ZL13pstrUsageHold
04029230 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
040210a4 l     O .rodata	00000009 _ZL17pstrUsageCoverage
040210b0 l     O .rodata	0000000b _ZL18pstrUsageNightMode
040210bc l     O .rodata	0000000b _ZL18pstrUsageSendCalls
040210c8 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
04029234 l     O .rwdata	00000005 _ZL19pstrUsageConference
040210d4 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0402923c l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
04029244 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0402924c l     O .rwdata	00000008 _ZL15pstrUsageOnLine
040210e0 l     O .rodata	00000009 _ZL16pstrUsageOffLine
04029254 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0402925c l     O .rwdata	00000006 _ZL14pstrUsageReady
040210ec l     O .rodata	0000000a _ZL17pstrUsagePaperOut
040210f8 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
04029264 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0402926c l     O .rwdata	00000004 _ZL16pstrUsageForward
04029270 l     O .rwdata	00000004 _ZL16pstrUsageReverse
04029274 l     O .rwdata	00000005 _ZL13pstrUsageStop
0402927c l     O .rwdata	00000007 _ZL15pstrUsageRewind
04021104 l     O .rodata	00000009 _ZL20pstrUsageFastForward
04029284 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0402928c l     O .rwdata	00000006 _ZL14pstrUsagePause
04029294 l     O .rwdata	00000004 _ZL15pstrUsageRecord
04029298 l     O .rwdata	00000006 _ZL14pstrUsageError
04021110 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
04021120 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
04021134 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
040292a0 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
0402114c l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
04021158 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
04021168 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
040292a8 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
04021178 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
04021188 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
0402119c l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
040211b0 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
040211c4 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
040211d8 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
040292b0 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
040211e8 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
040211f4 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
040292b8 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
04021200 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
0402120c l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
040292c0 l     O .rwdata	00000006 _ZL14pstrUsagePhone
0402121c l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
04021228 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
040292c8 l     O .rwdata	00000008 _ZL16pstrUsageHandset
040292d0 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
04021234 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
04021240 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
040292d8 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
040292e0 l     O .rwdata	00000006 _ZL14pstrUsageFlash
040292e8 l     O .rwdata	00000008 _ZL16pstrUsageFeature
040292f0 l     O .rwdata	00000007 _ZL15pstrUsageRedial
0402124c l     O .rodata	00000009 _ZL17pstrUsageTransfer
040292f8 l     O .rwdata	00000005 _ZL13pstrUsageDrop
04029300 l     O .rwdata	00000005 _ZL13pstrUsagePark
04021258 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
04021264 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
04029308 l     O .rwdata	00000005 _ZL13pstrUsageLine
04021270 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
0402127c l     O .rodata	0000000a _ZL19pstrUsageRingEnable
04021288 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
04021294 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
040212a0 l     O .rodata	0000000a _ZL17pstrUsageCallerID
04029310 l     O .rwdata	00000005 _ZL13pstrUsageSend
040212ac l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
040212b8 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
040212c4 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
040212d0 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
040212dc l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
040212e8 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
04029318 l     O .rwdata	00000004 _ZL16pstrUsageMessage
040212f8 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
04021308 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
0402131c l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
04021330 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
04021344 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
04021358 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
04021368 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
04021378 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
0402138c l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
0402139c l     O .rodata	0000000d _ZL20pstrUsageReorderTone
040213ac l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
040213bc l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
040213c8 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
040213d4 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
040213e0 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0402931c l     O .rwdata	00000007 _ZL15pstrUsageRinger
04029324 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
04029328 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0402932c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
04029330 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
04029334 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
04029338 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0402933c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
04029340 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
04029344 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
04029348 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0402934c l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
04029350 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
04029354 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
04029358 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0402935c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
04029360 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
040213f4 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
04021404 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
04021410 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
0402141c l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
04029364 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
04029368 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
04029370 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
04029378 l     O .rwdata	00000006 _ZL14pstrUsageReset
04029380 l     O .rwdata	00000006 _ZL14pstrUsageSleep
04021428 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
04021434 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
04029388 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
04021440 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
04029390 l     O .rwdata	00000005 _ZL13pstrUsageMenu
0402144c l     O .rodata	0000000a _ZL17pstrUsageMenuPick
04029398 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
04021458 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
04021464 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
04021470 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
0402147c l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
04021488 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
04021498 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
040214a8 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
040214b4 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
040214c0 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
040293a0 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
040214d0 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
040214e0 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
040293a8 l     O .rwdata	00000006 _ZL14pstrUsageStill
040293b0 l     O .rwdata	00000004 _ZL18pstrUsageSelection
040214ec l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
040214f8 l     O .rodata	0000000a _ZL17pstrUsageModeStep
04021504 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
04021510 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
04021520 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
040293b4 l     O .rwdata	00000008 _ZL16pstrUsageChannel
040293bc l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
0402152c l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
0402153c l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
04021548 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
04021554 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
04021560 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
0402156c l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
04021578 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
04021584 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
04021594 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
040215a0 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
040215ac l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
040215b8 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
040293c4 l     O .rwdata	00000005 _ZL13pstrUsageQuit
040293cc l     O .rwdata	00000005 _ZL13pstrUsageHelp
040215c8 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
040215d8 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
040215e4 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
040215f0 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
04021600 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
04021610 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
040293d4 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
040293dc l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
04021620 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
040293e4 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
040293ec l     O .rwdata	00000005 _ZL13pstrUsageOnce
040293f4 l     O .rwdata	00000006 _ZL14pstrUsageDaily
040293fc l     O .rwdata	00000007 _ZL15pstrUsageWeekly
04029404 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
0402162c l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
04021638 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0402940c l     O .rwdata	00000006 _ZL14pstrUsageEject
04029414 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
04021644 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
04021650 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
0402165c l     O .rodata	00000009 _ZL17pstrUsageTracking
04021668 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
04021674 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0402941c l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
04021680 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
04029424 l     O .rwdata	00000005 _ZL13pstrUsageMark
0402168c l     O .rodata	00000009 _ZL18pstrUsageClearMark
04021698 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
040216a4 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
040216b0 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
040216c0 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
040216d4 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
040216e4 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
040216f4 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
04021700 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
0402170c l     O .rodata	0000000b _ZL18pstrUsageStopEject
04021718 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
04021724 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0402942c l     O .rwdata	00000004 _ZL15pstrUsageVolume
04029430 l     O .rwdata	00000008 _ZL16pstrUsageBalance
04029438 l     O .rwdata	00000005 _ZL13pstrUsageBass
04029440 l     O .rwdata	00000007 _ZL15pstrUsageTreble
04021730 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
0402173c l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
04029448 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
04029450 l     O .rwdata	00000004 _ZL12pstrUsageMPX
04029454 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0402945c l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
04029464 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
04021748 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
04021754 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
04021760 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
0402176c l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0402946c l     O .rwdata	00000005 _ZL13pstrUsageSlow
04021778 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
04021784 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
04021790 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
0402179c l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
040217ac l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
040217bc l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
040217c8 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
040217d4 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
040217e0 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
04029474 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0402947c l     O .rwdata	00000007 _ZL15pstrUsageMotion
040217ec l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
040217f8 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
04029484 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
04021804 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
04021814 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
04021824 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
04021830 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
0402183c l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
04021848 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0402948c l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
04029494 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
04021854 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
04021860 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
0402186c l     O .rodata	00000009 _ZL21pstrUsageChannelFront
04021878 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0402949c l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
04021888 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
04021894 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
040294a4 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
040294ac l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
040294b4 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
040218a4 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
040218b0 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
040218bc l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
040218c8 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
040218d4 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
040218e4 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
040218f8 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
04021904 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
04021918 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
04021928 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
04021934 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
04021944 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
04021954 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
04021964 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
04021970 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
04021980 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
0402198c l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
0402199c l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
040219ac l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
040219bc l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
040219cc l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
040219e0 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
040294bc l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
040219f0 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
04021a04 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
04021a18 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
04021a28 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
04021a38 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
04021a48 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
04021a54 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
04021a60 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
04021a6c l     O .rodata	00000009 _ZL16pstrUsageALLogon
04021a78 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
04021a84 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
04021a94 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
04021aac l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
04021ab8 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
04021ac4 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
04021ad0 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
04021adc l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
04021ae8 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
04021af4 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
04021b08 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
040294c4 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
04021b14 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
040294cc l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
04021b20 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
04021b2c l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
04021b3c l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
04021b48 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
04021b58 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
04021b68 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
04021b78 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
04021b84 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
04021b90 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
04021b9c l     O .rodata	00000009 _ZL16pstrUsageALClock
04021ba8 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
04021bb8 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
04021bc4 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
04021bd0 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
04021bdc l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
04021be8 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
04021bfc l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
04021c0c l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
04021c18 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
04021c2c l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
04021c38 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
04021c48 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
04021c5c l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
04021c70 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
04021c84 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
04021c94 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
04021cac l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
04021cc0 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
04021cd0 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
04021ce0 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
040294d4 l     O .rwdata	00000007 _ZL14pstrUsageACNew
040294dc l     O .rwdata	00000008 _ZL15pstrUsageACOpen
04021cf4 l     O .rodata	00000009 _ZL16pstrUsageACClose
040294e4 l     O .rwdata	00000008 _ZL15pstrUsageACExit
040294ec l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
040294f4 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
040294fc l     O .rwdata	00000008 _ZL15pstrUsageACSave
04021d00 l     O .rodata	00000009 _ZL16pstrUsageACPrint
04029504 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0402950c l     O .rwdata	00000008 _ZL15pstrUsageACUndo
04029514 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0402951c l     O .rwdata	00000007 _ZL14pstrUsageACCut
04021d0c l     O .rodata	00000009 _ZL16pstrUsageACPaste
04021d18 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
04029524 l     O .rwdata	00000008 _ZL15pstrUsageACFind
04021d24 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
04021d34 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0402952c l     O .rwdata	00000008 _ZL15pstrUsageACGoto
04029534 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0402953c l     O .rwdata	00000008 _ZL15pstrUsageACBack
04029544 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0402954c l     O .rwdata	00000008 _ZL15pstrUsageACStop
04021d40 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
04021d4c l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
04021d5c l     O .rodata	0000000d _ZL19pstrUsageACNextLink
04021d6c l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
04029554 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
04021d78 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
04021d84 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
04021d90 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0402955c l     O .rwdata	00000008 _ZL15pstrUsageACZoom
04021d9c l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
04021da8 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
04021db8 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
04021dc4 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
04021dd4 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
04021de4 l     O .rodata	0000000a _ZL17pstrUsageACScroll
04021df0 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
04021dfc l     O .rodata	0000000d _ZL19pstrUsageACPanRight
04029564 l     O .rwdata	00000007 _ZL14pstrUsageACPan
04021e0c l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
04021e18 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
04021e28 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0402956c l     O .rwdata	00000008 _ZL17pstrUsageACFormat
04029574 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0402957c l     O .rwdata	00000008 _ZL15pstrUsageACBold
04029584 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
04021e38 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
04021e44 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0402958c l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
04021e50 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
04021e5c l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
04021e68 l     O .rodata	0000000a _ZL17pstrUsageACRotate
04021e74 l     O .rodata	0000000a _ZL17pstrUsageACResize
04021e80 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
04021e8c l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
04021e98 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
04021ea4 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
04021eb0 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
04021ebc l     O .rodata	0000000b _ZL20pstrUsageACFontColor
04021ec8 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
04021ed4 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
04021ee4 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
04021ef4 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
04021f04 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
04021f14 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
04021f20 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
04021f30 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
04021f3c l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
04021f4c l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
04021f5c l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
04021f6c l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
04021f78 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
04021f84 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
04021f90 l     O .rodata	0000000b _ZL18pstrUsageACPromote
04021f9c l     O .rodata	0000000a _ZL17pstrUsageACDemote
04029594 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0402959c l     O .rwdata	00000006 _ZL13pstrUsageACNo
04021fa8 l     O .rodata	0000000a _ZL17pstrUsageACCancel
040295a4 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
040295ac l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
04021fb4 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
040295b4 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
04021fc0 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
04021fd0 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
04021fdc l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
04021fec l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
04021ffc l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
0402200c l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
040295bc l     O .rwdata	00000007 _ZL17pstrUsageACDelete
040295c4 l     O .rwdata	00000008 _ZL15pstrUsageACLock
04022018 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
040295cc l     O .rwdata	00000008 _ZL18pstrUsageACProtect
04022024 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
04022030 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
04022040 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
0402204c l     O .rodata	0000000d _ZL22pstrUsageACViewComment
0402205c l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
04022068 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
04022074 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
04022080 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
0402208c l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
04022098 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
040220a4 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
040295d4 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
040295dc l     O .rwdata	00000008 _ZL15pstrUsageACSort
040220b0 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
040220bc l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
040295e4 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
040220cc l     O .rodata	0000000b _ZL19pstrUsageACSetClock
040220d8 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
040220e4 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
040220f4 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
04022104 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
04022110 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
0402211c l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
04022128 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
040295ec l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
04022134 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
04022140 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
0402214c l     O .rodata	00000009 _ZL16pstrUsageACReply
04022158 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
04022168 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
040295f4 l     O .rwdata	00000007 _ZL15pstrUsageACSend
04022174 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
040295fc l     O .rwdata	00000008 _ZL17pstrUsageACUpload
04029604 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
04022180 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
0402218c l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
04022198 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
040221a4 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
040221b0 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
040221bc l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
040221c8 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
040221d4 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
040221e0 l     O .rodata	0000000a _ZL17pstrUsageACRename
040221ec l     O .rodata	00000009 _ZL16pstrUsageACMerge
040221f8 l     O .rodata	00000009 _ZL16pstrUsageACSplit
04022204 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
04022210 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
0402221c l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0402960c l     O .rwdata	00000004 _ZL12pstrUsagePen
04022228 l     O .rodata	0000000a _ZL17pstrUsageLightPen
04022234 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
04022240 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
0402224c l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
04022258 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
04029610 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
04022268 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
04029618 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
04022274 l     O .rodata	00000009 _ZL17pstrUsageArmature
04022280 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
04022294 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
04029620 l     O .rwdata	00000007 _ZL15pstrUsageStylus
04029628 l     O .rwdata	00000005 _ZL13pstrUsagePuck
04029630 l     O .rwdata	00000007 _ZL15pstrUsageFinger
040222a4 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
040222b0 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
040222bc l     O .rodata	00000009 _ZL16pstrUsageInRange
04029638 l     O .rwdata	00000006 _ZL14pstrUsageTouch
04029640 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
04029648 l     O .rwdata	00000004 _ZL12pstrUsageTap
0402964c l     O .rwdata	00000005 _ZL16pstrUsageQuality
040222c8 l     O .rodata	0000000b _ZL18pstrUsageDataValid
040222d4 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
040222e4 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
040222f4 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
04029654 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0402965c l     O .rwdata	00000007 _ZL14pstrUsageXTilt
04029664 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0402966c l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
04022304 l     O .rodata	00000009 _ZL17pstrUsageAltitude
04029674 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0402967c l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
04022310 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
04029684 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0402968c l     O .rwdata	00000007 _ZL15pstrUsageEraser
0402231c l     O .rodata	00000009 _ZL19pstrUsageTabletPick
04022328 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
04022338 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
04022344 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
04022354 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
04022360 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
04022370 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
0402237c l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
0402238c l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
04022398 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
040223a8 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
040223b8 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
040223c4 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
040223d0 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
040223dc l     O .rodata	0000000a _ZL20pstrUsageDisplayData
040223e8 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
040223f4 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
04022400 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
0402240c l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
0402241c l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
0402242c l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
04029694 l     O .rwdata	00000004 _ZL12pstrUsageRow
04029698 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0402969c l     O .rwdata	00000005 _ZL13pstrUsageRows
040296a4 l     O .rwdata	00000005 _ZL16pstrUsageColumns
04022438 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
04022444 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
04022450 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
0402245c l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
040296ac l     O .rwdata	00000008 _ZL19pstrUsageFontReport
04022468 l     O .rodata	00000009 _ZL17pstrUsageFontData
04022474 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
04022480 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
0402248c l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
0402249c l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
040224ac l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
040224bc l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
040224c8 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
040224d4 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
040224e0 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
040224ec l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
040224f8 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
04022504 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
04022510 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
0402251c l     O .rodata	0000000a _ZL22pstrUsageAttributeData
04022528 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
04022538 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
04022548 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
04022558 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
04022564 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
04022570 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
04022580 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
040296b4 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
0402258c l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
0402259c l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
040225ac l     O .rodata	00000009 _ZL20pstrUsagePaletteData
040225b8 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
040225c4 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
040225d4 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
040225e4 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
040225f4 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
04022604 l     O .rodata	0000000a _ZL17pstrUsageBlitData
04022610 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
0402261c l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
04022628 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
04022638 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
04022648 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
04022658 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
04022668 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
040296bc l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
040296c4 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
04022678 l     O .rodata	0000000b _ZL18pstrUsageClipStore
040296cc l     O .rwdata	00000007 _ZL15pstrUsageUpdate
040296d4 l     O .rwdata	00000005 _ZL13pstrUsageNext
040296dc l     O .rwdata	00000005 _ZL13pstrUsageSave
040296e4 l     O .rwdata	00000006 _ZL14pstrUsagePrint
04022684 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
040296ec l     O .rwdata	00000005 _ZL13pstrUsageCine
04022690 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
040296f4 l     O .rwdata	00000006 _ZL14pstrUsageFocus
040296fc l     O .rwdata	00000006 _ZL14pstrUsageDepth
0402269c l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
040226ac l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
040226bc l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
040226cc l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
040226d8 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
040226e4 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
040226f8 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
0402270c l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
04022720 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
04022734 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
04022744 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
04022754 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
04022760 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
0402276c l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
0402277c l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 message.cpp
04029710 l     O .rwdata	00000001 _ZL9SPI_MODE0
04029711 l     O .rwdata	00000001 _ZL9SPI_MODE1
04029712 l     O .rwdata	00000001 _ZL9SPI_MODE2
04029713 l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 parsetools.cpp
04029718 l     O .rwdata	00000001 _ZL9SPI_MODE0
04029719 l     O .rwdata	00000001 _ZL9SPI_MODE1
0402971a l     O .rwdata	00000001 _ZL9SPI_MODE2
0402971b l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 usbh_midi.cpp
0402971c l     O .rwdata	00000001 _ZL9SPI_MODE0
0402971d l     O .rwdata	00000001 _ZL9SPI_MODE1
0402971e l     O .rwdata	00000001 _ZL9SPI_MODE2
0402971f l     O .rwdata	00000001 _ZL9SPI_MODE3
04022856 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
04022866 l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
04008a30 l     F .text	00000144 .LTHUNK0
00000000 l    df *ABS*	00000000 usbhid.cpp
04029728 l     O .rwdata	00000001 _ZL9SPI_MODE0
04029729 l     O .rwdata	00000001 _ZL9SPI_MODE1
0402972a l     O .rwdata	00000001 _ZL9SPI_MODE2
0402972b l     O .rwdata	00000001 _ZL9SPI_MODE3
0402972c l     O .rwdata	00000002 _ZL9pstrSpace
04029730 l     O .rwdata	00000003 _ZL8pstrCRLF
04029734 l     O .rwdata	00000002 _ZL13pstrSingleTab
04029738 l     O .rwdata	00000003 _ZL13pstrDoubleTab
0402973c l     O .rwdata	00000004 _ZL13pstrTripleTab
04029740 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
04022930 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
04022944 l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
04022950 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
0402295c l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
04022968 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
04022974 l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
04022984 l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
04029748 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
04029750 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
04029758 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
04029760 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
04022990 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
0402299c l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
04029764 l     O .rwdata	00000004 _ZL16pstrUsagePagePID
04029768 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
040229a8 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
040229b8 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
04029770 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
04029778 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
040229c8 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
04029780 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
040229d8 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
04029788 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
040229f0 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
0402978c l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
040229fc l     O .rodata	00000009 _ZL21pstrUsagePageReserved
04022a08 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
04029794 l     O .rwdata	00000008 _ZL16pstrUsagePointer
0402979c l     O .rwdata	00000006 _ZL14pstrUsageMouse
04022a14 l     O .rodata	00000009 _ZL17pstrUsageJoystick
04022a20 l     O .rodata	00000009 _ZL16pstrUsageGamePad
040297a4 l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
040297ac l     O .rwdata	00000007 _ZL15pstrUsageKeypad
04022a2c l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
04022a3c l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
040297b4 l     O .rwdata	00000002 _ZL10pstrUsageX
040297b8 l     O .rwdata	00000002 _ZL10pstrUsageY
040297bc l     O .rwdata	00000002 _ZL10pstrUsageZ
040297c0 l     O .rwdata	00000003 _ZL11pstrUsageRx
040297c4 l     O .rwdata	00000003 _ZL11pstrUsageRy
040297c8 l     O .rwdata	00000003 _ZL11pstrUsageRz
040297cc l     O .rwdata	00000007 _ZL15pstrUsageSlider
040297d4 l     O .rwdata	00000005 _ZL13pstrUsageDial
040297dc l     O .rwdata	00000006 _ZL14pstrUsageWheel
04022a50 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
04022a5c l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
04022a68 l     O .rodata	0000000b _ZL18pstrUsageByteCount
04022a74 l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
040297e4 l     O .rwdata	00000006 _ZL14pstrUsageStart
040297ec l     O .rwdata	00000004 _ZL15pstrUsageSelect
040297f0 l     O .rwdata	00000003 _ZL11pstrUsageVx
040297f4 l     O .rwdata	00000003 _ZL11pstrUsageVy
040297f8 l     O .rwdata	00000003 _ZL11pstrUsageVz
040297fc l     O .rwdata	00000005 _ZL13pstrUsageVbrx
04029804 l     O .rwdata	00000005 _ZL13pstrUsageVbry
0402980c l     O .rwdata	00000005 _ZL13pstrUsageVbrz
04029814 l     O .rwdata	00000004 _ZL12pstrUsageVno
04022a84 l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
04022a94 l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
04022aa0 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
04022aac l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
04022abc l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
04022ac8 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
04022ad4 l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
04022ae8 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
04022af8 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
04022b08 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
04022b18 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
04022b28 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
04022b38 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
04022b48 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
04022b58 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
04022b64 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
04022b74 l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
04022b88 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
04022b9c l     O .rodata	00000009 _ZL15pstrUsageDPadUp
04022ba8 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
04022bb4 l     O .rodata	0000000c _ZL18pstrUsageDPadRight
04022bc0 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
04022bcc l     O .rodata	00000009 _ZL19pstrUsageSystemDock
04022bd8 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
04022be4 l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
04022bf0 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
04022bfc l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
04022c08 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
04022c14 l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
04022c20 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
04022c30 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
04022c3c l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
04022c4c l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
04022c5c l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
04022c6c l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
04022c7c l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
04022c8c l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
04022ca4 l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
04022cbc l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
04022cd4 l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
04022ce4 l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
04022cf4 l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
04022d04 l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
04022d14 l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
04022d24 l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
04022d34 l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
04022d44 l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
04022d54 l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
04022d64 l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
04022d74 l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
04022d8c l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
04022d9c l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
04022db0 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
04022dc0 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
04022dcc l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
04022dd8 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
04022de4 l     O .rodata	0000000b _ZL21pstrUsageTrackControl
04029818 l     O .rwdata	00000008 _ZL16pstrUsageAileron
04022df0 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
04022e00 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
04022e14 l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
04022e28 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
04022e38 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
04022e48 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
04022e54 l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
04022e68 l     O .rodata	00000009 _ZL17pstrUsageElevator
04022e74 l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
04029820 l     O .rwdata	00000007 _ZL15pstrUsageRudder
04022e84 l     O .rodata	00000009 _ZL17pstrUsageThrottle
04022e90 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
04022e9c l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
04022eac l     O .rodata	0000000d _ZL20pstrUsageLandingGear
04022ebc l     O .rodata	0000000a _ZL17pstrUsageToeBrake
04029828 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
04022ec8 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
04022ed4 l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
04022ee0 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
04029830 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
04029838 l     O .rwdata	00000006 _ZL14pstrUsageBrake
04029840 l     O .rwdata	00000007 _ZL15pstrUsageClutch
04029848 l     O .rwdata	00000008 _ZL16pstrUsageShifter
04022eec l     O .rodata	00000009 _ZL17pstrUsageSteering
04022ef8 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
04022f04 l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
04022f10 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
04029850 l     O .rwdata	00000008 _ZL16pstrUsageBallast
04022f1c l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
04022f2c l     O .rodata	0000000c _ZL19pstrUsageHandleBars
04022f38 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
04022f44 l     O .rodata	0000000b _ZL18pstrUsageRearBrake
04029858 l     O .rwdata	00000005 _ZL13pstrUsageBelt
04022f50 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
04029860 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
04029868 l     O .rwdata	00000006 _ZL14pstrUsageGlove
04022f5c l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
04022f68 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
04022f74 l     O .rodata	0000000b _ZL20pstrUsageHandTracker
04022f80 l     O .rodata	0000000b _ZL19pstrUsageOculometer
04029870 l     O .rwdata	00000005 _ZL13pstrUsageVest
04022f8c l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
04022f98 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
04022fa4 l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
04022fb4 l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
04022fc4 l     O .rodata	0000000a _ZL17pstrUsageGolfClub
04022fd0 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
04022fdc l     O .rodata	0000000a _ZL18pstrUsageTreadmill
04029878 l     O .rwdata	00000004 _ZL12pstrUsageOar
0402987c l     O .rwdata	00000006 _ZL14pstrUsageSlope
04029884 l     O .rwdata	00000005 _ZL13pstrUsageRate
04022fe8 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
04022ff4 l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
04023004 l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
04023014 l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
04023024 l     O .rodata	0000000c _ZL19pstrUsageStickTempo
04023030 l     O .rodata	0000000b _ZL18pstrUsageStickType
0402303c l     O .rodata	0000000b _ZL20pstrUsageStickHeight
0402988c l     O .rwdata	00000007 _ZL15pstrUsagePutter
04029894 l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0402989c l     O .rwdata	00000007 _ZL14pstrUsage2Iron
040298a4 l     O .rwdata	00000007 _ZL14pstrUsage3Iron
040298ac l     O .rwdata	00000007 _ZL14pstrUsage4Iron
040298b4 l     O .rwdata	00000007 _ZL14pstrUsage5Iron
040298bc l     O .rwdata	00000007 _ZL14pstrUsage6Iron
040298c4 l     O .rwdata	00000007 _ZL14pstrUsage7Iron
040298cc l     O .rwdata	00000007 _ZL14pstrUsage8Iron
040298d4 l     O .rwdata	00000007 _ZL14pstrUsage9Iron
040298dc l     O .rwdata	00000008 _ZL15pstrUsage10Iron
040298e4 l     O .rwdata	00000008 _ZL15pstrUsage11Iron
04023048 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
04023054 l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
04023060 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
040298ec l     O .rwdata	00000007 _ZL14pstrUsage1Wood
040298f4 l     O .rwdata	00000007 _ZL14pstrUsage3Wood
040298fc l     O .rwdata	00000007 _ZL14pstrUsage5Wood
04029904 l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0402990c l     O .rwdata	00000007 _ZL14pstrUsage9Wood
0402306c l     O .rodata	0000000d _ZL25pstrUsage3DGameController
0402307c l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
04029914 l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0402991c l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
04023088 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
04023098 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
040230a8 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
040230b8 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
040230c8 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
040230d8 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
040230e8 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
040230f8 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
04023108 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
04029920 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
04023118 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
04029928 l     O .rwdata	00000005 _ZL13pstrUsageBump
04023128 l     O .rodata	00000009 _ZL16pstrUsageNewGame
04023134 l     O .rodata	0000000b _ZL18pstrUsageShootBall
04029930 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
04023140 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
0402314c l     O .rodata	00000009 _ZL16pstrUsageGunClip
04029938 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
04023158 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
04023168 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
04023174 l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
04023180 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
0402318c l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
040231a0 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
040231b0 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
040231c0 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
040231cc l     O .rodata	0000000c _ZL19pstrUsageWirelessID
040231d8 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
040231f0 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
04023204 l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
0402321c l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
04023230 l     O .rodata	00000009 _ZL16pstrUsageNumLock
0402323c l     O .rodata	0000000a _ZL17pstrUsageCapsLock
04023248 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
04029940 l     O .rwdata	00000008 _ZL16pstrUsageCompose
04029948 l     O .rwdata	00000005 _ZL13pstrUsageKana
04029950 l     O .rwdata	00000004 _ZL14pstrUsagePower
04029954 l     O .rwdata	00000006 _ZL14pstrUsageShift
0402995c l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
04029960 l     O .rwdata	00000005 _ZL13pstrUsageMute
04023254 l     O .rodata	0000000a _ZL19pstrUsageToneEnable
04023260 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
04023270 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
04029968 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
04023280 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
04023290 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
04029970 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
04029978 l     O .rwdata	00000007 _ZL15pstrUsageStereo
0402329c l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
040232b0 l     O .rodata	00000009 _ZL17pstrUsageSpinning
04029980 l     O .rwdata	00000004 _ZL12pstrUsageCAV
04029984 l     O .rwdata	00000004 _ZL12pstrUsageCLV
040232bc l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
040232d0 l     O .rodata	00000009 _ZL16pstrUsageOffHook
04029988 l     O .rwdata	00000005 _ZL13pstrUsageRing
040232dc l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
040232e8 l     O .rodata	0000000a _ZL17pstrUsageDataMode
04029990 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
04029998 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
040299a0 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
040299a8 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
040232f4 l     O .rodata	00000009 _ZL16pstrUsageHeadSet
040299b0 l     O .rwdata	00000005 _ZL13pstrUsageHold
040299b8 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
04023300 l     O .rodata	00000009 _ZL17pstrUsageCoverage
0402330c l     O .rodata	0000000b _ZL18pstrUsageNightMode
04023318 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
04023324 l     O .rodata	0000000c _ZL19pstrUsageCallPickup
040299bc l     O .rwdata	00000005 _ZL19pstrUsageConference
04023330 l     O .rodata	00000009 _ZL16pstrUsageStandBy
040299c4 l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
040299cc l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
040299d4 l     O .rwdata	00000008 _ZL15pstrUsageOnLine
0402333c l     O .rodata	00000009 _ZL16pstrUsageOffLine
040299dc l     O .rwdata	00000005 _ZL13pstrUsageBusy
040299e4 l     O .rwdata	00000006 _ZL14pstrUsageReady
04023348 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
04023354 l     O .rodata	0000000a _ZL17pstrUsagePaperJam
040299ec l     O .rwdata	00000007 _ZL15pstrUsageRemote
040299f4 l     O .rwdata	00000004 _ZL16pstrUsageForward
040299f8 l     O .rwdata	00000004 _ZL16pstrUsageReverse
040299fc l     O .rwdata	00000005 _ZL13pstrUsageStop
04029a04 l     O .rwdata	00000007 _ZL15pstrUsageRewind
04023360 l     O .rodata	00000009 _ZL20pstrUsageFastForward
04029a0c l     O .rwdata	00000005 _ZL13pstrUsagePlay
04029a14 l     O .rwdata	00000006 _ZL14pstrUsagePause
04029a1c l     O .rwdata	00000004 _ZL15pstrUsageRecord
04029a20 l     O .rwdata	00000006 _ZL14pstrUsageError
0402336c l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
0402337c l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
04023390 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
04029a28 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
040233a8 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
040233b4 l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
040233c4 l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
04029a30 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
040233d4 l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
040233e4 l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
040233f8 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
0402340c l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
04023420 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
04023434 l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
04029a38 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
04023444 l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
04023450 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
04029a40 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
0402345c l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
04023468 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
04029a48 l     O .rwdata	00000006 _ZL14pstrUsagePhone
04023478 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
04023484 l     O .rodata	0000000a _ZL24pstrUsageMessageControls
04029a50 l     O .rwdata	00000008 _ZL16pstrUsageHandset
04029a58 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
04023490 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
0402349c l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
04029a60 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
04029a68 l     O .rwdata	00000006 _ZL14pstrUsageFlash
04029a70 l     O .rwdata	00000008 _ZL16pstrUsageFeature
04029a78 l     O .rwdata	00000007 _ZL15pstrUsageRedial
040234a8 l     O .rodata	00000009 _ZL17pstrUsageTransfer
04029a80 l     O .rwdata	00000005 _ZL13pstrUsageDrop
04029a88 l     O .rwdata	00000005 _ZL13pstrUsagePark
040234b4 l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
040234c0 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
04029a90 l     O .rwdata	00000005 _ZL13pstrUsageLine
040234cc l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
040234d8 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
040234e4 l     O .rodata	00000009 _ZL19pstrUsageRingSelect
040234f0 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
040234fc l     O .rodata	0000000a _ZL17pstrUsageCallerID
04029a98 l     O .rwdata	00000005 _ZL13pstrUsageSend
04023508 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
04023514 l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
04023520 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
0402352c l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
04023538 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
04023544 l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
04029aa0 l     O .rwdata	00000004 _ZL16pstrUsageMessage
04023554 l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
04023564 l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
04023578 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
0402358c l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
040235a0 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
040235b4 l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
040235c4 l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
040235d4 l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
040235e8 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
040235f8 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
04023608 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
04023618 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
04023624 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
04023630 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
0402363c l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
04029aa4 l     O .rwdata	00000007 _ZL15pstrUsageRinger
04029aac l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
04029ab0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
04029ab4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
04029ab8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
04029abc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
04029ac0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
04029ac4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
04029ac8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
04029acc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
04029ad0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
04029ad4 l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
04029ad8 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
04029adc l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
04029ae0 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
04029ae4 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
04029ae8 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
04023650 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
04023660 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
0402366c l     O .rodata	0000000a _ZL18pstrUsageHeadphone
04023678 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
04029aec l     O .rwdata	00000004 _ZL15pstrUsagePlus10
04029af0 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
04029af8 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
04029b00 l     O .rwdata	00000006 _ZL14pstrUsageReset
04029b08 l     O .rwdata	00000006 _ZL14pstrUsageSleep
04023684 l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
04023690 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
04029b10 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
0402369c l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
04029b18 l     O .rwdata	00000005 _ZL13pstrUsageMenu
040236a8 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
04029b20 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
040236b4 l     O .rodata	0000000a _ZL17pstrUsageMenuDown
040236c0 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
040236cc l     O .rodata	0000000b _ZL18pstrUsageMenuRight
040236d8 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
040236e4 l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
040236f4 l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
04023704 l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
04023710 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
0402371c l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
04029b28 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
0402372c l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
0402373c l     O .rodata	00000009 _ZL17pstrUsageSnapshot
04029b30 l     O .rwdata	00000006 _ZL14pstrUsageStill
04029b38 l     O .rwdata	00000004 _ZL18pstrUsageSelection
04023748 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
04023754 l     O .rodata	0000000a _ZL17pstrUsageModeStep
04023760 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
0402376c l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
0402377c l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
04029b3c l     O .rwdata	00000008 _ZL16pstrUsageChannel
04029b44 l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
04023788 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
04023798 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
040237a4 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
040237b0 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
040237bc l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
040237c8 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
040237d4 l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
040237e0 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
040237f0 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
040237fc l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
04023808 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
04023814 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
04029b4c l     O .rwdata	00000005 _ZL13pstrUsageQuit
04029b54 l     O .rwdata	00000005 _ZL13pstrUsageHelp
04023824 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
04023834 l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
04023840 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
0402384c l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
0402385c l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
0402386c l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
04029b5c l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
04029b64 l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
0402387c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
04029b6c l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
04029b74 l     O .rwdata	00000005 _ZL13pstrUsageOnce
04029b7c l     O .rwdata	00000006 _ZL14pstrUsageDaily
04029b84 l     O .rwdata	00000007 _ZL15pstrUsageWeekly
04029b8c l     O .rwdata	00000008 _ZL16pstrUsageMonthly
04023888 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
04023894 l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
04029b94 l     O .rwdata	00000006 _ZL14pstrUsageEject
04029b9c l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
040238a0 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
040238ac l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
040238b8 l     O .rodata	00000009 _ZL17pstrUsageTracking
040238c4 l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
040238d0 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
04029ba4 l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
040238dc l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
04029bac l     O .rwdata	00000005 _ZL13pstrUsageMark
040238e8 l     O .rodata	00000009 _ZL18pstrUsageClearMark
040238f4 l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
04023900 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
0402390c l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
0402391c l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
04023930 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
04023940 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
04023950 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
0402395c l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
04023968 l     O .rodata	0000000b _ZL18pstrUsageStopEject
04023974 l     O .rodata	0000000b _ZL18pstrUsagePlayPause
04023980 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
04029bb4 l     O .rwdata	00000004 _ZL15pstrUsageVolume
04029bb8 l     O .rwdata	00000008 _ZL16pstrUsageBalance
04029bc0 l     O .rwdata	00000005 _ZL13pstrUsageBass
04029bc8 l     O .rwdata	00000007 _ZL15pstrUsageTreble
0402398c l     O .rodata	0000000b _ZL18pstrUsageBassBoost
04023998 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
04029bd0 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
04029bd8 l     O .rwdata	00000004 _ZL12pstrUsageMPX
04029bdc l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
04029be4 l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
04029bec l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
040239a4 l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
040239b0 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
040239bc l     O .rodata	0000000a _ZL17pstrUsageLongPlay
040239c8 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
04029bf4 l     O .rwdata	00000005 _ZL13pstrUsageSlow
040239d4 l     O .rodata	00000009 _ZL18pstrUsageFanEnable
040239e0 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
040239ec l     O .rodata	0000000b _ZL20pstrUsageLightEnable
040239f8 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
04023a08 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
04023a18 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
04023a24 l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
04023a30 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
04023a3c l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
04029bfc l     O .rwdata	00000005 _ZL18pstrUsageProximity
04029c04 l     O .rwdata	00000007 _ZL15pstrUsageMotion
04023a48 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
04023a54 l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
04029c0c l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
04023a60 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
04023a70 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
04023a80 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
04023a8c l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
04023a98 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
04023aa4 l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
04029c14 l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
04029c1c l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
04023ab0 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
04023abc l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
04023ac8 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
04023ad4 l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
04029c24 l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
04023ae4 l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
04023af0 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
04029c2c l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
04029c34 l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
04029c3c l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
04023b00 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
04023b0c l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
04023b18 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
04023b24 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
04023b30 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
04023b40 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
04023b54 l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
04023b60 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
04023b74 l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
04023b84 l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
04023b90 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
04023ba0 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
04023bb0 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
04023bc0 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
04023bcc l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
04023bdc l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
04023be8 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
04023bf8 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
04023c08 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
04023c18 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
04023c28 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
04023c3c l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
04029c44 l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
04023c4c l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
04023c60 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
04023c74 l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
04023c84 l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
04023c94 l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
04023ca4 l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
04023cb0 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
04023cbc l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
04023cc8 l     O .rodata	00000009 _ZL16pstrUsageALLogon
04023cd4 l     O .rodata	0000000a _ZL17pstrUsageALLogoff
04023ce0 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
04023cf0 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
04023d08 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
04023d14 l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
04023d20 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
04023d2c l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
04023d38 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
04023d44 l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
04023d50 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
04023d64 l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
04029c4c l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
04023d70 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
04029c54 l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
04023d7c l     O .rodata	0000000b _ZL18pstrUsageALDesktop
04023d88 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
04023d98 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
04023da4 l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
04023db4 l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
04023dc4 l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
04023dd4 l     O .rodata	0000000b _ZL21pstrUsageALEncryption
04023de0 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
04023dec l     O .rodata	0000000a _ZL17pstrUsageALAlarms
04023df8 l     O .rodata	00000009 _ZL16pstrUsageALClock
04023e04 l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
04023e14 l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
04023e20 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
04023e2c l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
04023e38 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
04023e44 l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
04023e58 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
04023e68 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
04023e74 l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
04023e88 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
04023e94 l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
04023ea4 l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
04023eb8 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
04023ecc l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
04023ee0 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
04023ef0 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
04023f08 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
04023f1c l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
04023f2c l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
04023f3c l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
04029c5c l     O .rwdata	00000007 _ZL14pstrUsageACNew
04029c64 l     O .rwdata	00000008 _ZL15pstrUsageACOpen
04023f50 l     O .rodata	00000009 _ZL16pstrUsageACClose
04029c6c l     O .rwdata	00000008 _ZL15pstrUsageACExit
04029c74 l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
04029c7c l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
04029c84 l     O .rwdata	00000008 _ZL15pstrUsageACSave
04023f5c l     O .rodata	00000009 _ZL16pstrUsageACPrint
04029c8c l     O .rwdata	00000008 _ZL21pstrUsageACProperties
04029c94 l     O .rwdata	00000008 _ZL15pstrUsageACUndo
04029c9c l     O .rwdata	00000008 _ZL15pstrUsageACCopy
04029ca4 l     O .rwdata	00000007 _ZL14pstrUsageACCut
04023f68 l     O .rodata	00000009 _ZL16pstrUsageACPaste
04023f74 l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
04029cac l     O .rwdata	00000008 _ZL15pstrUsageACFind
04023f80 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
04023f90 l     O .rodata	0000000a _ZL17pstrUsageACSearch
04029cb4 l     O .rwdata	00000008 _ZL15pstrUsageACGoto
04029cbc l     O .rwdata	00000008 _ZL15pstrUsageACHome
04029cc4 l     O .rwdata	00000008 _ZL15pstrUsageACBack
04029ccc l     O .rwdata	00000007 _ZL18pstrUsageACForward
04029cd4 l     O .rwdata	00000008 _ZL15pstrUsageACStop
04023f9c l     O .rodata	0000000b _ZL18pstrUsageACRefresh
04023fa8 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
04023fb8 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
04023fc8 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
04029cdc l     O .rwdata	00000008 _ZL18pstrUsageACHistory
04023fd4 l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
04023fe0 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
04023fec l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
04029ce4 l     O .rwdata	00000008 _ZL15pstrUsageACZoom
04023ff8 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
04024004 l     O .rodata	0000000d _ZL21pstrUsageACNormalView
04024014 l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
04024020 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
04024030 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
04024040 l     O .rodata	0000000a _ZL17pstrUsageACScroll
0402404c l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
04024058 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
04029cec l     O .rwdata	00000007 _ZL14pstrUsageACPan
04024068 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
04024074 l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
04024084 l     O .rodata	0000000d _ZL19pstrUsageACTileVert
04029cf4 l     O .rwdata	00000008 _ZL17pstrUsageACFormat
04029cfc l     O .rwdata	00000008 _ZL15pstrUsageACEdit
04029d04 l     O .rwdata	00000008 _ZL15pstrUsageACBold
04029d0c l     O .rwdata	00000008 _ZL18pstrUsageACItalics
04024094 l     O .rodata	00000009 _ZL20pstrUsageACUnderline
040240a0 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
04029d14 l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
040240ac l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
040240b8 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
040240c4 l     O .rodata	0000000a _ZL17pstrUsageACRotate
040240d0 l     O .rodata	0000000a _ZL17pstrUsageACResize
040240dc l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
040240e8 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
040240f4 l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
04024100 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
0402410c l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
04024118 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
04024124 l     O .rodata	0000000c _ZL19pstrUsageACFontSize
04024130 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
04024140 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
04024150 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
04024160 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
04024170 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
0402417c l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
0402418c l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
04024198 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
040241a8 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
040241b8 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
040241c8 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
040241d4 l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
040241e0 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
040241ec l     O .rodata	0000000b _ZL18pstrUsageACPromote
040241f8 l     O .rodata	0000000a _ZL17pstrUsageACDemote
04029d1c l     O .rwdata	00000007 _ZL14pstrUsageACYes
04029d24 l     O .rwdata	00000006 _ZL13pstrUsageACNo
04024204 l     O .rodata	0000000a _ZL17pstrUsageACCancel
04029d2c l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
04029d34 l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
04024210 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
04029d3c l     O .rwdata	00000008 _ZL17pstrUsageACExpand
0402421c l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
0402422c l     O .rodata	0000000c _ZL19pstrUsageACCollapse
04024238 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
04024248 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
04024258 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
04024268 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
04029d44 l     O .rwdata	00000007 _ZL17pstrUsageACDelete
04029d4c l     O .rwdata	00000008 _ZL15pstrUsageACLock
04024274 l     O .rodata	0000000a _ZL17pstrUsageACUnlock
04029d54 l     O .rwdata	00000008 _ZL18pstrUsageACProtect
04024280 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
0402428c l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
0402429c l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
040242a8 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
040242b8 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
040242c4 l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
040242d0 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
040242dc l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
040242e8 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
040242f4 l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
04024300 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
04029d5c l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
04029d64 l     O .rwdata	00000008 _ZL15pstrUsageACSort
0402430c l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
04024318 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
04029d6c l     O .rwdata	00000008 _ZL17pstrUsageACFilter
04024328 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
04024334 l     O .rodata	0000000c _ZL20pstrUsageACViewClock
04024340 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
04024350 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
04024360 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
0402436c l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
04024378 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
04024384 l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
04029d74 l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
04024390 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
0402439c l     O .rodata	0000000a _ZL17pstrUsageACSendTo
040243a8 l     O .rodata	00000009 _ZL16pstrUsageACReply
040243b4 l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
040243c4 l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
04029d7c l     O .rwdata	00000007 _ZL15pstrUsageACSend
040243d0 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
04029d84 l     O .rwdata	00000008 _ZL17pstrUsageACUpload
04029d8c l     O .rwdata	00000008 _ZL19pstrUsageACDownload
040243dc l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
040243e8 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
040243f4 l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
04024400 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
0402440c l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
04024418 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
04024424 l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
04024430 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
0402443c l     O .rodata	0000000a _ZL17pstrUsageACRename
04024448 l     O .rodata	00000009 _ZL16pstrUsageACMerge
04024454 l     O .rodata	00000009 _ZL16pstrUsageACSplit
04024460 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
0402446c l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
04024478 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
04029d94 l     O .rwdata	00000004 _ZL12pstrUsagePen
04024484 l     O .rodata	0000000a _ZL17pstrUsageLightPen
04024490 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
0402449c l     O .rodata	0000000a _ZL17pstrUsageTouchPad
040244a8 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
040244b4 l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
04029d98 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
040244c4 l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
04029da0 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
040244d0 l     O .rodata	00000009 _ZL17pstrUsageArmature
040244dc l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
040244f0 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
04029da8 l     O .rwdata	00000007 _ZL15pstrUsageStylus
04029db0 l     O .rwdata	00000005 _ZL13pstrUsagePuck
04029db8 l     O .rwdata	00000007 _ZL15pstrUsageFinger
04024500 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
0402450c l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
04024518 l     O .rodata	00000009 _ZL16pstrUsageInRange
04029dc0 l     O .rwdata	00000006 _ZL14pstrUsageTouch
04029dc8 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
04029dd0 l     O .rwdata	00000004 _ZL12pstrUsageTap
04029dd4 l     O .rwdata	00000005 _ZL16pstrUsageQuality
04024524 l     O .rodata	0000000b _ZL18pstrUsageDataValid
04024530 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
04024540 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
04024550 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
04029ddc l     O .rwdata	00000007 _ZL15pstrUsageInvert
04029de4 l     O .rwdata	00000007 _ZL14pstrUsageXTilt
04029dec l     O .rwdata	00000007 _ZL14pstrUsageYTilt
04029df4 l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
04024560 l     O .rodata	00000009 _ZL17pstrUsageAltitude
04029dfc l     O .rwdata	00000006 _ZL14pstrUsageTwist
04029e04 l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
0402456c l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
04029e0c l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
04029e14 l     O .rwdata	00000007 _ZL15pstrUsageEraser
04024578 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
04024584 l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
04024594 l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
040245a0 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
040245b0 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
040245bc l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
040245cc l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
040245d8 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
040245e8 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
040245f4 l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
04024604 l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
04024614 l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
04024620 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
0402462c l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
04024638 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
04024644 l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
04024650 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
0402465c l     O .rodata	0000000b _ZL20pstrUsageStatusReady
04024668 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
04024678 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
04024688 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
04029e1c l     O .rwdata	00000004 _ZL12pstrUsageRow
04029e20 l     O .rwdata	00000004 _ZL15pstrUsageColumn
04029e24 l     O .rwdata	00000005 _ZL13pstrUsageRows
04029e2c l     O .rwdata	00000005 _ZL16pstrUsageColumns
04024694 l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
040246a0 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
040246ac l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
040246b8 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
04029e34 l     O .rwdata	00000008 _ZL19pstrUsageFontReport
040246c4 l     O .rodata	00000009 _ZL17pstrUsageFontData
040246d0 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
040246dc l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
040246e8 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
040246f8 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
04024708 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
04024718 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
04024724 l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
04024730 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
0402473c l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
04024748 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
04024754 l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
04024760 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
0402476c l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
04024778 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
04024784 l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
04024794 l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
040247a4 l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
040247b4 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
040247c0 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
040247cc l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
040247dc l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
04029e3c l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
040247e8 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
040247f8 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
04024808 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
04024814 l     O .rodata	00000009 _ZL19pstrUsageBlitReport
04024820 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
04024830 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
04024840 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
04024850 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
04024860 l     O .rodata	0000000a _ZL17pstrUsageBlitData
0402486c l     O .rodata	00000009 _ZL19pstrUsageSoftButton
04024878 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
04024884 l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
04024894 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
040248a4 l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
040248b4 l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
040248c4 l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
04029e44 l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
04029e4c l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
040248d4 l     O .rodata	0000000b _ZL18pstrUsageClipStore
04029e54 l     O .rwdata	00000007 _ZL15pstrUsageUpdate
04029e5c l     O .rwdata	00000005 _ZL13pstrUsageNext
04029e64 l     O .rwdata	00000005 _ZL13pstrUsageSave
04029e6c l     O .rwdata	00000006 _ZL14pstrUsagePrint
040248e0 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
04029e74 l     O .rwdata	00000005 _ZL13pstrUsageCine
040248ec l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
04029e7c l     O .rwdata	00000006 _ZL14pstrUsageFocus
04029e84 l     O .rwdata	00000006 _ZL14pstrUsageDepth
040248f8 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
04024908 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
04024918 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
04024928 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
04024934 l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
04024940 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
04024954 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
04024968 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
0402497c l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
04024990 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
040249a0 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
040249b0 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
040249bc l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
040249c8 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
040249d8 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
00000000 l    df *ABS*	00000000 usbhost.cpp
04029e8a l     O .rwdata	00000001 _ZL9SPI_MODE0
04029e8b l     O .rwdata	00000001 _ZL9SPI_MODE1
04029e8c l     O .rwdata	00000001 _ZL9SPI_MODE2
04029e8d l     O .rwdata	00000001 _ZL9SPI_MODE3
00000000 l    df *ABS*	00000000 main.cpp
04029e90 l     O .rwdata	00000001 _ZL9SPI_MODE0
04029e91 l     O .rwdata	00000001 _ZL9SPI_MODE1
04029e92 l     O .rwdata	00000001 _ZL9SPI_MODE2
04029e93 l     O .rwdata	00000001 _ZL9SPI_MODE3
04029e94 l     O .rwdata	00000002 _ZL9pstrSpace
04029e98 l     O .rwdata	00000003 _ZL8pstrCRLF
04029e9c l     O .rwdata	00000002 _ZL13pstrSingleTab
04029ea0 l     O .rwdata	00000003 _ZL13pstrDoubleTab
04029ea4 l     O .rwdata	00000004 _ZL13pstrTripleTab
04029ea8 l     O .rwdata	00000006 _ZL22pstrUsagePageUndefined
04024ab8 l     O .rodata	00000012 _ZL35pstrUsagePageGenericDesktopControls
04024acc l     O .rodata	0000000b _ZL31pstrUsagePageSimulationControls
04024ad8 l     O .rodata	00000009 _ZL23pstrUsagePageVRControls
04024ae4 l     O .rodata	0000000c _ZL26pstrUsagePageSportControls
04024af0 l     O .rodata	0000000b _ZL25pstrUsagePageGameControls
04024afc l     O .rodata	0000000e _ZL34pstrUsagePageGenericDeviceControls
04024b0c l     O .rodata	0000000c _ZL27pstrUsagePageKeyboardKeypad
04029eb0 l     O .rwdata	00000005 _ZL17pstrUsagePageLEDs
04029eb8 l     O .rwdata	00000007 _ZL19pstrUsagePageButton
04029ec0 l     O .rwdata	00000008 _ZL20pstrUsagePageOrdinal
04029ec8 l     O .rwdata	00000004 _ZL22pstrUsagePageTelephone
04024b18 l     O .rodata	00000009 _ZL21pstrUsagePageConsumer
04024b24 l     O .rodata	0000000a _ZL22pstrUsagePageDigitizer
04029ecc l     O .rwdata	00000004 _ZL16pstrUsagePagePID
04029ed0 l     O .rwdata	00000008 _ZL20pstrUsagePageUnicode
04024b30 l     O .rodata	0000000f _ZL32pstrUsagePageAlphaNumericDisplay
04024b40 l     O .rodata	0000000e _ZL31pstrUsagePageMedicalInstruments
04029ed8 l     O .rwdata	00000008 _ZL20pstrUsagePageMonitor
04029ee0 l     O .rwdata	00000006 _ZL18pstrUsagePagePower
04024b50 l     O .rodata	0000000e _ZL27pstrUsagePageBarCodeScanner
04029ee8 l     O .rwdata	00000006 _ZL18pstrUsagePageScale
04024b60 l     O .rodata	00000015 _ZL23pstrUsagePageMSRDevices
04029ef0 l     O .rwdata	00000004 _ZL24pstrUsagePagePointOfSale
04024b78 l     O .rodata	00000009 _ZL26pstrUsagePageCameraControl
04029ef4 l     O .rwdata	00000007 _ZL19pstrUsagePageArcade
04024b84 l     O .rodata	00000009 _ZL21pstrUsagePageReserved
04024b90 l     O .rodata	0000000b _ZL26pstrUsagePageVendorDefined
04029efc l     O .rwdata	00000008 _ZL16pstrUsagePointer
04029f04 l     O .rwdata	00000006 _ZL14pstrUsageMouse
04024b9c l     O .rodata	00000009 _ZL17pstrUsageJoystick
04024ba8 l     O .rodata	00000009 _ZL16pstrUsageGamePad
04029f0c l     O .rwdata	00000005 _ZL17pstrUsageKeyboard
04029f14 l     O .rwdata	00000007 _ZL15pstrUsageKeypad
04024bb4 l     O .rodata	00000010 _ZL28pstrUsageMultiAxisController
04024bc4 l     O .rodata	00000014 _ZL31pstrUsageTabletPCSystemControls
04029f1c l     O .rwdata	00000002 _ZL10pstrUsageX
04029f20 l     O .rwdata	00000002 _ZL10pstrUsageY
04029f24 l     O .rwdata	00000002 _ZL10pstrUsageZ
04029f28 l     O .rwdata	00000003 _ZL11pstrUsageRx
04029f2c l     O .rwdata	00000003 _ZL11pstrUsageRy
04029f30 l     O .rwdata	00000003 _ZL11pstrUsageRz
04029f34 l     O .rwdata	00000007 _ZL15pstrUsageSlider
04029f3c l     O .rwdata	00000005 _ZL13pstrUsageDial
04029f44 l     O .rwdata	00000006 _ZL14pstrUsageWheel
04024bd8 l     O .rodata	0000000b _ZL18pstrUsageHatSwitch
04024be4 l     O .rodata	0000000c _ZL22pstrUsageCountedBuffer
04024bf0 l     O .rodata	0000000b _ZL18pstrUsageByteCount
04024bfc l     O .rodata	0000000e _ZL21pstrUsageMotionWakeup
04029f4c l     O .rwdata	00000006 _ZL14pstrUsageStart
04029f54 l     O .rwdata	00000004 _ZL15pstrUsageSelect
04029f58 l     O .rwdata	00000003 _ZL11pstrUsageVx
04029f5c l     O .rwdata	00000003 _ZL11pstrUsageVy
04029f60 l     O .rwdata	00000003 _ZL11pstrUsageVz
04029f64 l     O .rwdata	00000005 _ZL13pstrUsageVbrx
04029f6c l     O .rwdata	00000005 _ZL13pstrUsageVbry
04029f74 l     O .rwdata	00000005 _ZL13pstrUsageVbrz
04029f7c l     O .rwdata	00000004 _ZL12pstrUsageVno
04024c0c l     O .rodata	0000000e _ZL28pstrUsageFeatureNotification
04024c1c l     O .rodata	00000009 _ZL29pstrUsageResolutionMultiplier
04024c28 l     O .rodata	00000009 _ZL22pstrUsageSystemControl
04024c34 l     O .rodata	0000000d _ZL24pstrUsageSystemPowerDown
04024c44 l     O .rodata	0000000a _ZL20pstrUsageSystemSleep
04024c50 l     O .rodata	0000000b _ZL21pstrUsageSystemWakeup
04024c5c l     O .rodata	00000011 _ZL26pstrUsageSystemContextMenu
04024c70 l     O .rodata	0000000e _ZL23pstrUsageSystemMainMenu
04024c80 l     O .rodata	0000000d _ZL22pstrUsageSystemAppMenu
04024c90 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuHelp
04024ca0 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuExit
04024cb0 l     O .rodata	00000010 _ZL25pstrUsageSystemMenuSelect
04024cc0 l     O .rodata	0000000f _ZL24pstrUsageSystemMenuRight
04024cd0 l     O .rodata	0000000e _ZL23pstrUsageSystemMenuLeft
04024ce0 l     O .rodata	0000000c _ZL21pstrUsageSystemMenuUp
04024cec l     O .rodata	0000000e _ZL23pstrUsageSystemMenuDown
04024cfc l     O .rodata	00000011 _ZL26pstrUsageSystemColdRestart
04024d10 l     O .rodata	00000011 _ZL26pstrUsageSystemWarmRestart
04024d24 l     O .rodata	00000009 _ZL15pstrUsageDPadUp
04024d30 l     O .rodata	0000000b _ZL17pstrUsageDPadDown
04024d3c l     O .rodata	0000000c _ZL18pstrUsageDPadRight
04024d48 l     O .rodata	0000000b _ZL17pstrUsageDPadLeft
04024d54 l     O .rodata	00000009 _ZL19pstrUsageSystemDock
04024d60 l     O .rodata	0000000b _ZL21pstrUsageSystemUndock
04024d6c l     O .rodata	0000000a _ZL20pstrUsageSystemSetup
04024d78 l     O .rodata	0000000a _ZL20pstrUsageSystemBreak
04024d84 l     O .rodata	0000000c _ZL28pstrUsageSystemDebuggerBreak
04024d90 l     O .rodata	0000000a _ZL25pstrUsageApplicationBreak
04024d9c l     O .rodata	0000000c _ZL33pstrUsageApplicationDebuggerBreak
04024da8 l     O .rodata	0000000d _ZL26pstrUsageSystemSpeakerMute
04024db8 l     O .rodata	0000000a _ZL24pstrUsageSystemHibernate
04024dc4 l     O .rodata	0000000d _ZL28pstrUsageSystemDisplayInvert
04024dd4 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayInternal
04024de4 l     O .rodata	0000000d _ZL30pstrUsageSystemDisplayExternal
04024df4 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayBoth
04024e04 l     O .rodata	0000000e _ZL26pstrUsageSystemDisplayDual
04024e14 l     O .rodata	00000015 _ZL34pstrUsageSystemDisplayToggleIntExt
04024e2c l     O .rodata	00000016 _ZL32pstrUsageSystemDisplaySwapPriSec
04024e44 l     O .rodata	00000017 _ZL34pstrUsageSystemDisplayLCDAutoscale
04024e5c l     O .rodata	00000010 _ZL31pstrUsageFlightSimulationDevice
04024e6c l     O .rodata	0000000e _ZL35pstrUsageAutomobileSimulationDevice
04024e7c l     O .rodata	0000000e _ZL29pstrUsageTankSimulationDevice
04024e8c l     O .rodata	0000000f _ZL34pstrUsageSpaceshipSimulationDevice
04024e9c l     O .rodata	0000000e _ZL34pstrUsageSubmarineSimulationDevice
04024eac l     O .rodata	0000000e _ZL32pstrUsageSailingSimulationDevice
04024ebc l     O .rodata	0000000e _ZL34pstrUsageMotocicleSimulationDevice
04024ecc l     O .rodata	0000000f _ZL31pstrUsageSportsSimulationDevice
04024edc l     O .rodata	0000000e _ZL33pstrUsageAirplaneSimulationDevice
04024eec l     O .rodata	0000000e _ZL35pstrUsageHelicopterSimulationDevice
04024efc l     O .rodata	00000016 _ZL36pstrUsageMagicCarpetSimulationDevice
04024f14 l     O .rodata	0000000e _ZL32pstrUsageBicycleSimulationDevice
04024f24 l     O .rodata	00000012 _ZL27pstrUsageFlightControlStick
04024f38 l     O .rodata	0000000d _ZL20pstrUsageFlightStick
04024f48 l     O .rodata	0000000c _ZL22pstrUsageCyclicControl
04024f54 l     O .rodata	0000000c _ZL19pstrUsageCyclicTrim
04024f60 l     O .rodata	0000000c _ZL19pstrUsageFlightYoke
04024f6c l     O .rodata	0000000b _ZL21pstrUsageTrackControl
04029f80 l     O .rwdata	00000008 _ZL16pstrUsageAileron
04024f78 l     O .rodata	0000000d _ZL20pstrUsageAileronTrim
04024f88 l     O .rodata	00000011 _ZL26pstrUsageAntiTorqueControl
04024f9c l     O .rodata	00000011 _ZL24pstrUsageAutopilotEnable
04024fb0 l     O .rodata	0000000e _ZL21pstrUsageChaffRelease
04024fc0 l     O .rodata	00000010 _ZL26pstrUsageCollectiveControl
04024fd0 l     O .rodata	0000000b _ZL18pstrUsageDiveBrake
04024fdc l     O .rodata	00000013 _ZL34pstrUsageElectronicCountermeasures
04024ff0 l     O .rodata	00000009 _ZL17pstrUsageElevator
04024ffc l     O .rodata	0000000e _ZL21pstrUsageElevatorTrim
04029f88 l     O .rwdata	00000007 _ZL15pstrUsageRudder
0402500c l     O .rodata	00000009 _ZL17pstrUsageThrottle
04025018 l     O .rodata	0000000c _ZL29pstrUsageFlightCommunications
04025024 l     O .rodata	0000000e _ZL21pstrUsageFlareRelease
04025034 l     O .rodata	0000000d _ZL20pstrUsageLandingGear
04025044 l     O .rodata	0000000a _ZL17pstrUsageToeBrake
04029f90 l     O .rwdata	00000008 _ZL16pstrUsageTrigger
04025050 l     O .rodata	0000000c _ZL19pstrUsageWeaponsArm
0402505c l     O .rodata	0000000c _ZL22pstrUsageWeaponsSelect
04025068 l     O .rodata	0000000b _ZL18pstrUsageWingFlaps
04029f98 l     O .rwdata	00000006 _ZL20pstrUsageAccelerator
04029fa0 l     O .rwdata	00000006 _ZL14pstrUsageBrake
04029fa8 l     O .rwdata	00000007 _ZL15pstrUsageClutch
04029fb0 l     O .rwdata	00000008 _ZL16pstrUsageShifter
04025074 l     O .rodata	00000009 _ZL17pstrUsageSteering
04025080 l     O .rodata	0000000b _ZL24pstrUsageTurretDirection
0402508c l     O .rodata	0000000b _ZL24pstrUsageBarrelElevation
04025098 l     O .rodata	0000000b _ZL18pstrUsageDivePlane
04029fb8 l     O .rwdata	00000008 _ZL16pstrUsageBallast
040250a4 l     O .rodata	0000000e _ZL21pstrUsageBicycleCrank
040250b4 l     O .rodata	0000000c _ZL19pstrUsageHandleBars
040250c0 l     O .rodata	0000000c _ZL19pstrUsageFrontBrake
040250cc l     O .rodata	0000000b _ZL18pstrUsageRearBrake
04029fc0 l     O .rwdata	00000005 _ZL13pstrUsageBelt
040250d8 l     O .rodata	0000000a _ZL17pstrUsageBodySuit
04029fc8 l     O .rwdata	00000007 _ZL15pstrUsageFlexor
04029fd0 l     O .rwdata	00000006 _ZL14pstrUsageGlove
040250e4 l     O .rodata	0000000b _ZL20pstrUsageHeadTracker
040250f0 l     O .rodata	0000000a _ZL27pstrUsageHeadMountedDisplay
040250fc l     O .rodata	0000000b _ZL20pstrUsageHandTracker
04025108 l     O .rodata	0000000b _ZL19pstrUsageOculometer
04029fd8 l     O .rwdata	00000005 _ZL13pstrUsageVest
04025114 l     O .rodata	0000000b _ZL26pstrUsageAnimatronicDevice
04025120 l     O .rodata	0000000c _ZL21pstrUsageStereoEnable
0402512c l     O .rodata	0000000d _ZL22pstrUsageDisplayEnable
0402513c l     O .rodata	0000000d _ZL20pstrUsageBaseballBat
0402514c l     O .rodata	0000000a _ZL17pstrUsageGolfClub
04025158 l     O .rodata	0000000c _ZL22pstrUsageRowingMachine
04025164 l     O .rodata	0000000a _ZL18pstrUsageTreadmill
04029fe0 l     O .rwdata	00000004 _ZL12pstrUsageOar
04029fe4 l     O .rwdata	00000006 _ZL14pstrUsageSlope
04029fec l     O .rwdata	00000005 _ZL13pstrUsageRate
04025170 l     O .rodata	0000000c _ZL19pstrUsageStickSpeed
0402517c l     O .rodata	0000000f _ZL23pstrUsageStickFaceAngle
0402518c l     O .rodata	0000000f _ZL21pstrUsageStickHeelToe
0402519c l     O .rodata	0000000f _ZL26pstrUsageStickFollowThough
040251ac l     O .rodata	0000000c _ZL19pstrUsageStickTempo
040251b8 l     O .rodata	0000000b _ZL18pstrUsageStickType
040251c4 l     O .rodata	0000000b _ZL20pstrUsageStickHeight
04029ff4 l     O .rwdata	00000007 _ZL15pstrUsagePutter
04029ffc l     O .rwdata	00000007 _ZL14pstrUsage1Iron
0402a004 l     O .rwdata	00000007 _ZL14pstrUsage2Iron
0402a00c l     O .rwdata	00000007 _ZL14pstrUsage3Iron
0402a014 l     O .rwdata	00000007 _ZL14pstrUsage4Iron
0402a01c l     O .rwdata	00000007 _ZL14pstrUsage5Iron
0402a024 l     O .rwdata	00000007 _ZL14pstrUsage6Iron
0402a02c l     O .rwdata	00000007 _ZL14pstrUsage7Iron
0402a034 l     O .rwdata	00000007 _ZL14pstrUsage8Iron
0402a03c l     O .rwdata	00000007 _ZL14pstrUsage9Iron
0402a044 l     O .rwdata	00000008 _ZL15pstrUsage10Iron
0402a04c l     O .rwdata	00000008 _ZL15pstrUsage11Iron
040251d0 l     O .rodata	0000000b _ZL18pstrUsageSandWedge
040251dc l     O .rodata	0000000b _ZL18pstrUsageLoftWedge
040251e8 l     O .rodata	0000000a _ZL19pstrUsagePowerWedge
0402a054 l     O .rwdata	00000007 _ZL14pstrUsage1Wood
0402a05c l     O .rwdata	00000007 _ZL14pstrUsage3Wood
0402a064 l     O .rwdata	00000007 _ZL14pstrUsage5Wood
0402a06c l     O .rwdata	00000007 _ZL14pstrUsage7Wood
0402a074 l     O .rwdata	00000007 _ZL14pstrUsage9Wood
040251f4 l     O .rodata	0000000d _ZL25pstrUsage3DGameController
04025204 l     O .rodata	0000000c _ZL22pstrUsagePinballDevice
0402a07c l     O .rwdata	00000008 _ZL18pstrUsageGunDevice
0402a084 l     O .rwdata	00000004 _ZL20pstrUsagePointOfView
04025210 l     O .rodata	00000010 _ZL22pstrUsageTurnRightLeft
04025220 l     O .rodata	0000000f _ZL29pstrUsagePitchForwardBackward
04025230 l     O .rodata	00000010 _ZL22pstrUsageRollRightLeft
04025240 l     O .rodata	00000010 _ZL22pstrUsageMoveRightLeft
04025250 l     O .rodata	0000000e _ZL28pstrUsageMoveForwardBackward
04025260 l     O .rodata	0000000d _ZL19pstrUsageMoveUpDown
04025270 l     O .rodata	00000010 _ZL22pstrUsageLeanRightLeft
04025280 l     O .rodata	0000000e _ZL28pstrUsageLeanForwardBackward
04025290 l     O .rodata	0000000e _ZL20pstrUsageHeightOfPOV
0402a088 l     O .rwdata	00000008 _ZL16pstrUsageFlipper
040252a0 l     O .rodata	0000000f _ZL25pstrUsageSecondaryFlipper
0402a090 l     O .rwdata	00000005 _ZL13pstrUsageBump
040252b0 l     O .rodata	00000009 _ZL16pstrUsageNewGame
040252bc l     O .rodata	0000000b _ZL18pstrUsageShootBall
0402a098 l     O .rwdata	00000007 _ZL15pstrUsagePlayer
040252c8 l     O .rodata	00000009 _ZL16pstrUsageGunBolt
040252d4 l     O .rodata	00000009 _ZL16pstrUsageGunClip
0402a0a0 l     O .rwdata	00000008 _ZL20pstrUsageGunSelector
040252e0 l     O .rodata	0000000e _ZL22pstrUsageGunSingleShot
040252f0 l     O .rodata	0000000a _ZL17pstrUsageGunBurst
040252fc l     O .rodata	00000009 _ZL21pstrUsageGunAutomatic
04025308 l     O .rodata	0000000b _ZL18pstrUsageGunSafety
04025314 l     O .rodata	00000012 _ZL24pstrUsageGamepadFireJump
04025328 l     O .rodata	0000000d _ZL23pstrUsageGamepadTrigger
04025338 l     O .rodata	0000000d _ZL24pstrUsageBatteryStrength
04025348 l     O .rodata	0000000c _ZL24pstrUsageWirelessChannel
04025354 l     O .rodata	0000000c _ZL19pstrUsageWirelessID
04025360 l     O .rodata	00000017 _ZL32pstrUsageDiscoverWirelessControl
04025378 l     O .rodata	00000014 _ZL32pstrUsageSecurityCodeCharEntered
0402538c l     O .rodata	00000015 _ZL31pstrUsageSecurityCodeCharErased
040253a4 l     O .rodata	00000011 _ZL28pstrUsageSecurityCodeCleared
040253b8 l     O .rodata	00000009 _ZL16pstrUsageNumLock
040253c4 l     O .rodata	0000000a _ZL17pstrUsageCapsLock
040253d0 l     O .rodata	0000000c _ZL19pstrUsageScrollLock
0402a0a8 l     O .rwdata	00000008 _ZL16pstrUsageCompose
0402a0b0 l     O .rwdata	00000005 _ZL13pstrUsageKana
0402a0b8 l     O .rwdata	00000004 _ZL14pstrUsagePower
0402a0bc l     O .rwdata	00000006 _ZL14pstrUsageShift
0402a0c4 l     O .rwdata	00000004 _ZL21pstrUsageDoNotDisturb
0402a0c8 l     O .rwdata	00000005 _ZL13pstrUsageMute
040253dc l     O .rodata	0000000a _ZL19pstrUsageToneEnable
040253e8 l     O .rodata	0000000e _ZL22pstrUsageHighCutFilter
040253f8 l     O .rodata	0000000d _ZL21pstrUsageLowCutFilter
0402a0d0 l     O .rwdata	00000008 _ZL24pstrUsageEqualizerEnable
04025408 l     O .rodata	0000000f _ZL21pstrUsageSoundFieldOn
04025418 l     O .rodata	0000000c _ZL19pstrUsageSurroundOn
0402a0d8 l     O .rwdata	00000007 _ZL15pstrUsageRepeat
0402a0e0 l     O .rwdata	00000007 _ZL15pstrUsageStereo
04025424 l     O .rodata	00000011 _ZL27pstrUsageSamplingRateDetect
04025438 l     O .rodata	00000009 _ZL17pstrUsageSpinning
0402a0e8 l     O .rwdata	00000004 _ZL12pstrUsageCAV
0402a0ec l     O .rwdata	00000004 _ZL12pstrUsageCLV
04025444 l     O .rodata	00000012 _ZL30pstrUsageRecordingFormatDetect
04025458 l     O .rodata	00000009 _ZL16pstrUsageOffHook
0402a0f0 l     O .rwdata	00000005 _ZL13pstrUsageRing
04025464 l     O .rodata	00000009 _ZL23pstrUsageMessageWaiting
04025470 l     O .rodata	0000000a _ZL17pstrUsageDataMode
0402a0f8 l     O .rwdata	00000007 _ZL25pstrUsageBatteryOperation
0402a100 l     O .rwdata	00000007 _ZL18pstrUsageBatteryOK
0402a108 l     O .rwdata	00000008 _ZL19pstrUsageBatteryLow
0402a110 l     O .rwdata	00000008 _ZL16pstrUsageSpeaker
0402547c l     O .rodata	00000009 _ZL16pstrUsageHeadSet
0402a118 l     O .rwdata	00000005 _ZL13pstrUsageHold
0402a120 l     O .rwdata	00000004 _ZL19pstrUsageMicrophone
04025488 l     O .rodata	00000009 _ZL17pstrUsageCoverage
04025494 l     O .rodata	0000000b _ZL18pstrUsageNightMode
040254a0 l     O .rodata	0000000b _ZL18pstrUsageSendCalls
040254ac l     O .rodata	0000000c _ZL19pstrUsageCallPickup
0402a124 l     O .rwdata	00000005 _ZL19pstrUsageConference
040254b8 l     O .rodata	00000009 _ZL16pstrUsageStandBy
0402a12c l     O .rwdata	00000007 _ZL17pstrUsageCameraOn
0402a134 l     O .rwdata	00000008 _ZL18pstrUsageCameraOff
0402a13c l     O .rwdata	00000008 _ZL15pstrUsageOnLine
040254c4 l     O .rodata	00000009 _ZL16pstrUsageOffLine
0402a144 l     O .rwdata	00000005 _ZL13pstrUsageBusy
0402a14c l     O .rwdata	00000006 _ZL14pstrUsageReady
040254d0 l     O .rodata	0000000a _ZL17pstrUsagePaperOut
040254dc l     O .rodata	0000000a _ZL17pstrUsagePaperJam
0402a154 l     O .rwdata	00000007 _ZL15pstrUsageRemote
0402a15c l     O .rwdata	00000004 _ZL16pstrUsageForward
0402a160 l     O .rwdata	00000004 _ZL16pstrUsageReverse
0402a164 l     O .rwdata	00000005 _ZL13pstrUsageStop
0402a16c l     O .rwdata	00000007 _ZL15pstrUsageRewind
040254e8 l     O .rodata	00000009 _ZL20pstrUsageFastForward
0402a174 l     O .rwdata	00000005 _ZL13pstrUsagePlay
0402a17c l     O .rwdata	00000006 _ZL14pstrUsagePause
0402a184 l     O .rwdata	00000004 _ZL15pstrUsageRecord
0402a188 l     O .rwdata	00000006 _ZL14pstrUsageError
040254f4 l     O .rodata	0000000e _ZL26pstrUsageSelectedIndicator
04025504 l     O .rodata	00000011 _ZL23pstrUsageInUseIndicator
04025518 l     O .rodata	00000015 _ZL27pstrUsageMultiModeIndicator
0402a190 l     O .rwdata	00000007 _ZL20pstrUsageIndicatorOn
04025530 l     O .rodata	0000000a _ZL23pstrUsageIndicatorFlash
0402553c l     O .rodata	0000000d _ZL27pstrUsageIndicatorSlowBlink
0402554c l     O .rodata	0000000d _ZL27pstrUsageIndicatorFastBlink
0402a198 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorOff
0402555c l     O .rodata	0000000e _ZL20pstrUsageFlashOnTime
0402556c l     O .rodata	00000011 _ZL24pstrUsageSlowBlinkOnTime
04025580 l     O .rodata	00000012 _ZL25pstrUsageSlowBlinkOffTime
04025594 l     O .rodata	00000011 _ZL24pstrUsageFastBlinkOnTime
040255a8 l     O .rodata	00000012 _ZL25pstrUsageFastBlinkOffTime
040255bc l     O .rodata	00000010 _ZL23pstrUsageIndicatorColor
0402a1a0 l     O .rwdata	00000008 _ZL21pstrUsageIndicatorRed
040255cc l     O .rodata	0000000a _ZL23pstrUsageIndicatorGreen
040255d8 l     O .rodata	0000000a _ZL23pstrUsageIndicatorAmber
0402a1a8 l     O .rwdata	00000008 _ZL25pstrUsageGenericIndicator
040255e4 l     O .rodata	0000000c _ZL22pstrUsageSystemSuspend
040255f0 l     O .rodata	0000000d _ZL31pstrUsageExternalPowerConnected
0402a1b0 l     O .rwdata	00000006 _ZL14pstrUsagePhone
04025600 l     O .rodata	0000000a _ZL25pstrUsageAnsweringMachine
0402560c l     O .rodata	0000000a _ZL24pstrUsageMessageControls
0402a1b8 l     O .rwdata	00000008 _ZL16pstrUsageHandset
0402a1c0 l     O .rwdata	00000008 _ZL16pstrUsageHeadset
04025618 l     O .rodata	0000000c _ZL24pstrUsageTelephonyKeyPad
04025624 l     O .rodata	0000000c _ZL27pstrUsageProgrammableButton
0402a1c8 l     O .rwdata	00000008 _ZL19pstrUsageHookSwitch
0402a1d0 l     O .rwdata	00000006 _ZL14pstrUsageFlash
0402a1d8 l     O .rwdata	00000008 _ZL16pstrUsageFeature
0402a1e0 l     O .rwdata	00000007 _ZL15pstrUsageRedial
04025630 l     O .rodata	00000009 _ZL17pstrUsageTransfer
0402a1e8 l     O .rwdata	00000005 _ZL13pstrUsageDrop
0402a1f0 l     O .rwdata	00000005 _ZL13pstrUsagePark
0402563c l     O .rodata	0000000a _ZL21pstrUsageForwardCalls
04025648 l     O .rodata	00000009 _ZL26pstrUsageAlternateFunction
0402a1f8 l     O .rwdata	00000005 _ZL13pstrUsageLine
04025654 l     O .rodata	0000000a _ZL21pstrUsageSpeakerPhone
04025660 l     O .rodata	0000000a _ZL19pstrUsageRingEnable
0402566c l     O .rodata	00000009 _ZL19pstrUsageRingSelect
04025678 l     O .rodata	0000000b _ZL18pstrUsagePhoneMute
04025684 l     O .rodata	0000000a _ZL17pstrUsageCallerID
0402a200 l     O .rwdata	00000005 _ZL13pstrUsageSend
04025690 l     O .rodata	0000000b _ZL18pstrUsageSpeedDial
0402569c l     O .rodata	0000000a _ZL20pstrUsageStoreNumber
040256a8 l     O .rodata	0000000b _ZL21pstrUsageRecallNumber
040256b4 l     O .rodata	0000000a _ZL23pstrUsagePhoneDirectory
040256c0 l     O .rodata	0000000b _ZL18pstrUsageVoiceMail
040256cc l     O .rodata	0000000d _ZL20pstrUsageScreenCalls
0402a208 l     O .rwdata	00000004 _ZL16pstrUsageMessage
040256dc l     O .rodata	0000000e _ZL20pstrUsageAnswerOnOff
040256ec l     O .rodata	00000011 _ZL23pstrUsageInsideDialTone
04025700 l     O .rodata	00000012 _ZL24pstrUsageOutsideDialTone
04025714 l     O .rodata	00000011 _ZL23pstrUsageInsideRingTone
04025728 l     O .rodata	00000012 _ZL24pstrUsageOutsideRingTone
0402573c l     O .rodata	00000010 _ZL25pstrUsagePriorityRingTone
0402574c l     O .rodata	00000010 _ZL23pstrUsageInsideRingback
0402575c l     O .rodata	00000012 _ZL25pstrUsagePriorityRingback
04025770 l     O .rodata	0000000d _ZL21pstrUsageLineBusyTone
04025780 l     O .rodata	0000000d _ZL20pstrUsageReorderTone
04025790 l     O .rodata	0000000f _ZL24pstrUsageCallWaitingTone
040257a0 l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone1
040257ac l     O .rodata	0000000c _ZL26pstrUsageConfirmationTone2
040257b8 l     O .rodata	0000000a _ZL17pstrUsageTonesOff
040257c4 l     O .rodata	00000011 _ZL24pstrUsageOutsideRingback
0402a20c l     O .rwdata	00000007 _ZL15pstrUsageRinger
0402a214 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey0
0402a218 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey1
0402a21c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey2
0402a220 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey3
0402a224 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey4
0402a228 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey5
0402a22c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey6
0402a230 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey7
0402a234 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey8
0402a238 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKey9
0402a23c l     O .rwdata	00000002 _ZL21pstrUsagePhoneKeyStar
0402a240 l     O .rwdata	00000002 _ZL22pstrUsagePhoneKeyPound
0402a244 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyA
0402a248 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyB
0402a24c l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyC
0402a250 l     O .rwdata	00000002 _ZL18pstrUsagePhoneKeyD
040257d8 l     O .rodata	0000000e _ZL24pstrUsageConsumerControl
040257e8 l     O .rodata	0000000c _ZL22pstrUsageNumericKeyPad
040257f4 l     O .rodata	0000000a _ZL18pstrUsageHeadphone
04025800 l     O .rodata	00000009 _ZL25pstrUsageGraphicEqualizer
0402a254 l     O .rwdata	00000004 _ZL15pstrUsagePlus10
0402a258 l     O .rwdata	00000005 _ZL16pstrUsagePlus100
0402a260 l     O .rwdata	00000006 _ZL13pstrUsageAMPM
0402a268 l     O .rwdata	00000006 _ZL14pstrUsageReset
0402a270 l     O .rwdata	00000006 _ZL14pstrUsageSleep
0402580c l     O .rodata	0000000c _ZL19pstrUsageSleepAfter
04025818 l     O .rodata	0000000b _ZL18pstrUsageSleepMode
0402a278 l     O .rwdata	00000008 _ZL21pstrUsageIllumination
04025824 l     O .rodata	0000000a _ZL24pstrUsageFunctionButtons
0402a280 l     O .rwdata	00000005 _ZL13pstrUsageMenu
04025830 l     O .rodata	0000000a _ZL17pstrUsageMenuPick
0402a288 l     O .rwdata	00000008 _ZL15pstrUsageMenuUp
0402583c l     O .rodata	0000000a _ZL17pstrUsageMenuDown
04025848 l     O .rodata	0000000a _ZL17pstrUsageMenuLeft
04025854 l     O .rodata	0000000b _ZL18pstrUsageMenuRight
04025860 l     O .rodata	00000009 _ZL19pstrUsageMenuEscape
0402586c l     O .rodata	0000000d _ZL26pstrUsageMenuValueIncrease
0402587c l     O .rodata	0000000d _ZL26pstrUsageMenuValueDecrease
0402588c l     O .rodata	0000000c _ZL21pstrUsageDataOnScreen
04025898 l     O .rodata	0000000c _ZL22pstrUsageClosedCaption
040258a4 l     O .rodata	00000010 _ZL28pstrUsageClosedCaptionSelect
0402a290 l     O .rwdata	00000007 _ZL14pstrUsageVCRTV
040258b4 l     O .rodata	0000000d _ZL22pstrUsageBroadcastMode
040258c4 l     O .rodata	00000009 _ZL17pstrUsageSnapshot
0402a298 l     O .rwdata	00000006 _ZL14pstrUsageStill
0402a2a0 l     O .rwdata	00000004 _ZL18pstrUsageSelection
040258d0 l     O .rodata	0000000b _ZL24pstrUsageAssignSelection
040258dc l     O .rodata	0000000a _ZL17pstrUsageModeStep
040258e8 l     O .rodata	0000000c _ZL19pstrUsageRecallLast
040258f4 l     O .rodata	0000000d _ZL21pstrUsageEnterChannel
04025904 l     O .rodata	0000000a _ZL19pstrUsageOrderMovie
0402a2a4 l     O .rwdata	00000008 _ZL16pstrUsageChannel
0402a2ac l     O .rwdata	00000008 _ZL23pstrUsageMediaSelection
04025910 l     O .rodata	0000000d _ZL28pstrUsageMediaSelectComputer
04025920 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectTV
0402592c l     O .rodata	0000000c _ZL23pstrUsageMediaSelectWWW
04025938 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectDVD
04025944 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectTelephone
04025950 l     O .rodata	0000000b _ZL32pstrUsageMediaSelectProgramGuide
0402595c l     O .rodata	0000000c _ZL30pstrUsageMediaSelectVideoPhone
04025968 l     O .rodata	0000000e _ZL25pstrUsageMediaSelectGames
04025978 l     O .rodata	0000000c _ZL28pstrUsageMediaSelectMessages
04025984 l     O .rodata	0000000b _ZL22pstrUsageMediaSelectCD
04025990 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectVCR
0402599c l     O .rodata	0000000e _ZL25pstrUsageMediaSelectTuner
0402a2b4 l     O .rwdata	00000005 _ZL13pstrUsageQuit
0402a2bc l     O .rwdata	00000005 _ZL13pstrUsageHelp
040259ac l     O .rodata	0000000d _ZL24pstrUsageMediaSelectTape
040259bc l     O .rodata	0000000c _ZL25pstrUsageMediaSelectCable
040259c8 l     O .rodata	0000000c _ZL29pstrUsageMediaSelectSatellite
040259d4 l     O .rodata	0000000e _ZL28pstrUsageMediaSelectSecurity
040259e4 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectHome
040259f4 l     O .rodata	0000000d _ZL24pstrUsageMediaSelectCall
0402a2c4 l     O .rwdata	00000007 _ZL25pstrUsageChannelIncrement
0402a2cc l     O .rwdata	00000007 _ZL25pstrUsageChannelDecrement
04025a04 l     O .rodata	0000000c _ZL23pstrUsageMediaSelectSAP
0402a2d4 l     O .rwdata	00000005 _ZL16pstrUsageVCRPlus
0402a2dc l     O .rwdata	00000005 _ZL13pstrUsageOnce
0402a2e4 l     O .rwdata	00000006 _ZL14pstrUsageDaily
0402a2ec l     O .rwdata	00000007 _ZL15pstrUsageWeekly
0402a2f4 l     O .rwdata	00000008 _ZL16pstrUsageMonthly
04025a10 l     O .rodata	0000000b _ZL22pstrUsageScanNextTrack
04025a1c l     O .rodata	0000000b _ZL26pstrUsageScanPreviousTrack
0402a2fc l     O .rwdata	00000006 _ZL14pstrUsageEject
0402a304 l     O .rwdata	00000007 _ZL19pstrUsageRandomPlay
04025a28 l     O .rodata	00000009 _ZL19pstrUsageSelectDisk
04025a34 l     O .rodata	00000009 _ZL18pstrUsageEnterDisk
04025a40 l     O .rodata	00000009 _ZL17pstrUsageTracking
04025a4c l     O .rodata	00000009 _ZL20pstrUsageTrackNormal
04025a58 l     O .rodata	00000009 _ZL21pstrUsageSlowTracking
0402a30c l     O .rwdata	00000008 _ZL21pstrUsageFrameForward
04025a64 l     O .rodata	00000009 _ZL23pstrUsageFrameBackwards
0402a314 l     O .rwdata	00000005 _ZL13pstrUsageMark
04025a70 l     O .rodata	00000009 _ZL18pstrUsageClearMark
04025a7c l     O .rodata	00000009 _ZL23pstrUsageRepeatFromMark
04025a88 l     O .rodata	0000000c _ZL21pstrUsageReturnToMark
04025a94 l     O .rodata	00000010 _ZL26pstrUsageSearchMarkForward
04025aa4 l     O .rodata	00000011 _ZL28pstrUsageSearchMarkBackwards
04025ab8 l     O .rodata	0000000e _ZL21pstrUsageCounterReset
04025ac8 l     O .rodata	0000000d _ZL20pstrUsageShowCounter
04025ad8 l     O .rodata	0000000a _ZL26pstrUsageTrackingIncrement
04025ae4 l     O .rodata	0000000a _ZL26pstrUsageTrackingDecrement
04025af0 l     O .rodata	0000000b _ZL18pstrUsageStopEject
04025afc l     O .rodata	0000000b _ZL18pstrUsagePlayPause
04025b08 l     O .rodata	0000000a _ZL17pstrUsagePlaySkip
0402a31c l     O .rwdata	00000004 _ZL15pstrUsageVolume
0402a320 l     O .rwdata	00000008 _ZL16pstrUsageBalance
0402a328 l     O .rwdata	00000005 _ZL13pstrUsageBass
0402a330 l     O .rwdata	00000007 _ZL15pstrUsageTreble
04025b14 l     O .rodata	0000000b _ZL18pstrUsageBassBoost
04025b20 l     O .rodata	00000009 _ZL21pstrUsageSurroundMode
0402a338 l     O .rwdata	00000005 _ZL17pstrUsageLoudness
0402a340 l     O .rwdata	00000004 _ZL12pstrUsageMPX
0402a344 l     O .rwdata	00000008 _ZL24pstrUsageVolumeIncrement
0402a34c l     O .rwdata	00000008 _ZL24pstrUsageVolumeDecrement
0402a354 l     O .rwdata	00000006 _ZL20pstrUsageSpeedSelect
04025b2c l     O .rodata	0000000b _ZL22pstrUsagePlaybackSpeed
04025b38 l     O .rodata	00000009 _ZL21pstrUsageStandardPlay
04025b44 l     O .rodata	0000000a _ZL17pstrUsageLongPlay
04025b50 l     O .rodata	00000009 _ZL21pstrUsageExtendedPlay
0402a35c l     O .rwdata	00000005 _ZL13pstrUsageSlow
04025b5c l     O .rodata	00000009 _ZL18pstrUsageFanEnable
04025b68 l     O .rodata	0000000a _ZL17pstrUsageFanSpeed
04025b74 l     O .rodata	0000000b _ZL20pstrUsageLightEnable
04025b80 l     O .rodata	00000010 _ZL31pstrUsageLightIlluminationLevel
04025b90 l     O .rodata	0000000d _ZL29pstrUsageClimateControlEnable
04025ba0 l     O .rodata	0000000a _ZL24pstrUsageRoomTemperature
04025bac l     O .rodata	0000000b _ZL23pstrUsageSecurityEnable
04025bb8 l     O .rodata	00000009 _ZL18pstrUsageFireAlarm
04025bc4 l     O .rodata	0000000b _ZL20pstrUsagePoliceAlarm
0402a364 l     O .rwdata	00000005 _ZL18pstrUsageProximity
0402a36c l     O .rwdata	00000007 _ZL15pstrUsageMotion
04025bd0 l     O .rodata	0000000a _ZL19pstrUsageDuresAlarm
04025bdc l     O .rodata	0000000b _ZL20pstrUsageHoldupAlarm
0402a374 l     O .rwdata	00000008 _ZL21pstrUsageMedicalAlarm
04025be8 l     O .rodata	0000000e _ZL21pstrUsageBalanceRight
04025bf8 l     O .rodata	0000000d _ZL20pstrUsageBalanceLeft
04025c08 l     O .rodata	00000009 _ZL22pstrUsageBassIncrement
04025c14 l     O .rodata	00000009 _ZL22pstrUsageBassDecrement
04025c20 l     O .rodata	0000000b _ZL24pstrUsageTrebleIncrement
04025c2c l     O .rodata	0000000b _ZL24pstrUsageTrebleDecrement
0402a37c l     O .rwdata	00000008 _ZL22pstrUsageSpeakerSystem
0402a384 l     O .rwdata	00000008 _ZL20pstrUsageChannelLeft
04025c38 l     O .rodata	00000009 _ZL21pstrUsageChannelRight
04025c44 l     O .rodata	0000000a _ZL22pstrUsageChannelCenter
04025c50 l     O .rodata	00000009 _ZL21pstrUsageChannelFront
04025c5c l     O .rodata	0000000e _ZL27pstrUsageChannelCenterFront
0402a38c l     O .rwdata	00000008 _ZL20pstrUsageChannelSide
04025c6c l     O .rodata	0000000c _ZL24pstrUsageChannelSurround
04025c78 l     O .rodata	00000010 _ZL34pstrUsageChannelLowFreqEnhancement
0402a394 l     O .rwdata	00000007 _ZL19pstrUsageChannelTop
0402a39c l     O .rwdata	00000007 _ZL23pstrUsageChannelUnknown
0402a3a4 l     O .rwdata	00000007 _ZL19pstrUsageSubChannel
04025c88 l     O .rodata	0000000b _ZL28pstrUsageSubChannelIncrement
04025c94 l     O .rodata	0000000b _ZL28pstrUsageSubChannelDecrement
04025ca0 l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioIncrement
04025cac l     O .rodata	0000000c _ZL32pstrUsageAlternateAudioDecrement
04025cb8 l     O .rodata	00000010 _ZL33pstrUsageApplicationLaunchButtons
04025cc8 l     O .rodata	00000012 _ZL33pstrUsageALLaunchButtonConfigTool
04025cdc l     O .rodata	0000000b _ZL29pstrUsageALProgrammableButton
04025ce8 l     O .rodata	00000011 _ZL32pstrUsageALConsumerControlConfig
04025cfc l     O .rodata	0000000d _ZL24pstrUsageALWordProcessor
04025d0c l     O .rodata	0000000c _ZL21pstrUsageALTextEditor
04025d18 l     O .rodata	0000000d _ZL22pstrUsageALSpreadsheet
04025d28 l     O .rodata	0000000e _ZL25pstrUsageALGraphicsEditor
04025d38 l     O .rodata	0000000f _ZL26pstrUsageALPresentationApp
04025d48 l     O .rodata	0000000a _ZL22pstrUsageALDatabaseApp
04025d54 l     O .rodata	0000000e _ZL22pstrUsageALEmailReader
04025d64 l     O .rodata	0000000b _ZL21pstrUsageALNewsreader
04025d70 l     O .rodata	0000000d _ZL20pstrUsageALVoicemail
04025d80 l     O .rodata	0000000d _ZL30pstrUsageALContactsAddressBook
04025d90 l     O .rodata	00000010 _ZL27pstrUsageALCalendarSchedule
04025da0 l     O .rodata	00000010 _ZL29pstrUsageALTaskProjectManager
04025db0 l     O .rodata	00000012 _ZL29pstrUsageALLogJournalTimecard
04025dc4 l     O .rodata	00000010 _ZL27pstrUsageALCheckbookFinance
0402a3ac l     O .rwdata	00000008 _ZL21pstrUsageALCalculator
04025dd4 l     O .rodata	00000011 _ZL28pstrUsageALAVCapturePlayback
04025de8 l     O .rodata	00000011 _ZL30pstrUsageALLocalMachineBrowser
04025dfc l     O .rodata	00000010 _ZL21pstrUsageALLANWANBrow
04025e0c l     O .rodata	0000000e _ZL26pstrUsageALInternetBrowser
04025e1c l     O .rodata	0000000f _ZL30pstrUsageALRemoteNetISPConnect
04025e2c l     O .rodata	0000000c _ZL28pstrUsageALNetworkConference
04025e38 l     O .rodata	0000000c _ZL22pstrUsageALNetworkChat
04025e44 l     O .rodata	0000000c _ZL26pstrUsageALTelephonyDialer
04025e50 l     O .rodata	00000009 _ZL16pstrUsageALLogon
04025e5c l     O .rodata	0000000a _ZL17pstrUsageALLogoff
04025e68 l     O .rodata	00000010 _ZL22pstrUsageALLogonLogoff
04025e78 l     O .rodata	00000015 _ZL25pstrUsageALTermLockScrSav
04025e90 l     O .rodata	0000000c _ZL24pstrUsageALControlPannel
04025e9c l     O .rodata	0000000b _ZL34pstrUsageALCommandLineProcessorRun
04025ea8 l     O .rodata	0000000c _ZL29pstrUsageALProcessTaskManager
04025eb4 l     O .rodata	0000000b _ZL32pstrUsageALSelectTaskApplication
04025ec0 l     O .rodata	0000000c _ZL30pstrUsageALNextTaskApplication
04025ecc l     O .rodata	0000000c _ZL34pstrUsageALPreviousTaskApplication
04025ed8 l     O .rodata	00000012 _ZL32pstrUsageALPreemptiveHaltTaskApp
04025eec l     O .rodata	0000000c _ZL31pstrUsageALIntegratedHelpCenter
0402a3b4 l     O .rwdata	00000008 _ZL20pstrUsageALDocuments
04025ef8 l     O .rodata	00000009 _ZL20pstrUsageALThesaurus
0402a3bc l     O .rwdata	00000008 _ZL21pstrUsageALDictionary
04025f04 l     O .rodata	0000000b _ZL18pstrUsageALDesktop
04025f10 l     O .rodata	0000000d _ZL21pstrUsageALSpellCheck
04025f20 l     O .rodata	0000000c _ZL23pstrUsageALGrammarCheck
04025f2c l     O .rodata	00000010 _ZL25pstrUsageALWirelessStatus
04025f3c l     O .rodata	0000000e _ZL25pstrUsageALKeyboardLayout
04025f4c l     O .rodata	0000000f _ZL26pstrUsageALVirusProtection
04025f5c l     O .rodata	0000000b _ZL21pstrUsageALEncryption
04025f68 l     O .rodata	0000000b _ZL22pstrUsageALScreenSaver
04025f74 l     O .rodata	0000000a _ZL17pstrUsageALAlarms
04025f80 l     O .rodata	00000009 _ZL16pstrUsageALClock
04025f8c l     O .rodata	0000000d _ZL22pstrUsageALFileBrowser
04025f9c l     O .rodata	0000000b _ZL22pstrUsageALPowerStatus
04025fa8 l     O .rodata	0000000c _ZL23pstrUsageALImageBrowser
04025fb4 l     O .rodata	0000000c _ZL23pstrUsageALAudioBrowser
04025fc0 l     O .rodata	0000000c _ZL23pstrUsageALMovieBrowser
04025fcc l     O .rodata	00000012 _ZL31pstrUsageALDigitalRightsManager
04025fe0 l     O .rodata	0000000e _ZL24pstrUsageALDigitalWallet
04025ff0 l     O .rodata	0000000c _ZL27pstrUsageALInstantMessaging
04025ffc l     O .rodata	00000011 _ZL29pstrUsageALOEMFeaturesBrowser
04026010 l     O .rodata	0000000b _ZL18pstrUsageALOEMHelp
0402601c l     O .rodata	0000000e _ZL26pstrUsageALOnlineCommunity
0402602c l     O .rodata	00000011 _ZL35pstrUsageALEntertainmentContentBrow
04026040 l     O .rodata	00000014 _ZL32pstrUsageALOnlineShoppingBrowser
04026054 l     O .rodata	00000011 _ZL28pstrUsageALSmartCardInfoHelp
04026068 l     O .rodata	0000000f _ZL34pstrUsageALMarketMonitorFinBrowser
04026078 l     O .rodata	00000017 _ZL32pstrUsageALCustomCorpNewsBrowser
04026090 l     O .rodata	00000013 _ZL32pstrUsageALOnlineActivityBrowser
040260a4 l     O .rodata	0000000f _ZL32pstrUsageALResearchSearchBrowser
040260b4 l     O .rodata	0000000e _ZL22pstrUsageALAudioPlayer
040260c4 l     O .rodata	00000011 _ZL30pstrUsageGenericGUIAppControls
0402a3c4 l     O .rwdata	00000007 _ZL14pstrUsageACNew
0402a3cc l     O .rwdata	00000008 _ZL15pstrUsageACOpen
040260d8 l     O .rodata	00000009 _ZL16pstrUsageACClose
0402a3d4 l     O .rwdata	00000008 _ZL15pstrUsageACExit
0402a3dc l     O .rwdata	00000007 _ZL19pstrUsageACMaximize
0402a3e4 l     O .rwdata	00000007 _ZL19pstrUsageACMinimize
0402a3ec l     O .rwdata	00000008 _ZL15pstrUsageACSave
040260e4 l     O .rodata	00000009 _ZL16pstrUsageACPrint
0402a3f4 l     O .rwdata	00000008 _ZL21pstrUsageACProperties
0402a3fc l     O .rwdata	00000008 _ZL15pstrUsageACUndo
0402a404 l     O .rwdata	00000008 _ZL15pstrUsageACCopy
0402a40c l     O .rwdata	00000007 _ZL14pstrUsageACCut
040260f0 l     O .rodata	00000009 _ZL16pstrUsageACPaste
040260fc l     O .rodata	0000000b _ZL20pstrUsageACSelectAll
0402a414 l     O .rwdata	00000008 _ZL15pstrUsageACFind
04026108 l     O .rodata	00000010 _ZL25pstrUsageACFindAndReplace
04026118 l     O .rodata	0000000a _ZL17pstrUsageACSearch
0402a41c l     O .rwdata	00000008 _ZL15pstrUsageACGoto
0402a424 l     O .rwdata	00000008 _ZL15pstrUsageACHome
0402a42c l     O .rwdata	00000008 _ZL15pstrUsageACBack
0402a434 l     O .rwdata	00000007 _ZL18pstrUsageACForward
0402a43c l     O .rwdata	00000008 _ZL15pstrUsageACStop
04026124 l     O .rodata	0000000b _ZL18pstrUsageACRefresh
04026130 l     O .rodata	0000000d _ZL23pstrUsageACPreviousLink
04026140 l     O .rodata	0000000d _ZL19pstrUsageACNextLink
04026150 l     O .rodata	0000000b _ZL20pstrUsageACBookmarks
0402a444 l     O .rwdata	00000008 _ZL18pstrUsageACHistory
0402615c l     O .rodata	0000000a _ZL24pstrUsageACSubscriptions
04026168 l     O .rodata	0000000b _ZL17pstrUsageACZoomIn
04026174 l     O .rodata	0000000c _ZL18pstrUsageACZoomOut
0402a44c l     O .rwdata	00000008 _ZL15pstrUsageACZoom
04026180 l     O .rodata	0000000c _ZL25pstrUsageACFullScreenView
0402618c l     O .rodata	0000000d _ZL21pstrUsageACNormalView
0402619c l     O .rodata	0000000c _ZL21pstrUsageACViewToggle
040261a8 l     O .rodata	0000000d _ZL19pstrUsageACScrollUp
040261b8 l     O .rodata	0000000f _ZL21pstrUsageACScrollDown
040261c8 l     O .rodata	0000000a _ZL17pstrUsageACScroll
040261d4 l     O .rodata	0000000c _ZL18pstrUsageACPanLeft
040261e0 l     O .rodata	0000000d _ZL19pstrUsageACPanRight
0402a454 l     O .rwdata	00000007 _ZL14pstrUsageACPan
040261f0 l     O .rodata	0000000b _ZL20pstrUsageACNewWindow
040261fc l     O .rodata	0000000e _ZL20pstrUsageACTileHoriz
0402620c l     O .rodata	0000000d _ZL19pstrUsageACTileVert
0402a45c l     O .rwdata	00000008 _ZL17pstrUsageACFormat
0402a464 l     O .rwdata	00000008 _ZL15pstrUsageACEdit
0402a46c l     O .rwdata	00000008 _ZL15pstrUsageACBold
0402a474 l     O .rwdata	00000008 _ZL18pstrUsageACItalics
0402621c l     O .rodata	00000009 _ZL20pstrUsageACUnderline
04026228 l     O .rodata	0000000a _ZL24pstrUsageACStrikethrough
0402a47c l     O .rwdata	00000007 _ZL20pstrUsageACSubscript
04026234 l     O .rodata	00000009 _ZL22pstrUsageACSuperscript
04026240 l     O .rodata	0000000c _ZL18pstrUsageACAllCaps
0402624c l     O .rodata	0000000a _ZL17pstrUsageACRotate
04026258 l     O .rodata	0000000a _ZL17pstrUsageACResize
04026264 l     O .rodata	00000009 _ZL25pstrUsageACFlipHorizontal
04026270 l     O .rodata	00000009 _ZL23pstrUsageACFlipVertical
0402627c l     O .rodata	00000009 _ZL27pstrUsageACMirrorHorizontal
04026288 l     O .rodata	00000009 _ZL25pstrUsageACMirrorVertical
04026294 l     O .rodata	0000000b _ZL21pstrUsageACFontSelect
040262a0 l     O .rodata	0000000b _ZL20pstrUsageACFontColor
040262ac l     O .rodata	0000000c _ZL19pstrUsageACFontSize
040262b8 l     O .rodata	0000000d _ZL22pstrUsageACJustifyLeft
040262c8 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterH
040262d8 l     O .rodata	0000000e _ZL23pstrUsageACJustifyRight
040262e8 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockH
040262f8 l     O .rodata	0000000c _ZL21pstrUsageACJustifyTop
04026304 l     O .rodata	0000000f _ZL25pstrUsageACJustifyCenterV
04026314 l     O .rodata	0000000c _ZL24pstrUsageACJustifyBottom
04026320 l     O .rodata	00000010 _ZL24pstrUsageACJustifyBlockV
04026330 l     O .rodata	0000000e _ZL25pstrUsageACIndentDecrease
04026340 l     O .rodata	0000000e _ZL25pstrUsageACIndentIncrease
04026350 l     O .rodata	0000000c _ZL23pstrUsageACNumberedList
0402635c l     O .rodata	0000000b _ZL27pstrUsageACRestartNumbering
04026368 l     O .rodata	0000000c _ZL23pstrUsageACBulletedList
04026374 l     O .rodata	0000000b _ZL18pstrUsageACPromote
04026380 l     O .rodata	0000000a _ZL17pstrUsageACDemote
0402a484 l     O .rwdata	00000007 _ZL14pstrUsageACYes
0402a48c l     O .rwdata	00000006 _ZL13pstrUsageACNo
0402638c l     O .rodata	0000000a _ZL17pstrUsageACCancel
0402a494 l     O .rwdata	00000008 _ZL18pstrUsageACCatalog
0402a49c l     O .rwdata	00000007 _ZL20pstrUsageACBuyChkout
04026398 l     O .rodata	0000000c _ZL20pstrUsageACAddToCart
0402a4a4 l     O .rwdata	00000008 _ZL17pstrUsageACExpand
040263a4 l     O .rodata	0000000d _ZL20pstrUsageACExpandAll
040263b4 l     O .rodata	0000000c _ZL19pstrUsageACCollapse
040263c0 l     O .rodata	00000010 _ZL22pstrUsageACCollapseAll
040263d0 l     O .rodata	0000000d _ZL23pstrUsageACPrintPreview
040263e0 l     O .rodata	0000000e _ZL23pstrUsageACPasteSpecial
040263f0 l     O .rodata	0000000c _ZL21pstrUsageACInsertMode
0402a4ac l     O .rwdata	00000007 _ZL17pstrUsageACDelete
0402a4b4 l     O .rwdata	00000008 _ZL15pstrUsageACLock
040263fc l     O .rodata	0000000a _ZL17pstrUsageACUnlock
0402a4bc l     O .rwdata	00000008 _ZL18pstrUsageACProtect
04026408 l     O .rodata	0000000a _ZL20pstrUsageACUnprotect
04026414 l     O .rodata	0000000f _ZL24pstrUsageACAttachComment
04026424 l     O .rodata	0000000c _ZL24pstrUsageACDeleteComment
04026430 l     O .rodata	0000000d _ZL22pstrUsageACViewComment
04026440 l     O .rodata	0000000c _ZL21pstrUsageACSelectWord
0402644c l     O .rodata	0000000c _ZL25pstrUsageACSelectSentence
04026458 l     O .rodata	0000000c _ZL26pstrUsageACSelectParagraph
04026464 l     O .rodata	0000000b _ZL23pstrUsageACSelectColumn
04026470 l     O .rodata	0000000b _ZL20pstrUsageACSelectRow
0402647c l     O .rodata	0000000b _ZL22pstrUsageACSelectTable
04026488 l     O .rodata	0000000b _ZL23pstrUsageACSelectObject
0402a4c4 l     O .rwdata	00000008 _ZL21pstrUsageACRedoRepeat
0402a4cc l     O .rwdata	00000008 _ZL15pstrUsageACSort
04026494 l     O .rodata	0000000c _ZL24pstrUsageACSortAscending
040264a0 l     O .rodata	0000000d _ZL25pstrUsageACSortDescending
0402a4d4 l     O .rwdata	00000008 _ZL17pstrUsageACFilter
040264b0 l     O .rodata	0000000b _ZL19pstrUsageACSetClock
040264bc l     O .rodata	0000000c _ZL20pstrUsageACViewClock
040264c8 l     O .rodata	0000000e _ZL25pstrUsageACSelectTimeZone
040264d8 l     O .rodata	0000000e _ZL23pstrUsageACEditTimeZone
040264e8 l     O .rodata	0000000b _ZL19pstrUsageACSetAlarm
040264f4 l     O .rodata	0000000b _ZL21pstrUsageACClearAlarm
04026500 l     O .rodata	0000000b _ZL22pstrUsageACSnoozeAlarm
0402650c l     O .rodata	0000000b _ZL21pstrUsageACResetAlarm
0402a4dc l     O .rwdata	00000008 _ZL21pstrUsageACSyncronize
04026518 l     O .rodata	0000000b _ZL22pstrUsageACSendReceive
04026524 l     O .rodata	0000000a _ZL17pstrUsageACSendTo
04026530 l     O .rodata	00000009 _ZL16pstrUsageACReply
0402653c l     O .rodata	0000000d _ZL19pstrUsageACReplyAll
0402654c l     O .rodata	0000000b _ZL25pstrUsageACForwardMessage
0402a4e4 l     O .rwdata	00000007 _ZL15pstrUsageACSend
04026558 l     O .rodata	0000000c _ZL21pstrUsageACAttachFile
0402a4ec l     O .rwdata	00000008 _ZL17pstrUsageACUpload
0402a4f4 l     O .rwdata	00000008 _ZL19pstrUsageACDownload
04026564 l     O .rodata	0000000b _ZL21pstrUsageACSetBorders
04026570 l     O .rodata	0000000b _ZL20pstrUsageACInsertRow
0402657c l     O .rodata	0000000b _ZL23pstrUsageACInsertColumn
04026588 l     O .rodata	0000000c _ZL21pstrUsageACInsertFile
04026594 l     O .rodata	0000000b _ZL24pstrUsageACInsertPicture
040265a0 l     O .rodata	0000000b _ZL23pstrUsageACInsertObject
040265ac l     O .rodata	0000000b _ZL23pstrUsageACInsertSymbol
040265b8 l     O .rodata	0000000b _ZL23pstrUsageACSaveAndClose
040265c4 l     O .rodata	0000000a _ZL17pstrUsageACRename
040265d0 l     O .rodata	00000009 _ZL16pstrUsageACMerge
040265dc l     O .rodata	00000009 _ZL16pstrUsageACSplit
040265e8 l     O .rodata	0000000c _ZL32pstrUsageACDistributeHorizontaly
040265f4 l     O .rodata	0000000c _ZL30pstrUsageACDistributeVerticaly
04026600 l     O .rodata	0000000a _ZL18pstrUsageDigitizer
0402a4fc l     O .rwdata	00000004 _ZL12pstrUsagePen
0402660c l     O .rodata	0000000a _ZL17pstrUsageLightPen
04026618 l     O .rodata	0000000a _ZL20pstrUsageTouchScreen
04026624 l     O .rodata	0000000a _ZL17pstrUsageTouchPad
04026630 l     O .rodata	0000000a _ZL19pstrUsageWhiteBoard
0402663c l     O .rodata	00000010 _ZL35pstrUsageCoordinateMeasuringMachine
0402a500 l     O .rwdata	00000008 _ZL20pstrUsage3DDigitizer
0402664c l     O .rodata	0000000c _ZL22pstrUsageStereoPlotter
0402a508 l     O .rwdata	00000008 _ZL23pstrUsageArticulatedArm
04026658 l     O .rodata	00000009 _ZL17pstrUsageArmature
04026664 l     O .rodata	00000011 _ZL31pstrUsageMultiplePointDigitizer
04026678 l     O .rodata	00000010 _ZL22pstrUsageFreeSpaceWand
0402a510 l     O .rwdata	00000007 _ZL15pstrUsageStylus
0402a518 l     O .rwdata	00000005 _ZL13pstrUsagePuck
0402a520 l     O .rwdata	00000007 _ZL15pstrUsageFinger
04026688 l     O .rodata	0000000a _ZL20pstrUsageTipPressure
04026694 l     O .rodata	0000000a _ZL23pstrUsageBarrelPressure
040266a0 l     O .rodata	00000009 _ZL16pstrUsageInRange
0402a528 l     O .rwdata	00000006 _ZL14pstrUsageTouch
0402a530 l     O .rwdata	00000008 _ZL16pstrUsageUntouch
0402a538 l     O .rwdata	00000004 _ZL12pstrUsageTap
0402a53c l     O .rwdata	00000005 _ZL16pstrUsageQuality
040266ac l     O .rodata	0000000b _ZL18pstrUsageDataValid
040266b8 l     O .rodata	0000000f _ZL24pstrUsageTransducerIndex
040266c8 l     O .rodata	0000000f _ZL27pstrUsageTabletFunctionKeys
040266d8 l     O .rodata	0000000e _ZL26pstrUsageProgramChangeKeys
0402a544 l     O .rwdata	00000007 _ZL15pstrUsageInvert
0402a54c l     O .rwdata	00000007 _ZL14pstrUsageXTilt
0402a554 l     O .rwdata	00000007 _ZL14pstrUsageYTilt
0402a55c l     O .rwdata	00000008 _ZL16pstrUsageAzimuth
040266e8 l     O .rodata	00000009 _ZL17pstrUsageAltitude
0402a564 l     O .rwdata	00000006 _ZL14pstrUsageTwist
0402a56c l     O .rwdata	00000007 _ZL18pstrUsageTipSwitch
040266f4 l     O .rodata	0000000c _ZL27pstrUsageSecondaryTipSwitch
0402a574 l     O .rwdata	00000007 _ZL21pstrUsageBarrelSwitch
0402a57c l     O .rwdata	00000007 _ZL15pstrUsageEraser
04026700 l     O .rodata	00000009 _ZL19pstrUsageTabletPick
0402670c l     O .rodata	0000000e _ZL28pstrUsageAlphanumericDisplay
0402671c l     O .rodata	00000009 _ZL25pstrUsageBitmappedDisplay
04026728 l     O .rodata	0000000e _ZL32pstrUsageDisplayAttributesReport
04026738 l     O .rodata	0000000c _ZL26pstrUsageASCIICharacterSet
04026744 l     O .rodata	0000000d _ZL21pstrUsageDataReadBack
04026754 l     O .rodata	0000000c _ZL21pstrUsageFontReadBack
04026760 l     O .rodata	0000000e _ZL29pstrUsageDisplayControlReport
04026770 l     O .rodata	00000009 _ZL21pstrUsageClearDisplay
0402677c l     O .rodata	0000000e _ZL25pstrUsageScreenSaverDelay
0402678c l     O .rodata	0000000d _ZL26pstrUsageScreenSaverEnable
0402679c l     O .rodata	00000009 _ZL23pstrUsageVerticalScroll
040267a8 l     O .rodata	00000009 _ZL25pstrUsageHorizontalScroll
040267b4 l     O .rodata	00000009 _ZL24pstrUsageCharacterReport
040267c0 l     O .rodata	0000000a _ZL20pstrUsageDisplayData
040267cc l     O .rodata	0000000a _ZL22pstrUsageDisplayStatus
040267d8 l     O .rodata	0000000c _ZL23pstrUsageStatusNotReady
040267e4 l     O .rodata	0000000b _ZL20pstrUsageStatusReady
040267f0 l     O .rodata	00000010 _ZL35pstrUsageErrorNotALoadableCharacter
04026800 l     O .rodata	00000010 _ZL33pstrUsageErrorFotDataCanNotBeRead
04026810 l     O .rodata	0000000c _ZL29pstrUsageCursorPositionReport
0402a584 l     O .rwdata	00000004 _ZL12pstrUsageRow
0402a588 l     O .rwdata	00000004 _ZL15pstrUsageColumn
0402a58c l     O .rwdata	00000005 _ZL13pstrUsageRows
0402a594 l     O .rwdata	00000005 _ZL16pstrUsageColumns
0402681c l     O .rodata	0000000c _ZL28pstrUsageCursorPixelPosition
04026828 l     O .rodata	00000009 _ZL19pstrUsageCursorMode
04026834 l     O .rodata	00000009 _ZL21pstrUsageCursorEnable
04026840 l     O .rodata	00000009 _ZL20pstrUsageCursorBlink
0402a59c l     O .rwdata	00000008 _ZL19pstrUsageFontReport
0402684c l     O .rodata	00000009 _ZL17pstrUsageFontData
04026858 l     O .rodata	0000000a _ZL23pstrUsageCharacterWidth
04026864 l     O .rodata	0000000a _ZL24pstrUsageCharacterHeight
04026870 l     O .rodata	0000000d _ZL35pstrUsageCharacterSpacingHorizontal
04026880 l     O .rodata	0000000d _ZL33pstrUsageCharacterSpacingVertical
04026890 l     O .rodata	0000000d _ZL23pstrUsageUnicodeCharset
040268a0 l     O .rodata	0000000a _ZL21pstrUsageFont7Segment
040268ac l     O .rodata	0000000a _ZL26pstrUsage7SegmentDirectMap
040268b8 l     O .rodata	0000000b _ZL22pstrUsageFont14Segment
040268c4 l     O .rodata	0000000b _ZL27pstrUsage14SegmentDirectMap
040268d0 l     O .rodata	0000000c _ZL26pstrUsageDisplayBrightness
040268dc l     O .rodata	0000000c _ZL24pstrUsageDisplayContrast
040268e8 l     O .rodata	0000000a _ZL27pstrUsageCharacterAttribute
040268f4 l     O .rodata	0000000c _ZL26pstrUsageAttributeReadback
04026900 l     O .rodata	0000000a _ZL22pstrUsageAttributeData
0402690c l     O .rodata	0000000e _ZL29pstrUsageCharAttributeEnhance
0402691c l     O .rodata	0000000f _ZL31pstrUsageCharAttributeUnderline
0402692c l     O .rodata	0000000f _ZL27pstrUsageCharAttributeBlink
0402693c l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeX
04026948 l     O .rodata	0000000b _ZL20pstrUsageBitmapSizeY
04026954 l     O .rodata	0000000d _ZL23pstrUsageBitDepthFormat
04026964 l     O .rodata	0000000a _ZL27pstrUsageDisplayOrientation
0402a5a4 l     O .rwdata	00000008 _ZL22pstrUsagePaletteReport
04026970 l     O .rodata	0000000e _ZL24pstrUsagePaletteDataSize
04026980 l     O .rodata	0000000d _ZL26pstrUsagePaletteDataOffset
04026990 l     O .rodata	00000009 _ZL20pstrUsagePaletteData
0402699c l     O .rodata	00000009 _ZL19pstrUsageBlitReport
040269a8 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX1
040269b8 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY1
040269c8 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleX2
040269d8 l     O .rodata	0000000d _ZL24pstrUsageBlitRectangleY2
040269e8 l     O .rodata	0000000a _ZL17pstrUsageBlitData
040269f4 l     O .rodata	00000009 _ZL19pstrUsageSoftButton
04026a00 l     O .rodata	0000000c _ZL21pstrUsageSoftButtonID
04026a0c l     O .rodata	0000000e _ZL23pstrUsageSoftButtonSide
04026a1c l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset1
04026a2c l     O .rodata	0000000e _ZL26pstrUsageSoftButtonOffset2
04026a3c l     O .rodata	0000000d _ZL25pstrUsageSoftButtonReport
04026a4c l     O .rodata	0000000d _ZL26pstrUsageMedicalUltrasound
0402a5ac l     O .rwdata	00000008 _ZL23pstrUsageVCRAcquisition
0402a5b4 l     O .rwdata	00000007 _ZL19pstrUsageFreezeThaw
04026a5c l     O .rodata	0000000b _ZL18pstrUsageClipStore
0402a5bc l     O .rwdata	00000007 _ZL15pstrUsageUpdate
0402a5c4 l     O .rwdata	00000005 _ZL13pstrUsageNext
0402a5cc l     O .rwdata	00000005 _ZL13pstrUsageSave
0402a5d4 l     O .rwdata	00000006 _ZL14pstrUsagePrint
04026a68 l     O .rodata	00000009 _ZL25pstrUsageMicrophoneEnable
0402a5dc l     O .rwdata	00000005 _ZL13pstrUsageCine
04026a74 l     O .rodata	0000000a _ZL22pstrUsageTransmitPower
0402a5e4 l     O .rwdata	00000006 _ZL14pstrUsageFocus
0402a5ec l     O .rwdata	00000006 _ZL14pstrUsageDepth
04026a80 l     O .rodata	0000000d _ZL24pstrUsageSoftStepPrimary
04026a90 l     O .rodata	0000000d _ZL26pstrUsageSoftStepSecondary
04026aa0 l     O .rodata	0000000f _ZL30pstrUsageDepthGainCompensation
04026ab0 l     O .rodata	00000009 _ZL19pstrUsageZoomSelect
04026abc l     O .rodata	00000009 _ZL19pstrUsageZoomAdjust
04026ac8 l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeSelect
04026adc l     O .rodata	00000012 _ZL34pstrUsageSpectralDopplerModeAdjust
04026af0 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeSelect
04026b04 l     O .rodata	00000013 _ZL31pstrUsageColorDopplerModeAdjust
04026b18 l     O .rodata	00000010 _ZL25pstrUsageMotionModeSelect
04026b28 l     O .rodata	00000010 _ZL25pstrUsageMotionModeAdjust
04026b38 l     O .rodata	0000000c _ZL21pstrUsage2DModeSelect
04026b44 l     O .rodata	0000000c _ZL21pstrUsage2DModeAdjust
04026b50 l     O .rodata	0000000e _ZL26pstrUsageSoftControlSelect
04026b60 l     O .rodata	0000000e _ZL26pstrUsageSoftControlAdjust
04026b6e l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7cin2lenE
04026b7e l     O .rodata	00000010 _ZN13_ns_USBH_MIDIL7sys2cinE
0400a8ac l     F .text	00000054 _Z41__static_initialization_and_destruction_0ii
0400a900 l     F .text	00000030 _GLOBAL__sub_I_rcode
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 vmi_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
0400bab0 l     F .text	000000a4 _ZL21size_of_encoded_valueh
0400bb54 l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
0400bd60 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
0400bdb4 l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
0400be40 l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0400bf74 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
0400bffc l     F .text	0000022c _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
0400c228 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_throw.cc
0400cb00 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
0400cde8 l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
0402d964 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
0400cea0 l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
0400d050 l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
0402d850 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0400dec0 l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
0402d858 l     O .bss	00000004 fc_static
0400dfd8 l     F .text	000000c0 _Unwind_RaiseException_Phase2
0400e098 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
04027488 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
040272a6 l     O .rodata	00000010 zeroes.4404
04011878 l     F .text	000000bc __sbprintf
040272b6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04011a88 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
040135e0 l     F .text	00000008 __fp_unlock
040135f4 l     F .text	0000019c __sinit.part.1
04013790 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
04027cd4 l     O .rwdata	00000020 lc_ctype_charset
04027cb4 l     O .rwdata	00000020 lc_message_charset
04027cf4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
040272e4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
04016220 l     F .text	000000fc __sprint_r.part.0
04027408 l     O .rodata	00000010 zeroes.4349
0401785c l     F .text	000000bc __sbprintf
04027418 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0401b664 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0401b778 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0401b7d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0401b8ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0401b9d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0401bb40 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0401bc2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0401be08 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0402a64c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
0401c07c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0401c160 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0401c29c l     F .text	00000034 alt_dev_reg
04027ed4 l     O .rwdata	00000038 i2c_0
04027f0c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0401c378 l     F .text	00000110 optional_irq_callback
0401c4d8 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0401e1b4 l     F .text	0000020c altera_avalon_jtag_uart_irq
0401e3c0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0401ebf4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0401ef8c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0401f47c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0401f5dc l     F .text	0000003c alt_get_errno
0401f618 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0402d890 g     O .bss	00000004 alt_instruction_exception_handler
0400cfa8 g     F .text	00000028 __cxa_free_exception
040205ec  w    O .rodata	0000000c _ZTV16ConfigDescParserILh0ELh0ELh0ELh0EE
0400efc0 g     F .text	00000018 putchar
0400b604 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
0401582c g     F .text	00000074 _mprec_log10
04004f68  w    F .text	0000003c _ZN20MultiByteValueParserC2Ev
0400ba50 g     F .text	00000018 _ZSt10unexpectedv
04015918 g     F .text	0000008c __any_on
04017f68 g     F .text	00000054 _isatty_r
040272f0 g     O .rodata	00000028 __mprec_tinytens
0401bd44 g     F .text	0000007c alt_main
0400efd8 g     F .text	000000c0 _puts_r
04000e2c g     F .text	00000058 _ZN3USBC1Ev
0402d99c g     O .bss	00000100 alt_irq
0400d144 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
0400923c g     F .text	000000f0 _ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR
04017fbc g     F .text	00000060 _lseek_r
0400e154 g     F .text	00000020 .hidden _Unwind_GetIPInfo
0402a664 g       *ABS*	00000000 __flash_rwdata_start
040069d0 g     F .text	00000108 _ZN20MultiByteValueParser5ParseEPPhPt
0401a0a0 g     F .text	00000088 .hidden __eqdf2
04004f68  w    F .text	0000003c _ZN20MultiByteValueParserC1Ev
04002ff4 g     F .text	00000094 _ZN3USB12getConfDescrEhhthPh
0400cbd4 g     F .text	00000084 __cxa_rethrow
0400e0e0 g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
0400ba8c g     F .text	00000014 _ZSt14set_unexpectedPFvvE
0400e144 g     F .text	00000010 .hidden _Unwind_GetIP
0402da9c g       *ABS*	00000000 __alt_heap_start
04008b7c  w    F .text	00000040 _ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0400f3a4 g     F .text	0000005c _kill_r
04006d2c g     F .text	00000188 _ZN9USBH_MIDIC2EP3USB
0400ef7c g     F .text	0000003c printf
04020610  w    O .rodata	0000002c _ZTV15USBDeviceConfig
0401807c g     F .text	0000009c _wcrtomb_r
0400f16c g     F .text	00000084 _signal_r
04006758  w    F .text	00000034 _ZN20KeyboardReportParser7OnKeyUpEhh
040161bc g     F .text	0000005c __sseek
04013940 g     F .text	00000010 __sinit
04017918 g     F .text	00000140 __swbuf_r
040098a8 g     F .text	000000e4 _ZN8MAX3421e4InitEv
0400d024 g     F .text	0000002c __cxa_free_dependent_exception
0400a958 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
04004f08  w    F .text	00000060 _ZN16MultiValueBufferC1Ev
04014414 g     F .text	0000007c _setlocale_r
04026eec  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
04013798 g     F .text	00000078 __sfmoreglue
0401cbd0 g     F .text	000000a8 alt_avalon_i2c_rx_read
0401bde4 g     F .text	00000024 __malloc_unlock
0400d144 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
040084cc g     F .text	00000564 _ZN14MidiDescParser15ParseDescriptorEPPhPt
0400b38c g     F .text	00000274 _ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
04008c64  w    F .text	0000003c _ZN9USBH_MIDI17getMsgSizeFromCinEh
04002724 g     F .text	00000710 _ZN3USB11ConfiguringEhhb
0400cdc8 g     F .text	00000020 _ZSt18uncaught_exceptionv
0400a77c g     F .text	000000f8 _Z9print_hexii
0401dde8 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
04002494 g     F .text	00000290 _ZN3USB13AttemptConfigEhhhb
04009c74 g     F .text	00000074 _ZN8MAX3421e10IntHandlerEv
0402d84c g     O .bss	00000001 laststate
0400b680 g     F .text	00000020 __cxa_deleted_virtual
0401c954 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
04003464  w    F .text	0000008c _ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh
04008d28 g     F .text	000000a0 _ZN6USBHID14GetReportDescrEtP13USBReadParser
040096c0 g     F .text	00000080 _ZN8MAX3421e6gpioRdEv
04014790 g     F .text	0000015c memmove
04006474  w    F .text	00000028 _ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO
0400d11c g     F .text	00000004 _ZNSt9exceptionD2Ev
04013928 g     F .text	00000018 _cleanup
0401d638 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
040148ec g     F .text	000000a8 _Balloc
0400dd60 g     F .text	00000070 .hidden __fixsfsi
04004568 g     F .text	00000008 _ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0400a724 g     F .text	00000058 _Z6halt55v
0401a128 g     F .text	000000dc .hidden __gtdf2
0400462c g     F .text	000000f8 _ZN7XBOXONE4PollEv
04027120  w    O .rodata	00000014 _ZTVSt13bad_exception
0401fc6c g     F .text	00000024 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000000c __reset
0401c0b8 g     F .text	00000078 times
04008be4  w    F .text	00000028 _ZN14MidiDescParser9getNumEPsEv
0400e190 g     F .text	00000008 .hidden _Unwind_GetRegionStart
04028f88  w    O .rwdata	00000008 _ZTI17UsbConfigXtracter
04000020 g       *ABS*	00000000 __flash_exceptions_start
04008450 g     F .text	0000007c _ZN14MidiDescParser5ParseEtPKhRKt
04000ab8 g     F .text	0000003c _ZN6SPI_SS3SetEh
04005434  w    F .text	00000028 _ZN7XBOXONE10GetAddressEv
04017f0c g     F .text	0000005c _fstat_r
0400938c g     F .text	0000008c _ZN8MAX3421e5regWrEhh
04001138 g     F .text	0000018c _ZN3USB10SetAddressEhhPP6EpInfoPt
0402d868 g     O .bss	00000004 errno
040061b4 g     F .text	00000298 _ZN20KeyboardReportParser10OemToAsciiEhh
04016138 g     F .text	00000008 __seofread
04008f38 g     F .text	00000098 _ZN6USBHID7GetIdleEhhPh
0400e36c g     F .text	00000074 .hidden _Unwind_Backtrace
0402d87c g     O .bss	00000004 alt_argv
04003bf4 g     F .text	000001e4 _ZN7XBOXONEC1EP3USB
04030f6c g       *ABS*	00000000 _gp
0401c130 g     F .text	00000030 usleep
0401de2c g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0400d87c g     F .text	000004e4 .hidden __subsf3
04007ddc g     F .text	00000088 _ZN9USBH_MIDI18countSysExDataSizeEPh
04029720  w    O .rwdata	00000008 _ZTI21UsbMidiConfigXtracter
0401b8cc g     F .text	00000020 getpid
0400c8d0 g     F .text	00000230 __cxa_call_unexpected
0400cc58 g     F .text	00000008 __cxa_get_exception_ptr
0401cae4 g     F .text	00000044 alt_avalon_i2c_is_busy
04027d54 g     O .rwdata	00000180 alt_fd_list
040090e8 g     F .text	00000088 _ZN6USBHID11GetProtocolEhPh
0402055c  w    O .rodata	00000019 _ZTS15AddressPoolImplILh16EE
04006d2c g     F .text	00000188 _ZN9USBH_MIDIC1EP3USB
04000dac g     F .text	00000058 _Z5delaym
04004d40 g     F .text	000000a4 _ZN7XBOXONE6onInitEv
0400efb8 g     F .text	00000008 _putchar_r
0400e280 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
0401c888 g     F .text	000000cc alt_avalon_i2c_master_config_set
04002334 g     F .text	00000160 _ZN3USB17DefaultAddressingEhhb
0400e110 g     F .text	00000018 .hidden _Unwind_GetCFA
0400ba68 g     F .text	00000014 _ZSt13set_terminatePFvvE
0401f12c g     F .text	00000090 alt_find_dev
04020550  w    O .rodata	0000000c _ZTI15AddressPoolImplILh16EE
0400f578 g     F .text	00000008 _times_r
0400ecdc g     F .text	00000148 memcpy
04000eb0 g     F .text	00000024 _ZN3USB15getUsbTaskStateEv
0400653c  w    F .text	00000028 _ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO
04000af4 g     F .text	0000003c _ZN6SPI_SS5ClearEh
0400cfd0 g     F .text	00000054 __cxa_allocate_dependent_exception
040135e8 g     F .text	0000000c _cleanup_r
0400b718 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0401b4e0 g     F .text	000000dc .hidden __floatsidf
04020604  w    O .rodata	0000000c _ZTV13USBReadParser
0401f560 g     F .text	0000007c alt_io_redirect
0401a204 g     F .text	000000f4 .hidden __ltdf2
04005288  w    F .text	00000024 _ZN15USBDeviceConfig10GetAddressEv
04000ed4 g     F .text	00000034 _ZN3USB15setUsbTaskStateEh
04020298 g       *ABS*	00000000 __DTOR_END__
0400b730 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
0401d478 g     F .text	000001c0 alt_avalon_i2c_master_transmit
0400f098 g     F .text	00000014 puts
04026f74  w    O .rodata	0000000c _ZTIN10__cxxabiv121__vmi_class_type_infoE
0401fe5c g     F .text	0000009c alt_exception_cause_generated_bad_addr
04007e64 g     F .text	00000334 _ZN9USBH_MIDI9SendSysExEPhth
04009170 g     F .text	000000cc _ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
04016070 g     F .text	00000074 __fpclassifyd
04015788 g     F .text	000000a4 __ratio
04017840 g     F .text	0000001c __vfiprintf_internal
040078e0 g     F .text	000000d4 _ZN9USBH_MIDI8RecvDataEPtPh
0401e5b8 g     F .text	0000021c altera_avalon_jtag_uart_read
0400e4a8 g     F .text	00000014 malloc
0400ef4c g     F .text	00000030 _printf_r
0400d2ac g     F .text	00000064 .hidden __udivsi3
0401b928 g     F .text	000000ac isatty
0400f1f0 g     F .text	000000bc _raise_r
0400932c g     F .text	0000003c _ZN8MAX3421eC2Ev
04027340 g     O .rodata	000000c8 __mprec_tens
04014490 g     F .text	0000000c __locale_charset
04000e2c g     F .text	00000058 _ZN3USBC2Ev
04005240  w    F .text	00000024 _ZN15USBDeviceConfig7ReleaseEv
0401c6f4 g     F .text	00000098 alt_avalon_i2c_enable
0402d864 g     O .bss	00000004 __malloc_top_pad
0400f400 g     F .text	00000004 _getpid_r
0401dd1c g     F .text	00000068 alt_avalon_i2c_int_disable
0402d848 g     O .bss	00000001 usb_task_state
0402a62c g     O .rwdata	00000004 __mb_cur_max
040144c0 g     F .text	0000000c _localeconv_r
0400ac1c g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD1Ev
04004598 g     F .text	00000094 _ZN7XBOXONE7ReleaseEv
04006eb4 g     F .text	00000820 _ZN9USBH_MIDI4InitEhhb
04014d20 g     F .text	0000003c __i2b
04013dc4 g     F .text	000004c8 __sfvwrite_r
0400b8b0 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0400f2ac g     F .text	000000a8 __sigtramp_r
04008198 g     F .text	00000140 _ZN9USBH_MIDI16extractSysExDataEPhS0_
0400351c  w    F .text	00000260 _ZN15AddressPoolImplILh16EE12AllocAddressEhbh
0400f0ac g     F .text	00000054 _sbrk_r
04026fbc  w    O .rodata	00000020 _ZTVSt9type_info
04005338  w    F .text	0000002c _ZN15USBDeviceConfig13DEVSUBCLASSOKEh
04008fd0 g     F .text	00000094 _ZN6USBHID7SetIdleEhhh
0401801c g     F .text	00000060 _read_r
0400d124 g     F .text	0000000c _ZNKSt9exception4whatEv
0400069c g     F .text	000002f8 InitializeSGTL
0400026c g     F .text	000000b4 SGTL5000_Reg_Rd
0402a644 g     O .rwdata	00000004 alt_max_fd
04006828 g     F .text	00000050 _Z9E_Notifycci
040082d8 g     F .text	00000178 _ZN14MidiDescParserC2EP21UsbMidiConfigXtracterb
04017c00 g     F .text	000000f0 _fclose_r
040135b0 g     F .text	00000030 fflush
0402d860 g     O .bss	00000004 __malloc_max_sbrked_mem
04009638 g     F .text	00000088 _ZN8MAX3421e7bytesRdEhhPh
0401d844 g     F .text	00000210 alt_avalon_i2c_master_receive
040228ec  w    O .rodata	0000000b _ZTS9USBH_MIDI
04018e24 g     F .text	000008ac .hidden __adddf3
04026f20  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
04005364  w    F .text	00000090 _ZN3USB19RegisterDeviceClassEP15USBDeviceConfig
04008a30 g     F .text	00000144 _ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
04015530 g     F .text	0000010c __b2d
04018860 g     F .text	000005c4 .hidden __umoddi3
0401bc68 g     F .text	000000dc lseek
04006564  w    F .text	0000018c _ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh
0400b774 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
04006980 g     F .text	00000028 _Z8E_Notifyhi
0400b65c g     F .text	00000004 _ZdlPv
0401dd84 g     F .text	00000064 alt_avalon_i2c_int_enable
0402a61c g     O .rwdata	00000004 _global_impure_ptr
0400ac2c g     F .text	00000034 _ZN10__cxxabiv121__vmi_class_type_infoD0Ev
04015b0c g     F .text	00000564 _realloc_r
0402da9c g       *ABS*	00000000 __bss_end
0401f38c g     F .text	000000f0 alt_iic_isr_register
0401fb64 g     F .text	00000108 alt_tick
04000a84 g     F .text	00000034 _ZN6SPI_SS7DirReadEv
0400e0c8 g     F .text	00000018 .hidden _Unwind_SjLj_Register
04018264 g     F .text	000005fc .hidden __udivdi3
0401dc44 g     F .text	00000058 alt_avalon_i2c_int_status_get
04017e68 g     F .text	00000024 _fputwc_r
04027318 g     O .rodata	00000028 __mprec_bigtens
04014b04 g     F .text	00000104 __s2b
0400e444 g     F .text	00000018 abort
0401b5bc g     F .text	000000a8 .hidden __floatunsidf
04022830  w    O .rodata	00000014 _ZTS17MouseReportParser
04015270 g     F .text	00000060 __mcmp
04000e04 g     F .text	00000028 _Z6millisv
04008ca0  w    F .text	00000028 _ZN9USBH_MIDI10GetAddressEv
04003dd8 g     F .text	00000654 _ZN7XBOXONE4InitEhhb
0400cd14 g     F .text	000000b4 __cxa_end_catch
04009064 g     F .text	00000084 _ZN6USBHID11SetProtocolEhh
04013960 g     F .text	00000018 __fp_lock_all
04020648  w    O .rodata	00000025 _ZTS16ConfigDescParserILh0ELh0ELh0ELh0EE
0401f340 g     F .text	0000004c alt_ic_irq_enabled
0400d120 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
040037e8  w    F .text	00000144 _ZN15AddressPoolImplILh16EE9InitEntryEh
04006514  w    F .text	00000028 _ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO
0401fac8 g     F .text	0000009c alt_alarm_stop
04000a48 g     F .text	0000003c _ZN6SPI_SS8DirWriteEh
04022878  w    O .rodata	0000003c _ZTV9USBH_MIDI
04000f08 g     F .text	00000114 _ZN3USB14getEpInfoEntryEhh
0401c574 g     F .text	00000054 alt_avalon_i2c_register_callback
0402d884 g     O .bss	00000004 alt_irq_active
0401c5c8 g     F .text	000000ec alt_avalon_i2c_init
0400ba28 g     F .text	00000018 _ZSt9terminatev
040000fc g     F .exceptions	000000d4 alt_irq_handler
04027d2c g     O .rwdata	00000028 alt_dev_null
0400ac60 g     F .text	00000128 _ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
0400678c  w    F .text	00000028 _ZN20KeyboardReportParser10getNumKeysEv
0400d14c g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
040055e4  w    F .text	00000034 _ZN17UsbConfigXtracterC2Ev
04003994  w    F .text	00000094 _ZN15AddressPoolImplILh16EE16FindAddressIndexEh
040032bc g     F .text	00000084 _ZN3USB7setConfEhhh
04008b74 g     F .text	00000008 _ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
04027018  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
0400101c g     F .text	0000011c _ZN3USB14setEpInfoEntryEhhP6EpInfo
0401ef6c g     F .text	00000020 alt_dcache_flush_all
04014c08 g     F .text	00000068 __hi0bits
040228f8  w    O .rodata	0000000c _ZTI14MidiDescParser
04009880 g     F .text	00000028 _Z10Vbus_powerb
0402a604  w    O .rwdata	00000008 _ZTISt9exception
0401b460 g     F .text	00000080 .hidden __fixdfsi
04022844  w    O .rodata	00000012 _ZTS15HIDReportParser
0400a930  w    F .text	00000028 _ZN9USBH_MIDIcvbEv
04001968 g     F .text	000000b0 _ZN3USB11outTransferEhhtPh
0400a2d4 g     F .text	00000450 _Z9test_loopv
0402a664 g       *ABS*	00000000 __ram_rwdata_end
0400b600 g     F .text	00000004 _ZNSt9type_infoD1Ev
0402a63c g     O .rwdata	00000008 alt_dev_list
0400d14c g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
0401c19c g     F .text	00000100 write
040159a4 g     F .text	000000a0 _putc_r
04009ce8 g     F .text	00000024 _ZN8MAX3421e10GpxHandlerEv
0401cf04 g     F .text	0000004c alt_avalon_i2c_check_arblost
0400b614 g     F .text	00000004 _ZNSt9type_infoD0Ev
0400545c  w    F .text	00000028 _ZN7XBOXONE7isReadyEv
0400d390 g     F .text	000000bc .hidden __gtsf2
0400a874 g     F .text	00000038 _Z13press_any_keyv
0401dce0 g     F .text	0000003c alt_avalon_i2c_int_clear
04008cfc  w    F .text	0000002c _Z10D_PrintHexItEvT_i
0402053c  w    O .rodata	00000014 _ZTV11AddressPool
04027488 g       *ABS*	00000000 __ram_rodata_end
0401b814 g     F .text	000000b8 fstat
04003398  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC2Ev
0401ba10 g     F .text	00000130 kill
04006804  w    F .text	00000024 _ZN20KeyboardReportParser10getPadKeysEv
0401a204 g     F .text	000000f4 .hidden __ledf2
04020670  w    O .rodata	00000020 _ZTI7XBOXONE
0402a650 g     O .rwdata	00000008 alt_avalon_i2c_list
040051c8  w    F .text	0000003c _ZN15USBDeviceConfig4InitEhhb
0402278a g     O .rodata	0000000a _ZN20KeyboardReportParser7numKeysE
04014fe8 g     F .text	00000140 __pow5mult
040057b0  w    F .text	0000007c _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt
04016334 g     F .text	0000150c ___vfiprintf_internal_r
0402d874 g     O .bss	00000004 __nlocale_changed
0400d310 g     F .text	00000058 .hidden __umodsi3
0400b60c g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
04004fa4  w    F .text	00000080 _ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer
04002e34 g     F .text	00000138 _ZN3USB13ReleaseDeviceEh
0400ba7c g     F .text	00000010 _ZSt13get_terminatev
0402da9c g       *ABS*	00000000 end
040205f8  w    O .rodata	0000000c _ZTV17UsbConfigXtracter
040055b0  w    F .text	00000034 _ZN15USBDeviceConfigC2Ev
0400954c g     F .text	00000074 _ZN8MAX3421e6gpioWrEh
04006724  w    F .text	00000034 _ZN20KeyboardReportParser9OnKeyDownEhh
0400e354 g     F .text	00000018 .hidden _Unwind_DeleteException
0401e0f4 g     F .text	000000c0 altera_avalon_jtag_uart_init
040064ec  w    F .text	00000028 _ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO
040001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0401c6b4 g     F .text	00000040 alt_avalon_i2c_open
040227a0 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysLoE
0400b7e0 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0400ac1c g     F .text	00000010 _ZN10__cxxabiv121__vmi_class_type_infoD2Ev
04029714 g     O .rwdata	00000004 UsbDEBUGlvl
04020290 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0401d08c g     F .text	000000e8 alt_avalon_i2c_master_tx
0401ec6c g     F .text	0000007c alt_avalon_timer_sc_init
0400e3e0 g     F .text	00000064 .hidden __clzsi2
0400b6a0 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
0401e7d4 g     F .text	00000224 altera_avalon_jtag_uart_write
04013950 g     F .text	00000004 __sfp_lock_acquire
040270a8  w    O .rodata	00000012 _ZTSSt13bad_exception
040146ac g     F .text	000000e4 memchr
0400f580 g     F .text	000022dc ___vfprintf_internal_r
04004f08  w    F .text	00000060 _ZN16MultiValueBufferC2Ev
04013ab4 g     F .text	00000310 _free_r
0401f860 g     F .text	0000022c alt_printf
0401449c g     F .text	00000010 __locale_mb_cur_max
040200d8 g     F .text	00000180 __call_exitprocs
04000b30 g     F .text	0000003c _ZN6SPI_SS6ToggleEh
0402d870 g     O .bss	00000004 __mlocale_changed
0401c488 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
0402a624 g     O .rwdata	00000004 __malloc_sbrk_base
04000230 g     F .text	0000003c _start
04004570 g     F .text	00000028 _ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR
0402d888 g     O .bss	00000004 _alt_tick_rate
04026fac  w    O .rodata	0000000d _ZTSSt9type_info
0401da54 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
0400b660 g     F .text	00000020 __cxa_pure_virtual
04020528  w    O .rodata	00000014 _ZTV15AddressPoolImplILh16EE
040206b0  w    O .rodata	00000010 _ZTS13USBReadParser
0401de78 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
04015128 g     F .text	00000148 __lshift
0401e9f8 g     F .text	000001fc alt_avalon_spi_command
0402d88c g     O .bss	00000004 _alt_nticks
0400f368 g     F .text	00000018 signal
0401be44 g     F .text	00000104 read
04005cdc g     F .text	0000021c _ZN17MouseReportParser5ParseEP6USBHIDbhPh
0401c308 g     F .text	00000070 alt_sys_init
040205ac  w    O .rodata	00000040 _ZTV7XBOXONE
04001a18 g     F .text	000003ac _ZN3USB11OutTransferEP6EpInfottPh
04000c54 g     F .text	00000158 _Z14alt_busy_sleepj
0401ffc0 g     F .text	00000118 __register_exitproc
04003228 g     F .text	00000094 _ZN3USB7setAddrEhhh
04006878 g     F .text	00000084 _Z8E_NotifyPKci
040228b4  w    O .rodata	0000000c _ZTV14MidiDescParser
04008c0c  w    F .text	00000058 _ZN9USBH_MIDI17convertStatus2CinEh
04003a28  w    F .text	00000104 _ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh
04009d0c g     F .text	00000078 _Z8toBinaryh
0400a99c g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
040066f0  w    F .text	00000034 _ZN20KeyboardReportParser20OnControlKeysChangedEhh
040053f4  w    F .text	00000040 _ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
0401d2b0 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
04014d5c g     F .text	0000028c __multiply
04003180 g     F .text	000000a8 _ZN3USB11getStrDescrEhhthtPh
04029702 g     O .rwdata	00000005 _ZN20KeyboardReportParser7padKeysE
0401e460 g     F .text	00000068 altera_avalon_jtag_uart_close
04003398  w    F .text	000000cc _ZN15AddressPoolImplILh16EEC1Ev
0400d368 g     F .text	00000028 .hidden __mulsi3
04027488 g       *ABS*	00000000 __ram_rwdata_start
0400e1b0 g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
04020298 g       *ABS*	00000000 __ram_rodata_start
0402d974 g     O .bss	00000028 __malloc_current_mallinfo
0400564c  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter
0400e2c4 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
0401563c g     F .text	0000014c __d2b
04027148  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
0400b600 g     F .text	00000004 _ZNSt9type_infoD2Ev
04008bbc  w    F .text	00000028 _ZN14MidiDescParser12getConfValueEv
04005060  w    F .text	00000068 _ZN11ByteSkipper10InitializeEP16MultiValueBuffer
04028f74  w    O .rwdata	00000008 _ZTI11AddressPool
0400d150 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
0400ab98 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
04022904  w    O .rodata	00000011 _ZTS14MidiDescParser
04000404 g     F .text	00000048 clearLED
04026f4c  w    O .rodata	00000026 _ZTSN10__cxxabiv121__vmi_class_type_infoE
0401df90 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0401fd98 g     F .text	000000c4 alt_get_fd
04005ef8 g     F .text	000002bc _ZN20KeyboardReportParser5ParseEP6USBHIDbhPh
0401ee14 g     F .text	00000158 alt_busy_sleep
0402a614  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
04017ad0 g     F .text	00000054 _close_r
0401ff44 g     F .text	0000007c memcmp
0401cb28 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
0401e050 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
040079b4 g     F .text	00000268 _ZN9USBH_MIDI8RecvDataEPhb
0402da9c g       *ABS*	00000000 __alt_stack_base
0401e0a0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0400a958 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
04007c1c g     F .text	0000015c _ZN9USBH_MIDI8SendDataEPhh
04004ca0 g     F .text	000000a0 _ZN7XBOXONE11XboxCommandEPht
04011934 g     F .text	00000154 __swsetup_r
0400e308 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
040196d0 g     F .text	000009d0 .hidden __divdf3
04013810 g     F .text	00000118 __sfp
040158a0 g     F .text	00000078 __copybits
0400b604 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
040278ac g     O .rwdata	00000408 __malloc_av_
04005024  w    F .text	0000003c _ZN11ByteSkipperC1Ev
04000b6c g     F .text	0000003c _ZN6SPI_SS6DirSetEh
0401395c g     F .text	00000004 __sinit_lock_release
0401a2f8 g     F .text	0000086c .hidden __muldf3
040160e4 g     F .text	00000054 __sread
04005618  w    F .text	00000034 _ZN13USBReadParserC2Ev
0402710c  w    O .rodata	00000014 _ZTVSt9exception
0400d148 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
04003364  w    F .text	00000034 _ZN11AddressPoolC2Ev
0401fc90 g     F .text	00000108 alt_find_file
0400530c  w    F .text	0000002c _ZN15USBDeviceConfig10DEVCLASSOKEh
0401efc8 g     F .text	000000a4 alt_dev_llist_insert
0401bdc0 g     F .text	00000024 __malloc_lock
0401bfcc g     F .text	000000b0 sbrk
0401cf50 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
0401ceb8 g     F .text	0000004c alt_avalon_i2c_check_nack
04027048  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0400cb44 g     F .text	00000090 __cxa_throw
04013554 g     F .text	0000005c _fflush_r
0400e174 g     F .text	00000010 .hidden _Unwind_SetIP
040012c4 g     F .text	00000310 _ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser
04017b24 g     F .text	000000dc _calloc_r
0402069c  w    O .rodata	00000014 _ZTS17UsbConfigXtracter
040069a8 g     F .text	00000028 _Z8E_Notifydi
04007774 g     F .text	0000016c _ZN9USBH_MIDI19setupDeviceSpecificEv
0402d840 g       *ABS*	00000000 __bss_start
04028f98  w    O .rwdata	00000008 _ZTI15USBDeviceConfig
0400ee24 g     F .text	00000128 memset
040082d8 g     F .text	00000178 _ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb
0400582c  w    F .text	000004b0 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt
04009d84 g     F .text	00000550 main
040095c0 g     F .text	00000078 _ZN8MAX3421e5regRdEh
040097bc g     F .text	000000c4 _ZN8MAX3421e5resetEv
0401ce84 g     F .text	00000034 alt_avalon_i2c_master_target_set
0402d880 g     O .bss	00000004 alt_envp
040206c0  w    O .rodata	00000012 _ZTS15USBDeviceConfig
0402d85c g     O .bss	00000004 __malloc_max_total_mem
0401dff0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0402d849 g     O .bss	00000001 _ZN8MAX3421e9vbusStateE
04017a58 g     F .text	00000018 __swbuf
0400d104 g     F .text	0000000c __cxa_get_globals_fast
0401dc9c g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
0400932c g     F .text	0000003c _ZN8MAX3421eC1Ev
040055e4  w    F .text	00000034 _ZN17UsbConfigXtracterC1Ev
04003340  w    F .text	00000024 _ZN3USB14GetAddressPoolEv
04016218 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
04017cf0 g     F .text	00000014 fclose
04004b74 g     F .text	000000f0 _ZN7XBOXONE14getButtonClickE10ButtonEnum
040068fc g     F .text	00000084 _Z11E_NotifyStrPKci
04000ba8 g     F .text	0000003c _ZN6SPI_SS8DirClearEh
04011cb0 g     F .text	00001688 _dtoa_r
0400e4d0 g     F .text	0000080c _malloc_r
040181d8 g     F .text	00000030 __ascii_wctomb
0400d130 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
0402a648 g     O .rwdata	00000004 alt_errno
04022824  w    O .rodata	0000000c _ZTI17MouseReportParser
0400f380 g     F .text	00000010 _init_signal
04003088 g     F .text	000000f8 _ZN3USB12getConfDescrEhhhP13USBReadParser
0402703c  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
04004de4 g     F .text	00000078 _ZN7XBOXONE12setRumbleOffEv
0401428c g     F .text	000000c4 _fwalk
04009368 g     F .text	00000024 _ZN8MAX3421e12getVbusStateEv
0400392c  w    F .text	00000068 _ZN15AddressPoolImplILh16EE16InitAllAddressesEv
0400d120 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
04015a44 g     F .text	000000c8 putc
0400d1b4 g     F .text	00000084 .hidden __divsi3
04022918  w    O .rodata	00000018 _ZTS21UsbMidiConfigXtracter
04000564 g     F .text	00000138 printSignedHex1
04013990 g     F .text	00000124 _malloc_trim_r
04020298 g       *ABS*	00000000 __CTOR_END__
0400d44c g     F .text	00000430 .hidden __mulsf3
04005204  w    F .text	0000003c _ZN15USBDeviceConfig15ConfigureDeviceEhhb
04008cc8  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC2Ev
040227d8  w    O .rodata	00000028 _ZTV17MouseReportParser
0400f404 g     F .text	000000dc strcmp
04003bf4 g     F .text	000001e4 _ZN7XBOXONEC2EP3USB
04020298 g       *ABS*	00000000 __flash_rodata_start
04027134  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
04020298 g       *ABS*	00000000 __DTOR_LIST__
040228c0  w    O .rodata	0000000c _ZTV21UsbMidiConfigXtracter
04000320 g     F .text	000000a0 SGTL5000_Reg_Wr
0402d84b g     O .bss	00000001 usbstate
0401a0a0 g     F .text	00000088 .hidden __nedf2
0401c2d0 g     F .text	00000038 alt_irq_init
0401bf48 g     F .text	00000084 alt_release_fd
0400a968 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
04020690  w    O .rodata	00000009 _ZTS7XBOXONE
0402715c g     O .rodata	00000100 .hidden __clz_tab
0402d86c g     O .bss	00000004 _PathLocale
0401fef8 g     F .text	00000014 atexit
0400d390 g     F .text	000000bc .hidden __gesf2
04017a70 g     F .text	00000060 _write_r
04002f6c g     F .text	00000088 _ZN3USB11getDevDescrEhhtPh
040034f0  w    F .text	0000002c _Z10D_PrintHexIhEvT_i
040144cc g     F .text	00000018 setlocale
04000c20 g     F .text	00000034 _ZN6SPI_SS7PinReadEv
040227ac  w    O .rodata	0000002c _ZTV20KeyboardReportParser
04009740 g     F .text	0000007c _ZN8MAX3421e12gpioRdOutputEv
0400e1a8 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
04026f80  w    O .rodata	0000002c _ZTVN10__cxxabiv121__vmi_class_type_infoE
0400d0ac g     F .text	00000058 __cxa_call_terminate
0402a620 g     O .rwdata	00000004 _impure_ptr
0402a60c  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
04020578  w    O .rodata	0000000e _ZTS11AddressPool
0402d878 g     O .bss	00000004 alt_argc
04003b2c  w    F .text	000000c8 _ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh
04013338 g     F .text	0000021c __sflush_r
04008cc8  w    F .text	00000034 _ZN21UsbMidiConfigXtracterC1Ev
0400377c  w    F .text	0000006c _ZN15AddressPoolImplILh16EE11FreeAddressEh
0401f0cc g     F .text	00000060 _do_dtors
040144b8 g     F .text	00000008 __locale_cjk_lang
0401ce4c g     F .text	00000038 alt_avalon_i2c_master_target_get
0401cd5c g     F .text	000000f0 alt_avalon_i2c_send_address
0402d894 g     O .bss	00000012 buf
0400baa0 g     F .text	00000010 _ZSt14get_unexpectedv
04000020 g       .exceptions	00000000 alt_irq_entry
04003364  w    F .text	00000034 _ZN11AddressPoolC1Ev
04000e84 g     F .text	0000002c _ZN3USB4initEv
040154cc g     F .text	00000064 __ulp
0400e198 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
04013978 g     F .text	00000018 __fp_unlock_all
0400564c  w    F .text	00000164 _ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC2EP17UsbConfigXtracter
04004c64 g     F .text	0000003c _ZN7XBOXONE12getAnalogHatE13AnalogHatEnum
040052ac  w    F .text	0000002c _ZN15USBDeviceConfig12ResetHubPortEh
0402a634 g     O .rwdata	00000008 alt_fs_list
040270e8  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
0402280c  w    O .rodata	00000017 _ZTS20KeyboardReportParser
04005618  w    F .text	00000034 _ZN13USBReadParserC1Ev
0400e184 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
040052d8  w    F .text	00000034 _ZN15USBDeviceConfig8VIDPIDOKEtt
0400cc60 g     F .text	000000b4 __cxa_begin_catch
04004e5c g     F .text	000000ac _ZN7XBOXONE11setRumbleOnEhhhh
0400b730 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0400ba40 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
040064c4  w    F .text	00000028 _ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO
04000020 g       *ABS*	00000000 __ram_exceptions_start
040144e4 g     F .text	0000000c localeconv
04009aa4 g     F .text	00000174 _ZN8MAX3421e8busprobeEv
04000994 g     F .text	0000003c _ZN6SPI_SS5WriteEh
040003c0 g     F .text	00000044 setLED
04005484  w    F .text	0000012c _ZN7XBOXONE8VIDPIDOKEtt
0400d140 g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
0401df28 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0402a600 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
04000be4 g     F .text	0000003c _ZN6SPI_SS9DirToggleEh
04008dc8 g     F .text	000000b8 _ZN6USBHID9SetReportEhhhhtPh
0401f1dc g     F .text	00000050 alt_ic_isr_register
0401c78c g     F .text	0000004c alt_avalon_i2c_disable
0400cf48 g     F .text	00000060 __cxa_allocate_exception
04026f14  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0402a664 g       *ABS*	00000000 _edata
040055b0  w    F .text	00000034 _ZN15USBDeviceConfigC1Ev
0402da9c g       *ABS*	00000000 _end
0400ad88 g     F .text	00000604 _ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0400c2d0 g     F .text	00000600 __gxx_personality_sj0
04017d04 g     F .text	00000164 __fputwc
04000230 g       *ABS*	00000000 __ram_exceptions_end
04001f44 g     F .text	000003f0 _ZN3USB4TaskEv
0401e4c8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
040009d0 g     F .text	00000044 _ZN6SPI_SS11ClearAndSetEhh
04028f90  w    O .rwdata	00000008 _ZTI13USBReadParser
0401c7d8 g     F .text	000000b0 alt_avalon_i2c_master_config_get
0400d11c g     F .text	00000004 _ZNSt9exceptionD1Ev
0401f2b4 g     F .text	0000008c alt_ic_irq_disable
0400644c  w    F .text	00000028 _ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO
04016140 g     F .text	0000007c __swrite
0402a628 g     O .rwdata	00000004 __malloc_trim_threshold
040144ac g     F .text	0000000c __locale_msgcharset
0401ff0c g     F .text	00000038 exit
0400e128 g     F .text	0000001c .hidden _Unwind_SetGR
0400649c  w    F .text	00000028 _ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO
04014350 g     F .text	000000c4 _fwalk_reent
0400aafc g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
0400ddd0 g     F .text	000000f0 .hidden __floatunsisf
040152d0 g     F .text	000001fc __mdiff
0400b968 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
0400d238 g     F .text	00000074 .hidden __modsi3
040016bc g     F .text	000002ac _ZN3USB10InTransferEP6EpInfotPtPhh
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
0402d84a g     O .bss	00000001 rcode
04013954 g     F .text	00000004 __sfp_lock_release
040270bc  w    O .rodata	0000000c _ZTISt13bad_exception
04000000 g       *ABS*	00000000 __alt_mem_sdram
040067b4  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysUpEv
04004724 g     F .text	000003c8 _ZN7XBOXONE10readReportEv
0401c9e8 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
0400998c g     F .text	00000118 _ZN8MAX3421e4InitEi
04001dc4 g     F .text	00000180 _ZN3USB11dispatchPktEhht
0401cc78 g     F .text	000000e4 alt_avalon_i2c_cmd_write
040228cc  w    O .rodata	00000020 _ZTI9USBH_MIDI
04004aec g     F .text	00000088 _ZN7XBOXONE14getButtonPressE10ButtonEnum
0400d154 g     F .text	00000060 .hidden __fixunssfsi
040076d4 g     F .text	000000a0 _ZN9USBH_MIDI7ReleaseEv
0401b7a4 g     F .text	00000034 _exit
0401ece8 g     F .text	0000012c alt_alarm_start
04022800  w    O .rodata	0000000c _ZTI20KeyboardReportParser
04007d78 g     F .text	00000064 _ZN9USBH_MIDI13lookupMsgSizeEhh
0400044c g     F .text	00000118 printSignedHex0
0400e0f4 g     F .text	0000001c .hidden _Unwind_GetGR
0400d110 g     F .text	0000000c __cxa_get_globals
04006ad8 g     F .text	00000254 _ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_
040144f0 g     F .text	000001bc __smakebuf_r
0402a5fc g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
04005264  w    F .text	00000024 _ZN15USBDeviceConfig4PollEv
0400f4e0 g     F .text	00000098 strlen
0400f100 g     F .text	0000006c _init_signal_r
0402a5f4  w    O .rwdata	00000008 _ZTISt9type_info
0401f704 g     F .text	0000015c open
0401a128 g     F .text	000000dc .hidden __gedf2
0401fa8c g     F .text	0000003c alt_putchar
04027098  w    O .rodata	0000000d _ZTSSt9exception
0400e45c g     F .text	0000004c clock
040067dc  w    F .text	00000028 _ZN20KeyboardReportParser12getSymKeysLoEv
04009c18 g     F .text	0000005c _ZN8MAX3421e4TaskEv
04022794 g     O .rodata	0000000c _ZN20KeyboardReportParser9symKeysUpE
04009418 g     F .text	00000134 _ZN8MAX3421e7bytesWrEhhPh
0402a630 g     O .rwdata	00000004 __wctomb
0400d13c g     F .text	00000004 _ZNSt9exceptionD0Ev
0401631c g     F .text	00000018 __sprint_r
0401f1bc g     F .text	00000020 alt_icache_flush_all
0400e1a0 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
0402d8a8 g     O .bss	000000bc Usb
0402a658 g     O .rwdata	00000004 alt_priority_mask
04005024  w    F .text	0000003c _ZN11ByteSkipperC2Ev
0401f22c g     F .text	00000088 alt_ic_irq_enable
0401185c g     F .text	0000001c __vfprintf_internal
04000a14 g     F .text	00000034 _ZN6SPI_SS4ReadEv
04018208 g     F .text	0000005c _wctomb_r
0401ab64 g     F .text	000008fc .hidden __subdf3
040015d4 g     F .text	000000e8 _ZN3USB10inTransferEhhPtPhh
0400442c g     F .text	0000013c _ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR
04014c70 g     F .text	000000b0 __lo0bits
0402a65c g     O .rwdata	00000008 alt_alarm_list
0401f06c g     F .text	00000060 _do_ctors
0402063c  w    O .rodata	0000000c _ZTI16ConfigDescParserILh0ELh0ELh0ELh0EE
0400f390 g     F .text	00000014 __sigtramp
04008e80 g     F .text	000000b8 _ZN6USBHID9GetReportEhhhhtPh
04018118 g     F .text	000000c0 wcrtomb
0401b6a0 g     F .text	000000d8 close
0401dedc g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
040270c8  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
0401bba8 g     F .text	00000084 alt_load
0401d174 g     F .text	0000013c alt_avalon_i2c_master_rx
0400b618 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
040050c8  w    F .text	00000100 _ZN11ByteSkipper4SkipEPPhPtt
04017e8c g     F .text	00000080 fputwc
0400f354 g     F .text	00000014 raise
04029708  w    O .rwdata	00000008 _ZTI15HIDReportParser
0400e4bc g     F .text	00000014 free
04013958 g     F .text	00000004 __sinit_lock_acquire
040149bc g     F .text	00000148 __multadd
0400b740 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
04014994 g     F .text	00000028 _Bfree



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08408c14 	ori	at,at,560
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	008100f4 	movhi	r2,1027
 4000140:	10b66704 	addi	r2,r2,-9828
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	008100f4 	movhi	r2,1027
 4000158:	10b66704 	addi	r2,r2,-9828
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001e4:	00bfffc4 	movi	r2,-1
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001f0:	d0b24917 	ldw	r2,-14044(gp)
 40001f4:	10000726 	beq	r2,zero,4000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001f8:	d0b24917 	ldw	r2,-14044(gp)
 40001fc:	e0fffd17 	ldw	r3,-12(fp)
 4000200:	e1bffe17 	ldw	r6,-8(fp)
 4000204:	e17fff17 	ldw	r5,-4(fp)
 4000208:	1809883a 	mov	r4,r3
 400020c:	103ee83a 	callr	r2
 4000210:	00000206 	br	400021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4000218:	0005883a 	mov	r2,zero
}
 400021c:	e037883a 	mov	sp,fp
 4000220:	dfc00117 	ldw	ra,4(sp)
 4000224:	df000017 	ldw	fp,0(sp)
 4000228:	dec00204 	addi	sp,sp,8
 400022c:	f800283a 	ret

Disassembly of section .text:

04000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000238:	068100f4 	movhi	gp,1027
    ori gp, gp, %lo(_gp)
 400023c:	d683db14 	ori	gp,gp,3948
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000240:	008100b4 	movhi	r2,1026
    ori r2, r2, %lo(__bss_start)
 4000244:	10b61014 	ori	r2,r2,55360

    movhi r3, %hi(__bss_end)
 4000248:	00c100b4 	movhi	r3,1026
    ori r3, r3, %lo(__bss_end)
 400024c:	18f6a714 	ori	r3,r3,55964

    beq r2, r3, 1f
 4000250:	10c00326 	beq	r2,r3,4000260 <_start+0x30>

0:
    stw zero, (r2)
 4000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400025c:	10fffd36 	bltu	r2,r3,4000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000260:	401bba80 	call	401bba8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000264:	401bd440 	call	401bd44 <alt_main>

04000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000268:	003fff06 	br	4000268 <__alt_data_end+0xfc000268>

0400026c <SGTL5000_Reg_Rd>:
#include "sgtl5000.h"
#include "altera_avalon_i2c.h"
#include "altera_avalon_i2c_regs.h"

WORD SGTL5000_Reg_Rd (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR)
{
 400026c:	defff804 	addi	sp,sp,-32
 4000270:	dfc00715 	stw	ra,28(sp)
 4000274:	df000615 	stw	fp,24(sp)
 4000278:	df000604 	addi	fp,sp,24
 400027c:	e13ffe15 	stw	r4,-8(fp)
 4000280:	2805883a 	mov	r2,r5
 4000284:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[2];
	WORD value;
	buffer[0] = (ADDR & 0xFF00) >> 8;
 4000288:	e0bfff0b 	ldhu	r2,-4(fp)
 400028c:	1004d23a 	srli	r2,r2,8
 4000290:	e0bffd85 	stb	r2,-10(fp)
	buffer[1] = (ADDR & 0x00FF);
 4000294:	e0bfff0b 	ldhu	r2,-4(fp)
 4000298:	e0bffdc5 	stb	r2,-9(fp)

	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx_rx(dev,buffer,2,buffer,2,0);
 400029c:	e13ffd84 	addi	r4,fp,-10
 40002a0:	e0fffd84 	addi	r3,fp,-10
 40002a4:	d8000115 	stw	zero,4(sp)
 40002a8:	00800084 	movi	r2,2
 40002ac:	d8800015 	stw	r2,0(sp)
 40002b0:	200f883a 	mov	r7,r4
 40002b4:	01800084 	movi	r6,2
 40002b8:	180b883a 	mov	r5,r3
 40002bc:	e13ffe17 	ldw	r4,-8(fp)
 40002c0:	401d2b00 	call	401d2b0 <alt_avalon_i2c_master_tx_rx>
 40002c4:	e0bffc15 	stw	r2,-16(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
 40002c8:	e0bffc17 	ldw	r2,-16(fp)
 40002cc:	10000626 	beq	r2,zero,40002e8 <SGTL5000_Reg_Rd+0x7c>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
 40002d0:	e0bfff0b 	ldhu	r2,-4(fp)
 40002d4:	100b883a 	mov	r5,r2
 40002d8:	010100b4 	movhi	r4,1026
 40002dc:	2100a604 	addi	r4,r4,664
 40002e0:	400ef7c0 	call	400ef7c <printf>
		while (1)
		{
			//hang here
		}
 40002e4:	003fff06 	br	40002e4 <__alt_data_end+0xfc0002e4>
	}
	value = (buffer[0] << 8) | buffer[1];
 40002e8:	e0bffd83 	ldbu	r2,-10(fp)
 40002ec:	10803fcc 	andi	r2,r2,255
 40002f0:	1004923a 	slli	r2,r2,8
 40002f4:	1007883a 	mov	r3,r2
 40002f8:	e0bffdc3 	ldbu	r2,-9(fp)
 40002fc:	10803fcc 	andi	r2,r2,255
 4000300:	1884b03a 	or	r2,r3,r2
 4000304:	e0bffd0d 	sth	r2,-12(fp)
	return value;
 4000308:	e0bffd0b 	ldhu	r2,-12(fp)
}
 400030c:	e037883a 	mov	sp,fp
 4000310:	dfc00117 	ldw	ra,4(sp)
 4000314:	df000017 	ldw	fp,0(sp)
 4000318:	dec00204 	addi	sp,sp,8
 400031c:	f800283a 	ret

04000320 <SGTL5000_Reg_Wr>:

WORD SGTL5000_Reg_Wr (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR, WORD DATA)
{
 4000320:	defff904 	addi	sp,sp,-28
 4000324:	dfc00615 	stw	ra,24(sp)
 4000328:	df000515 	stw	fp,20(sp)
 400032c:	df000504 	addi	fp,sp,20
 4000330:	e13ffd15 	stw	r4,-12(fp)
 4000334:	2807883a 	mov	r3,r5
 4000338:	3005883a 	mov	r2,r6
 400033c:	e0fffe0d 	sth	r3,-8(fp)
 4000340:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[4];
	buffer[0] = (ADDR & 0xFF00) >> 8;
 4000344:	e0bffe0b 	ldhu	r2,-8(fp)
 4000348:	1004d23a 	srli	r2,r2,8
 400034c:	e0bffc05 	stb	r2,-16(fp)
	buffer[1] = (ADDR & 0x00FF);
 4000350:	e0bffe0b 	ldhu	r2,-8(fp)
 4000354:	e0bffc45 	stb	r2,-15(fp)
	buffer[2] = (DATA & 0xFF00) >> 8;
 4000358:	e0bfff0b 	ldhu	r2,-4(fp)
 400035c:	1004d23a 	srli	r2,r2,8
 4000360:	e0bffc85 	stb	r2,-14(fp)
	buffer[3] = (DATA & 0x00FF);
 4000364:	e0bfff0b 	ldhu	r2,-4(fp)
 4000368:	e0bffcc5 	stb	r2,-13(fp)


	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx(dev,buffer,4,0);
 400036c:	e0bffc04 	addi	r2,fp,-16
 4000370:	000f883a 	mov	r7,zero
 4000374:	01800104 	movi	r6,4
 4000378:	100b883a 	mov	r5,r2
 400037c:	e13ffd17 	ldw	r4,-12(fp)
 4000380:	401d08c0 	call	401d08c <alt_avalon_i2c_master_tx>
 4000384:	e0bffb15 	stw	r2,-20(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
 4000388:	e0bffb17 	ldw	r2,-20(fp)
 400038c:	10000626 	beq	r2,zero,40003a8 <SGTL5000_Reg_Wr+0x88>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
 4000390:	e0bffe0b 	ldhu	r2,-8(fp)
 4000394:	100b883a 	mov	r5,r2
 4000398:	010100b4 	movhi	r4,1026
 400039c:	2100a604 	addi	r4,r4,664
 40003a0:	400ef7c0 	call	400ef7c <printf>
		while (1)
		{
			//hang here
		}
 40003a4:	003fff06 	br	40003a4 <__alt_data_end+0xfc0003a4>
	}
	return DATA;
 40003a8:	e0bfff0b 	ldhu	r2,-4(fp)
}
 40003ac:	e037883a 	mov	sp,fp
 40003b0:	dfc00117 	ldw	ra,4(sp)
 40003b4:	df000017 	ldw	fp,0(sp)
 40003b8:	dec00204 	addi	sp,sp,8
 40003bc:	f800283a 	ret

040003c0 <setLED>:
#include "GenericTypeDefs.h"
#include "sgtl5000.h"


void setLED(int LED)
{
 40003c0:	defffe04 	addi	sp,sp,-8
 40003c4:	df000115 	stw	fp,4(sp)
 40003c8:	df000104 	addi	fp,sp,4
 40003cc:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
 40003d0:	00844404 	movi	r2,4368
 40003d4:	10c00037 	ldwio	r3,0(r2)
 40003d8:	01000044 	movi	r4,1
 40003dc:	e0bfff17 	ldw	r2,-4(fp)
 40003e0:	2084983a 	sll	r2,r4,r2
 40003e4:	1886b03a 	or	r3,r3,r2
 40003e8:	00844404 	movi	r2,4368
 40003ec:	10c00035 	stwio	r3,0(r2)
}
 40003f0:	0001883a 	nop
 40003f4:	e037883a 	mov	sp,fp
 40003f8:	df000017 	ldw	fp,0(sp)
 40003fc:	dec00104 	addi	sp,sp,4
 4000400:	f800283a 	ret

04000404 <clearLED>:

void clearLED(int LED)
{
 4000404:	defffe04 	addi	sp,sp,-8
 4000408:	df000115 	stw	fp,4(sp)
 400040c:	df000104 	addi	fp,sp,4
 4000410:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));
 4000414:	00844404 	movi	r2,4368
 4000418:	10c00037 	ldwio	r3,0(r2)
 400041c:	01000044 	movi	r4,1
 4000420:	e0bfff17 	ldw	r2,-4(fp)
 4000424:	2084983a 	sll	r2,r4,r2
 4000428:	0084303a 	nor	r2,zero,r2
 400042c:	1886703a 	and	r3,r3,r2
 4000430:	00844404 	movi	r2,4368
 4000434:	10c00035 	stwio	r3,0(r2)

}
 4000438:	0001883a 	nop
 400043c:	e037883a 	mov	sp,fp
 4000440:	df000017 	ldw	fp,0(sp)
 4000444:	dec00104 	addi	sp,sp,4
 4000448:	f800283a 	ret

0400044c <printSignedHex0>:

void printSignedHex0(signed char value)
{
 400044c:	defffc04 	addi	sp,sp,-16
 4000450:	dfc00315 	stw	ra,12(sp)
 4000454:	df000215 	stw	fp,8(sp)
 4000458:	df000204 	addi	fp,sp,8
 400045c:	2005883a 	mov	r2,r4
 4000460:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 4000464:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
 4000468:	e03ffe45 	stb	zero,-7(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 400046c:	00845804 	movi	r2,4448
 4000470:	10800037 	ldwio	r2,0(r2)
 4000474:	e0bffe8d 	sth	r2,-6(fp)
	if (value < 0)
 4000478:	e0bfff07 	ldb	r2,-4(fp)
 400047c:	1000060e 	bge	r2,zero,4000498 <printSignedHex0+0x4c>
	{
		setLED(11);
 4000480:	010002c4 	movi	r4,11
 4000484:	40003c00 	call	40003c0 <setLED>
		value = -value;
 4000488:	e0bfff03 	ldbu	r2,-4(fp)
 400048c:	0085c83a 	sub	r2,zero,r2
 4000490:	e0bfff05 	stb	r2,-4(fp)
 4000494:	00000206 	br	40004a0 <printSignedHex0+0x54>
	}
	else
	{
		clearLED(11);
 4000498:	010002c4 	movi	r4,11
 400049c:	40004040 	call	4000404 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 40004a0:	e0bfff03 	ldbu	r2,-4(fp)
 40004a4:	108018c4 	addi	r2,r2,99
 40004a8:	10803fcc 	andi	r2,r2,255
 40004ac:	108031f0 	cmpltui	r2,r2,199
 40004b0:	1000031e 	bne	r2,zero,40004c0 <printSignedHex0+0x74>
		setLED(13);
 40004b4:	01000344 	movi	r4,13
 40004b8:	40003c00 	call	40003c0 <setLED>
 40004bc:	00000206 	br	40004c8 <printSignedHex0+0x7c>
	else
		clearLED(13);
 40004c0:	01000344 	movi	r4,13
 40004c4:	40004040 	call	4000404 <clearLED>

	value = value % 100;
 40004c8:	e0bfff07 	ldb	r2,-4(fp)
 40004cc:	01401904 	movi	r5,100
 40004d0:	1009883a 	mov	r4,r2
 40004d4:	400d2380 	call	400d238 <__modsi3>
 40004d8:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 40004dc:	e0bfff07 	ldb	r2,-4(fp)
 40004e0:	01400284 	movi	r5,10
 40004e4:	1009883a 	mov	r4,r2
 40004e8:	400d1b40 	call	400d1b4 <__divsi3>
 40004ec:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
 40004f0:	e0bfff07 	ldb	r2,-4(fp)
 40004f4:	01400284 	movi	r5,10
 40004f8:	1009883a 	mov	r4,r2
 40004fc:	400d2380 	call	400d238 <__modsi3>
 4000500:	e0bffe45 	stb	r2,-7(fp)

	pio_val &= 0x00FF;
 4000504:	e0bffe8b 	ldhu	r2,-6(fp)
 4000508:	10803fcc 	andi	r2,r2,255
 400050c:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
 4000510:	e0bffe03 	ldbu	r2,-8(fp)
 4000514:	1004933a 	slli	r2,r2,12
 4000518:	1007883a 	mov	r3,r2
 400051c:	e0bffe8b 	ldhu	r2,-6(fp)
 4000520:	1884b03a 	or	r2,r3,r2
 4000524:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
 4000528:	e0bffe43 	ldbu	r2,-7(fp)
 400052c:	1004923a 	slli	r2,r2,8
 4000530:	1007883a 	mov	r3,r2
 4000534:	e0bffe8b 	ldhu	r2,-6(fp)
 4000538:	1884b03a 	or	r2,r3,r2
 400053c:	e0bffe8d 	sth	r2,-6(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 4000540:	e0fffe8b 	ldhu	r3,-6(fp)
 4000544:	00845804 	movi	r2,4448
 4000548:	10c00035 	stwio	r3,0(r2)
}
 400054c:	0001883a 	nop
 4000550:	e037883a 	mov	sp,fp
 4000554:	dfc00117 	ldw	ra,4(sp)
 4000558:	df000017 	ldw	fp,0(sp)
 400055c:	dec00204 	addi	sp,sp,8
 4000560:	f800283a 	ret

04000564 <printSignedHex1>:

void printSignedHex1(signed char value)
{
 4000564:	defffb04 	addi	sp,sp,-20
 4000568:	dfc00415 	stw	ra,16(sp)
 400056c:	df000315 	stw	fp,12(sp)
 4000570:	df000304 	addi	fp,sp,12
 4000574:	2005883a 	mov	r2,r4
 4000578:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 400057c:	e03ffd05 	stb	zero,-12(fp)
	BYTE ones = 0;
 4000580:	e03ffd45 	stb	zero,-11(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 4000584:	00845804 	movi	r2,4448
 4000588:	10800037 	ldwio	r2,0(r2)
 400058c:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0)
 4000590:	e0bfff07 	ldb	r2,-4(fp)
 4000594:	1000060e 	bge	r2,zero,40005b0 <printSignedHex1+0x4c>
	{
		setLED(10);
 4000598:	01000284 	movi	r4,10
 400059c:	40003c00 	call	40003c0 <setLED>
		value = -value;
 40005a0:	e0bfff03 	ldbu	r2,-4(fp)
 40005a4:	0085c83a 	sub	r2,zero,r2
 40005a8:	e0bfff05 	stb	r2,-4(fp)
 40005ac:	00000206 	br	40005b8 <printSignedHex1+0x54>
	}
	else
	{
		clearLED(10);
 40005b0:	01000284 	movi	r4,10
 40005b4:	40004040 	call	4000404 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 40005b8:	e0bfff03 	ldbu	r2,-4(fp)
 40005bc:	108018c4 	addi	r2,r2,99
 40005c0:	10803fcc 	andi	r2,r2,255
 40005c4:	108031f0 	cmpltui	r2,r2,199
 40005c8:	1000031e 	bne	r2,zero,40005d8 <printSignedHex1+0x74>
		setLED(12);
 40005cc:	01000304 	movi	r4,12
 40005d0:	40003c00 	call	40003c0 <setLED>
 40005d4:	00000206 	br	40005e0 <printSignedHex1+0x7c>
	else
		clearLED(12);
 40005d8:	01000304 	movi	r4,12
 40005dc:	40004040 	call	4000404 <clearLED>

	value = value % 100;
 40005e0:	e0bfff07 	ldb	r2,-4(fp)
 40005e4:	01401904 	movi	r5,100
 40005e8:	1009883a 	mov	r4,r2
 40005ec:	400d2380 	call	400d238 <__modsi3>
 40005f0:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 40005f4:	e0bfff07 	ldb	r2,-4(fp)
 40005f8:	01400284 	movi	r5,10
 40005fc:	1009883a 	mov	r4,r2
 4000600:	400d1b40 	call	400d1b4 <__divsi3>
 4000604:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 4000608:	e0bfff07 	ldb	r2,-4(fp)
 400060c:	01400284 	movi	r5,10
 4000610:	1009883a 	mov	r4,r2
 4000614:	400d2380 	call	400d238 <__modsi3>
 4000618:	e0bffd45 	stb	r2,-11(fp)
	tens = value / 10;
 400061c:	e0bfff07 	ldb	r2,-4(fp)
 4000620:	01400284 	movi	r5,10
 4000624:	1009883a 	mov	r4,r2
 4000628:	400d1b40 	call	400d1b4 <__divsi3>
 400062c:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 4000630:	e0bfff07 	ldb	r2,-4(fp)
 4000634:	01400284 	movi	r5,10
 4000638:	1009883a 	mov	r4,r2
 400063c:	400d2380 	call	400d238 <__modsi3>
 4000640:	e0bffd45 	stb	r2,-11(fp)

	pio_val &= 0xFF00;
 4000644:	e0bffe17 	ldw	r2,-8(fp)
 4000648:	10bfc00c 	andi	r2,r2,65280
 400064c:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
 4000650:	e0bffd03 	ldbu	r2,-12(fp)
 4000654:	1004913a 	slli	r2,r2,4
 4000658:	1007883a 	mov	r3,r2
 400065c:	e0bffe17 	ldw	r2,-8(fp)
 4000660:	10c4b03a 	or	r2,r2,r3
 4000664:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
 4000668:	e0bffd43 	ldbu	r2,-11(fp)
 400066c:	e0fffe17 	ldw	r3,-8(fp)
 4000670:	1884b03a 	or	r2,r3,r2
 4000674:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 4000678:	e0fffe17 	ldw	r3,-8(fp)
 400067c:	00845804 	movi	r2,4448
 4000680:	10c00035 	stwio	r3,0(r2)
}
 4000684:	0001883a 	nop
 4000688:	e037883a 	mov	sp,fp
 400068c:	dfc00117 	ldw	ra,4(sp)
 4000690:	df000017 	ldw	fp,0(sp)
 4000694:	dec00204 	addi	sp,sp,8
 4000698:	f800283a 	ret

0400069c <InitializeSGTL>:


void InitializeSGTL()
{
 400069c:	defffc04 	addi	sp,sp,-16
 40006a0:	dfc00315 	stw	ra,12(sp)
 40006a4:	df000215 	stw	fp,8(sp)
 40006a8:	df000204 	addi	fp,sp,8
	ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure
	//get a pointer to the Avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0"); //this has to reflect Platform Designer name
 40006ac:	010100b4 	movhi	r4,1026
 40006b0:	2100ae04 	addi	r4,r4,696
 40006b4:	401c6b40 	call	401c6b4 <alt_avalon_i2c_open>
 40006b8:	e0bffe15 	stw	r2,-8(fp)
	if (NULL==i2c_dev)						     //check the BSP if unsure
 40006bc:	e0bffe17 	ldw	r2,-8(fp)
 40006c0:	1000031e 	bne	r2,zero,40006d0 <InitializeSGTL+0x34>
	{
		printf("Error: Cannot find /dev/i2c_0\n");
 40006c4:	010100b4 	movhi	r4,1026
 40006c8:	2100b104 	addi	r4,r4,708
 40006cc:	400f0980 	call	400f098 <puts>
	}
	printf ("I2C Test Program\n");
 40006d0:	010100b4 	movhi	r4,1026
 40006d4:	2100b904 	addi	r4,r4,740
 40006d8:	400f0980 	call	400f098 <puts>

	alt_avalon_i2c_master_target_set(i2c_dev,0xA); //CODEC at address 0b0001010
 40006dc:	01400284 	movi	r5,10
 40006e0:	e13ffe17 	ldw	r4,-8(fp)
 40006e4:	401ce840 	call	401ce84 <alt_avalon_i2c_master_target_set>
	//print device ID (verify I2C is working)
	printf( "Device ID register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ID));
 40006e8:	000b883a 	mov	r5,zero
 40006ec:	e13ffe17 	ldw	r4,-8(fp)
 40006f0:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 40006f4:	10bfffcc 	andi	r2,r2,65535
 40006f8:	100b883a 	mov	r5,r2
 40006fc:	010100b4 	movhi	r4,1026
 4000700:	2100be04 	addi	r4,r4,760
 4000704:	400ef7c0 	call	400ef7c <printf>

	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
 4000708:	00800384 	movi	r2,14
 400070c:	e0bfff05 	stb	r2,-4(fp)
	WORD frac_divisor = (WORD)(((180633600.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
 4000710:	e0bfff03 	ldbu	r2,-4(fp)
 4000714:	1009883a 	mov	r4,r2
 4000718:	400ddd00 	call	400ddd0 <__floatunsisf>
 400071c:	1007883a 	mov	r3,r2
 4000720:	180b883a 	mov	r5,r3
 4000724:	011059f4 	movhi	r4,16743
 4000728:	210d8144 	addi	r4,r4,13829
 400072c:	400d87c0 	call	400d87c <__subsf3>
 4000730:	1007883a 	mov	r3,r2
 4000734:	1805883a 	mov	r2,r3
 4000738:	01514034 	movhi	r5,17664
 400073c:	1009883a 	mov	r4,r2
 4000740:	400d44c0 	call	400d44c <__mulsf3>
 4000744:	1007883a 	mov	r3,r2
 4000748:	1805883a 	mov	r2,r3
 400074c:	1009883a 	mov	r4,r2
 4000750:	400d1540 	call	400d154 <__fixunssfsi>
 4000754:	e0bfff8d 	sth	r2,-2(fp)
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
 4000758:	e0bfff03 	ldbu	r2,-4(fp)
 400075c:	e0ffff8b 	ldhu	r3,-2(fp)
 4000760:	180d883a 	mov	r6,r3
 4000764:	100b883a 	mov	r5,r2
 4000768:	010100b4 	movhi	r4,1026
 400076c:	2100c404 	addi	r4,r4,784
 4000770:	400ef7c0 	call	400ef7c <printf>
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
 4000774:	e0bfff03 	ldbu	r2,-4(fp)
 4000778:	100492fa 	slli	r2,r2,11
	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
	WORD frac_divisor = (WORD)(((180633600.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
 400077c:	1007883a 	mov	r3,r2
 4000780:	e0bfff8b 	ldhu	r2,-2(fp)
 4000784:	1884b03a 	or	r2,r3,r2
 4000788:	10bfffcc 	andi	r2,r2,65535
 400078c:	100d883a 	mov	r6,r2
 4000790:	01400c84 	movi	r5,50
 4000794:	e13ffe17 	ldw	r4,-8(fp)
 4000798:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
				frac_divisor << SGTL5000_PLL_FRAC_DIV_SHIFT);
	printf( "CHIP_PLL_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PLL_CTRL));
 400079c:	01400c84 	movi	r5,50
 40007a0:	e13ffe17 	ldw	r4,-8(fp)
 40007a4:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 40007a8:	10bfffcc 	andi	r2,r2,65535
 40007ac:	100b883a 	mov	r5,r2
 40007b0:	010100b4 	movhi	r4,1026
 40007b4:	2100d504 	addi	r4,r4,852
 40007b8:	400ef7c0 	call	400ef7c <printf>

	//configure power control, disable internal VDDD, VDDIO=3.3V, VDDA=VDDD=1.8V (ext)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_POWER, \
 40007bc:	01917f84 	movi	r6,17918
 40007c0:	01400c04 	movi	r5,48
 40007c4:	e13ffe17 	ldw	r4,-8(fp)
 40007c8:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
			SGTL5000_REFTOP_POWERUP|
			SGTL5000_HP_POWERUP|
			SGTL5000_DAC_POWERUP|
			SGTL5000_CAPLESS_HP_POWERUP|
			SGTL5000_ADC_POWERUP);
	printf( "CHIP_ANA_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_POWER));
 40007cc:	01400c04 	movi	r5,48
 40007d0:	e13ffe17 	ldw	r4,-8(fp)
 40007d4:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 40007d8:	10bfffcc 	andi	r2,r2,65535
 40007dc:	100b883a 	mov	r5,r2
 40007e0:	010100b4 	movhi	r4,1026
 40007e4:	2100dc04 	addi	r4,r4,880
 40007e8:	400ef7c0 	call	400ef7c <printf>

	//select internal ground bias to .9V (1.8V/2)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_REF_CTRL, 0x004E);
 40007ec:	01801384 	movi	r6,78
 40007f0:	01400a04 	movi	r5,40
 40007f4:	e13ffe17 	ldw	r4,-8(fp)
 40007f8:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
	printf( "CHIP_REF_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_REF_CTRL));
 40007fc:	01400a04 	movi	r5,40
 4000800:	e13ffe17 	ldw	r4,-8(fp)
 4000804:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000808:	10bfffcc 	andi	r2,r2,65535
 400080c:	100b883a 	mov	r5,r2
 4000810:	010100b4 	movhi	r4,1026
 4000814:	2100e404 	addi	r4,r4,912
 4000818:	400ef7c0 	call	400ef7c <printf>

	//enable core modules
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_DIG_POWER,\
 400081c:	018018c4 	movi	r6,99
 4000820:	01400084 	movi	r5,2
 4000824:	e13ffe17 	ldw	r4,-8(fp)
 4000828:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_EN|
			SGTL5000_DAC_EN|
			//SGTL5000_DAP_POWERUP| //disable digital audio processor in CODEC
			SGTL5000_I2S_OUT_POWERUP|
			SGTL5000_I2S_IN_POWERUP);
	printf( "CHIP_DIG_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_DIG_POWER));
 400082c:	01400084 	movi	r5,2
 4000830:	e13ffe17 	ldw	r4,-8(fp)
 4000834:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000838:	10bfffcc 	andi	r2,r2,65535
 400083c:	100b883a 	mov	r5,r2
 4000840:	010100b4 	movhi	r4,1026
 4000844:	2100eb04 	addi	r4,r4,940
 4000848:	400ef7c0 	call	400ef7c <printf>


	//MCLK is 12.5 MHz, configure clocks to use PLL
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_CLK_CTRL, \
 400084c:	018001c4 	movi	r6,7
 4000850:	01400104 	movi	r5,4
 4000854:	e13ffe17 	ldw	r4,-8(fp)
 4000858:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
			SGTL5000_SYS_FS_44_1k << SGTL5000_SYS_FS_SHIFT |
			SGTL5000_MCLK_FREQ_PLL << SGTL5000_MCLK_FREQ_SHIFT);
	printf( "CHIP_CLK_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_CLK_CTRL));
 400085c:	01400104 	movi	r5,4
 4000860:	e13ffe17 	ldw	r4,-8(fp)
 4000864:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000868:	10bfffcc 	andi	r2,r2,65535
 400086c:	100b883a 	mov	r5,r2
 4000870:	010100b4 	movhi	r4,1026
 4000874:	2100f304 	addi	r4,r4,972
 4000878:	400ef7c0 	call	400ef7c <printf>

	//Set as I2S master
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_I2S_CTRL, SGTL5000_I2S_MASTER);
 400087c:	01802004 	movi	r6,128
 4000880:	01400184 	movi	r5,6
 4000884:	e13ffe17 	ldw	r4,-8(fp)
 4000888:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
	printf( "CHIP_I2S_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_I2S_CTRL));
 400088c:	01400184 	movi	r5,6
 4000890:	e13ffe17 	ldw	r4,-8(fp)
 4000894:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000898:	10bfffcc 	andi	r2,r2,65535
 400089c:	100b883a 	mov	r5,r2
 40008a0:	010100b4 	movhi	r4,1026
 40008a4:	2100fa04 	addi	r4,r4,1000
 40008a8:	400ef7c0 	call	400ef7c <printf>

	//ADC input from Line
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_CTRL, \
 40008ac:	01800104 	movi	r6,4
 40008b0:	01400904 	movi	r5,36
 40008b4:	e13ffe17 	ldw	r4,-8(fp)
 40008b8:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_SEL_LINE_IN << SGTL5000_ADC_SEL_SHIFT);
	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
 40008bc:	01400904 	movi	r5,36
 40008c0:	e13ffe17 	ldw	r4,-8(fp)
 40008c4:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 40008c8:	10bfffcc 	andi	r2,r2,65535
 40008cc:	100b883a 	mov	r5,r2
 40008d0:	010100b4 	movhi	r4,1026
 40008d4:	21010104 	addi	r4,r4,1028
 40008d8:	400ef7c0 	call	400ef7c <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_SSS_CTRL, \
 40008dc:	01800404 	movi	r6,16
 40008e0:	01400284 	movi	r5,10
 40008e4:	e13ffe17 	ldw	r4,-8(fp)
 40008e8:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
			SGTL5000_DAC_SEL_I2S_IN << SGTL5000_DAC_SEL_SHIFT |
			SGTL5000_I2S_OUT_SEL_ADC << SGTL5000_I2S_OUT_SEL_SHIFT);
	printf( "CHIP_SSS_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_SSS_CTRL));
 40008ec:	01400284 	movi	r5,10
 40008f0:	e13ffe17 	ldw	r4,-8(fp)
 40008f4:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 40008f8:	10bfffcc 	andi	r2,r2,65535
 40008fc:	100b883a 	mov	r5,r2
 4000900:	010100b4 	movhi	r4,1026
 4000904:	21010804 	addi	r4,r4,1056
 4000908:	400ef7c0 	call	400ef7c <printf>

	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
 400090c:	01400904 	movi	r5,36
 4000910:	e13ffe17 	ldw	r4,-8(fp)
 4000914:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000918:	10bfffcc 	andi	r2,r2,65535
 400091c:	100b883a 	mov	r5,r2
 4000920:	010100b4 	movhi	r4,1026
 4000924:	21010104 	addi	r4,r4,1028
 4000928:	400ef7c0 	call	400ef7c <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL, 0x0000);
 400092c:	000d883a 	mov	r6,zero
 4000930:	01400384 	movi	r5,14
 4000934:	e13ffe17 	ldw	r4,-8(fp)
 4000938:	40003200 	call	4000320 <SGTL5000_Reg_Wr>
	printf( "CHIP_ADCDAC_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL));
 400093c:	01400384 	movi	r5,14
 4000940:	e13ffe17 	ldw	r4,-8(fp)
 4000944:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000948:	10bfffcc 	andi	r2,r2,65535
 400094c:	100b883a 	mov	r5,r2
 4000950:	010100b4 	movhi	r4,1026
 4000954:	21010f04 	addi	r4,r4,1084
 4000958:	400ef7c0 	call	400ef7c <printf>
	printf( "CHIP_PAD_STRENGTH register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PAD_STRENGTH));
 400095c:	01400504 	movi	r5,20
 4000960:	e13ffe17 	ldw	r4,-8(fp)
 4000964:	400026c0 	call	400026c <SGTL5000_Reg_Rd>
 4000968:	10bfffcc 	andi	r2,r2,65535
 400096c:	100b883a 	mov	r5,r2
 4000970:	010100b4 	movhi	r4,1026
 4000974:	21011704 	addi	r4,r4,1116
 4000978:	400ef7c0 	call	400ef7c <printf>

}
 400097c:	0001883a 	nop
 4000980:	e037883a 	mov	sp,fp
 4000984:	dfc00117 	ldw	ra,4(sp)
 4000988:	df000017 	ldw	fp,0(sp)
 400098c:	dec00204 	addi	sp,sp,8
 4000990:	f800283a 	ret

04000994 <_ZN6SPI_SS5WriteEh>:
#include "../include/Port.h"
#include <stdio.h>
typedef uint8_t DataT;
void SPI_SS::Write(DataT value) {
 4000994:	defffd04 	addi	sp,sp,-12
 4000998:	dfc00215 	stw	ra,8(sp)
 400099c:	df000115 	stw	fp,4(sp)
 40009a0:	df000104 	addi	fp,sp,4
 40009a4:	2005883a 	mov	r2,r4
 40009a8:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Write\n");
 40009ac:	010100b4 	movhi	r4,1026
 40009b0:	21011f04 	addi	r4,r4,1148
 40009b4:	400f0980 	call	400f098 <puts>
}
 40009b8:	0001883a 	nop
 40009bc:	e037883a 	mov	sp,fp
 40009c0:	dfc00117 	ldw	ra,4(sp)
 40009c4:	df000017 	ldw	fp,0(sp)
 40009c8:	dec00204 	addi	sp,sp,8
 40009cc:	f800283a 	ret

040009d0 <_ZN6SPI_SS11ClearAndSetEhh>:
void SPI_SS::ClearAndSet(DataT clearMask, DataT value) {
 40009d0:	defffc04 	addi	sp,sp,-16
 40009d4:	dfc00315 	stw	ra,12(sp)
 40009d8:	df000215 	stw	fp,8(sp)
 40009dc:	df000204 	addi	fp,sp,8
 40009e0:	2007883a 	mov	r3,r4
 40009e4:	2805883a 	mov	r2,r5
 40009e8:	e0fffe05 	stb	r3,-8(fp)
 40009ec:	e0bfff05 	stb	r2,-4(fp)
	printf("Port ClearAndSet\n");
 40009f0:	010100b4 	movhi	r4,1026
 40009f4:	21012204 	addi	r4,r4,1160
 40009f8:	400f0980 	call	400f098 <puts>
}
 40009fc:	0001883a 	nop
 4000a00:	e037883a 	mov	sp,fp
 4000a04:	dfc00117 	ldw	ra,4(sp)
 4000a08:	df000017 	ldw	fp,0(sp)
 4000a0c:	dec00204 	addi	sp,sp,8
 4000a10:	f800283a 	ret

04000a14 <_ZN6SPI_SS4ReadEv>:
DataT SPI_SS::Read() {
 4000a14:	defffe04 	addi	sp,sp,-8
 4000a18:	dfc00115 	stw	ra,4(sp)
 4000a1c:	df000015 	stw	fp,0(sp)
 4000a20:	d839883a 	mov	fp,sp
	printf("Port Read\n");
 4000a24:	010100b4 	movhi	r4,1026
 4000a28:	21012704 	addi	r4,r4,1180
 4000a2c:	400f0980 	call	400f098 <puts>
}
 4000a30:	0001883a 	nop
 4000a34:	e037883a 	mov	sp,fp
 4000a38:	dfc00117 	ldw	ra,4(sp)
 4000a3c:	df000017 	ldw	fp,0(sp)
 4000a40:	dec00204 	addi	sp,sp,8
 4000a44:	f800283a 	ret

04000a48 <_ZN6SPI_SS8DirWriteEh>:
void SPI_SS::DirWrite(DataT value) {
 4000a48:	defffd04 	addi	sp,sp,-12
 4000a4c:	dfc00215 	stw	ra,8(sp)
 4000a50:	df000115 	stw	fp,4(sp)
 4000a54:	df000104 	addi	fp,sp,4
 4000a58:	2005883a 	mov	r2,r4
 4000a5c:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirWrite\n");
 4000a60:	010100b4 	movhi	r4,1026
 4000a64:	21012a04 	addi	r4,r4,1192
 4000a68:	400f0980 	call	400f098 <puts>
}
 4000a6c:	0001883a 	nop
 4000a70:	e037883a 	mov	sp,fp
 4000a74:	dfc00117 	ldw	ra,4(sp)
 4000a78:	df000017 	ldw	fp,0(sp)
 4000a7c:	dec00204 	addi	sp,sp,8
 4000a80:	f800283a 	ret

04000a84 <_ZN6SPI_SS7DirReadEv>:
DataT SPI_SS::DirRead() {
 4000a84:	defffe04 	addi	sp,sp,-8
 4000a88:	dfc00115 	stw	ra,4(sp)
 4000a8c:	df000015 	stw	fp,0(sp)
 4000a90:	d839883a 	mov	fp,sp
	printf("Port DirRead\n");
 4000a94:	010100b4 	movhi	r4,1026
 4000a98:	21012e04 	addi	r4,r4,1208
 4000a9c:	400f0980 	call	400f098 <puts>
}
 4000aa0:	0001883a 	nop
 4000aa4:	e037883a 	mov	sp,fp
 4000aa8:	dfc00117 	ldw	ra,4(sp)
 4000aac:	df000017 	ldw	fp,0(sp)
 4000ab0:	dec00204 	addi	sp,sp,8
 4000ab4:	f800283a 	ret

04000ab8 <_ZN6SPI_SS3SetEh>:
void SPI_SS::Set(DataT value) {
 4000ab8:	defffd04 	addi	sp,sp,-12
 4000abc:	dfc00215 	stw	ra,8(sp)
 4000ac0:	df000115 	stw	fp,4(sp)
 4000ac4:	df000104 	addi	fp,sp,4
 4000ac8:	2005883a 	mov	r2,r4
 4000acc:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Set\n");
 4000ad0:	010100b4 	movhi	r4,1026
 4000ad4:	21013204 	addi	r4,r4,1224
 4000ad8:	400f0980 	call	400f098 <puts>
}
 4000adc:	0001883a 	nop
 4000ae0:	e037883a 	mov	sp,fp
 4000ae4:	dfc00117 	ldw	ra,4(sp)
 4000ae8:	df000017 	ldw	fp,0(sp)
 4000aec:	dec00204 	addi	sp,sp,8
 4000af0:	f800283a 	ret

04000af4 <_ZN6SPI_SS5ClearEh>:
void SPI_SS::Clear(DataT value) {
 4000af4:	defffd04 	addi	sp,sp,-12
 4000af8:	dfc00215 	stw	ra,8(sp)
 4000afc:	df000115 	stw	fp,4(sp)
 4000b00:	df000104 	addi	fp,sp,4
 4000b04:	2005883a 	mov	r2,r4
 4000b08:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Clear\n");
 4000b0c:	010100b4 	movhi	r4,1026
 4000b10:	21013504 	addi	r4,r4,1236
 4000b14:	400f0980 	call	400f098 <puts>
}
 4000b18:	0001883a 	nop
 4000b1c:	e037883a 	mov	sp,fp
 4000b20:	dfc00117 	ldw	ra,4(sp)
 4000b24:	df000017 	ldw	fp,0(sp)
 4000b28:	dec00204 	addi	sp,sp,8
 4000b2c:	f800283a 	ret

04000b30 <_ZN6SPI_SS6ToggleEh>:
void SPI_SS::Toggle(DataT value) {
 4000b30:	defffd04 	addi	sp,sp,-12
 4000b34:	dfc00215 	stw	ra,8(sp)
 4000b38:	df000115 	stw	fp,4(sp)
 4000b3c:	df000104 	addi	fp,sp,4
 4000b40:	2005883a 	mov	r2,r4
 4000b44:	e0bfff05 	stb	r2,-4(fp)
	printf("Port Toggle\n");
 4000b48:	010100b4 	movhi	r4,1026
 4000b4c:	21013804 	addi	r4,r4,1248
 4000b50:	400f0980 	call	400f098 <puts>
}
 4000b54:	0001883a 	nop
 4000b58:	e037883a 	mov	sp,fp
 4000b5c:	dfc00117 	ldw	ra,4(sp)
 4000b60:	df000017 	ldw	fp,0(sp)
 4000b64:	dec00204 	addi	sp,sp,8
 4000b68:	f800283a 	ret

04000b6c <_ZN6SPI_SS6DirSetEh>:
void SPI_SS::DirSet(DataT value) {
 4000b6c:	defffd04 	addi	sp,sp,-12
 4000b70:	dfc00215 	stw	ra,8(sp)
 4000b74:	df000115 	stw	fp,4(sp)
 4000b78:	df000104 	addi	fp,sp,4
 4000b7c:	2005883a 	mov	r2,r4
 4000b80:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirSet\n");
 4000b84:	010100b4 	movhi	r4,1026
 4000b88:	21013b04 	addi	r4,r4,1260
 4000b8c:	400f0980 	call	400f098 <puts>
}
 4000b90:	0001883a 	nop
 4000b94:	e037883a 	mov	sp,fp
 4000b98:	dfc00117 	ldw	ra,4(sp)
 4000b9c:	df000017 	ldw	fp,0(sp)
 4000ba0:	dec00204 	addi	sp,sp,8
 4000ba4:	f800283a 	ret

04000ba8 <_ZN6SPI_SS8DirClearEh>:
void SPI_SS::DirClear(DataT value) {
 4000ba8:	defffd04 	addi	sp,sp,-12
 4000bac:	dfc00215 	stw	ra,8(sp)
 4000bb0:	df000115 	stw	fp,4(sp)
 4000bb4:	df000104 	addi	fp,sp,4
 4000bb8:	2005883a 	mov	r2,r4
 4000bbc:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirClear\n");
 4000bc0:	010100b4 	movhi	r4,1026
 4000bc4:	21013e04 	addi	r4,r4,1272
 4000bc8:	400f0980 	call	400f098 <puts>
}
 4000bcc:	0001883a 	nop
 4000bd0:	e037883a 	mov	sp,fp
 4000bd4:	dfc00117 	ldw	ra,4(sp)
 4000bd8:	df000017 	ldw	fp,0(sp)
 4000bdc:	dec00204 	addi	sp,sp,8
 4000be0:	f800283a 	ret

04000be4 <_ZN6SPI_SS9DirToggleEh>:
void SPI_SS::DirToggle(DataT value) {
 4000be4:	defffd04 	addi	sp,sp,-12
 4000be8:	dfc00215 	stw	ra,8(sp)
 4000bec:	df000115 	stw	fp,4(sp)
 4000bf0:	df000104 	addi	fp,sp,4
 4000bf4:	2005883a 	mov	r2,r4
 4000bf8:	e0bfff05 	stb	r2,-4(fp)
	printf("Port DirToggle\n");
 4000bfc:	010100b4 	movhi	r4,1026
 4000c00:	21014204 	addi	r4,r4,1288
 4000c04:	400f0980 	call	400f098 <puts>
}
 4000c08:	0001883a 	nop
 4000c0c:	e037883a 	mov	sp,fp
 4000c10:	dfc00117 	ldw	ra,4(sp)
 4000c14:	df000017 	ldw	fp,0(sp)
 4000c18:	dec00204 	addi	sp,sp,8
 4000c1c:	f800283a 	ret

04000c20 <_ZN6SPI_SS7PinReadEv>:
DataT SPI_SS::PinRead() {
 4000c20:	defffe04 	addi	sp,sp,-8
 4000c24:	dfc00115 	stw	ra,4(sp)
 4000c28:	df000015 	stw	fp,0(sp)
 4000c2c:	d839883a 	mov	fp,sp
	printf("Port PinRead\n");
 4000c30:	010100b4 	movhi	r4,1026
 4000c34:	21014604 	addi	r4,r4,1304
 4000c38:	400f0980 	call	400f098 <puts>
}
 4000c3c:	0001883a 	nop
 4000c40:	e037883a 	mov	sp,fp
 4000c44:	dfc00117 	ldw	ra,4(sp)
 4000c48:	df000017 	ldw	fp,0(sp)
 4000c4c:	dec00204 	addi	sp,sp,8
 4000c50:	f800283a 	ret

04000c54 <_Z14alt_busy_sleepj>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4000c54:	defffa04 	addi	sp,sp,-24
 4000c58:	dfc00515 	stw	ra,20(sp)
 4000c5c:	df000415 	stw	fp,16(sp)
 4000c60:	df000404 	addi	fp,sp,16
 4000c64:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;

  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 4000c68:	00800244 	movi	r2,9
 4000c6c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4000c70:	014003f4 	movhi	r5,15
 4000c74:	29509004 	addi	r5,r5,16960
 4000c78:	e13ffd17 	ldw	r4,-12(fp)
 4000c7c:	400d3680 	call	400d368 <__mulsi3>
 4000c80:	100b883a 	mov	r5,r2
 4000c84:	0100bef4 	movhi	r4,763
 4000c88:	213c2004 	addi	r4,r4,-3968
 4000c8c:	400d2ac0 	call	400d2ac <__udivsi3>
  {
    cycles_per_loop = 3;
  }


  big_loops = us / (INT_MAX/
 4000c90:	100b883a 	mov	r5,r2
 4000c94:	01200034 	movhi	r4,32768
 4000c98:	213fffc4 	addi	r4,r4,-1
 4000c9c:	400d2ac0 	call	400d2ac <__udivsi3>
 4000ca0:	100b883a 	mov	r5,r2
 4000ca4:	e13fff17 	ldw	r4,-4(fp)
 4000ca8:	400d2ac0 	call	400d2ac <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4000cac:	e0bffe15 	stw	r2,-8(fp)

  if (big_loops)
 4000cb0:	e0bffe17 	ldw	r2,-8(fp)
 4000cb4:	10002a26 	beq	r2,zero,4000d60 <_Z14alt_busy_sleepj+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4000cb8:	e03ffc15 	stw	zero,-16(fp)
 4000cbc:	e0fffc17 	ldw	r3,-16(fp)
 4000cc0:	e0bffe17 	ldw	r2,-8(fp)
 4000cc4:	1880180e 	bge	r3,r2,4000d28 <_Z14alt_busy_sleepj+0xd4>
        "\n\tbne %0,zero,0b"
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
 4000cc8:	00a00034 	movhi	r2,32768
 4000ccc:	10bfffc4 	addi	r2,r2,-1
 4000cd0:	10bfffc4 	addi	r2,r2,-1
 4000cd4:	103ffe1e 	bne	r2,zero,4000cd0 <__alt_data_end+0xfc000cd0>
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4000cd8:	014003f4 	movhi	r5,15
 4000cdc:	29509004 	addi	r5,r5,16960
 4000ce0:	e13ffd17 	ldw	r4,-12(fp)
 4000ce4:	400d3680 	call	400d368 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4000ce8:	100b883a 	mov	r5,r2
 4000cec:	0100bef4 	movhi	r4,763
 4000cf0:	213c2004 	addi	r4,r4,-3968
 4000cf4:	400d2ac0 	call	400d2ac <__udivsi3>
 4000cf8:	100b883a 	mov	r5,r2
 4000cfc:	01200034 	movhi	r4,32768
 4000d00:	213fffc4 	addi	r4,r4,-1
 4000d04:	400d2ac0 	call	400d2ac <__udivsi3>
 4000d08:	1007883a 	mov	r3,r2
      (cycles_per_loop * 1000000)));
 4000d0c:	e0bfff17 	ldw	r2,-4(fp)
 4000d10:	10c5c83a 	sub	r2,r2,r3
 4000d14:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4000d18:	e0bffc17 	ldw	r2,-16(fp)
 4000d1c:	10800044 	addi	r2,r2,1
 4000d20:	e0bffc15 	stw	r2,-16(fp)
 4000d24:	003fe506 	br	4000cbc <__alt_data_end+0xfc000cbc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4000d28:	014003f4 	movhi	r5,15
 4000d2c:	29509004 	addi	r5,r5,16960
 4000d30:	e13ffd17 	ldw	r4,-12(fp)
 4000d34:	400d3680 	call	400d368 <__mulsi3>
 4000d38:	100b883a 	mov	r5,r2
 4000d3c:	0100bef4 	movhi	r4,763
 4000d40:	213c2004 	addi	r4,r4,-3968
 4000d44:	400d2ac0 	call	400d2ac <__udivsi3>
 4000d48:	e17fff17 	ldw	r5,-4(fp)
 4000d4c:	1009883a 	mov	r4,r2
 4000d50:	400d3680 	call	400d368 <__mulsi3>
 4000d54:	10bfffc4 	addi	r2,r2,-1
 4000d58:	103ffe1e 	bne	r2,zero,4000d54 <__alt_data_end+0xfc000d54>
 4000d5c:	00000d06 	br	4000d94 <_Z14alt_busy_sleepj+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4000d60:	014003f4 	movhi	r5,15
 4000d64:	29509004 	addi	r5,r5,16960
 4000d68:	e13ffd17 	ldw	r4,-12(fp)
 4000d6c:	400d3680 	call	400d368 <__mulsi3>
 4000d70:	100b883a 	mov	r5,r2
 4000d74:	0100bef4 	movhi	r4,763
 4000d78:	213c2004 	addi	r4,r4,-3968
 4000d7c:	400d2ac0 	call	400d2ac <__udivsi3>
 4000d80:	e17fff17 	ldw	r5,-4(fp)
 4000d84:	1009883a 	mov	r4,r2
 4000d88:	400d3680 	call	400d368 <__mulsi3>
 4000d8c:	10bfffc4 	addi	r2,r2,-1
 4000d90:	00bffe16 	blt	zero,r2,4000d8c <__alt_data_end+0xfc000d8c>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4000d94:	0005883a 	mov	r2,zero
}
 4000d98:	e037883a 	mov	sp,fp
 4000d9c:	dfc00117 	ldw	ra,4(sp)
 4000da0:	df000017 	ldw	fp,0(sp)
 4000da4:	dec00204 	addi	sp,sp,8
 4000da8:	f800283a 	ret

04000dac <_Z5delaym>:

void delay(uint32_t a) {
 4000dac:	defffc04 	addi	sp,sp,-16
 4000db0:	dfc00315 	stw	ra,12(sp)
 4000db4:	df000215 	stw	fp,8(sp)
 4000db8:	df000204 	addi	fp,sp,8
 4000dbc:	e13fff15 	stw	r4,-4(fp)
//	alt_busy_sleep(1000*a);
	clock_t start = clock();
 4000dc0:	400e45c0 	call	400e45c <clock>
 4000dc4:	e0bffe15 	stw	r2,-8(fp)
	while (clock() - start < a) {}
 4000dc8:	400e45c0 	call	400e45c <clock>
 4000dcc:	1007883a 	mov	r3,r2
 4000dd0:	e0bffe17 	ldw	r2,-8(fp)
 4000dd4:	1887c83a 	sub	r3,r3,r2
 4000dd8:	e0bfff17 	ldw	r2,-4(fp)
 4000ddc:	1885803a 	cmpltu	r2,r3,r2
 4000de0:	10803fcc 	andi	r2,r2,255
 4000de4:	10000126 	beq	r2,zero,4000dec <_Z5delaym+0x40>
 4000de8:	003ff706 	br	4000dc8 <__alt_data_end+0xfc000dc8>
}
 4000dec:	0001883a 	nop
 4000df0:	e037883a 	mov	sp,fp
 4000df4:	dfc00117 	ldw	ra,4(sp)
 4000df8:	df000017 	ldw	fp,0(sp)
 4000dfc:	dec00204 	addi	sp,sp,8
 4000e00:	f800283a 	ret

04000e04 <_Z6millisv>:
uint32_t millis() {
 4000e04:	defffe04 	addi	sp,sp,-8
 4000e08:	dfc00115 	stw	ra,4(sp)
 4000e0c:	df000015 	stw	fp,0(sp)
 4000e10:	d839883a 	mov	fp,sp
	return (uint32_t) clock();
 4000e14:	400e45c0 	call	400e45c <clock>
}
 4000e18:	e037883a 	mov	sp,fp
 4000e1c:	dfc00117 	ldw	ra,4(sp)
 4000e20:	df000017 	ldw	fp,0(sp)
 4000e24:	dec00204 	addi	sp,sp,8
 4000e28:	f800283a 	ret

04000e2c <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 4000e2c:	defffd04 	addi	sp,sp,-12
 4000e30:	dfc00215 	stw	ra,8(sp)
 4000e34:	df000115 	stw	fp,4(sp)
 4000e38:	df000104 	addi	fp,sp,4
 4000e3c:	e13fff15 	stw	r4,-4(fp)
 4000e40:	e13fff17 	ldw	r4,-4(fp)
 4000e44:	400932c0 	call	400932c <_ZN8MAX3421eC1Ev>
 4000e48:	e0bfff17 	ldw	r2,-4(fp)
 4000e4c:	1009883a 	mov	r4,r2
 4000e50:	40033980 	call	4003398 <_ZN15AddressPoolImplILh16EEC1Ev>
 4000e54:	e0bfff17 	ldw	r2,-4(fp)
 4000e58:	10002e05 	stb	zero,184(r2)
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 4000e5c:	00800444 	movi	r2,17
 4000e60:	d0b23545 	stb	r2,-14123(gp)
        init();
 4000e64:	e13fff17 	ldw	r4,-4(fp)
 4000e68:	4000e840 	call	4000e84 <_ZN3USB4initEv>
}
 4000e6c:	0001883a 	nop
 4000e70:	e037883a 	mov	sp,fp
 4000e74:	dfc00117 	ldw	ra,4(sp)
 4000e78:	df000017 	ldw	fp,0(sp)
 4000e7c:	dec00204 	addi	sp,sp,8
 4000e80:	f800283a 	ret

04000e84 <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 4000e84:	defffe04 	addi	sp,sp,-8
 4000e88:	df000115 	stw	fp,4(sp)
 4000e8c:	df000104 	addi	fp,sp,4
 4000e90:	e13fff15 	stw	r4,-4(fp)
        //devConfigIndex = 0;
        bmHubPre = 0;
 4000e94:	e0bfff17 	ldw	r2,-4(fp)
 4000e98:	10002e05 	stb	zero,184(r2)
}
 4000e9c:	0001883a 	nop
 4000ea0:	e037883a 	mov	sp,fp
 4000ea4:	df000017 	ldw	fp,0(sp)
 4000ea8:	dec00104 	addi	sp,sp,4
 4000eac:	f800283a 	ret

04000eb0 <_ZN3USB15getUsbTaskStateEv>:

uint8_t USB::getUsbTaskState(void) {
 4000eb0:	defffe04 	addi	sp,sp,-8
 4000eb4:	df000115 	stw	fp,4(sp)
 4000eb8:	df000104 	addi	fp,sp,4
 4000ebc:	e13fff15 	stw	r4,-4(fp)
        return ( usb_task_state);
 4000ec0:	d0b23543 	ldbu	r2,-14123(gp)
}
 4000ec4:	e037883a 	mov	sp,fp
 4000ec8:	df000017 	ldw	fp,0(sp)
 4000ecc:	dec00104 	addi	sp,sp,4
 4000ed0:	f800283a 	ret

04000ed4 <_ZN3USB15setUsbTaskStateEh>:

void USB::setUsbTaskState(uint8_t state) {
 4000ed4:	defffd04 	addi	sp,sp,-12
 4000ed8:	df000215 	stw	fp,8(sp)
 4000edc:	df000204 	addi	fp,sp,8
 4000ee0:	e13ffe15 	stw	r4,-8(fp)
 4000ee4:	2805883a 	mov	r2,r5
 4000ee8:	e0bfff05 	stb	r2,-4(fp)
        usb_task_state = state;
 4000eec:	e0bfff03 	ldbu	r2,-4(fp)
 4000ef0:	d0b23545 	stb	r2,-14123(gp)
}
 4000ef4:	0001883a 	nop
 4000ef8:	e037883a 	mov	sp,fp
 4000efc:	df000017 	ldw	fp,0(sp)
 4000f00:	dec00104 	addi	sp,sp,4
 4000f04:	f800283a 	ret

04000f08 <_ZN3USB14getEpInfoEntryEhh>:

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 4000f08:	defff804 	addi	sp,sp,-32
 4000f0c:	dfc00715 	stw	ra,28(sp)
 4000f10:	df000615 	stw	fp,24(sp)
 4000f14:	df000604 	addi	fp,sp,24
 4000f18:	e13ffd15 	stw	r4,-12(fp)
 4000f1c:	2807883a 	mov	r3,r5
 4000f20:	3005883a 	mov	r2,r6
 4000f24:	e0fffe05 	stb	r3,-8(fp)
 4000f28:	e0bfff05 	stb	r2,-4(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 4000f2c:	e0bffd17 	ldw	r2,-12(fp)
 4000f30:	e0fffe03 	ldbu	r3,-8(fp)
 4000f34:	180b883a 	mov	r5,r3
 4000f38:	1009883a 	mov	r4,r2
 4000f3c:	40034640 	call	4003464 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 4000f40:	e0bffc15 	stw	r2,-16(fp)

        if(!p || !p->epinfo)
 4000f44:	e0bffc17 	ldw	r2,-16(fp)
 4000f48:	10000c26 	beq	r2,zero,4000f7c <_ZN3USB14getEpInfoEntryEhh+0x74>
 4000f4c:	e0bffc17 	ldw	r2,-16(fp)
 4000f50:	10c00003 	ldbu	r3,0(r2)
 4000f54:	11000043 	ldbu	r4,1(r2)
 4000f58:	2008923a 	slli	r4,r4,8
 4000f5c:	20c6b03a 	or	r3,r4,r3
 4000f60:	11000083 	ldbu	r4,2(r2)
 4000f64:	2008943a 	slli	r4,r4,16
 4000f68:	20c6b03a 	or	r3,r4,r3
 4000f6c:	108000c3 	ldbu	r2,3(r2)
 4000f70:	1004963a 	slli	r2,r2,24
 4000f74:	10c4b03a 	or	r2,r2,r3
 4000f78:	1000021e 	bne	r2,zero,4000f84 <_ZN3USB14getEpInfoEntryEhh+0x7c>
                return NULL;
 4000f7c:	0005883a 	mov	r2,zero
 4000f80:	00002106 	br	4001008 <_ZN3USB14getEpInfoEntryEhh+0x100>

        EpInfo *pep = p->epinfo;
 4000f84:	e0bffc17 	ldw	r2,-16(fp)
 4000f88:	10c00003 	ldbu	r3,0(r2)
 4000f8c:	11000043 	ldbu	r4,1(r2)
 4000f90:	2008923a 	slli	r4,r4,8
 4000f94:	20c6b03a 	or	r3,r4,r3
 4000f98:	11000083 	ldbu	r4,2(r2)
 4000f9c:	2008943a 	slli	r4,r4,16
 4000fa0:	20c6b03a 	or	r3,r4,r3
 4000fa4:	108000c3 	ldbu	r2,3(r2)
 4000fa8:	1004963a 	slli	r2,r2,24
 4000fac:	10c4b03a 	or	r2,r2,r3
 4000fb0:	e0bffa15 	stw	r2,-24(fp)

        for(uint8_t i = 0; i < p->epcount; i++) {
 4000fb4:	e03ffb05 	stb	zero,-20(fp)
 4000fb8:	e0bffc17 	ldw	r2,-16(fp)
 4000fbc:	10800143 	ldbu	r2,5(r2)
 4000fc0:	10803fcc 	andi	r2,r2,255
 4000fc4:	e0fffb03 	ldbu	r3,-20(fp)
 4000fc8:	18800e2e 	bgeu	r3,r2,4001004 <_ZN3USB14getEpInfoEntryEhh+0xfc>
                if((pep)->epAddr == ep)
 4000fcc:	e0bffa17 	ldw	r2,-24(fp)
 4000fd0:	10800003 	ldbu	r2,0(r2)
 4000fd4:	10c03fcc 	andi	r3,r2,255
 4000fd8:	e0bfff03 	ldbu	r2,-4(fp)
 4000fdc:	1880021e 	bne	r3,r2,4000fe8 <_ZN3USB14getEpInfoEntryEhh+0xe0>
                        return pep;
 4000fe0:	e0bffa17 	ldw	r2,-24(fp)
 4000fe4:	00000806 	br	4001008 <_ZN3USB14getEpInfoEntryEhh+0x100>

                pep++;
 4000fe8:	e0bffa17 	ldw	r2,-24(fp)
 4000fec:	108000c4 	addi	r2,r2,3
 4000ff0:	e0bffa15 	stw	r2,-24(fp)
        if(!p || !p->epinfo)
                return NULL;

        EpInfo *pep = p->epinfo;

        for(uint8_t i = 0; i < p->epcount; i++) {
 4000ff4:	e0bffb03 	ldbu	r2,-20(fp)
 4000ff8:	10800044 	addi	r2,r2,1
 4000ffc:	e0bffb05 	stb	r2,-20(fp)
 4001000:	003fed06 	br	4000fb8 <__alt_data_end+0xfc000fb8>
                if((pep)->epAddr == ep)
                        return pep;

                pep++;
        }
        return NULL;
 4001004:	0005883a 	mov	r2,zero
}
 4001008:	e037883a 	mov	sp,fp
 400100c:	dfc00117 	ldw	ra,4(sp)
 4001010:	df000017 	ldw	fp,0(sp)
 4001014:	dec00204 	addi	sp,sp,8
 4001018:	f800283a 	ret

0400101c <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 400101c:	defff904 	addi	sp,sp,-28
 4001020:	dfc00615 	stw	ra,24(sp)
 4001024:	df000515 	stw	fp,20(sp)
 4001028:	df000504 	addi	fp,sp,20
 400102c:	e13ffc15 	stw	r4,-16(fp)
 4001030:	2807883a 	mov	r3,r5
 4001034:	3005883a 	mov	r2,r6
 4001038:	e1ffff15 	stw	r7,-4(fp)
 400103c:	e0fffd05 	stb	r3,-12(fp)
 4001040:	e0bffe05 	stb	r2,-8(fp)
        if(!eprecord_ptr)
 4001044:	e0bfff17 	ldw	r2,-4(fp)
 4001048:	1000021e 	bne	r2,zero,4001054 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x38>
                return USB_ERROR_INVALID_ARGUMENT;
 400104c:	00bff604 	movi	r2,-40
 4001050:	00003406 	br	4001124 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 4001054:	e0bffc17 	ldw	r2,-16(fp)
 4001058:	e0fffd03 	ldbu	r3,-12(fp)
 400105c:	180b883a 	mov	r5,r3
 4001060:	1009883a 	mov	r4,r2
 4001064:	40034640 	call	4003464 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 4001068:	e0bffb15 	stw	r2,-20(fp)

        if(!p)
 400106c:	e0bffb17 	ldw	r2,-20(fp)
 4001070:	1000021e 	bne	r2,zero,400107c <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x60>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 4001074:	00bff584 	movi	r2,-42
 4001078:	00002a06 	br	4001124 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x108>

        p->address.devAddress = addr;
 400107c:	e0bffb17 	ldw	r2,-20(fp)
 4001080:	e0fffd03 	ldbu	r3,-12(fp)
 4001084:	10c00105 	stb	r3,4(r2)
        p->epinfo = eprecord_ptr;
 4001088:	e0bffb17 	ldw	r2,-20(fp)
 400108c:	e0ffff17 	ldw	r3,-4(fp)
 4001090:	19403fcc 	andi	r5,r3,255
 4001094:	10c00003 	ldbu	r3,0(r2)
 4001098:	1806703a 	and	r3,r3,zero
 400109c:	1809883a 	mov	r4,r3
 40010a0:	2807883a 	mov	r3,r5
 40010a4:	20c6b03a 	or	r3,r4,r3
 40010a8:	10c00005 	stb	r3,0(r2)
 40010ac:	e0ffff17 	ldw	r3,-4(fp)
 40010b0:	1806d23a 	srli	r3,r3,8
 40010b4:	19403fcc 	andi	r5,r3,255
 40010b8:	10c00043 	ldbu	r3,1(r2)
 40010bc:	1806703a 	and	r3,r3,zero
 40010c0:	1809883a 	mov	r4,r3
 40010c4:	2807883a 	mov	r3,r5
 40010c8:	20c6b03a 	or	r3,r4,r3
 40010cc:	10c00045 	stb	r3,1(r2)
 40010d0:	e0ffff17 	ldw	r3,-4(fp)
 40010d4:	1806d43a 	srli	r3,r3,16
 40010d8:	19403fcc 	andi	r5,r3,255
 40010dc:	10c00083 	ldbu	r3,2(r2)
 40010e0:	1806703a 	and	r3,r3,zero
 40010e4:	1809883a 	mov	r4,r3
 40010e8:	2807883a 	mov	r3,r5
 40010ec:	20c6b03a 	or	r3,r4,r3
 40010f0:	10c00085 	stb	r3,2(r2)
 40010f4:	e0ffff17 	ldw	r3,-4(fp)
 40010f8:	180ad63a 	srli	r5,r3,24
 40010fc:	10c000c3 	ldbu	r3,3(r2)
 4001100:	1806703a 	and	r3,r3,zero
 4001104:	1809883a 	mov	r4,r3
 4001108:	2807883a 	mov	r3,r5
 400110c:	20c6b03a 	or	r3,r4,r3
 4001110:	10c000c5 	stb	r3,3(r2)
        p->epcount = epcount;
 4001114:	e0bffb17 	ldw	r2,-20(fp)
 4001118:	e0fffe03 	ldbu	r3,-8(fp)
 400111c:	10c00145 	stb	r3,5(r2)

        return 0;
 4001120:	0005883a 	mov	r2,zero
}
 4001124:	e037883a 	mov	sp,fp
 4001128:	dfc00117 	ldw	ra,4(sp)
 400112c:	df000017 	ldw	fp,0(sp)
 4001130:	dec00204 	addi	sp,sp,8
 4001134:	f800283a 	ret

04001138 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 4001138:	defff804 	addi	sp,sp,-32
 400113c:	dfc00715 	stw	ra,28(sp)
 4001140:	df000615 	stw	fp,24(sp)
 4001144:	df000604 	addi	fp,sp,24
 4001148:	e13ffc15 	stw	r4,-16(fp)
 400114c:	2807883a 	mov	r3,r5
 4001150:	3005883a 	mov	r2,r6
 4001154:	e1ffff15 	stw	r7,-4(fp)
 4001158:	e0fffd05 	stb	r3,-12(fp)
 400115c:	e0bffe05 	stb	r2,-8(fp)
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 4001160:	e0bffc17 	ldw	r2,-16(fp)
 4001164:	e0fffd03 	ldbu	r3,-12(fp)
 4001168:	180b883a 	mov	r5,r3
 400116c:	1009883a 	mov	r4,r2
 4001170:	40034640 	call	4003464 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 4001174:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
 4001178:	e0bffa17 	ldw	r2,-24(fp)
 400117c:	1000021e 	bne	r2,zero,4001188 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x50>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 4001180:	00bff584 	movi	r2,-42
 4001184:	00004a06 	br	40012b0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        if(!p->epinfo)
 4001188:	e0bffa17 	ldw	r2,-24(fp)
 400118c:	10c00003 	ldbu	r3,0(r2)
 4001190:	11000043 	ldbu	r4,1(r2)
 4001194:	2008923a 	slli	r4,r4,8
 4001198:	20c6b03a 	or	r3,r4,r3
 400119c:	11000083 	ldbu	r4,2(r2)
 40011a0:	2008943a 	slli	r4,r4,16
 40011a4:	20c6b03a 	or	r3,r4,r3
 40011a8:	108000c3 	ldbu	r2,3(r2)
 40011ac:	1004963a 	slli	r2,r2,24
 40011b0:	10c4b03a 	or	r2,r2,r3
 40011b4:	1000021e 	bne	r2,zero,40011c0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x88>
                return USB_ERROR_EPINFO_IS_NULL;
 40011b8:	00bff5c4 	movi	r2,-41
 40011bc:	00003c06 	br	40012b0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *ppep = getEpInfoEntry(addr, ep);
 40011c0:	e0bffd03 	ldbu	r2,-12(fp)
 40011c4:	e0fffe03 	ldbu	r3,-8(fp)
 40011c8:	180d883a 	mov	r6,r3
 40011cc:	100b883a 	mov	r5,r2
 40011d0:	e13ffc17 	ldw	r4,-16(fp)
 40011d4:	4000f080 	call	4000f08 <_ZN3USB14getEpInfoEntryEhh>
 40011d8:	1007883a 	mov	r3,r2
 40011dc:	e0bfff17 	ldw	r2,-4(fp)
 40011e0:	10c00015 	stw	r3,0(r2)

        if(!*ppep)
 40011e4:	e0bfff17 	ldw	r2,-4(fp)
 40011e8:	10800017 	ldw	r2,0(r2)
 40011ec:	1000021e 	bne	r2,zero,40011f8 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc0>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 40011f0:	00bff6c4 	movi	r2,-37
 40011f4:	00002e06 	br	40012b0 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x178>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 40011f8:	e0bfff17 	ldw	r2,-4(fp)
 40011fc:	10800017 	ldw	r2,0(r2)
 4001200:	10800083 	ldbu	r2,2(r2)
 4001204:	1004d0ba 	srli	r2,r2,2
 4001208:	10803fcc 	andi	r2,r2,255
 400120c:	10c00410 	cmplti	r3,r2,16
 4001210:	1800011e 	bne	r3,zero,4001218 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xe0>
 4001214:	008003c4 	movi	r2,15
 4001218:	00c00044 	movi	r3,1
 400121c:	1884983a 	sll	r2,r3,r2
 4001220:	1007883a 	mov	r3,r2
 4001224:	e0800217 	ldw	r2,8(fp)
 4001228:	10c0000d 	sth	r3,0(r2)
        (*nak_limit)--;
 400122c:	e0800217 	ldw	r2,8(fp)
 4001230:	1080000b 	ldhu	r2,0(r2)
 4001234:	10bfffc4 	addi	r2,r2,-1
 4001238:	1007883a 	mov	r3,r2
 400123c:	e0800217 	ldw	r2,8(fp)
 4001240:	10c0000d 	sth	r3,0(r2)
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 4001244:	e0bffd03 	ldbu	r2,-12(fp)
 4001248:	100d883a 	mov	r6,r2
 400124c:	01403804 	movi	r5,224
 4001250:	e13ffc17 	ldw	r4,-16(fp)
 4001254:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>

        uint8_t mode = regRd(rMODE);
 4001258:	01403604 	movi	r5,216
 400125c:	e13ffc17 	ldw	r4,-16(fp)
 4001260:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 4001264:	e0bffb05 	stb	r2,-20(fp)
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 4001268:	e0bffa17 	ldw	r2,-24(fp)
 400126c:	10800183 	ldbu	r2,6(r2)
 4001270:	10803fcc 	andi	r2,r2,255
 4001274:	10000726 	beq	r2,zero,4001294 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x15c>
 4001278:	e0bffc17 	ldw	r2,-16(fp)
 400127c:	10c02e03 	ldbu	r3,184(r2)
 4001280:	e0bffb03 	ldbu	r2,-20(fp)
 4001284:	1884b03a 	or	r2,r3,r2
 4001288:	10800094 	ori	r2,r2,2
 400128c:	10803fcc 	andi	r2,r2,255
 4001290:	00000206 	br	400129c <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x164>
 4001294:	e0bffb03 	ldbu	r2,-20(fp)
 4001298:	10803e4c 	andi	r2,r2,249
 400129c:	100d883a 	mov	r6,r2
 40012a0:	01403604 	movi	r5,216
 40012a4:	e13ffc17 	ldw	r4,-16(fp)
 40012a8:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>

        return 0;
 40012ac:	0005883a 	mov	r2,zero
}
 40012b0:	e037883a 	mov	sp,fp
 40012b4:	dfc00117 	ldw	ra,4(sp)
 40012b8:	df000017 	ldw	fp,0(sp)
 40012bc:	dec00204 	addi	sp,sp,8
 40012c0:	f800283a 	ret

040012c4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 40012c4:	deffeb04 	addi	sp,sp,-84
 40012c8:	dfc01415 	stw	ra,80(sp)
 40012cc:	df001315 	stw	fp,76(sp)
 40012d0:	dc001215 	stw	r16,72(sp)
 40012d4:	df001304 	addi	fp,sp,76
 40012d8:	e13ff515 	stw	r4,-44(fp)
 40012dc:	2815883a 	mov	r10,r5
 40012e0:	3013883a 	mov	r9,r6
 40012e4:	3811883a 	mov	r8,r7
 40012e8:	e1c00217 	ldw	r7,8(fp)
 40012ec:	e1800317 	ldw	r6,12(fp)
 40012f0:	e1400417 	ldw	r5,16(fp)
 40012f4:	e1000517 	ldw	r4,20(fp)
 40012f8:	e0c00617 	ldw	r3,24(fp)
 40012fc:	e0800717 	ldw	r2,28(fp)
 4001300:	e2bff605 	stb	r10,-40(fp)
 4001304:	e27ff705 	stb	r9,-36(fp)
 4001308:	e23ff805 	stb	r8,-32(fp)
 400130c:	e1fff905 	stb	r7,-28(fp)
 4001310:	e1bffa05 	stb	r6,-24(fp)
 4001314:	e17ffb05 	stb	r5,-20(fp)
 4001318:	e13ffc0d 	sth	r4,-16(fp)
 400131c:	e0fffd0d 	sth	r3,-12(fp)
 4001320:	e0bffe0d 	sth	r2,-8(fp)
        bool direction = false; //request direction, IN or OUT
 4001324:	e03ff005 	stb	zero,-64(fp)
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 4001328:	e03ff315 	stw	zero,-52(fp)
        uint16_t nak_limit = 0;
 400132c:	e03ff40d 	sth	zero,-48(fp)

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 4001330:	e0fff603 	ldbu	r3,-40(fp)
 4001334:	e13ff703 	ldbu	r4,-36(fp)
 4001338:	e17ff304 	addi	r5,fp,-52
 400133c:	e0bff404 	addi	r2,fp,-48
 4001340:	d8800015 	stw	r2,0(sp)
 4001344:	280f883a 	mov	r7,r5
 4001348:	200d883a 	mov	r6,r4
 400134c:	180b883a 	mov	r5,r3
 4001350:	e13ff517 	ldw	r4,-44(fp)
 4001354:	40011380 	call	4001138 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 4001358:	e0bfef05 	stb	r2,-68(fp)

        if(rcode)
 400135c:	e0bfef03 	ldbu	r2,-68(fp)
 4001360:	10000226 	beq	r2,zero,400136c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa8>
                return rcode;
 4001364:	e0bfef03 	ldbu	r2,-68(fp)
 4001368:	00009406 	br	40015bc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        direction = ((bmReqType & 0x80) > 0);
 400136c:	e0bff803 	ldbu	r2,-32(fp)
 4001370:	1080200c 	andi	r2,r2,128
 4001374:	0084803a 	cmplt	r2,zero,r2
 4001378:	e0bff005 	stb	r2,-64(fp)

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 400137c:	e0bff803 	ldbu	r2,-32(fp)
 4001380:	e0bff105 	stb	r2,-60(fp)
        setup_pkt.bRequest = bRequest;
 4001384:	e0bff903 	ldbu	r2,-28(fp)
 4001388:	e0bff145 	stb	r2,-59(fp)
        setup_pkt.wVal_u.wValueLo = wValLo;
 400138c:	e0bffa03 	ldbu	r2,-24(fp)
 4001390:	e0bff185 	stb	r2,-58(fp)
        setup_pkt.wVal_u.wValueHi = wValHi;
 4001394:	e0bffb03 	ldbu	r2,-20(fp)
 4001398:	e0bff1c5 	stb	r2,-57(fp)
        setup_pkt.wIndex = wInd;
 400139c:	e0bffc0b 	ldhu	r2,-16(fp)
 40013a0:	e0bff20d 	sth	r2,-56(fp)
        setup_pkt.wLength = total;
 40013a4:	e0bffd0b 	ldhu	r2,-12(fp)
 40013a8:	e0bff28d 	sth	r2,-54(fp)

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 40013ac:	e0bff104 	addi	r2,fp,-60
 40013b0:	100f883a 	mov	r7,r2
 40013b4:	01800204 	movi	r6,8
 40013b8:	01400804 	movi	r5,32
 40013bc:	e13ff517 	ldw	r4,-44(fp)
 40013c0:	40094180 	call	4009418 <_ZN8MAX3421e7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 40013c4:	e0bff703 	ldbu	r2,-36(fp)
 40013c8:	e0fff40b 	ldhu	r3,-48(fp)
 40013cc:	18ffffcc 	andi	r3,r3,65535
 40013d0:	180f883a 	mov	r7,r3
 40013d4:	100d883a 	mov	r6,r2
 40013d8:	01400404 	movi	r5,16
 40013dc:	e13ff517 	ldw	r4,-44(fp)
 40013e0:	4001dc40 	call	4001dc4 <_ZN3USB11dispatchPktEhht>
 40013e4:	e0bfef05 	stb	r2,-68(fp)

        if(rcode) //return HRSLT if not zero
 40013e8:	e0bfef03 	ldbu	r2,-68(fp)
 40013ec:	10000226 	beq	r2,zero,40013f8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x134>
                return ( rcode);
 40013f0:	e0bfef03 	ldbu	r2,-68(fp)
 40013f4:	00007106 	br	40015bc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

        if(dataptr != NULL) //data stage, if present
 40013f8:	e0800817 	ldw	r2,32(fp)
 40013fc:	10006226 	beq	r2,zero,4001588 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
        {
                if(direction) //IN transfer
 4001400:	e0bff003 	ldbu	r2,-64(fp)
 4001404:	10004a26 	beq	r2,zero,4001530 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x26c>
                {
                        uint16_t left = total;
 4001408:	e0bffd0b 	ldhu	r2,-12(fp)
 400140c:	e0bfef8d 	sth	r2,-66(fp)

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 4001410:	e0bff317 	ldw	r2,-52(fp)
 4001414:	10c00083 	ldbu	r3,2(r2)
 4001418:	18c00094 	ori	r3,r3,2
 400141c:	10c00085 	stb	r3,2(r2)

                        while(left) {
 4001420:	e0bfef8b 	ldhu	r2,-66(fp)
 4001424:	10005426 	beq	r2,zero,4001578 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 4001428:	e0bffe0b 	ldhu	r2,-8(fp)
 400142c:	e0bff48d 	sth	r2,-46(fp)
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 4001430:	e0fff317 	ldw	r3,-52(fp)
 4001434:	e0bff40b 	ldhu	r2,-48(fp)
 4001438:	113fffcc 	andi	r4,r2,65535
 400143c:	e17ff484 	addi	r5,fp,-46
 4001440:	d8000115 	stw	zero,4(sp)
 4001444:	e0800817 	ldw	r2,32(fp)
 4001448:	d8800015 	stw	r2,0(sp)
 400144c:	280f883a 	mov	r7,r5
 4001450:	200d883a 	mov	r6,r4
 4001454:	180b883a 	mov	r5,r3
 4001458:	e13ff517 	ldw	r4,-44(fp)
 400145c:	40016bc0 	call	40016bc <_ZN3USB10InTransferEP6EpInfotPtPhh>
 4001460:	e0bfef05 	stb	r2,-68(fp)
                                if(rcode == hrTOGERR) {
 4001464:	e0bfef03 	ldbu	r2,-68(fp)
 4001468:	10800198 	cmpnei	r2,r2,6
 400146c:	1000111e 	bne	r2,zero,40014b4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1f0>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 4001470:	e43ff317 	ldw	r16,-52(fp)
 4001474:	01403e04 	movi	r5,248
 4001478:	e13ff517 	ldw	r4,-44(fp)
 400147c:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 4001480:	10803fcc 	andi	r2,r2,255
 4001484:	1080080c 	andi	r2,r2,32
 4001488:	1005003a 	cmpeq	r2,r2,zero
 400148c:	1080004c 	andi	r2,r2,1
 4001490:	1089883a 	add	r4,r2,r2
 4001494:	80c00083 	ldbu	r3,2(r16)
 4001498:	00bfff44 	movi	r2,-3
 400149c:	1884703a 	and	r2,r3,r2
 40014a0:	1007883a 	mov	r3,r2
 40014a4:	2005883a 	mov	r2,r4
 40014a8:	1884b03a 	or	r2,r3,r2
 40014ac:	80800085 	stb	r2,2(r16)
 40014b0:	003fdb06 	br	4001420 <__alt_data_end+0xfc001420>
                                        continue;
                                }

                                if(rcode)
 40014b4:	e0bfef03 	ldbu	r2,-68(fp)
 40014b8:	10000226 	beq	r2,zero,40014c4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x200>
                                        return rcode;
 40014bc:	e0bfef03 	ldbu	r2,-68(fp)
 40014c0:	00003e06 	br	40015bc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 40014c4:	e0bfef03 	ldbu	r2,-68(fp)
 40014c8:	1000101e 	bne	r2,zero,400150c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
 40014cc:	e0800917 	ldw	r2,36(fp)
 40014d0:	10000e26 	beq	r2,zero,400150c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x248>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 40014d4:	e0800917 	ldw	r2,36(fp)
 40014d8:	10800017 	ldw	r2,0(r2)
 40014dc:	10800017 	ldw	r2,0(r2)
 40014e0:	e0fff48b 	ldhu	r3,-46(fp)
 40014e4:	197fffcc 	andi	r5,r3,65535
 40014e8:	e13ffd0b 	ldhu	r4,-12(fp)
 40014ec:	e0ffef8b 	ldhu	r3,-66(fp)
 40014f0:	20c7c83a 	sub	r3,r4,r3
 40014f4:	e0fff08d 	sth	r3,-62(fp)
 40014f8:	e0fff084 	addi	r3,fp,-62
 40014fc:	180f883a 	mov	r7,r3
 4001500:	e1800817 	ldw	r6,32(fp)
 4001504:	e1000917 	ldw	r4,36(fp)
 4001508:	103ee83a 	callr	r2

                                left -= read;
 400150c:	e0bff48b 	ldhu	r2,-46(fp)
 4001510:	e0ffef8b 	ldhu	r3,-66(fp)
 4001514:	1885c83a 	sub	r2,r3,r2
 4001518:	e0bfef8d 	sth	r2,-66(fp)

                                if(read < nbytes)
 400151c:	e0bff48b 	ldhu	r2,-46(fp)
 4001520:	10ffffcc 	andi	r3,r2,65535
 4001524:	e0bffe0b 	ldhu	r2,-8(fp)
 4001528:	18801236 	bltu	r3,r2,4001574 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b0>
                {
                        uint16_t left = total;

                        pep->bmRcvToggle = 1; //bmRCVTOG1;

                        while(left) {
 400152c:	003fbc06 	br	4001420 <__alt_data_end+0xfc001420>
                                if(read < nbytes)
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 4001530:	e0bff317 	ldw	r2,-52(fp)
 4001534:	10c00083 	ldbu	r3,2(r2)
 4001538:	18c00054 	ori	r3,r3,1
 400153c:	10c00085 	stb	r3,2(r2)
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 4001540:	e0fff317 	ldw	r3,-52(fp)
 4001544:	e0bff40b 	ldhu	r2,-48(fp)
 4001548:	113fffcc 	andi	r4,r2,65535
 400154c:	e17ffe0b 	ldhu	r5,-8(fp)
 4001550:	e0800817 	ldw	r2,32(fp)
 4001554:	d8800015 	stw	r2,0(sp)
 4001558:	280f883a 	mov	r7,r5
 400155c:	200d883a 	mov	r6,r4
 4001560:	180b883a 	mov	r5,r3
 4001564:	e13ff517 	ldw	r4,-44(fp)
 4001568:	4001a180 	call	4001a18 <_ZN3USB11OutTransferEP6EpInfottPh>
 400156c:	e0bfef05 	stb	r2,-68(fp)
 4001570:	00000106 	br	4001578 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2b4>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);

                                left -= read;

                                if(read < nbytes)
                                        break;
 4001574:	0001883a 	nop
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
                }
                if(rcode) //return error
 4001578:	e0bfef03 	ldbu	r2,-68(fp)
 400157c:	10000226 	beq	r2,zero,4001588 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2c4>
                        return ( rcode);
 4001580:	e0bfef03 	ldbu	r2,-68(fp)
 4001584:	00000d06 	br	40015bc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2f8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 4001588:	e0bff003 	ldbu	r2,-64(fp)
 400158c:	10000226 	beq	r2,zero,4001598 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d4>
 4001590:	00802804 	movi	r2,160
 4001594:	00000106 	br	400159c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x2d8>
 4001598:	00802004 	movi	r2,128
 400159c:	e0fff703 	ldbu	r3,-36(fp)
 40015a0:	e13ff40b 	ldhu	r4,-48(fp)
 40015a4:	213fffcc 	andi	r4,r4,65535
 40015a8:	200f883a 	mov	r7,r4
 40015ac:	180d883a 	mov	r6,r3
 40015b0:	100b883a 	mov	r5,r2
 40015b4:	e13ff517 	ldw	r4,-44(fp)
 40015b8:	4001dc40 	call	4001dc4 <_ZN3USB11dispatchPktEhht>
}
 40015bc:	e6ffff04 	addi	sp,fp,-4
 40015c0:	dfc00217 	ldw	ra,8(sp)
 40015c4:	df000117 	ldw	fp,4(sp)
 40015c8:	dc000017 	ldw	r16,0(sp)
 40015cc:	dec00304 	addi	sp,sp,12
 40015d0:	f800283a 	ret

040015d4 <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 40015d4:	defff404 	addi	sp,sp,-48
 40015d8:	dfc00b15 	stw	ra,44(sp)
 40015dc:	df000a15 	stw	fp,40(sp)
 40015e0:	df000a04 	addi	fp,sp,40
 40015e4:	e13ffb15 	stw	r4,-20(fp)
 40015e8:	2809883a 	mov	r4,r5
 40015ec:	3007883a 	mov	r3,r6
 40015f0:	e1fffe15 	stw	r7,-8(fp)
 40015f4:	e0800317 	ldw	r2,12(fp)
 40015f8:	e13ffc05 	stb	r4,-16(fp)
 40015fc:	e0fffd05 	stb	r3,-12(fp)
 4001600:	e0bfff05 	stb	r2,-4(fp)
        EpInfo *pep = NULL;
 4001604:	e03ff915 	stw	zero,-28(fp)
        uint16_t nak_limit = 0;
 4001608:	e03ffa0d 	sth	zero,-24(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 400160c:	e0fffc03 	ldbu	r3,-16(fp)
 4001610:	e13ffd03 	ldbu	r4,-12(fp)
 4001614:	e17ff904 	addi	r5,fp,-28
 4001618:	e0bffa04 	addi	r2,fp,-24
 400161c:	d8800015 	stw	r2,0(sp)
 4001620:	280f883a 	mov	r7,r5
 4001624:	200d883a 	mov	r6,r4
 4001628:	180b883a 	mov	r5,r3
 400162c:	e13ffb17 	ldw	r4,-20(fp)
 4001630:	40011380 	call	4001138 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 4001634:	e0bff805 	stb	r2,-32(fp)

        if(rcode) {
 4001638:	e0bff803 	ldbu	r2,-32(fp)
 400163c:	10000e26 	beq	r2,zero,4001678 <_ZN3USB10inTransferEhhPtPhh+0xa4>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 4001640:	e0bff803 	ldbu	r2,-32(fp)
 4001644:	01402044 	movi	r5,129
 4001648:	1009883a 	mov	r4,r2
 400164c:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 4001650:	e0bffc03 	ldbu	r2,-16(fp)
 4001654:	01402044 	movi	r5,129
 4001658:	1009883a 	mov	r4,r2
 400165c:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 4001660:	e0bffd03 	ldbu	r2,-12(fp)
 4001664:	01402044 	movi	r5,129
 4001668:	1009883a 	mov	r4,r2
 400166c:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>
                return rcode;
 4001670:	e0bff803 	ldbu	r2,-32(fp)
 4001674:	00000c06 	br	40016a8 <_ZN3USB10inTransferEhhPtPhh+0xd4>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 4001678:	e0fff917 	ldw	r3,-28(fp)
 400167c:	e0bffa0b 	ldhu	r2,-24(fp)
 4001680:	113fffcc 	andi	r4,r2,65535
 4001684:	e0bfff03 	ldbu	r2,-4(fp)
 4001688:	d8800115 	stw	r2,4(sp)
 400168c:	e0800217 	ldw	r2,8(fp)
 4001690:	d8800015 	stw	r2,0(sp)
 4001694:	e1fffe17 	ldw	r7,-8(fp)
 4001698:	200d883a 	mov	r6,r4
 400169c:	180b883a 	mov	r5,r3
 40016a0:	e13ffb17 	ldw	r4,-20(fp)
 40016a4:	40016bc0 	call	40016bc <_ZN3USB10InTransferEP6EpInfotPtPhh>
}
 40016a8:	e037883a 	mov	sp,fp
 40016ac:	dfc00117 	ldw	ra,4(sp)
 40016b0:	df000017 	ldw	fp,0(sp)
 40016b4:	dec00204 	addi	sp,sp,8
 40016b8:	f800283a 	ret

040016bc <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 40016bc:	defff704 	addi	sp,sp,-36
 40016c0:	dfc00815 	stw	ra,32(sp)
 40016c4:	df000715 	stw	fp,28(sp)
 40016c8:	df000704 	addi	fp,sp,28
 40016cc:	e13ffb15 	stw	r4,-20(fp)
 40016d0:	e17ffc15 	stw	r5,-16(fp)
 40016d4:	3007883a 	mov	r3,r6
 40016d8:	e1fffe15 	stw	r7,-8(fp)
 40016dc:	e0800317 	ldw	r2,12(fp)
 40016e0:	e0fffd0d 	sth	r3,-12(fp)
 40016e4:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;
 40016e8:	e03ff905 	stb	zero,-28(fp)
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 40016ec:	e0bffe17 	ldw	r2,-8(fp)
 40016f0:	1080000b 	ldhu	r2,0(r2)
 40016f4:	e0bffa0d 	sth	r2,-24(fp)
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 40016f8:	e0bffc17 	ldw	r2,-16(fp)
 40016fc:	10800043 	ldbu	r2,1(r2)
 4001700:	e0bffa85 	stb	r2,-22(fp)

        *nbytesptr = 0;
 4001704:	e0bffe17 	ldw	r2,-8(fp)
 4001708:	1000000d 	sth	zero,0(r2)
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 400170c:	e0bffc17 	ldw	r2,-16(fp)
 4001710:	10800083 	ldbu	r2,2(r2)
 4001714:	1080008c 	andi	r2,r2,2
 4001718:	10803fcc 	andi	r2,r2,255
 400171c:	10000226 	beq	r2,zero,4001728 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x6c>
 4001720:	00800804 	movi	r2,32
 4001724:	00000106 	br	400172c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x70>
 4001728:	00800404 	movi	r2,16
 400172c:	100d883a 	mov	r6,r2
 4001730:	01403a04 	movi	r5,232
 4001734:	e13ffb17 	ldw	r4,-20(fp)
 4001738:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 400173c:	e0bffc17 	ldw	r2,-16(fp)
 4001740:	10800003 	ldbu	r2,0(r2)
 4001744:	10803fcc 	andi	r2,r2,255
 4001748:	e0fffd0b 	ldhu	r3,-12(fp)
 400174c:	180f883a 	mov	r7,r3
 4001750:	100d883a 	mov	r6,r2
 4001754:	000b883a 	mov	r5,zero
 4001758:	e13ffb17 	ldw	r4,-20(fp)
 400175c:	4001dc40 	call	4001dc4 <_ZN3USB11dispatchPktEhht>
 4001760:	e0bff905 	stb	r2,-28(fp)
                if(rcode == hrTOGERR) {
 4001764:	e0bff903 	ldbu	r2,-28(fp)
 4001768:	10800198 	cmpnei	r2,r2,6
 400176c:	10001e1e 	bne	r2,zero,40017e8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x12c>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 4001770:	01403e04 	movi	r5,248
 4001774:	e13ffb17 	ldw	r4,-20(fp)
 4001778:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 400177c:	10803fcc 	andi	r2,r2,255
 4001780:	1080040c 	andi	r2,r2,16
 4001784:	1005003a 	cmpeq	r2,r2,zero
 4001788:	1007883a 	mov	r3,r2
 400178c:	e0bffc17 	ldw	r2,-16(fp)
 4001790:	18c0004c 	andi	r3,r3,1
 4001794:	18cb883a 	add	r5,r3,r3
 4001798:	11000083 	ldbu	r4,2(r2)
 400179c:	00ffff44 	movi	r3,-3
 40017a0:	20c6703a 	and	r3,r4,r3
 40017a4:	1809883a 	mov	r4,r3
 40017a8:	2807883a 	mov	r3,r5
 40017ac:	20c6b03a 	or	r3,r4,r3
 40017b0:	10c00085 	stb	r3,2(r2)
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 40017b4:	e0bffc17 	ldw	r2,-16(fp)
 40017b8:	10800083 	ldbu	r2,2(r2)
 40017bc:	1080008c 	andi	r2,r2,2
 40017c0:	10803fcc 	andi	r2,r2,255
 40017c4:	10000226 	beq	r2,zero,40017d0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x114>
 40017c8:	00800804 	movi	r2,32
 40017cc:	00000106 	br	40017d4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x118>
 40017d0:	00800404 	movi	r2,16
 40017d4:	100d883a 	mov	r6,r2
 40017d8:	01403a04 	movi	r5,232
 40017dc:	e13ffb17 	ldw	r4,-20(fp)
 40017e0:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
                        continue;
 40017e4:	00005806 	br	4001948 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x28c>
                }
                if(rcode) {
 40017e8:	e0bff903 	ldbu	r2,-28(fp)
 40017ec:	1000571e 	bne	r2,zero,400194c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x290>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 40017f0:	01403204 	movi	r5,200
 40017f4:	e13ffb17 	ldw	r4,-20(fp)
 40017f8:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 40017fc:	10803fcc 	andi	r2,r2,255
 4001800:	1080010c 	andi	r2,r2,4
 4001804:	1005003a 	cmpeq	r2,r2,zero
 4001808:	10803fcc 	andi	r2,r2,255
 400180c:	10000326 	beq	r2,zero,400181c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x160>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 4001810:	00bffc04 	movi	r2,-16
 4001814:	e0bff905 	stb	r2,-28(fp)
                        break;
 4001818:	00004d06 	br	4001950 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 400181c:	01400c04 	movi	r5,48
 4001820:	e13ffb17 	ldw	r4,-20(fp)
 4001824:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 4001828:	e0bff945 	stb	r2,-27(fp)
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 400182c:	e0bff943 	ldbu	r2,-27(fp)
 4001830:	10bfffcc 	andi	r2,r2,65535
 4001834:	e0fffa0b 	ldhu	r3,-24(fp)
 4001838:	1880022e 	bgeu	r3,r2,4001844 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x188>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 400183c:	e0bffa0b 	ldhu	r2,-24(fp)
 4001840:	e0bff945 	stb	r2,-27(fp)
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 4001844:	e0bffe17 	ldw	r2,-8(fp)
 4001848:	1080000b 	ldhu	r2,0(r2)
 400184c:	1007883a 	mov	r3,r2
 4001850:	e0bffa0b 	ldhu	r2,-24(fp)
 4001854:	10c5c83a 	sub	r2,r2,r3
 4001858:	e0bff98d 	sth	r2,-26(fp)

                if(mem_left < 0)
 400185c:	e0bff98f 	ldh	r2,-26(fp)
 4001860:	1000010e 	bge	r2,zero,4001868 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1ac>
                        mem_left = 0;
 4001864:	e03ff98d 	sth	zero,-26(fp)

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 4001868:	e0bff943 	ldbu	r2,-27(fp)
 400186c:	e0fff98f 	ldh	r3,-26(fp)
 4001870:	1880010e 	bge	r3,r2,4001878 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x1bc>
 4001874:	1805883a 	mov	r2,r3
 4001878:	10803fcc 	andi	r2,r2,255
 400187c:	e1c00217 	ldw	r7,8(fp)
 4001880:	100d883a 	mov	r6,r2
 4001884:	01400204 	movi	r5,8
 4001888:	e13ffb17 	ldw	r4,-20(fp)
 400188c:	40096380 	call	4009638 <_ZN8MAX3421e7bytesRdEhhPh>
 4001890:	e0800215 	stw	r2,8(fp)

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 4001894:	01800104 	movi	r6,4
 4001898:	01403204 	movi	r5,200
 400189c:	e13ffb17 	ldw	r4,-20(fp)
 40018a0:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 40018a4:	e0bffe17 	ldw	r2,-8(fp)
 40018a8:	10c0000b 	ldhu	r3,0(r2)
 40018ac:	e0bff943 	ldbu	r2,-27(fp)
 40018b0:	1885883a 	add	r2,r3,r2
 40018b4:	1007883a 	mov	r3,r2
 40018b8:	e0bffe17 	ldw	r2,-8(fp)
 40018bc:	10c0000d 	sth	r3,0(r2)

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 40018c0:	e0fff943 	ldbu	r3,-27(fp)
 40018c4:	e0bffa83 	ldbu	r2,-22(fp)
 40018c8:	18800536 	bltu	r3,r2,40018e0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x224>
 40018cc:	e0bffe17 	ldw	r2,-8(fp)
 40018d0:	1080000b 	ldhu	r2,0(r2)
 40018d4:	10ffffcc 	andi	r3,r2,65535
 40018d8:	e0bffa0b 	ldhu	r2,-24(fp)
 40018dc:	18801536 	bltu	r3,r2,4001934 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x278>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 40018e0:	01403e04 	movi	r5,248
 40018e4:	e13ffb17 	ldw	r4,-20(fp)
 40018e8:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 40018ec:	10803fcc 	andi	r2,r2,255
 40018f0:	1080040c 	andi	r2,r2,16
 40018f4:	10000226 	beq	r2,zero,4001900 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x244>
 40018f8:	00c00044 	movi	r3,1
 40018fc:	00000106 	br	4001904 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x248>
 4001900:	0007883a 	mov	r3,zero
 4001904:	e0bffc17 	ldw	r2,-16(fp)
 4001908:	18c0004c 	andi	r3,r3,1
 400190c:	18cb883a 	add	r5,r3,r3
 4001910:	11000083 	ldbu	r4,2(r2)
 4001914:	00ffff44 	movi	r3,-3
 4001918:	20c6703a 	and	r3,r4,r3
 400191c:	1809883a 	mov	r4,r3
 4001920:	2807883a 	mov	r3,r5
 4001924:	20c6b03a 	or	r3,r4,r3
 4001928:	10c00085 	stb	r3,2(r2)
                        //printf("\r\n");
                        rcode = 0;
 400192c:	e03ff905 	stb	zero,-28(fp)
                        break;
 4001930:	00000706 	br	4001950 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x294>
                } else if(bInterval > 0)
 4001934:	e0bfff03 	ldbu	r2,-4(fp)
 4001938:	103f8026 	beq	r2,zero,400173c <__alt_data_end+0xfc00173c>
                        delay(bInterval); // Delay according to polling interval
 400193c:	e0bfff03 	ldbu	r2,-4(fp)
 4001940:	1009883a 	mov	r4,r2
 4001944:	4000dac0 	call	4000dac <_Z5delaym>

        *nbytesptr = 0;
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value

        // use a 'break' to exit this loop
        while(1) {
 4001948:	003f7c06 	br	400173c <__alt_data_end+0xfc00173c>
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
                        continue;
                }
                if(rcode) {
                        //printf(">>>>>>>> Problem! dispatchPkt %2.2x\r\n", rcode);
                        break; //should be 0, indicating ACK. Else return error code.
 400194c:	0001883a 	nop
                        rcode = 0;
                        break;
                } else if(bInterval > 0)
                        delay(bInterval); // Delay according to polling interval
        } //while( 1 )
        return ( rcode);
 4001950:	e0bff903 	ldbu	r2,-28(fp)
}
 4001954:	e037883a 	mov	sp,fp
 4001958:	dfc00117 	ldw	ra,4(sp)
 400195c:	df000017 	ldw	fp,0(sp)
 4001960:	dec00204 	addi	sp,sp,8
 4001964:	f800283a 	ret

04001968 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 4001968:	defff604 	addi	sp,sp,-40
 400196c:	dfc00915 	stw	ra,36(sp)
 4001970:	df000815 	stw	fp,32(sp)
 4001974:	df000804 	addi	fp,sp,32
 4001978:	e13ffc15 	stw	r4,-16(fp)
 400197c:	2809883a 	mov	r4,r5
 4001980:	3007883a 	mov	r3,r6
 4001984:	3805883a 	mov	r2,r7
 4001988:	e13ffd05 	stb	r4,-12(fp)
 400198c:	e0fffe05 	stb	r3,-8(fp)
 4001990:	e0bfff0d 	sth	r2,-4(fp)
        EpInfo *pep = NULL;
 4001994:	e03ffa15 	stw	zero,-24(fp)
        uint16_t nak_limit = 0;
 4001998:	e03ffb0d 	sth	zero,-20(fp)

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 400199c:	e0fffd03 	ldbu	r3,-12(fp)
 40019a0:	e13ffe03 	ldbu	r4,-8(fp)
 40019a4:	e17ffa04 	addi	r5,fp,-24
 40019a8:	e0bffb04 	addi	r2,fp,-20
 40019ac:	d8800015 	stw	r2,0(sp)
 40019b0:	280f883a 	mov	r7,r5
 40019b4:	200d883a 	mov	r6,r4
 40019b8:	180b883a 	mov	r5,r3
 40019bc:	e13ffc17 	ldw	r4,-16(fp)
 40019c0:	40011380 	call	4001138 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 40019c4:	e0bff905 	stb	r2,-28(fp)

        if(rcode)
 40019c8:	e0bff903 	ldbu	r2,-28(fp)
 40019cc:	10000226 	beq	r2,zero,40019d8 <_ZN3USB11outTransferEhhtPh+0x70>
                return rcode;
 40019d0:	e0bff903 	ldbu	r2,-28(fp)
 40019d4:	00000b06 	br	4001a04 <_ZN3USB11outTransferEhhtPh+0x9c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 40019d8:	e0fffa17 	ldw	r3,-24(fp)
 40019dc:	e0bffb0b 	ldhu	r2,-20(fp)
 40019e0:	113fffcc 	andi	r4,r2,65535
 40019e4:	e17fff0b 	ldhu	r5,-4(fp)
 40019e8:	e0800217 	ldw	r2,8(fp)
 40019ec:	d8800015 	stw	r2,0(sp)
 40019f0:	280f883a 	mov	r7,r5
 40019f4:	200d883a 	mov	r6,r4
 40019f8:	180b883a 	mov	r5,r3
 40019fc:	e13ffc17 	ldw	r4,-16(fp)
 4001a00:	4001a180 	call	4001a18 <_ZN3USB11OutTransferEP6EpInfottPh>
}
 4001a04:	e037883a 	mov	sp,fp
 4001a08:	dfc00117 	ldw	ra,4(sp)
 4001a0c:	df000017 	ldw	fp,0(sp)
 4001a10:	dec00204 	addi	sp,sp,8
 4001a14:	f800283a 	ret

04001a18 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 4001a18:	defff404 	addi	sp,sp,-48
 4001a1c:	dfc00b15 	stw	ra,44(sp)
 4001a20:	df000a15 	stw	fp,40(sp)
 4001a24:	df000a04 	addi	fp,sp,40
 4001a28:	e13ffc15 	stw	r4,-16(fp)
 4001a2c:	e17ffd15 	stw	r5,-12(fp)
 4001a30:	3007883a 	mov	r3,r6
 4001a34:	3805883a 	mov	r2,r7
 4001a38:	e0fffe0d 	sth	r3,-8(fp)
 4001a3c:	e0bfff0d 	sth	r2,-4(fp)
        uint8_t rcode = hrSUCCESS, retry_count;
 4001a40:	e03ff605 	stb	zero,-40(fp)
        uint8_t *data_p = data; //local copy of the data pointer
 4001a44:	e0800217 	ldw	r2,8(fp)
 4001a48:	e0bff715 	stw	r2,-36(fp)
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 4001a4c:	e0bfff0b 	ldhu	r2,-4(fp)
 4001a50:	e0bff88d 	sth	r2,-30(fp)

        uint8_t maxpktsize = pep->maxPktSize;
 4001a54:	e0bffd17 	ldw	r2,-12(fp)
 4001a58:	10800043 	ldbu	r2,1(r2)
 4001a5c:	e0bff905 	stb	r2,-28(fp)

        if(maxpktsize < 1 || maxpktsize > 64)
 4001a60:	e0bff903 	ldbu	r2,-28(fp)
 4001a64:	10000326 	beq	r2,zero,4001a74 <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
 4001a68:	e0bff903 	ldbu	r2,-28(fp)
 4001a6c:	10801070 	cmpltui	r2,r2,65
 4001a70:	1000021e 	bne	r2,zero,4001a7c <_ZN3USB11OutTransferEP6EpInfottPh+0x64>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 4001a74:	00bff684 	movi	r2,-38
 4001a78:	0000cd06 	br	4001db0 <_ZN3USB11OutTransferEP6EpInfottPh+0x398>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 4001a7c:	4000e040 	call	4000e04 <_Z6millisv>
 4001a80:	1084e204 	addi	r2,r2,5000
 4001a84:	e0bffa15 	stw	r2,-24(fp)

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 4001a88:	e0bffd17 	ldw	r2,-12(fp)
 4001a8c:	10800083 	ldbu	r2,2(r2)
 4001a90:	1080004c 	andi	r2,r2,1
 4001a94:	10803fcc 	andi	r2,r2,255
 4001a98:	10000226 	beq	r2,zero,4001aa4 <_ZN3USB11OutTransferEP6EpInfottPh+0x8c>
 4001a9c:	00802004 	movi	r2,128
 4001aa0:	00000106 	br	4001aa8 <_ZN3USB11OutTransferEP6EpInfottPh+0x90>
 4001aa4:	00801004 	movi	r2,64
 4001aa8:	100d883a 	mov	r6,r2
 4001aac:	01403a04 	movi	r5,232
 4001ab0:	e13ffc17 	ldw	r4,-16(fp)
 4001ab4:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>

        while(bytes_left) {
 4001ab8:	e0bff88b 	ldhu	r2,-30(fp)
 4001abc:	1000a926 	beq	r2,zero,4001d64 <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 4001ac0:	e03ff645 	stb	zero,-39(fp)
                nak_count = 0;
 4001ac4:	e03ff80d 	sth	zero,-32(fp)
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 4001ac8:	e0bff903 	ldbu	r2,-28(fp)
 4001acc:	e17ff88b 	ldhu	r5,-30(fp)
 4001ad0:	10ffffcc 	andi	r3,r2,65535
 4001ad4:	293fffcc 	andi	r4,r5,65535
 4001ad8:	20c0012e 	bgeu	r4,r3,4001ae0 <_ZN3USB11OutTransferEP6EpInfottPh+0xc8>
 4001adc:	2805883a 	mov	r2,r5
 4001ae0:	e0bffb0d 	sth	r2,-20(fp)
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 4001ae4:	e0bffb0b 	ldhu	r2,-20(fp)
 4001ae8:	10803fcc 	andi	r2,r2,255
 4001aec:	e1fff717 	ldw	r7,-36(fp)
 4001af0:	100d883a 	mov	r6,r2
 4001af4:	01400404 	movi	r5,16
 4001af8:	e13ffc17 	ldw	r4,-16(fp)
 4001afc:	40094180 	call	4009418 <_ZN8MAX3421e7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 4001b00:	e0bffb0b 	ldhu	r2,-20(fp)
 4001b04:	10803fcc 	andi	r2,r2,255
 4001b08:	100d883a 	mov	r6,r2
 4001b0c:	01400e04 	movi	r5,56
 4001b10:	e13ffc17 	ldw	r4,-16(fp)
 4001b14:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 4001b18:	e0bffd17 	ldw	r2,-12(fp)
 4001b1c:	10800003 	ldbu	r2,0(r2)
 4001b20:	10800814 	ori	r2,r2,32
 4001b24:	10803fcc 	andi	r2,r2,255
 4001b28:	100d883a 	mov	r6,r2
 4001b2c:	01403c04 	movi	r5,240
 4001b30:	e13ffc17 	ldw	r4,-16(fp)
 4001b34:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 4001b38:	01403204 	movi	r5,200
 4001b3c:	e13ffc17 	ldw	r4,-16(fp)
 4001b40:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 4001b44:	0084303a 	nor	r2,zero,r2
 4001b48:	10803fcc 	andi	r2,r2,255
 4001b4c:	1004d1fa 	srli	r2,r2,7
 4001b50:	10803fcc 	andi	r2,r2,255
 4001b54:	10000126 	beq	r2,zero,4001b5c <_ZN3USB11OutTransferEP6EpInfottPh+0x144>
 4001b58:	003ff706 	br	4001b38 <__alt_data_end+0xfc001b38>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 4001b5c:	01802004 	movi	r6,128
 4001b60:	01403204 	movi	r5,200
 4001b64:	e13ffc17 	ldw	r4,-16(fp)
 4001b68:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 4001b6c:	01403e04 	movi	r5,248
 4001b70:	e13ffc17 	ldw	r4,-16(fp)
 4001b74:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 4001b78:	108003cc 	andi	r2,r2,15
 4001b7c:	e0bff605 	stb	r2,-40(fp)

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 4001b80:	e0bff603 	ldbu	r2,-40(fp)
 4001b84:	10000726 	beq	r2,zero,4001ba4 <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 4001b88:	4000e040 	call	4000e04 <_Z6millisv>
 4001b8c:	1007883a 	mov	r3,r2
 4001b90:	e0bffa17 	ldw	r2,-24(fp)
 4001b94:	1885c83a 	sub	r2,r3,r2
 4001b98:	1000020e 	bge	r2,zero,4001ba4 <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 4001b9c:	00800044 	movi	r2,1
 4001ba0:	00000106 	br	4001ba8 <_ZN3USB11OutTransferEP6EpInfottPh+0x190>
 4001ba4:	0005883a 	mov	r2,zero
 4001ba8:	10803fcc 	andi	r2,r2,255
 4001bac:	10006426 	beq	r2,zero,4001d40 <_ZN3USB11OutTransferEP6EpInfottPh+0x328>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 4001bb0:	e0bff603 	ldbu	r2,-40(fp)
 4001bb4:	10c001a0 	cmpeqi	r3,r2,6
 4001bb8:	1800151e 	bne	r3,zero,4001c10 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f8>
 4001bbc:	10c003a0 	cmpeqi	r3,r2,14
 4001bc0:	18000c1e 	bne	r3,zero,4001bf4 <_ZN3USB11OutTransferEP6EpInfottPh+0x1dc>
 4001bc4:	10800120 	cmpeqi	r2,r2,4
 4001bc8:	1000011e 	bne	r2,zero,4001bd0 <_ZN3USB11OutTransferEP6EpInfottPh+0x1b8>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 4001bcc:	00006506 	br	4001d64 <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
                                case hrNAK:
                                        nak_count++;
 4001bd0:	e0bff80b 	ldhu	r2,-32(fp)
 4001bd4:	10800044 	addi	r2,r2,1
 4001bd8:	e0bff80d 	sth	r2,-32(fp)
                                        if(nak_limit && (nak_count == nak_limit))
 4001bdc:	e0bffe0b 	ldhu	r2,-8(fp)
 4001be0:	10002826 	beq	r2,zero,4001c84 <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
 4001be4:	e0fff80b 	ldhu	r3,-32(fp)
 4001be8:	e0bffe0b 	ldhu	r2,-8(fp)
 4001bec:	1880251e 	bne	r3,r2,4001c84 <_ZN3USB11OutTransferEP6EpInfottPh+0x26c>
                                                goto breakout;
 4001bf0:	00005c06 	br	4001d64 <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTIMEOUT:
                                        retry_count++;
 4001bf4:	e0bff643 	ldbu	r2,-39(fp)
 4001bf8:	10800044 	addi	r2,r2,1
 4001bfc:	e0bff645 	stb	r2,-39(fp)
                                        if(retry_count == USB_RETRY_LIMIT)
 4001c00:	e0bff643 	ldbu	r2,-39(fp)
 4001c04:	108000d8 	cmpnei	r2,r2,3
 4001c08:	1000201e 	bne	r2,zero,4001c8c <_ZN3USB11OutTransferEP6EpInfottPh+0x274>
                                                goto breakout;
 4001c0c:	00005506 	br	4001d64 <_ZN3USB11OutTransferEP6EpInfottPh+0x34c>
                                        //return ( rcode);
                                        break;
                                case hrTOGERR:
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 4001c10:	01403e04 	movi	r5,248
 4001c14:	e13ffc17 	ldw	r4,-16(fp)
 4001c18:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 4001c1c:	10803fcc 	andi	r2,r2,255
 4001c20:	1080080c 	andi	r2,r2,32
 4001c24:	1005003a 	cmpeq	r2,r2,zero
 4001c28:	1007883a 	mov	r3,r2
 4001c2c:	e0bffd17 	ldw	r2,-12(fp)
 4001c30:	1940004c 	andi	r5,r3,1
 4001c34:	11000083 	ldbu	r4,2(r2)
 4001c38:	00ffff84 	movi	r3,-2
 4001c3c:	20c6703a 	and	r3,r4,r3
 4001c40:	1809883a 	mov	r4,r3
 4001c44:	2807883a 	mov	r3,r5
 4001c48:	20c6b03a 	or	r3,r4,r3
 4001c4c:	10c00085 	stb	r3,2(r2)
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 4001c50:	e0bffd17 	ldw	r2,-12(fp)
 4001c54:	10800083 	ldbu	r2,2(r2)
 4001c58:	1080004c 	andi	r2,r2,1
 4001c5c:	10803fcc 	andi	r2,r2,255
 4001c60:	10000226 	beq	r2,zero,4001c6c <_ZN3USB11OutTransferEP6EpInfottPh+0x254>
 4001c64:	00802004 	movi	r2,128
 4001c68:	00000106 	br	4001c70 <_ZN3USB11OutTransferEP6EpInfottPh+0x258>
 4001c6c:	00801004 	movi	r2,64
 4001c70:	100d883a 	mov	r6,r2
 4001c74:	01403a04 	movi	r5,232
 4001c78:	e13ffc17 	ldw	r4,-16(fp)
 4001c7c:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
                                        break;
 4001c80:	00000306 	br	4001c90 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrNAK:
                                        nak_count++;
                                        if(nak_limit && (nak_count == nak_limit))
                                                goto breakout;
                                        //return ( rcode);
                                        break;
 4001c84:	0001883a 	nop
 4001c88:	00000106 	br	4001c90 <_ZN3USB11OutTransferEP6EpInfottPh+0x278>
                                case hrTIMEOUT:
                                        retry_count++;
                                        if(retry_count == USB_RETRY_LIMIT)
                                                goto breakout;
                                        //return ( rcode);
                                        break;
 4001c8c:	0001883a 	nop
                                default:
                                        goto breakout;
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 4001c90:	000d883a 	mov	r6,zero
 4001c94:	01400e04 	movi	r5,56
 4001c98:	e13ffc17 	ldw	r4,-16(fp)
 4001c9c:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 4001ca0:	e0bff717 	ldw	r2,-36(fp)
 4001ca4:	10800003 	ldbu	r2,0(r2)
 4001ca8:	10803fcc 	andi	r2,r2,255
 4001cac:	100d883a 	mov	r6,r2
 4001cb0:	01400404 	movi	r5,16
 4001cb4:	e13ffc17 	ldw	r4,-16(fp)
 4001cb8:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 4001cbc:	e0bffb0b 	ldhu	r2,-20(fp)
 4001cc0:	10803fcc 	andi	r2,r2,255
 4001cc4:	100d883a 	mov	r6,r2
 4001cc8:	01400e04 	movi	r5,56
 4001ccc:	e13ffc17 	ldw	r4,-16(fp)
 4001cd0:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 4001cd4:	e0bffd17 	ldw	r2,-12(fp)
 4001cd8:	10800003 	ldbu	r2,0(r2)
 4001cdc:	10800814 	ori	r2,r2,32
 4001ce0:	10803fcc 	andi	r2,r2,255
 4001ce4:	100d883a 	mov	r6,r2
 4001ce8:	01403c04 	movi	r5,240
 4001cec:	e13ffc17 	ldw	r4,-16(fp)
 4001cf0:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 4001cf4:	01403204 	movi	r5,200
 4001cf8:	e13ffc17 	ldw	r4,-16(fp)
 4001cfc:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 4001d00:	0084303a 	nor	r2,zero,r2
 4001d04:	10803fcc 	andi	r2,r2,255
 4001d08:	1004d1fa 	srli	r2,r2,7
 4001d0c:	10803fcc 	andi	r2,r2,255
 4001d10:	10000126 	beq	r2,zero,4001d18 <_ZN3USB11OutTransferEP6EpInfottPh+0x300>
 4001d14:	003ff706 	br	4001cf4 <__alt_data_end+0xfc001cf4>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 4001d18:	01802004 	movi	r6,128
 4001d1c:	01403204 	movi	r5,200
 4001d20:	e13ffc17 	ldw	r4,-16(fp)
 4001d24:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 4001d28:	01403e04 	movi	r5,248
 4001d2c:	e13ffc17 	ldw	r4,-16(fp)
 4001d30:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 4001d34:	108003cc 	andi	r2,r2,15
 4001d38:	e0bff605 	stb	r2,-40(fp)
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                rcode = (regRd(rHRSL) & 0x0f);

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 4001d3c:	003f9006 	br	4001b80 <__alt_data_end+0xfc001b80>
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
                        rcode = (regRd(rHRSL) & 0x0f);
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 4001d40:	e0fff88b 	ldhu	r3,-30(fp)
 4001d44:	e0bffb0b 	ldhu	r2,-20(fp)
 4001d48:	1885c83a 	sub	r2,r3,r2
 4001d4c:	e0bff88d 	sth	r2,-30(fp)
                data_p += bytes_tosend;
 4001d50:	e0bffb0b 	ldhu	r2,-20(fp)
 4001d54:	e0fff717 	ldw	r3,-36(fp)
 4001d58:	1885883a 	add	r2,r3,r2
 4001d5c:	e0bff715 	stw	r2,-36(fp)

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value

        while(bytes_left) {
 4001d60:	003f5506 	br	4001ab8 <__alt_data_end+0xfc001ab8>
                bytes_left -= bytes_tosend;
                data_p += bytes_tosend;
        }//while( bytes_left...
breakout:

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 4001d64:	01403e04 	movi	r5,248
 4001d68:	e13ffc17 	ldw	r4,-16(fp)
 4001d6c:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 4001d70:	10803fcc 	andi	r2,r2,255
 4001d74:	1080080c 	andi	r2,r2,32
 4001d78:	10000226 	beq	r2,zero,4001d84 <_ZN3USB11OutTransferEP6EpInfottPh+0x36c>
 4001d7c:	00c00044 	movi	r3,1
 4001d80:	00000106 	br	4001d88 <_ZN3USB11OutTransferEP6EpInfottPh+0x370>
 4001d84:	0007883a 	mov	r3,zero
 4001d88:	e0bffd17 	ldw	r2,-12(fp)
 4001d8c:	1940004c 	andi	r5,r3,1
 4001d90:	11000083 	ldbu	r4,2(r2)
 4001d94:	00ffff84 	movi	r3,-2
 4001d98:	20c6703a 	and	r3,r4,r3
 4001d9c:	1809883a 	mov	r4,r3
 4001da0:	2807883a 	mov	r3,r5
 4001da4:	20c6b03a 	or	r3,r4,r3
 4001da8:	10c00085 	stb	r3,2(r2)
        return ( rcode); //should be 0 in all cases
 4001dac:	e0bff603 	ldbu	r2,-40(fp)
}
 4001db0:	e037883a 	mov	sp,fp
 4001db4:	dfc00117 	ldw	ra,4(sp)
 4001db8:	df000017 	ldw	fp,0(sp)
 4001dbc:	dec00204 	addi	sp,sp,8
 4001dc0:	f800283a 	ret

04001dc4 <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 4001dc4:	defff704 	addi	sp,sp,-36
 4001dc8:	dfc00815 	stw	ra,32(sp)
 4001dcc:	df000715 	stw	fp,28(sp)
 4001dd0:	df000704 	addi	fp,sp,28
 4001dd4:	e13ffc15 	stw	r4,-16(fp)
 4001dd8:	2809883a 	mov	r4,r5
 4001ddc:	3007883a 	mov	r3,r6
 4001de0:	3805883a 	mov	r2,r7
 4001de4:	e13ffd05 	stb	r4,-12(fp)
 4001de8:	e0fffe05 	stb	r3,-8(fp)
 4001dec:	e0bfff0d 	sth	r2,-4(fp)
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 4001df0:	4000e040 	call	4000e04 <_Z6millisv>
 4001df4:	1084e204 	addi	r2,r2,5000
 4001df8:	e0bffa15 	stw	r2,-24(fp)
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 4001dfc:	e03ff905 	stb	zero,-28(fp)
        uint8_t retry_count = 0;
 4001e00:	e03ff945 	stb	zero,-27(fp)
        uint16_t nak_count = 0;
 4001e04:	e03ff98d 	sth	zero,-26(fp)

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 4001e08:	4000e040 	call	4000e04 <_Z6millisv>
 4001e0c:	1007883a 	mov	r3,r2
 4001e10:	e0bffa17 	ldw	r2,-24(fp)
 4001e14:	1885c83a 	sub	r2,r3,r2
 4001e18:	1004d7fa 	srli	r2,r2,31
 4001e1c:	10803fcc 	andi	r2,r2,255
 4001e20:	10004226 	beq	r2,zero,4001f2c <_ZN3USB11dispatchPktEhht+0x168>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 4001e24:	e0fffd03 	ldbu	r3,-12(fp)
 4001e28:	e0bffe03 	ldbu	r2,-8(fp)
 4001e2c:	1884b03a 	or	r2,r3,r2
 4001e30:	10803fcc 	andi	r2,r2,255
 4001e34:	100d883a 	mov	r6,r2
 4001e38:	01403c04 	movi	r5,240
 4001e3c:	e13ffc17 	ldw	r4,-16(fp)
 4001e40:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 4001e44:	00bfffc4 	movi	r2,-1
 4001e48:	e0bff905 	stb	r2,-28(fp)

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 4001e4c:	4000e040 	call	4000e04 <_Z6millisv>
 4001e50:	1007883a 	mov	r3,r2
 4001e54:	e0bffa17 	ldw	r2,-24(fp)
 4001e58:	1885c83a 	sub	r2,r3,r2
 4001e5c:	1004d7fa 	srli	r2,r2,31
 4001e60:	10803fcc 	andi	r2,r2,255
 4001e64:	10000e26 	beq	r2,zero,4001ea0 <_ZN3USB11dispatchPktEhht+0xdc>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 4001e68:	01403204 	movi	r5,200
 4001e6c:	e13ffc17 	ldw	r4,-16(fp)
 4001e70:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 4001e74:	e0bffb05 	stb	r2,-20(fp)

                        if(tmpdata & bmHXFRDNIRQ) {
 4001e78:	e0bffb03 	ldbu	r2,-20(fp)
 4001e7c:	10803fcc 	andi	r2,r2,255
 4001e80:	1080201c 	xori	r2,r2,128
 4001e84:	10bfe004 	addi	r2,r2,-128
 4001e88:	103ff00e 	bge	r2,zero,4001e4c <__alt_data_end+0xfc001e4c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 4001e8c:	01802004 	movi	r6,128
 4001e90:	01403204 	movi	r5,200
 4001e94:	e13ffc17 	ldw	r4,-16(fp)
 4001e98:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
                                rcode = 0x00;
 4001e9c:	e03ff905 	stb	zero,-28(fp)
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 4001ea0:	01403e04 	movi	r5,248
 4001ea4:	e13ffc17 	ldw	r4,-16(fp)
 4001ea8:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 4001eac:	108003cc 	andi	r2,r2,15
 4001eb0:	e0bff905 	stb	r2,-28(fp)

                switch(rcode) {
 4001eb4:	e0bff903 	ldbu	r2,-28(fp)
 4001eb8:	10c00120 	cmpeqi	r3,r2,4
 4001ebc:	1800031e 	bne	r3,zero,4001ecc <_ZN3USB11dispatchPktEhht+0x108>
 4001ec0:	108003a0 	cmpeqi	r2,r2,14
 4001ec4:	10000b1e 	bne	r2,zero,4001ef4 <_ZN3USB11dispatchPktEhht+0x130>
 4001ec8:	00001206 	br	4001f14 <_ZN3USB11dispatchPktEhht+0x150>
                        case hrNAK:
                                nak_count++;
 4001ecc:	e0bff98b 	ldhu	r2,-26(fp)
 4001ed0:	10800044 	addi	r2,r2,1
 4001ed4:	e0bff98d 	sth	r2,-26(fp)
                                if(nak_limit && (nak_count == nak_limit))
 4001ed8:	e0bfff0b 	ldhu	r2,-4(fp)
 4001edc:	10000f26 	beq	r2,zero,4001f1c <_ZN3USB11dispatchPktEhht+0x158>
 4001ee0:	e0fff98b 	ldhu	r3,-26(fp)
 4001ee4:	e0bfff0b 	ldhu	r2,-4(fp)
 4001ee8:	18800c1e 	bne	r3,r2,4001f1c <_ZN3USB11dispatchPktEhht+0x158>
                                        return (rcode);
 4001eec:	e0bff903 	ldbu	r2,-28(fp)
 4001ef0:	00000f06 	br	4001f30 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 4001ef4:	e0bff943 	ldbu	r2,-27(fp)
 4001ef8:	10800044 	addi	r2,r2,1
 4001efc:	e0bff945 	stb	r2,-27(fp)
                                if(retry_count == USB_RETRY_LIMIT)
 4001f00:	e0bff943 	ldbu	r2,-27(fp)
 4001f04:	108000d8 	cmpnei	r2,r2,3
 4001f08:	1000061e 	bne	r2,zero,4001f24 <_ZN3USB11dispatchPktEhht+0x160>
                                        return (rcode);
 4001f0c:	e0bff903 	ldbu	r2,-28(fp)
 4001f10:	00000706 	br	4001f30 <_ZN3USB11dispatchPktEhht+0x16c>
                                break;
                        default:
                                return (rcode);
 4001f14:	e0bff903 	ldbu	r2,-28(fp)
 4001f18:	00000506 	br	4001f30 <_ZN3USB11dispatchPktEhht+0x16c>
                switch(rcode) {
                        case hrNAK:
                                nak_count++;
                                if(nak_limit && (nak_count == nak_limit))
                                        return (rcode);
                                break;
 4001f1c:	0001883a 	nop
 4001f20:	003fb906 	br	4001e08 <__alt_data_end+0xfc001e08>
                        case hrTIMEOUT:
                                retry_count++;
                                if(retry_count == USB_RETRY_LIMIT)
                                        return (rcode);
                                break;
 4001f24:	0001883a 	nop
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
        uint8_t retry_count = 0;
        uint16_t nak_count = 0;

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 4001f28:	003fb706 	br	4001e08 <__alt_data_end+0xfc001e08>
                        default:
                                return (rcode);
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 4001f2c:	e0bff903 	ldbu	r2,-28(fp)
}
 4001f30:	e037883a 	mov	sp,fp
 4001f34:	dfc00117 	ldw	ra,4(sp)
 4001f38:	df000017 	ldw	fp,0(sp)
 4001f3c:	dec00204 	addi	sp,sp,8
 4001f40:	f800283a 	ret

04001f44 <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 4001f44:	defffa04 	addi	sp,sp,-24
 4001f48:	dfc00515 	stw	ra,20(sp)
 4001f4c:	df000415 	stw	fp,16(sp)
 4001f50:	df000404 	addi	fp,sp,16
 4001f54:	e13ffe15 	stw	r4,-8(fp)
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 4001f58:	e03ffc05 	stb	zero,-16(fp)

        MAX3421e::Task();
 4001f5c:	e13ffe17 	ldw	r4,-8(fp)
 4001f60:	4009c180 	call	4009c18 <_ZN8MAX3421e4TaskEv>

        tmpdata = getVbusState();
 4001f64:	e13ffe17 	ldw	r4,-8(fp)
 4001f68:	40093680 	call	4009368 <_ZN8MAX3421e12getVbusStateEv>
 4001f6c:	e0bffcc5 	stb	r2,-13(fp)

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 4001f70:	e0bffcc3 	ldbu	r2,-13(fp)
 4001f74:	10c00060 	cmpeqi	r3,r2,1
 4001f78:	1800091e 	bne	r3,zero,4001fa0 <_ZN3USB4TaskEv+0x5c>
 4001f7c:	10c00088 	cmpgei	r3,r2,2
 4001f80:	1800021e 	bne	r3,zero,4001f8c <_ZN3USB4TaskEv+0x48>
 4001f84:	10000a26 	beq	r2,zero,4001fb0 <_ZN3USB4TaskEv+0x6c>
 4001f88:	00001f06 	br	4002008 <_ZN3USB4TaskEv+0xc4>
 4001f8c:	10c000a0 	cmpeqi	r3,r2,2
 4001f90:	1800121e 	bne	r3,zero,4001fdc <_ZN3USB4TaskEv+0x98>
 4001f94:	108000e0 	cmpeqi	r2,r2,3
 4001f98:	10000e1e 	bne	r2,zero,4001fd4 <_ZN3USB4TaskEv+0x90>
 4001f9c:	00001a06 	br	4002008 <_ZN3USB4TaskEv+0xc4>
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 4001fa0:	008004c4 	movi	r2,19
 4001fa4:	d0b23545 	stb	r2,-14123(gp)
                        lowspeed = false;
 4001fa8:	e03ffc05 	stb	zero,-16(fp)
                        break;
 4001fac:	00001606 	br	4002008 <_ZN3USB4TaskEv+0xc4>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 4001fb0:	d0b23543 	ldbu	r2,-14123(gp)
 4001fb4:	10803fcc 	andi	r2,r2,255
 4001fb8:	10803c0c 	andi	r2,r2,240
 4001fbc:	10800420 	cmpeqi	r2,r2,16
 4001fc0:	1000021e 	bne	r2,zero,4001fcc <_ZN3USB4TaskEv+0x88>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 4001fc4:	00800444 	movi	r2,17
 4001fc8:	d0b23545 	stb	r2,-14123(gp)
                        lowspeed = false;
 4001fcc:	e03ffc05 	stb	zero,-16(fp)
                        break;
 4001fd0:	00000d06 	br	4002008 <_ZN3USB4TaskEv+0xc4>
                case LSHOST:

                        lowspeed = true;
 4001fd4:	00800044 	movi	r2,1
 4001fd8:	e0bffc05 	stb	r2,-16(fp)
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 4001fdc:	d0b23543 	ldbu	r2,-14123(gp)
 4001fe0:	10803fcc 	andi	r2,r2,255
 4001fe4:	10803c0c 	andi	r2,r2,240
 4001fe8:	10800418 	cmpnei	r2,r2,16
 4001fec:	1000051e 	bne	r2,zero,4002004 <_ZN3USB4TaskEv+0xc0>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 4001ff0:	4000e040 	call	4000e04 <_Z6millisv>
 4001ff4:	10803204 	addi	r2,r2,200
 4001ff8:	d0b23615 	stw	r2,-14120(gp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 4001ffc:	00800804 	movi	r2,32
 4002000:	d0b23545 	stb	r2,-14123(gp)
                        }
                        break;
 4002004:	0001883a 	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 4002008:	e03ffc45 	stb	zero,-15(fp)
 400200c:	e0bffc43 	ldbu	r2,-15(fp)
 4002010:	10800428 	cmpgeui	r2,r2,16
 4002014:	1000201e 	bne	r2,zero,4002098 <_ZN3USB4TaskEv+0x154>
                if(devConfig[i])
 4002018:	e0bffc43 	ldbu	r2,-15(fp)
 400201c:	e0fffe17 	ldw	r3,-8(fp)
 4002020:	10800784 	addi	r2,r2,30
 4002024:	1085883a 	add	r2,r2,r2
 4002028:	1085883a 	add	r2,r2,r2
 400202c:	1885883a 	add	r2,r3,r2
 4002030:	10800017 	ldw	r2,0(r2)
 4002034:	10001426 	beq	r2,zero,4002088 <_ZN3USB4TaskEv+0x144>
                        rcode = devConfig[i]->Poll();
 4002038:	e0bffc43 	ldbu	r2,-15(fp)
 400203c:	e0fffe17 	ldw	r3,-8(fp)
 4002040:	10800784 	addi	r2,r2,30
 4002044:	1085883a 	add	r2,r2,r2
 4002048:	1085883a 	add	r2,r2,r2
 400204c:	1885883a 	add	r2,r3,r2
 4002050:	10800017 	ldw	r2,0(r2)
 4002054:	10800017 	ldw	r2,0(r2)
 4002058:	10800304 	addi	r2,r2,12
 400205c:	10c00017 	ldw	r3,0(r2)
 4002060:	e0bffc43 	ldbu	r2,-15(fp)
 4002064:	e13ffe17 	ldw	r4,-8(fp)
 4002068:	10800784 	addi	r2,r2,30
 400206c:	1085883a 	add	r2,r2,r2
 4002070:	1085883a 	add	r2,r2,r2
 4002074:	2085883a 	add	r2,r4,r2
 4002078:	10800017 	ldw	r2,0(r2)
 400207c:	1009883a 	mov	r4,r2
 4002080:	183ee83a 	callr	r3
 4002084:	e0bffd05 	stb	r2,-12(fp)
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
                        }
                        break;
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 4002088:	e0bffc43 	ldbu	r2,-15(fp)
 400208c:	10800044 	addi	r2,r2,1
 4002090:	e0bffc45 	stb	r2,-15(fp)
 4002094:	003fdd06 	br	400200c <__alt_data_end+0xfc00200c>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
 4002098:	d0b23543 	ldbu	r2,-14123(gp)
 400209c:	10803fcc 	andi	r2,r2,255
 40020a0:	10c01020 	cmpeqi	r3,r2,64
 40020a4:	1800511e 	bne	r3,zero,40021ec <_ZN3USB4TaskEv+0x2a8>
 40020a8:	10c01048 	cmpgei	r3,r2,65
 40020ac:	18000c1e 	bne	r3,zero,40020e0 <_ZN3USB4TaskEv+0x19c>
 40020b0:	10c004e0 	cmpeqi	r3,r2,19
 40020b4:	18008e1e 	bne	r3,zero,40022f0 <_ZN3USB4TaskEv+0x3ac>
 40020b8:	10c00508 	cmpgei	r3,r2,20
 40020bc:	1800031e 	bne	r3,zero,40020cc <_ZN3USB4TaskEv+0x188>
 40020c0:	10800460 	cmpeqi	r2,r2,17
 40020c4:	10000f1e 	bne	r2,zero,4002104 <_ZN3USB4TaskEv+0x1c0>
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
 40020c8:	00009406 	br	400231c <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
 40020cc:	10c00820 	cmpeqi	r3,r2,32
 40020d0:	1800351e 	bne	r3,zero,40021a8 <_ZN3USB4TaskEv+0x264>
 40020d4:	10800c20 	cmpeqi	r2,r2,48
 40020d8:	10003d1e 	bne	r2,zero,40021d0 <_ZN3USB4TaskEv+0x28c>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 40020dc:	00008f06 	br	400231c <_ZN3USB4TaskEv+0x3d8>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
 40020e0:	10c02020 	cmpeqi	r3,r2,128
 40020e4:	18006e1e 	bne	r3,zero,40022a0 <_ZN3USB4TaskEv+0x35c>
 40020e8:	10c02048 	cmpgei	r3,r2,129
 40020ec:	18008b1e 	bne	r3,zero,400231c <_ZN3USB4TaskEv+0x3d8>
 40020f0:	10c01420 	cmpeqi	r3,r2,80
 40020f4:	1800521e 	bne	r3,zero,4002240 <_ZN3USB4TaskEv+0x2fc>
 40020f8:	10801460 	cmpeqi	r2,r2,81
 40020fc:	10005e1e 	bne	r2,zero,4002278 <_ZN3USB4TaskEv+0x334>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 4002100:	00008606 	br	400231c <_ZN3USB4TaskEv+0x3d8>
                if(devConfig[i])
                        rcode = devConfig[i]->Poll();

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();
 4002104:	e13ffe17 	ldw	r4,-8(fp)
 4002108:	4000e840 	call	4000e84 <_ZN3USB4initEv>

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 400210c:	e03ffc85 	stb	zero,-14(fp)
 4002110:	e0bffc83 	ldbu	r2,-14(fp)
 4002114:	10800428 	cmpgeui	r2,r2,16
 4002118:	1000201e 	bne	r2,zero,400219c <_ZN3USB4TaskEv+0x258>
                                if(devConfig[i])
 400211c:	e0bffc83 	ldbu	r2,-14(fp)
 4002120:	e0fffe17 	ldw	r3,-8(fp)
 4002124:	10800784 	addi	r2,r2,30
 4002128:	1085883a 	add	r2,r2,r2
 400212c:	1085883a 	add	r2,r2,r2
 4002130:	1885883a 	add	r2,r3,r2
 4002134:	10800017 	ldw	r2,0(r2)
 4002138:	10001426 	beq	r2,zero,400218c <_ZN3USB4TaskEv+0x248>
                                        rcode = devConfig[i]->Release();
 400213c:	e0bffc83 	ldbu	r2,-14(fp)
 4002140:	e0fffe17 	ldw	r3,-8(fp)
 4002144:	10800784 	addi	r2,r2,30
 4002148:	1085883a 	add	r2,r2,r2
 400214c:	1085883a 	add	r2,r2,r2
 4002150:	1885883a 	add	r2,r3,r2
 4002154:	10800017 	ldw	r2,0(r2)
 4002158:	10800017 	ldw	r2,0(r2)
 400215c:	10800204 	addi	r2,r2,8
 4002160:	10c00017 	ldw	r3,0(r2)
 4002164:	e0bffc83 	ldbu	r2,-14(fp)
 4002168:	e13ffe17 	ldw	r4,-8(fp)
 400216c:	10800784 	addi	r2,r2,30
 4002170:	1085883a 	add	r2,r2,r2
 4002174:	1085883a 	add	r2,r2,r2
 4002178:	2085883a 	add	r2,r4,r2
 400217c:	10800017 	ldw	r2,0(r2)
 4002180:	1009883a 	mov	r4,r2
 4002184:	183ee83a 	callr	r3
 4002188:	e0bffd05 	stb	r2,-12(fp)

        switch(usb_task_state) {
                case USB_DETACHED_SUBSTATE_INITIALIZE:
                        init();

                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 400218c:	e0bffc83 	ldbu	r2,-14(fp)
 4002190:	10800044 	addi	r2,r2,1
 4002194:	e0bffc85 	stb	r2,-14(fp)
 4002198:	003fdd06 	br	4002110 <__alt_data_end+0xfc002110>
                                if(devConfig[i])
                                        rcode = devConfig[i]->Release();

                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 400219c:	00800484 	movi	r2,18
 40021a0:	d0b23545 	stb	r2,-14123(gp)
                        break;
 40021a4:	00005d06 	br	400231c <_ZN3USB4TaskEv+0x3d8>
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 40021a8:	4000e040 	call	4000e04 <_Z6millisv>
 40021ac:	1007883a 	mov	r3,r2
 40021b0:	d0b23617 	ldw	r2,-14120(gp)
 40021b4:	1885c83a 	sub	r2,r3,r2
 40021b8:	0084303a 	nor	r2,zero,r2
 40021bc:	1004d7fa 	srli	r2,r2,31
 40021c0:	10803fcc 	andi	r2,r2,255
 40021c4:	10004c26 	beq	r2,zero,40022f8 <_ZN3USB4TaskEv+0x3b4>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 40021c8:	00800c04 	movi	r2,48
 40021cc:	d0b23545 	stb	r2,-14123(gp)
                        else break; // don't fall through
                case USB_ATTACHED_SUBSTATE_RESET_DEVICE:
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 40021d0:	01800044 	movi	r6,1
 40021d4:	01403a04 	movi	r5,232
 40021d8:	e13ffe17 	ldw	r4,-8(fp)
 40021dc:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 40021e0:	00801004 	movi	r2,64
 40021e4:	d0b23545 	stb	r2,-14123(gp)
                        break;
 40021e8:	00004c06 	br	400231c <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE:
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 40021ec:	01403a04 	movi	r5,232
 40021f0:	e13ffe17 	ldw	r4,-8(fp)
 40021f4:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 40021f8:	10803fcc 	andi	r2,r2,255
 40021fc:	1080004c 	andi	r2,r2,1
 4002200:	1005003a 	cmpeq	r2,r2,zero
 4002204:	10803fcc 	andi	r2,r2,255
 4002208:	10003d26 	beq	r2,zero,4002300 <_ZN3USB4TaskEv+0x3bc>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 400220c:	01403604 	movi	r5,216
 4002210:	e13ffe17 	ldw	r4,-8(fp)
 4002214:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 4002218:	10800214 	ori	r2,r2,8
 400221c:	e0bffcc5 	stb	r2,-13(fp)
                                regWr(rMODE, tmpdata);
 4002220:	e0bffcc3 	ldbu	r2,-13(fp)
 4002224:	100d883a 	mov	r6,r2
 4002228:	01403604 	movi	r5,216
 400222c:	e13ffe17 	ldw	r4,-8(fp)
 4002230:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 4002234:	00801404 	movi	r2,80
 4002238:	d0b23545 	stb	r2,-14123(gp)
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
 400223c:	00003006 	br	4002300 <_ZN3USB4TaskEv+0x3bc>
                case USB_ATTACHED_SUBSTATE_WAIT_SOF: //todo: change check order
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 4002240:	01403204 	movi	r5,200
 4002244:	e13ffe17 	ldw	r4,-8(fp)
 4002248:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 400224c:	10803fcc 	andi	r2,r2,255
 4002250:	1080100c 	andi	r2,r2,64
 4002254:	1004c03a 	cmpne	r2,r2,zero
 4002258:	10803fcc 	andi	r2,r2,255
 400225c:	10002a26 	beq	r2,zero,4002308 <_ZN3USB4TaskEv+0x3c4>
                                //when first SOF received _and_ 20ms has passed we can continue
                                /*
                                if (delay < (uint32_t)millis()) //20ms passed
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 4002260:	00801444 	movi	r2,81
 4002264:	d0b23545 	stb	r2,-14123(gp)
                                delay = (uint32_t)millis() + 20;
 4002268:	4000e040 	call	4000e04 <_Z6millisv>
 400226c:	10800504 	addi	r2,r2,20
 4002270:	d0b23615 	stw	r2,-14120(gp)
                        }
                        break;
 4002274:	00002406 	br	4002308 <_ZN3USB4TaskEv+0x3c4>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 4002278:	4000e040 	call	4000e04 <_Z6millisv>
 400227c:	1007883a 	mov	r3,r2
 4002280:	d0b23617 	ldw	r2,-14120(gp)
 4002284:	1885c83a 	sub	r2,r3,r2
 4002288:	0084303a 	nor	r2,zero,r2
 400228c:	1004d7fa 	srli	r2,r2,31
 4002290:	10803fcc 	andi	r2,r2,255
 4002294:	10001e26 	beq	r2,zero,4002310 <_ZN3USB4TaskEv+0x3cc>
 4002298:	00bfe004 	movi	r2,-128
 400229c:	d0b23545 	stb	r2,-14123(gp)
                case USB_STATE_CONFIGURING:

                        //Serial.print("\r\nConf.LS: ");
                        //Serial.println(lowspeed, HEX);

                        rcode = Configuring(0, 0, lowspeed);
 40022a0:	e0bffc03 	ldbu	r2,-16(fp)
 40022a4:	100f883a 	mov	r7,r2
 40022a8:	000d883a 	mov	r6,zero
 40022ac:	000b883a 	mov	r5,zero
 40022b0:	e13ffe17 	ldw	r4,-8(fp)
 40022b4:	40027240 	call	4002724 <_ZN3USB11ConfiguringEhhb>
 40022b8:	e0bffd05 	stb	r2,-12(fp)

                        if(rcode) {
 40022bc:	e0bffd03 	ldbu	r2,-12(fp)
 40022c0:	10000826 	beq	r2,zero,40022e4 <_ZN3USB4TaskEv+0x3a0>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 40022c4:	e0bffd03 	ldbu	r2,-12(fp)
 40022c8:	108034a0 	cmpeqi	r2,r2,210
 40022cc:	1000121e 	bne	r2,zero,4002318 <_ZN3USB4TaskEv+0x3d4>
                                        usb_error = rcode;
 40022d0:	e0bffd03 	ldbu	r2,-12(fp)
 40022d4:	d0b23505 	stb	r2,-14124(gp)
                                        usb_task_state = USB_STATE_ERROR;
 40022d8:	00bfe804 	movi	r2,-96
 40022dc:	d0b23545 	stb	r2,-14123(gp)
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
 40022e0:	00000d06 	br	4002318 <_ZN3USB4TaskEv+0x3d4>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
 40022e4:	00bfe404 	movi	r2,-112
 40022e8:	d0b23545 	stb	r2,-14123(gp)
                        break;
 40022ec:	00000a06 	br	4002318 <_ZN3USB4TaskEv+0x3d4>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
                        break;
                case USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE: //just sit here
                        break;
                case USB_DETACHED_SUBSTATE_ILLEGAL: //just sit here
                        break;
 40022f0:	0001883a 	nop
 40022f4:	00000906 	br	400231c <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_SETTLE: //settle time for just attached device
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                        else break; // don't fall through
 40022f8:	0001883a 	nop
 40022fc:	00000706 	br	400231c <_ZN3USB4TaskEv+0x3d8>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
                                regWr(rMODE, tmpdata);
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                                //delay = (uint32_t)millis() + 20; //20ms wait after reset per USB spec
                        }
                        break;
 4002300:	0001883a 	nop
 4002304:	00000506 	br	400231c <_ZN3USB4TaskEv+0x3d8>
                                        usb_task_state = USB_STATE_CONFIGURING;
                                 */
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
                                delay = (uint32_t)millis() + 20;
                        }
                        break;
 4002308:	0001883a 	nop
 400230c:	00000306 	br	400231c <_ZN3USB4TaskEv+0x3d8>
                case USB_ATTACHED_SUBSTATE_WAIT_RESET:
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
                        else break; // don't fall through
 4002310:	0001883a 	nop
 4002314:	00000106 	br	400231c <_ZN3USB4TaskEv+0x3d8>
                                        usb_error = rcode;
                                        usb_task_state = USB_STATE_ERROR;
                                }
                        } else
                                usb_task_state = USB_STATE_RUNNING;
                        break;
 4002318:	0001883a 	nop
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 400231c:	0001883a 	nop
 4002320:	e037883a 	mov	sp,fp
 4002324:	dfc00117 	ldw	ra,4(sp)
 4002328:	df000017 	ldw	fp,0(sp)
 400232c:	dec00204 	addi	sp,sp,8
 4002330:	f800283a 	ret

04002334 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 4002334:	defff704 	addi	sp,sp,-36
 4002338:	dfc00815 	stw	ra,32(sp)
 400233c:	df000715 	stw	fp,28(sp)
 4002340:	df000704 	addi	fp,sp,28
 4002344:	e13ffc15 	stw	r4,-16(fp)
 4002348:	2809883a 	mov	r4,r5
 400234c:	3007883a 	mov	r3,r6
 4002350:	3805883a 	mov	r2,r7
 4002354:	e13ffd05 	stb	r4,-12(fp)
 4002358:	e0fffe05 	stb	r3,-8(fp)
 400235c:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 4002360:	e03ff915 	stw	zero,-28(fp)
 4002364:	e03ffa15 	stw	zero,-24(fp)

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 4002368:	e0bffc17 	ldw	r2,-16(fp)
 400236c:	000b883a 	mov	r5,zero
 4002370:	1009883a 	mov	r4,r2
 4002374:	40034640 	call	4003464 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 4002378:	e0bff915 	stw	r2,-28(fp)

        if(!p0)
 400237c:	e0bff917 	ldw	r2,-28(fp)
 4002380:	1000021e 	bne	r2,zero,400238c <_ZN3USB17DefaultAddressingEhhb+0x58>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 4002384:	00bff584 	movi	r2,-42
 4002388:	00003d06 	br	4002480 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        if(!p0->epinfo)
 400238c:	e0bff917 	ldw	r2,-28(fp)
 4002390:	10c00003 	ldbu	r3,0(r2)
 4002394:	11000043 	ldbu	r4,1(r2)
 4002398:	2008923a 	slli	r4,r4,8
 400239c:	20c6b03a 	or	r3,r4,r3
 40023a0:	11000083 	ldbu	r4,2(r2)
 40023a4:	2008943a 	slli	r4,r4,16
 40023a8:	20c6b03a 	or	r3,r4,r3
 40023ac:	108000c3 	ldbu	r2,3(r2)
 40023b0:	1004963a 	slli	r2,r2,24
 40023b4:	10c4b03a 	or	r2,r2,r3
 40023b8:	1000021e 	bne	r2,zero,40023c4 <_ZN3USB17DefaultAddressingEhhb+0x90>
                return USB_ERROR_EPINFO_IS_NULL;
 40023bc:	00bff5c4 	movi	r2,-41
 40023c0:	00002f06 	br	4002480 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p0->lowspeed = (lowspeed) ? true : false;
 40023c4:	e0bff917 	ldw	r2,-28(fp)
 40023c8:	e0ffff03 	ldbu	r3,-4(fp)
 40023cc:	10c00185 	stb	r3,6(r2)

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 40023d0:	e0bffc17 	ldw	r2,-16(fp)
 40023d4:	e0fffd03 	ldbu	r3,-12(fp)
 40023d8:	e13ffe03 	ldbu	r4,-8(fp)
 40023dc:	200f883a 	mov	r7,r4
 40023e0:	000d883a 	mov	r6,zero
 40023e4:	180b883a 	mov	r5,r3
 40023e8:	1009883a 	mov	r4,r2
 40023ec:	400351c0 	call	400351c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 40023f0:	e0bffb05 	stb	r2,-20(fp)

        if(!bAddress)
 40023f4:	e0bffb03 	ldbu	r2,-20(fp)
 40023f8:	1000021e 	bne	r2,zero,4002404 <_ZN3USB17DefaultAddressingEhhb+0xd0>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 40023fc:	00bff504 	movi	r2,-44
 4002400:	00001f06 	br	4002480 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p = addrPool.GetUsbDevicePtr(bAddress);
 4002404:	e0bffc17 	ldw	r2,-16(fp)
 4002408:	e0fffb03 	ldbu	r3,-20(fp)
 400240c:	180b883a 	mov	r5,r3
 4002410:	1009883a 	mov	r4,r2
 4002414:	40034640 	call	4003464 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 4002418:	e0bffa15 	stw	r2,-24(fp)

        if(!p)
 400241c:	e0bffa17 	ldw	r2,-24(fp)
 4002420:	1000021e 	bne	r2,zero,400242c <_ZN3USB17DefaultAddressingEhhb+0xf8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 4002424:	00bff584 	movi	r2,-42
 4002428:	00001506 	br	4002480 <_ZN3USB17DefaultAddressingEhhb+0x14c>

        p->lowspeed = lowspeed;
 400242c:	e0bffa17 	ldw	r2,-24(fp)
 4002430:	e0ffff03 	ldbu	r3,-4(fp)
 4002434:	10c00185 	stb	r3,6(r2)

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 4002438:	e0bffb03 	ldbu	r2,-20(fp)
 400243c:	100f883a 	mov	r7,r2
 4002440:	000d883a 	mov	r6,zero
 4002444:	000b883a 	mov	r5,zero
 4002448:	e13ffc17 	ldw	r4,-16(fp)
 400244c:	40032280 	call	4003228 <_ZN3USB7setAddrEhhh>
 4002450:	e0bffb45 	stb	r2,-19(fp)

        if(rcode) {
 4002454:	e0bffb43 	ldbu	r2,-19(fp)
 4002458:	10000826 	beq	r2,zero,400247c <_ZN3USB17DefaultAddressingEhhb+0x148>
                addrPool.FreeAddress(bAddress);
 400245c:	e0bffc17 	ldw	r2,-16(fp)
 4002460:	e0fffb03 	ldbu	r3,-20(fp)
 4002464:	180b883a 	mov	r5,r3
 4002468:	1009883a 	mov	r4,r2
 400246c:	400377c0 	call	400377c <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 4002470:	e03ffb05 	stb	zero,-20(fp)
                return rcode;
 4002474:	e0bffb43 	ldbu	r2,-19(fp)
 4002478:	00000106 	br	4002480 <_ZN3USB17DefaultAddressingEhhb+0x14c>
        }
        return 0;
 400247c:	0005883a 	mov	r2,zero
};
 4002480:	e037883a 	mov	sp,fp
 4002484:	dfc00117 	ldw	ra,4(sp)
 4002488:	df000017 	ldw	fp,0(sp)
 400248c:	dec00204 	addi	sp,sp,8
 4002490:	f800283a 	ret

04002494 <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 4002494:	defff804 	addi	sp,sp,-32
 4002498:	dfc00715 	stw	ra,28(sp)
 400249c:	df000615 	stw	fp,24(sp)
 40024a0:	df000604 	addi	fp,sp,24
 40024a4:	e13ffb15 	stw	r4,-20(fp)
 40024a8:	3009883a 	mov	r4,r6
 40024ac:	3807883a 	mov	r3,r7
 40024b0:	e0800217 	ldw	r2,8(fp)
 40024b4:	e17ffc05 	stb	r5,-16(fp)
 40024b8:	e13ffd05 	stb	r4,-12(fp)
 40024bc:	e0fffe05 	stb	r3,-8(fp)
 40024c0:	e0bfff05 	stb	r2,-4(fp)
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 40024c4:	e03ffa05 	stb	zero,-24(fp)

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 40024c8:	e0bffc03 	ldbu	r2,-16(fp)
 40024cc:	e0fffb17 	ldw	r3,-20(fp)
 40024d0:	10800784 	addi	r2,r2,30
 40024d4:	1085883a 	add	r2,r2,r2
 40024d8:	1085883a 	add	r2,r2,r2
 40024dc:	1885883a 	add	r2,r3,r2
 40024e0:	10800017 	ldw	r2,0(r2)
 40024e4:	10800017 	ldw	r2,0(r2)
 40024e8:	10800104 	addi	r2,r2,4
 40024ec:	10c00017 	ldw	r3,0(r2)
 40024f0:	e0bffc03 	ldbu	r2,-16(fp)
 40024f4:	e13ffb17 	ldw	r4,-20(fp)
 40024f8:	10800784 	addi	r2,r2,30
 40024fc:	1085883a 	add	r2,r2,r2
 4002500:	1085883a 	add	r2,r2,r2
 4002504:	2085883a 	add	r2,r4,r2
 4002508:	10800017 	ldw	r2,0(r2)
 400250c:	e13ffd03 	ldbu	r4,-12(fp)
 4002510:	e17ffe03 	ldbu	r5,-8(fp)
 4002514:	e1bfff03 	ldbu	r6,-4(fp)
 4002518:	300f883a 	mov	r7,r6
 400251c:	280d883a 	mov	r6,r5
 4002520:	200b883a 	mov	r5,r4
 4002524:	1009883a 	mov	r4,r2
 4002528:	183ee83a 	callr	r3
 400252c:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 4002530:	e0bffa43 	ldbu	r2,-23(fp)
 4002534:	10803818 	cmpnei	r2,r2,224
 4002538:	10001f1e 	bne	r2,zero,40025b8 <_ZN3USB13AttemptConfigEhhhb+0x124>
                if(parent == 0) {
 400253c:	e0bffd03 	ldbu	r2,-12(fp)
 4002540:	1000071e 	bne	r2,zero,4002560 <_ZN3USB13AttemptConfigEhhhb+0xcc>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 4002544:	01800044 	movi	r6,1
 4002548:	01403a04 	movi	r5,232
 400254c:	e13ffb17 	ldw	r4,-20(fp)
 4002550:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 4002554:	01001984 	movi	r4,102
 4002558:	4000dac0 	call	4000dac <_Z5delaym>
 400255c:	00002606 	br	40025f8 <_ZN3USB13AttemptConfigEhhhb+0x164>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 4002560:	e0bffd03 	ldbu	r2,-12(fp)
 4002564:	e0fffb17 	ldw	r3,-20(fp)
 4002568:	10800784 	addi	r2,r2,30
 400256c:	1085883a 	add	r2,r2,r2
 4002570:	1085883a 	add	r2,r2,r2
 4002574:	1885883a 	add	r2,r3,r2
 4002578:	10800017 	ldw	r2,0(r2)
 400257c:	10800017 	ldw	r2,0(r2)
 4002580:	10800504 	addi	r2,r2,20
 4002584:	10c00017 	ldw	r3,0(r2)
 4002588:	e0bffd03 	ldbu	r2,-12(fp)
 400258c:	e13ffb17 	ldw	r4,-20(fp)
 4002590:	10800784 	addi	r2,r2,30
 4002594:	1085883a 	add	r2,r2,r2
 4002598:	1085883a 	add	r2,r2,r2
 400259c:	2085883a 	add	r2,r4,r2
 40025a0:	10800017 	ldw	r2,0(r2)
 40025a4:	e13ffe03 	ldbu	r4,-8(fp)
 40025a8:	200b883a 	mov	r5,r4
 40025ac:	1009883a 	mov	r4,r2
 40025b0:	183ee83a 	callr	r3
 40025b4:	00001006 	br	40025f8 <_ZN3USB13AttemptConfigEhhhb+0x164>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 40025b8:	e0bffa43 	ldbu	r2,-23(fp)
 40025bc:	10800358 	cmpnei	r2,r2,13
 40025c0:	1000091e 	bne	r2,zero,40025e8 <_ZN3USB13AttemptConfigEhhhb+0x154>
 40025c4:	e0bffa03 	ldbu	r2,-24(fp)
 40025c8:	108000e8 	cmpgeui	r2,r2,3
 40025cc:	1000061e 	bne	r2,zero,40025e8 <_ZN3USB13AttemptConfigEhhhb+0x154>
                delay(100);
 40025d0:	01001904 	movi	r4,100
 40025d4:	4000dac0 	call	4000dac <_Z5delaym>
                retries++;
 40025d8:	e0bffa03 	ldbu	r2,-24(fp)
 40025dc:	10800044 	addi	r2,r2,1
 40025e0:	e0bffa05 	stb	r2,-24(fp)
                goto again;
 40025e4:	003fb806 	br	40024c8 <__alt_data_end+0xfc0024c8>
        } else if(rcode)
 40025e8:	e0bffa43 	ldbu	r2,-23(fp)
 40025ec:	10000226 	beq	r2,zero,40025f8 <_ZN3USB13AttemptConfigEhhhb+0x164>
                return rcode;
 40025f0:	e0bffa43 	ldbu	r2,-23(fp)
 40025f4:	00004606 	br	4002710 <_ZN3USB13AttemptConfigEhhhb+0x27c>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 40025f8:	e0bffc03 	ldbu	r2,-16(fp)
 40025fc:	e0fffb17 	ldw	r3,-20(fp)
 4002600:	10800784 	addi	r2,r2,30
 4002604:	1085883a 	add	r2,r2,r2
 4002608:	1085883a 	add	r2,r2,r2
 400260c:	1885883a 	add	r2,r3,r2
 4002610:	10800017 	ldw	r2,0(r2)
 4002614:	10800017 	ldw	r2,0(r2)
 4002618:	10c00017 	ldw	r3,0(r2)
 400261c:	e0bffc03 	ldbu	r2,-16(fp)
 4002620:	e13ffb17 	ldw	r4,-20(fp)
 4002624:	10800784 	addi	r2,r2,30
 4002628:	1085883a 	add	r2,r2,r2
 400262c:	1085883a 	add	r2,r2,r2
 4002630:	2085883a 	add	r2,r4,r2
 4002634:	10800017 	ldw	r2,0(r2)
 4002638:	e13ffd03 	ldbu	r4,-12(fp)
 400263c:	e17ffe03 	ldbu	r5,-8(fp)
 4002640:	e1bfff03 	ldbu	r6,-4(fp)
 4002644:	300f883a 	mov	r7,r6
 4002648:	280d883a 	mov	r6,r5
 400264c:	200b883a 	mov	r5,r4
 4002650:	1009883a 	mov	r4,r2
 4002654:	183ee83a 	callr	r3
 4002658:	e0bffa45 	stb	r2,-23(fp)
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 400265c:	e0bffa43 	ldbu	r2,-23(fp)
 4002660:	10800358 	cmpnei	r2,r2,13
 4002664:	1000091e 	bne	r2,zero,400268c <_ZN3USB13AttemptConfigEhhhb+0x1f8>
 4002668:	e0bffa03 	ldbu	r2,-24(fp)
 400266c:	108000e8 	cmpgeui	r2,r2,3
 4002670:	1000061e 	bne	r2,zero,400268c <_ZN3USB13AttemptConfigEhhhb+0x1f8>
                delay(100);
 4002674:	01001904 	movi	r4,100
 4002678:	4000dac0 	call	4000dac <_Z5delaym>
                retries++;
 400267c:	e0bffa03 	ldbu	r2,-24(fp)
 4002680:	10800044 	addi	r2,r2,1
 4002684:	e0bffa05 	stb	r2,-24(fp)
                goto again;
 4002688:	003f8f06 	br	40024c8 <__alt_data_end+0xfc0024c8>
        }
        if(rcode) {
 400268c:	e0bffa43 	ldbu	r2,-23(fp)
 4002690:	10001e26 	beq	r2,zero,400270c <_ZN3USB13AttemptConfigEhhhb+0x278>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 4002694:	e0bffd03 	ldbu	r2,-12(fp)
 4002698:	1000071e 	bne	r2,zero,40026b8 <_ZN3USB13AttemptConfigEhhhb+0x224>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 400269c:	01800044 	movi	r6,1
 40026a0:	01403a04 	movi	r5,232
 40026a4:	e13ffb17 	ldw	r4,-20(fp)
 40026a8:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 40026ac:	01001984 	movi	r4,102
 40026b0:	4000dac0 	call	4000dac <_Z5delaym>
 40026b4:	00001506 	br	400270c <_ZN3USB13AttemptConfigEhhhb+0x278>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 40026b8:	e0bffd03 	ldbu	r2,-12(fp)
 40026bc:	e0fffb17 	ldw	r3,-20(fp)
 40026c0:	10800784 	addi	r2,r2,30
 40026c4:	1085883a 	add	r2,r2,r2
 40026c8:	1085883a 	add	r2,r2,r2
 40026cc:	1885883a 	add	r2,r3,r2
 40026d0:	10800017 	ldw	r2,0(r2)
 40026d4:	10800017 	ldw	r2,0(r2)
 40026d8:	10800504 	addi	r2,r2,20
 40026dc:	10c00017 	ldw	r3,0(r2)
 40026e0:	e0bffd03 	ldbu	r2,-12(fp)
 40026e4:	e13ffb17 	ldw	r4,-20(fp)
 40026e8:	10800784 	addi	r2,r2,30
 40026ec:	1085883a 	add	r2,r2,r2
 40026f0:	1085883a 	add	r2,r2,r2
 40026f4:	2085883a 	add	r2,r4,r2
 40026f8:	10800017 	ldw	r2,0(r2)
 40026fc:	e13ffe03 	ldbu	r4,-8(fp)
 4002700:	200b883a 	mov	r5,r4
 4002704:	1009883a 	mov	r4,r2
 4002708:	183ee83a 	callr	r3
                }
        }
        return rcode;
 400270c:	e0bffa43 	ldbu	r2,-23(fp)
}
 4002710:	e037883a 	mov	sp,fp
 4002714:	dfc00117 	ldw	ra,4(sp)
 4002718:	df000017 	ldw	fp,0(sp)
 400271c:	dec00204 	addi	sp,sp,8
 4002720:	f800283a 	ret

04002724 <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 4002724:	deffed04 	addi	sp,sp,-76
 4002728:	dfc01215 	stw	ra,72(sp)
 400272c:	df001115 	stw	fp,68(sp)
 4002730:	df001104 	addi	fp,sp,68
 4002734:	e13ffc15 	stw	r4,-16(fp)
 4002738:	2809883a 	mov	r4,r5
 400273c:	3007883a 	mov	r3,r6
 4002740:	3805883a 	mov	r2,r7
 4002744:	e13ffd05 	stb	r4,-12(fp)
 4002748:	e0fffe05 	stb	r3,-8(fp)
 400274c:	e0bfff05 	stb	r2,-4(fp)
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 4002750:	e03ff045 	stb	zero,-63(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 4002754:	e0bff684 	addi	r2,fp,-38
 4002758:	e0bff115 	stw	r2,-60(fp)
        UsbDevice *p = NULL;
 400275c:	e03ff215 	stw	zero,-56(fp)
        EpInfo *oldep_ptr = NULL;
 4002760:	e03ff315 	stw	zero,-52(fp)
        EpInfo epInfo;

        epInfo.epAddr = 0;
 4002764:	e03ffb05 	stb	zero,-20(fp)
        epInfo.maxPktSize = 8;
 4002768:	00800204 	movi	r2,8
 400276c:	e0bffb45 	stb	r2,-19(fp)
        epInfo.bmSndToggle = 0;
 4002770:	e0fffb83 	ldbu	r3,-18(fp)
 4002774:	00bfff84 	movi	r2,-2
 4002778:	1884703a 	and	r2,r3,r2
 400277c:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmRcvToggle = 0;
 4002780:	e0fffb83 	ldbu	r3,-18(fp)
 4002784:	00bfff44 	movi	r2,-3
 4002788:	1884703a 	and	r2,r3,r2
 400278c:	e0bffb85 	stb	r2,-18(fp)
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 4002790:	e0bffb83 	ldbu	r2,-18(fp)
 4002794:	108000cc 	andi	r2,r2,3
 4002798:	10800f14 	ori	r2,r2,60
 400279c:	e0bffb85 	stb	r2,-18(fp)

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 40027a0:	e13ffc17 	ldw	r4,-16(fp)
 40027a4:	40033400 	call	4003340 <_ZN3USB14GetAddressPoolEv>
 40027a8:	e0bff415 	stw	r2,-48(fp)
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 40027ac:	e0bff417 	ldw	r2,-48(fp)
 40027b0:	10800017 	ldw	r2,0(r2)
 40027b4:	10800017 	ldw	r2,0(r2)
 40027b8:	000b883a 	mov	r5,zero
 40027bc:	e13ff417 	ldw	r4,-48(fp)
 40027c0:	103ee83a 	callr	r2
 40027c4:	e0bff215 	stw	r2,-56(fp)
        if(!p) {
 40027c8:	e0bff217 	ldw	r2,-56(fp)
 40027cc:	1000021e 	bne	r2,zero,40027d8 <_ZN3USB11ConfiguringEhhb+0xb4>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 40027d0:	00bff584 	movi	r2,-42
 40027d4:	00019206 	br	4002e20 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 40027d8:	e0bff217 	ldw	r2,-56(fp)
 40027dc:	10c00003 	ldbu	r3,0(r2)
 40027e0:	11000043 	ldbu	r4,1(r2)
 40027e4:	2008923a 	slli	r4,r4,8
 40027e8:	20c6b03a 	or	r3,r4,r3
 40027ec:	11000083 	ldbu	r4,2(r2)
 40027f0:	2008943a 	slli	r4,r4,16
 40027f4:	20c6b03a 	or	r3,r4,r3
 40027f8:	108000c3 	ldbu	r2,3(r2)
 40027fc:	1004963a 	slli	r2,r2,24
 4002800:	10c4b03a 	or	r2,r2,r3
 4002804:	e0bff315 	stw	r2,-52(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 4002808:	e0bff217 	ldw	r2,-56(fp)
 400280c:	e0fffb04 	addi	r3,fp,-20
 4002810:	19803fcc 	andi	r6,r3,255
 4002814:	11000003 	ldbu	r4,0(r2)
 4002818:	2008703a 	and	r4,r4,zero
 400281c:	200b883a 	mov	r5,r4
 4002820:	3009883a 	mov	r4,r6
 4002824:	2908b03a 	or	r4,r5,r4
 4002828:	11000005 	stb	r4,0(r2)
 400282c:	1808d23a 	srli	r4,r3,8
 4002830:	21803fcc 	andi	r6,r4,255
 4002834:	11000043 	ldbu	r4,1(r2)
 4002838:	2008703a 	and	r4,r4,zero
 400283c:	200b883a 	mov	r5,r4
 4002840:	3009883a 	mov	r4,r6
 4002844:	2908b03a 	or	r4,r5,r4
 4002848:	11000045 	stb	r4,1(r2)
 400284c:	1808d43a 	srli	r4,r3,16
 4002850:	21803fcc 	andi	r6,r4,255
 4002854:	11000083 	ldbu	r4,2(r2)
 4002858:	2008703a 	and	r4,r4,zero
 400285c:	200b883a 	mov	r5,r4
 4002860:	3009883a 	mov	r4,r6
 4002864:	2908b03a 	or	r4,r5,r4
 4002868:	11000085 	stb	r4,2(r2)
 400286c:	180ad63a 	srli	r5,r3,24
 4002870:	10c000c3 	ldbu	r3,3(r2)
 4002874:	1806703a 	and	r3,r3,zero
 4002878:	1809883a 	mov	r4,r3
 400287c:	2807883a 	mov	r3,r5
 4002880:	20c6b03a 	or	r3,r4,r3
 4002884:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
 4002888:	e0bff217 	ldw	r2,-56(fp)
 400288c:	e0ffff03 	ldbu	r3,-4(fp)
 4002890:	10c00185 	stb	r3,6(r2)
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 4002894:	00800484 	movi	r2,18
 4002898:	10ffffcc 	andi	r3,r2,65535
 400289c:	e0bff684 	addi	r2,fp,-38
 40028a0:	d8800015 	stw	r2,0(sp)
 40028a4:	180f883a 	mov	r7,r3
 40028a8:	000d883a 	mov	r6,zero
 40028ac:	000b883a 	mov	r5,zero
 40028b0:	e13ffc17 	ldw	r4,-16(fp)
 40028b4:	4002f6c0 	call	4002f6c <_ZN3USB11getDevDescrEhhtPh>
 40028b8:	e0bff045 	stb	r2,-63(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 40028bc:	e0bff217 	ldw	r2,-56(fp)
 40028c0:	e0fff317 	ldw	r3,-52(fp)
 40028c4:	19403fcc 	andi	r5,r3,255
 40028c8:	10c00003 	ldbu	r3,0(r2)
 40028cc:	1806703a 	and	r3,r3,zero
 40028d0:	1809883a 	mov	r4,r3
 40028d4:	2807883a 	mov	r3,r5
 40028d8:	20c6b03a 	or	r3,r4,r3
 40028dc:	10c00005 	stb	r3,0(r2)
 40028e0:	e0fff317 	ldw	r3,-52(fp)
 40028e4:	1806d23a 	srli	r3,r3,8
 40028e8:	19403fcc 	andi	r5,r3,255
 40028ec:	10c00043 	ldbu	r3,1(r2)
 40028f0:	1806703a 	and	r3,r3,zero
 40028f4:	1809883a 	mov	r4,r3
 40028f8:	2807883a 	mov	r3,r5
 40028fc:	20c6b03a 	or	r3,r4,r3
 4002900:	10c00045 	stb	r3,1(r2)
 4002904:	e0fff317 	ldw	r3,-52(fp)
 4002908:	1806d43a 	srli	r3,r3,16
 400290c:	19403fcc 	andi	r5,r3,255
 4002910:	10c00083 	ldbu	r3,2(r2)
 4002914:	1806703a 	and	r3,r3,zero
 4002918:	1809883a 	mov	r4,r3
 400291c:	2807883a 	mov	r3,r5
 4002920:	20c6b03a 	or	r3,r4,r3
 4002924:	10c00085 	stb	r3,2(r2)
 4002928:	e0fff317 	ldw	r3,-52(fp)
 400292c:	180ad63a 	srli	r5,r3,24
 4002930:	10c000c3 	ldbu	r3,3(r2)
 4002934:	1806703a 	and	r3,r3,zero
 4002938:	1809883a 	mov	r4,r3
 400293c:	2807883a 	mov	r3,r5
 4002940:	20c6b03a 	or	r3,r4,r3
 4002944:	10c000c5 	stb	r3,3(r2)

        if(rcode) {
 4002948:	e0bff043 	ldbu	r2,-63(fp)
 400294c:	10000226 	beq	r2,zero,4002958 <_ZN3USB11ConfiguringEhhb+0x234>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 4002950:	e0bff043 	ldbu	r2,-63(fp)
 4002954:	00013206 	br	4002e20 <_ZN3USB11ConfiguringEhhb+0x6fc>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 4002958:	e0bff117 	ldw	r2,-60(fp)
 400295c:	10c00203 	ldbu	r3,8(r2)
 4002960:	10800243 	ldbu	r2,9(r2)
 4002964:	1004923a 	slli	r2,r2,8
 4002968:	10c4b03a 	or	r2,r2,r3
 400296c:	e0bff50d 	sth	r2,-44(fp)
        uint16_t pid = udd->idProduct;
 4002970:	e0bff117 	ldw	r2,-60(fp)
 4002974:	10c00283 	ldbu	r3,10(r2)
 4002978:	108002c3 	ldbu	r2,11(r2)
 400297c:	1004923a 	slli	r2,r2,8
 4002980:	10c4b03a 	or	r2,r2,r3
 4002984:	e0bff58d 	sth	r2,-42(fp)
        uint8_t klass = udd->bDeviceClass;
 4002988:	e0bff117 	ldw	r2,-60(fp)
 400298c:	10800103 	ldbu	r2,4(r2)
 4002990:	e0bff605 	stb	r2,-40(fp)
        uint8_t subklass = udd->bDeviceSubClass;
 4002994:	e0bff117 	ldw	r2,-60(fp)
 4002998:	10800143 	ldbu	r2,5(r2)
 400299c:	e0bff645 	stb	r2,-39(fp)
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 40029a0:	e03ff005 	stb	zero,-64(fp)
 40029a4:	e0bff003 	ldbu	r2,-64(fp)
 40029a8:	10800428 	cmpgeui	r2,r2,16
 40029ac:	1000821e 	bne	r2,zero,4002bb8 <_ZN3USB11ConfiguringEhhb+0x494>
                if(!devConfig[devConfigIndex]) continue; // no driver
 40029b0:	e0bff003 	ldbu	r2,-64(fp)
 40029b4:	e0fffc17 	ldw	r3,-16(fp)
 40029b8:	10800784 	addi	r2,r2,30
 40029bc:	1085883a 	add	r2,r2,r2
 40029c0:	1085883a 	add	r2,r2,r2
 40029c4:	1885883a 	add	r2,r3,r2
 40029c8:	10800017 	ldw	r2,0(r2)
 40029cc:	10007226 	beq	r2,zero,4002b98 <_ZN3USB11ConfiguringEhhb+0x474>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 40029d0:	e0bff003 	ldbu	r2,-64(fp)
 40029d4:	e0fffc17 	ldw	r3,-16(fp)
 40029d8:	10800784 	addi	r2,r2,30
 40029dc:	1085883a 	add	r2,r2,r2
 40029e0:	1085883a 	add	r2,r2,r2
 40029e4:	1885883a 	add	r2,r3,r2
 40029e8:	10800017 	ldw	r2,0(r2)
 40029ec:	10800017 	ldw	r2,0(r2)
 40029f0:	10800404 	addi	r2,r2,16
 40029f4:	10c00017 	ldw	r3,0(r2)
 40029f8:	e0bff003 	ldbu	r2,-64(fp)
 40029fc:	e13ffc17 	ldw	r4,-16(fp)
 4002a00:	10800784 	addi	r2,r2,30
 4002a04:	1085883a 	add	r2,r2,r2
 4002a08:	1085883a 	add	r2,r2,r2
 4002a0c:	2085883a 	add	r2,r4,r2
 4002a10:	10800017 	ldw	r2,0(r2)
 4002a14:	1009883a 	mov	r4,r2
 4002a18:	183ee83a 	callr	r3
 4002a1c:	10803fcc 	andi	r2,r2,255
 4002a20:	1004c03a 	cmpne	r2,r2,zero
 4002a24:	10803fcc 	andi	r2,r2,255
 4002a28:	10005d1e 	bne	r2,zero,4002ba0 <_ZN3USB11ConfiguringEhhb+0x47c>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 4002a2c:	e0bff003 	ldbu	r2,-64(fp)
 4002a30:	e0fffc17 	ldw	r3,-16(fp)
 4002a34:	10800784 	addi	r2,r2,30
 4002a38:	1085883a 	add	r2,r2,r2
 4002a3c:	1085883a 	add	r2,r2,r2
 4002a40:	1885883a 	add	r2,r3,r2
 4002a44:	10800017 	ldw	r2,0(r2)
 4002a48:	10800017 	ldw	r2,0(r2)
 4002a4c:	10800804 	addi	r2,r2,32
 4002a50:	10c00017 	ldw	r3,0(r2)
 4002a54:	e0bff003 	ldbu	r2,-64(fp)
 4002a58:	e13ffc17 	ldw	r4,-16(fp)
 4002a5c:	10800784 	addi	r2,r2,30
 4002a60:	1085883a 	add	r2,r2,r2
 4002a64:	1085883a 	add	r2,r2,r2
 4002a68:	2085883a 	add	r2,r4,r2
 4002a6c:	10800017 	ldw	r2,0(r2)
 4002a70:	e13ff643 	ldbu	r4,-39(fp)
 4002a74:	200b883a 	mov	r5,r4
 4002a78:	1009883a 	mov	r4,r2
 4002a7c:	183ee83a 	callr	r3
 4002a80:	10803fcc 	andi	r2,r2,255
 4002a84:	10003226 	beq	r2,zero,4002b50 <_ZN3USB11ConfiguringEhhb+0x42c>
 4002a88:	e0bff003 	ldbu	r2,-64(fp)
 4002a8c:	e0fffc17 	ldw	r3,-16(fp)
 4002a90:	10800784 	addi	r2,r2,30
 4002a94:	1085883a 	add	r2,r2,r2
 4002a98:	1085883a 	add	r2,r2,r2
 4002a9c:	1885883a 	add	r2,r3,r2
 4002aa0:	10800017 	ldw	r2,0(r2)
 4002aa4:	10800017 	ldw	r2,0(r2)
 4002aa8:	10800604 	addi	r2,r2,24
 4002aac:	10c00017 	ldw	r3,0(r2)
 4002ab0:	e0bff003 	ldbu	r2,-64(fp)
 4002ab4:	e13ffc17 	ldw	r4,-16(fp)
 4002ab8:	10800784 	addi	r2,r2,30
 4002abc:	1085883a 	add	r2,r2,r2
 4002ac0:	1085883a 	add	r2,r2,r2
 4002ac4:	2085883a 	add	r2,r4,r2
 4002ac8:	10800017 	ldw	r2,0(r2)
 4002acc:	e13ff50b 	ldhu	r4,-44(fp)
 4002ad0:	e17ff58b 	ldhu	r5,-42(fp)
 4002ad4:	280d883a 	mov	r6,r5
 4002ad8:	200b883a 	mov	r5,r4
 4002adc:	1009883a 	mov	r4,r2
 4002ae0:	183ee83a 	callr	r3
 4002ae4:	10803fcc 	andi	r2,r2,255
 4002ae8:	1000171e 	bne	r2,zero,4002b48 <_ZN3USB11ConfiguringEhhb+0x424>
 4002aec:	e0bff003 	ldbu	r2,-64(fp)
 4002af0:	e0fffc17 	ldw	r3,-16(fp)
 4002af4:	10800784 	addi	r2,r2,30
 4002af8:	1085883a 	add	r2,r2,r2
 4002afc:	1085883a 	add	r2,r2,r2
 4002b00:	1885883a 	add	r2,r3,r2
 4002b04:	10800017 	ldw	r2,0(r2)
 4002b08:	10800017 	ldw	r2,0(r2)
 4002b0c:	10800704 	addi	r2,r2,28
 4002b10:	10c00017 	ldw	r3,0(r2)
 4002b14:	e0bff003 	ldbu	r2,-64(fp)
 4002b18:	e13ffc17 	ldw	r4,-16(fp)
 4002b1c:	10800784 	addi	r2,r2,30
 4002b20:	1085883a 	add	r2,r2,r2
 4002b24:	1085883a 	add	r2,r2,r2
 4002b28:	2085883a 	add	r2,r4,r2
 4002b2c:	10800017 	ldw	r2,0(r2)
 4002b30:	e13ff603 	ldbu	r4,-40(fp)
 4002b34:	200b883a 	mov	r5,r4
 4002b38:	1009883a 	mov	r4,r2
 4002b3c:	183ee83a 	callr	r3
 4002b40:	10803fcc 	andi	r2,r2,255
 4002b44:	10000226 	beq	r2,zero,4002b50 <_ZN3USB11ConfiguringEhhb+0x42c>
 4002b48:	00800044 	movi	r2,1
 4002b4c:	00000106 	br	4002b54 <_ZN3USB11ConfiguringEhhb+0x430>
 4002b50:	0005883a 	mov	r2,zero
 4002b54:	10803fcc 	andi	r2,r2,255
 4002b58:	10001226 	beq	r2,zero,4002ba4 <_ZN3USB11ConfiguringEhhb+0x480>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 4002b5c:	e0fff003 	ldbu	r3,-64(fp)
 4002b60:	e13ffd03 	ldbu	r4,-12(fp)
 4002b64:	e17ffe03 	ldbu	r5,-8(fp)
 4002b68:	e0bfff03 	ldbu	r2,-4(fp)
 4002b6c:	d8800015 	stw	r2,0(sp)
 4002b70:	280f883a 	mov	r7,r5
 4002b74:	200d883a 	mov	r6,r4
 4002b78:	180b883a 	mov	r5,r3
 4002b7c:	e13ffc17 	ldw	r4,-16(fp)
 4002b80:	40024940 	call	4002494 <_ZN3USB13AttemptConfigEhhhb>
 4002b84:	e0bff045 	stb	r2,-63(fp)
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 4002b88:	e0bff043 	ldbu	r2,-63(fp)
 4002b8c:	10803460 	cmpeqi	r2,r2,209
 4002b90:	10000826 	beq	r2,zero,4002bb4 <_ZN3USB11ConfiguringEhhb+0x490>
 4002b94:	00000306 	br	4002ba4 <_ZN3USB11ConfiguringEhhb+0x480>
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue; // no driver
 4002b98:	0001883a 	nop
 4002b9c:	00000106 	br	4002ba4 <_ZN3USB11ConfiguringEhhb+0x480>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 4002ba0:	0001883a 	nop
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 4002ba4:	e0bff003 	ldbu	r2,-64(fp)
 4002ba8:	10800044 	addi	r2,r2,1
 4002bac:	e0bff005 	stb	r2,-64(fp)
 4002bb0:	003f7c06 	br	40029a4 <__alt_data_end+0xfc0029a4>
                if(!devConfig[devConfigIndex]) continue; // no driver
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
                                break;
 4002bb4:	0001883a 	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 4002bb8:	e0bff003 	ldbu	r2,-64(fp)
 4002bbc:	10800428 	cmpgeui	r2,r2,16
 4002bc0:	1000021e 	bne	r2,zero,4002bcc <_ZN3USB11ConfiguringEhhb+0x4a8>
                return rcode;
 4002bc4:	e0bff043 	ldbu	r2,-63(fp)
 4002bc8:	00009506 	br	4002e20 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 4002bcc:	e03ff005 	stb	zero,-64(fp)
 4002bd0:	e0bff003 	ldbu	r2,-64(fp)
 4002bd4:	10800428 	cmpgeui	r2,r2,16
 4002bd8:	1000871e 	bne	r2,zero,4002df8 <_ZN3USB11ConfiguringEhhb+0x6d4>
                if(!devConfig[devConfigIndex]) continue;
 4002bdc:	e0bff003 	ldbu	r2,-64(fp)
 4002be0:	e0fffc17 	ldw	r3,-16(fp)
 4002be4:	10800784 	addi	r2,r2,30
 4002be8:	1085883a 	add	r2,r2,r2
 4002bec:	1085883a 	add	r2,r2,r2
 4002bf0:	1885883a 	add	r2,r3,r2
 4002bf4:	10800017 	ldw	r2,0(r2)
 4002bf8:	10007626 	beq	r2,zero,4002dd4 <_ZN3USB11ConfiguringEhhb+0x6b0>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 4002bfc:	e0bff003 	ldbu	r2,-64(fp)
 4002c00:	e0fffc17 	ldw	r3,-16(fp)
 4002c04:	10800784 	addi	r2,r2,30
 4002c08:	1085883a 	add	r2,r2,r2
 4002c0c:	1085883a 	add	r2,r2,r2
 4002c10:	1885883a 	add	r2,r3,r2
 4002c14:	10800017 	ldw	r2,0(r2)
 4002c18:	10800017 	ldw	r2,0(r2)
 4002c1c:	10800404 	addi	r2,r2,16
 4002c20:	10c00017 	ldw	r3,0(r2)
 4002c24:	e0bff003 	ldbu	r2,-64(fp)
 4002c28:	e13ffc17 	ldw	r4,-16(fp)
 4002c2c:	10800784 	addi	r2,r2,30
 4002c30:	1085883a 	add	r2,r2,r2
 4002c34:	1085883a 	add	r2,r2,r2
 4002c38:	2085883a 	add	r2,r4,r2
 4002c3c:	10800017 	ldw	r2,0(r2)
 4002c40:	1009883a 	mov	r4,r2
 4002c44:	183ee83a 	callr	r3
 4002c48:	10803fcc 	andi	r2,r2,255
 4002c4c:	1004c03a 	cmpne	r2,r2,zero
 4002c50:	10803fcc 	andi	r2,r2,255
 4002c54:	1000611e 	bne	r2,zero,4002ddc <_ZN3USB11ConfiguringEhhb+0x6b8>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 4002c58:	e0bff003 	ldbu	r2,-64(fp)
 4002c5c:	e0fffc17 	ldw	r3,-16(fp)
 4002c60:	10800784 	addi	r2,r2,30
 4002c64:	1085883a 	add	r2,r2,r2
 4002c68:	1085883a 	add	r2,r2,r2
 4002c6c:	1885883a 	add	r2,r3,r2
 4002c70:	10800017 	ldw	r2,0(r2)
 4002c74:	10800017 	ldw	r2,0(r2)
 4002c78:	10800804 	addi	r2,r2,32
 4002c7c:	10c00017 	ldw	r3,0(r2)
 4002c80:	e0bff003 	ldbu	r2,-64(fp)
 4002c84:	e13ffc17 	ldw	r4,-16(fp)
 4002c88:	10800784 	addi	r2,r2,30
 4002c8c:	1085883a 	add	r2,r2,r2
 4002c90:	1085883a 	add	r2,r2,r2
 4002c94:	2085883a 	add	r2,r4,r2
 4002c98:	10800017 	ldw	r2,0(r2)
 4002c9c:	e13ff643 	ldbu	r4,-39(fp)
 4002ca0:	200b883a 	mov	r5,r4
 4002ca4:	1009883a 	mov	r4,r2
 4002ca8:	183ee83a 	callr	r3
 4002cac:	10803fcc 	andi	r2,r2,255
 4002cb0:	10003226 	beq	r2,zero,4002d7c <_ZN3USB11ConfiguringEhhb+0x658>
 4002cb4:	e0bff003 	ldbu	r2,-64(fp)
 4002cb8:	e0fffc17 	ldw	r3,-16(fp)
 4002cbc:	10800784 	addi	r2,r2,30
 4002cc0:	1085883a 	add	r2,r2,r2
 4002cc4:	1085883a 	add	r2,r2,r2
 4002cc8:	1885883a 	add	r2,r3,r2
 4002ccc:	10800017 	ldw	r2,0(r2)
 4002cd0:	10800017 	ldw	r2,0(r2)
 4002cd4:	10800604 	addi	r2,r2,24
 4002cd8:	10c00017 	ldw	r3,0(r2)
 4002cdc:	e0bff003 	ldbu	r2,-64(fp)
 4002ce0:	e13ffc17 	ldw	r4,-16(fp)
 4002ce4:	10800784 	addi	r2,r2,30
 4002ce8:	1085883a 	add	r2,r2,r2
 4002cec:	1085883a 	add	r2,r2,r2
 4002cf0:	2085883a 	add	r2,r4,r2
 4002cf4:	10800017 	ldw	r2,0(r2)
 4002cf8:	e13ff50b 	ldhu	r4,-44(fp)
 4002cfc:	e17ff58b 	ldhu	r5,-42(fp)
 4002d00:	280d883a 	mov	r6,r5
 4002d04:	200b883a 	mov	r5,r4
 4002d08:	1009883a 	mov	r4,r2
 4002d0c:	183ee83a 	callr	r3
 4002d10:	10803fcc 	andi	r2,r2,255
 4002d14:	1000171e 	bne	r2,zero,4002d74 <_ZN3USB11ConfiguringEhhb+0x650>
 4002d18:	e0bff003 	ldbu	r2,-64(fp)
 4002d1c:	e0fffc17 	ldw	r3,-16(fp)
 4002d20:	10800784 	addi	r2,r2,30
 4002d24:	1085883a 	add	r2,r2,r2
 4002d28:	1085883a 	add	r2,r2,r2
 4002d2c:	1885883a 	add	r2,r3,r2
 4002d30:	10800017 	ldw	r2,0(r2)
 4002d34:	10800017 	ldw	r2,0(r2)
 4002d38:	10800704 	addi	r2,r2,28
 4002d3c:	10c00017 	ldw	r3,0(r2)
 4002d40:	e0bff003 	ldbu	r2,-64(fp)
 4002d44:	e13ffc17 	ldw	r4,-16(fp)
 4002d48:	10800784 	addi	r2,r2,30
 4002d4c:	1085883a 	add	r2,r2,r2
 4002d50:	1085883a 	add	r2,r2,r2
 4002d54:	2085883a 	add	r2,r4,r2
 4002d58:	10800017 	ldw	r2,0(r2)
 4002d5c:	e13ff603 	ldbu	r4,-40(fp)
 4002d60:	200b883a 	mov	r5,r4
 4002d64:	1009883a 	mov	r4,r2
 4002d68:	183ee83a 	callr	r3
 4002d6c:	10803fcc 	andi	r2,r2,255
 4002d70:	10000226 	beq	r2,zero,4002d7c <_ZN3USB11ConfiguringEhhb+0x658>
 4002d74:	00800044 	movi	r2,1
 4002d78:	00000106 	br	4002d80 <_ZN3USB11ConfiguringEhhb+0x65c>
 4002d7c:	0005883a 	mov	r2,zero
 4002d80:	10803fcc 	andi	r2,r2,255
 4002d84:	1000171e 	bne	r2,zero,4002de4 <_ZN3USB11ConfiguringEhhb+0x6c0>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 4002d88:	e0fff003 	ldbu	r3,-64(fp)
 4002d8c:	e13ffd03 	ldbu	r4,-12(fp)
 4002d90:	e17ffe03 	ldbu	r5,-8(fp)
 4002d94:	e0bfff03 	ldbu	r2,-4(fp)
 4002d98:	d8800015 	stw	r2,0(sp)
 4002d9c:	280f883a 	mov	r7,r5
 4002da0:	200d883a 	mov	r6,r4
 4002da4:	180b883a 	mov	r5,r3
 4002da8:	e13ffc17 	ldw	r4,-16(fp)
 4002dac:	40024940 	call	4002494 <_ZN3USB13AttemptConfigEhhhb>
 4002db0:	e0bff045 	stb	r2,-63(fp)

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 4002db4:	e0bff043 	ldbu	r2,-63(fp)
 4002db8:	10803460 	cmpeqi	r2,r2,209
 4002dbc:	10000a1e 	bne	r2,zero,4002de8 <_ZN3USB11ConfiguringEhhb+0x6c4>
 4002dc0:	e0bff043 	ldbu	r2,-63(fp)
 4002dc4:	10803660 	cmpeqi	r2,r2,217
 4002dc8:	1000071e 	bne	r2,zero,4002de8 <_ZN3USB11ConfiguringEhhb+0x6c4>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 4002dcc:	e0bff043 	ldbu	r2,-63(fp)
 4002dd0:	00001306 	br	4002e20 <_ZN3USB11ConfiguringEhhb+0x6fc>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
                if(!devConfig[devConfigIndex]) continue;
 4002dd4:	0001883a 	nop
 4002dd8:	00000306 	br	4002de8 <_ZN3USB11ConfiguringEhhb+0x6c4>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 4002ddc:	0001883a 	nop
 4002de0:	00000106 	br	4002de8 <_ZN3USB11ConfiguringEhhb+0x6c4>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 4002de4:	0001883a 	nop
                return rcode;
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 4002de8:	e0bff003 	ldbu	r2,-64(fp)
 4002dec:	10800044 	addi	r2,r2,1
 4002df0:	e0bff005 	stb	r2,-64(fp)
 4002df4:	003f7606 	br	4002bd0 <__alt_data_end+0xfc002bd0>
                        //        devConfigIndex = 0;
                        return rcode;
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 4002df8:	e0bffd03 	ldbu	r2,-12(fp)
 4002dfc:	e0fffe03 	ldbu	r3,-8(fp)
 4002e00:	e13fff03 	ldbu	r4,-4(fp)
 4002e04:	200f883a 	mov	r7,r4
 4002e08:	180d883a 	mov	r6,r3
 4002e0c:	100b883a 	mov	r5,r2
 4002e10:	e13ffc17 	ldw	r4,-16(fp)
 4002e14:	40023340 	call	4002334 <_ZN3USB17DefaultAddressingEhhb>
 4002e18:	e0bff045 	stb	r2,-63(fp)

        return rcode;
 4002e1c:	e0bff043 	ldbu	r2,-63(fp)
}
 4002e20:	e037883a 	mov	sp,fp
 4002e24:	dfc00117 	ldw	ra,4(sp)
 4002e28:	df000017 	ldw	fp,0(sp)
 4002e2c:	dec00204 	addi	sp,sp,8
 4002e30:	f800283a 	ret

04002e34 <_ZN3USB13ReleaseDeviceEh>:

uint8_t USB::ReleaseDevice(uint8_t addr) {
 4002e34:	defffb04 	addi	sp,sp,-20
 4002e38:	dfc00415 	stw	ra,16(sp)
 4002e3c:	df000315 	stw	fp,12(sp)
 4002e40:	df000304 	addi	fp,sp,12
 4002e44:	e13ffe15 	stw	r4,-8(fp)
 4002e48:	2805883a 	mov	r2,r5
 4002e4c:	e0bfff05 	stb	r2,-4(fp)
        if(!addr)
 4002e50:	e0bfff03 	ldbu	r2,-4(fp)
 4002e54:	1000021e 	bne	r2,zero,4002e60 <_ZN3USB13ReleaseDeviceEh+0x2c>
                return 0;
 4002e58:	0005883a 	mov	r2,zero
 4002e5c:	00003e06 	br	4002f58 <_ZN3USB13ReleaseDeviceEh+0x124>

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 4002e60:	e03ffd05 	stb	zero,-12(fp)
 4002e64:	e0bffd03 	ldbu	r2,-12(fp)
 4002e68:	10800428 	cmpgeui	r2,r2,16
 4002e6c:	1000391e 	bne	r2,zero,4002f54 <_ZN3USB13ReleaseDeviceEh+0x120>
                if(!devConfig[i]) continue;
 4002e70:	e0bffd03 	ldbu	r2,-12(fp)
 4002e74:	e0fffe17 	ldw	r3,-8(fp)
 4002e78:	10800784 	addi	r2,r2,30
 4002e7c:	1085883a 	add	r2,r2,r2
 4002e80:	1085883a 	add	r2,r2,r2
 4002e84:	1885883a 	add	r2,r3,r2
 4002e88:	10800017 	ldw	r2,0(r2)
 4002e8c:	10002c26 	beq	r2,zero,4002f40 <_ZN3USB13ReleaseDeviceEh+0x10c>
                if(devConfig[i]->GetAddress() == addr)
 4002e90:	e0bffd03 	ldbu	r2,-12(fp)
 4002e94:	e0fffe17 	ldw	r3,-8(fp)
 4002e98:	10800784 	addi	r2,r2,30
 4002e9c:	1085883a 	add	r2,r2,r2
 4002ea0:	1085883a 	add	r2,r2,r2
 4002ea4:	1885883a 	add	r2,r3,r2
 4002ea8:	10800017 	ldw	r2,0(r2)
 4002eac:	10800017 	ldw	r2,0(r2)
 4002eb0:	10800404 	addi	r2,r2,16
 4002eb4:	10c00017 	ldw	r3,0(r2)
 4002eb8:	e0bffd03 	ldbu	r2,-12(fp)
 4002ebc:	e13ffe17 	ldw	r4,-8(fp)
 4002ec0:	10800784 	addi	r2,r2,30
 4002ec4:	1085883a 	add	r2,r2,r2
 4002ec8:	1085883a 	add	r2,r2,r2
 4002ecc:	2085883a 	add	r2,r4,r2
 4002ed0:	10800017 	ldw	r2,0(r2)
 4002ed4:	1009883a 	mov	r4,r2
 4002ed8:	183ee83a 	callr	r3
 4002edc:	10c03fcc 	andi	r3,r2,255
 4002ee0:	e0bfff03 	ldbu	r2,-4(fp)
 4002ee4:	1885003a 	cmpeq	r2,r3,r2
 4002ee8:	10803fcc 	andi	r2,r2,255
 4002eec:	10001526 	beq	r2,zero,4002f44 <_ZN3USB13ReleaseDeviceEh+0x110>
                        return devConfig[i]->Release();
 4002ef0:	e0bffd03 	ldbu	r2,-12(fp)
 4002ef4:	e0fffe17 	ldw	r3,-8(fp)
 4002ef8:	10800784 	addi	r2,r2,30
 4002efc:	1085883a 	add	r2,r2,r2
 4002f00:	1085883a 	add	r2,r2,r2
 4002f04:	1885883a 	add	r2,r3,r2
 4002f08:	10800017 	ldw	r2,0(r2)
 4002f0c:	10800017 	ldw	r2,0(r2)
 4002f10:	10800204 	addi	r2,r2,8
 4002f14:	10c00017 	ldw	r3,0(r2)
 4002f18:	e0bffd03 	ldbu	r2,-12(fp)
 4002f1c:	e13ffe17 	ldw	r4,-8(fp)
 4002f20:	10800784 	addi	r2,r2,30
 4002f24:	1085883a 	add	r2,r2,r2
 4002f28:	1085883a 	add	r2,r2,r2
 4002f2c:	2085883a 	add	r2,r4,r2
 4002f30:	10800017 	ldw	r2,0(r2)
 4002f34:	1009883a 	mov	r4,r2
 4002f38:	183ee83a 	callr	r3
 4002f3c:	00000606 	br	4002f58 <_ZN3USB13ReleaseDeviceEh+0x124>
uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
                if(!devConfig[i]) continue;
 4002f40:	0001883a 	nop

uint8_t USB::ReleaseDevice(uint8_t addr) {
        if(!addr)
                return 0;

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 4002f44:	e0bffd03 	ldbu	r2,-12(fp)
 4002f48:	10800044 	addi	r2,r2,1
 4002f4c:	e0bffd05 	stb	r2,-12(fp)
 4002f50:	003fc406 	br	4002e64 <__alt_data_end+0xfc002e64>
                if(!devConfig[i]) continue;
                if(devConfig[i]->GetAddress() == addr)
                        return devConfig[i]->Release();
        }
        return 0;
 4002f54:	0005883a 	mov	r2,zero
}
 4002f58:	e037883a 	mov	sp,fp
 4002f5c:	dfc00117 	ldw	ra,4(sp)
 4002f60:	df000017 	ldw	fp,0(sp)
 4002f64:	dec00204 	addi	sp,sp,8
 4002f68:	f800283a 	ret

04002f6c <_ZN3USB11getDevDescrEhhtPh>:

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 4002f6c:	defff204 	addi	sp,sp,-56
 4002f70:	dfc00d15 	stw	ra,52(sp)
 4002f74:	df000c15 	stw	fp,48(sp)
 4002f78:	df000c04 	addi	fp,sp,48
 4002f7c:	e13ffc15 	stw	r4,-16(fp)
 4002f80:	2809883a 	mov	r4,r5
 4002f84:	3007883a 	mov	r3,r6
 4002f88:	3805883a 	mov	r2,r7
 4002f8c:	e13ffd05 	stb	r4,-12(fp)
 4002f90:	e0fffe05 	stb	r3,-8(fp)
 4002f94:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 4002f98:	e17ffd03 	ldbu	r5,-12(fp)
 4002f9c:	e1bffe03 	ldbu	r6,-8(fp)
 4002fa0:	e0bfff0b 	ldhu	r2,-4(fp)
 4002fa4:	e0ffff0b 	ldhu	r3,-4(fp)
 4002fa8:	d8000715 	stw	zero,28(sp)
 4002fac:	e1000217 	ldw	r4,8(fp)
 4002fb0:	d9000615 	stw	r4,24(sp)
 4002fb4:	d8c00515 	stw	r3,20(sp)
 4002fb8:	d8800415 	stw	r2,16(sp)
 4002fbc:	d8000315 	stw	zero,12(sp)
 4002fc0:	00800044 	movi	r2,1
 4002fc4:	d8800215 	stw	r2,8(sp)
 4002fc8:	d8000115 	stw	zero,4(sp)
 4002fcc:	00800184 	movi	r2,6
 4002fd0:	d8800015 	stw	r2,0(sp)
 4002fd4:	01c02004 	movi	r7,128
 4002fd8:	e13ffc17 	ldw	r4,-16(fp)
 4002fdc:	40012c40 	call	40012c4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4002fe0:	e037883a 	mov	sp,fp
 4002fe4:	dfc00117 	ldw	ra,4(sp)
 4002fe8:	df000017 	ldw	fp,0(sp)
 4002fec:	dec00204 	addi	sp,sp,8
 4002ff0:	f800283a 	ret

04002ff4 <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 4002ff4:	defff104 	addi	sp,sp,-60
 4002ff8:	dfc00e15 	stw	ra,56(sp)
 4002ffc:	df000d15 	stw	fp,52(sp)
 4003000:	df000d04 	addi	fp,sp,52
 4003004:	e13ffb15 	stw	r4,-20(fp)
 4003008:	3009883a 	mov	r4,r6
 400300c:	3807883a 	mov	r3,r7
 4003010:	e0800217 	ldw	r2,8(fp)
 4003014:	e17ffc05 	stb	r5,-16(fp)
 4003018:	e13ffd05 	stb	r4,-12(fp)
 400301c:	e0fffe0d 	sth	r3,-8(fp)
 4003020:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 4003024:	e23ffc03 	ldbu	r8,-16(fp)
 4003028:	e1bffd03 	ldbu	r6,-12(fp)
 400302c:	e0bfff03 	ldbu	r2,-4(fp)
 4003030:	e0fffe0b 	ldhu	r3,-8(fp)
 4003034:	e13ffe0b 	ldhu	r4,-8(fp)
 4003038:	d8000715 	stw	zero,28(sp)
 400303c:	e1400317 	ldw	r5,12(fp)
 4003040:	d9400615 	stw	r5,24(sp)
 4003044:	d9000515 	stw	r4,20(sp)
 4003048:	d8c00415 	stw	r3,16(sp)
 400304c:	d8000315 	stw	zero,12(sp)
 4003050:	00c00084 	movi	r3,2
 4003054:	d8c00215 	stw	r3,8(sp)
 4003058:	d8800115 	stw	r2,4(sp)
 400305c:	00800184 	movi	r2,6
 4003060:	d8800015 	stw	r2,0(sp)
 4003064:	01c02004 	movi	r7,128
 4003068:	400b883a 	mov	r5,r8
 400306c:	e13ffb17 	ldw	r4,-20(fp)
 4003070:	40012c40 	call	40012c4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4003074:	e037883a 	mov	sp,fp
 4003078:	dfc00117 	ldw	ra,4(sp)
 400307c:	df000017 	ldw	fp,0(sp)
 4003080:	dec00204 	addi	sp,sp,8
 4003084:	f800283a 	ret

04003088 <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 4003088:	deffdf04 	addi	sp,sp,-132
 400308c:	dfc02015 	stw	ra,128(sp)
 4003090:	df001f15 	stw	fp,124(sp)
 4003094:	df001f04 	addi	fp,sp,124
 4003098:	e13ffc15 	stw	r4,-16(fp)
 400309c:	2809883a 	mov	r4,r5
 40030a0:	3007883a 	mov	r3,r6
 40030a4:	3805883a 	mov	r2,r7
 40030a8:	e13ffd05 	stb	r4,-12(fp)
 40030ac:	e0fffe05 	stb	r3,-8(fp)
 40030b0:	e0bfff05 	stb	r2,-4(fp)
        const uint8_t bufSize = 64;
 40030b4:	00801004 	movi	r2,64
 40030b8:	e0bfe905 	stb	r2,-92(fp)
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 40030bc:	e0bfec04 	addi	r2,fp,-80
 40030c0:	e0bfea15 	stw	r2,-88(fp)

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 40030c4:	e13ffd03 	ldbu	r4,-12(fp)
 40030c8:	e17ffe03 	ldbu	r5,-8(fp)
 40030cc:	e0bfff03 	ldbu	r2,-4(fp)
 40030d0:	e0ffec04 	addi	r3,fp,-80
 40030d4:	d8c00115 	stw	r3,4(sp)
 40030d8:	d8800015 	stw	r2,0(sp)
 40030dc:	01c00244 	movi	r7,9
 40030e0:	280d883a 	mov	r6,r5
 40030e4:	200b883a 	mov	r5,r4
 40030e8:	e13ffc17 	ldw	r4,-16(fp)
 40030ec:	4002ff40 	call	4002ff4 <_ZN3USB12getConfDescrEhhthPh>
 40030f0:	e0bfeb05 	stb	r2,-84(fp)

        if(ret)
 40030f4:	e0bfeb03 	ldbu	r2,-84(fp)
 40030f8:	10000226 	beq	r2,zero,4003104 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x7c>
                return ret;
 40030fc:	e0bfeb03 	ldbu	r2,-84(fp)
 4003100:	00001a06 	br	400316c <_ZN3USB12getConfDescrEhhhP13USBReadParser+0xe4>

        uint16_t total = ucd->wTotalLength;
 4003104:	e0bfea17 	ldw	r2,-88(fp)
 4003108:	10c00083 	ldbu	r3,2(r2)
 400310c:	108000c3 	ldbu	r2,3(r2)
 4003110:	1004923a 	slli	r2,r2,8
 4003114:	10c4b03a 	or	r2,r2,r3
 4003118:	e0bfeb8d 	sth	r2,-82(fp)

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 400311c:	e17ffd03 	ldbu	r5,-12(fp)
 4003120:	e1bffe03 	ldbu	r6,-8(fp)
 4003124:	e0bfff03 	ldbu	r2,-4(fp)
 4003128:	e0ffeb8b 	ldhu	r3,-82(fp)
 400312c:	e1000217 	ldw	r4,8(fp)
 4003130:	d9000715 	stw	r4,28(sp)
 4003134:	e13fec04 	addi	r4,fp,-80
 4003138:	d9000615 	stw	r4,24(sp)
 400313c:	01001004 	movi	r4,64
 4003140:	d9000515 	stw	r4,20(sp)
 4003144:	d8c00415 	stw	r3,16(sp)
 4003148:	d8000315 	stw	zero,12(sp)
 400314c:	00c00084 	movi	r3,2
 4003150:	d8c00215 	stw	r3,8(sp)
 4003154:	d8800115 	stw	r2,4(sp)
 4003158:	00800184 	movi	r2,6
 400315c:	d8800015 	stw	r2,0(sp)
 4003160:	01c02004 	movi	r7,128
 4003164:	e13ffc17 	ldw	r4,-16(fp)
 4003168:	40012c40 	call	40012c4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 400316c:	e037883a 	mov	sp,fp
 4003170:	dfc00117 	ldw	ra,4(sp)
 4003174:	df000017 	ldw	fp,0(sp)
 4003178:	dec00204 	addi	sp,sp,8
 400317c:	f800283a 	ret

04003180 <_ZN3USB11getStrDescrEhhthtPh>:

//get string descriptor

uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
 4003180:	defff004 	addi	sp,sp,-64
 4003184:	dfc00f15 	stw	ra,60(sp)
 4003188:	df000e15 	stw	fp,56(sp)
 400318c:	df000e04 	addi	fp,sp,56
 4003190:	e13ffa15 	stw	r4,-24(fp)
 4003194:	2811883a 	mov	r8,r5
 4003198:	300b883a 	mov	r5,r6
 400319c:	3809883a 	mov	r4,r7
 40031a0:	e0c00217 	ldw	r3,8(fp)
 40031a4:	e0800317 	ldw	r2,12(fp)
 40031a8:	e23ffb05 	stb	r8,-20(fp)
 40031ac:	e17ffc05 	stb	r5,-16(fp)
 40031b0:	e13ffd0d 	sth	r4,-12(fp)
 40031b4:	e0fffe05 	stb	r3,-8(fp)
 40031b8:	e0bfff0d 	sth	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
 40031bc:	e23ffb03 	ldbu	r8,-20(fp)
 40031c0:	e27ffc03 	ldbu	r9,-16(fp)
 40031c4:	e0bffe03 	ldbu	r2,-8(fp)
 40031c8:	e0ffff0b 	ldhu	r3,-4(fp)
 40031cc:	e13ffd0b 	ldhu	r4,-12(fp)
 40031d0:	e17ffd0b 	ldhu	r5,-12(fp)
 40031d4:	d8000715 	stw	zero,28(sp)
 40031d8:	e1800417 	ldw	r6,16(fp)
 40031dc:	d9800615 	stw	r6,24(sp)
 40031e0:	d9400515 	stw	r5,20(sp)
 40031e4:	d9000415 	stw	r4,16(sp)
 40031e8:	d8c00315 	stw	r3,12(sp)
 40031ec:	00c000c4 	movi	r3,3
 40031f0:	d8c00215 	stw	r3,8(sp)
 40031f4:	d8800115 	stw	r2,4(sp)
 40031f8:	00800184 	movi	r2,6
 40031fc:	d8800015 	stw	r2,0(sp)
 4003200:	01c02004 	movi	r7,128
 4003204:	480d883a 	mov	r6,r9
 4003208:	400b883a 	mov	r5,r8
 400320c:	e13ffa17 	ldw	r4,-24(fp)
 4003210:	40012c40 	call	40012c4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4003214:	e037883a 	mov	sp,fp
 4003218:	dfc00117 	ldw	ra,4(sp)
 400321c:	df000017 	ldw	fp,0(sp)
 4003220:	dec00204 	addi	sp,sp,8
 4003224:	f800283a 	ret

04003228 <_ZN3USB7setAddrEhhh>:
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 4003228:	defff104 	addi	sp,sp,-60
 400322c:	dfc00e15 	stw	ra,56(sp)
 4003230:	df000d15 	stw	fp,52(sp)
 4003234:	df000d04 	addi	fp,sp,52
 4003238:	e13ffc15 	stw	r4,-16(fp)
 400323c:	2809883a 	mov	r4,r5
 4003240:	3007883a 	mov	r3,r6
 4003244:	3805883a 	mov	r2,r7
 4003248:	e13ffd05 	stb	r4,-12(fp)
 400324c:	e0fffe05 	stb	r3,-8(fp)
 4003250:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 4003254:	e0fffd03 	ldbu	r3,-12(fp)
 4003258:	e13ffe03 	ldbu	r4,-8(fp)
 400325c:	e0bfff03 	ldbu	r2,-4(fp)
 4003260:	d8000715 	stw	zero,28(sp)
 4003264:	d8000615 	stw	zero,24(sp)
 4003268:	d8000515 	stw	zero,20(sp)
 400326c:	d8000415 	stw	zero,16(sp)
 4003270:	d8000315 	stw	zero,12(sp)
 4003274:	d8000215 	stw	zero,8(sp)
 4003278:	d8800115 	stw	r2,4(sp)
 400327c:	00800144 	movi	r2,5
 4003280:	d8800015 	stw	r2,0(sp)
 4003284:	000f883a 	mov	r7,zero
 4003288:	200d883a 	mov	r6,r4
 400328c:	180b883a 	mov	r5,r3
 4003290:	e13ffc17 	ldw	r4,-16(fp)
 4003294:	40012c40 	call	40012c4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 4003298:	e0bffb05 	stb	r2,-20(fp)
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 400329c:	01004b04 	movi	r4,300
 40032a0:	4000dac0 	call	4000dac <_Z5delaym>
        return rcode;
 40032a4:	e0bffb03 	ldbu	r2,-20(fp)
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 40032a8:	e037883a 	mov	sp,fp
 40032ac:	dfc00117 	ldw	ra,4(sp)
 40032b0:	df000017 	ldw	fp,0(sp)
 40032b4:	dec00204 	addi	sp,sp,8
 40032b8:	f800283a 	ret

040032bc <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 40032bc:	defff204 	addi	sp,sp,-56
 40032c0:	dfc00d15 	stw	ra,52(sp)
 40032c4:	df000c15 	stw	fp,48(sp)
 40032c8:	df000c04 	addi	fp,sp,48
 40032cc:	e13ffc15 	stw	r4,-16(fp)
 40032d0:	2809883a 	mov	r4,r5
 40032d4:	3007883a 	mov	r3,r6
 40032d8:	3805883a 	mov	r2,r7
 40032dc:	e13ffd05 	stb	r4,-12(fp)
 40032e0:	e0fffe05 	stb	r3,-8(fp)
 40032e4:	e0bfff05 	stb	r2,-4(fp)
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 40032e8:	e0fffd03 	ldbu	r3,-12(fp)
 40032ec:	e13ffe03 	ldbu	r4,-8(fp)
 40032f0:	e0bfff03 	ldbu	r2,-4(fp)
 40032f4:	d8000715 	stw	zero,28(sp)
 40032f8:	d8000615 	stw	zero,24(sp)
 40032fc:	d8000515 	stw	zero,20(sp)
 4003300:	d8000415 	stw	zero,16(sp)
 4003304:	d8000315 	stw	zero,12(sp)
 4003308:	d8000215 	stw	zero,8(sp)
 400330c:	d8800115 	stw	r2,4(sp)
 4003310:	00800244 	movi	r2,9
 4003314:	d8800015 	stw	r2,0(sp)
 4003318:	000f883a 	mov	r7,zero
 400331c:	200d883a 	mov	r6,r4
 4003320:	180b883a 	mov	r5,r3
 4003324:	e13ffc17 	ldw	r4,-16(fp)
 4003328:	40012c40 	call	40012c4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 400332c:	e037883a 	mov	sp,fp
 4003330:	dfc00117 	ldw	ra,4(sp)
 4003334:	df000017 	ldw	fp,0(sp)
 4003338:	dec00204 	addi	sp,sp,8
 400333c:	f800283a 	ret

04003340 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 4003340:	defffe04 	addi	sp,sp,-8
 4003344:	df000115 	stw	fp,4(sp)
 4003348:	df000104 	addi	fp,sp,4
 400334c:	e13fff15 	stw	r4,-4(fp)
                return (AddressPool&)addrPool;
 4003350:	e0bfff17 	ldw	r2,-4(fp)
        };
 4003354:	e037883a 	mov	sp,fp
 4003358:	df000017 	ldw	fp,0(sp)
 400335c:	dec00104 	addi	sp,sp,4
 4003360:	f800283a 	ret

04003364 <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 4003364:	defffe04 	addi	sp,sp,-8
 4003368:	df000115 	stw	fp,4(sp)
 400336c:	df000104 	addi	fp,sp,4
 4003370:	e13fff15 	stw	r4,-4(fp)
 4003374:	008100b4 	movhi	r2,1026
 4003378:	10815104 	addi	r2,r2,1348
 400337c:	e0ffff17 	ldw	r3,-4(fp)
 4003380:	18800015 	stw	r2,0(r3)
 4003384:	0001883a 	nop
 4003388:	e037883a 	mov	sp,fp
 400338c:	df000017 	ldw	fp,0(sp)
 4003390:	dec00104 	addi	sp,sp,4
 4003394:	f800283a 	ret

04003398 <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 4003398:	defffd04 	addi	sp,sp,-12
 400339c:	dfc00215 	stw	ra,8(sp)
 40033a0:	df000115 	stw	fp,4(sp)
 40033a4:	df000104 	addi	fp,sp,4
 40033a8:	e13fff15 	stw	r4,-4(fp)
 40033ac:	e0bfff17 	ldw	r2,-4(fp)
 40033b0:	1009883a 	mov	r4,r2
 40033b4:	40033640 	call	4003364 <_ZN11AddressPoolC1Ev>
 40033b8:	008100b4 	movhi	r2,1026
 40033bc:	10814c04 	addi	r2,r2,1328
 40033c0:	e0ffff17 	ldw	r3,-4(fp)
 40033c4:	18800015 	stw	r2,0(r3)
 40033c8:	e0bfff17 	ldw	r2,-4(fp)
 40033cc:	100001c5 	stb	zero,7(r2)
                // Zero address is reserved
                InitEntry(0);
 40033d0:	000b883a 	mov	r5,zero
 40033d4:	e13fff17 	ldw	r4,-4(fp)
 40033d8:	40037e80 	call	40037e8 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 40033dc:	e0bfff17 	ldw	r2,-4(fp)
 40033e0:	10000305 	stb	zero,12(r2)
                thePool[0].epinfo = &dev0ep;
 40033e4:	e0bfff17 	ldw	r2,-4(fp)
 40033e8:	10c00104 	addi	r3,r2,4
 40033ec:	e0bfff17 	ldw	r2,-4(fp)
 40033f0:	10c00215 	stw	r3,8(r2)
                dev0ep.epAddr = 0;
 40033f4:	e0bfff17 	ldw	r2,-4(fp)
 40033f8:	10000105 	stb	zero,4(r2)
                dev0ep.maxPktSize = 8;
 40033fc:	e0bfff17 	ldw	r2,-4(fp)
 4003400:	00c00204 	movi	r3,8
 4003404:	10c00145 	stb	r3,5(r2)
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 4003408:	e0bfff17 	ldw	r2,-4(fp)
 400340c:	11000183 	ldbu	r4,6(r2)
 4003410:	00ffff84 	movi	r3,-2
 4003414:	20c6703a 	and	r3,r4,r3
 4003418:	10c00185 	stb	r3,6(r2)
                dev0ep.bmRcvToggle = 0;
 400341c:	e0bfff17 	ldw	r2,-4(fp)
 4003420:	11000183 	ldbu	r4,6(r2)
 4003424:	00ffff44 	movi	r3,-3
 4003428:	20c6703a 	and	r3,r4,r3
 400342c:	10c00185 	stb	r3,6(r2)
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 4003430:	e0bfff17 	ldw	r2,-4(fp)
 4003434:	10c00183 	ldbu	r3,6(r2)
 4003438:	18c000cc 	andi	r3,r3,3
 400343c:	18c00f14 	ori	r3,r3,60
 4003440:	10c00185 	stb	r3,6(r2)

                InitAllAddresses();
 4003444:	e13fff17 	ldw	r4,-4(fp)
 4003448:	400392c0 	call	400392c <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 400344c:	0001883a 	nop
 4003450:	e037883a 	mov	sp,fp
 4003454:	dfc00117 	ldw	ra,4(sp)
 4003458:	df000017 	ldw	fp,0(sp)
 400345c:	dec00204 	addi	sp,sp,8
 4003460:	f800283a 	ret

04003464 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 4003464:	defffa04 	addi	sp,sp,-24
 4003468:	dfc00515 	stw	ra,20(sp)
 400346c:	df000415 	stw	fp,16(sp)
 4003470:	dc000315 	stw	r16,12(sp)
 4003474:	df000404 	addi	fp,sp,16
 4003478:	e13ffd15 	stw	r4,-12(fp)
 400347c:	2805883a 	mov	r2,r5
 4003480:	e0bffe05 	stb	r2,-8(fp)
                if(!addr)
 4003484:	e0bffe03 	ldbu	r2,-8(fp)
 4003488:	1000031e 	bne	r2,zero,4003498 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x34>
                        return thePool;
 400348c:	e0bffd17 	ldw	r2,-12(fp)
 4003490:	10800204 	addi	r2,r2,8
 4003494:	00001006 	br	40034d8 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>

                uint8_t index = FindAddressIndex(addr);
 4003498:	e0bffe03 	ldbu	r2,-8(fp)
 400349c:	100b883a 	mov	r5,r2
 40034a0:	e13ffd17 	ldw	r4,-12(fp)
 40034a4:	40039940 	call	4003994 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 40034a8:	e0bffc05 	stb	r2,-16(fp)

                return (!index) ? NULL : thePool + index;
 40034ac:	e0bffc03 	ldbu	r2,-16(fp)
 40034b0:	10000826 	beq	r2,zero,40034d4 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x70>
 40034b4:	e0bffd17 	ldw	r2,-12(fp)
 40034b8:	14000204 	addi	r16,r2,8
 40034bc:	e0bffc03 	ldbu	r2,-16(fp)
 40034c0:	014001c4 	movi	r5,7
 40034c4:	1009883a 	mov	r4,r2
 40034c8:	400d3680 	call	400d368 <__mulsi3>
 40034cc:	8085883a 	add	r2,r16,r2
 40034d0:	00000106 	br	40034d8 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x74>
 40034d4:	0005883a 	mov	r2,zero
        };
 40034d8:	e6ffff04 	addi	sp,fp,-4
 40034dc:	dfc00217 	ldw	ra,8(sp)
 40034e0:	df000117 	ldw	fp,4(sp)
 40034e4:	dc000017 	ldw	r16,0(sp)
 40034e8:	dec00304 	addi	sp,sp,12
 40034ec:	f800283a 	ret

040034f0 <_Z10D_PrintHexIhEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 40034f0:	defffd04 	addi	sp,sp,-12
 40034f4:	df000215 	stw	fp,8(sp)
 40034f8:	df000204 	addi	fp,sp,8
 40034fc:	2005883a 	mov	r2,r4
 4003500:	e17fff15 	stw	r5,-4(fp)
 4003504:	e0bffe05 	stb	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 4003508:	0001883a 	nop
 400350c:	e037883a 	mov	sp,fp
 4003510:	df000017 	ldw	fp,0(sp)
 4003514:	dec00104 	addi	sp,sp,4
 4003518:	f800283a 	ret

0400351c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 400351c:	defff804 	addi	sp,sp,-32
 4003520:	dfc00715 	stw	ra,28(sp)
 4003524:	df000615 	stw	fp,24(sp)
 4003528:	dc000515 	stw	r16,20(sp)
 400352c:	df000604 	addi	fp,sp,24
 4003530:	e13ffb15 	stw	r4,-20(fp)
 4003534:	2809883a 	mov	r4,r5
 4003538:	3007883a 	mov	r3,r6
 400353c:	3805883a 	mov	r2,r7
 4003540:	e13ffc05 	stb	r4,-16(fp)
 4003544:	e0fffd05 	stb	r3,-12(fp)
 4003548:	e0bffe05 	stb	r2,-8(fp)
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 400354c:	e0bffc03 	ldbu	r2,-16(fp)
 4003550:	e0bffa45 	stb	r2,-23(fp)
                if(_parent.bmReserved || port > 7)
 4003554:	e0fffa43 	ldbu	r3,-23(fp)
 4003558:	00bfe004 	movi	r2,-128
 400355c:	1884703a 	and	r2,r3,r2
 4003560:	10803fcc 	andi	r2,r2,255
 4003564:	1000031e 	bne	r2,zero,4003574 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x58>
 4003568:	e0bffe03 	ldbu	r2,-8(fp)
 400356c:	10800230 	cmpltui	r2,r2,8
 4003570:	1000021e 	bne	r2,zero,400357c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x60>
                        //if(parent > 127 || port > 7)
                        return 0;
 4003574:	0005883a 	mov	r2,zero
 4003578:	00007a06 	br	4003764 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(is_hub && hubCounter == 7)
 400357c:	e0bffd03 	ldbu	r2,-12(fp)
 4003580:	10000726 	beq	r2,zero,40035a0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
 4003584:	e0bffb17 	ldw	r2,-20(fp)
 4003588:	108001c3 	ldbu	r2,7(r2)
 400358c:	10803fcc 	andi	r2,r2,255
 4003590:	108001d8 	cmpnei	r2,r2,7
 4003594:	1000021e 	bne	r2,zero,40035a0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x84>
                        return 0;
 4003598:	0005883a 	mov	r2,zero
 400359c:	00007106 	br	4003764 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 40035a0:	000b883a 	mov	r5,zero
 40035a4:	e13ffb17 	ldw	r4,-20(fp)
 40035a8:	40039940 	call	4003994 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 40035ac:	e0bffa05 	stb	r2,-24(fp)

                if(!index) // if empty entry is not found
 40035b0:	e0bffa03 	ldbu	r2,-24(fp)
 40035b4:	1000021e 	bne	r2,zero,40035c0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xa4>
                        return 0;
 40035b8:	0005883a 	mov	r2,zero
 40035bc:	00006906 	br	4003764 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>

                if(_parent.devAddress == 0) {
 40035c0:	e0bffa43 	ldbu	r2,-23(fp)
 40035c4:	10803fcc 	andi	r2,r2,255
 40035c8:	1000241e 	bne	r2,zero,400365c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x140>
                        if(is_hub) {
 40035cc:	e0bffd03 	ldbu	r2,-12(fp)
 40035d0:	10001026 	beq	r2,zero,4003614 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xf8>
                                thePool[index].address.devAddress = 0x41;
 40035d4:	e0bffa03 	ldbu	r2,-24(fp)
 40035d8:	e43ffb17 	ldw	r16,-20(fp)
 40035dc:	014001c4 	movi	r5,7
 40035e0:	1009883a 	mov	r4,r2
 40035e4:	400d3680 	call	400d368 <__mulsi3>
 40035e8:	8085883a 	add	r2,r16,r2
 40035ec:	10800304 	addi	r2,r2,12
 40035f0:	00c01044 	movi	r3,65
 40035f4:	10c00005 	stb	r3,0(r2)
                                hubCounter++;
 40035f8:	e0bffb17 	ldw	r2,-20(fp)
 40035fc:	108001c3 	ldbu	r2,7(r2)
 4003600:	10800044 	addi	r2,r2,1
 4003604:	1007883a 	mov	r3,r2
 4003608:	e0bffb17 	ldw	r2,-20(fp)
 400360c:	10c001c5 	stb	r3,7(r2)
 4003610:	00000906 	br	4003638 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x11c>
                        } else
                                thePool[index].address.devAddress = 1;
 4003614:	e0bffa03 	ldbu	r2,-24(fp)
 4003618:	e43ffb17 	ldw	r16,-20(fp)
 400361c:	014001c4 	movi	r5,7
 4003620:	1009883a 	mov	r4,r2
 4003624:	400d3680 	call	400d368 <__mulsi3>
 4003628:	8085883a 	add	r2,r16,r2
 400362c:	10800304 	addi	r2,r2,12
 4003630:	00c00044 	movi	r3,1
 4003634:	10c00005 	stb	r3,0(r2)

                        return thePool[index].address.devAddress;
 4003638:	e0bffa03 	ldbu	r2,-24(fp)
 400363c:	e43ffb17 	ldw	r16,-20(fp)
 4003640:	014001c4 	movi	r5,7
 4003644:	1009883a 	mov	r4,r2
 4003648:	400d3680 	call	400d368 <__mulsi3>
 400364c:	8085883a 	add	r2,r16,r2
 4003650:	10800304 	addi	r2,r2,12
 4003654:	10800003 	ldbu	r2,0(r2)
 4003658:	00004206 	br	4003764 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x248>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 400365c:	e03ffa85 	stb	zero,-22(fp)
                addr.bmParent = _parent.bmAddress;
 4003660:	e0bffa43 	ldbu	r2,-23(fp)
 4003664:	108001cc 	andi	r2,r2,7
 4003668:	108001cc 	andi	r2,r2,7
 400366c:	100890fa 	slli	r4,r2,3
 4003670:	e0fffa83 	ldbu	r3,-22(fp)
 4003674:	00bff1c4 	movi	r2,-57
 4003678:	1884703a 	and	r2,r3,r2
 400367c:	1007883a 	mov	r3,r2
 4003680:	2005883a 	mov	r2,r4
 4003684:	1884b03a 	or	r2,r3,r2
 4003688:	e0bffa85 	stb	r2,-22(fp)
                if(is_hub) {
 400368c:	e0bffd03 	ldbu	r2,-12(fp)
 4003690:	10001526 	beq	r2,zero,40036e8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x1cc>
                        addr.bmHub = 1;
 4003694:	e0bffa83 	ldbu	r2,-22(fp)
 4003698:	10801014 	ori	r2,r2,64
 400369c:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = ++hubCounter;
 40036a0:	e0bffb17 	ldw	r2,-20(fp)
 40036a4:	108001c3 	ldbu	r2,7(r2)
 40036a8:	10800044 	addi	r2,r2,1
 40036ac:	1007883a 	mov	r3,r2
 40036b0:	e0bffb17 	ldw	r2,-20(fp)
 40036b4:	10c001c5 	stb	r3,7(r2)
 40036b8:	e0bffb17 	ldw	r2,-20(fp)
 40036bc:	108001c3 	ldbu	r2,7(r2)
 40036c0:	108001cc 	andi	r2,r2,7
 40036c4:	110001cc 	andi	r4,r2,7
 40036c8:	e0fffa83 	ldbu	r3,-22(fp)
 40036cc:	00bffe04 	movi	r2,-8
 40036d0:	1884703a 	and	r2,r3,r2
 40036d4:	1007883a 	mov	r3,r2
 40036d8:	2005883a 	mov	r2,r4
 40036dc:	1884b03a 	or	r2,r3,r2
 40036e0:	e0bffa85 	stb	r2,-22(fp)
 40036e4:	00000e06 	br	4003720 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x204>
                } else {
                        addr.bmHub = 0;
 40036e8:	e0fffa83 	ldbu	r3,-22(fp)
 40036ec:	00bfefc4 	movi	r2,-65
 40036f0:	1884703a 	and	r2,r3,r2
 40036f4:	e0bffa85 	stb	r2,-22(fp)
                        addr.bmAddress = port;
 40036f8:	e0bffe03 	ldbu	r2,-8(fp)
 40036fc:	108001cc 	andi	r2,r2,7
 4003700:	110001cc 	andi	r4,r2,7
 4003704:	e0fffa83 	ldbu	r3,-22(fp)
 4003708:	00bffe04 	movi	r2,-8
 400370c:	1884703a 	and	r2,r3,r2
 4003710:	1007883a 	mov	r3,r2
 4003714:	2005883a 	mov	r2,r4
 4003718:	1884b03a 	or	r2,r3,r2
 400371c:	e0bffa85 	stb	r2,-22(fp)
                }
                thePool[index].address = addr;
 4003720:	e0bffa03 	ldbu	r2,-24(fp)
 4003724:	e43ffb17 	ldw	r16,-20(fp)
 4003728:	014001c4 	movi	r5,7
 400372c:	1009883a 	mov	r4,r2
 4003730:	400d3680 	call	400d368 <__mulsi3>
 4003734:	8085883a 	add	r2,r16,r2
 4003738:	10800304 	addi	r2,r2,12
 400373c:	e0fffa83 	ldbu	r3,-22(fp)
 4003740:	10c00005 	stb	r3,0(r2)
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 4003744:	e0bffa03 	ldbu	r2,-24(fp)
 4003748:	e43ffb17 	ldw	r16,-20(fp)
 400374c:	014001c4 	movi	r5,7
 4003750:	1009883a 	mov	r4,r2
 4003754:	400d3680 	call	400d368 <__mulsi3>
 4003758:	8085883a 	add	r2,r16,r2
 400375c:	10800304 	addi	r2,r2,12
 4003760:	10800003 	ldbu	r2,0(r2)
        };
 4003764:	e6ffff04 	addi	sp,fp,-4
 4003768:	dfc00217 	ldw	ra,8(sp)
 400376c:	df000117 	ldw	fp,4(sp)
 4003770:	dc000017 	ldw	r16,0(sp)
 4003774:	dec00304 	addi	sp,sp,12
 4003778:	f800283a 	ret

0400377c <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 400377c:	defffb04 	addi	sp,sp,-20
 4003780:	dfc00415 	stw	ra,16(sp)
 4003784:	df000315 	stw	fp,12(sp)
 4003788:	df000304 	addi	fp,sp,12
 400378c:	e13ffe15 	stw	r4,-8(fp)
 4003790:	2805883a 	mov	r2,r5
 4003794:	e0bfff05 	stb	r2,-4(fp)
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 4003798:	e0bfff03 	ldbu	r2,-4(fp)
 400379c:	10801058 	cmpnei	r2,r2,65
 40037a0:	1000031e 	bne	r2,zero,40037b0 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x34>
                        InitAllAddresses();
 40037a4:	e13ffe17 	ldw	r4,-8(fp)
 40037a8:	400392c0 	call	400392c <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 40037ac:	00000906 	br	40037d4 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x58>
                }
                uint8_t index = FindAddressIndex(addr);
 40037b0:	e0bfff03 	ldbu	r2,-4(fp)
 40037b4:	100b883a 	mov	r5,r2
 40037b8:	e13ffe17 	ldw	r4,-8(fp)
 40037bc:	40039940 	call	4003994 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 40037c0:	e0bffd05 	stb	r2,-12(fp)
                FreeAddressByIndex(index);
 40037c4:	e0bffd03 	ldbu	r2,-12(fp)
 40037c8:	100b883a 	mov	r5,r2
 40037cc:	e13ffe17 	ldw	r4,-8(fp)
 40037d0:	4003a280 	call	4003a28 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 40037d4:	e037883a 	mov	sp,fp
 40037d8:	dfc00117 	ldw	ra,4(sp)
 40037dc:	df000017 	ldw	fp,0(sp)
 40037e0:	dec00204 	addi	sp,sp,8
 40037e4:	f800283a 	ret

040037e8 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:

        UsbDevice thePool[MAX_DEVICES_ALLOWED];

        // Initializes address pool entry

        void InitEntry(uint8_t index) {
 40037e8:	defffa04 	addi	sp,sp,-24
 40037ec:	dfc00515 	stw	ra,20(sp)
 40037f0:	df000415 	stw	fp,16(sp)
 40037f4:	dc400315 	stw	r17,12(sp)
 40037f8:	dc000215 	stw	r16,8(sp)
 40037fc:	df000404 	addi	fp,sp,16
 4003800:	e13ffc15 	stw	r4,-16(fp)
 4003804:	2805883a 	mov	r2,r5
 4003808:	e0bffd05 	stb	r2,-12(fp)
                thePool[index].address.devAddress = 0;
 400380c:	e0bffd03 	ldbu	r2,-12(fp)
 4003810:	e43ffc17 	ldw	r16,-16(fp)
 4003814:	014001c4 	movi	r5,7
 4003818:	1009883a 	mov	r4,r2
 400381c:	400d3680 	call	400d368 <__mulsi3>
 4003820:	8085883a 	add	r2,r16,r2
 4003824:	10800304 	addi	r2,r2,12
 4003828:	10000005 	stb	zero,0(r2)
                thePool[index].epcount = 1;
 400382c:	e0bffd03 	ldbu	r2,-12(fp)
 4003830:	e43ffc17 	ldw	r16,-16(fp)
 4003834:	014001c4 	movi	r5,7
 4003838:	1009883a 	mov	r4,r2
 400383c:	400d3680 	call	400d368 <__mulsi3>
 4003840:	8085883a 	add	r2,r16,r2
 4003844:	10800344 	addi	r2,r2,13
 4003848:	00c00044 	movi	r3,1
 400384c:	10c00005 	stb	r3,0(r2)
                thePool[index].lowspeed = 0;
 4003850:	e0bffd03 	ldbu	r2,-12(fp)
 4003854:	e43ffc17 	ldw	r16,-16(fp)
 4003858:	014001c4 	movi	r5,7
 400385c:	1009883a 	mov	r4,r2
 4003860:	400d3680 	call	400d368 <__mulsi3>
 4003864:	8085883a 	add	r2,r16,r2
 4003868:	10800384 	addi	r2,r2,14
 400386c:	10000005 	stb	zero,0(r2)
                thePool[index].epinfo = &dev0ep;
 4003870:	e0fffd03 	ldbu	r3,-12(fp)
 4003874:	e0bffc17 	ldw	r2,-16(fp)
 4003878:	14000104 	addi	r16,r2,4
 400387c:	e47ffc17 	ldw	r17,-16(fp)
 4003880:	014001c4 	movi	r5,7
 4003884:	1809883a 	mov	r4,r3
 4003888:	400d3680 	call	400d368 <__mulsi3>
 400388c:	8885883a 	add	r2,r17,r2
 4003890:	10800204 	addi	r2,r2,8
 4003894:	81403fcc 	andi	r5,r16,255
 4003898:	10c00003 	ldbu	r3,0(r2)
 400389c:	1806703a 	and	r3,r3,zero
 40038a0:	1809883a 	mov	r4,r3
 40038a4:	2807883a 	mov	r3,r5
 40038a8:	20c6b03a 	or	r3,r4,r3
 40038ac:	10c00005 	stb	r3,0(r2)
 40038b0:	8006d23a 	srli	r3,r16,8
 40038b4:	19403fcc 	andi	r5,r3,255
 40038b8:	10c00043 	ldbu	r3,1(r2)
 40038bc:	1806703a 	and	r3,r3,zero
 40038c0:	1809883a 	mov	r4,r3
 40038c4:	2807883a 	mov	r3,r5
 40038c8:	20c6b03a 	or	r3,r4,r3
 40038cc:	10c00045 	stb	r3,1(r2)
 40038d0:	8006d43a 	srli	r3,r16,16
 40038d4:	19403fcc 	andi	r5,r3,255
 40038d8:	10c00083 	ldbu	r3,2(r2)
 40038dc:	1806703a 	and	r3,r3,zero
 40038e0:	1809883a 	mov	r4,r3
 40038e4:	2807883a 	mov	r3,r5
 40038e8:	20c6b03a 	or	r3,r4,r3
 40038ec:	10c00085 	stb	r3,2(r2)
 40038f0:	800ad63a 	srli	r5,r16,24
 40038f4:	10c000c3 	ldbu	r3,3(r2)
 40038f8:	1806703a 	and	r3,r3,zero
 40038fc:	1809883a 	mov	r4,r3
 4003900:	2807883a 	mov	r3,r5
 4003904:	20c6b03a 	or	r3,r4,r3
 4003908:	10c000c5 	stb	r3,3(r2)
        };
 400390c:	0001883a 	nop
 4003910:	e6fffe04 	addi	sp,fp,-8
 4003914:	dfc00317 	ldw	ra,12(sp)
 4003918:	df000217 	ldw	fp,8(sp)
 400391c:	dc400117 	ldw	r17,4(sp)
 4003920:	dc000017 	ldw	r16,0(sp)
 4003924:	dec00404 	addi	sp,sp,16
 4003928:	f800283a 	ret

0400392c <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
                InitEntry(index);
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
 400392c:	defffc04 	addi	sp,sp,-16
 4003930:	dfc00315 	stw	ra,12(sp)
 4003934:	df000215 	stw	fp,8(sp)
 4003938:	df000204 	addi	fp,sp,8
 400393c:	e13fff15 	stw	r4,-4(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 4003940:	00800044 	movi	r2,1
 4003944:	e0bffe05 	stb	r2,-8(fp)
 4003948:	e0bffe03 	ldbu	r2,-8(fp)
 400394c:	10800428 	cmpgeui	r2,r2,16
 4003950:	1000081e 	bne	r2,zero,4003974 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x48>
                        InitEntry(i);
 4003954:	e0bffe03 	ldbu	r2,-8(fp)
 4003958:	100b883a 	mov	r5,r2
 400395c:	e13fff17 	ldw	r4,-4(fp)
 4003960:	40037e80 	call	40037e8 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
        }

        // Initializes the whole address pool at once

        void InitAllAddresses() {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 4003964:	e0bffe03 	ldbu	r2,-8(fp)
 4003968:	10800044 	addi	r2,r2,1
 400396c:	e0bffe05 	stb	r2,-8(fp)
 4003970:	003ff506 	br	4003948 <__alt_data_end+0xfc003948>
                        InitEntry(i);

                hubCounter = 0;
 4003974:	e0bfff17 	ldw	r2,-4(fp)
 4003978:	100001c5 	stb	zero,7(r2)
        };
 400397c:	0001883a 	nop
 4003980:	e037883a 	mov	sp,fp
 4003984:	dfc00117 	ldw	ra,4(sp)
 4003988:	df000017 	ldw	fp,0(sp)
 400398c:	dec00204 	addi	sp,sp,8
 4003990:	f800283a 	ret

04003994 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
                thePool[index].epinfo = &dev0ep;
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
 4003994:	defffa04 	addi	sp,sp,-24
 4003998:	dfc00515 	stw	ra,20(sp)
 400399c:	df000415 	stw	fp,16(sp)
 40039a0:	dc000315 	stw	r16,12(sp)
 40039a4:	df000404 	addi	fp,sp,16
 40039a8:	e13ffd15 	stw	r4,-12(fp)
 40039ac:	2805883a 	mov	r2,r5
 40039b0:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 40039b4:	00800044 	movi	r2,1
 40039b8:	e0bffc05 	stb	r2,-16(fp)
 40039bc:	e0bffc03 	ldbu	r2,-16(fp)
 40039c0:	10800428 	cmpgeui	r2,r2,16
 40039c4:	1000111e 	bne	r2,zero,4003a0c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x78>
                        if(thePool[i].address.devAddress == address)
 40039c8:	e0bffc03 	ldbu	r2,-16(fp)
 40039cc:	e43ffd17 	ldw	r16,-12(fp)
 40039d0:	014001c4 	movi	r5,7
 40039d4:	1009883a 	mov	r4,r2
 40039d8:	400d3680 	call	400d368 <__mulsi3>
 40039dc:	8085883a 	add	r2,r16,r2
 40039e0:	10800304 	addi	r2,r2,12
 40039e4:	10800003 	ldbu	r2,0(r2)
 40039e8:	10c03fcc 	andi	r3,r2,255
 40039ec:	e0bffe03 	ldbu	r2,-8(fp)
 40039f0:	1880021e 	bne	r3,r2,40039fc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x68>
                                return i;
 40039f4:	e0bffc03 	ldbu	r2,-16(fp)
 40039f8:	00000506 	br	4003a10 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x7c>
        };

        // Returns thePool index for a given address

        uint8_t FindAddressIndex(uint8_t address = 0) {
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 40039fc:	e0bffc03 	ldbu	r2,-16(fp)
 4003a00:	10800044 	addi	r2,r2,1
 4003a04:	e0bffc05 	stb	r2,-16(fp)
 4003a08:	003fec06 	br	40039bc <__alt_data_end+0xfc0039bc>
                        if(thePool[i].address.devAddress == address)
                                return i;
                }
                return 0;
 4003a0c:	0005883a 	mov	r2,zero
        };
 4003a10:	e6ffff04 	addi	sp,fp,-4
 4003a14:	dfc00217 	ldw	ra,8(sp)
 4003a18:	df000117 	ldw	fp,4(sp)
 4003a1c:	dc000017 	ldw	r16,0(sp)
 4003a20:	dec00304 	addi	sp,sp,12
 4003a24:	f800283a 	ret

04003a28 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
                return 0;
        };

        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
 4003a28:	defffa04 	addi	sp,sp,-24
 4003a2c:	dfc00515 	stw	ra,20(sp)
 4003a30:	df000415 	stw	fp,16(sp)
 4003a34:	dc000315 	stw	r16,12(sp)
 4003a38:	df000404 	addi	fp,sp,16
 4003a3c:	e13ffd15 	stw	r4,-12(fp)
 4003a40:	2805883a 	mov	r2,r5
 4003a44:	e0bffe05 	stb	r2,-8(fp)
                // Zero field is reserved and should not be affected
                if(index == 0)
 4003a48:	e0bffe03 	ldbu	r2,-8(fp)
 4003a4c:	10003026 	beq	r2,zero,4003b10 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xe8>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
 4003a50:	e0bffe03 	ldbu	r2,-8(fp)
 4003a54:	e43ffd17 	ldw	r16,-12(fp)
 4003a58:	014001c4 	movi	r5,7
 4003a5c:	1009883a 	mov	r4,r2
 4003a60:	400d3680 	call	400d368 <__mulsi3>
 4003a64:	8085883a 	add	r2,r16,r2
 4003a68:	10800304 	addi	r2,r2,12
 4003a6c:	10800003 	ldbu	r2,0(r2)
 4003a70:	e0bffc45 	stb	r2,-15(fp)
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
 4003a74:	e0bffc43 	ldbu	r2,-15(fp)
 4003a78:	1080100c 	andi	r2,r2,64
 4003a7c:	10803fcc 	andi	r2,r2,255
 4003a80:	10001e26 	beq	r2,zero,4003afc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 4003a84:	00800044 	movi	r2,1
 4003a88:	e0bffc05 	stb	r2,-16(fp)
 4003a8c:	e0bffc03 	ldbu	r2,-16(fp)
 4003a90:	100d883a 	mov	r6,r2
 4003a94:	e17ffc43 	ldbu	r5,-15(fp)
 4003a98:	e13ffd17 	ldw	r4,-12(fp)
 4003a9c:	4003b2c0 	call	4003b2c <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 4003aa0:	e0bffc05 	stb	r2,-16(fp)
 4003aa4:	e0bffc03 	ldbu	r2,-16(fp)
 4003aa8:	1004c03a 	cmpne	r2,r2,zero
 4003aac:	10803fcc 	andi	r2,r2,255
 4003ab0:	10000526 	beq	r2,zero,4003ac8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xa0>
                                FreeAddressByIndex(i);
 4003ab4:	e0bffc03 	ldbu	r2,-16(fp)
 4003ab8:	100b883a 	mov	r5,r2
 4003abc:	e13ffd17 	ldw	r4,-12(fp)
 4003ac0:	4003a280 	call	4003a28 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        return;

                UsbDeviceAddress uda = thePool[index].address;
                // If a hub was switched off all port addresses should be freed
                if(uda.bmHub == 1) {
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 4003ac4:	003ff106 	br	4003a8c <__alt_data_end+0xfc003a8c>
                                FreeAddressByIndex(i);

                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
 4003ac8:	e0bffd17 	ldw	r2,-12(fp)
 4003acc:	10c001c3 	ldbu	r3,7(r2)
 4003ad0:	e0bffc43 	ldbu	r2,-15(fp)
 4003ad4:	108001cc 	andi	r2,r2,7
 4003ad8:	18c03fcc 	andi	r3,r3,255
 4003adc:	10803fcc 	andi	r2,r2,255
 4003ae0:	1880061e 	bne	r3,r2,4003afc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xd4>
                                hubCounter--;
 4003ae4:	e0bffd17 	ldw	r2,-12(fp)
 4003ae8:	108001c3 	ldbu	r2,7(r2)
 4003aec:	10bfffc4 	addi	r2,r2,-1
 4003af0:	1007883a 	mov	r3,r2
 4003af4:	e0bffd17 	ldw	r2,-12(fp)
 4003af8:	10c001c5 	stb	r3,7(r2)
                }
                InitEntry(index);
 4003afc:	e0bffe03 	ldbu	r2,-8(fp)
 4003b00:	100b883a 	mov	r5,r2
 4003b04:	e13ffd17 	ldw	r4,-12(fp)
 4003b08:	40037e80 	call	40037e8 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 4003b0c:	00000106 	br	4003b14 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0xec>
        // Frees address entry specified by index parameter

        void FreeAddressByIndex(uint8_t index) {
                // Zero field is reserved and should not be affected
                if(index == 0)
                        return;
 4003b10:	0001883a 	nop
                        // If the hub had the last allocated address, hubCounter should be decremented
                        if(hubCounter == uda.bmAddress)
                                hubCounter--;
                }
                InitEntry(index);
        }
 4003b14:	e6ffff04 	addi	sp,fp,-4
 4003b18:	dfc00217 	ldw	ra,8(sp)
 4003b1c:	df000117 	ldw	fp,4(sp)
 4003b20:	dc000017 	ldw	r16,0(sp)
 4003b24:	dec00304 	addi	sp,sp,12
 4003b28:	f800283a 	ret

04003b2c <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
                return 0;
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 4003b2c:	defff904 	addi	sp,sp,-28
 4003b30:	dfc00615 	stw	ra,24(sp)
 4003b34:	df000515 	stw	fp,20(sp)
 4003b38:	dc000415 	stw	r16,16(sp)
 4003b3c:	df000504 	addi	fp,sp,20
 4003b40:	e13ffc15 	stw	r4,-16(fp)
 4003b44:	e17ffd05 	stb	r5,-12(fp)
 4003b48:	3005883a 	mov	r2,r6
 4003b4c:	e0bffe05 	stb	r2,-8(fp)
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 4003b50:	e0bffe03 	ldbu	r2,-8(fp)
 4003b54:	10000526 	beq	r2,zero,4003b6c <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
 4003b58:	e0bffe03 	ldbu	r2,-8(fp)
 4003b5c:	10800428 	cmpgeui	r2,r2,16
 4003b60:	1000021e 	bne	r2,zero,4003b6c <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x40>
 4003b64:	e0bffe03 	ldbu	r2,-8(fp)
 4003b68:	00000106 	br	4003b70 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x44>
 4003b6c:	00800044 	movi	r2,1
 4003b70:	e0bffb05 	stb	r2,-20(fp)
 4003b74:	e0bffb03 	ldbu	r2,-20(fp)
 4003b78:	10800428 	cmpgeui	r2,r2,16
 4003b7c:	1000161e 	bne	r2,zero,4003bd8 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xac>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 4003b80:	e0bffb03 	ldbu	r2,-20(fp)
 4003b84:	e43ffc17 	ldw	r16,-16(fp)
 4003b88:	014001c4 	movi	r5,7
 4003b8c:	1009883a 	mov	r4,r2
 4003b90:	400d3680 	call	400d368 <__mulsi3>
 4003b94:	8085883a 	add	r2,r16,r2
 4003b98:	10800304 	addi	r2,r2,12
 4003b9c:	10800003 	ldbu	r2,0(r2)
 4003ba0:	1004d0fa 	srli	r2,r2,3
 4003ba4:	108001cc 	andi	r2,r2,7
 4003ba8:	1007883a 	mov	r3,r2
 4003bac:	e0bffd03 	ldbu	r2,-12(fp)
 4003bb0:	108001cc 	andi	r2,r2,7
 4003bb4:	18c03fcc 	andi	r3,r3,255
 4003bb8:	10803fcc 	andi	r2,r2,255
 4003bbc:	1880021e 	bne	r3,r2,4003bc8 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x9c>
                                return i;
 4003bc0:	e0bffb03 	ldbu	r2,-20(fp)
 4003bc4:	00000506 	br	4003bdc <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0xb0>
        };

        // Returns thePool child index for a given parent

        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 4003bc8:	e0bffb03 	ldbu	r2,-20(fp)
 4003bcc:	10800044 	addi	r2,r2,1
 4003bd0:	e0bffb05 	stb	r2,-20(fp)
 4003bd4:	003fe706 	br	4003b74 <__alt_data_end+0xfc003b74>
                        if(thePool[i].address.bmParent == addr.bmAddress)
                                return i;
                }
                return 0;
 4003bd8:	0005883a 	mov	r2,zero
        };
 4003bdc:	e6ffff04 	addi	sp,fp,-4
 4003be0:	dfc00217 	ldw	ra,8(sp)
 4003be4:	df000117 	ldw	fp,4(sp)
 4003be8:	dc000017 	ldw	r16,0(sp)
 4003bec:	dec00304 	addi	sp,sp,12
 4003bf0:	f800283a 	ret

04003bf4 <_ZN7XBOXONEC1EP3USB>:
#include "XBOXONE.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the Xbox ONE Controller

XBOXONE::XBOXONE(USB *p) :
 4003bf4:	defffb04 	addi	sp,sp,-20
 4003bf8:	dfc00415 	stw	ra,16(sp)
 4003bfc:	df000315 	stw	fp,12(sp)
 4003c00:	df000304 	addi	fp,sp,12
 4003c04:	e13ffe15 	stw	r4,-8(fp)
 4003c08:	e17fff15 	stw	r5,-4(fp)
pUsb(p), // pointer to USB class instance - mandatory
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
 4003c0c:	e0bffe17 	ldw	r2,-8(fp)
 4003c10:	1009883a 	mov	r4,r2
 4003c14:	40055b00 	call	40055b0 <_ZN15USBDeviceConfigC1Ev>
 4003c18:	e0bffe17 	ldw	r2,-8(fp)
 4003c1c:	10800104 	addi	r2,r2,4
 4003c20:	1009883a 	mov	r4,r2
 4003c24:	40055e40 	call	40055e4 <_ZN17UsbConfigXtracterC1Ev>
 4003c28:	008100b4 	movhi	r2,1026
 4003c2c:	10816d04 	addi	r2,r2,1460
 4003c30:	e0fffe17 	ldw	r3,-8(fp)
 4003c34:	18800015 	stw	r2,0(r3)
 4003c38:	008100b4 	movhi	r2,1026
 4003c3c:	10817a04 	addi	r2,r2,1512
 4003c40:	e0fffe17 	ldw	r3,-8(fp)
 4003c44:	18800115 	stw	r2,4(r3)
 4003c48:	e0bffe17 	ldw	r2,-8(fp)
 4003c4c:	e0ffff17 	ldw	r3,-4(fp)
 4003c50:	10c00315 	stw	r3,12(r2)
 4003c54:	e0bffe17 	ldw	r2,-8(fp)
 4003c58:	10000405 	stb	zero,16(r2)
 4003c5c:	e0bffe17 	ldw	r2,-8(fp)
 4003c60:	00c00044 	movi	r3,1
 4003c64:	10c006c5 	stb	r3,27(r2)
 4003c68:	e0bffe17 	ldw	r2,-8(fp)
 4003c6c:	10000715 	stw	zero,28(r2)
 4003c70:	e0bffe17 	ldw	r2,-8(fp)
 4003c74:	10000905 	stb	zero,36(r2)
 4003c78:	e0bffe17 	ldw	r2,-8(fp)
 4003c7c:	10000945 	stb	zero,37(r2)
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
 4003c80:	e03ffd05 	stb	zero,-12(fp)
 4003c84:	e0bffd03 	ldbu	r2,-12(fp)
 4003c88:	108000e8 	cmpgeui	r2,r2,3
 4003c8c:	1000431e 	bne	r2,zero,4003d9c <_ZN7XBOXONEC1EP3USB+0x1a8>
                epInfo[i].epAddr = 0;
 4003c90:	e0fffd03 	ldbu	r3,-12(fp)
 4003c94:	e13ffe17 	ldw	r4,-8(fp)
 4003c98:	1805883a 	mov	r2,r3
 4003c9c:	1085883a 	add	r2,r2,r2
 4003ca0:	10c5883a 	add	r2,r2,r3
 4003ca4:	2085883a 	add	r2,r4,r2
 4003ca8:	10800444 	addi	r2,r2,17
 4003cac:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 4003cb0:	e13ffd03 	ldbu	r4,-12(fp)
 4003cb4:	e0bffd03 	ldbu	r2,-12(fp)
 4003cb8:	10000226 	beq	r2,zero,4003cc4 <_ZN7XBOXONEC1EP3USB+0xd0>
 4003cbc:	0007883a 	mov	r3,zero
 4003cc0:	00000106 	br	4003cc8 <_ZN7XBOXONEC1EP3USB+0xd4>
 4003cc4:	00c00204 	movi	r3,8
 4003cc8:	e17ffe17 	ldw	r5,-8(fp)
 4003ccc:	2005883a 	mov	r2,r4
 4003cd0:	1085883a 	add	r2,r2,r2
 4003cd4:	1105883a 	add	r2,r2,r4
 4003cd8:	2885883a 	add	r2,r5,r2
 4003cdc:	10800484 	addi	r2,r2,18
 4003ce0:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmSndToggle = 0;
 4003ce4:	e0fffd03 	ldbu	r3,-12(fp)
 4003ce8:	e13ffe17 	ldw	r4,-8(fp)
 4003cec:	1805883a 	mov	r2,r3
 4003cf0:	1085883a 	add	r2,r2,r2
 4003cf4:	10c5883a 	add	r2,r2,r3
 4003cf8:	2085883a 	add	r2,r4,r2
 4003cfc:	10800404 	addi	r2,r2,16
 4003d00:	110000c3 	ldbu	r4,3(r2)
 4003d04:	00ffff84 	movi	r3,-2
 4003d08:	20c6703a 	and	r3,r4,r3
 4003d0c:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmRcvToggle = 0;
 4003d10:	e0fffd03 	ldbu	r3,-12(fp)
 4003d14:	e13ffe17 	ldw	r4,-8(fp)
 4003d18:	1805883a 	mov	r2,r3
 4003d1c:	1085883a 	add	r2,r2,r2
 4003d20:	10c5883a 	add	r2,r2,r3
 4003d24:	2085883a 	add	r2,r4,r2
 4003d28:	10800404 	addi	r2,r2,16
 4003d2c:	110000c3 	ldbu	r4,3(r2)
 4003d30:	00ffff44 	movi	r3,-3
 4003d34:	20c6703a 	and	r3,r4,r3
 4003d38:	10c000c5 	stb	r3,3(r2)
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 4003d3c:	e13ffd03 	ldbu	r4,-12(fp)
 4003d40:	e0bffd03 	ldbu	r2,-12(fp)
 4003d44:	10000226 	beq	r2,zero,4003d50 <_ZN7XBOXONEC1EP3USB+0x15c>
 4003d48:	00c00044 	movi	r3,1
 4003d4c:	00000106 	br	4003d54 <_ZN7XBOXONEC1EP3USB+0x160>
 4003d50:	00c003c4 	movi	r3,15
 4003d54:	e17ffe17 	ldw	r5,-8(fp)
 4003d58:	2005883a 	mov	r2,r4
 4003d5c:	1085883a 	add	r2,r2,r2
 4003d60:	1105883a 	add	r2,r2,r4
 4003d64:	2885883a 	add	r2,r5,r2
 4003d68:	10800404 	addi	r2,r2,16
 4003d6c:	18c7883a 	add	r3,r3,r3
 4003d70:	18cb883a 	add	r5,r3,r3
 4003d74:	10c000c3 	ldbu	r3,3(r2)
 4003d78:	18c000cc 	andi	r3,r3,3
 4003d7c:	1809883a 	mov	r4,r3
 4003d80:	2807883a 	mov	r3,r5
 4003d84:	20c6b03a 	or	r3,r4,r3
 4003d88:	10c000c5 	stb	r3,3(r2)
bAddress(0), // device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
bPollEnable(false) { // don't start polling before dongle is connected
        for(uint8_t i = 0; i < XBOX_ONE_MAX_ENDPOINTS; i++) {
 4003d8c:	e0bffd03 	ldbu	r2,-12(fp)
 4003d90:	10800044 	addi	r2,r2,1
 4003d94:	e0bffd05 	stb	r2,-12(fp)
 4003d98:	003fba06 	br	4003c84 <__alt_data_end+0xfc003c84>
                epInfo[i].bmSndToggle = 0;
                epInfo[i].bmRcvToggle = 0;
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }

        if(pUsb) // register in USB subsystem
 4003d9c:	e0bffe17 	ldw	r2,-8(fp)
 4003da0:	10800317 	ldw	r2,12(r2)
 4003da4:	10000626 	beq	r2,zero,4003dc0 <_ZN7XBOXONEC1EP3USB+0x1cc>
                pUsb->RegisterDeviceClass(this); //set devConfig[] entry
 4003da8:	e0bffe17 	ldw	r2,-8(fp)
 4003dac:	10800317 	ldw	r2,12(r2)
 4003db0:	e0fffe17 	ldw	r3,-8(fp)
 4003db4:	180b883a 	mov	r5,r3
 4003db8:	1009883a 	mov	r4,r2
 4003dbc:	40053640 	call	4005364 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 4003dc0:	0001883a 	nop
 4003dc4:	e037883a 	mov	sp,fp
 4003dc8:	dfc00117 	ldw	ra,4(sp)
 4003dcc:	df000017 	ldw	fp,0(sp)
 4003dd0:	dec00204 	addi	sp,sp,8
 4003dd4:	f800283a 	ret

04003dd8 <_ZN7XBOXONE4InitEhhb>:

uint8_t XBOXONE::Init(uint8_t parent, uint8_t port, bool lowspeed) {
 4003dd8:	deffde04 	addi	sp,sp,-136
 4003ddc:	dfc02115 	stw	ra,132(sp)
 4003de0:	df002015 	stw	fp,128(sp)
 4003de4:	df002004 	addi	fp,sp,128
 4003de8:	e13ffc15 	stw	r4,-16(fp)
 4003dec:	2809883a 	mov	r4,r5
 4003df0:	3007883a 	mov	r3,r6
 4003df4:	3805883a 	mov	r2,r7
 4003df8:	e13ffd05 	stb	r4,-12(fp)
 4003dfc:	e0fffe05 	stb	r3,-8(fp)
 4003e00:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 4003e04:	e0bfe744 	addi	r2,fp,-99
 4003e08:	e0bfe215 	stw	r2,-120(fp)
        uint8_t rcode;
        UsbDevice *p = NULL;
 4003e0c:	e03fe315 	stw	zero,-116(fp)
        EpInfo *oldep_ptr = NULL;
 4003e10:	e03fe415 	stw	zero,-112(fp)
        uint16_t PID, VID;
        uint8_t num_of_conf; // Number of configurations

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
 4003e14:	e0bffc17 	ldw	r2,-16(fp)
 4003e18:	10800317 	ldw	r2,12(r2)
 4003e1c:	1009883a 	mov	r4,r2
 4003e20:	40033400 	call	4003340 <_ZN3USB14GetAddressPoolEv>
 4003e24:	e0bfe515 	stw	r2,-108(fp)
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nXBOXONE Init"), 0x80);
#endif
        // check if address has already been assigned to an instance
        if(bAddress) {
 4003e28:	e0bffc17 	ldw	r2,-16(fp)
 4003e2c:	10800403 	ldbu	r2,16(r2)
 4003e30:	10803fcc 	andi	r2,r2,255
 4003e34:	10000226 	beq	r2,zero,4003e40 <_ZN7XBOXONE4InitEhhb+0x68>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 4003e38:	00bff644 	movi	r2,-39
 4003e3c:	00017606 	br	4004418 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 4003e40:	e0bfe517 	ldw	r2,-108(fp)
 4003e44:	10800017 	ldw	r2,0(r2)
 4003e48:	10800017 	ldw	r2,0(r2)
 4003e4c:	000b883a 	mov	r5,zero
 4003e50:	e13fe517 	ldw	r4,-108(fp)
 4003e54:	103ee83a 	callr	r2
 4003e58:	e0bfe315 	stw	r2,-116(fp)

        if(!p) {
 4003e5c:	e0bfe317 	ldw	r2,-116(fp)
 4003e60:	1000021e 	bne	r2,zero,4003e6c <_ZN7XBOXONE4InitEhhb+0x94>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 4003e64:	00bff584 	movi	r2,-42
 4003e68:	00016b06 	br	4004418 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        if(!p->epinfo) {
 4003e6c:	e0bfe317 	ldw	r2,-116(fp)
 4003e70:	10c00003 	ldbu	r3,0(r2)
 4003e74:	11000043 	ldbu	r4,1(r2)
 4003e78:	2008923a 	slli	r4,r4,8
 4003e7c:	20c6b03a 	or	r3,r4,r3
 4003e80:	11000083 	ldbu	r4,2(r2)
 4003e84:	2008943a 	slli	r4,r4,16
 4003e88:	20c6b03a 	or	r3,r4,r3
 4003e8c:	108000c3 	ldbu	r2,3(r2)
 4003e90:	1004963a 	slli	r2,r2,24
 4003e94:	10c4b03a 	or	r2,r2,r3
 4003e98:	1000021e 	bne	r2,zero,4003ea4 <_ZN7XBOXONE4InitEhhb+0xcc>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 4003e9c:	00bff5c4 	movi	r2,-41
 4003ea0:	00015d06 	br	4004418 <_ZN7XBOXONE4InitEhhb+0x640>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 4003ea4:	e0bfe317 	ldw	r2,-116(fp)
 4003ea8:	10c00003 	ldbu	r3,0(r2)
 4003eac:	11000043 	ldbu	r4,1(r2)
 4003eb0:	2008923a 	slli	r4,r4,8
 4003eb4:	20c6b03a 	or	r3,r4,r3
 4003eb8:	11000083 	ldbu	r4,2(r2)
 4003ebc:	2008943a 	slli	r4,r4,16
 4003ec0:	20c6b03a 	or	r3,r4,r3
 4003ec4:	108000c3 	ldbu	r2,3(r2)
 4003ec8:	1004963a 	slli	r2,r2,24
 4003ecc:	10c4b03a 	or	r2,r2,r3
 4003ed0:	e0bfe415 	stw	r2,-112(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
 4003ed4:	e0bffc17 	ldw	r2,-16(fp)
 4003ed8:	10c00444 	addi	r3,r2,17
 4003edc:	e0bfe317 	ldw	r2,-116(fp)
 4003ee0:	19803fcc 	andi	r6,r3,255
 4003ee4:	11000003 	ldbu	r4,0(r2)
 4003ee8:	2008703a 	and	r4,r4,zero
 4003eec:	200b883a 	mov	r5,r4
 4003ef0:	3009883a 	mov	r4,r6
 4003ef4:	2908b03a 	or	r4,r5,r4
 4003ef8:	11000005 	stb	r4,0(r2)
 4003efc:	1808d23a 	srli	r4,r3,8
 4003f00:	21803fcc 	andi	r6,r4,255
 4003f04:	11000043 	ldbu	r4,1(r2)
 4003f08:	2008703a 	and	r4,r4,zero
 4003f0c:	200b883a 	mov	r5,r4
 4003f10:	3009883a 	mov	r4,r6
 4003f14:	2908b03a 	or	r4,r5,r4
 4003f18:	11000045 	stb	r4,1(r2)
 4003f1c:	1808d43a 	srli	r4,r3,16
 4003f20:	21803fcc 	andi	r6,r4,255
 4003f24:	11000083 	ldbu	r4,2(r2)
 4003f28:	2008703a 	and	r4,r4,zero
 4003f2c:	200b883a 	mov	r5,r4
 4003f30:	3009883a 	mov	r4,r6
 4003f34:	2908b03a 	or	r4,r5,r4
 4003f38:	11000085 	stb	r4,2(r2)
 4003f3c:	180ad63a 	srli	r5,r3,24
 4003f40:	10c000c3 	ldbu	r3,3(r2)
 4003f44:	1806703a 	and	r3,r3,zero
 4003f48:	1809883a 	mov	r4,r3
 4003f4c:	2807883a 	mov	r3,r5
 4003f50:	20c6b03a 	or	r3,r4,r3
 4003f54:	10c000c5 	stb	r3,3(r2)

        p->lowspeed = lowspeed;
 4003f58:	e0bfe317 	ldw	r2,-116(fp)
 4003f5c:	e0ffff03 	ldbu	r3,-4(fp)
 4003f60:	10c00185 	stb	r3,6(r2)

        // Get device descriptor
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 4003f64:	e0bffc17 	ldw	r2,-16(fp)
 4003f68:	10c00317 	ldw	r3,12(r2)
 4003f6c:	00800484 	movi	r2,18
 4003f70:	113fffcc 	andi	r4,r2,65535
 4003f74:	e0bfe744 	addi	r2,fp,-99
 4003f78:	d8800015 	stw	r2,0(sp)
 4003f7c:	200f883a 	mov	r7,r4
 4003f80:	000d883a 	mov	r6,zero
 4003f84:	000b883a 	mov	r5,zero
 4003f88:	1809883a 	mov	r4,r3
 4003f8c:	4002f6c0 	call	4002f6c <_ZN3USB11getDevDescrEhhtPh>
 4003f90:	e0bfe105 	stb	r2,-124(fp)
        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 4003f94:	e0bfe317 	ldw	r2,-116(fp)
 4003f98:	e0ffe417 	ldw	r3,-112(fp)
 4003f9c:	19403fcc 	andi	r5,r3,255
 4003fa0:	10c00003 	ldbu	r3,0(r2)
 4003fa4:	1806703a 	and	r3,r3,zero
 4003fa8:	1809883a 	mov	r4,r3
 4003fac:	2807883a 	mov	r3,r5
 4003fb0:	20c6b03a 	or	r3,r4,r3
 4003fb4:	10c00005 	stb	r3,0(r2)
 4003fb8:	e0ffe417 	ldw	r3,-112(fp)
 4003fbc:	1806d23a 	srli	r3,r3,8
 4003fc0:	19403fcc 	andi	r5,r3,255
 4003fc4:	10c00043 	ldbu	r3,1(r2)
 4003fc8:	1806703a 	and	r3,r3,zero
 4003fcc:	1809883a 	mov	r4,r3
 4003fd0:	2807883a 	mov	r3,r5
 4003fd4:	20c6b03a 	or	r3,r4,r3
 4003fd8:	10c00045 	stb	r3,1(r2)
 4003fdc:	e0ffe417 	ldw	r3,-112(fp)
 4003fe0:	1806d43a 	srli	r3,r3,16
 4003fe4:	19403fcc 	andi	r5,r3,255
 4003fe8:	10c00083 	ldbu	r3,2(r2)
 4003fec:	1806703a 	and	r3,r3,zero
 4003ff0:	1809883a 	mov	r4,r3
 4003ff4:	2807883a 	mov	r3,r5
 4003ff8:	20c6b03a 	or	r3,r4,r3
 4003ffc:	10c00085 	stb	r3,2(r2)
 4004000:	e0ffe417 	ldw	r3,-112(fp)
 4004004:	180ad63a 	srli	r5,r3,24
 4004008:	10c000c3 	ldbu	r3,3(r2)
 400400c:	1806703a 	and	r3,r3,zero
 4004010:	1809883a 	mov	r4,r3
 4004014:	2807883a 	mov	r3,r5
 4004018:	20c6b03a 	or	r3,r4,r3
 400401c:	10c000c5 	stb	r3,3(r2)

        if(rcode)
 4004020:	e0bfe103 	ldbu	r2,-124(fp)
 4004024:	1000e61e 	bne	r2,zero,40043c0 <_ZN7XBOXONE4InitEhhb+0x5e8>
                goto FailGetDevDescr;

        VID = udd->idVendor;
 4004028:	e0bfe217 	ldw	r2,-120(fp)
 400402c:	10c00203 	ldbu	r3,8(r2)
 4004030:	10800243 	ldbu	r2,9(r2)
 4004034:	1004923a 	slli	r2,r2,8
 4004038:	10c4b03a 	or	r2,r2,r3
 400403c:	e0bfe60d 	sth	r2,-104(fp)
        PID = udd->idProduct;
 4004040:	e0bfe217 	ldw	r2,-120(fp)
 4004044:	10c00283 	ldbu	r3,10(r2)
 4004048:	108002c3 	ldbu	r2,11(r2)
 400404c:	1004923a 	slli	r2,r2,8
 4004050:	10c4b03a 	or	r2,r2,r3
 4004054:	e0bfe68d 	sth	r2,-102(fp)

        if(!VIDPIDOK(VID, PID)) // Check VID
 4004058:	e0bffc17 	ldw	r2,-16(fp)
 400405c:	10800017 	ldw	r2,0(r2)
 4004060:	10800604 	addi	r2,r2,24
 4004064:	10800017 	ldw	r2,0(r2)
 4004068:	e0ffe60b 	ldhu	r3,-104(fp)
 400406c:	e13fe68b 	ldhu	r4,-102(fp)
 4004070:	200d883a 	mov	r6,r4
 4004074:	180b883a 	mov	r5,r3
 4004078:	e13ffc17 	ldw	r4,-16(fp)
 400407c:	103ee83a 	callr	r2
 4004080:	1080005c 	xori	r2,r2,1
 4004084:	10803fcc 	andi	r2,r2,255
 4004088:	1000d51e 	bne	r2,zero,40043e0 <_ZN7XBOXONE4InitEhhb+0x608>
                goto FailUnknownDevice;

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
 400408c:	e0bfe517 	ldw	r2,-108(fp)
 4004090:	10800017 	ldw	r2,0(r2)
 4004094:	10800104 	addi	r2,r2,4
 4004098:	10800017 	ldw	r2,0(r2)
 400409c:	e0fffd03 	ldbu	r3,-12(fp)
 40040a0:	e13ffe03 	ldbu	r4,-8(fp)
 40040a4:	200f883a 	mov	r7,r4
 40040a8:	000d883a 	mov	r6,zero
 40040ac:	180b883a 	mov	r5,r3
 40040b0:	e13fe517 	ldw	r4,-108(fp)
 40040b4:	103ee83a 	callr	r2
 40040b8:	1007883a 	mov	r3,r2
 40040bc:	e0bffc17 	ldw	r2,-16(fp)
 40040c0:	10c00405 	stb	r3,16(r2)

        if(!bAddress)
 40040c4:	e0bffc17 	ldw	r2,-16(fp)
 40040c8:	10800403 	ldbu	r2,16(r2)
 40040cc:	10803fcc 	andi	r2,r2,255
 40040d0:	1000021e 	bne	r2,zero,40040dc <_ZN7XBOXONE4InitEhhb+0x304>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 40040d4:	00bff504 	movi	r2,-44
 40040d8:	0000cf06 	br	4004418 <_ZN7XBOXONE4InitEhhb+0x640>

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
 40040dc:	e0bfe217 	ldw	r2,-120(fp)
 40040e0:	10c001c3 	ldbu	r3,7(r2)
 40040e4:	e0bffc17 	ldw	r2,-16(fp)
 40040e8:	10c00485 	stb	r3,18(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr(0, 0, bAddress);
 40040ec:	e0bffc17 	ldw	r2,-16(fp)
 40040f0:	10c00317 	ldw	r3,12(r2)
 40040f4:	e0bffc17 	ldw	r2,-16(fp)
 40040f8:	10800403 	ldbu	r2,16(r2)
 40040fc:	10803fcc 	andi	r2,r2,255
 4004100:	100f883a 	mov	r7,r2
 4004104:	000d883a 	mov	r6,zero
 4004108:	000b883a 	mov	r5,zero
 400410c:	1809883a 	mov	r4,r3
 4004110:	40032280 	call	4003228 <_ZN3USB7setAddrEhhh>
 4004114:	e0bfe105 	stb	r2,-124(fp)
        if(rcode) {
 4004118:	e0bfe103 	ldbu	r2,-124(fp)
 400411c:	10001026 	beq	r2,zero,4004160 <_ZN7XBOXONE4InitEhhb+0x388>
                p->lowspeed = false;
 4004120:	e0bfe317 	ldw	r2,-116(fp)
 4004124:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
 4004128:	e0bfe517 	ldw	r2,-108(fp)
 400412c:	10800017 	ldw	r2,0(r2)
 4004130:	10800204 	addi	r2,r2,8
 4004134:	10800017 	ldw	r2,0(r2)
 4004138:	e0fffc17 	ldw	r3,-16(fp)
 400413c:	18c00403 	ldbu	r3,16(r3)
 4004140:	18c03fcc 	andi	r3,r3,255
 4004144:	180b883a 	mov	r5,r3
 4004148:	e13fe517 	ldw	r4,-108(fp)
 400414c:	103ee83a 	callr	r2
                bAddress = 0;
 4004150:	e0bffc17 	ldw	r2,-16(fp)
 4004154:	10000405 	stb	zero,16(r2)
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                return rcode;
 4004158:	e0bfe103 	ldbu	r2,-124(fp)
 400415c:	0000ae06 	br	4004418 <_ZN7XBOXONE4InitEhhb+0x640>
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif
        //delay(300); // Spec says you should wait at least 200ms

        p->lowspeed = false;
 4004160:	e0bfe317 	ldw	r2,-116(fp)
 4004164:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
 4004168:	e0bfe517 	ldw	r2,-108(fp)
 400416c:	10800017 	ldw	r2,0(r2)
 4004170:	10800017 	ldw	r2,0(r2)
 4004174:	e0fffc17 	ldw	r3,-16(fp)
 4004178:	18c00403 	ldbu	r3,16(r3)
 400417c:	18c03fcc 	andi	r3,r3,255
 4004180:	180b883a 	mov	r5,r3
 4004184:	e13fe517 	ldw	r4,-108(fp)
 4004188:	103ee83a 	callr	r2
 400418c:	e0bfe315 	stw	r2,-116(fp)
        if(!p)
 4004190:	e0bfe317 	ldw	r2,-116(fp)
 4004194:	1000021e 	bne	r2,zero,40041a0 <_ZN7XBOXONE4InitEhhb+0x3c8>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 4004198:	00bff584 	movi	r2,-42
 400419c:	00009e06 	br	4004418 <_ZN7XBOXONE4InitEhhb+0x640>

        p->lowspeed = lowspeed;
 40041a0:	e0bfe317 	ldw	r2,-116(fp)
 40041a4:	e0ffff03 	ldbu	r3,-4(fp)
 40041a8:	10c00185 	stb	r3,6(r2)

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
 40041ac:	e0bffc17 	ldw	r2,-16(fp)
 40041b0:	10c00317 	ldw	r3,12(r2)
 40041b4:	e0bffc17 	ldw	r2,-16(fp)
 40041b8:	10800403 	ldbu	r2,16(r2)
 40041bc:	11003fcc 	andi	r4,r2,255
 40041c0:	e0bffc17 	ldw	r2,-16(fp)
 40041c4:	10800444 	addi	r2,r2,17
 40041c8:	100f883a 	mov	r7,r2
 40041cc:	01800044 	movi	r6,1
 40041d0:	200b883a 	mov	r5,r4
 40041d4:	1809883a 	mov	r4,r3
 40041d8:	400101c0 	call	400101c <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 40041dc:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
 40041e0:	e0bfe103 	ldbu	r2,-124(fp)
 40041e4:	1000781e 	bne	r2,zero,40043c8 <_ZN7XBOXONE4InitEhhb+0x5f0>
                goto FailSetDevTblEntry;

        num_of_conf = udd->bNumConfigurations; // Number of configurations
 40041e8:	e0bfe217 	ldw	r2,-120(fp)
 40041ec:	10800443 	ldbu	r2,17(r2)
 40041f0:	e0bfe705 	stb	r2,-100(fp)

        USBTRACE2("NC:", num_of_conf);
 40041f4:	e0bfe703 	ldbu	r2,-100(fp)
 40041f8:	01402004 	movi	r5,128
 40041fc:	1009883a 	mov	r4,r2
 4004200:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
 4004204:	e03fe145 	stb	zero,-123(fp)
 4004208:	e0ffe143 	ldbu	r3,-123(fp)
 400420c:	e0bfe703 	ldbu	r2,-100(fp)
 4004210:	1880222e 	bgeu	r3,r2,400429c <_ZN7XBOXONE4InitEhhb+0x4c4>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
 4004214:	e0bffc17 	ldw	r2,-16(fp)
 4004218:	10c00104 	addi	r3,r2,4
 400421c:	e0bfed04 	addi	r2,fp,-76
 4004220:	180b883a 	mov	r5,r3
 4004224:	1009883a 	mov	r4,r2
 4004228:	400564c0 	call	400564c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 400422c:	e0bffc17 	ldw	r2,-16(fp)
 4004230:	10c00317 	ldw	r3,12(r2)
 4004234:	e0bffc17 	ldw	r2,-16(fp)
 4004238:	10800403 	ldbu	r2,16(r2)
 400423c:	11003fcc 	andi	r4,r2,255
 4004240:	e17fe143 	ldbu	r5,-123(fp)
 4004244:	e0bfed04 	addi	r2,fp,-76
 4004248:	d8800015 	stw	r2,0(sp)
 400424c:	280f883a 	mov	r7,r5
 4004250:	000d883a 	mov	r6,zero
 4004254:	200b883a 	mov	r5,r4
 4004258:	1809883a 	mov	r4,r3
 400425c:	40030880 	call	4003088 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 4004260:	e0bfe105 	stb	r2,-124(fp)
                if(rcode) // Check error code
 4004264:	e0bfe103 	ldbu	r2,-124(fp)
 4004268:	10000226 	beq	r2,zero,4004274 <_ZN7XBOXONE4InitEhhb+0x49c>
                        goto FailGetConfDescr;
 400426c:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 4004270:	00006206 	br	40043fc <_ZN7XBOXONE4InitEhhb+0x624>
        for(uint8_t i = 0; i < num_of_conf; i++) {
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
 4004274:	e0bffc17 	ldw	r2,-16(fp)
 4004278:	108006c3 	ldbu	r2,27(r2)
 400427c:	10803fcc 	andi	r2,r2,255
 4004280:	108000f0 	cmpltui	r2,r2,3
 4004284:	10000426 	beq	r2,zero,4004298 <_ZN7XBOXONE4InitEhhb+0x4c0>
        num_of_conf = udd->bNumConfigurations; // Number of configurations

        USBTRACE2("NC:", num_of_conf);

        // Check if attached device is a Xbox One controller and fill endpoint data structure
        for(uint8_t i = 0; i < num_of_conf; i++) {
 4004288:	e0bfe143 	ldbu	r2,-123(fp)
 400428c:	10800044 	addi	r2,r2,1
 4004290:	e0bfe145 	stb	r2,-123(fp)
 4004294:	003fdc06 	br	4004208 <__alt_data_end+0xfc004208>
                ConfigDescParser<0, 0, 0, 0> confDescrParser(this); // Allow all devices, as we have already verified that it is a Xbox One controller from the VID and PID
                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
 4004298:	0001883a 	nop
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
 400429c:	e0bffc17 	ldw	r2,-16(fp)
 40042a0:	108006c3 	ldbu	r2,27(r2)
 40042a4:	10803fcc 	andi	r2,r2,255
 40042a8:	108000e8 	cmpgeui	r2,r2,3
 40042ac:	10004e26 	beq	r2,zero,40043e8 <_ZN7XBOXONE4InitEhhb+0x610>
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 40042b0:	e0bffc17 	ldw	r2,-16(fp)
 40042b4:	10c00317 	ldw	r3,12(r2)
 40042b8:	e0bffc17 	ldw	r2,-16(fp)
 40042bc:	10800403 	ldbu	r2,16(r2)
 40042c0:	11003fcc 	andi	r4,r2,255
 40042c4:	e0bffc17 	ldw	r2,-16(fp)
 40042c8:	108006c3 	ldbu	r2,27(r2)
 40042cc:	11403fcc 	andi	r5,r2,255
 40042d0:	e0bffc17 	ldw	r2,-16(fp)
 40042d4:	10800444 	addi	r2,r2,17
 40042d8:	100f883a 	mov	r7,r2
 40042dc:	280d883a 	mov	r6,r5
 40042e0:	200b883a 	mov	r5,r4
 40042e4:	1809883a 	mov	r4,r3
 40042e8:	400101c0 	call	400101c <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 40042ec:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
 40042f0:	e0bfe103 	ldbu	r2,-124(fp)
 40042f4:	1000361e 	bne	r2,zero,40043d0 <_ZN7XBOXONE4InitEhhb+0x5f8>
                goto FailSetDevTblEntry;

        delay(200); // Give time for address change
 40042f8:	01003204 	movi	r4,200
 40042fc:	4000dac0 	call	4000dac <_Z5delaym>

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
 4004300:	e0bffc17 	ldw	r2,-16(fp)
 4004304:	10c00317 	ldw	r3,12(r2)
 4004308:	e0bffc17 	ldw	r2,-16(fp)
 400430c:	10800403 	ldbu	r2,16(r2)
 4004310:	11003fcc 	andi	r4,r2,255
 4004314:	e0bffc17 	ldw	r2,-16(fp)
 4004318:	10800443 	ldbu	r2,17(r2)
 400431c:	11403fcc 	andi	r5,r2,255
 4004320:	e0bffc17 	ldw	r2,-16(fp)
 4004324:	10800683 	ldbu	r2,26(r2)
 4004328:	10803fcc 	andi	r2,r2,255
 400432c:	100f883a 	mov	r7,r2
 4004330:	280d883a 	mov	r6,r5
 4004334:	200b883a 	mov	r5,r4
 4004338:	1809883a 	mov	r4,r3
 400433c:	40032bc0 	call	40032bc <_ZN3USB7setConfEhhh>
 4004340:	e0bfe105 	stb	r2,-124(fp)
        if(rcode)
 4004344:	e0bfe103 	ldbu	r2,-124(fp)
 4004348:	1000231e 	bne	r2,zero,40043d8 <_ZN7XBOXONE4InitEhhb+0x600>

#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Connected\r\n"), 0x80);
#endif

        delay(200); // let things settle
 400434c:	01003204 	movi	r4,200
 4004350:	4000dac0 	call	4000dac <_Z5delaym>

        // Initialize the controller for input
        cmdCounter = 0; // Reset the counter used when sending out the commands
 4004354:	e0bffc17 	ldw	r2,-16(fp)
 4004358:	10001f85 	stb	zero,126(r2)
        uint8_t writeBuf[5];
        writeBuf[0] = 0x05;
 400435c:	00800144 	movi	r2,5
 4004360:	e0bfebc5 	stb	r2,-81(fp)
        writeBuf[1] = 0x20;
 4004364:	00800804 	movi	r2,32
 4004368:	e0bfec05 	stb	r2,-80(fp)
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
 400436c:	00800044 	movi	r2,1
 4004370:	e0bfec85 	stb	r2,-78(fp)
        writeBuf[4] = 0x00;
 4004374:	e03fecc5 	stb	zero,-77(fp)
        rcode = XboxCommand(writeBuf, 5);
 4004378:	e0bfebc4 	addi	r2,fp,-81
 400437c:	01800144 	movi	r6,5
 4004380:	100b883a 	mov	r5,r2
 4004384:	e13ffc17 	ldw	r4,-16(fp)
 4004388:	4004ca00 	call	4004ca0 <_ZN7XBOXONE11XboxCommandEPht>
 400438c:	e0bfe105 	stb	r2,-124(fp)
        if (rcode)
 4004390:	e0bfe103 	ldbu	r2,-124(fp)
 4004394:	1000181e 	bne	r2,zero,40043f8 <_ZN7XBOXONE4InitEhhb+0x620>
                goto Fail;

        onInit();
 4004398:	e13ffc17 	ldw	r4,-16(fp)
 400439c:	4004d400 	call	4004d40 <_ZN7XBOXONE6onInitEv>
        XboxOneConnected = true;
 40043a0:	e0bffc17 	ldw	r2,-16(fp)
 40043a4:	00c00044 	movi	r3,1
 40043a8:	10c00205 	stb	r3,8(r2)
        bPollEnable = true;
 40043ac:	e0bffc17 	ldw	r2,-16(fp)
 40043b0:	00c00044 	movi	r3,1
 40043b4:	10c00945 	stb	r3,37(r2)
        return 0; // Successful configuration
 40043b8:	0005883a 	mov	r2,zero
 40043bc:	00001606 	br	4004418 <_ZN7XBOXONE4InitEhhb+0x640>
        rcode = pUsb->getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if(rcode)
                goto FailGetDevDescr;
 40043c0:	0001883a 	nop
 40043c4:	00000d06 	br	40043fc <_ZN7XBOXONE4InitEhhb+0x624>
        p->lowspeed = lowspeed;

        // Assign epInfo to epinfo pointer - only EP0 is known
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
 40043c8:	0001883a 	nop
 40043cc:	00000b06 	br	40043fc <_ZN7XBOXONE4InitEhhb+0x624>
        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;

        rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
        if(rcode)
                goto FailSetDevTblEntry;
 40043d0:	0001883a 	nop
 40043d4:	00000906 	br	40043fc <_ZN7XBOXONE4InitEhhb+0x624>

        delay(200); // Give time for address change

        rcode = pUsb->setConf(bAddress, epInfo[ XBOX_ONE_CONTROL_PIPE ].epAddr, bConfNum);
        if(rcode)
                goto FailSetConfDescr;
 40043d8:	0001883a 	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 40043dc:	00000706 	br	40043fc <_ZN7XBOXONE4InitEhhb+0x624>

        VID = udd->idVendor;
        PID = udd->idProduct;

        if(!VIDPIDOK(VID, PID)) // Check VID
                goto FailUnknownDevice;
 40043e0:	0001883a 	nop
 40043e4:	00000106 	br	40043ec <_ZN7XBOXONE4InitEhhb+0x614>
                if(bNumEP >= XBOX_ONE_MAX_ENDPOINTS) // All endpoints extracted
                        break;
        }

        if(bNumEP < XBOX_ONE_MAX_ENDPOINTS)
                goto FailUnknownDevice;
 40043e8:	0001883a 	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 40043ec:	00bff444 	movi	r2,-47
 40043f0:	e0bfe105 	stb	r2,-124(fp)
 40043f4:	00000106 	br	40043fc <_ZN7XBOXONE4InitEhhb+0x624>
        // Byte 2 is set in "XboxCommand"
        writeBuf[3] = 0x01;
        writeBuf[4] = 0x00;
        rcode = XboxCommand(writeBuf, 5);
        if (rcode)
                goto Fail;
 40043f8:	0001883a 	nop
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 40043fc:	e0bffc17 	ldw	r2,-16(fp)
 4004400:	10800017 	ldw	r2,0(r2)
 4004404:	10800204 	addi	r2,r2,8
 4004408:	10800017 	ldw	r2,0(r2)
 400440c:	e13ffc17 	ldw	r4,-16(fp)
 4004410:	103ee83a 	callr	r2
        return rcode;
 4004414:	e0bfe103 	ldbu	r2,-124(fp)
}
 4004418:	e037883a 	mov	sp,fp
 400441c:	dfc00117 	ldw	ra,4(sp)
 4004420:	df000017 	ldw	fp,0(sp)
 4004424:	dec00204 	addi	sp,sp,8
 4004428:	f800283a 	ret

0400442c <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
void XBOXONE::EndpointXtract(uint8_t conf,
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
 400442c:	defff904 	addi	sp,sp,-28
 4004430:	df000615 	stw	fp,24(sp)
 4004434:	df000604 	addi	fp,sp,24
 4004438:	e13ffb15 	stw	r4,-20(fp)
 400443c:	3009883a 	mov	r4,r6
 4004440:	3807883a 	mov	r3,r7
 4004444:	e0800117 	ldw	r2,4(fp)
 4004448:	e17ffc05 	stb	r5,-16(fp)
 400444c:	e13ffd05 	stb	r4,-12(fp)
 4004450:	e0fffe05 	stb	r3,-8(fp)
 4004454:	e0bfff05 	stb	r2,-4(fp)
        
    bConfNum = conf;
 4004458:	e0bffb17 	ldw	r2,-20(fp)
 400445c:	e0fffc03 	ldbu	r3,-16(fp)
 4004460:	10c00685 	stb	r3,26(r2)
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
 4004464:	e0800217 	ldw	r2,8(fp)
 4004468:	108000c3 	ldbu	r2,3(r2)
 400446c:	10803fcc 	andi	r2,r2,255
 4004470:	108000cc 	andi	r2,r2,3
 4004474:	108000d8 	cmpnei	r2,r2,3
 4004478:	1000361e 	bne	r2,zero,4004554 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x128>
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
 400447c:	e0800217 	ldw	r2,8(fp)
 4004480:	10800083 	ldbu	r2,2(r2)
 4004484:	10803fcc 	andi	r2,r2,255
 4004488:	1080201c 	xori	r2,r2,128
 400448c:	10bfe004 	addi	r2,r2,-128
 4004490:	1000020e 	bge	r2,zero,400449c <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
 4004494:	00800084 	movi	r2,2
 4004498:	00000106 	br	40044a0 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x74>
 400449c:	00800044 	movi	r2,1
 40044a0:	e0bffa05 	stb	r2,-24(fp)
        } else
                return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 40044a4:	e0fffa03 	ldbu	r3,-24(fp)
 40044a8:	e0800217 	ldw	r2,8(fp)
 40044ac:	10800083 	ldbu	r2,2(r2)
 40044b0:	108003cc 	andi	r2,r2,15
 40044b4:	100b883a 	mov	r5,r2
 40044b8:	e13ffb17 	ldw	r4,-20(fp)
 40044bc:	1805883a 	mov	r2,r3
 40044c0:	1085883a 	add	r2,r2,r2
 40044c4:	10c5883a 	add	r2,r2,r3
 40044c8:	2085883a 	add	r2,r4,r2
 40044cc:	10800444 	addi	r2,r2,17
 40044d0:	11400005 	stb	r5,0(r2)
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 40044d4:	e0fffa03 	ldbu	r3,-24(fp)
 40044d8:	e0800217 	ldw	r2,8(fp)
 40044dc:	11000103 	ldbu	r4,4(r2)
 40044e0:	10800143 	ldbu	r2,5(r2)
 40044e4:	1004923a 	slli	r2,r2,8
 40044e8:	1104b03a 	or	r2,r2,r4
 40044ec:	100b883a 	mov	r5,r2
 40044f0:	e13ffb17 	ldw	r4,-20(fp)
 40044f4:	1805883a 	mov	r2,r3
 40044f8:	1085883a 	add	r2,r2,r2
 40044fc:	10c5883a 	add	r2,r2,r3
 4004500:	2085883a 	add	r2,r4,r2
 4004504:	10800484 	addi	r2,r2,18
 4004508:	11400005 	stb	r5,0(r2)
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 400450c:	e0bffb17 	ldw	r2,-20(fp)
 4004510:	10c00903 	ldbu	r3,36(r2)
 4004514:	e0800217 	ldw	r2,8(fp)
 4004518:	10800183 	ldbu	r2,6(r2)
 400451c:	18c03fcc 	andi	r3,r3,255
 4004520:	10803fcc 	andi	r2,r2,255
 4004524:	1880042e 	bgeu	r3,r2,4004538 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x10c>
                pollInterval = pep->bInterval;
 4004528:	e0800217 	ldw	r2,8(fp)
 400452c:	10c00183 	ldbu	r3,6(r2)
 4004530:	e0bffb17 	ldw	r2,-20(fp)
 4004534:	10c00905 	stb	r3,36(r2)
        bNumEP++;
 4004538:	e0bffb17 	ldw	r2,-20(fp)
 400453c:	108006c3 	ldbu	r2,27(r2)
 4004540:	10800044 	addi	r2,r2,1
 4004544:	1007883a 	mov	r3,r2
 4004548:	e0bffb17 	ldw	r2,-20(fp)
 400454c:	10c006c5 	stb	r3,27(r2)
 4004550:	00000106 	br	4004558 <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x12c>
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT) { // Interrupt endpoint
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? XBOX_ONE_INPUT_PIPE : XBOX_ONE_OUTPUT_PIPE; // Set the endpoint index
        } else
                return;
 4004554:	0001883a 	nop
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
                pollInterval = pep->bInterval;
        bNumEP++;
}
 4004558:	e037883a 	mov	sp,fp
 400455c:	df000017 	ldw	fp,0(sp)
 4004560:	dec00104 	addi	sp,sp,4
 4004564:	f800283a 	ret

04004568 <_ZThn4_N7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
         * @param iface Interface number.
         * @param alt   Alternate setting.
         * @param proto Interface Protocol.
         * @param ep    Endpoint Descriptor.
         */
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 4004568:	213fff04 	addi	r4,r4,-4
 400456c:	400442c1 	jmpi	400442c <_ZN7XBOXONE14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

04004570 <_ZN7XBOXONE23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void XBOXONE::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr
    __attribute__((unused)))
{
 4004570:	defffd04 	addi	sp,sp,-12
 4004574:	df000215 	stw	fp,8(sp)
 4004578:	df000204 	addi	fp,sp,8
 400457c:	e13ffe15 	stw	r4,-8(fp)
 4004580:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}
 4004584:	0001883a 	nop
 4004588:	e037883a 	mov	sp,fp
 400458c:	df000017 	ldw	fp,0(sp)
 4004590:	dec00104 	addi	sp,sp,4
 4004594:	f800283a 	ret

04004598 <_ZN7XBOXONE7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t XBOXONE::Release() {
 4004598:	defffd04 	addi	sp,sp,-12
 400459c:	dfc00215 	stw	ra,8(sp)
 40045a0:	df000115 	stw	fp,4(sp)
 40045a4:	df000104 	addi	fp,sp,4
 40045a8:	e13fff15 	stw	r4,-4(fp)
        XboxOneConnected = false;
 40045ac:	e0bfff17 	ldw	r2,-4(fp)
 40045b0:	10000205 	stb	zero,8(r2)
        pUsb->GetAddressPool().FreeAddress(bAddress);
 40045b4:	e0bfff17 	ldw	r2,-4(fp)
 40045b8:	10800317 	ldw	r2,12(r2)
 40045bc:	1009883a 	mov	r4,r2
 40045c0:	40033400 	call	4003340 <_ZN3USB14GetAddressPoolEv>
 40045c4:	1009883a 	mov	r4,r2
 40045c8:	20800017 	ldw	r2,0(r4)
 40045cc:	10800204 	addi	r2,r2,8
 40045d0:	10800017 	ldw	r2,0(r2)
 40045d4:	e0ffff17 	ldw	r3,-4(fp)
 40045d8:	18c00403 	ldbu	r3,16(r3)
 40045dc:	18c03fcc 	andi	r3,r3,255
 40045e0:	180b883a 	mov	r5,r3
 40045e4:	103ee83a 	callr	r2
        bAddress = 0; // Clear device address
 40045e8:	e0bfff17 	ldw	r2,-4(fp)
 40045ec:	10000405 	stb	zero,16(r2)
        bNumEP = 1; // Must have to be reset to 1
 40045f0:	e0bfff17 	ldw	r2,-4(fp)
 40045f4:	00c00044 	movi	r3,1
 40045f8:	10c006c5 	stb	r3,27(r2)
        qNextPollTime = 0; // Reset next poll time
 40045fc:	e0bfff17 	ldw	r2,-4(fp)
 4004600:	10000715 	stw	zero,28(r2)
        pollInterval = 0;
 4004604:	e0bfff17 	ldw	r2,-4(fp)
 4004608:	10000905 	stb	zero,36(r2)
        bPollEnable = false;
 400460c:	e0bfff17 	ldw	r2,-4(fp)
 4004610:	10000945 	stb	zero,37(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXbox One Controller Disconnected\r\n"), 0x80);
#endif
        return 0;
 4004614:	0005883a 	mov	r2,zero
}
 4004618:	e037883a 	mov	sp,fp
 400461c:	dfc00117 	ldw	ra,4(sp)
 4004620:	df000017 	ldw	fp,0(sp)
 4004624:	dec00204 	addi	sp,sp,8
 4004628:	f800283a 	ret

0400462c <_ZN7XBOXONE4PollEv>:

uint8_t XBOXONE::Poll() {
 400462c:	defffa04 	addi	sp,sp,-24
 4004630:	dfc00515 	stw	ra,20(sp)
 4004634:	df000415 	stw	fp,16(sp)
 4004638:	df000404 	addi	fp,sp,16
 400463c:	e13fff15 	stw	r4,-4(fp)
        uint8_t rcode = 0;
 4004640:	e03ffe05 	stb	zero,-8(fp)

        if(!bPollEnable)
 4004644:	e0bfff17 	ldw	r2,-4(fp)
 4004648:	10800943 	ldbu	r2,37(r2)
 400464c:	1080005c 	xori	r2,r2,1
 4004650:	10803fcc 	andi	r2,r2,255
 4004654:	10000226 	beq	r2,zero,4004660 <_ZN7XBOXONE4PollEv+0x34>
                return 0;
 4004658:	0005883a 	mov	r2,zero
 400465c:	00002c06 	br	4004710 <_ZN7XBOXONE4PollEv+0xe4>

        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Do not poll if shorter than polling interval
 4004660:	4000e040 	call	4000e04 <_Z6millisv>
 4004664:	1007883a 	mov	r3,r2
 4004668:	e0bfff17 	ldw	r2,-4(fp)
 400466c:	10800717 	ldw	r2,28(r2)
 4004670:	1885c83a 	sub	r2,r3,r2
 4004674:	0084303a 	nor	r2,zero,r2
 4004678:	1004d7fa 	srli	r2,r2,31
 400467c:	10803fcc 	andi	r2,r2,255
 4004680:	10002226 	beq	r2,zero,400470c <_ZN7XBOXONE4PollEv+0xe0>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 4004684:	4000e040 	call	4000e04 <_Z6millisv>
 4004688:	1007883a 	mov	r3,r2
 400468c:	e0bfff17 	ldw	r2,-4(fp)
 4004690:	10800903 	ldbu	r2,36(r2)
 4004694:	10803fcc 	andi	r2,r2,255
 4004698:	1887883a 	add	r3,r3,r2
 400469c:	e0bfff17 	ldw	r2,-4(fp)
 40046a0:	10c00715 	stw	r3,28(r2)
                uint16_t length =  (uint16_t)epInfo[ XBOX_ONE_INPUT_PIPE ].maxPktSize; // Read the maximum packet size from the endpoint
 40046a4:	e0bfff17 	ldw	r2,-4(fp)
 40046a8:	10800603 	ldbu	r2,24(r2)
 40046ac:	10803fcc 	andi	r2,r2,255
 40046b0:	e0bffe8d 	sth	r2,-6(fp)
                uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ XBOX_ONE_INPUT_PIPE ].epAddr, &length, readBuf, pollInterval);
 40046b4:	e0bfff17 	ldw	r2,-4(fp)
 40046b8:	11000317 	ldw	r4,12(r2)
 40046bc:	e0bfff17 	ldw	r2,-4(fp)
 40046c0:	10800403 	ldbu	r2,16(r2)
 40046c4:	11403fcc 	andi	r5,r2,255
 40046c8:	e0bfff17 	ldw	r2,-4(fp)
 40046cc:	108005c3 	ldbu	r2,23(r2)
 40046d0:	11803fcc 	andi	r6,r2,255
 40046d4:	e0bfff17 	ldw	r2,-4(fp)
 40046d8:	10800f84 	addi	r2,r2,62
 40046dc:	e0ffff17 	ldw	r3,-4(fp)
 40046e0:	18c00903 	ldbu	r3,36(r3)
 40046e4:	18c03fcc 	andi	r3,r3,255
 40046e8:	e1fffe84 	addi	r7,fp,-6
 40046ec:	d8c00115 	stw	r3,4(sp)
 40046f0:	d8800015 	stw	r2,0(sp)
 40046f4:	40015d40 	call	40015d4 <_ZN3USB10inTransferEhhPtPhh>
 40046f8:	e0bffe45 	stb	r2,-7(fp)
                if(!rcode) {
 40046fc:	e0bffe43 	ldbu	r2,-7(fp)
 4004700:	1000021e 	bne	r2,zero,400470c <_ZN7XBOXONE4PollEv+0xe0>
                        readReport();
 4004704:	e13fff17 	ldw	r4,-4(fp)
 4004708:	40047240 	call	4004724 <_ZN7XBOXONE10readReportEv>
                        Notify(PSTR("\r\nXbox One Poll Failed, error code: "), 0x80);
                        NotifyFail(rcode);
                }
#endif
    }
    return rcode;
 400470c:	e0bffe03 	ldbu	r2,-8(fp)
}
 4004710:	e037883a 	mov	sp,fp
 4004714:	dfc00117 	ldw	ra,4(sp)
 4004718:	df000017 	ldw	fp,0(sp)
 400471c:	dec00204 	addi	sp,sp,8
 4004720:	f800283a 	ret

04004724 <_ZN7XBOXONE10readReportEv>:

void XBOXONE::readReport() {
 4004724:	defffd04 	addi	sp,sp,-12
 4004728:	df000215 	stw	fp,8(sp)
 400472c:	df000204 	addi	fp,sp,8
 4004730:	e13fff15 	stw	r4,-4(fp)
        if(readBuf[0] == 0x07) {
 4004734:	e0bfff17 	ldw	r2,-4(fp)
 4004738:	10800f83 	ldbu	r2,62(r2)
 400473c:	10803fcc 	andi	r2,r2,255
 4004740:	108001d8 	cmpnei	r2,r2,7
 4004744:	10002f1e 	bne	r2,zero,4004804 <_ZN7XBOXONE10readReportEv+0xe0>
                // The XBOX button has a separate message
                if(readBuf[4] == 1)
 4004748:	e0bfff17 	ldw	r2,-4(fp)
 400474c:	10801083 	ldbu	r2,66(r2)
 4004750:	10803fcc 	andi	r2,r2,255
 4004754:	10800058 	cmpnei	r2,r2,1
 4004758:	10000a1e 	bne	r2,zero,4004784 <_ZN7XBOXONE10readReportEv+0x60>
                        ButtonState |= pgm_read_word(&XBOX_BUTTONS[XBOX]);
 400475c:	e0bfff17 	ldw	r2,-4(fp)
 4004760:	10c0098b 	ldhu	r3,38(r2)
 4004764:	008100b4 	movhi	r2,1026
 4004768:	10816984 	addi	r2,r2,1446
 400476c:	1080000b 	ldhu	r2,0(r2)
 4004770:	1884b03a 	or	r2,r3,r2
 4004774:	1007883a 	mov	r3,r2
 4004778:	e0bfff17 	ldw	r2,-4(fp)
 400477c:	10c0098d 	sth	r3,38(r2)
 4004780:	00000b06 	br	40047b0 <_ZN7XBOXONE10readReportEv+0x8c>
                else
                        ButtonState &= ~pgm_read_word(&XBOX_BUTTONS[XBOX]);
 4004784:	e0bfff17 	ldw	r2,-4(fp)
 4004788:	1080098b 	ldhu	r2,38(r2)
 400478c:	1007883a 	mov	r3,r2
 4004790:	008100b4 	movhi	r2,1026
 4004794:	10816984 	addi	r2,r2,1446
 4004798:	1080000b 	ldhu	r2,0(r2)
 400479c:	0084303a 	nor	r2,zero,r2
 40047a0:	1884703a 	and	r2,r3,r2
 40047a4:	1007883a 	mov	r3,r2
 40047a8:	e0bfff17 	ldw	r2,-4(fp)
 40047ac:	10c0098d 	sth	r3,38(r2)

                if(ButtonState != OldButtonState) {
 40047b0:	e0bfff17 	ldw	r2,-4(fp)
 40047b4:	10c0098b 	ldhu	r3,38(r2)
 40047b8:	e0bfff17 	ldw	r2,-4(fp)
 40047bc:	10800a0b 	ldhu	r2,40(r2)
 40047c0:	18ffffcc 	andi	r3,r3,65535
 40047c4:	10bfffcc 	andi	r2,r2,65535
 40047c8:	18800e26 	beq	r3,r2,4004804 <_ZN7XBOXONE10readReportEv+0xe0>
                    ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
 40047cc:	e0bfff17 	ldw	r2,-4(fp)
 40047d0:	1080098b 	ldhu	r2,38(r2)
 40047d4:	1007883a 	mov	r3,r2
 40047d8:	e0bfff17 	ldw	r2,-4(fp)
 40047dc:	10800a0b 	ldhu	r2,40(r2)
 40047e0:	0084303a 	nor	r2,zero,r2
 40047e4:	1884703a 	and	r2,r3,r2
 40047e8:	1007883a 	mov	r3,r2
 40047ec:	e0bfff17 	ldw	r2,-4(fp)
 40047f0:	10c00a8d 	sth	r3,42(r2)
                    OldButtonState = ButtonState;
 40047f4:	e0bfff17 	ldw	r2,-4(fp)
 40047f8:	10c0098b 	ldhu	r3,38(r2)
 40047fc:	e0bfff17 	ldw	r2,-4(fp)
 4004800:	10c00a0d 	sth	r3,40(r2)
                }
        }
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
 4004804:	e0bfff17 	ldw	r2,-4(fp)
 4004808:	10800f83 	ldbu	r2,62(r2)
 400480c:	10803fcc 	andi	r2,r2,255
 4004810:	10800820 	cmpeqi	r2,r2,32
 4004814:	1000b026 	beq	r2,zero,4004ad8 <_ZN7XBOXONE10readReportEv+0x3b4>
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
        }

        uint16_t xbox = ButtonState & pgm_read_word(&XBOX_BUTTONS[XBOX]); // Since the XBOX button is separate, save it and add it back in
 4004818:	e0bfff17 	ldw	r2,-4(fp)
 400481c:	10c0098b 	ldhu	r3,38(r2)
 4004820:	008100b4 	movhi	r2,1026
 4004824:	10816984 	addi	r2,r2,1446
 4004828:	1080000b 	ldhu	r2,0(r2)
 400482c:	1884703a 	and	r2,r3,r2
 4004830:	e0bffe0d 	sth	r2,-8(fp)
        // xbox button from before, dpad, abxy, start/back, sync, stick click, shoulder buttons
        ButtonState = xbox | (((uint16_t)readBuf[5] & 0xF) << 8) | (readBuf[4] & 0xF0)  | (((uint16_t)readBuf[4] & 0x0C) << 10) | ((readBuf[4] & 0x01) << 3) | (((uint16_t)readBuf[5] & 0xC0) << 8) | ((readBuf[5] & 0x30) >> 4);
 4004834:	e0bfff17 	ldw	r2,-4(fp)
 4004838:	108010c3 	ldbu	r2,67(r2)
 400483c:	10803fcc 	andi	r2,r2,255
 4004840:	108003cc 	andi	r2,r2,15
 4004844:	1004923a 	slli	r2,r2,8
 4004848:	1007883a 	mov	r3,r2
 400484c:	e0bffe0b 	ldhu	r2,-8(fp)
 4004850:	1884b03a 	or	r2,r3,r2
 4004854:	1007883a 	mov	r3,r2
 4004858:	e0bfff17 	ldw	r2,-4(fp)
 400485c:	10801083 	ldbu	r2,66(r2)
 4004860:	10803fcc 	andi	r2,r2,255
 4004864:	10803c0c 	andi	r2,r2,240
 4004868:	1884b03a 	or	r2,r3,r2
 400486c:	1007883a 	mov	r3,r2
 4004870:	e0bfff17 	ldw	r2,-4(fp)
 4004874:	10801083 	ldbu	r2,66(r2)
 4004878:	10803fcc 	andi	r2,r2,255
 400487c:	1080030c 	andi	r2,r2,12
 4004880:	100492ba 	slli	r2,r2,10
 4004884:	1884b03a 	or	r2,r3,r2
 4004888:	1007883a 	mov	r3,r2
 400488c:	e0bfff17 	ldw	r2,-4(fp)
 4004890:	10801083 	ldbu	r2,66(r2)
 4004894:	10803fcc 	andi	r2,r2,255
 4004898:	1080004c 	andi	r2,r2,1
 400489c:	100490fa 	slli	r2,r2,3
 40048a0:	1884b03a 	or	r2,r3,r2
 40048a4:	1007883a 	mov	r3,r2
 40048a8:	e0bfff17 	ldw	r2,-4(fp)
 40048ac:	108010c3 	ldbu	r2,67(r2)
 40048b0:	10803fcc 	andi	r2,r2,255
 40048b4:	1080300c 	andi	r2,r2,192
 40048b8:	1004923a 	slli	r2,r2,8
 40048bc:	1884b03a 	or	r2,r3,r2
 40048c0:	1007883a 	mov	r3,r2
 40048c4:	e0bfff17 	ldw	r2,-4(fp)
 40048c8:	108010c3 	ldbu	r2,67(r2)
 40048cc:	10803fcc 	andi	r2,r2,255
 40048d0:	10800c0c 	andi	r2,r2,48
 40048d4:	1005d13a 	srai	r2,r2,4
 40048d8:	1884b03a 	or	r2,r3,r2
 40048dc:	1007883a 	mov	r3,r2
 40048e0:	e0bfff17 	ldw	r2,-4(fp)
 40048e4:	10c0098d 	sth	r3,38(r2)

        triggerValue[0] = (uint16_t)(((uint16_t)readBuf[7] << 8) | readBuf[6]);
 40048e8:	e0bfff17 	ldw	r2,-4(fp)
 40048ec:	10801143 	ldbu	r2,69(r2)
 40048f0:	10803fcc 	andi	r2,r2,255
 40048f4:	1004923a 	slli	r2,r2,8
 40048f8:	1007883a 	mov	r3,r2
 40048fc:	e0bfff17 	ldw	r2,-4(fp)
 4004900:	10801103 	ldbu	r2,68(r2)
 4004904:	10803fcc 	andi	r2,r2,255
 4004908:	1884b03a 	or	r2,r3,r2
 400490c:	1007883a 	mov	r3,r2
 4004910:	e0bfff17 	ldw	r2,-4(fp)
 4004914:	10c00d0d 	sth	r3,52(r2)
        triggerValue[1] = (uint16_t)(((uint16_t)readBuf[9] << 8) | readBuf[8]);
 4004918:	e0bfff17 	ldw	r2,-4(fp)
 400491c:	108011c3 	ldbu	r2,71(r2)
 4004920:	10803fcc 	andi	r2,r2,255
 4004924:	1004923a 	slli	r2,r2,8
 4004928:	1007883a 	mov	r3,r2
 400492c:	e0bfff17 	ldw	r2,-4(fp)
 4004930:	10801183 	ldbu	r2,70(r2)
 4004934:	10803fcc 	andi	r2,r2,255
 4004938:	1884b03a 	or	r2,r3,r2
 400493c:	1007883a 	mov	r3,r2
 4004940:	e0bfff17 	ldw	r2,-4(fp)
 4004944:	10c00d8d 	sth	r3,54(r2)

        hatValue[LeftHatX] = (int16_t)(((uint16_t)readBuf[11] << 8) | readBuf[10]);
 4004948:	e0bfff17 	ldw	r2,-4(fp)
 400494c:	10801243 	ldbu	r2,73(r2)
 4004950:	10803fcc 	andi	r2,r2,255
 4004954:	1004923a 	slli	r2,r2,8
 4004958:	1007883a 	mov	r3,r2
 400495c:	e0bfff17 	ldw	r2,-4(fp)
 4004960:	10801203 	ldbu	r2,72(r2)
 4004964:	10803fcc 	andi	r2,r2,255
 4004968:	1884b03a 	or	r2,r3,r2
 400496c:	1007883a 	mov	r3,r2
 4004970:	e0bfff17 	ldw	r2,-4(fp)
 4004974:	10c00b0d 	sth	r3,44(r2)
        hatValue[LeftHatY] = (int16_t)(((uint16_t)readBuf[13] << 8) | readBuf[12]);
 4004978:	e0bfff17 	ldw	r2,-4(fp)
 400497c:	108012c3 	ldbu	r2,75(r2)
 4004980:	10803fcc 	andi	r2,r2,255
 4004984:	1004923a 	slli	r2,r2,8
 4004988:	1007883a 	mov	r3,r2
 400498c:	e0bfff17 	ldw	r2,-4(fp)
 4004990:	10801283 	ldbu	r2,74(r2)
 4004994:	10803fcc 	andi	r2,r2,255
 4004998:	1884b03a 	or	r2,r3,r2
 400499c:	1007883a 	mov	r3,r2
 40049a0:	e0bfff17 	ldw	r2,-4(fp)
 40049a4:	10c00b8d 	sth	r3,46(r2)
        hatValue[RightHatX] = (int16_t)(((uint16_t)readBuf[15] << 8) | readBuf[14]);
 40049a8:	e0bfff17 	ldw	r2,-4(fp)
 40049ac:	10801343 	ldbu	r2,77(r2)
 40049b0:	10803fcc 	andi	r2,r2,255
 40049b4:	1004923a 	slli	r2,r2,8
 40049b8:	1007883a 	mov	r3,r2
 40049bc:	e0bfff17 	ldw	r2,-4(fp)
 40049c0:	10801303 	ldbu	r2,76(r2)
 40049c4:	10803fcc 	andi	r2,r2,255
 40049c8:	1884b03a 	or	r2,r3,r2
 40049cc:	1007883a 	mov	r3,r2
 40049d0:	e0bfff17 	ldw	r2,-4(fp)
 40049d4:	10c00c0d 	sth	r3,48(r2)
        hatValue[RightHatY] = (int16_t)(((uint16_t)readBuf[17] << 8) | readBuf[16]);
 40049d8:	e0bfff17 	ldw	r2,-4(fp)
 40049dc:	108013c3 	ldbu	r2,79(r2)
 40049e0:	10803fcc 	andi	r2,r2,255
 40049e4:	1004923a 	slli	r2,r2,8
 40049e8:	1007883a 	mov	r3,r2
 40049ec:	e0bfff17 	ldw	r2,-4(fp)
 40049f0:	10801383 	ldbu	r2,78(r2)
 40049f4:	10803fcc 	andi	r2,r2,255
 40049f8:	1884b03a 	or	r2,r3,r2
 40049fc:	1007883a 	mov	r3,r2
 4004a00:	e0bfff17 	ldw	r2,-4(fp)
 4004a04:	10c00c8d 	sth	r3,50(r2)

        //Notify(PSTR("\r\nButtonState"), 0x80);
        //PrintHex<uint16_t>(ButtonState, 0x80);

        if(ButtonState != OldButtonState) {
 4004a08:	e0bfff17 	ldw	r2,-4(fp)
 4004a0c:	10c0098b 	ldhu	r3,38(r2)
 4004a10:	e0bfff17 	ldw	r2,-4(fp)
 4004a14:	10800a0b 	ldhu	r2,40(r2)
 4004a18:	18ffffcc 	andi	r3,r3,65535
 4004a1c:	10bfffcc 	andi	r2,r2,65535
 4004a20:	18800e26 	beq	r3,r2,4004a5c <_ZN7XBOXONE10readReportEv+0x338>
                ButtonClickState = ButtonState & ~OldButtonState; // Update click state variable
 4004a24:	e0bfff17 	ldw	r2,-4(fp)
 4004a28:	1080098b 	ldhu	r2,38(r2)
 4004a2c:	1007883a 	mov	r3,r2
 4004a30:	e0bfff17 	ldw	r2,-4(fp)
 4004a34:	10800a0b 	ldhu	r2,40(r2)
 4004a38:	0084303a 	nor	r2,zero,r2
 4004a3c:	1884703a 	and	r2,r3,r2
 4004a40:	1007883a 	mov	r3,r2
 4004a44:	e0bfff17 	ldw	r2,-4(fp)
 4004a48:	10c00a8d 	sth	r3,42(r2)
                OldButtonState = ButtonState;
 4004a4c:	e0bfff17 	ldw	r2,-4(fp)
 4004a50:	10c0098b 	ldhu	r3,38(r2)
 4004a54:	e0bfff17 	ldw	r2,-4(fp)
 4004a58:	10c00a0d 	sth	r3,40(r2)
        }

        // Handle click detection for triggers
        if(triggerValue[0] != 0 && triggerValueOld[0] == 0)
 4004a5c:	e0bfff17 	ldw	r2,-4(fp)
 4004a60:	10800d0b 	ldhu	r2,52(r2)
 4004a64:	10bfffcc 	andi	r2,r2,65535
 4004a68:	10000726 	beq	r2,zero,4004a88 <_ZN7XBOXONE10readReportEv+0x364>
 4004a6c:	e0bfff17 	ldw	r2,-4(fp)
 4004a70:	10800e0b 	ldhu	r2,56(r2)
 4004a74:	10bfffcc 	andi	r2,r2,65535
 4004a78:	1000031e 	bne	r2,zero,4004a88 <_ZN7XBOXONE10readReportEv+0x364>
                L2Clicked = true;
 4004a7c:	e0bfff17 	ldw	r2,-4(fp)
 4004a80:	00c00044 	movi	r3,1
 4004a84:	10c00f05 	stb	r3,60(r2)
        triggerValueOld[0] = triggerValue[0];
 4004a88:	e0bfff17 	ldw	r2,-4(fp)
 4004a8c:	10c00d0b 	ldhu	r3,52(r2)
 4004a90:	e0bfff17 	ldw	r2,-4(fp)
 4004a94:	10c00e0d 	sth	r3,56(r2)
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
 4004a98:	e0bfff17 	ldw	r2,-4(fp)
 4004a9c:	10800d8b 	ldhu	r2,54(r2)
 4004aa0:	10bfffcc 	andi	r2,r2,65535
 4004aa4:	10000726 	beq	r2,zero,4004ac4 <_ZN7XBOXONE10readReportEv+0x3a0>
 4004aa8:	e0bfff17 	ldw	r2,-4(fp)
 4004aac:	10800e8b 	ldhu	r2,58(r2)
 4004ab0:	10bfffcc 	andi	r2,r2,65535
 4004ab4:	1000031e 	bne	r2,zero,4004ac4 <_ZN7XBOXONE10readReportEv+0x3a0>
                R2Clicked = true;
 4004ab8:	e0bfff17 	ldw	r2,-4(fp)
 4004abc:	00c00044 	movi	r3,1
 4004ac0:	10c00f45 	stb	r3,61(r2)
        triggerValueOld[1] = triggerValue[1];
 4004ac4:	e0bfff17 	ldw	r2,-4(fp)
 4004ac8:	10c00d8b 	ldhu	r3,54(r2)
 4004acc:	e0bfff17 	ldw	r2,-4(fp)
 4004ad0:	10c00e8d 	sth	r3,58(r2)
 4004ad4:	00000106 	br	4004adc <_ZN7XBOXONE10readReportEv+0x3b8>
        if(readBuf[0] != 0x20) { // Check if it's the correct report, otherwise return - the controller also sends different status reports
#ifdef EXTRADEBUG
                Notify(PSTR("\r\nXbox Poll: "), 0x80);
                D_PrintHex<uint8_t > (readBuf[0], 0x80); // 0x03 is a heart beat report!
#endif
                return;
 4004ad8:	0001883a 	nop
                L2Clicked = true;
        triggerValueOld[0] = triggerValue[0];
        if(triggerValue[1] != 0 && triggerValueOld[1] == 0)
                R2Clicked = true;
        triggerValueOld[1] = triggerValue[1];
}
 4004adc:	e037883a 	mov	sp,fp
 4004ae0:	df000017 	ldw	fp,0(sp)
 4004ae4:	dec00104 	addi	sp,sp,4
 4004ae8:	f800283a 	ret

04004aec <_ZN7XBOXONE14getButtonPressE10ButtonEnum>:

uint16_t XBOXONE::getButtonPress(ButtonEnum b) {
 4004aec:	defffd04 	addi	sp,sp,-12
 4004af0:	df000215 	stw	fp,8(sp)
 4004af4:	df000204 	addi	fp,sp,8
 4004af8:	e13ffe15 	stw	r4,-8(fp)
 4004afc:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) // These are analog buttons
 4004b00:	e0bfff17 	ldw	r2,-4(fp)
 4004b04:	10800218 	cmpnei	r2,r2,8
 4004b08:	1000031e 	bne	r2,zero,4004b18 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x2c>
                return triggerValue[0];
 4004b0c:	e0bffe17 	ldw	r2,-8(fp)
 4004b10:	10800d0b 	ldhu	r2,52(r2)
 4004b14:	00001306 	br	4004b64 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        else if(b == R2)
 4004b18:	e0bfff17 	ldw	r2,-4(fp)
 4004b1c:	10800258 	cmpnei	r2,r2,9
 4004b20:	1000031e 	bne	r2,zero,4004b30 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x44>
                return triggerValue[1];
 4004b24:	e0bffe17 	ldw	r2,-8(fp)
 4004b28:	10800d8b 	ldhu	r2,54(r2)
 4004b2c:	00000d06 	br	4004b64 <_ZN7XBOXONE14getButtonPressE10ButtonEnum+0x78>
        return (bool)(ButtonState & ((uint16_t)pgm_read_word(&XBOX_BUTTONS[(uint8_t)b])));
 4004b30:	e0bffe17 	ldw	r2,-8(fp)
 4004b34:	10c0098b 	ldhu	r3,38(r2)
 4004b38:	e0bfff17 	ldw	r2,-4(fp)
 4004b3c:	10803fcc 	andi	r2,r2,255
 4004b40:	1089883a 	add	r4,r2,r2
 4004b44:	008100b4 	movhi	r2,1026
 4004b48:	10816184 	addi	r2,r2,1414
 4004b4c:	2085883a 	add	r2,r4,r2
 4004b50:	1080000b 	ldhu	r2,0(r2)
 4004b54:	1884703a 	and	r2,r3,r2
 4004b58:	10bfffcc 	andi	r2,r2,65535
 4004b5c:	1004c03a 	cmpne	r2,r2,zero
 4004b60:	10803fcc 	andi	r2,r2,255
}
 4004b64:	e037883a 	mov	sp,fp
 4004b68:	df000017 	ldw	fp,0(sp)
 4004b6c:	dec00104 	addi	sp,sp,4
 4004b70:	f800283a 	ret

04004b74 <_ZN7XBOXONE14getButtonClickE10ButtonEnum>:

bool XBOXONE::getButtonClick(ButtonEnum b) {
 4004b74:	defffc04 	addi	sp,sp,-16
 4004b78:	df000315 	stw	fp,12(sp)
 4004b7c:	df000304 	addi	fp,sp,12
 4004b80:	e13ffe15 	stw	r4,-8(fp)
 4004b84:	e17fff15 	stw	r5,-4(fp)
        if(b == L2) {
 4004b88:	e0bfff17 	ldw	r2,-4(fp)
 4004b8c:	10800218 	cmpnei	r2,r2,8
 4004b90:	10000a1e 	bne	r2,zero,4004bbc <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x48>
                if(L2Clicked) {
 4004b94:	e0bffe17 	ldw	r2,-8(fp)
 4004b98:	10800f03 	ldbu	r2,60(r2)
 4004b9c:	10803fcc 	andi	r2,r2,255
 4004ba0:	10000426 	beq	r2,zero,4004bb4 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x40>
                        L2Clicked = false;
 4004ba4:	e0bffe17 	ldw	r2,-8(fp)
 4004ba8:	10000f05 	stb	zero,60(r2)
                        return true;
 4004bac:	00800044 	movi	r2,1
 4004bb0:	00002806 	br	4004c54 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
 4004bb4:	0005883a 	mov	r2,zero
 4004bb8:	00002606 	br	4004c54 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        } else if(b == R2) {
 4004bbc:	e0bfff17 	ldw	r2,-4(fp)
 4004bc0:	10800258 	cmpnei	r2,r2,9
 4004bc4:	10000a1e 	bne	r2,zero,4004bf0 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x7c>
                if(R2Clicked) {
 4004bc8:	e0bffe17 	ldw	r2,-8(fp)
 4004bcc:	10800f43 	ldbu	r2,61(r2)
 4004bd0:	10803fcc 	andi	r2,r2,255
 4004bd4:	10000426 	beq	r2,zero,4004be8 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0x74>
                        R2Clicked = false;
 4004bd8:	e0bffe17 	ldw	r2,-8(fp)
 4004bdc:	10000f45 	stb	zero,61(r2)
                        return true;
 4004be0:	00800044 	movi	r2,1
 4004be4:	00001b06 	br	4004c54 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
                }
                return false;
 4004be8:	0005883a 	mov	r2,zero
 4004bec:	00001906 	br	4004c54 <_ZN7XBOXONE14getButtonClickE10ButtonEnum+0xe0>
        }
        uint16_t button = pgm_read_word(&XBOX_BUTTONS[(uint8_t)b]);
 4004bf0:	e0bfff17 	ldw	r2,-4(fp)
 4004bf4:	10803fcc 	andi	r2,r2,255
 4004bf8:	1087883a 	add	r3,r2,r2
 4004bfc:	008100b4 	movhi	r2,1026
 4004c00:	10816184 	addi	r2,r2,1414
 4004c04:	1885883a 	add	r2,r3,r2
 4004c08:	1080000b 	ldhu	r2,0(r2)
 4004c0c:	e0bffd0d 	sth	r2,-12(fp)
        bool click = (ButtonClickState & button);
 4004c10:	e0bffe17 	ldw	r2,-8(fp)
 4004c14:	10c00a8b 	ldhu	r3,42(r2)
 4004c18:	e0bffd0b 	ldhu	r2,-12(fp)
 4004c1c:	1884703a 	and	r2,r3,r2
 4004c20:	10bfffcc 	andi	r2,r2,65535
 4004c24:	1004c03a 	cmpne	r2,r2,zero
 4004c28:	e0bffd85 	stb	r2,-10(fp)
        ButtonClickState &= ~button; // Clear "click" event
 4004c2c:	e0bffe17 	ldw	r2,-8(fp)
 4004c30:	10800a8b 	ldhu	r2,42(r2)
 4004c34:	1007883a 	mov	r3,r2
 4004c38:	e0bffd0b 	ldhu	r2,-12(fp)
 4004c3c:	0084303a 	nor	r2,zero,r2
 4004c40:	1884703a 	and	r2,r3,r2
 4004c44:	1007883a 	mov	r3,r2
 4004c48:	e0bffe17 	ldw	r2,-8(fp)
 4004c4c:	10c00a8d 	sth	r3,42(r2)
        return click;
 4004c50:	e0bffd83 	ldbu	r2,-10(fp)
}
 4004c54:	e037883a 	mov	sp,fp
 4004c58:	df000017 	ldw	fp,0(sp)
 4004c5c:	dec00104 	addi	sp,sp,4
 4004c60:	f800283a 	ret

04004c64 <_ZN7XBOXONE12getAnalogHatE13AnalogHatEnum>:

int16_t XBOXONE::getAnalogHat(AnalogHatEnum a) {
 4004c64:	defffd04 	addi	sp,sp,-12
 4004c68:	df000215 	stw	fp,8(sp)
 4004c6c:	df000204 	addi	fp,sp,8
 4004c70:	e13ffe15 	stw	r4,-8(fp)
 4004c74:	e17fff15 	stw	r5,-4(fp)
        return hatValue[a];
 4004c78:	e0bfff17 	ldw	r2,-4(fp)
 4004c7c:	e0fffe17 	ldw	r3,-8(fp)
 4004c80:	10800584 	addi	r2,r2,22
 4004c84:	1085883a 	add	r2,r2,r2
 4004c88:	1885883a 	add	r2,r3,r2
 4004c8c:	1080000b 	ldhu	r2,0(r2)
}
 4004c90:	e037883a 	mov	sp,fp
 4004c94:	df000017 	ldw	fp,0(sp)
 4004c98:	dec00104 	addi	sp,sp,4
 4004c9c:	f800283a 	ret

04004ca0 <_ZN7XBOXONE11XboxCommandEPht>:

/* Xbox Controller commands */
uint8_t XBOXONE::XboxCommand(uint8_t* data, uint16_t nbytes) {
 4004ca0:	defff904 	addi	sp,sp,-28
 4004ca4:	dfc00615 	stw	ra,24(sp)
 4004ca8:	df000515 	stw	fp,20(sp)
 4004cac:	df000504 	addi	fp,sp,20
 4004cb0:	e13ffd15 	stw	r4,-12(fp)
 4004cb4:	e17ffe15 	stw	r5,-8(fp)
 4004cb8:	3005883a 	mov	r2,r6
 4004cbc:	e0bfff0d 	sth	r2,-4(fp)
        data[2] = cmdCounter++; // Increment the output command counter
 4004cc0:	e0bffe17 	ldw	r2,-8(fp)
 4004cc4:	10c00084 	addi	r3,r2,2
 4004cc8:	e0bffd17 	ldw	r2,-12(fp)
 4004ccc:	10801f83 	ldbu	r2,126(r2)
 4004cd0:	11000044 	addi	r4,r2,1
 4004cd4:	200b883a 	mov	r5,r4
 4004cd8:	e13ffd17 	ldw	r4,-12(fp)
 4004cdc:	21401f85 	stb	r5,126(r4)
 4004ce0:	18800005 	stb	r2,0(r3)
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ XBOX_ONE_OUTPUT_PIPE ].epAddr, nbytes, data);
 4004ce4:	e0bffd17 	ldw	r2,-12(fp)
 4004ce8:	10c00317 	ldw	r3,12(r2)
 4004cec:	e0bffd17 	ldw	r2,-12(fp)
 4004cf0:	10800403 	ldbu	r2,16(r2)
 4004cf4:	11003fcc 	andi	r4,r2,255
 4004cf8:	e0bffd17 	ldw	r2,-12(fp)
 4004cfc:	10800503 	ldbu	r2,20(r2)
 4004d00:	11403fcc 	andi	r5,r2,255
 4004d04:	e1bfff0b 	ldhu	r6,-4(fp)
 4004d08:	e0bffe17 	ldw	r2,-8(fp)
 4004d0c:	d8800015 	stw	r2,0(sp)
 4004d10:	300f883a 	mov	r7,r6
 4004d14:	280d883a 	mov	r6,r5
 4004d18:	200b883a 	mov	r5,r4
 4004d1c:	1809883a 	mov	r4,r3
 4004d20:	40019680 	call	4001968 <_ZN3USB11outTransferEhhtPh>
 4004d24:	e0bffc05 	stb	r2,-16(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nXboxCommand, Return: "), 0x80);
        D_PrintHex<uint8_t > (rcode, 0x80);
#endif
        return rcode;
 4004d28:	e0bffc03 	ldbu	r2,-16(fp)
}
 4004d2c:	e037883a 	mov	sp,fp
 4004d30:	dfc00117 	ldw	ra,4(sp)
 4004d34:	df000017 	ldw	fp,0(sp)
 4004d38:	dec00204 	addi	sp,sp,8
 4004d3c:	f800283a 	ret

04004d40 <_ZN7XBOXONE6onInitEv>:

// The Xbox One packets are described at: https://github.com/quantus/xbox-one-controller-protocol
void XBOXONE::onInit() {
 4004d40:	defff904 	addi	sp,sp,-28
 4004d44:	dfc00615 	stw	ra,24(sp)
 4004d48:	df000515 	stw	fp,20(sp)
 4004d4c:	df000504 	addi	fp,sp,20
 4004d50:	e13fff15 	stw	r4,-4(fp)
        // A short buzz to show the controller is active
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
 4004d54:	00800244 	movi	r2,9
 4004d58:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
 4004d5c:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Single rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
 4004d60:	00800244 	movi	r2,9
 4004d64:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
 4004d68:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
 4004d6c:	008003c4 	movi	r2,15
 4004d70:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x04; // lT force
 4004d74:	00800104 	movi	r2,4
 4004d78:	e0bffc85 	stb	r2,-14(fp)
        writeBuf[7] = 0x04; // rT force
 4004d7c:	00800104 	movi	r2,4
 4004d80:	e0bffcc5 	stb	r2,-13(fp)
        writeBuf[8] = 0x20; // L force
 4004d84:	00800804 	movi	r2,32
 4004d88:	e0bffd05 	stb	r2,-12(fp)
        writeBuf[9] = 0x20; // R force
 4004d8c:	00800804 	movi	r2,32
 4004d90:	e0bffd45 	stb	r2,-11(fp)
        writeBuf[10] = 0x80; // Length of pulse
 4004d94:	00bfe004 	movi	r2,-128
 4004d98:	e0bffd85 	stb	r2,-10(fp)
        writeBuf[11] = 0x00; // Off period
 4004d9c:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
 4004da0:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
 4004da4:	01800344 	movi	r6,13
 4004da8:	e17ffb04 	addi	r5,fp,-20
 4004dac:	e13fff17 	ldw	r4,-4(fp)
 4004db0:	4004ca00 	call	4004ca0 <_ZN7XBOXONE11XboxCommandEPht>

        if(pFuncOnInit)
 4004db4:	e0bfff17 	ldw	r2,-4(fp)
 4004db8:	10800817 	ldw	r2,32(r2)
 4004dbc:	10000326 	beq	r2,zero,4004dcc <_ZN7XBOXONE6onInitEv+0x8c>
                pFuncOnInit(); // Call the user function
 4004dc0:	e0bfff17 	ldw	r2,-4(fp)
 4004dc4:	10800817 	ldw	r2,32(r2)
 4004dc8:	103ee83a 	callr	r2
}
 4004dcc:	0001883a 	nop
 4004dd0:	e037883a 	mov	sp,fp
 4004dd4:	dfc00117 	ldw	ra,4(sp)
 4004dd8:	df000017 	ldw	fp,0(sp)
 4004ddc:	dec00204 	addi	sp,sp,8
 4004de0:	f800283a 	ret

04004de4 <_ZN7XBOXONE12setRumbleOffEv>:

void XBOXONE::setRumbleOff() {
 4004de4:	defff904 	addi	sp,sp,-28
 4004de8:	dfc00615 	stw	ra,24(sp)
 4004dec:	df000515 	stw	fp,20(sp)
 4004df0:	df000504 	addi	fp,sp,20
 4004df4:	e13fff15 	stw	r4,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
 4004df8:	00800244 	movi	r2,9
 4004dfc:	e0bffb05 	stb	r2,-20(fp)
        writeBuf[1] = 0x00;
 4004e00:	e03ffb45 	stb	zero,-19(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
 4004e04:	00800244 	movi	r2,9
 4004e08:	e0bffbc5 	stb	r2,-17(fp)
        writeBuf[4] = 0x00; // Mode
 4004e0c:	e03ffc05 	stb	zero,-16(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
 4004e10:	008003c4 	movi	r2,15
 4004e14:	e0bffc45 	stb	r2,-15(fp)
        writeBuf[6] = 0x00; // lT force
 4004e18:	e03ffc85 	stb	zero,-14(fp)
        writeBuf[7] = 0x00; // rT force
 4004e1c:	e03ffcc5 	stb	zero,-13(fp)
        writeBuf[8] = 0x00; // L force
 4004e20:	e03ffd05 	stb	zero,-12(fp)
        writeBuf[9] = 0x00; // R force
 4004e24:	e03ffd45 	stb	zero,-11(fp)
        writeBuf[10] = 0x00; // On period
 4004e28:	e03ffd85 	stb	zero,-10(fp)
        writeBuf[11] = 0x00; // Off period
 4004e2c:	e03ffdc5 	stb	zero,-9(fp)
        writeBuf[12] = 0x00; // Repeat count
 4004e30:	e03ffe05 	stb	zero,-8(fp)
        XboxCommand(writeBuf, 13);
 4004e34:	01800344 	movi	r6,13
 4004e38:	e17ffb04 	addi	r5,fp,-20
 4004e3c:	e13fff17 	ldw	r4,-4(fp)
 4004e40:	4004ca00 	call	4004ca0 <_ZN7XBOXONE11XboxCommandEPht>
}
 4004e44:	0001883a 	nop
 4004e48:	e037883a 	mov	sp,fp
 4004e4c:	dfc00117 	ldw	ra,4(sp)
 4004e50:	df000017 	ldw	fp,0(sp)
 4004e54:	dec00204 	addi	sp,sp,8
 4004e58:	f800283a 	ret

04004e5c <_ZN7XBOXONE11setRumbleOnEhhhh>:

void XBOXONE::setRumbleOn(uint8_t leftTrigger, uint8_t rightTrigger, uint8_t leftMotor, uint8_t rightMotor) {
 4004e5c:	defff504 	addi	sp,sp,-44
 4004e60:	dfc00a15 	stw	ra,40(sp)
 4004e64:	df000915 	stw	fp,36(sp)
 4004e68:	df000904 	addi	fp,sp,36
 4004e6c:	e13ffb15 	stw	r4,-20(fp)
 4004e70:	3009883a 	mov	r4,r6
 4004e74:	3807883a 	mov	r3,r7
 4004e78:	e0800217 	ldw	r2,8(fp)
 4004e7c:	e17ffc05 	stb	r5,-16(fp)
 4004e80:	e13ffd05 	stb	r4,-12(fp)
 4004e84:	e0fffe05 	stb	r3,-8(fp)
 4004e88:	e0bfff05 	stb	r2,-4(fp)
        uint8_t writeBuf[13];

        // Activate rumble
        writeBuf[0] = 0x09;
 4004e8c:	00800244 	movi	r2,9
 4004e90:	e0bff705 	stb	r2,-36(fp)
        writeBuf[1] = 0x00;
 4004e94:	e03ff745 	stb	zero,-35(fp)
        // Byte 2 is set in "XboxCommand"

        // Continuous rumble effect
        writeBuf[3] = 0x09; // Substructure (what substructure rest of this packet has)
 4004e98:	00800244 	movi	r2,9
 4004e9c:	e0bff7c5 	stb	r2,-33(fp)
        writeBuf[4] = 0x00; // Mode
 4004ea0:	e03ff805 	stb	zero,-32(fp)
        writeBuf[5] = 0x0F; // Rumble mask (what motors are activated) (0000 lT rT L R)
 4004ea4:	008003c4 	movi	r2,15
 4004ea8:	e0bff845 	stb	r2,-31(fp)
        writeBuf[6] = leftTrigger; // lT force
 4004eac:	e0bffc03 	ldbu	r2,-16(fp)
 4004eb0:	e0bff885 	stb	r2,-30(fp)
        writeBuf[7] = rightTrigger; // rT force
 4004eb4:	e0bffd03 	ldbu	r2,-12(fp)
 4004eb8:	e0bff8c5 	stb	r2,-29(fp)
        writeBuf[8] = leftMotor; // L force
 4004ebc:	e0bffe03 	ldbu	r2,-8(fp)
 4004ec0:	e0bff905 	stb	r2,-28(fp)
        writeBuf[9] = rightMotor; // R force
 4004ec4:	e0bfff03 	ldbu	r2,-4(fp)
 4004ec8:	e0bff945 	stb	r2,-27(fp)
        writeBuf[10] = 0xFF; // On period
 4004ecc:	00bfffc4 	movi	r2,-1
 4004ed0:	e0bff985 	stb	r2,-26(fp)
        writeBuf[11] = 0x00; // Off period
 4004ed4:	e03ff9c5 	stb	zero,-25(fp)
        writeBuf[12] = 0xFF; // Repeat count
 4004ed8:	00bfffc4 	movi	r2,-1
 4004edc:	e0bffa05 	stb	r2,-24(fp)
        XboxCommand(writeBuf, 13);
 4004ee0:	01800344 	movi	r6,13
 4004ee4:	e17ff704 	addi	r5,fp,-36
 4004ee8:	e13ffb17 	ldw	r4,-20(fp)
 4004eec:	4004ca00 	call	4004ca0 <_ZN7XBOXONE11XboxCommandEPht>
}
 4004ef0:	0001883a 	nop
 4004ef4:	e037883a 	mov	sp,fp
 4004ef8:	dfc00117 	ldw	ra,4(sp)
 4004efc:	df000017 	ldw	fp,0(sp)
 4004f00:	dec00204 	addi	sp,sp,8
 4004f04:	f800283a 	ret

04004f08 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 4004f08:	defffe04 	addi	sp,sp,-8
 4004f0c:	df000115 	stw	fp,4(sp)
 4004f10:	df000104 	addi	fp,sp,4
 4004f14:	e13fff15 	stw	r4,-4(fp)
 4004f18:	e0bfff17 	ldw	r2,-4(fp)
 4004f1c:	10000005 	stb	zero,0(r2)
 4004f20:	e0bfff17 	ldw	r2,-4(fp)
 4004f24:	10c00043 	ldbu	r3,1(r2)
 4004f28:	1806703a 	and	r3,r3,zero
 4004f2c:	10c00045 	stb	r3,1(r2)
 4004f30:	10c00083 	ldbu	r3,2(r2)
 4004f34:	1806703a 	and	r3,r3,zero
 4004f38:	10c00085 	stb	r3,2(r2)
 4004f3c:	10c000c3 	ldbu	r3,3(r2)
 4004f40:	1806703a 	and	r3,r3,zero
 4004f44:	10c000c5 	stb	r3,3(r2)
 4004f48:	10c00103 	ldbu	r3,4(r2)
 4004f4c:	1806703a 	and	r3,r3,zero
 4004f50:	10c00105 	stb	r3,4(r2)
        };
 4004f54:	0001883a 	nop
 4004f58:	e037883a 	mov	sp,fp
 4004f5c:	df000017 	ldw	fp,0(sp)
 4004f60:	dec00104 	addi	sp,sp,4
 4004f64:	f800283a 	ret

04004f68 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 4004f68:	defffe04 	addi	sp,sp,-8
 4004f6c:	df000115 	stw	fp,4(sp)
 4004f70:	df000104 	addi	fp,sp,4
 4004f74:	e13fff15 	stw	r4,-4(fp)
 4004f78:	e0bfff17 	ldw	r2,-4(fp)
 4004f7c:	10000015 	stw	zero,0(r2)
 4004f80:	e0bfff17 	ldw	r2,-4(fp)
 4004f84:	10000105 	stb	zero,4(r2)
 4004f88:	e0bfff17 	ldw	r2,-4(fp)
 4004f8c:	10000145 	stb	zero,5(r2)
        };
 4004f90:	0001883a 	nop
 4004f94:	e037883a 	mov	sp,fp
 4004f98:	df000017 	ldw	fp,0(sp)
 4004f9c:	dec00104 	addi	sp,sp,4
 4004fa0:	f800283a 	ret

04004fa4 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 4004fa4:	defffd04 	addi	sp,sp,-12
 4004fa8:	df000215 	stw	fp,8(sp)
 4004fac:	df000204 	addi	fp,sp,8
 4004fb0:	e13ffe15 	stw	r4,-8(fp)
 4004fb4:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
 4004fb8:	e0bfff17 	ldw	r2,-4(fp)
 4004fbc:	10c00043 	ldbu	r3,1(r2)
 4004fc0:	11000083 	ldbu	r4,2(r2)
 4004fc4:	2008923a 	slli	r4,r4,8
 4004fc8:	20c6b03a 	or	r3,r4,r3
 4004fcc:	110000c3 	ldbu	r4,3(r2)
 4004fd0:	2008943a 	slli	r4,r4,16
 4004fd4:	20c6b03a 	or	r3,r4,r3
 4004fd8:	10800103 	ldbu	r2,4(r2)
 4004fdc:	1004963a 	slli	r2,r2,24
 4004fe0:	10c4b03a 	or	r2,r2,r3
 4004fe4:	1007883a 	mov	r3,r2
 4004fe8:	e0bffe17 	ldw	r2,-8(fp)
 4004fec:	10c00015 	stw	r3,0(r2)
                countDown = valueSize = pbuf->valueSize;
 4004ff0:	e0bfff17 	ldw	r2,-4(fp)
 4004ff4:	10c00003 	ldbu	r3,0(r2)
 4004ff8:	e0bffe17 	ldw	r2,-8(fp)
 4004ffc:	10c00145 	stb	r3,5(r2)
 4005000:	e0bffe17 	ldw	r2,-8(fp)
 4005004:	10c00143 	ldbu	r3,5(r2)
 4005008:	e0bffe17 	ldw	r2,-8(fp)
 400500c:	10c00105 	stb	r3,4(r2)
        };
 4005010:	0001883a 	nop
 4005014:	e037883a 	mov	sp,fp
 4005018:	df000017 	ldw	fp,0(sp)
 400501c:	dec00104 	addi	sp,sp,4
 4005020:	f800283a 	ret

04005024 <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 4005024:	defffe04 	addi	sp,sp,-8
 4005028:	df000115 	stw	fp,4(sp)
 400502c:	df000104 	addi	fp,sp,4
 4005030:	e13fff15 	stw	r4,-4(fp)
 4005034:	e0bfff17 	ldw	r2,-4(fp)
 4005038:	10000015 	stw	zero,0(r2)
 400503c:	e0bfff17 	ldw	r2,-4(fp)
 4005040:	10000105 	stb	zero,4(r2)
 4005044:	e0bfff17 	ldw	r2,-4(fp)
 4005048:	1000018d 	sth	zero,6(r2)
        };
 400504c:	0001883a 	nop
 4005050:	e037883a 	mov	sp,fp
 4005054:	df000017 	ldw	fp,0(sp)
 4005058:	dec00104 	addi	sp,sp,4
 400505c:	f800283a 	ret

04005060 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 4005060:	defffd04 	addi	sp,sp,-12
 4005064:	df000215 	stw	fp,8(sp)
 4005068:	df000204 	addi	fp,sp,8
 400506c:	e13ffe15 	stw	r4,-8(fp)
 4005070:	e17fff15 	stw	r5,-4(fp)
                pBuf = (uint8_t*)pbuf->pValue;
 4005074:	e0bfff17 	ldw	r2,-4(fp)
 4005078:	10c00043 	ldbu	r3,1(r2)
 400507c:	11000083 	ldbu	r4,2(r2)
 4005080:	2008923a 	slli	r4,r4,8
 4005084:	20c6b03a 	or	r3,r4,r3
 4005088:	110000c3 	ldbu	r4,3(r2)
 400508c:	2008943a 	slli	r4,r4,16
 4005090:	20c6b03a 	or	r3,r4,r3
 4005094:	10800103 	ldbu	r2,4(r2)
 4005098:	1004963a 	slli	r2,r2,24
 400509c:	10c4b03a 	or	r2,r2,r3
 40050a0:	1007883a 	mov	r3,r2
 40050a4:	e0bffe17 	ldw	r2,-8(fp)
 40050a8:	10c00015 	stw	r3,0(r2)
                countDown = 0;
 40050ac:	e0bffe17 	ldw	r2,-8(fp)
 40050b0:	1000018d 	sth	zero,6(r2)
        };
 40050b4:	0001883a 	nop
 40050b8:	e037883a 	mov	sp,fp
 40050bc:	df000017 	ldw	fp,0(sp)
 40050c0:	dec00104 	addi	sp,sp,4
 40050c4:	f800283a 	ret

040050c8 <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 40050c8:	defffb04 	addi	sp,sp,-20
 40050cc:	df000415 	stw	fp,16(sp)
 40050d0:	df000404 	addi	fp,sp,16
 40050d4:	e13ffc15 	stw	r4,-16(fp)
 40050d8:	e17ffd15 	stw	r5,-12(fp)
 40050dc:	e1bffe15 	stw	r6,-8(fp)
 40050e0:	3805883a 	mov	r2,r7
 40050e4:	e0bfff0d 	sth	r2,-4(fp)
                switch(nStage) {
 40050e8:	e0bffc17 	ldw	r2,-16(fp)
 40050ec:	10800103 	ldbu	r2,4(r2)
 40050f0:	10803fcc 	andi	r2,r2,255
 40050f4:	10000326 	beq	r2,zero,4005104 <_ZN11ByteSkipper4SkipEPPhPtt+0x3c>
 40050f8:	10800060 	cmpeqi	r2,r2,1
 40050fc:	10000a1e 	bne	r2,zero,4005128 <_ZN11ByteSkipper4SkipEPPhPtt+0x60>
 4005100:	00002906 	br	40051a8 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                        case 0:
                                countDown = bytes_to_skip;
 4005104:	e0bffc17 	ldw	r2,-16(fp)
 4005108:	e0ffff0b 	ldhu	r3,-4(fp)
 400510c:	10c0018d 	sth	r3,6(r2)
                                nStage++;
 4005110:	e0bffc17 	ldw	r2,-16(fp)
 4005114:	10800103 	ldbu	r2,4(r2)
 4005118:	10800044 	addi	r2,r2,1
 400511c:	1007883a 	mov	r3,r2
 4005120:	e0bffc17 	ldw	r2,-16(fp)
 4005124:	10c00105 	stb	r3,4(r2)
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 4005128:	e0bffc17 	ldw	r2,-16(fp)
 400512c:	1080018b 	ldhu	r2,6(r2)
 4005130:	10bfffcc 	andi	r2,r2,65535
 4005134:	10001626 	beq	r2,zero,4005190 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
 4005138:	e0bffe17 	ldw	r2,-8(fp)
 400513c:	1080000b 	ldhu	r2,0(r2)
 4005140:	10bfffcc 	andi	r2,r2,65535
 4005144:	10001226 	beq	r2,zero,4005190 <_ZN11ByteSkipper4SkipEPPhPtt+0xc8>
 4005148:	e0bffc17 	ldw	r2,-16(fp)
 400514c:	1080018b 	ldhu	r2,6(r2)
 4005150:	10bfffc4 	addi	r2,r2,-1
 4005154:	1007883a 	mov	r3,r2
 4005158:	e0bffc17 	ldw	r2,-16(fp)
 400515c:	10c0018d 	sth	r3,6(r2)
 4005160:	e0bffd17 	ldw	r2,-12(fp)
 4005164:	10800017 	ldw	r2,0(r2)
 4005168:	10c00044 	addi	r3,r2,1
 400516c:	e0bffd17 	ldw	r2,-12(fp)
 4005170:	10c00015 	stw	r3,0(r2)
 4005174:	e0bffe17 	ldw	r2,-8(fp)
 4005178:	1080000b 	ldhu	r2,0(r2)
 400517c:	10bfffc4 	addi	r2,r2,-1
 4005180:	1007883a 	mov	r3,r2
 4005184:	e0bffe17 	ldw	r2,-8(fp)
 4005188:	10c0000d 	sth	r3,0(r2)
 400518c:	003fe606 	br	4005128 <__alt_data_end+0xfc005128>

                                if(!countDown)
 4005190:	e0bffc17 	ldw	r2,-16(fp)
 4005194:	1080018b 	ldhu	r2,6(r2)
 4005198:	10bfffcc 	andi	r2,r2,65535
 400519c:	1000021e 	bne	r2,zero,40051a8 <_ZN11ByteSkipper4SkipEPPhPtt+0xe0>
                                        nStage = 0;
 40051a0:	e0bffc17 	ldw	r2,-16(fp)
 40051a4:	10000105 	stb	zero,4(r2)
                };
                return (!countDown);
 40051a8:	e0bffc17 	ldw	r2,-16(fp)
 40051ac:	1080018b 	ldhu	r2,6(r2)
 40051b0:	10bfffcc 	andi	r2,r2,65535
 40051b4:	1005003a 	cmpeq	r2,r2,zero
        };
 40051b8:	e037883a 	mov	sp,fp
 40051bc:	df000017 	ldw	fp,0(sp)
 40051c0:	dec00104 	addi	sp,sp,4
 40051c4:	f800283a 	ret

040051c8 <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 40051c8:	defffb04 	addi	sp,sp,-20
 40051cc:	df000415 	stw	fp,16(sp)
 40051d0:	df000404 	addi	fp,sp,16
 40051d4:	e13ffc15 	stw	r4,-16(fp)
 40051d8:	2809883a 	mov	r4,r5
 40051dc:	3007883a 	mov	r3,r6
 40051e0:	3805883a 	mov	r2,r7
 40051e4:	e13ffd05 	stb	r4,-12(fp)
 40051e8:	e0fffe05 	stb	r3,-8(fp)
 40051ec:	e0bfff05 	stb	r2,-4(fp)
                return 0;
 40051f0:	0005883a 	mov	r2,zero
        }
 40051f4:	e037883a 	mov	sp,fp
 40051f8:	df000017 	ldw	fp,0(sp)
 40051fc:	dec00104 	addi	sp,sp,4
 4005200:	f800283a 	ret

04005204 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 4005204:	defffb04 	addi	sp,sp,-20
 4005208:	df000415 	stw	fp,16(sp)
 400520c:	df000404 	addi	fp,sp,16
 4005210:	e13ffc15 	stw	r4,-16(fp)
 4005214:	2809883a 	mov	r4,r5
 4005218:	3007883a 	mov	r3,r6
 400521c:	3805883a 	mov	r2,r7
 4005220:	e13ffd05 	stb	r4,-12(fp)
 4005224:	e0fffe05 	stb	r3,-8(fp)
 4005228:	e0bfff05 	stb	r2,-4(fp)
                return 0;
 400522c:	0005883a 	mov	r2,zero
        }
 4005230:	e037883a 	mov	sp,fp
 4005234:	df000017 	ldw	fp,0(sp)
 4005238:	dec00104 	addi	sp,sp,4
 400523c:	f800283a 	ret

04005240 <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 4005240:	defffe04 	addi	sp,sp,-8
 4005244:	df000115 	stw	fp,4(sp)
 4005248:	df000104 	addi	fp,sp,4
 400524c:	e13fff15 	stw	r4,-4(fp)
                return 0;
 4005250:	0005883a 	mov	r2,zero
        }
 4005254:	e037883a 	mov	sp,fp
 4005258:	df000017 	ldw	fp,0(sp)
 400525c:	dec00104 	addi	sp,sp,4
 4005260:	f800283a 	ret

04005264 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 4005264:	defffe04 	addi	sp,sp,-8
 4005268:	df000115 	stw	fp,4(sp)
 400526c:	df000104 	addi	fp,sp,4
 4005270:	e13fff15 	stw	r4,-4(fp)
                return 0;
 4005274:	0005883a 	mov	r2,zero
        }
 4005278:	e037883a 	mov	sp,fp
 400527c:	df000017 	ldw	fp,0(sp)
 4005280:	dec00104 	addi	sp,sp,4
 4005284:	f800283a 	ret

04005288 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 4005288:	defffe04 	addi	sp,sp,-8
 400528c:	df000115 	stw	fp,4(sp)
 4005290:	df000104 	addi	fp,sp,4
 4005294:	e13fff15 	stw	r4,-4(fp)
                return 0;
 4005298:	0005883a 	mov	r2,zero
        }
 400529c:	e037883a 	mov	sp,fp
 40052a0:	df000017 	ldw	fp,0(sp)
 40052a4:	dec00104 	addi	sp,sp,4
 40052a8:	f800283a 	ret

040052ac <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 40052ac:	defffd04 	addi	sp,sp,-12
 40052b0:	df000215 	stw	fp,8(sp)
 40052b4:	df000204 	addi	fp,sp,8
 40052b8:	e13ffe15 	stw	r4,-8(fp)
 40052bc:	2805883a 	mov	r2,r5
 40052c0:	e0bfff05 	stb	r2,-4(fp)
                return;
 40052c4:	0001883a 	nop
        } // Note used for hubs only!
 40052c8:	e037883a 	mov	sp,fp
 40052cc:	df000017 	ldw	fp,0(sp)
 40052d0:	dec00104 	addi	sp,sp,4
 40052d4:	f800283a 	ret

040052d8 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 40052d8:	defffc04 	addi	sp,sp,-16
 40052dc:	df000315 	stw	fp,12(sp)
 40052e0:	df000304 	addi	fp,sp,12
 40052e4:	e13ffd15 	stw	r4,-12(fp)
 40052e8:	2807883a 	mov	r3,r5
 40052ec:	3005883a 	mov	r2,r6
 40052f0:	e0fffe0d 	sth	r3,-8(fp)
 40052f4:	e0bfff0d 	sth	r2,-4(fp)
                return false;
 40052f8:	0005883a 	mov	r2,zero
        }
 40052fc:	e037883a 	mov	sp,fp
 4005300:	df000017 	ldw	fp,0(sp)
 4005304:	dec00104 	addi	sp,sp,4
 4005308:	f800283a 	ret

0400530c <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 400530c:	defffd04 	addi	sp,sp,-12
 4005310:	df000215 	stw	fp,8(sp)
 4005314:	df000204 	addi	fp,sp,8
 4005318:	e13ffe15 	stw	r4,-8(fp)
 400531c:	2805883a 	mov	r2,r5
 4005320:	e0bfff05 	stb	r2,-4(fp)
                return false;
 4005324:	0005883a 	mov	r2,zero
        }
 4005328:	e037883a 	mov	sp,fp
 400532c:	df000017 	ldw	fp,0(sp)
 4005330:	dec00104 	addi	sp,sp,4
 4005334:	f800283a 	ret

04005338 <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 4005338:	defffd04 	addi	sp,sp,-12
 400533c:	df000215 	stw	fp,8(sp)
 4005340:	df000204 	addi	fp,sp,8
 4005344:	e13ffe15 	stw	r4,-8(fp)
 4005348:	2805883a 	mov	r2,r5
 400534c:	e0bfff05 	stb	r2,-4(fp)
                return true;
 4005350:	00800044 	movi	r2,1
        }
 4005354:	e037883a 	mov	sp,fp
 4005358:	df000017 	ldw	fp,0(sp)
 400535c:	dec00104 	addi	sp,sp,4
 4005360:	f800283a 	ret

04005364 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 4005364:	defffc04 	addi	sp,sp,-16
 4005368:	df000315 	stw	fp,12(sp)
 400536c:	df000304 	addi	fp,sp,12
 4005370:	e13ffe15 	stw	r4,-8(fp)
 4005374:	e17fff15 	stw	r5,-4(fp)
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 4005378:	e03ffd05 	stb	zero,-12(fp)
 400537c:	e0bffd03 	ldbu	r2,-12(fp)
 4005380:	10800428 	cmpgeui	r2,r2,16
 4005384:	1000161e 	bne	r2,zero,40053e0 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x7c>
                        if(!devConfig[i]) {
 4005388:	e0bffd03 	ldbu	r2,-12(fp)
 400538c:	e0fffe17 	ldw	r3,-8(fp)
 4005390:	10800784 	addi	r2,r2,30
 4005394:	1085883a 	add	r2,r2,r2
 4005398:	1085883a 	add	r2,r2,r2
 400539c:	1885883a 	add	r2,r3,r2
 40053a0:	10800017 	ldw	r2,0(r2)
 40053a4:	10000a1e 	bne	r2,zero,40053d0 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x6c>
                                devConfig[i] = pdev;
 40053a8:	e0bffd03 	ldbu	r2,-12(fp)
 40053ac:	e0fffe17 	ldw	r3,-8(fp)
 40053b0:	10800784 	addi	r2,r2,30
 40053b4:	1085883a 	add	r2,r2,r2
 40053b8:	1085883a 	add	r2,r2,r2
 40053bc:	1885883a 	add	r2,r3,r2
 40053c0:	e0ffff17 	ldw	r3,-4(fp)
 40053c4:	10c00015 	stw	r3,0(r2)
                                return 0;
 40053c8:	0005883a 	mov	r2,zero
 40053cc:	00000506 	br	40053e4 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x80>
        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 40053d0:	e0bffd03 	ldbu	r2,-12(fp)
 40053d4:	10800044 	addi	r2,r2,1
 40053d8:	e0bffd05 	stb	r2,-12(fp)
 40053dc:	003fe706 	br	400537c <__alt_data_end+0xfc00537c>
                        if(!devConfig[i]) {
                                devConfig[i] = pdev;
                                return 0;
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 40053e0:	00bff4c4 	movi	r2,-45
        };
 40053e4:	e037883a 	mov	sp,fp
 40053e8:	df000017 	ldw	fp,0(sp)
 40053ec:	dec00104 	addi	sp,sp,4
 40053f0:	f800283a 	ret

040053f4 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 40053f4:	defffa04 	addi	sp,sp,-24
 40053f8:	df000515 	stw	fp,20(sp)
 40053fc:	df000504 	addi	fp,sp,20
 4005400:	e13ffb15 	stw	r4,-20(fp)
 4005404:	3009883a 	mov	r4,r6
 4005408:	3807883a 	mov	r3,r7
 400540c:	e0800117 	ldw	r2,4(fp)
 4005410:	e17ffc05 	stb	r5,-16(fp)
 4005414:	e13ffd05 	stb	r4,-12(fp)
 4005418:	e0fffe05 	stb	r3,-8(fp)
 400541c:	e0bfff05 	stb	r2,-4(fp)
        };
 4005420:	0001883a 	nop
 4005424:	e037883a 	mov	sp,fp
 4005428:	df000017 	ldw	fp,0(sp)
 400542c:	dec00104 	addi	sp,sp,4
 4005430:	f800283a 	ret

04005434 <_ZN7XBOXONE10GetAddressEv>:

        /**
         * Get the device address.
         * @return The device address.
         */
        virtual uint8_t GetAddress() {
 4005434:	defffe04 	addi	sp,sp,-8
 4005438:	df000115 	stw	fp,4(sp)
 400543c:	df000104 	addi	fp,sp,4
 4005440:	e13fff15 	stw	r4,-4(fp)
                return bAddress;
 4005444:	e0bfff17 	ldw	r2,-4(fp)
 4005448:	10800403 	ldbu	r2,16(r2)
        };
 400544c:	e037883a 	mov	sp,fp
 4005450:	df000017 	ldw	fp,0(sp)
 4005454:	dec00104 	addi	sp,sp,4
 4005458:	f800283a 	ret

0400545c <_ZN7XBOXONE7isReadyEv>:

        /**
         * Used to check if the controller has been initialized.
         * @return True if it's ready.
         */
        virtual bool isReady() {
 400545c:	defffe04 	addi	sp,sp,-8
 4005460:	df000115 	stw	fp,4(sp)
 4005464:	df000104 	addi	fp,sp,4
 4005468:	e13fff15 	stw	r4,-4(fp)
                return bPollEnable;
 400546c:	e0bfff17 	ldw	r2,-4(fp)
 4005470:	10800943 	ldbu	r2,37(r2)
        };
 4005474:	e037883a 	mov	sp,fp
 4005478:	df000017 	ldw	fp,0(sp)
 400547c:	dec00104 	addi	sp,sp,4
 4005480:	f800283a 	ret

04005484 <_ZN7XBOXONE8VIDPIDOKEtt>:
         * Used by the USB core to check what this driver support.
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 4005484:	defffc04 	addi	sp,sp,-16
 4005488:	df000315 	stw	fp,12(sp)
 400548c:	df000304 	addi	fp,sp,12
 4005490:	e13ffd15 	stw	r4,-12(fp)
 4005494:	2807883a 	mov	r3,r5
 4005498:	3005883a 	mov	r2,r6
 400549c:	e0fffe0d 	sth	r3,-8(fp)
 40054a0:	e0bfff0d 	sth	r2,-4(fp)
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
 40054a4:	e0bffe0b 	ldhu	r2,-8(fp)
 40054a8:	108117a0 	cmpeqi	r2,r2,1118
 40054ac:	10000f1e 	bne	r2,zero,40054ec <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 40054b0:	e0bffe0b 	ldhu	r2,-8(fp)
 40054b4:	1081ce20 	cmpeqi	r2,r2,1848
 40054b8:	10000c1e 	bne	r2,zero,40054ec <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 40054bc:	e0bffe0b 	ldhu	r2,-8(fp)
 40054c0:	10839be0 	cmpeqi	r2,r2,3695
 40054c4:	1000091e 	bne	r2,zero,40054ec <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 40054c8:	e0bffe0b 	ldhu	r2,-8(fp)
 40054cc:	1083c360 	cmpeqi	r2,r2,3853
 40054d0:	1000061e 	bne	r2,zero,40054ec <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 40054d4:	e0bffe0b 	ldhu	r2,-8(fp)
 40054d8:	10854ca0 	cmpeqi	r2,r2,5426
 40054dc:	1000031e 	bne	r2,zero,40054ec <_ZN7XBOXONE8VIDPIDOKEtt+0x68>
 40054e0:	e0bffe0b 	ldhu	r2,-8(fp)
 40054e4:	10893198 	cmpnei	r2,r2,9414
 40054e8:	10002c1e 	bne	r2,zero,400559c <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
 40054ec:	e0bfff0b 	ldhu	r2,-4(fp)
 40054f0:	1080b460 	cmpeqi	r2,r2,721
 40054f4:	1000271e 	bne	r2,zero,4005594 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
 40054f8:	e0bfff0b 	ldhu	r2,-4(fp)
 40054fc:	1080b760 	cmpeqi	r2,r2,733
 4005500:	1000241e 	bne	r2,zero,4005594 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4005504:	e0bfff0b 	ldhu	r2,-4(fp)
 4005508:	1080b8e0 	cmpeqi	r2,r2,739
 400550c:	1000211e 	bne	r2,zero,4005594 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4005510:	e0bfff0b 	ldhu	r2,-4(fp)
 4005514:	1080baa0 	cmpeqi	r2,r2,746
 4005518:	10001e1e 	bne	r2,zero,4005594 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 400551c:	e0bfff0b 	ldhu	r2,-4(fp)
 4005520:	10928060 	cmpeqi	r2,r2,18945
 4005524:	10001b1e 	bne	r2,zero,4005594 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
 4005528:	e0bfff0b 	ldhu	r2,-4(fp)
 400552c:	10804e60 	cmpeqi	r2,r2,313
 4005530:	1000181e 	bne	r2,zero,4005594 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4005534:	e0bfff0b 	ldhu	r2,-4(fp)
 4005538:	108051a0 	cmpeqi	r2,r2,326
 400553c:	1000151e 	bne	r2,zero,4005594 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4005540:	e0bfff0b 	ldhu	r2,-4(fp)
 4005544:	108019e0 	cmpeqi	r2,r2,103
 4005548:	1000121e 	bne	r2,zero,4005594 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 400554c:	e0bfff0b 	ldhu	r2,-4(fp)
 4005550:	108280e0 	cmpeqi	r2,r2,2563
 4005554:	10000f1e 	bne	r2,zero,4005594 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
 4005558:	e0bfff0b 	ldhu	r2,-4(fp)
 400555c:	109506a0 	cmpeqi	r2,r2,21530
 4005560:	10000c1e 	bne	r2,zero,4005594 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4005564:	e0bfff0b 	ldhu	r2,-4(fp)
 4005568:	10950aa0 	cmpeqi	r2,r2,21546
 400556c:	1000091e 	bne	r2,zero,4005594 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 4005570:	e0bfff0b 	ldhu	r2,-4(fp)
 4005574:	10950ea0 	cmpeqi	r2,r2,21562
 4005578:	1000061e 	bne	r2,zero,4005594 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
 400557c:	e0bfff0b 	ldhu	r2,-4(fp)
 4005580:	1082c2a0 	cmpeqi	r2,r2,2826
 4005584:	1000031e 	bne	r2,zero,4005594 <_ZN7XBOXONE8VIDPIDOKEtt+0x110>
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
 4005588:	e0bfff0b 	ldhu	r2,-4(fp)
 400558c:	1082c498 	cmpnei	r2,r2,2834
 4005590:	1000021e 	bne	r2,zero,400559c <_ZN7XBOXONE8VIDPIDOKEtt+0x118>
         * @param  vid The device's VID.
         * @param  pid The device's PID.
         * @return     Returns true if the device's VID and PID matches this driver.
         */
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
                return ((vid == XBOX_VID1 || vid == XBOX_VID2 || vid == XBOX_VID3 || vid == XBOX_VID4 || vid == XBOX_VID5 || vid == XBOX_VID6) &&
 4005594:	00800044 	movi	r2,1
 4005598:	00000106 	br	40055a0 <_ZN7XBOXONE8VIDPIDOKEtt+0x11c>
 400559c:	0005883a 	mov	r2,zero
                       (pid == XBOX_ONE_PID1 || pid == XBOX_ONE_PID2 || pid == XBOX_ONE_PID3 || pid == XBOX_ONE_PID4 ||
                        pid == XBOX_ONE_PID5 || pid == XBOX_ONE_PID6 || pid == XBOX_ONE_PID7 || pid == XBOX_ONE_PID8 ||
                        pid == XBOX_ONE_PID9 || pid == XBOX_ONE_PID10 || pid == XBOX_ONE_PID11 || pid == XBOX_ONE_PID12 || 
                        pid == XBOX_ONE_PID13 || pid == XBOX_ONE_PID14));
        };
 40055a0:	e037883a 	mov	sp,fp
 40055a4:	df000017 	ldw	fp,0(sp)
 40055a8:	dec00104 	addi	sp,sp,4
 40055ac:	f800283a 	ret

040055b0 <_ZN15USBDeviceConfigC1Ev>:
#define USB_STATE_ADDRESSING                                0x70
#define USB_STATE_CONFIGURING                               0x80
#define USB_STATE_RUNNING                                   0x90
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
 40055b0:	defffe04 	addi	sp,sp,-8
 40055b4:	df000115 	stw	fp,4(sp)
 40055b8:	df000104 	addi	fp,sp,4
 40055bc:	e13fff15 	stw	r4,-4(fp)
 40055c0:	008100b4 	movhi	r2,1026
 40055c4:	10818604 	addi	r2,r2,1560
 40055c8:	e0ffff17 	ldw	r3,-4(fp)
 40055cc:	18800015 	stw	r2,0(r3)
 40055d0:	0001883a 	nop
 40055d4:	e037883a 	mov	sp,fp
 40055d8:	df000017 	ldw	fp,0(sp)
 40055dc:	dec00104 	addi	sp,sp,4
 40055e0:	f800283a 	ret

040055e4 <_ZN17UsbConfigXtracterC1Ev>:
#error "Never include confdescparser.h directly; include Usb.h instead"
#else

#define __CONFDESCPARSER_H__

class UsbConfigXtracter {
 40055e4:	defffe04 	addi	sp,sp,-8
 40055e8:	df000115 	stw	fp,4(sp)
 40055ec:	df000104 	addi	fp,sp,4
 40055f0:	e13fff15 	stw	r4,-4(fp)
 40055f4:	008100b4 	movhi	r2,1026
 40055f8:	10818004 	addi	r2,r2,1536
 40055fc:	e0ffff17 	ldw	r3,-4(fp)
 4005600:	18800015 	stw	r2,0(r3)
 4005604:	0001883a 	nop
 4005608:	e037883a 	mov	sp,fp
 400560c:	df000017 	ldw	fp,0(sp)
 4005610:	dec00104 	addi	sp,sp,4
 4005614:	f800283a 	ret

04005618 <_ZN13USBReadParserC1Ev>:



// Base class for incoming data parser

class USBReadParser {
 4005618:	defffe04 	addi	sp,sp,-8
 400561c:	df000115 	stw	fp,4(sp)
 4005620:	df000104 	addi	fp,sp,4
 4005624:	e13fff15 	stw	r4,-4(fp)
 4005628:	008100b4 	movhi	r2,1026
 400562c:	10818304 	addi	r2,r2,1548
 4005630:	e0ffff17 	ldw	r3,-4(fp)
 4005634:	18800015 	stw	r2,0(r3)
 4005638:	0001883a 	nop
 400563c:	e037883a 	mov	sp,fp
 4005640:	df000017 	ldw	fp,0(sp)
 4005644:	dec00104 	addi	sp,sp,4
 4005648:	f800283a 	ret

0400564c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 400564c:	defffc04 	addi	sp,sp,-16
 4005650:	dfc00315 	stw	ra,12(sp)
 4005654:	df000215 	stw	fp,8(sp)
 4005658:	df000204 	addi	fp,sp,8
 400565c:	e13ffe15 	stw	r4,-8(fp)
 4005660:	e17fff15 	stw	r5,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 4005664:	e0bffe17 	ldw	r2,-8(fp)
 4005668:	1009883a 	mov	r4,r2
 400566c:	40056180 	call	4005618 <_ZN13USBReadParserC1Ev>
 4005670:	008100b4 	movhi	r2,1026
 4005674:	10817d04 	addi	r2,r2,1524
 4005678:	e0fffe17 	ldw	r3,-8(fp)
 400567c:	18800015 	stw	r2,0(r3)
 4005680:	e0bffe17 	ldw	r2,-8(fp)
 4005684:	e0ffff17 	ldw	r3,-4(fp)
 4005688:	10c00115 	stw	r3,4(r2)
 400568c:	e0bffe17 	ldw	r2,-8(fp)
 4005690:	10800204 	addi	r2,r2,8
 4005694:	1009883a 	mov	r4,r2
 4005698:	4004f080 	call	4004f08 <_ZN16MultiValueBufferC1Ev>
 400569c:	e0bffe17 	ldw	r2,-8(fp)
 40056a0:	10800404 	addi	r2,r2,16
 40056a4:	1009883a 	mov	r4,r2
 40056a8:	4004f680 	call	4004f68 <_ZN20MultiByteValueParserC1Ev>
 40056ac:	e0bffe17 	ldw	r2,-8(fp)
 40056b0:	10800604 	addi	r2,r2,24
 40056b4:	1009883a 	mov	r4,r2
 40056b8:	40050240 	call	4005024 <_ZN11ByteSkipperC1Ev>
 40056bc:	e0bffe17 	ldw	r2,-8(fp)
 40056c0:	10000c05 	stb	zero,48(r2)
 40056c4:	e0bffe17 	ldw	r2,-8(fp)
 40056c8:	10000c45 	stb	zero,49(r2)
 40056cc:	e0bffe17 	ldw	r2,-8(fp)
 40056d0:	10000c85 	stb	zero,50(r2)
 40056d4:	e0bffe17 	ldw	r2,-8(fp)
 40056d8:	10000e05 	stb	zero,56(r2)
        theBuffer.pValue = varBuffer;
 40056dc:	e0bffe17 	ldw	r2,-8(fp)
 40056e0:	10c00804 	addi	r3,r2,32
 40056e4:	e0bffe17 	ldw	r2,-8(fp)
 40056e8:	19803fcc 	andi	r6,r3,255
 40056ec:	11000243 	ldbu	r4,9(r2)
 40056f0:	2008703a 	and	r4,r4,zero
 40056f4:	200b883a 	mov	r5,r4
 40056f8:	3009883a 	mov	r4,r6
 40056fc:	2908b03a 	or	r4,r5,r4
 4005700:	11000245 	stb	r4,9(r2)
 4005704:	1808d23a 	srli	r4,r3,8
 4005708:	21803fcc 	andi	r6,r4,255
 400570c:	11000283 	ldbu	r4,10(r2)
 4005710:	2008703a 	and	r4,r4,zero
 4005714:	200b883a 	mov	r5,r4
 4005718:	3009883a 	mov	r4,r6
 400571c:	2908b03a 	or	r4,r5,r4
 4005720:	11000285 	stb	r4,10(r2)
 4005724:	1808d43a 	srli	r4,r3,16
 4005728:	21803fcc 	andi	r6,r4,255
 400572c:	110002c3 	ldbu	r4,11(r2)
 4005730:	2008703a 	and	r4,r4,zero
 4005734:	200b883a 	mov	r5,r4
 4005738:	3009883a 	mov	r4,r6
 400573c:	2908b03a 	or	r4,r5,r4
 4005740:	110002c5 	stb	r4,11(r2)
 4005744:	180ad63a 	srli	r5,r3,24
 4005748:	10c00303 	ldbu	r3,12(r2)
 400574c:	1806703a 	and	r3,r3,zero
 4005750:	1809883a 	mov	r4,r3
 4005754:	2807883a 	mov	r3,r5
 4005758:	20c6b03a 	or	r3,r4,r3
 400575c:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
 4005760:	e0bffe17 	ldw	r2,-8(fp)
 4005764:	10c00404 	addi	r3,r2,16
 4005768:	e0bffe17 	ldw	r2,-8(fp)
 400576c:	10800204 	addi	r2,r2,8
 4005770:	100b883a 	mov	r5,r2
 4005774:	1809883a 	mov	r4,r3
 4005778:	4004fa40 	call	4004fa4 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 400577c:	e0bffe17 	ldw	r2,-8(fp)
 4005780:	10c00604 	addi	r3,r2,24
 4005784:	e0bffe17 	ldw	r2,-8(fp)
 4005788:	10800204 	addi	r2,r2,8
 400578c:	100b883a 	mov	r5,r2
 4005790:	1809883a 	mov	r4,r3
 4005794:	40050600 	call	4005060 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 4005798:	0001883a 	nop
 400579c:	e037883a 	mov	sp,fp
 40057a0:	dfc00117 	ldw	ra,4(sp)
 40057a4:	df000017 	ldw	fp,0(sp)
 40057a8:	dec00204 	addi	sp,sp,8
 40057ac:	f800283a 	ret

040057b0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 40057b0:	defff804 	addi	sp,sp,-32
 40057b4:	dfc00715 	stw	ra,28(sp)
 40057b8:	df000615 	stw	fp,24(sp)
 40057bc:	df000604 	addi	fp,sp,24
 40057c0:	e13ffc15 	stw	r4,-16(fp)
 40057c4:	2805883a 	mov	r2,r5
 40057c8:	e1bffe15 	stw	r6,-8(fp)
 40057cc:	e1ffff15 	stw	r7,-4(fp)
 40057d0:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
 40057d4:	e0bffd0b 	ldhu	r2,-12(fp)
 40057d8:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
 40057dc:	e0bffe17 	ldw	r2,-8(fp)
 40057e0:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
 40057e4:	e0bffa0b 	ldhu	r2,-24(fp)
 40057e8:	10bfffcc 	andi	r2,r2,65535
 40057ec:	10000a26 	beq	r2,zero,4005818 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
 40057f0:	e0bffb04 	addi	r2,fp,-20
 40057f4:	e1bffa04 	addi	r6,fp,-24
 40057f8:	100b883a 	mov	r5,r2
 40057fc:	e13ffc17 	ldw	r4,-16(fp)
 4005800:	400582c0 	call	400582c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>
 4005804:	1080005c 	xori	r2,r2,1
 4005808:	10803fcc 	andi	r2,r2,255
 400580c:	1000011e 	bne	r2,zero,4005814 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE5ParseEtPKhRKt+0x64>
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
 4005810:	003ff406 	br	40057e4 <__alt_data_end+0xfc0057e4>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
 4005814:	0001883a 	nop
}
 4005818:	e037883a 	mov	sp,fp
 400581c:	dfc00117 	ldw	ra,4(sp)
 4005820:	df000017 	ldw	fp,0(sp)
 4005824:	dec00204 	addi	sp,sp,8
 4005828:	f800283a 	ret

0400582c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 400582c:	defff604 	addi	sp,sp,-40
 4005830:	dfc00915 	stw	ra,36(sp)
 4005834:	df000815 	stw	fp,32(sp)
 4005838:	df000804 	addi	fp,sp,32
 400583c:	e13ffc15 	stw	r4,-16(fp)
 4005840:	e17ffd15 	stw	r5,-12(fp)
 4005844:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 4005848:	e0bffc17 	ldw	r2,-16(fp)
 400584c:	10800804 	addi	r2,r2,32
 4005850:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 4005854:	e0bffc17 	ldw	r2,-16(fp)
 4005858:	10800804 	addi	r2,r2,32
 400585c:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
 4005860:	e0bffc17 	ldw	r2,-16(fp)
 4005864:	10800c03 	ldbu	r2,48(r2)
 4005868:	10803fcc 	andi	r2,r2,255
 400586c:	10c00168 	cmpgeui	r3,r2,5
 4005870:	1801141e 	bne	r3,zero,4005cc4 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x498>
 4005874:	100690ba 	slli	r3,r2,2
 4005878:	00810034 	movhi	r2,1024
 400587c:	10962304 	addi	r2,r2,22668
 4005880:	1885883a 	add	r2,r3,r2
 4005884:	10800017 	ldw	r2,0(r2)
 4005888:	1000683a 	jmp	r2
 400588c:	040058a0 	cmpeqi	r16,zero,354
 4005890:	040058d4 	movui	r16,355
 4005894:	0400595c 	xori	r16,zero,357
 4005898:	040059f0 	cmpltui	r16,zero,359
 400589c:	04005a5c 	xori	r16,zero,361
                case 0:
                        theBuffer.valueSize = 2;
 40058a0:	e0bffc17 	ldw	r2,-16(fp)
 40058a4:	00c00084 	movi	r3,2
 40058a8:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
 40058ac:	e0bffc17 	ldw	r2,-16(fp)
 40058b0:	10c00404 	addi	r3,r2,16
 40058b4:	e0bffc17 	ldw	r2,-16(fp)
 40058b8:	10800204 	addi	r2,r2,8
 40058bc:	100b883a 	mov	r5,r2
 40058c0:	1809883a 	mov	r4,r3
 40058c4:	4004fa40 	call	4004fa4 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 40058c8:	e0bffc17 	ldw	r2,-16(fp)
 40058cc:	00c00044 	movi	r3,1
 40058d0:	10c00c05 	stb	r3,48(r2)
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 40058d4:	e0bffc17 	ldw	r2,-16(fp)
 40058d8:	10800404 	addi	r2,r2,16
 40058dc:	e1bffe17 	ldw	r6,-8(fp)
 40058e0:	e17ffd17 	ldw	r5,-12(fp)
 40058e4:	1009883a 	mov	r4,r2
 40058e8:	40069d00 	call	40069d0 <_ZN20MultiByteValueParser5ParseEPPhPt>
 40058ec:	1080005c 	xori	r2,r2,1
 40058f0:	10803fcc 	andi	r2,r2,255
 40058f4:	10000226 	beq	r2,zero,4005900 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0xd4>
                                return false;
 40058f8:	0005883a 	mov	r2,zero
 40058fc:	0000f206 	br	4005cc8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 4005900:	e0bffc17 	ldw	r2,-16(fp)
 4005904:	10c00217 	ldw	r3,8(r2)
 4005908:	1806d23a 	srli	r3,r3,8
 400590c:	10800317 	ldw	r2,12(r2)
 4005910:	10803fcc 	andi	r2,r2,255
 4005914:	1004963a 	slli	r2,r2,24
 4005918:	10c4b03a 	or	r2,r2,r3
 400591c:	10c00003 	ldbu	r3,0(r2)
 4005920:	e0bffc17 	ldw	r2,-16(fp)
 4005924:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 4005928:	e0bffc17 	ldw	r2,-16(fp)
 400592c:	10c00217 	ldw	r3,8(r2)
 4005930:	1806d23a 	srli	r3,r3,8
 4005934:	10800317 	ldw	r2,12(r2)
 4005938:	10803fcc 	andi	r2,r2,255
 400593c:	1004963a 	slli	r2,r2,24
 4005940:	10c4b03a 	or	r2,r2,r3
 4005944:	10c00043 	ldbu	r3,1(r2)
 4005948:	e0bffc17 	ldw	r2,-16(fp)
 400594c:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
 4005950:	e0bffc17 	ldw	r2,-16(fp)
 4005954:	00c00084 	movi	r3,2
 4005958:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 400595c:	e0bffc17 	ldw	r2,-16(fp)
 4005960:	10800804 	addi	r2,r2,32
 4005964:	10c00084 	addi	r3,r2,2
 4005968:	e0bffc17 	ldw	r2,-16(fp)
 400596c:	19803fcc 	andi	r6,r3,255
 4005970:	11000243 	ldbu	r4,9(r2)
 4005974:	2008703a 	and	r4,r4,zero
 4005978:	200b883a 	mov	r5,r4
 400597c:	3009883a 	mov	r4,r6
 4005980:	2908b03a 	or	r4,r5,r4
 4005984:	11000245 	stb	r4,9(r2)
 4005988:	1808d23a 	srli	r4,r3,8
 400598c:	21803fcc 	andi	r6,r4,255
 4005990:	11000283 	ldbu	r4,10(r2)
 4005994:	2008703a 	and	r4,r4,zero
 4005998:	200b883a 	mov	r5,r4
 400599c:	3009883a 	mov	r4,r6
 40059a0:	2908b03a 	or	r4,r5,r4
 40059a4:	11000285 	stb	r4,10(r2)
 40059a8:	1808d43a 	srli	r4,r3,16
 40059ac:	21803fcc 	andi	r6,r4,255
 40059b0:	110002c3 	ldbu	r4,11(r2)
 40059b4:	2008703a 	and	r4,r4,zero
 40059b8:	200b883a 	mov	r5,r4
 40059bc:	3009883a 	mov	r4,r6
 40059c0:	2908b03a 	or	r4,r5,r4
 40059c4:	110002c5 	stb	r4,11(r2)
 40059c8:	180ad63a 	srli	r5,r3,24
 40059cc:	10c00303 	ldbu	r3,12(r2)
 40059d0:	1806703a 	and	r3,r3,zero
 40059d4:	1809883a 	mov	r4,r3
 40059d8:	2807883a 	mov	r3,r5
 40059dc:	20c6b03a 	or	r3,r4,r3
 40059e0:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
 40059e4:	e0bffc17 	ldw	r2,-16(fp)
 40059e8:	00c000c4 	movi	r3,3
 40059ec:	10c00c05 	stb	r3,48(r2)
                case 3:
                        switch(dscrType) {
 40059f0:	e0bffc17 	ldw	r2,-16(fp)
 40059f4:	10800c83 	ldbu	r2,50(r2)
 40059f8:	10803fcc 	andi	r2,r2,255
 40059fc:	10c00120 	cmpeqi	r3,r2,4
 4005a00:	1800021e 	bne	r3,zero,4005a0c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1e0>
 4005a04:	10800148 	cmpgei	r2,r2,5
 4005a08:	00000306 	br	4005a18 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 4005a0c:	e0bffc17 	ldw	r2,-16(fp)
 4005a10:	10000cc5 	stb	zero,51(r2)
                                        break;
 4005a14:	00000106 	br	4005a1c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
 4005a18:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
 4005a1c:	e0bffc17 	ldw	r2,-16(fp)
 4005a20:	10800c43 	ldbu	r2,49(r2)
 4005a24:	10bfff84 	addi	r2,r2,-2
 4005a28:	1007883a 	mov	r3,r2
 4005a2c:	e0bffc17 	ldw	r2,-16(fp)
 4005a30:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
 4005a34:	e0bffc17 	ldw	r2,-16(fp)
 4005a38:	10c00404 	addi	r3,r2,16
 4005a3c:	e0bffc17 	ldw	r2,-16(fp)
 4005a40:	10800204 	addi	r2,r2,8
 4005a44:	100b883a 	mov	r5,r2
 4005a48:	1809883a 	mov	r4,r3
 4005a4c:	4004fa40 	call	4004fa4 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 4005a50:	e0bffc17 	ldw	r2,-16(fp)
 4005a54:	00c00104 	movi	r3,4
 4005a58:	10c00c05 	stb	r3,48(r2)
                case 4:
                        switch(dscrType) {
 4005a5c:	e0bffc17 	ldw	r2,-16(fp)
 4005a60:	10800c83 	ldbu	r2,50(r2)
 4005a64:	10803fcc 	andi	r2,r2,255
 4005a68:	10c00120 	cmpeqi	r3,r2,4
 4005a6c:	1800141e 	bne	r3,zero,4005ac0 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x294>
 4005a70:	10c00160 	cmpeqi	r3,r2,5
 4005a74:	1800311e 	bne	r3,zero,4005b3c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x310>
 4005a78:	108000a0 	cmpeqi	r2,r2,2
 4005a7c:	10005a26 	beq	r2,zero,4005be8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x3bc>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 4005a80:	e0bffc17 	ldw	r2,-16(fp)
 4005a84:	10800404 	addi	r2,r2,16
 4005a88:	e1bffe17 	ldw	r6,-8(fp)
 4005a8c:	e17ffd17 	ldw	r5,-12(fp)
 4005a90:	1009883a 	mov	r4,r2
 4005a94:	40069d00 	call	40069d0 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4005a98:	1080005c 	xori	r2,r2,1
 4005a9c:	10803fcc 	andi	r2,r2,255
 4005aa0:	10000226 	beq	r2,zero,4005aac <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x280>
                                                return false;
 4005aa4:	0005883a 	mov	r2,zero
 4005aa8:	00008706 	br	4005cc8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        confValue = ucd->bConfigurationValue;
 4005aac:	e0bffa17 	ldw	r2,-24(fp)
 4005ab0:	10c00143 	ldbu	r3,5(r2)
 4005ab4:	e0bffc17 	ldw	r2,-16(fp)
 4005ab8:	10c00d05 	stb	r3,52(r2)
                                        break;
 4005abc:	00005e06 	br	4005c38 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 4005ac0:	e0bffc17 	ldw	r2,-16(fp)
 4005ac4:	10800404 	addi	r2,r2,16
 4005ac8:	e1bffe17 	ldw	r6,-8(fp)
 4005acc:	e17ffd17 	ldw	r5,-12(fp)
 4005ad0:	1009883a 	mov	r4,r2
 4005ad4:	40069d00 	call	40069d0 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4005ad8:	1080005c 	xori	r2,r2,1
 4005adc:	10803fcc 	andi	r2,r2,255
 4005ae0:	10000226 	beq	r2,zero,4005aec <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
 4005ae4:	0005883a 	mov	r2,zero
 4005ae8:	00007706 	br	4005cc8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
 4005aec:	e0bffc17 	ldw	r2,-16(fp)
 4005af0:	10800e03 	ldbu	r2,56(r2)
 4005af4:	10803fcc 	andi	r2,r2,255
 4005af8:	10004c1e 	bne	r2,zero,4005c2c <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x400>
                                                        break;
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
                                                        break;
                                        }
                                        isGoodInterface = true;
 4005afc:	e0bffc17 	ldw	r2,-16(fp)
 4005b00:	00c00044 	movi	r3,1
 4005b04:	10c00cc5 	stb	r3,51(r2)
                                        ifaceNumber = uid->bInterfaceNumber;
 4005b08:	e0bffb17 	ldw	r2,-20(fp)
 4005b0c:	10c00083 	ldbu	r3,2(r2)
 4005b10:	e0bffc17 	ldw	r2,-16(fp)
 4005b14:	10c00d85 	stb	r3,54(r2)
                                        ifaceAltSet = uid->bAlternateSetting;
 4005b18:	e0bffb17 	ldw	r2,-20(fp)
 4005b1c:	10c000c3 	ldbu	r3,3(r2)
 4005b20:	e0bffc17 	ldw	r2,-16(fp)
 4005b24:	10c00dc5 	stb	r3,55(r2)
                                        protoValue = uid->bInterfaceProtocol;
 4005b28:	e0bffb17 	ldw	r2,-20(fp)
 4005b2c:	10c001c3 	ldbu	r3,7(r2)
 4005b30:	e0bffc17 	ldw	r2,-16(fp)
 4005b34:	10c00d45 	stb	r3,53(r2)
                                        break;
 4005b38:	00003f06 	br	4005c38 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 4005b3c:	e0bffc17 	ldw	r2,-16(fp)
 4005b40:	10800404 	addi	r2,r2,16
 4005b44:	e1bffe17 	ldw	r6,-8(fp)
 4005b48:	e17ffd17 	ldw	r5,-12(fp)
 4005b4c:	1009883a 	mov	r4,r2
 4005b50:	40069d00 	call	40069d0 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4005b54:	1080005c 	xori	r2,r2,1
 4005b58:	10803fcc 	andi	r2,r2,255
 4005b5c:	10000226 	beq	r2,zero,4005b68 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x33c>
                                                return false;
 4005b60:	0005883a 	mov	r2,zero
 4005b64:	00005806 	br	4005cc8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                        if(isGoodInterface)
 4005b68:	e0bffc17 	ldw	r2,-16(fp)
 4005b6c:	10800cc3 	ldbu	r2,51(r2)
 4005b70:	10803fcc 	andi	r2,r2,255
 4005b74:	10002f26 	beq	r2,zero,4005c34 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                if(theXtractor)
 4005b78:	e0bffc17 	ldw	r2,-16(fp)
 4005b7c:	10800117 	ldw	r2,4(r2)
 4005b80:	10002c26 	beq	r2,zero,4005c34 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 4005b84:	e0bffc17 	ldw	r2,-16(fp)
 4005b88:	10800117 	ldw	r2,4(r2)
 4005b8c:	10800017 	ldw	r2,0(r2)
 4005b90:	10800017 	ldw	r2,0(r2)
 4005b94:	e0fffc17 	ldw	r3,-16(fp)
 4005b98:	1a000117 	ldw	r8,4(r3)
 4005b9c:	e0fffc17 	ldw	r3,-16(fp)
 4005ba0:	18c00d03 	ldbu	r3,52(r3)
 4005ba4:	19403fcc 	andi	r5,r3,255
 4005ba8:	e0fffc17 	ldw	r3,-16(fp)
 4005bac:	18c00d83 	ldbu	r3,54(r3)
 4005bb0:	19803fcc 	andi	r6,r3,255
 4005bb4:	e0fffc17 	ldw	r3,-16(fp)
 4005bb8:	18c00dc3 	ldbu	r3,55(r3)
 4005bbc:	19c03fcc 	andi	r7,r3,255
 4005bc0:	e0fffc17 	ldw	r3,-16(fp)
 4005bc4:	18c00d43 	ldbu	r3,53(r3)
 4005bc8:	18c03fcc 	andi	r3,r3,255
 4005bcc:	e13ffc17 	ldw	r4,-16(fp)
 4005bd0:	21000804 	addi	r4,r4,32
 4005bd4:	d9000115 	stw	r4,4(sp)
 4005bd8:	d8c00015 	stw	r3,0(sp)
 4005bdc:	4009883a 	mov	r4,r8
 4005be0:	103ee83a 	callr	r2
                                        break;
 4005be4:	00001306 	br	4005c34 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x408>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 4005be8:	e0bffc17 	ldw	r2,-16(fp)
 4005bec:	10c00604 	addi	r3,r2,24
 4005bf0:	e0bffc17 	ldw	r2,-16(fp)
 4005bf4:	10800c43 	ldbu	r2,49(r2)
 4005bf8:	10803fcc 	andi	r2,r2,255
 4005bfc:	10bfff84 	addi	r2,r2,-2
 4005c00:	10bfffcc 	andi	r2,r2,65535
 4005c04:	100f883a 	mov	r7,r2
 4005c08:	e1bffe17 	ldw	r6,-8(fp)
 4005c0c:	e17ffd17 	ldw	r5,-12(fp)
 4005c10:	1809883a 	mov	r4,r3
 4005c14:	40050c80 	call	40050c8 <_ZN11ByteSkipper4SkipEPPhPtt>
 4005c18:	1080005c 	xori	r2,r2,1
 4005c1c:	10803fcc 	andi	r2,r2,255
 4005c20:	10000526 	beq	r2,zero,4005c38 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                                return false;
 4005c24:	0005883a 	mov	r2,zero
 4005c28:	00002706 	br	4005cc8 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x49c>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
                                                break;
                                        if(UseOr) {
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
                                                        break;
 4005c2c:	0001883a 	nop
 4005c30:	00000106 	br	4005c38 <_ZN16ConfigDescParserILh0ELh0ELh0ELh0EE15ParseDescriptorEPPhPt+0x40c>
                                        if(!valParser.Parse(pp, pcntdn))
                                                return false;
                                        if(isGoodInterface)
                                                if(theXtractor)
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
                                        break;
 4005c34:	0001883a 	nop
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
 4005c38:	e0bffc17 	ldw	r2,-16(fp)
 4005c3c:	10c00804 	addi	r3,r2,32
 4005c40:	e0bffc17 	ldw	r2,-16(fp)
 4005c44:	19803fcc 	andi	r6,r3,255
 4005c48:	11000243 	ldbu	r4,9(r2)
 4005c4c:	2008703a 	and	r4,r4,zero
 4005c50:	200b883a 	mov	r5,r4
 4005c54:	3009883a 	mov	r4,r6
 4005c58:	2908b03a 	or	r4,r5,r4
 4005c5c:	11000245 	stb	r4,9(r2)
 4005c60:	1808d23a 	srli	r4,r3,8
 4005c64:	21803fcc 	andi	r6,r4,255
 4005c68:	11000283 	ldbu	r4,10(r2)
 4005c6c:	2008703a 	and	r4,r4,zero
 4005c70:	200b883a 	mov	r5,r4
 4005c74:	3009883a 	mov	r4,r6
 4005c78:	2908b03a 	or	r4,r5,r4
 4005c7c:	11000285 	stb	r4,10(r2)
 4005c80:	1808d43a 	srli	r4,r3,16
 4005c84:	21803fcc 	andi	r6,r4,255
 4005c88:	110002c3 	ldbu	r4,11(r2)
 4005c8c:	2008703a 	and	r4,r4,zero
 4005c90:	200b883a 	mov	r5,r4
 4005c94:	3009883a 	mov	r4,r6
 4005c98:	2908b03a 	or	r4,r5,r4
 4005c9c:	110002c5 	stb	r4,11(r2)
 4005ca0:	180ad63a 	srli	r5,r3,24
 4005ca4:	10c00303 	ldbu	r3,12(r2)
 4005ca8:	1806703a 	and	r3,r3,zero
 4005cac:	1809883a 	mov	r4,r3
 4005cb0:	2807883a 	mov	r3,r5
 4005cb4:	20c6b03a 	or	r3,r4,r3
 4005cb8:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
 4005cbc:	e0bffc17 	ldw	r2,-16(fp)
 4005cc0:	10000c05 	stb	zero,48(r2)
        }
        return true;
 4005cc4:	00800044 	movi	r2,1
}
 4005cc8:	e037883a 	mov	sp,fp
 4005ccc:	dfc00117 	ldw	ra,4(sp)
 4005cd0:	df000017 	ldw	fp,0(sp)
 4005cd4:	dec00204 	addi	sp,sp,8
 4005cd8:	f800283a 	ret

04005cdc <_ZN17MouseReportParser5ParseEP6USBHIDbhPh>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "hidboot.h"

void MouseReportParser::Parse(USBHID *hid __attribute__((unused)), bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
 4005cdc:	defff904 	addi	sp,sp,-28
 4005ce0:	dfc00615 	stw	ra,24(sp)
 4005ce4:	df000515 	stw	fp,20(sp)
 4005ce8:	df000504 	addi	fp,sp,20
 4005cec:	e13ffc15 	stw	r4,-16(fp)
 4005cf0:	e17ffd15 	stw	r5,-12(fp)
 4005cf4:	3007883a 	mov	r3,r6
 4005cf8:	3805883a 	mov	r2,r7
 4005cfc:	e0fffe05 	stb	r3,-8(fp)
 4005d00:	e0bfff05 	stb	r2,-4(fp)
        MOUSEINFO *pmi = (MOUSEINFO*)buf;
 4005d04:	e0800217 	ldw	r2,8(fp)
 4005d08:	e0bffb15 	stw	r2,-20(fp)
        // sketch could already have noted these facts to support drag/drop scroll wheel stuff, etc.
        //

        // Why do we need to pass the structure for buttons?
        // The function call not enough of a hint for what is happening?
        if(prevState.mouseInfo.bmLeftButton != pmi->bmLeftButton ) {
 4005d0c:	e0bffc17 	ldw	r2,-16(fp)
 4005d10:	10800117 	ldw	r2,4(r2)
 4005d14:	1080004c 	andi	r2,r2,1
 4005d18:	1007883a 	mov	r3,r2
 4005d1c:	e0bffb17 	ldw	r2,-20(fp)
 4005d20:	10800003 	ldbu	r2,0(r2)
 4005d24:	1080004c 	andi	r2,r2,1
 4005d28:	18c03fcc 	andi	r3,r3,255
 4005d2c:	10803fcc 	andi	r2,r2,255
 4005d30:	18801426 	beq	r3,r2,4005d84 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                if(pmi->bmLeftButton) {
 4005d34:	e0bffb17 	ldw	r2,-20(fp)
 4005d38:	10800003 	ldbu	r2,0(r2)
 4005d3c:	1080004c 	andi	r2,r2,1
 4005d40:	10803fcc 	andi	r2,r2,255
 4005d44:	10000826 	beq	r2,zero,4005d68 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x8c>
                        OnLeftButtonDown(pmi);
 4005d48:	e0bffc17 	ldw	r2,-16(fp)
 4005d4c:	10800017 	ldw	r2,0(r2)
 4005d50:	10800304 	addi	r2,r2,12
 4005d54:	10800017 	ldw	r2,0(r2)
 4005d58:	e17ffb17 	ldw	r5,-20(fp)
 4005d5c:	e13ffc17 	ldw	r4,-16(fp)
 4005d60:	103ee83a 	callr	r2
 4005d64:	00000706 	br	4005d84 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0xa8>
                } else {
                        OnLeftButtonUp(pmi);
 4005d68:	e0bffc17 	ldw	r2,-16(fp)
 4005d6c:	10800017 	ldw	r2,0(r2)
 4005d70:	10800204 	addi	r2,r2,8
 4005d74:	10800017 	ldw	r2,0(r2)
 4005d78:	e17ffb17 	ldw	r5,-20(fp)
 4005d7c:	e13ffc17 	ldw	r4,-16(fp)
 4005d80:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmRightButton != pmi->bmRightButton) {
 4005d84:	e0bffc17 	ldw	r2,-16(fp)
 4005d88:	10800117 	ldw	r2,4(r2)
 4005d8c:	1004d07a 	srli	r2,r2,1
 4005d90:	1080004c 	andi	r2,r2,1
 4005d94:	1007883a 	mov	r3,r2
 4005d98:	e0bffb17 	ldw	r2,-20(fp)
 4005d9c:	10800003 	ldbu	r2,0(r2)
 4005da0:	1004d07a 	srli	r2,r2,1
 4005da4:	1080004c 	andi	r2,r2,1
 4005da8:	18c03fcc 	andi	r3,r3,255
 4005dac:	10803fcc 	andi	r2,r2,255
 4005db0:	18801426 	beq	r3,r2,4005e04 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                if(pmi->bmRightButton) {
 4005db4:	e0bffb17 	ldw	r2,-20(fp)
 4005db8:	10800003 	ldbu	r2,0(r2)
 4005dbc:	1080008c 	andi	r2,r2,2
 4005dc0:	10803fcc 	andi	r2,r2,255
 4005dc4:	10000826 	beq	r2,zero,4005de8 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x10c>
                        OnRightButtonDown(pmi);
 4005dc8:	e0bffc17 	ldw	r2,-16(fp)
 4005dcc:	10800017 	ldw	r2,0(r2)
 4005dd0:	10800504 	addi	r2,r2,20
 4005dd4:	10800017 	ldw	r2,0(r2)
 4005dd8:	e17ffb17 	ldw	r5,-20(fp)
 4005ddc:	e13ffc17 	ldw	r4,-16(fp)
 4005de0:	103ee83a 	callr	r2
 4005de4:	00000706 	br	4005e04 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x128>
                } else {
                        OnRightButtonUp(pmi);
 4005de8:	e0bffc17 	ldw	r2,-16(fp)
 4005dec:	10800017 	ldw	r2,0(r2)
 4005df0:	10800404 	addi	r2,r2,16
 4005df4:	10800017 	ldw	r2,0(r2)
 4005df8:	e17ffb17 	ldw	r5,-20(fp)
 4005dfc:	e13ffc17 	ldw	r4,-16(fp)
 4005e00:	103ee83a 	callr	r2
                }
                // Future:
                // event = true;
        }

        if(prevState.mouseInfo.bmMiddleButton != pmi->bmMiddleButton) {
 4005e04:	e0bffc17 	ldw	r2,-16(fp)
 4005e08:	10800117 	ldw	r2,4(r2)
 4005e0c:	1004d0ba 	srli	r2,r2,2
 4005e10:	1080004c 	andi	r2,r2,1
 4005e14:	1007883a 	mov	r3,r2
 4005e18:	e0bffb17 	ldw	r2,-20(fp)
 4005e1c:	10800003 	ldbu	r2,0(r2)
 4005e20:	1004d0ba 	srli	r2,r2,2
 4005e24:	1080004c 	andi	r2,r2,1
 4005e28:	18c03fcc 	andi	r3,r3,255
 4005e2c:	10803fcc 	andi	r2,r2,255
 4005e30:	18801426 	beq	r3,r2,4005e84 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                if(pmi->bmMiddleButton) {
 4005e34:	e0bffb17 	ldw	r2,-20(fp)
 4005e38:	10800003 	ldbu	r2,0(r2)
 4005e3c:	1080010c 	andi	r2,r2,4
 4005e40:	10803fcc 	andi	r2,r2,255
 4005e44:	10000826 	beq	r2,zero,4005e68 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x18c>
                        OnMiddleButtonDown(pmi);
 4005e48:	e0bffc17 	ldw	r2,-16(fp)
 4005e4c:	10800017 	ldw	r2,0(r2)
 4005e50:	10800704 	addi	r2,r2,28
 4005e54:	10800017 	ldw	r2,0(r2)
 4005e58:	e17ffb17 	ldw	r5,-20(fp)
 4005e5c:	e13ffc17 	ldw	r4,-16(fp)
 4005e60:	103ee83a 	callr	r2
 4005e64:	00000706 	br	4005e84 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1a8>
                } else {
                        OnMiddleButtonUp(pmi);
 4005e68:	e0bffc17 	ldw	r2,-16(fp)
 4005e6c:	10800017 	ldw	r2,0(r2)
 4005e70:	10800604 	addi	r2,r2,24
 4005e74:	10800017 	ldw	r2,0(r2)
 4005e78:	e17ffb17 	ldw	r5,-20(fp)
 4005e7c:	e13ffc17 	ldw	r4,-16(fp)
 4005e80:	103ee83a 	callr	r2
        //}
        //

        // Mice only report motion when they actually move!
        // Why not just pass the x/y values to simplify things??
        if(pmi->dX || pmi->dY) {
 4005e84:	e0bffb17 	ldw	r2,-20(fp)
 4005e88:	10800043 	ldbu	r2,1(r2)
 4005e8c:	10803fcc 	andi	r2,r2,255
 4005e90:	1080201c 	xori	r2,r2,128
 4005e94:	10bfe004 	addi	r2,r2,-128
 4005e98:	1000061e 	bne	r2,zero,4005eb4 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1d8>
 4005e9c:	e0bffb17 	ldw	r2,-20(fp)
 4005ea0:	10800083 	ldbu	r2,2(r2)
 4005ea4:	10803fcc 	andi	r2,r2,255
 4005ea8:	1080201c 	xori	r2,r2,128
 4005eac:	10bfe004 	addi	r2,r2,-128
 4005eb0:	10000726 	beq	r2,zero,4005ed0 <_ZN17MouseReportParser5ParseEP6USBHIDbhPh+0x1f4>
                OnMouseMove(pmi);
 4005eb4:	e0bffc17 	ldw	r2,-16(fp)
 4005eb8:	10800017 	ldw	r2,0(r2)
 4005ebc:	10800104 	addi	r2,r2,4
 4005ec0:	10800017 	ldw	r2,0(r2)
 4005ec4:	e17ffb17 	ldw	r5,-20(fp)
 4005ec8:	e13ffc17 	ldw	r4,-16(fp)
 4005ecc:	103ee83a 	callr	r2
        //
        // if(event) OnMouse();
        //

        // Only the first byte matters (buttons). We do NOT need to save position info.
        prevState.bInfo[0] = buf[0];
 4005ed0:	e0800217 	ldw	r2,8(fp)
 4005ed4:	10c00003 	ldbu	r3,0(r2)
 4005ed8:	e0bffc17 	ldw	r2,-16(fp)
 4005edc:	10c00105 	stb	r3,4(r2)
#endif

};
 4005ee0:	0001883a 	nop
 4005ee4:	e037883a 	mov	sp,fp
 4005ee8:	dfc00117 	ldw	ra,4(sp)
 4005eec:	df000017 	ldw	fp,0(sp)
 4005ef0:	dec00204 	addi	sp,sp,8
 4005ef4:	f800283a 	ret

04005ef8 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh>:

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
 4005ef8:	defff804 	addi	sp,sp,-32
 4005efc:	dfc00715 	stw	ra,28(sp)
 4005f00:	df000615 	stw	fp,24(sp)
 4005f04:	df000604 	addi	fp,sp,24
 4005f08:	e13ffc15 	stw	r4,-16(fp)
 4005f0c:	e17ffd15 	stw	r5,-12(fp)
 4005f10:	3007883a 	mov	r3,r6
 4005f14:	3805883a 	mov	r2,r7
 4005f18:	e0fffe05 	stb	r3,-8(fp)
 4005f1c:	e0bfff05 	stb	r2,-4(fp)
        // On error - return
        if (buf[2] == 1)
 4005f20:	e0800217 	ldw	r2,8(fp)
 4005f24:	10800084 	addi	r2,r2,2
 4005f28:	10800003 	ldbu	r2,0(r2)
 4005f2c:	10803fcc 	andi	r2,r2,255
 4005f30:	10800058 	cmpnei	r2,r2,1
 4005f34:	10009926 	beq	r2,zero,400619c <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a4>
                return;

        //KBDINFO       *pki = (KBDINFO*)buf;

        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
 4005f38:	e0bffc17 	ldw	r2,-16(fp)
 4005f3c:	10c00103 	ldbu	r3,4(r2)
 4005f40:	e0800217 	ldw	r2,8(fp)
 4005f44:	10800003 	ldbu	r2,0(r2)
 4005f48:	18c03fcc 	andi	r3,r3,255
 4005f4c:	10803fcc 	andi	r2,r2,255
 4005f50:	18800e26 	beq	r3,r2,4005f8c <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x94>
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
 4005f54:	e0bffc17 	ldw	r2,-16(fp)
 4005f58:	10800017 	ldw	r2,0(r2)
 4005f5c:	10800204 	addi	r2,r2,8
 4005f60:	10800017 	ldw	r2,0(r2)
 4005f64:	e0fffc17 	ldw	r3,-16(fp)
 4005f68:	18c00103 	ldbu	r3,4(r3)
 4005f6c:	19003fcc 	andi	r4,r3,255
 4005f70:	e0c00217 	ldw	r3,8(fp)
 4005f74:	18c00003 	ldbu	r3,0(r3)
 4005f78:	18c03fcc 	andi	r3,r3,255
 4005f7c:	180d883a 	mov	r6,r3
 4005f80:	200b883a 	mov	r5,r4
 4005f84:	e13ffc17 	ldw	r4,-16(fp)
 4005f88:	103ee83a 	callr	r2
        }

        for (uint8_t i = 2; i < 8; i++) {
 4005f8c:	00800084 	movi	r2,2
 4005f90:	e0bffa05 	stb	r2,-24(fp)
 4005f94:	e0bffa03 	ldbu	r2,-24(fp)
 4005f98:	10800228 	cmpgeui	r2,r2,8
 4005f9c:	10006e1e 	bne	r2,zero,4006158 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x260>
                bool down = false;
 4005fa0:	e03ffa45 	stb	zero,-23(fp)
                bool up = false;
 4005fa4:	e03ffa85 	stb	zero,-22(fp)

                for (uint8_t j = 2; j < 8; j++) {
 4005fa8:	00800084 	movi	r2,2
 4005fac:	e0bffac5 	stb	r2,-21(fp)
 4005fb0:	e0bffac3 	ldbu	r2,-21(fp)
 4005fb4:	10800228 	cmpgeui	r2,r2,8
 4005fb8:	10002f1e 	bne	r2,zero,4006078 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x180>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
 4005fbc:	e0bffa03 	ldbu	r2,-24(fp)
 4005fc0:	e0c00217 	ldw	r3,8(fp)
 4005fc4:	1885883a 	add	r2,r3,r2
 4005fc8:	11000003 	ldbu	r4,0(r2)
 4005fcc:	e0bffac3 	ldbu	r2,-21(fp)
 4005fd0:	e0fffc17 	ldw	r3,-16(fp)
 4005fd4:	1885883a 	add	r2,r3,r2
 4005fd8:	10800104 	addi	r2,r2,4
 4005fdc:	10800003 	ldbu	r2,0(r2)
 4005fe0:	20c03fcc 	andi	r3,r4,255
 4005fe4:	10803fcc 	andi	r2,r2,255
 4005fe8:	1880091e 	bne	r3,r2,4006010 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
 4005fec:	e0bffa03 	ldbu	r2,-24(fp)
 4005ff0:	e0c00217 	ldw	r3,8(fp)
 4005ff4:	1885883a 	add	r2,r3,r2
 4005ff8:	10800003 	ldbu	r2,0(r2)
 4005ffc:	10803fcc 	andi	r2,r2,255
 4006000:	10800060 	cmpeqi	r2,r2,1
 4006004:	1000021e 	bne	r2,zero,4006010 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x118>
                                down = true;
 4006008:	00800044 	movi	r2,1
 400600c:	e0bffa45 	stb	r2,-23(fp)
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
 4006010:	e0bffac3 	ldbu	r2,-21(fp)
 4006014:	e0c00217 	ldw	r3,8(fp)
 4006018:	1885883a 	add	r2,r3,r2
 400601c:	11000003 	ldbu	r4,0(r2)
 4006020:	e0bffa03 	ldbu	r2,-24(fp)
 4006024:	e0fffc17 	ldw	r3,-16(fp)
 4006028:	1885883a 	add	r2,r3,r2
 400602c:	10800104 	addi	r2,r2,4
 4006030:	10800003 	ldbu	r2,0(r2)
 4006034:	20c03fcc 	andi	r3,r4,255
 4006038:	10803fcc 	andi	r2,r2,255
 400603c:	18800a1e 	bne	r3,r2,4006068 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
 4006040:	e0bffa03 	ldbu	r2,-24(fp)
 4006044:	e0fffc17 	ldw	r3,-16(fp)
 4006048:	1885883a 	add	r2,r3,r2
 400604c:	10800104 	addi	r2,r2,4
 4006050:	10800003 	ldbu	r2,0(r2)
 4006054:	10803fcc 	andi	r2,r2,255
 4006058:	10800060 	cmpeqi	r2,r2,1
 400605c:	1000021e 	bne	r2,zero,4006068 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x170>
                                up = true;
 4006060:	00800044 	movi	r2,1
 4006064:	e0bffa85 	stb	r2,-22(fp)

        for (uint8_t i = 2; i < 8; i++) {
                bool down = false;
                bool up = false;

                for (uint8_t j = 2; j < 8; j++) {
 4006068:	e0bffac3 	ldbu	r2,-21(fp)
 400606c:	10800044 	addi	r2,r2,1
 4006070:	e0bffac5 	stb	r2,-21(fp)
 4006074:	003fce06 	br	4005fb0 <__alt_data_end+0xfc005fb0>
                        if (buf[i] == prevState.bInfo[j] && buf[i] != 1)
                                down = true;
                        if (buf[j] == prevState.bInfo[i] && prevState.bInfo[i] != 1)
                                up = true;
                }
                if (!down) {
 4006078:	e0bffa43 	ldbu	r2,-23(fp)
 400607c:	1080005c 	xori	r2,r2,1
 4006080:	10803fcc 	andi	r2,r2,255
 4006084:	10001c26 	beq	r2,zero,40060f8 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x200>
                        HandleLockingKeys(hid, buf[i]);
 4006088:	e0bffc17 	ldw	r2,-16(fp)
 400608c:	10800017 	ldw	r2,0(r2)
 4006090:	10800104 	addi	r2,r2,4
 4006094:	10800017 	ldw	r2,0(r2)
 4006098:	e0fffa03 	ldbu	r3,-24(fp)
 400609c:	e1000217 	ldw	r4,8(fp)
 40060a0:	20c7883a 	add	r3,r4,r3
 40060a4:	18c00003 	ldbu	r3,0(r3)
 40060a8:	18c03fcc 	andi	r3,r3,255
 40060ac:	180d883a 	mov	r6,r3
 40060b0:	e17ffd17 	ldw	r5,-12(fp)
 40060b4:	e13ffc17 	ldw	r4,-16(fp)
 40060b8:	103ee83a 	callr	r2
                        OnKeyDown(*buf, buf[i]);
 40060bc:	e0bffc17 	ldw	r2,-16(fp)
 40060c0:	10800017 	ldw	r2,0(r2)
 40060c4:	10800304 	addi	r2,r2,12
 40060c8:	10800017 	ldw	r2,0(r2)
 40060cc:	e0c00217 	ldw	r3,8(fp)
 40060d0:	18c00003 	ldbu	r3,0(r3)
 40060d4:	19403fcc 	andi	r5,r3,255
 40060d8:	e0fffa03 	ldbu	r3,-24(fp)
 40060dc:	e1000217 	ldw	r4,8(fp)
 40060e0:	20c7883a 	add	r3,r4,r3
 40060e4:	18c00003 	ldbu	r3,0(r3)
 40060e8:	18c03fcc 	andi	r3,r3,255
 40060ec:	180d883a 	mov	r6,r3
 40060f0:	e13ffc17 	ldw	r4,-16(fp)
 40060f4:	103ee83a 	callr	r2
                }
                if (!up)
 40060f8:	e0bffa83 	ldbu	r2,-22(fp)
 40060fc:	1080005c 	xori	r2,r2,1
 4006100:	10803fcc 	andi	r2,r2,255
 4006104:	10001026 	beq	r2,zero,4006148 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x250>
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
 4006108:	e0bffc17 	ldw	r2,-16(fp)
 400610c:	10800017 	ldw	r2,0(r2)
 4006110:	10800404 	addi	r2,r2,16
 4006114:	10800017 	ldw	r2,0(r2)
 4006118:	e0fffc17 	ldw	r3,-16(fp)
 400611c:	18c00103 	ldbu	r3,4(r3)
 4006120:	19403fcc 	andi	r5,r3,255
 4006124:	e0fffa03 	ldbu	r3,-24(fp)
 4006128:	e13ffc17 	ldw	r4,-16(fp)
 400612c:	20c7883a 	add	r3,r4,r3
 4006130:	18c00104 	addi	r3,r3,4
 4006134:	18c00003 	ldbu	r3,0(r3)
 4006138:	18c03fcc 	andi	r3,r3,255
 400613c:	180d883a 	mov	r6,r3
 4006140:	e13ffc17 	ldw	r4,-16(fp)
 4006144:	103ee83a 	callr	r2
        // provide event for changed control key state
        if (prevState.bInfo[0x00] != buf[0x00]) {
                OnControlKeysChanged(prevState.bInfo[0x00], buf[0x00]);
        }

        for (uint8_t i = 2; i < 8; i++) {
 4006148:	e0bffa03 	ldbu	r2,-24(fp)
 400614c:	10800044 	addi	r2,r2,1
 4006150:	e0bffa05 	stb	r2,-24(fp)
 4006154:	003f8f06 	br	4005f94 <__alt_data_end+0xfc005f94>
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
 4006158:	e03ffb05 	stb	zero,-20(fp)
 400615c:	e0bffb03 	ldbu	r2,-20(fp)
 4006160:	10800228 	cmpgeui	r2,r2,8
 4006164:	10000e1e 	bne	r2,zero,40061a0 <_ZN20KeyboardReportParser5ParseEP6USBHIDbhPh+0x2a8>
                prevState.bInfo[i] = buf[i];
 4006168:	e0bffb03 	ldbu	r2,-20(fp)
 400616c:	e0fffb03 	ldbu	r3,-20(fp)
 4006170:	e1000217 	ldw	r4,8(fp)
 4006174:	20c7883a 	add	r3,r4,r3
 4006178:	18c00003 	ldbu	r3,0(r3)
 400617c:	e13ffc17 	ldw	r4,-16(fp)
 4006180:	2085883a 	add	r2,r4,r2
 4006184:	10800104 	addi	r2,r2,4
 4006188:	10c00005 	stb	r3,0(r2)
                        OnKeyDown(*buf, buf[i]);
                }
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
 400618c:	e0bffb03 	ldbu	r2,-20(fp)
 4006190:	10800044 	addi	r2,r2,1
 4006194:	e0bffb05 	stb	r2,-20(fp)
 4006198:	003ff006 	br	400615c <__alt_data_end+0xfc00615c>
};

void KeyboardReportParser::Parse(USBHID *hid, bool is_rpt_id __attribute__((unused)), uint8_t len __attribute__((unused)), uint8_t *buf) {
        // On error - return
        if (buf[2] == 1)
                return;
 400619c:	0001883a 	nop
                if (!up)
                        OnKeyUp(prevState.bInfo[0], prevState.bInfo[i]);
        }
        for (uint8_t i = 0; i < 8; i++)
                prevState.bInfo[i] = buf[i];
};
 40061a0:	e037883a 	mov	sp,fp
 40061a4:	dfc00117 	ldw	ra,4(sp)
 40061a8:	df000017 	ldw	fp,0(sp)
 40061ac:	dec00204 	addi	sp,sp,8
 40061b0:	f800283a 	ret

040061b4 <_ZN20KeyboardReportParser10OemToAsciiEhh>:
const uint8_t KeyboardReportParser::numKeys[10] PROGMEM = {'!', '@', '#', '$', '%', '^', '&', '*', '(', ')'};
const uint8_t KeyboardReportParser::symKeysUp[12] PROGMEM = {'_', '+', '{', '}', '|', '~', ':', '"', '~', '<', '>', '?'};
const uint8_t KeyboardReportParser::symKeysLo[12] PROGMEM = {'-', '=', '[', ']', '\\', ' ', ';', '\'', '`', ',', '.', '/'};
const uint8_t KeyboardReportParser::padKeys[5] PROGMEM = {'/', '*', '-', '+', '\r'};

uint8_t KeyboardReportParser::OemToAscii(uint8_t mod, uint8_t key) {
 40061b4:	defffa04 	addi	sp,sp,-24
 40061b8:	dfc00515 	stw	ra,20(sp)
 40061bc:	df000415 	stw	fp,16(sp)
 40061c0:	df000404 	addi	fp,sp,16
 40061c4:	e13ffd15 	stw	r4,-12(fp)
 40061c8:	2807883a 	mov	r3,r5
 40061cc:	3005883a 	mov	r2,r6
 40061d0:	e0fffe05 	stb	r3,-8(fp)
 40061d4:	e0bfff05 	stb	r2,-4(fp)
        uint8_t shift = (mod & 0x22);
 40061d8:	e0bffe03 	ldbu	r2,-8(fp)
 40061dc:	1080088c 	andi	r2,r2,34
 40061e0:	e0bffc05 	stb	r2,-16(fp)

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
 40061e4:	e0bfff03 	ldbu	r2,-4(fp)
 40061e8:	10800130 	cmpltui	r2,r2,4
 40061ec:	1000151e 	bne	r2,zero,4006244 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
 40061f0:	e0bfff03 	ldbu	r2,-4(fp)
 40061f4:	108007a8 	cmpgeui	r2,r2,30
 40061f8:	1000121e 	bne	r2,zero,4006244 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x90>
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
 40061fc:	e0bffd17 	ldw	r2,-12(fp)
 4006200:	10800317 	ldw	r2,12(r2)
 4006204:	1080008c 	andi	r2,r2,2
 4006208:	1000021e 	bne	r2,zero,4006214 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x60>
 400620c:	e0bffc03 	ldbu	r2,-16(fp)
 4006210:	1000061e 	bne	r2,zero,400622c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x78>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
 4006214:	e0bffd17 	ldw	r2,-12(fp)
 4006218:	10800317 	ldw	r2,12(r2)
 400621c:	1080008c 	andi	r2,r2,2
        uint8_t shift = (mod & 0x22);

        // [a-z]
        if (VALUE_WITHIN(key, 0x04, 0x1d)) {
                // Upper case letters
                if ((kbdLockingKeys.kbdLeds.bmCapsLock == 0 && shift) ||
 4006220:	10000526 	beq	r2,zero,4006238 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        (kbdLockingKeys.kbdLeds.bmCapsLock == 1 && shift == 0))
 4006224:	e0bffc03 	ldbu	r2,-16(fp)
 4006228:	1000031e 	bne	r2,zero,4006238 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x84>
                        return (key - 4 + 'A');
 400622c:	e0bfff03 	ldbu	r2,-4(fp)
 4006230:	10800f44 	addi	r2,r2,61
 4006234:	00008006 	br	4006438 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>

                        // Lower case letters
                else
                        return (key - 4 + 'a');
 4006238:	e0bfff03 	ldbu	r2,-4(fp)
 400623c:	10801744 	addi	r2,r2,93
 4006240:	00007d06 	br	4006438 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Numbers
        else if (VALUE_WITHIN(key, 0x1e, 0x27)) {
 4006244:	e0bfff03 	ldbu	r2,-4(fp)
 4006248:	108007b0 	cmpltui	r2,r2,30
 400624c:	1000191e 	bne	r2,zero,40062b4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
 4006250:	e0bfff03 	ldbu	r2,-4(fp)
 4006254:	10800a28 	cmpgeui	r2,r2,40
 4006258:	1000161e 	bne	r2,zero,40062b4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x100>
                if (shift)
 400625c:	e0bffc03 	ldbu	r2,-16(fp)
 4006260:	10000c26 	beq	r2,zero,4006294 <_ZN20KeyboardReportParser10OemToAsciiEhh+0xe0>
                        return ((uint8_t)pgm_read_byte(&getNumKeys()[key - 0x1e]));
 4006264:	e0bffd17 	ldw	r2,-12(fp)
 4006268:	10800017 	ldw	r2,0(r2)
 400626c:	10800504 	addi	r2,r2,20
 4006270:	10800017 	ldw	r2,0(r2)
 4006274:	e13ffd17 	ldw	r4,-12(fp)
 4006278:	103ee83a 	callr	r2
 400627c:	1007883a 	mov	r3,r2
 4006280:	e0bfff03 	ldbu	r2,-4(fp)
 4006284:	10bff884 	addi	r2,r2,-30
 4006288:	1885883a 	add	r2,r3,r2
 400628c:	10800003 	ldbu	r2,0(r2)
 4006290:	00006906 	br	4006438 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                else
                        return ((key == UHS_HID_BOOT_KEY_ZERO) ? '0' : key - 0x1e + '1');
 4006294:	e0bfff03 	ldbu	r2,-4(fp)
 4006298:	108009e0 	cmpeqi	r2,r2,39
 400629c:	1000031e 	bne	r2,zero,40062ac <_ZN20KeyboardReportParser10OemToAsciiEhh+0xf8>
 40062a0:	e0bfff03 	ldbu	r2,-4(fp)
 40062a4:	108004c4 	addi	r2,r2,19
 40062a8:	00006306 	br	4006438 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
 40062ac:	00800c04 	movi	r2,48
 40062b0:	00006106 	br	4006438 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        }// Keypad Numbers
        else if(VALUE_WITHIN(key, 0x59, 0x61)) {
 40062b4:	e0bfff03 	ldbu	r2,-4(fp)
 40062b8:	10801670 	cmpltui	r2,r2,89
 40062bc:	10000a1e 	bne	r2,zero,40062e8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
 40062c0:	e0bfff03 	ldbu	r2,-4(fp)
 40062c4:	108018a8 	cmpgeui	r2,r2,98
 40062c8:	1000071e 	bne	r2,zero,40062e8 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x134>
                if(kbdLockingKeys.kbdLeds.bmNumLock == 1)
 40062cc:	e0bffd17 	ldw	r2,-12(fp)
 40062d0:	10800317 	ldw	r2,12(r2)
 40062d4:	1080004c 	andi	r2,r2,1
 40062d8:	10005626 	beq	r2,zero,4006434 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        return (key - 0x59 + '1');
 40062dc:	e0bfff03 	ldbu	r2,-4(fp)
 40062e0:	10bff604 	addi	r2,r2,-40
 40062e4:	00005406 	br	4006438 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        } else if(VALUE_WITHIN(key, 0x2d, 0x38))
 40062e8:	e0bfff03 	ldbu	r2,-4(fp)
 40062ec:	10800b70 	cmpltui	r2,r2,45
 40062f0:	10001d1e 	bne	r2,zero,4006368 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
 40062f4:	e0bfff03 	ldbu	r2,-4(fp)
 40062f8:	10800e68 	cmpgeui	r2,r2,57
 40062fc:	10001a1e 	bne	r2,zero,4006368 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1b4>
                return ((shift) ? (uint8_t)pgm_read_byte(&getSymKeysUp()[key - 0x2d]) : (uint8_t)pgm_read_byte(&getSymKeysLo()[key - 0x2d]));
 4006300:	e0bffc03 	ldbu	r2,-16(fp)
 4006304:	10000c26 	beq	r2,zero,4006338 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x184>
 4006308:	e0bffd17 	ldw	r2,-12(fp)
 400630c:	10800017 	ldw	r2,0(r2)
 4006310:	10800604 	addi	r2,r2,24
 4006314:	10800017 	ldw	r2,0(r2)
 4006318:	e13ffd17 	ldw	r4,-12(fp)
 400631c:	103ee83a 	callr	r2
 4006320:	1007883a 	mov	r3,r2
 4006324:	e0bfff03 	ldbu	r2,-4(fp)
 4006328:	10bff4c4 	addi	r2,r2,-45
 400632c:	1885883a 	add	r2,r3,r2
 4006330:	10800003 	ldbu	r2,0(r2)
 4006334:	00004006 	br	4006438 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
 4006338:	e0bffd17 	ldw	r2,-12(fp)
 400633c:	10800017 	ldw	r2,0(r2)
 4006340:	10800704 	addi	r2,r2,28
 4006344:	10800017 	ldw	r2,0(r2)
 4006348:	e13ffd17 	ldw	r4,-12(fp)
 400634c:	103ee83a 	callr	r2
 4006350:	1007883a 	mov	r3,r2
 4006354:	e0bfff03 	ldbu	r2,-4(fp)
 4006358:	10bff4c4 	addi	r2,r2,-45
 400635c:	1885883a 	add	r2,r3,r2
 4006360:	10800003 	ldbu	r2,0(r2)
 4006364:	00003406 	br	4006438 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else if(VALUE_WITHIN(key, 0x54, 0x58))
 4006368:	e0bfff03 	ldbu	r2,-4(fp)
 400636c:	10801530 	cmpltui	r2,r2,84
 4006370:	10000f1e 	bne	r2,zero,40063b0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
 4006374:	e0bfff03 	ldbu	r2,-4(fp)
 4006378:	10801668 	cmpgeui	r2,r2,89
 400637c:	10000c1e 	bne	r2,zero,40063b0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x1fc>
                return (uint8_t)pgm_read_byte(&getPadKeys()[key - 0x54]);
 4006380:	e0bffd17 	ldw	r2,-12(fp)
 4006384:	10800017 	ldw	r2,0(r2)
 4006388:	10800804 	addi	r2,r2,32
 400638c:	10800017 	ldw	r2,0(r2)
 4006390:	e13ffd17 	ldw	r4,-12(fp)
 4006394:	103ee83a 	callr	r2
 4006398:	1007883a 	mov	r3,r2
 400639c:	e0bfff03 	ldbu	r2,-4(fp)
 40063a0:	10bfeb04 	addi	r2,r2,-84
 40063a4:	1885883a 	add	r2,r3,r2
 40063a8:	10800003 	ldbu	r2,0(r2)
 40063ac:	00002206 	br	4006438 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
        else {
                switch(key) {
 40063b0:	e0bfff03 	ldbu	r2,-4(fp)
 40063b4:	10c00b20 	cmpeqi	r3,r2,44
 40063b8:	18000a1e 	bne	r3,zero,40063e4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x230>
 40063bc:	10c00b48 	cmpgei	r3,r2,45
 40063c0:	1800031e 	bne	r3,zero,40063d0 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x21c>
 40063c4:	10800a20 	cmpeqi	r2,r2,40
 40063c8:	1000081e 	bne	r2,zero,40063ec <_ZN20KeyboardReportParser10OemToAsciiEhh+0x238>
 40063cc:	00001906 	br	4006434 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
 40063d0:	10c018a0 	cmpeqi	r3,r2,98
 40063d4:	1800071e 	bne	r3,zero,40063f4 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x240>
 40063d8:	108018e0 	cmpeqi	r2,r2,99
 40063dc:	10000d1e 	bne	r2,zero,4006414 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x260>
 40063e0:	00001406 	br	4006434 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x280>
                        case UHS_HID_BOOT_KEY_SPACE: return (0x20);
 40063e4:	00800804 	movi	r2,32
 40063e8:	00001306 	br	4006438 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ENTER: return ('\r'); // Carriage return (0x0D)
 40063ec:	00800344 	movi	r2,13
 40063f0:	00001106 	br	4006438 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_ZERO2: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '0': 0);
 40063f4:	e0bffd17 	ldw	r2,-12(fp)
 40063f8:	10800317 	ldw	r2,12(r2)
 40063fc:	1080004c 	andi	r2,r2,1
 4006400:	10000226 	beq	r2,zero,400640c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x258>
 4006404:	00800c04 	movi	r2,48
 4006408:	00000b06 	br	4006438 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
 400640c:	0005883a 	mov	r2,zero
 4006410:	00000906 	br	4006438 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                        case UHS_HID_BOOT_KEY_PERIOD: return ((kbdLockingKeys.kbdLeds.bmNumLock == 1) ? '.': 0);
 4006414:	e0bffd17 	ldw	r2,-12(fp)
 4006418:	10800317 	ldw	r2,12(r2)
 400641c:	1080004c 	andi	r2,r2,1
 4006420:	10000226 	beq	r2,zero,400642c <_ZN20KeyboardReportParser10OemToAsciiEhh+0x278>
 4006424:	00800b84 	movi	r2,46
 4006428:	00000306 	br	4006438 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
 400642c:	0005883a 	mov	r2,zero
 4006430:	00000106 	br	4006438 <_ZN20KeyboardReportParser10OemToAsciiEhh+0x284>
                }
        }
        return ( 0);
 4006434:	0005883a 	mov	r2,zero
}
 4006438:	e037883a 	mov	sp,fp
 400643c:	dfc00117 	ldw	ra,4(sp)
 4006440:	df000017 	ldw	fp,0(sp)
 4006444:	dec00204 	addi	sp,sp,8
 4006448:	f800283a 	ret

0400644c <_ZN17MouseReportParser11OnMouseMoveEP9MOUSEINFO>:
public:
        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual void OnMouseMove(MOUSEINFO *mi __attribute__((unused))) {
 400644c:	defffd04 	addi	sp,sp,-12
 4006450:	df000215 	stw	fp,8(sp)
 4006454:	df000204 	addi	fp,sp,8
 4006458:	e13ffe15 	stw	r4,-8(fp)
 400645c:	e17fff15 	stw	r5,-4(fp)
        };
 4006460:	0001883a 	nop
 4006464:	e037883a 	mov	sp,fp
 4006468:	df000017 	ldw	fp,0(sp)
 400646c:	dec00104 	addi	sp,sp,4
 4006470:	f800283a 	ret

04006474 <_ZN17MouseReportParser14OnLeftButtonUpEP9MOUSEINFO>:

        virtual void OnLeftButtonUp(MOUSEINFO *mi __attribute__((unused))) {
 4006474:	defffd04 	addi	sp,sp,-12
 4006478:	df000215 	stw	fp,8(sp)
 400647c:	df000204 	addi	fp,sp,8
 4006480:	e13ffe15 	stw	r4,-8(fp)
 4006484:	e17fff15 	stw	r5,-4(fp)
        };
 4006488:	0001883a 	nop
 400648c:	e037883a 	mov	sp,fp
 4006490:	df000017 	ldw	fp,0(sp)
 4006494:	dec00104 	addi	sp,sp,4
 4006498:	f800283a 	ret

0400649c <_ZN17MouseReportParser16OnLeftButtonDownEP9MOUSEINFO>:

        virtual void OnLeftButtonDown(MOUSEINFO *mi __attribute__((unused))) {
 400649c:	defffd04 	addi	sp,sp,-12
 40064a0:	df000215 	stw	fp,8(sp)
 40064a4:	df000204 	addi	fp,sp,8
 40064a8:	e13ffe15 	stw	r4,-8(fp)
 40064ac:	e17fff15 	stw	r5,-4(fp)
        };
 40064b0:	0001883a 	nop
 40064b4:	e037883a 	mov	sp,fp
 40064b8:	df000017 	ldw	fp,0(sp)
 40064bc:	dec00104 	addi	sp,sp,4
 40064c0:	f800283a 	ret

040064c4 <_ZN17MouseReportParser15OnRightButtonUpEP9MOUSEINFO>:

        virtual void OnRightButtonUp(MOUSEINFO *mi __attribute__((unused))) {
 40064c4:	defffd04 	addi	sp,sp,-12
 40064c8:	df000215 	stw	fp,8(sp)
 40064cc:	df000204 	addi	fp,sp,8
 40064d0:	e13ffe15 	stw	r4,-8(fp)
 40064d4:	e17fff15 	stw	r5,-4(fp)
        };
 40064d8:	0001883a 	nop
 40064dc:	e037883a 	mov	sp,fp
 40064e0:	df000017 	ldw	fp,0(sp)
 40064e4:	dec00104 	addi	sp,sp,4
 40064e8:	f800283a 	ret

040064ec <_ZN17MouseReportParser17OnRightButtonDownEP9MOUSEINFO>:

        virtual void OnRightButtonDown(MOUSEINFO *mi __attribute__((unused))) {
 40064ec:	defffd04 	addi	sp,sp,-12
 40064f0:	df000215 	stw	fp,8(sp)
 40064f4:	df000204 	addi	fp,sp,8
 40064f8:	e13ffe15 	stw	r4,-8(fp)
 40064fc:	e17fff15 	stw	r5,-4(fp)
        };
 4006500:	0001883a 	nop
 4006504:	e037883a 	mov	sp,fp
 4006508:	df000017 	ldw	fp,0(sp)
 400650c:	dec00104 	addi	sp,sp,4
 4006510:	f800283a 	ret

04006514 <_ZN17MouseReportParser16OnMiddleButtonUpEP9MOUSEINFO>:

        virtual void OnMiddleButtonUp(MOUSEINFO *mi __attribute__((unused))) {
 4006514:	defffd04 	addi	sp,sp,-12
 4006518:	df000215 	stw	fp,8(sp)
 400651c:	df000204 	addi	fp,sp,8
 4006520:	e13ffe15 	stw	r4,-8(fp)
 4006524:	e17fff15 	stw	r5,-4(fp)
        };
 4006528:	0001883a 	nop
 400652c:	e037883a 	mov	sp,fp
 4006530:	df000017 	ldw	fp,0(sp)
 4006534:	dec00104 	addi	sp,sp,4
 4006538:	f800283a 	ret

0400653c <_ZN17MouseReportParser18OnMiddleButtonDownEP9MOUSEINFO>:

        virtual void OnMiddleButtonDown(MOUSEINFO *mi __attribute__((unused))) {
 400653c:	defffd04 	addi	sp,sp,-12
 4006540:	df000215 	stw	fp,8(sp)
 4006544:	df000204 	addi	fp,sp,8
 4006548:	e13ffe15 	stw	r4,-8(fp)
 400654c:	e17fff15 	stw	r5,-4(fp)
        };
 4006550:	0001883a 	nop
 4006554:	e037883a 	mov	sp,fp
 4006558:	df000017 	ldw	fp,0(sp)
 400655c:	dec00104 	addi	sp,sp,4
 4006560:	f800283a 	ret

04006564 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh>:

        void Parse(USBHID *hid, bool is_rpt_id, uint8_t len, uint8_t *buf);

protected:

        virtual uint8_t HandleLockingKeys(USBHID* hid, uint8_t key) {
 4006564:	defff704 	addi	sp,sp,-36
 4006568:	dfc00815 	stw	ra,32(sp)
 400656c:	df000715 	stw	fp,28(sp)
 4006570:	df000704 	addi	fp,sp,28
 4006574:	e13ffd15 	stw	r4,-12(fp)
 4006578:	e17ffe15 	stw	r5,-8(fp)
 400657c:	3005883a 	mov	r2,r6
 4006580:	e0bfff05 	stb	r2,-4(fp)
                uint8_t old_keys = kbdLockingKeys.bLeds;
 4006584:	e0bffd17 	ldw	r2,-12(fp)
 4006588:	10800303 	ldbu	r2,12(r2)
 400658c:	e0bffc05 	stb	r2,-16(fp)

                switch(key) {
 4006590:	e0bfff03 	ldbu	r2,-4(fp)
 4006594:	10c011e0 	cmpeqi	r3,r2,71
 4006598:	1800271e 	bne	r3,zero,4006638 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0xd4>
 400659c:	10c014e0 	cmpeqi	r3,r2,83
 40065a0:	1800031e 	bne	r3,zero,40065b0 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x4c>
 40065a4:	10800e60 	cmpeqi	r2,r2,57
 40065a8:	1000111e 	bne	r2,zero,40065f0 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x8c>
 40065ac:	00003506 	br	4006684 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_NUM_LOCK:
                                kbdLockingKeys.kbdLeds.bmNumLock = ~kbdLockingKeys.kbdLeds.bmNumLock;
 40065b0:	e0bffd17 	ldw	r2,-12(fp)
 40065b4:	10800317 	ldw	r2,12(r2)
 40065b8:	1080004c 	andi	r2,r2,1
 40065bc:	0084303a 	nor	r2,zero,r2
 40065c0:	1080004c 	andi	r2,r2,1
 40065c4:	1007883a 	mov	r3,r2
 40065c8:	e0bffd17 	ldw	r2,-12(fp)
 40065cc:	1940004c 	andi	r5,r3,1
 40065d0:	11000303 	ldbu	r4,12(r2)
 40065d4:	00ffff84 	movi	r3,-2
 40065d8:	20c6703a 	and	r3,r4,r3
 40065dc:	1809883a 	mov	r4,r3
 40065e0:	2807883a 	mov	r3,r5
 40065e4:	20c6b03a 	or	r3,r4,r3
 40065e8:	10c00305 	stb	r3,12(r2)
                                break;
 40065ec:	00002506 	br	4006684 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_CAPS_LOCK:
                                kbdLockingKeys.kbdLeds.bmCapsLock = ~kbdLockingKeys.kbdLeds.bmCapsLock;
 40065f0:	e0bffd17 	ldw	r2,-12(fp)
 40065f4:	10800317 	ldw	r2,12(r2)
 40065f8:	1004d07a 	srli	r2,r2,1
 40065fc:	1080004c 	andi	r2,r2,1
 4006600:	0084303a 	nor	r2,zero,r2
 4006604:	1080004c 	andi	r2,r2,1
 4006608:	1007883a 	mov	r3,r2
 400660c:	e0bffd17 	ldw	r2,-12(fp)
 4006610:	18c0004c 	andi	r3,r3,1
 4006614:	18cb883a 	add	r5,r3,r3
 4006618:	11000303 	ldbu	r4,12(r2)
 400661c:	00ffff44 	movi	r3,-3
 4006620:	20c6703a 	and	r3,r4,r3
 4006624:	1809883a 	mov	r4,r3
 4006628:	2807883a 	mov	r3,r5
 400662c:	20c6b03a 	or	r3,r4,r3
 4006630:	10c00305 	stb	r3,12(r2)
                                break;
 4006634:	00001306 	br	4006684 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x120>
                        case UHS_HID_BOOT_KEY_SCROLL_LOCK:
                                kbdLockingKeys.kbdLeds.bmScrollLock = ~kbdLockingKeys.kbdLeds.bmScrollLock;
 4006638:	e0bffd17 	ldw	r2,-12(fp)
 400663c:	10800317 	ldw	r2,12(r2)
 4006640:	1004d0ba 	srli	r2,r2,2
 4006644:	1080004c 	andi	r2,r2,1
 4006648:	0084303a 	nor	r2,zero,r2
 400664c:	1080004c 	andi	r2,r2,1
 4006650:	1007883a 	mov	r3,r2
 4006654:	e0bffd17 	ldw	r2,-12(fp)
 4006658:	18c0004c 	andi	r3,r3,1
 400665c:	18c7883a 	add	r3,r3,r3
 4006660:	18cb883a 	add	r5,r3,r3
 4006664:	11000303 	ldbu	r4,12(r2)
 4006668:	00fffec4 	movi	r3,-5
 400666c:	20c6703a 	and	r3,r4,r3
 4006670:	1809883a 	mov	r4,r3
 4006674:	2807883a 	mov	r3,r5
 4006678:	20c6b03a 	or	r3,r4,r3
 400667c:	10c00305 	stb	r3,12(r2)
                                break;
 4006680:	0001883a 	nop
                }

                if(old_keys != kbdLockingKeys.bLeds && hid) {
 4006684:	e0bffd17 	ldw	r2,-12(fp)
 4006688:	10800303 	ldbu	r2,12(r2)
 400668c:	10c03fcc 	andi	r3,r2,255
 4006690:	e0bffc03 	ldbu	r2,-16(fp)
 4006694:	18801026 	beq	r3,r2,40066d8 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
 4006698:	e0bffe17 	ldw	r2,-8(fp)
 400669c:	10000e26 	beq	r2,zero,40066d8 <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x174>
                        uint8_t lockLeds = kbdLockingKeys.bLeds;
 40066a0:	e0bffd17 	ldw	r2,-12(fp)
 40066a4:	10800303 	ldbu	r2,12(r2)
 40066a8:	e0bffc45 	stb	r2,-15(fp)
                        return (hid->SetReport(0, 0/*hid->GetIface()*/, 2, 0, 1, &lockLeds));
 40066ac:	e0bffc44 	addi	r2,fp,-15
 40066b0:	d8800215 	stw	r2,8(sp)
 40066b4:	00800044 	movi	r2,1
 40066b8:	d8800115 	stw	r2,4(sp)
 40066bc:	d8000015 	stw	zero,0(sp)
 40066c0:	01c00084 	movi	r7,2
 40066c4:	000d883a 	mov	r6,zero
 40066c8:	000b883a 	mov	r5,zero
 40066cc:	e13ffe17 	ldw	r4,-8(fp)
 40066d0:	4008dc80 	call	4008dc8 <_ZN6USBHID9SetReportEhhhhtPh>
 40066d4:	00000106 	br	40066dc <_ZN20KeyboardReportParser17HandleLockingKeysEP6USBHIDh+0x178>
                }

                return 0;
 40066d8:	0005883a 	mov	r2,zero
        };
 40066dc:	e037883a 	mov	sp,fp
 40066e0:	dfc00117 	ldw	ra,4(sp)
 40066e4:	df000017 	ldw	fp,0(sp)
 40066e8:	dec00204 	addi	sp,sp,8
 40066ec:	f800283a 	ret

040066f0 <_ZN20KeyboardReportParser20OnControlKeysChangedEhh>:

        virtual void OnControlKeysChanged(uint8_t before __attribute__((unused)), uint8_t after __attribute__((unused))) {
 40066f0:	defffc04 	addi	sp,sp,-16
 40066f4:	df000315 	stw	fp,12(sp)
 40066f8:	df000304 	addi	fp,sp,12
 40066fc:	e13ffd15 	stw	r4,-12(fp)
 4006700:	2807883a 	mov	r3,r5
 4006704:	3005883a 	mov	r2,r6
 4006708:	e0fffe05 	stb	r3,-8(fp)
 400670c:	e0bfff05 	stb	r2,-4(fp)
        };
 4006710:	0001883a 	nop
 4006714:	e037883a 	mov	sp,fp
 4006718:	df000017 	ldw	fp,0(sp)
 400671c:	dec00104 	addi	sp,sp,4
 4006720:	f800283a 	ret

04006724 <_ZN20KeyboardReportParser9OnKeyDownEhh>:

        virtual void OnKeyDown(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
 4006724:	defffc04 	addi	sp,sp,-16
 4006728:	df000315 	stw	fp,12(sp)
 400672c:	df000304 	addi	fp,sp,12
 4006730:	e13ffd15 	stw	r4,-12(fp)
 4006734:	2807883a 	mov	r3,r5
 4006738:	3005883a 	mov	r2,r6
 400673c:	e0fffe05 	stb	r3,-8(fp)
 4006740:	e0bfff05 	stb	r2,-4(fp)
        };
 4006744:	0001883a 	nop
 4006748:	e037883a 	mov	sp,fp
 400674c:	df000017 	ldw	fp,0(sp)
 4006750:	dec00104 	addi	sp,sp,4
 4006754:	f800283a 	ret

04006758 <_ZN20KeyboardReportParser7OnKeyUpEhh>:

        virtual void OnKeyUp(uint8_t mod __attribute__((unused)), uint8_t key __attribute__((unused))) {
 4006758:	defffc04 	addi	sp,sp,-16
 400675c:	df000315 	stw	fp,12(sp)
 4006760:	df000304 	addi	fp,sp,12
 4006764:	e13ffd15 	stw	r4,-12(fp)
 4006768:	2807883a 	mov	r3,r5
 400676c:	3005883a 	mov	r2,r6
 4006770:	e0fffe05 	stb	r3,-8(fp)
 4006774:	e0bfff05 	stb	r2,-4(fp)
        };
 4006778:	0001883a 	nop
 400677c:	e037883a 	mov	sp,fp
 4006780:	df000017 	ldw	fp,0(sp)
 4006784:	dec00104 	addi	sp,sp,4
 4006788:	f800283a 	ret

0400678c <_ZN20KeyboardReportParser10getNumKeysEv>:

        virtual const uint8_t *getNumKeys() {
 400678c:	defffe04 	addi	sp,sp,-8
 4006790:	df000115 	stw	fp,4(sp)
 4006794:	df000104 	addi	fp,sp,4
 4006798:	e13fff15 	stw	r4,-4(fp)
                return numKeys;
 400679c:	008100b4 	movhi	r2,1026
 40067a0:	1089e284 	addi	r2,r2,10122
        };
 40067a4:	e037883a 	mov	sp,fp
 40067a8:	df000017 	ldw	fp,0(sp)
 40067ac:	dec00104 	addi	sp,sp,4
 40067b0:	f800283a 	ret

040067b4 <_ZN20KeyboardReportParser12getSymKeysUpEv>:

        virtual const uint8_t *getSymKeysUp() {
 40067b4:	defffe04 	addi	sp,sp,-8
 40067b8:	df000115 	stw	fp,4(sp)
 40067bc:	df000104 	addi	fp,sp,4
 40067c0:	e13fff15 	stw	r4,-4(fp)
                return symKeysUp;
 40067c4:	008100b4 	movhi	r2,1026
 40067c8:	1089e504 	addi	r2,r2,10132
        };
 40067cc:	e037883a 	mov	sp,fp
 40067d0:	df000017 	ldw	fp,0(sp)
 40067d4:	dec00104 	addi	sp,sp,4
 40067d8:	f800283a 	ret

040067dc <_ZN20KeyboardReportParser12getSymKeysLoEv>:

        virtual const uint8_t *getSymKeysLo() {
 40067dc:	defffe04 	addi	sp,sp,-8
 40067e0:	df000115 	stw	fp,4(sp)
 40067e4:	df000104 	addi	fp,sp,4
 40067e8:	e13fff15 	stw	r4,-4(fp)
                return symKeysLo;
 40067ec:	008100b4 	movhi	r2,1026
 40067f0:	1089e804 	addi	r2,r2,10144
        };
 40067f4:	e037883a 	mov	sp,fp
 40067f8:	df000017 	ldw	fp,0(sp)
 40067fc:	dec00104 	addi	sp,sp,4
 4006800:	f800283a 	ret

04006804 <_ZN20KeyboardReportParser10getPadKeysEv>:

        virtual const uint8_t *getPadKeys() {
 4006804:	defffe04 	addi	sp,sp,-8
 4006808:	df000115 	stw	fp,4(sp)
 400680c:	df000104 	addi	fp,sp,4
 4006810:	e13fff15 	stw	r4,-4(fp)
                return padKeys;
 4006814:	d0a1e584 	addi	r2,gp,-30826
        };
 4006818:	e037883a 	mov	sp,fp
 400681c:	df000017 	ldw	fp,0(sp)
 4006820:	dec00104 	addi	sp,sp,4
 4006824:	f800283a 	ret

04006828 <_Z9E_Notifycci>:
// 0x80 is the default (i.e. trace) to turn off set this global to something lower.
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
 4006828:	defffc04 	addi	sp,sp,-16
 400682c:	dfc00315 	stw	ra,12(sp)
 4006830:	df000215 	stw	fp,8(sp)
 4006834:	df000204 	addi	fp,sp,8
 4006838:	2005883a 	mov	r2,r4
 400683c:	e17fff15 	stw	r5,-4(fp)
 4006840:	e0bffe05 	stb	r2,-8(fp)
        if(UsbDEBUGlvl < lvl) return;
 4006844:	d0e1ea17 	ldw	r3,-30808(gp)
 4006848:	e0bfff17 	ldw	r2,-4(fp)
 400684c:	18800416 	blt	r3,r2,4006860 <_Z9E_Notifycci+0x38>
        printf("%c", c);
 4006850:	e0bffe07 	ldb	r2,-8(fp)
 4006854:	1009883a 	mov	r4,r2
 4006858:	400efc00 	call	400efc0 <putchar>
 400685c:	00000106 	br	4006864 <_Z9E_Notifycci+0x3c>
// this allows for 126 other debugging levels.
// TO-DO: Allow assignment to a different serial port by software
int UsbDEBUGlvl = 0x80;

void E_Notifyc(char c, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
 4006860:	0001883a 	nop
        printf("%c", c);
}
 4006864:	e037883a 	mov	sp,fp
 4006868:	dfc00117 	ldw	ra,4(sp)
 400686c:	df000017 	ldw	fp,0(sp)
 4006870:	dec00204 	addi	sp,sp,8
 4006874:	f800283a 	ret

04006878 <_Z8E_NotifyPKci>:

void E_Notify(char const * msg, int lvl) {
 4006878:	defffb04 	addi	sp,sp,-20
 400687c:	dfc00415 	stw	ra,16(sp)
 4006880:	df000315 	stw	fp,12(sp)
 4006884:	df000304 	addi	fp,sp,12
 4006888:	e13ffe15 	stw	r4,-8(fp)
 400688c:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
 4006890:	d0e1ea17 	ldw	r3,-30808(gp)
 4006894:	e0bfff17 	ldw	r2,-4(fp)
 4006898:	18801016 	blt	r3,r2,40068dc <_Z8E_NotifyPKci+0x64>
        if(!msg) return;
 400689c:	e0bffe17 	ldw	r2,-8(fp)
 40068a0:	10001026 	beq	r2,zero,40068e4 <_Z8E_NotifyPKci+0x6c>
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
 40068a4:	e0bffe17 	ldw	r2,-8(fp)
 40068a8:	10c00044 	addi	r3,r2,1
 40068ac:	e0fffe15 	stw	r3,-8(fp)
 40068b0:	10800003 	ldbu	r2,0(r2)
 40068b4:	e0bffd05 	stb	r2,-12(fp)
 40068b8:	e0bffd07 	ldb	r2,-12(fp)
 40068bc:	1004c03a 	cmpne	r2,r2,zero
 40068c0:	10803fcc 	andi	r2,r2,255
 40068c4:	10000826 	beq	r2,zero,40068e8 <_Z8E_NotifyPKci+0x70>
 40068c8:	e0bffd07 	ldb	r2,-12(fp)
 40068cc:	e17fff17 	ldw	r5,-4(fp)
 40068d0:	1009883a 	mov	r4,r2
 40068d4:	40068280 	call	4006828 <_Z9E_Notifycci>
 40068d8:	003ff206 	br	40068a4 <__alt_data_end+0xfc0068a4>
        if(UsbDEBUGlvl < lvl) return;
        printf("%c", c);
}

void E_Notify(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
 40068dc:	0001883a 	nop
 40068e0:	00000106 	br	40068e8 <_Z8E_NotifyPKci+0x70>
        if(!msg) return;
 40068e4:	0001883a 	nop
        char c;

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}
 40068e8:	e037883a 	mov	sp,fp
 40068ec:	dfc00117 	ldw	ra,4(sp)
 40068f0:	df000017 	ldw	fp,0(sp)
 40068f4:	dec00204 	addi	sp,sp,8
 40068f8:	f800283a 	ret

040068fc <_Z11E_NotifyStrPKci>:

void E_NotifyStr(char const * msg, int lvl) {
 40068fc:	defffb04 	addi	sp,sp,-20
 4006900:	dfc00415 	stw	ra,16(sp)
 4006904:	df000315 	stw	fp,12(sp)
 4006908:	df000304 	addi	fp,sp,12
 400690c:	e13ffe15 	stw	r4,-8(fp)
 4006910:	e17fff15 	stw	r5,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
 4006914:	d0e1ea17 	ldw	r3,-30808(gp)
 4006918:	e0bfff17 	ldw	r2,-4(fp)
 400691c:	18801016 	blt	r3,r2,4006960 <_Z11E_NotifyStrPKci+0x64>
        if(!msg) return;
 4006920:	e0bffe17 	ldw	r2,-8(fp)
 4006924:	10001026 	beq	r2,zero,4006968 <_Z11E_NotifyStrPKci+0x6c>
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
 4006928:	e0bffe17 	ldw	r2,-8(fp)
 400692c:	10c00044 	addi	r3,r2,1
 4006930:	e0fffe15 	stw	r3,-8(fp)
 4006934:	10800003 	ldbu	r2,0(r2)
 4006938:	e0bffd05 	stb	r2,-12(fp)
 400693c:	e0bffd07 	ldb	r2,-12(fp)
 4006940:	1004c03a 	cmpne	r2,r2,zero
 4006944:	10803fcc 	andi	r2,r2,255
 4006948:	10000826 	beq	r2,zero,400696c <_Z11E_NotifyStrPKci+0x70>
 400694c:	e0bffd07 	ldb	r2,-12(fp)
 4006950:	e17fff17 	ldw	r5,-4(fp)
 4006954:	1009883a 	mov	r4,r2
 4006958:	40068280 	call	4006828 <_Z9E_Notifycci>
 400695c:	003ff206 	br	4006928 <__alt_data_end+0xfc006928>

        while((c = pgm_read_byte(msg++))) E_Notifyc(c, lvl);
}

void E_NotifyStr(char const * msg, int lvl) {
        if(UsbDEBUGlvl < lvl) return;
 4006960:	0001883a 	nop
 4006964:	00000106 	br	400696c <_Z11E_NotifyStrPKci+0x70>
        if(!msg) return;
 4006968:	0001883a 	nop
        char c;

        while((c = *msg++)) E_Notifyc(c, lvl);
}
 400696c:	e037883a 	mov	sp,fp
 4006970:	dfc00117 	ldw	ra,4(sp)
 4006974:	df000017 	ldw	fp,0(sp)
 4006978:	dec00204 	addi	sp,sp,8
 400697c:	f800283a 	ret

04006980 <_Z8E_Notifyhi>:

void E_Notify(uint8_t b, int lvl) {
 4006980:	defffd04 	addi	sp,sp,-12
 4006984:	df000215 	stw	fp,8(sp)
 4006988:	df000204 	addi	fp,sp,8
 400698c:	2005883a 	mov	r2,r4
 4006990:	e17fff15 	stw	r5,-4(fp)
 4006994:	e0bffe05 	stb	r2,-8(fp)
        USB_HOST_SERIAL.print(b);
#else
        //USB_HOST_SERIAL.print(b, DEC);
#endif
        //USB_HOST_SERIAL.flush();
}
 4006998:	e037883a 	mov	sp,fp
 400699c:	df000017 	ldw	fp,0(sp)
 40069a0:	dec00104 	addi	sp,sp,4
 40069a4:	f800283a 	ret

040069a8 <_Z8E_Notifydi>:

void E_Notify(double d, int lvl) {
 40069a8:	defffc04 	addi	sp,sp,-16
 40069ac:	df000315 	stw	fp,12(sp)
 40069b0:	df000304 	addi	fp,sp,12
 40069b4:	e13ffd15 	stw	r4,-12(fp)
 40069b8:	e17ffe15 	stw	r5,-8(fp)
 40069bc:	e1bfff15 	stw	r6,-4(fp)
        if(UsbDEBUGlvl < lvl) return;
        //USB_HOST_SERIAL.print(d);
        //USB_HOST_SERIAL.flush();
}
 40069c0:	e037883a 	mov	sp,fp
 40069c4:	df000017 	ldw	fp,0(sp)
 40069c8:	dec00104 	addi	sp,sp,4
 40069cc:	f800283a 	ret

040069d0 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "../include/Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 40069d0:	defffc04 	addi	sp,sp,-16
 40069d4:	df000315 	stw	fp,12(sp)
 40069d8:	df000304 	addi	fp,sp,12
 40069dc:	e13ffd15 	stw	r4,-12(fp)
 40069e0:	e17ffe15 	stw	r5,-8(fp)
 40069e4:	e1bfff15 	stw	r6,-4(fp)
        if(!pBuf) {
 40069e8:	e0bffd17 	ldw	r2,-12(fp)
 40069ec:	10800017 	ldw	r2,0(r2)
 40069f0:	1000021e 	bne	r2,zero,40069fc <_ZN20MultiByteValueParser5ParseEPPhPt+0x2c>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 40069f4:	0005883a 	mov	r2,zero
 40069f8:	00003306 	br	4006ac8 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 40069fc:	e0bffd17 	ldw	r2,-12(fp)
 4006a00:	10800103 	ldbu	r2,4(r2)
 4006a04:	10803fcc 	andi	r2,r2,255
 4006a08:	10002426 	beq	r2,zero,4006a9c <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
 4006a0c:	e0bfff17 	ldw	r2,-4(fp)
 4006a10:	1080000b 	ldhu	r2,0(r2)
 4006a14:	10bfffcc 	andi	r2,r2,65535
 4006a18:	10002026 	beq	r2,zero,4006a9c <_ZN20MultiByteValueParser5ParseEPPhPt+0xcc>
                pBuf[valueSize - countDown] = (**pp);
 4006a1c:	e0bffd17 	ldw	r2,-12(fp)
 4006a20:	10800017 	ldw	r2,0(r2)
 4006a24:	e0fffd17 	ldw	r3,-12(fp)
 4006a28:	18c00143 	ldbu	r3,5(r3)
 4006a2c:	19003fcc 	andi	r4,r3,255
 4006a30:	e0fffd17 	ldw	r3,-12(fp)
 4006a34:	18c00103 	ldbu	r3,4(r3)
 4006a38:	18c03fcc 	andi	r3,r3,255
 4006a3c:	20c7c83a 	sub	r3,r4,r3
 4006a40:	10c5883a 	add	r2,r2,r3
 4006a44:	e0fffe17 	ldw	r3,-8(fp)
 4006a48:	18c00017 	ldw	r3,0(r3)
 4006a4c:	18c00003 	ldbu	r3,0(r3)
 4006a50:	10c00005 	stb	r3,0(r2)
bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
        if(!pBuf) {
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 4006a54:	e0bffd17 	ldw	r2,-12(fp)
 4006a58:	10800103 	ldbu	r2,4(r2)
 4006a5c:	10bfffc4 	addi	r2,r2,-1
 4006a60:	1007883a 	mov	r3,r2
 4006a64:	e0bffd17 	ldw	r2,-12(fp)
 4006a68:	10c00105 	stb	r3,4(r2)
 4006a6c:	e0bfff17 	ldw	r2,-4(fp)
 4006a70:	1080000b 	ldhu	r2,0(r2)
 4006a74:	10bfffc4 	addi	r2,r2,-1
 4006a78:	1007883a 	mov	r3,r2
 4006a7c:	e0bfff17 	ldw	r2,-4(fp)
 4006a80:	10c0000d 	sth	r3,0(r2)
 4006a84:	e0bffe17 	ldw	r2,-8(fp)
 4006a88:	10800017 	ldw	r2,0(r2)
 4006a8c:	10c00044 	addi	r3,r2,1
 4006a90:	e0bffe17 	ldw	r2,-8(fp)
 4006a94:	10c00015 	stw	r3,0(r2)
 4006a98:	003fd806 	br	40069fc <__alt_data_end+0xfc0069fc>
                pBuf[valueSize - countDown] = (**pp);

        if(countDown)
 4006a9c:	e0bffd17 	ldw	r2,-12(fp)
 4006aa0:	10800103 	ldbu	r2,4(r2)
 4006aa4:	10803fcc 	andi	r2,r2,255
 4006aa8:	10000226 	beq	r2,zero,4006ab4 <_ZN20MultiByteValueParser5ParseEPPhPt+0xe4>
                return false;
 4006aac:	0005883a 	mov	r2,zero
 4006ab0:	00000506 	br	4006ac8 <_ZN20MultiByteValueParser5ParseEPPhPt+0xf8>

        countDown = valueSize;
 4006ab4:	e0bffd17 	ldw	r2,-12(fp)
 4006ab8:	10c00143 	ldbu	r3,5(r2)
 4006abc:	e0bffd17 	ldw	r2,-12(fp)
 4006ac0:	10c00105 	stb	r3,4(r2)
        return true;
 4006ac4:	00800044 	movi	r2,1
}
 4006ac8:	e037883a 	mov	sp,fp
 4006acc:	df000017 	ldw	fp,0(sp)
 4006ad0:	dec00104 	addi	sp,sp,4
 4006ad4:	f800283a 	ret

04006ad8 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_>:

bool PTPListParser::Parse(uint8_t **pp, uint16_t *pcntdn, PTP_ARRAY_EL_FUNC pf, const void *me) {
 4006ad8:	defffa04 	addi	sp,sp,-24
 4006adc:	dfc00515 	stw	ra,20(sp)
 4006ae0:	df000415 	stw	fp,16(sp)
 4006ae4:	df000404 	addi	fp,sp,16
 4006ae8:	e13ffc15 	stw	r4,-16(fp)
 4006aec:	e17ffd15 	stw	r5,-12(fp)
 4006af0:	e1bffe15 	stw	r6,-8(fp)
 4006af4:	e1ffff15 	stw	r7,-4(fp)
        switch(nStage) {
 4006af8:	e0bffc17 	ldw	r2,-16(fp)
 4006afc:	10800003 	ldbu	r2,0(r2)
 4006b00:	10803fcc 	andi	r2,r2,255
 4006b04:	10c00060 	cmpeqi	r3,r2,1
 4006b08:	1800181e 	bne	r3,zero,4006b6c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x94>
 4006b0c:	10c00088 	cmpgei	r3,r2,2
 4006b10:	1800021e 	bne	r3,zero,4006b1c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x44>
 4006b14:	10000626 	beq	r2,zero,4006b30 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x58>
 4006b18:	00007e06 	br	4006d14 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
 4006b1c:	10c000a0 	cmpeqi	r3,r2,2
 4006b20:	18004a1e 	bne	r3,zero,4006c4c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x174>
 4006b24:	108000e0 	cmpeqi	r2,r2,3
 4006b28:	1000571e 	bne	r2,zero,4006c88 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1b0>
 4006b2c:	00007906 	br	4006d14 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x23c>
                case 0:
                        pBuf->valueSize = lenSize;
 4006b30:	e0bffc17 	ldw	r2,-16(fp)
 4006b34:	10800417 	ldw	r2,16(r2)
 4006b38:	e0fffc17 	ldw	r3,-16(fp)
 4006b3c:	18c00303 	ldbu	r3,12(r3)
 4006b40:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
 4006b44:	e0bffc17 	ldw	r2,-16(fp)
 4006b48:	10c00504 	addi	r3,r2,20
 4006b4c:	e0bffc17 	ldw	r2,-16(fp)
 4006b50:	10800417 	ldw	r2,16(r2)
 4006b54:	100b883a 	mov	r5,r2
 4006b58:	1809883a 	mov	r4,r3
 4006b5c:	4004fa40 	call	4004fa4 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 1;
 4006b60:	e0bffc17 	ldw	r2,-16(fp)
 4006b64:	00c00044 	movi	r3,1
 4006b68:	10c00005 	stb	r3,0(r2)

                case 1:
                        if(!theParser.Parse(pp, pcntdn))
 4006b6c:	e0bffc17 	ldw	r2,-16(fp)
 4006b70:	10800504 	addi	r2,r2,20
 4006b74:	e1bffe17 	ldw	r6,-8(fp)
 4006b78:	e17ffd17 	ldw	r5,-12(fp)
 4006b7c:	1009883a 	mov	r4,r2
 4006b80:	40069d00 	call	40069d0 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4006b84:	1080005c 	xori	r2,r2,1
 4006b88:	10803fcc 	andi	r2,r2,255
 4006b8c:	10000226 	beq	r2,zero,4006b98 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0xc0>
                                return false;
 4006b90:	0005883a 	mov	r2,zero
 4006b94:	00006006 	br	4006d18 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                        arLen = 0;
 4006b98:	e0bffc17 	ldw	r2,-16(fp)
 4006b9c:	10000115 	stw	zero,4(r2)
                        arLen = (pBuf->valueSize >= 4) ? *((uint32_t*)pBuf->pValue) : (uint32_t)(*((uint16_t*)pBuf->pValue));
 4006ba0:	e0bffc17 	ldw	r2,-16(fp)
 4006ba4:	10800417 	ldw	r2,16(r2)
 4006ba8:	10800003 	ldbu	r2,0(r2)
 4006bac:	10803fcc 	andi	r2,r2,255
 4006bb0:	10800130 	cmpltui	r2,r2,4
 4006bb4:	10000e1e 	bne	r2,zero,4006bf0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x118>
 4006bb8:	e0bffc17 	ldw	r2,-16(fp)
 4006bbc:	10800417 	ldw	r2,16(r2)
 4006bc0:	10c00043 	ldbu	r3,1(r2)
 4006bc4:	11000083 	ldbu	r4,2(r2)
 4006bc8:	2008923a 	slli	r4,r4,8
 4006bcc:	20c6b03a 	or	r3,r4,r3
 4006bd0:	110000c3 	ldbu	r4,3(r2)
 4006bd4:	2008943a 	slli	r4,r4,16
 4006bd8:	20c6b03a 	or	r3,r4,r3
 4006bdc:	10800103 	ldbu	r2,4(r2)
 4006be0:	1004963a 	slli	r2,r2,24
 4006be4:	10c4b03a 	or	r2,r2,r3
 4006be8:	10800017 	ldw	r2,0(r2)
 4006bec:	00000e06 	br	4006c28 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x150>
 4006bf0:	e0bffc17 	ldw	r2,-16(fp)
 4006bf4:	10800417 	ldw	r2,16(r2)
 4006bf8:	10c00043 	ldbu	r3,1(r2)
 4006bfc:	11000083 	ldbu	r4,2(r2)
 4006c00:	2008923a 	slli	r4,r4,8
 4006c04:	20c6b03a 	or	r3,r4,r3
 4006c08:	110000c3 	ldbu	r4,3(r2)
 4006c0c:	2008943a 	slli	r4,r4,16
 4006c10:	20c6b03a 	or	r3,r4,r3
 4006c14:	10800103 	ldbu	r2,4(r2)
 4006c18:	1004963a 	slli	r2,r2,24
 4006c1c:	10c4b03a 	or	r2,r2,r3
 4006c20:	1080000b 	ldhu	r2,0(r2)
 4006c24:	10bfffcc 	andi	r2,r2,65535
 4006c28:	e0fffc17 	ldw	r3,-16(fp)
 4006c2c:	18800115 	stw	r2,4(r3)
                        arLenCntdn = arLen;
 4006c30:	e0bffc17 	ldw	r2,-16(fp)
 4006c34:	10c00117 	ldw	r3,4(r2)
 4006c38:	e0bffc17 	ldw	r2,-16(fp)
 4006c3c:	10c00215 	stw	r3,8(r2)
                        nStage = 2;
 4006c40:	e0bffc17 	ldw	r2,-16(fp)
 4006c44:	00c00084 	movi	r3,2
 4006c48:	10c00005 	stb	r3,0(r2)

                case 2:
                        pBuf->valueSize = valSize;
 4006c4c:	e0bffc17 	ldw	r2,-16(fp)
 4006c50:	10800417 	ldw	r2,16(r2)
 4006c54:	e0fffc17 	ldw	r3,-16(fp)
 4006c58:	18c00343 	ldbu	r3,13(r3)
 4006c5c:	10c00005 	stb	r3,0(r2)
                        theParser.Initialize(pBuf);
 4006c60:	e0bffc17 	ldw	r2,-16(fp)
 4006c64:	10c00504 	addi	r3,r2,20
 4006c68:	e0bffc17 	ldw	r2,-16(fp)
 4006c6c:	10800417 	ldw	r2,16(r2)
 4006c70:	100b883a 	mov	r5,r2
 4006c74:	1809883a 	mov	r4,r3
 4006c78:	4004fa40 	call	4004fa4 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        nStage = 3;
 4006c7c:	e0bffc17 	ldw	r2,-16(fp)
 4006c80:	00c000c4 	movi	r3,3
 4006c84:	10c00005 	stb	r3,0(r2)

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
 4006c88:	e0bffc17 	ldw	r2,-16(fp)
 4006c8c:	10800217 	ldw	r2,8(r2)
 4006c90:	10001e26 	beq	r2,zero,4006d0c <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x234>
                                if(!theParser.Parse(pp, pcntdn))
 4006c94:	e0bffc17 	ldw	r2,-16(fp)
 4006c98:	10800504 	addi	r2,r2,20
 4006c9c:	e1bffe17 	ldw	r6,-8(fp)
 4006ca0:	e17ffd17 	ldw	r5,-12(fp)
 4006ca4:	1009883a 	mov	r4,r2
 4006ca8:	40069d00 	call	40069d0 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4006cac:	1080005c 	xori	r2,r2,1
 4006cb0:	10803fcc 	andi	r2,r2,255
 4006cb4:	10000226 	beq	r2,zero,4006cc0 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x1e8>
                                        return false;
 4006cb8:	0005883a 	mov	r2,zero
 4006cbc:	00001606 	br	4006d18 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x240>

                                if(pf)
 4006cc0:	e0bfff17 	ldw	r2,-4(fp)
 4006cc4:	10000b26 	beq	r2,zero,4006cf4 <_ZN13PTPListParser5ParseEPPhPtPFvPK16MultiValueBuffermPKvES7_+0x21c>
                                        pf(pBuf, (arLen - arLenCntdn), me);
 4006cc8:	e0bffc17 	ldw	r2,-16(fp)
 4006ccc:	11000417 	ldw	r4,16(r2)
 4006cd0:	e0bffc17 	ldw	r2,-16(fp)
 4006cd4:	10c00117 	ldw	r3,4(r2)
 4006cd8:	e0bffc17 	ldw	r2,-16(fp)
 4006cdc:	10800217 	ldw	r2,8(r2)
 4006ce0:	1887c83a 	sub	r3,r3,r2
 4006ce4:	e0bfff17 	ldw	r2,-4(fp)
 4006ce8:	e1800217 	ldw	r6,8(fp)
 4006cec:	180b883a 	mov	r5,r3
 4006cf0:	103ee83a 	callr	r2
                        pBuf->valueSize = valSize;
                        theParser.Initialize(pBuf);
                        nStage = 3;

                case 3:
                        for(; arLenCntdn; arLenCntdn--) {
 4006cf4:	e0bffc17 	ldw	r2,-16(fp)
 4006cf8:	10800217 	ldw	r2,8(r2)
 4006cfc:	10ffffc4 	addi	r3,r2,-1
 4006d00:	e0bffc17 	ldw	r2,-16(fp)
 4006d04:	10c00215 	stw	r3,8(r2)
 4006d08:	003fdf06 	br	4006c88 <__alt_data_end+0xfc006c88>

                                if(pf)
                                        pf(pBuf, (arLen - arLenCntdn), me);
                        }

                        nStage = 0;
 4006d0c:	e0bffc17 	ldw	r2,-16(fp)
 4006d10:	10000005 	stb	zero,0(r2)
        }
        return true;
 4006d14:	00800044 	movi	r2,1
}
 4006d18:	e037883a 	mov	sp,fp
 4006d1c:	dfc00117 	ldw	ra,4(sp)
 4006d20:	df000017 	ldw	fp,0(sp)
 4006d24:	dec00204 	addi	sp,sp,8
 4006d28:	f800283a 	ret

04006d2c <_ZN9USBH_MIDIC1EP3USB>:
//| 0xD |     2     |Channel Pressure
//| 0xE |     3     |PitchBend Change
//| 0xF |     1     |Single Byte
//+-----+-----------+-------------------------------------------------------------------

USBH_MIDI::USBH_MIDI(USB *p) :
 4006d2c:	defffb04 	addi	sp,sp,-20
 4006d30:	dfc00415 	stw	ra,16(sp)
 4006d34:	df000315 	stw	fp,12(sp)
 4006d38:	df000304 	addi	fp,sp,12
 4006d3c:	e13ffe15 	stw	r4,-8(fp)
 4006d40:	e17fff15 	stw	r5,-4(fp)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
 4006d44:	e0bffe17 	ldw	r2,-8(fp)
 4006d48:	1009883a 	mov	r4,r2
 4006d4c:	40055b00 	call	40055b0 <_ZN15USBDeviceConfigC1Ev>
 4006d50:	e0bffe17 	ldw	r2,-8(fp)
 4006d54:	10800104 	addi	r2,r2,4
 4006d58:	1009883a 	mov	r4,r2
 4006d5c:	4008cc80 	call	4008cc8 <_ZN21UsbMidiConfigXtracterC1Ev>
 4006d60:	008100b4 	movhi	r2,1026
 4006d64:	108a2004 	addi	r2,r2,10368
 4006d68:	e0fffe17 	ldw	r3,-8(fp)
 4006d6c:	18800015 	stw	r2,0(r3)
 4006d70:	008100b4 	movhi	r2,1026
 4006d74:	108a2c04 	addi	r2,r2,10416
 4006d78:	e0fffe17 	ldw	r3,-8(fp)
 4006d7c:	18800115 	stw	r2,4(r3)
 4006d80:	e0bffe17 	ldw	r2,-8(fp)
 4006d84:	e0ffff17 	ldw	r3,-4(fp)
 4006d88:	10c00215 	stw	r3,8(r2)
 4006d8c:	e0bffe17 	ldw	r2,-8(fp)
 4006d90:	10000305 	stb	zero,12(r2)
 4006d94:	e0bffe17 	ldw	r2,-8(fp)
 4006d98:	10000345 	stb	zero,13(r2)
 4006d9c:	e0bffe17 	ldw	r2,-8(fp)
 4006da0:	10001705 	stb	zero,92(r2)
 4006da4:	e0bffe17 	ldw	r2,-8(fp)
 4006da8:	10001815 	stw	zero,96(r2)
 4006dac:	e0bffe17 	ldw	r2,-8(fp)
 4006db0:	10001915 	stw	zero,100(r2)
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
 4006db4:	e03ffd05 	stb	zero,-12(fp)
 4006db8:	e0bffd03 	ldbu	r2,-12(fp)
 4006dbc:	108000e8 	cmpgeui	r2,r2,3
 4006dc0:	10002d1e 	bne	r2,zero,4006e78 <_ZN9USBH_MIDIC1EP3USB+0x14c>
                epInfo[i].epAddr      = 0;
 4006dc4:	e0fffd03 	ldbu	r3,-12(fp)
 4006dc8:	e13ffe17 	ldw	r4,-8(fp)
 4006dcc:	1805883a 	mov	r2,r3
 4006dd0:	1085883a 	add	r2,r2,r2
 4006dd4:	10c5883a 	add	r2,r2,r3
 4006dd8:	2085883a 	add	r2,r4,r2
 4006ddc:	108004c4 	addi	r2,r2,19
 4006de0:	10000005 	stb	zero,0(r2)
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
 4006de4:	e13ffd03 	ldbu	r4,-12(fp)
 4006de8:	e0bffd03 	ldbu	r2,-12(fp)
 4006dec:	10000226 	beq	r2,zero,4006df8 <_ZN9USBH_MIDIC1EP3USB+0xcc>
 4006df0:	0007883a 	mov	r3,zero
 4006df4:	00000106 	br	4006dfc <_ZN9USBH_MIDIC1EP3USB+0xd0>
 4006df8:	00c00204 	movi	r3,8
 4006dfc:	e17ffe17 	ldw	r5,-8(fp)
 4006e00:	2005883a 	mov	r2,r4
 4006e04:	1085883a 	add	r2,r2,r2
 4006e08:	1105883a 	add	r2,r2,r4
 4006e0c:	2885883a 	add	r2,r5,r2
 4006e10:	10800504 	addi	r2,r2,20
 4006e14:	10c00005 	stb	r3,0(r2)
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 4006e18:	e13ffd03 	ldbu	r4,-12(fp)
 4006e1c:	e0bffd03 	ldbu	r2,-12(fp)
 4006e20:	10000226 	beq	r2,zero,4006e2c <_ZN9USBH_MIDIC1EP3USB+0x100>
 4006e24:	00c00044 	movi	r3,1
 4006e28:	00000106 	br	4006e30 <_ZN9USBH_MIDIC1EP3USB+0x104>
 4006e2c:	00c003c4 	movi	r3,15
 4006e30:	e17ffe17 	ldw	r5,-8(fp)
 4006e34:	2005883a 	mov	r2,r4
 4006e38:	1085883a 	add	r2,r2,r2
 4006e3c:	1105883a 	add	r2,r2,r4
 4006e40:	2885883a 	add	r2,r5,r2
 4006e44:	10800404 	addi	r2,r2,16
 4006e48:	18c7883a 	add	r3,r3,r3
 4006e4c:	18cb883a 	add	r5,r3,r3
 4006e50:	10c00143 	ldbu	r3,5(r2)
 4006e54:	18c000cc 	andi	r3,r3,3
 4006e58:	1809883a 	mov	r4,r3
 4006e5c:	2807883a 	mov	r3,r5
 4006e60:	20c6b03a 	or	r3,r4,r3
 4006e64:	10c00145 	stb	r3,5(r2)
pUsb(p),
bAddress(0),
bPollEnable(false),
readPtr(0) {
        // initialize endpoint data structures
        for(uint8_t i=0; i<MIDI_MAX_ENDPOINTS; i++) {
 4006e68:	e0bffd03 	ldbu	r2,-12(fp)
 4006e6c:	10800044 	addi	r2,r2,1
 4006e70:	e0bffd05 	stb	r2,-12(fp)
 4006e74:	003fd006 	br	4006db8 <__alt_data_end+0xfc006db8>
                epInfo[i].epAddr      = 0;
                epInfo[i].maxPktSize  = (i) ? 0 : 8;
                epInfo[i].bmNakPower  = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
        }
        // register in USB subsystem
        if (pUsb) {
 4006e78:	e0bffe17 	ldw	r2,-8(fp)
 4006e7c:	10800217 	ldw	r2,8(r2)
 4006e80:	10000626 	beq	r2,zero,4006e9c <_ZN9USBH_MIDIC1EP3USB+0x170>
                pUsb->RegisterDeviceClass(this);
 4006e84:	e0bffe17 	ldw	r2,-8(fp)
 4006e88:	10800217 	ldw	r2,8(r2)
 4006e8c:	e0fffe17 	ldw	r3,-8(fp)
 4006e90:	180b883a 	mov	r5,r3
 4006e94:	1009883a 	mov	r4,r2
 4006e98:	40053640 	call	4005364 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
        }
}
 4006e9c:	0001883a 	nop
 4006ea0:	e037883a 	mov	sp,fp
 4006ea4:	dfc00117 	ldw	ra,4(sp)
 4006ea8:	df000017 	ldw	fp,0(sp)
 4006eac:	dec00204 	addi	sp,sp,8
 4006eb0:	f800283a 	ret

04006eb4 <_ZN9USBH_MIDI4InitEhhb>:

/* Connection initialization of an MIDI Device */
uint8_t USBH_MIDI::Init(uint8_t parent, uint8_t port, bool lowspeed)
{
 4006eb4:	deffe004 	addi	sp,sp,-128
 4006eb8:	dfc01f15 	stw	ra,124(sp)
 4006ebc:	df001e15 	stw	fp,120(sp)
 4006ec0:	df001e04 	addi	fp,sp,120
 4006ec4:	e13ffc15 	stw	r4,-16(fp)
 4006ec8:	2809883a 	mov	r4,r5
 4006ecc:	3007883a 	mov	r3,r6
 4006ed0:	3805883a 	mov	r2,r7
 4006ed4:	e13ffd05 	stb	r4,-12(fp)
 4006ed8:	e0fffe05 	stb	r3,-8(fp)
 4006edc:	e0bfff05 	stb	r2,-4(fp)
        uint8_t    buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 4006ee0:	e0bfe944 	addi	r2,fp,-91
 4006ee4:	e0bfe515 	stw	r2,-108(fp)
        uint8_t    rcode;
        UsbDevice  *p = NULL;
 4006ee8:	e03fe615 	stw	zero,-104(fp)
        EpInfo     *oldep_ptr = NULL;
 4006eec:	e03fe715 	stw	zero,-100(fp)
        uint8_t    num_of_conf;  // number of configurations
        uint8_t  bConfNum = 0;    // configuration number
 4006ef0:	e03fe345 	stb	zero,-115(fp)
        uint8_t  bNumEP = 1;      // total number of EP in the configuration
 4006ef4:	00800044 	movi	r2,1
 4006ef8:	e0bfe385 	stb	r2,-114(fp)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
 4006efc:	00800044 	movi	r2,1
 4006f00:	e0bfe3c5 	stb	r2,-113(fp)
 4006f04:	e0bfe3c3 	ldbu	r2,-113(fp)
 4006f08:	108000e8 	cmpgeui	r2,r2,3
 4006f0c:	10001a1e 	bne	r2,zero,4006f78 <_ZN9USBH_MIDI4InitEhhb+0xc4>
                epInfo[i].bmSndToggle = 0;
 4006f10:	e0ffe3c3 	ldbu	r3,-113(fp)
 4006f14:	e13ffc17 	ldw	r4,-16(fp)
 4006f18:	1805883a 	mov	r2,r3
 4006f1c:	1085883a 	add	r2,r2,r2
 4006f20:	10c5883a 	add	r2,r2,r3
 4006f24:	2085883a 	add	r2,r4,r2
 4006f28:	10800404 	addi	r2,r2,16
 4006f2c:	11000143 	ldbu	r4,5(r2)
 4006f30:	00ffff84 	movi	r3,-2
 4006f34:	20c6703a 	and	r3,r4,r3
 4006f38:	10c00145 	stb	r3,5(r2)
                epInfo[i].bmRcvToggle = 0;
 4006f3c:	e0ffe3c3 	ldbu	r3,-113(fp)
 4006f40:	e13ffc17 	ldw	r4,-16(fp)
 4006f44:	1805883a 	mov	r2,r3
 4006f48:	1085883a 	add	r2,r2,r2
 4006f4c:	10c5883a 	add	r2,r2,r3
 4006f50:	2085883a 	add	r2,r4,r2
 4006f54:	10800404 	addi	r2,r2,16
 4006f58:	11000143 	ldbu	r4,5(r2)
 4006f5c:	00ffff44 	movi	r3,-3
 4006f60:	20c6703a 	and	r3,r4,r3
 4006f64:	10c00145 	stb	r3,5(r2)
#ifdef DEBUG_USB_HOST
        Notify(PSTR("USBH_MIDI version "), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 10000), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION / 100 % 100), 0x80), D_PrintHex((uint8_t) (USBH_MIDI_VERSION % 100), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif

        //for reconnect
        for(uint8_t i=epDataInIndex; i<=epDataOutIndex; i++) {
 4006f68:	e0bfe3c3 	ldbu	r2,-113(fp)
 4006f6c:	10800044 	addi	r2,r2,1
 4006f70:	e0bfe3c5 	stb	r2,-113(fp)
 4006f74:	003fe306 	br	4006f04 <__alt_data_end+0xfc006f04>
                // If you want to retry if you get a NAK response when sending, enable the following:
                // epInfo[i].bmNakPower  = (i==epDataOutIndex) ? 10 : USB_NAK_NOWAIT;
        }

        // get memory address of USB device address pool
        AddressPool &addrPool = pUsb->GetAddressPool();
 4006f78:	e0bffc17 	ldw	r2,-16(fp)
 4006f7c:	10800217 	ldw	r2,8(r2)
 4006f80:	1009883a 	mov	r4,r2
 4006f84:	40033400 	call	4003340 <_ZN3USB14GetAddressPoolEv>
 4006f88:	e0bfe815 	stw	r2,-96(fp)

        // check if address has already been assigned to an instance
        if (bAddress) {
 4006f8c:	e0bffc17 	ldw	r2,-16(fp)
 4006f90:	10800303 	ldbu	r2,12(r2)
 4006f94:	10803fcc 	andi	r2,r2,255
 4006f98:	10000226 	beq	r2,zero,4006fa4 <_ZN9USBH_MIDI4InitEhhb+0xf0>
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 4006f9c:	00bff644 	movi	r2,-39
 4006fa0:	0001c706 	br	40076c0 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(bAddress);
 4006fa4:	e0bfe817 	ldw	r2,-96(fp)
 4006fa8:	10800017 	ldw	r2,0(r2)
 4006fac:	10800017 	ldw	r2,0(r2)
 4006fb0:	e0fffc17 	ldw	r3,-16(fp)
 4006fb4:	18c00303 	ldbu	r3,12(r3)
 4006fb8:	18c03fcc 	andi	r3,r3,255
 4006fbc:	180b883a 	mov	r5,r3
 4006fc0:	e13fe817 	ldw	r4,-96(fp)
 4006fc4:	103ee83a 	callr	r2
 4006fc8:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
 4006fcc:	e0bfe617 	ldw	r2,-104(fp)
 4006fd0:	1000021e 	bne	r2,zero,4006fdc <_ZN9USBH_MIDI4InitEhhb+0x128>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 4006fd4:	00bff584 	movi	r2,-42
 4006fd8:	0001b906 	br	40076c0 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        if (!p->epinfo) {
 4006fdc:	e0bfe617 	ldw	r2,-104(fp)
 4006fe0:	10c00003 	ldbu	r3,0(r2)
 4006fe4:	11000043 	ldbu	r4,1(r2)
 4006fe8:	2008923a 	slli	r4,r4,8
 4006fec:	20c6b03a 	or	r3,r4,r3
 4006ff0:	11000083 	ldbu	r4,2(r2)
 4006ff4:	2008943a 	slli	r4,r4,16
 4006ff8:	20c6b03a 	or	r3,r4,r3
 4006ffc:	108000c3 	ldbu	r2,3(r2)
 4007000:	1004963a 	slli	r2,r2,24
 4007004:	10c4b03a 	or	r2,r2,r3
 4007008:	1000021e 	bne	r2,zero,4007014 <_ZN9USBH_MIDI4InitEhhb+0x160>
                return USB_ERROR_EPINFO_IS_NULL;
 400700c:	00bff5c4 	movi	r2,-41
 4007010:	0001ab06 	br	40076c0 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 4007014:	e0bfe617 	ldw	r2,-104(fp)
 4007018:	10c00003 	ldbu	r3,0(r2)
 400701c:	11000043 	ldbu	r4,1(r2)
 4007020:	2008923a 	slli	r4,r4,8
 4007024:	20c6b03a 	or	r3,r4,r3
 4007028:	11000083 	ldbu	r4,2(r2)
 400702c:	2008943a 	slli	r4,r4,16
 4007030:	20c6b03a 	or	r3,r4,r3
 4007034:	108000c3 	ldbu	r2,3(r2)
 4007038:	1004963a 	slli	r2,r2,24
 400703c:	10c4b03a 	or	r2,r2,r3
 4007040:	e0bfe715 	stw	r2,-100(fp)

        // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
        p->epinfo = epInfo;
 4007044:	e0bffc17 	ldw	r2,-16(fp)
 4007048:	10c004c4 	addi	r3,r2,19
 400704c:	e0bfe617 	ldw	r2,-104(fp)
 4007050:	19803fcc 	andi	r6,r3,255
 4007054:	11000003 	ldbu	r4,0(r2)
 4007058:	2008703a 	and	r4,r4,zero
 400705c:	200b883a 	mov	r5,r4
 4007060:	3009883a 	mov	r4,r6
 4007064:	2908b03a 	or	r4,r5,r4
 4007068:	11000005 	stb	r4,0(r2)
 400706c:	1808d23a 	srli	r4,r3,8
 4007070:	21803fcc 	andi	r6,r4,255
 4007074:	11000043 	ldbu	r4,1(r2)
 4007078:	2008703a 	and	r4,r4,zero
 400707c:	200b883a 	mov	r5,r4
 4007080:	3009883a 	mov	r4,r6
 4007084:	2908b03a 	or	r4,r5,r4
 4007088:	11000045 	stb	r4,1(r2)
 400708c:	1808d43a 	srli	r4,r3,16
 4007090:	21803fcc 	andi	r6,r4,255
 4007094:	11000083 	ldbu	r4,2(r2)
 4007098:	2008703a 	and	r4,r4,zero
 400709c:	200b883a 	mov	r5,r4
 40070a0:	3009883a 	mov	r4,r6
 40070a4:	2908b03a 	or	r4,r5,r4
 40070a8:	11000085 	stb	r4,2(r2)
 40070ac:	180ad63a 	srli	r5,r3,24
 40070b0:	10c000c3 	ldbu	r3,3(r2)
 40070b4:	1806703a 	and	r3,r3,zero
 40070b8:	1809883a 	mov	r4,r3
 40070bc:	2807883a 	mov	r3,r5
 40070c0:	20c6b03a 	or	r3,r4,r3
 40070c4:	10c000c5 	stb	r3,3(r2)
        p->lowspeed = lowspeed;
 40070c8:	e0bfe617 	ldw	r2,-104(fp)
 40070cc:	e0ffff03 	ldbu	r3,-4(fp)
 40070d0:	10c00185 	stb	r3,6(r2)

        // First Device Descriptor Request (Initially first 8 bytes)
        // https://techcommunity.microsoft.com/t5/microsoft-usb-blog/how-does-usb-stack-enumerate-a-device/ba-p/270685#_First_Device_Descriptor
        rcode = pUsb->getDevDescr( 0, 0, 8, (uint8_t*)buf );
 40070d4:	e0bffc17 	ldw	r2,-16(fp)
 40070d8:	10c00217 	ldw	r3,8(r2)
 40070dc:	e0bfe944 	addi	r2,fp,-91
 40070e0:	d8800015 	stw	r2,0(sp)
 40070e4:	01c00204 	movi	r7,8
 40070e8:	000d883a 	mov	r6,zero
 40070ec:	000b883a 	mov	r5,zero
 40070f0:	1809883a 	mov	r4,r3
 40070f4:	4002f6c0 	call	4002f6c <_ZN3USB11getDevDescrEhhtPh>
 40070f8:	e0bfe305 	stb	r2,-116(fp)

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 40070fc:	e0bfe617 	ldw	r2,-104(fp)
 4007100:	e0ffe717 	ldw	r3,-100(fp)
 4007104:	19403fcc 	andi	r5,r3,255
 4007108:	10c00003 	ldbu	r3,0(r2)
 400710c:	1806703a 	and	r3,r3,zero
 4007110:	1809883a 	mov	r4,r3
 4007114:	2807883a 	mov	r3,r5
 4007118:	20c6b03a 	or	r3,r4,r3
 400711c:	10c00005 	stb	r3,0(r2)
 4007120:	e0ffe717 	ldw	r3,-100(fp)
 4007124:	1806d23a 	srli	r3,r3,8
 4007128:	19403fcc 	andi	r5,r3,255
 400712c:	10c00043 	ldbu	r3,1(r2)
 4007130:	1806703a 	and	r3,r3,zero
 4007134:	1809883a 	mov	r4,r3
 4007138:	2807883a 	mov	r3,r5
 400713c:	20c6b03a 	or	r3,r4,r3
 4007140:	10c00045 	stb	r3,1(r2)
 4007144:	e0ffe717 	ldw	r3,-100(fp)
 4007148:	1806d43a 	srli	r3,r3,16
 400714c:	19403fcc 	andi	r5,r3,255
 4007150:	10c00083 	ldbu	r3,2(r2)
 4007154:	1806703a 	and	r3,r3,zero
 4007158:	1809883a 	mov	r4,r3
 400715c:	2807883a 	mov	r3,r5
 4007160:	20c6b03a 	or	r3,r4,r3
 4007164:	10c00085 	stb	r3,2(r2)
 4007168:	e0ffe717 	ldw	r3,-100(fp)
 400716c:	180ad63a 	srli	r5,r3,24
 4007170:	10c000c3 	ldbu	r3,3(r2)
 4007174:	1806703a 	and	r3,r3,zero
 4007178:	1809883a 	mov	r4,r3
 400717c:	2807883a 	mov	r3,r5
 4007180:	20c6b03a 	or	r3,r4,r3
 4007184:	10c000c5 	stb	r3,3(r2)

        if( rcode ){
 4007188:	e0bfe303 	ldbu	r2,-116(fp)
 400718c:	10013a1e 	bne	r2,zero,4007678 <_ZN9USBH_MIDI4InitEhhb+0x7c4>
                goto FailGetDevDescr;
        }

        // Allocate new address according to device class
        bAddress = addrPool.AllocAddress(parent, false, port);
 4007190:	e0bfe817 	ldw	r2,-96(fp)
 4007194:	10800017 	ldw	r2,0(r2)
 4007198:	10800104 	addi	r2,r2,4
 400719c:	10800017 	ldw	r2,0(r2)
 40071a0:	e0fffd03 	ldbu	r3,-12(fp)
 40071a4:	e13ffe03 	ldbu	r4,-8(fp)
 40071a8:	200f883a 	mov	r7,r4
 40071ac:	000d883a 	mov	r6,zero
 40071b0:	180b883a 	mov	r5,r3
 40071b4:	e13fe817 	ldw	r4,-96(fp)
 40071b8:	103ee83a 	callr	r2
 40071bc:	1007883a 	mov	r3,r2
 40071c0:	e0bffc17 	ldw	r2,-16(fp)
 40071c4:	10c00305 	stb	r3,12(r2)
        if (!bAddress) {
 40071c8:	e0bffc17 	ldw	r2,-16(fp)
 40071cc:	10800303 	ldbu	r2,12(r2)
 40071d0:	10803fcc 	andi	r2,r2,255
 40071d4:	1000021e 	bne	r2,zero,40071e0 <_ZN9USBH_MIDI4InitEhhb+0x32c>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 40071d8:	00bff504 	movi	r2,-44
 40071dc:	00013806 	br	40076c0 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }

        // Extract Max Packet Size from device descriptor
        epInfo[0].maxPktSize = udd->bMaxPacketSize0;
 40071e0:	e0bfe517 	ldw	r2,-108(fp)
 40071e4:	10c001c3 	ldbu	r3,7(r2)
 40071e8:	e0bffc17 	ldw	r2,-16(fp)
 40071ec:	10c00505 	stb	r3,20(r2)

        // Assign new address to the device
        rcode = pUsb->setAddr( 0, 0, bAddress );
 40071f0:	e0bffc17 	ldw	r2,-16(fp)
 40071f4:	10c00217 	ldw	r3,8(r2)
 40071f8:	e0bffc17 	ldw	r2,-16(fp)
 40071fc:	10800303 	ldbu	r2,12(r2)
 4007200:	10803fcc 	andi	r2,r2,255
 4007204:	100f883a 	mov	r7,r2
 4007208:	000d883a 	mov	r6,zero
 400720c:	000b883a 	mov	r5,zero
 4007210:	1809883a 	mov	r4,r3
 4007214:	40032280 	call	4003228 <_ZN3USB7setAddrEhhh>
 4007218:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
 400721c:	e0bfe303 	ldbu	r2,-116(fp)
 4007220:	10001026 	beq	r2,zero,4007264 <_ZN9USBH_MIDI4InitEhhb+0x3b0>
                p->lowspeed = false;
 4007224:	e0bfe617 	ldw	r2,-104(fp)
 4007228:	10000185 	stb	zero,6(r2)
                addrPool.FreeAddress(bAddress);
 400722c:	e0bfe817 	ldw	r2,-96(fp)
 4007230:	10800017 	ldw	r2,0(r2)
 4007234:	10800204 	addi	r2,r2,8
 4007238:	10800017 	ldw	r2,0(r2)
 400723c:	e0fffc17 	ldw	r3,-16(fp)
 4007240:	18c00303 	ldbu	r3,12(r3)
 4007244:	18c03fcc 	andi	r3,r3,255
 4007248:	180b883a 	mov	r5,r3
 400724c:	e13fe817 	ldw	r4,-96(fp)
 4007250:	103ee83a 	callr	r2
                bAddress = 0;
 4007254:	e0bffc17 	ldw	r2,-16(fp)
 4007258:	10000305 	stb	zero,12(r2)
                return rcode;
 400725c:	e0bfe303 	ldbu	r2,-116(fp)
 4007260:	00011706 	br	40076c0 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }//if (rcode...
        USBTRACE2("Addr:", bAddress);
 4007264:	e0bffc17 	ldw	r2,-16(fp)
 4007268:	10800303 	ldbu	r2,12(r2)
 400726c:	10803fcc 	andi	r2,r2,255
 4007270:	01402004 	movi	r5,128
 4007274:	1009883a 	mov	r4,r2
 4007278:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>

        p->lowspeed = false;
 400727c:	e0bfe617 	ldw	r2,-104(fp)
 4007280:	10000185 	stb	zero,6(r2)

        //get pointer to assigned address record
        p = addrPool.GetUsbDevicePtr(bAddress);
 4007284:	e0bfe817 	ldw	r2,-96(fp)
 4007288:	10800017 	ldw	r2,0(r2)
 400728c:	10800017 	ldw	r2,0(r2)
 4007290:	e0fffc17 	ldw	r3,-16(fp)
 4007294:	18c00303 	ldbu	r3,12(r3)
 4007298:	18c03fcc 	andi	r3,r3,255
 400729c:	180b883a 	mov	r5,r3
 40072a0:	e13fe817 	ldw	r4,-96(fp)
 40072a4:	103ee83a 	callr	r2
 40072a8:	e0bfe615 	stw	r2,-104(fp)
        if (!p) {
 40072ac:	e0bfe617 	ldw	r2,-104(fp)
 40072b0:	1000021e 	bne	r2,zero,40072bc <_ZN9USBH_MIDI4InitEhhb+0x408>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 40072b4:	00bff584 	movi	r2,-42
 40072b8:	00010106 	br	40076c0 <_ZN9USBH_MIDI4InitEhhb+0x80c>
        }
        p->lowspeed = lowspeed;
 40072bc:	e0bfe617 	ldw	r2,-104(fp)
 40072c0:	e0ffff03 	ldbu	r3,-4(fp)
 40072c4:	10c00185 	stb	r3,6(r2)

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
 40072c8:	e0bffc17 	ldw	r2,-16(fp)
 40072cc:	10c00217 	ldw	r3,8(r2)
 40072d0:	e0bffc17 	ldw	r2,-16(fp)
 40072d4:	10800303 	ldbu	r2,12(r2)
 40072d8:	11003fcc 	andi	r4,r2,255
 40072dc:	00800484 	movi	r2,18
 40072e0:	117fffcc 	andi	r5,r2,65535
 40072e4:	e0bfe944 	addi	r2,fp,-91
 40072e8:	d8800015 	stw	r2,0(sp)
 40072ec:	280f883a 	mov	r7,r5
 40072f0:	000d883a 	mov	r6,zero
 40072f4:	200b883a 	mov	r5,r4
 40072f8:	1809883a 	mov	r4,r3
 40072fc:	4002f6c0 	call	4002f6c <_ZN3USB11getDevDescrEhhtPh>
 4007300:	e0bfe305 	stb	r2,-116(fp)
        if( rcode ){
 4007304:	e0bfe303 	ldbu	r2,-116(fp)
 4007308:	1000dd1e 	bne	r2,zero,4007680 <_ZN9USBH_MIDI4InitEhhb+0x7cc>
                goto FailGetDevDescr;
        }
        vid = udd->idVendor;
 400730c:	e0bfe517 	ldw	r2,-108(fp)
 4007310:	10c00203 	ldbu	r3,8(r2)
 4007314:	10800243 	ldbu	r2,9(r2)
 4007318:	1004923a 	slli	r2,r2,8
 400731c:	10c4b03a 	or	r2,r2,r3
 4007320:	1007883a 	mov	r3,r2
 4007324:	e0bffc17 	ldw	r2,-16(fp)
 4007328:	10c0040d 	sth	r3,16(r2)
        pid = udd->idProduct;
 400732c:	e0bfe517 	ldw	r2,-108(fp)
 4007330:	10c00283 	ldbu	r3,10(r2)
 4007334:	108002c3 	ldbu	r2,11(r2)
 4007338:	1004923a 	slli	r2,r2,8
 400733c:	10c4b03a 	or	r2,r2,r3
 4007340:	1007883a 	mov	r3,r2
 4007344:	e0bffc17 	ldw	r2,-16(fp)
 4007348:	10c0038d 	sth	r3,14(r2)
        num_of_conf = udd->bNumConfigurations;
 400734c:	e0bfe517 	ldw	r2,-108(fp)
 4007350:	10800443 	ldbu	r2,17(r2)
 4007354:	e0bfe905 	stb	r2,-92(fp)

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
 4007358:	e0bffc17 	ldw	r2,-16(fp)
 400735c:	10c00217 	ldw	r3,8(r2)
 4007360:	e0bffc17 	ldw	r2,-16(fp)
 4007364:	10800303 	ldbu	r2,12(r2)
 4007368:	11003fcc 	andi	r4,r2,255
 400736c:	e0bffc17 	ldw	r2,-16(fp)
 4007370:	108004c4 	addi	r2,r2,19
 4007374:	100f883a 	mov	r7,r2
 4007378:	01800044 	movi	r6,1
 400737c:	200b883a 	mov	r5,r4
 4007380:	1809883a 	mov	r4,r3
 4007384:	400101c0 	call	400101c <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 4007388:	e0bfe305 	stb	r2,-116(fp)
        if (rcode) {
 400738c:	e0bfe303 	ldbu	r2,-116(fp)
 4007390:	1000bd1e 	bne	r2,zero,4007688 <_ZN9USBH_MIDI4InitEhhb+0x7d4>
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
        }

        USBTRACE("VID:"), D_PrintHex(vid, 0x80);
 4007394:	e0bffc17 	ldw	r2,-16(fp)
 4007398:	1080040b 	ldhu	r2,16(r2)
 400739c:	10bfffcc 	andi	r2,r2,65535
 40073a0:	01402004 	movi	r5,128
 40073a4:	1009883a 	mov	r4,r2
 40073a8:	4008cfc0 	call	4008cfc <_Z10D_PrintHexItEvT_i>
        USBTRACE(" PID:"), D_PrintHex(pid, 0x80);
 40073ac:	e0bffc17 	ldw	r2,-16(fp)
 40073b0:	1080038b 	ldhu	r2,14(r2)
 40073b4:	10bfffcc 	andi	r2,r2,65535
 40073b8:	01402004 	movi	r5,128
 40073bc:	1009883a 	mov	r4,r2
 40073c0:	4008cfc0 	call	4008cfc <_Z10D_PrintHexItEvT_i>
        USBTRACE2(" #Conf:", num_of_conf);
 40073c4:	e0bfe903 	ldbu	r2,-92(fp)
 40073c8:	01402004 	movi	r5,128
 40073cc:	1009883a 	mov	r4,r2
 40073d0:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>

        //Setup for well known vendor/device specific configuration
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
 40073d4:	e0bffc17 	ldw	r2,-16(fp)
 40073d8:	00c000c4 	movi	r3,3
 40073dc:	10c00485 	stb	r3,18(r2)
        setupDeviceSpecific();
 40073e0:	e13ffc17 	ldw	r4,-16(fp)
 40073e4:	40077740 	call	4007774 <_ZN9USBH_MIDI19setupDeviceSpecificEv>
        
        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
 40073e8:	e03fe405 	stb	zero,-112(fp)
 40073ec:	e0ffe403 	ldbu	r3,-112(fp)
 40073f0:	e0bfe903 	ldbu	r2,-92(fp)
 40073f4:	18802a2e 	bgeu	r3,r2,40074a0 <_ZN9USBH_MIDI4InitEhhb+0x5ec>
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
 40073f8:	e0bffc17 	ldw	r2,-16(fp)
 40073fc:	10c00104 	addi	r3,r2,4
 4007400:	e0bfee04 	addi	r2,fp,-72
 4007404:	01800044 	movi	r6,1
 4007408:	180b883a 	mov	r5,r3
 400740c:	1009883a 	mov	r4,r2
 4007410:	40082d80 	call	40082d8 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
 4007414:	e0bffc17 	ldw	r2,-16(fp)
 4007418:	10c00217 	ldw	r3,8(r2)
 400741c:	e0bffc17 	ldw	r2,-16(fp)
 4007420:	10800303 	ldbu	r2,12(r2)
 4007424:	11003fcc 	andi	r4,r2,255
 4007428:	e17fe403 	ldbu	r5,-112(fp)
 400742c:	e0bfee04 	addi	r2,fp,-72
 4007430:	d8800015 	stw	r2,0(sp)
 4007434:	280f883a 	mov	r7,r5
 4007438:	000d883a 	mov	r6,zero
 400743c:	200b883a 	mov	r5,r4
 4007440:	1809883a 	mov	r4,r3
 4007444:	40030880 	call	4003088 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 4007448:	e0bfe305 	stb	r2,-116(fp)
                if(rcode) // Check error code
 400744c:	e0bfe303 	ldbu	r2,-116(fp)
 4007450:	10008f1e 	bne	r2,zero,4007690 <_ZN9USBH_MIDI4InitEhhb+0x7dc>
                        goto FailGetConfDescr;
                bNumEP += midiDescParser.getNumEPs();
 4007454:	e0bfee04 	addi	r2,fp,-72
 4007458:	1009883a 	mov	r4,r2
 400745c:	4008be40 	call	4008be4 <_ZN14MidiDescParser9getNumEPsEv>
 4007460:	1007883a 	mov	r3,r2
 4007464:	e0bfe383 	ldbu	r2,-114(fp)
 4007468:	10c5883a 	add	r2,r2,r3
 400746c:	e0bfe385 	stb	r2,-114(fp)
                if(bNumEP > 1) {// All endpoints extracted
 4007470:	e0bfe383 	ldbu	r2,-114(fp)
 4007474:	108000b0 	cmpltui	r2,r2,2
 4007478:	1000051e 	bne	r2,zero,4007490 <_ZN9USBH_MIDI4InitEhhb+0x5dc>
                        bConfNum = midiDescParser.getConfValue();
 400747c:	e0bfee04 	addi	r2,fp,-72
 4007480:	1009883a 	mov	r4,r2
 4007484:	4008bbc0 	call	4008bbc <_ZN14MidiDescParser12getConfValueEv>
 4007488:	e0bfe345 	stb	r2,-115(fp)
 400748c:	00000406 	br	40074a0 <_ZN9USBH_MIDI4InitEhhb+0x5ec>
        bTransferTypeMask = bmUSB_TRANSFER_TYPE;
        setupDeviceSpecific();
        
        // STEP1: Check if attached device is a MIDI device and fill endpoint data structure
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
 4007490:	e0bfe403 	ldbu	r2,-112(fp)
 4007494:	10800044 	addi	r2,r2,1
 4007498:	e0bfe405 	stb	r2,-112(fp)
 400749c:	003fd306 	br	40073ec <__alt_data_end+0xfc0073ec>
                if(bNumEP > 1) {// All endpoints extracted
                        bConfNum = midiDescParser.getConfValue();
                        break;
                }
        }
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
 40074a0:	e0bfe383 	ldbu	r2,-114(fp)
 40074a4:	01402004 	movi	r5,128
 40074a8:	1009883a 	mov	r4,r2
 40074ac:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
 40074b0:	e0bfe383 	ldbu	r2,-114(fp)
 40074b4:	10800058 	cmpnei	r2,r2,1
 40074b8:	1000321e 	bne	r2,zero,4007584 <_ZN9USBH_MIDI4InitEhhb+0x6d0>
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
 40074bc:	e03fe445 	stb	zero,-111(fp)
 40074c0:	e0ffe443 	ldbu	r3,-111(fp)
 40074c4:	e0bfe903 	ldbu	r2,-92(fp)
 40074c8:	18802a2e 	bgeu	r3,r2,4007574 <_ZN9USBH_MIDI4InitEhhb+0x6c0>
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
 40074cc:	e0bffc17 	ldw	r2,-16(fp)
 40074d0:	10c00104 	addi	r3,r2,4
 40074d4:	e0bfee04 	addi	r2,fp,-72
 40074d8:	000d883a 	mov	r6,zero
 40074dc:	180b883a 	mov	r5,r3
 40074e0:	1009883a 	mov	r4,r2
 40074e4:	40082d80 	call	40082d8 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
 40074e8:	e0bffc17 	ldw	r2,-16(fp)
 40074ec:	10c00217 	ldw	r3,8(r2)
 40074f0:	e0bffc17 	ldw	r2,-16(fp)
 40074f4:	10800303 	ldbu	r2,12(r2)
 40074f8:	11003fcc 	andi	r4,r2,255
 40074fc:	e17fe443 	ldbu	r5,-111(fp)
 4007500:	e0bfee04 	addi	r2,fp,-72
 4007504:	d8800015 	stw	r2,0(sp)
 4007508:	280f883a 	mov	r7,r5
 400750c:	000d883a 	mov	r6,zero
 4007510:	200b883a 	mov	r5,r4
 4007514:	1809883a 	mov	r4,r3
 4007518:	40030880 	call	4003088 <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 400751c:	e0bfe305 	stb	r2,-116(fp)
                        if(rcode) // Check error code
 4007520:	e0bfe303 	ldbu	r2,-116(fp)
 4007524:	10005c1e 	bne	r2,zero,4007698 <_ZN9USBH_MIDI4InitEhhb+0x7e4>
                                goto FailGetConfDescr;
                        bNumEP += midiDescParser.getNumEPs();
 4007528:	e0bfee04 	addi	r2,fp,-72
 400752c:	1009883a 	mov	r4,r2
 4007530:	4008be40 	call	4008be4 <_ZN14MidiDescParser9getNumEPsEv>
 4007534:	1007883a 	mov	r3,r2
 4007538:	e0bfe383 	ldbu	r2,-114(fp)
 400753c:	10c5883a 	add	r2,r2,r3
 4007540:	e0bfe385 	stb	r2,-114(fp)
                        if(bNumEP > 1) {// All endpoints extracted
 4007544:	e0bfe383 	ldbu	r2,-114(fp)
 4007548:	108000b0 	cmpltui	r2,r2,2
 400754c:	1000051e 	bne	r2,zero,4007564 <_ZN9USBH_MIDI4InitEhhb+0x6b0>
                                bConfNum = midiDescParser.getConfValue();
 4007550:	e0bfee04 	addi	r2,fp,-72
 4007554:	1009883a 	mov	r4,r2
 4007558:	4008bbc0 	call	4008bbc <_ZN14MidiDescParser12getConfValueEv>
 400755c:	e0bfe345 	stb	r2,-115(fp)
 4007560:	00000406 	br	4007574 <_ZN9USBH_MIDI4InitEhhb+0x6c0>
        USBTRACE2("STEP1: MIDI,NumEP:", bNumEP);
        //Found the MIDI device?
        if( bNumEP == 1 ){  //Device not found.
                USBTRACE("MIDI not found.\r\nSTEP2: Attempts vendor specific bulk device\r\n");
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
 4007564:	e0bfe443 	ldbu	r2,-111(fp)
 4007568:	10800044 	addi	r2,r2,1
 400756c:	e0bfe445 	stb	r2,-111(fp)
 4007570:	003fd306 	br	40074c0 <__alt_data_end+0xfc0074c0>
                        if(bNumEP > 1) {// All endpoints extracted
                                bConfNum = midiDescParser.getConfValue();
                                break;
                        }
                }
                USBTRACE2("\r\nSTEP2: Vendor,NumEP:", bNumEP);
 4007574:	e0bfe383 	ldbu	r2,-114(fp)
 4007578:	01402004 	movi	r5,128
 400757c:	1009883a 	mov	r4,r2
 4007580:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>
        }

        if( bNumEP < 2 ){  //Device not found.
 4007584:	e0bfe383 	ldbu	r2,-114(fp)
 4007588:	108000a8 	cmpgeui	r2,r2,2
 400758c:	1000031e 	bne	r2,zero,400759c <_ZN9USBH_MIDI4InitEhhb+0x6e8>
                rcode = 0xff;
 4007590:	00bfffc4 	movi	r2,-1
 4007594:	e0bfe305 	stb	r2,-116(fp)
                goto FailGetConfDescr;
 4007598:	00004206 	br	40076a4 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        }

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 3, epInfo);
 400759c:	e0bffc17 	ldw	r2,-16(fp)
 40075a0:	10c00217 	ldw	r3,8(r2)
 40075a4:	e0bffc17 	ldw	r2,-16(fp)
 40075a8:	10800303 	ldbu	r2,12(r2)
 40075ac:	11003fcc 	andi	r4,r2,255
 40075b0:	e0bffc17 	ldw	r2,-16(fp)
 40075b4:	108004c4 	addi	r2,r2,19
 40075b8:	100f883a 	mov	r7,r2
 40075bc:	018000c4 	movi	r6,3
 40075c0:	200b883a 	mov	r5,r4
 40075c4:	1809883a 	mov	r4,r3
 40075c8:	400101c0 	call	400101c <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 40075cc:	e0bfe305 	stb	r2,-116(fp)
        USBTRACE2("Conf:", bConfNum);
 40075d0:	e0bfe343 	ldbu	r2,-115(fp)
 40075d4:	01402004 	movi	r5,128
 40075d8:	1009883a 	mov	r4,r2
 40075dc:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPin :", (uint8_t)(epInfo[epDataInIndex].epAddr + 0x80));
 40075e0:	e0bffc17 	ldw	r2,-16(fp)
 40075e4:	10800583 	ldbu	r2,22(r2)
 40075e8:	10bfe004 	addi	r2,r2,-128
 40075ec:	10803fcc 	andi	r2,r2,255
 40075f0:	01402004 	movi	r5,128
 40075f4:	1009883a 	mov	r4,r2
 40075f8:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);
 40075fc:	e0bffc17 	ldw	r2,-16(fp)
 4007600:	10800643 	ldbu	r2,25(r2)
 4007604:	10803fcc 	andi	r2,r2,255
 4007608:	01402004 	movi	r5,128
 400760c:	1009883a 	mov	r4,r2
 4007610:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
 4007614:	e0bffc17 	ldw	r2,-16(fp)
 4007618:	10c00217 	ldw	r3,8(r2)
 400761c:	e0bffc17 	ldw	r2,-16(fp)
 4007620:	10800303 	ldbu	r2,12(r2)
 4007624:	10803fcc 	andi	r2,r2,255
 4007628:	e13fe343 	ldbu	r4,-115(fp)
 400762c:	200f883a 	mov	r7,r4
 4007630:	000d883a 	mov	r6,zero
 4007634:	100b883a 	mov	r5,r2
 4007638:	1809883a 	mov	r4,r3
 400763c:	40032bc0 	call	40032bc <_ZN3USB7setConfEhhh>
 4007640:	e0bfe305 	stb	r2,-116(fp)
        if (rcode)
 4007644:	e0bfe303 	ldbu	r2,-116(fp)
 4007648:	1000151e 	bne	r2,zero,40076a0 <_ZN9USBH_MIDI4InitEhhb+0x7ec>
                goto FailSetConfDescr;

        bPollEnable = true;
 400764c:	e0bffc17 	ldw	r2,-16(fp)
 4007650:	00c00044 	movi	r3,1
 4007654:	10c00345 	stb	r3,13(r2)

        if(pFuncOnInit)
 4007658:	e0bffc17 	ldw	r2,-16(fp)
 400765c:	10801817 	ldw	r2,96(r2)
 4007660:	10000326 	beq	r2,zero,4007670 <_ZN9USBH_MIDI4InitEhhb+0x7bc>
                pFuncOnInit(); // Call the user function
 4007664:	e0bffc17 	ldw	r2,-16(fp)
 4007668:	10801817 	ldw	r2,96(r2)
 400766c:	103ee83a 	callr	r2

        USBTRACE("Init done.\r\n");
        return 0;
 4007670:	0005883a 	mov	r2,zero
 4007674:	00001206 	br	40076c0 <_ZN9USBH_MIDI4InitEhhb+0x80c>

        // Restore p->epinfo
        p->epinfo = oldep_ptr;

        if( rcode ){
                goto FailGetDevDescr;
 4007678:	0001883a 	nop
 400767c:	00000906 	br	40076a4 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        p->lowspeed = lowspeed;

        // Second Device Descriptor Request (Full)
        rcode = pUsb->getDevDescr( bAddress, 0, sizeof(USB_DEVICE_DESCRIPTOR), (uint8_t*)buf );
        if( rcode ){
                goto FailGetDevDescr;
 4007680:	0001883a 	nop
 4007684:	00000706 	br	40076a4 <_ZN9USBH_MIDI4InitEhhb+0x7f0>

        // Assign epInfo to epinfo pointer
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo);
        if (rcode) {
                USBTRACE("setEpInfoEntry failed");
                goto FailSetDevTblEntry;
 4007688:	0001883a 	nop
 400768c:	00000506 	br	40076a4 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE("\r\nSTEP1: MIDI Start\r\n");
        for(uint8_t i = 0; i < num_of_conf; i++) {
                MidiDescParser midiDescParser(this, true);  // Check for MIDI device
                rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                if(rcode) // Check error code
                        goto FailGetConfDescr;
 4007690:	0001883a 	nop
 4007694:	00000306 	br	40076a4 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
                // STEP2: Check if attached device is a MIDI device and fill endpoint data structure
                for(uint8_t i = 0; i < num_of_conf; i++) {
                        MidiDescParser midiDescParser(this, false); // Allow all devices, vendor specific class with Bulk transfer
                        rcode = pUsb->getConfDescr(bAddress, 0, i, &midiDescParser);
                        if(rcode) // Check error code
                                goto FailGetConfDescr;
 4007698:	0001883a 	nop
 400769c:	00000106 	br	40076a4 <_ZN9USBH_MIDI4InitEhhb+0x7f0>
        USBTRACE2("EPout:", epInfo[epDataOutIndex].epAddr);

        // Set Configuration Value
        rcode = pUsb->setConf(bAddress, 0, bConfNum);
        if (rcode)
                goto FailSetConfDescr;
 40076a0:	0001883a 	nop
        return 0;
FailGetDevDescr:
FailSetDevTblEntry:
FailGetConfDescr:
FailSetConfDescr:
        Release();
 40076a4:	e0bffc17 	ldw	r2,-16(fp)
 40076a8:	10800017 	ldw	r2,0(r2)
 40076ac:	10800204 	addi	r2,r2,8
 40076b0:	10800017 	ldw	r2,0(r2)
 40076b4:	e13ffc17 	ldw	r4,-16(fp)
 40076b8:	103ee83a 	callr	r2
        return rcode;
 40076bc:	e0bfe303 	ldbu	r2,-116(fp)
}
 40076c0:	e037883a 	mov	sp,fp
 40076c4:	dfc00117 	ldw	ra,4(sp)
 40076c8:	df000017 	ldw	fp,0(sp)
 40076cc:	dec00204 	addi	sp,sp,8
 40076d0:	f800283a 	ret

040076d4 <_ZN9USBH_MIDI7ReleaseEv>:

/* Performs a cleanup after failed Init() attempt */
uint8_t USBH_MIDI::Release()
{
 40076d4:	defffd04 	addi	sp,sp,-12
 40076d8:	dfc00215 	stw	ra,8(sp)
 40076dc:	df000115 	stw	fp,4(sp)
 40076e0:	df000104 	addi	fp,sp,4
 40076e4:	e13fff15 	stw	r4,-4(fp)
        if(pFuncOnRelease && bPollEnable)
 40076e8:	e0bfff17 	ldw	r2,-4(fp)
 40076ec:	10801917 	ldw	r2,100(r2)
 40076f0:	10000726 	beq	r2,zero,4007710 <_ZN9USBH_MIDI7ReleaseEv+0x3c>
 40076f4:	e0bfff17 	ldw	r2,-4(fp)
 40076f8:	10800343 	ldbu	r2,13(r2)
 40076fc:	10803fcc 	andi	r2,r2,255
 4007700:	10000326 	beq	r2,zero,4007710 <_ZN9USBH_MIDI7ReleaseEv+0x3c>
                pFuncOnRelease(); // Call the user function
 4007704:	e0bfff17 	ldw	r2,-4(fp)
 4007708:	10801917 	ldw	r2,100(r2)
 400770c:	103ee83a 	callr	r2

        pUsb->GetAddressPool().FreeAddress(bAddress);
 4007710:	e0bfff17 	ldw	r2,-4(fp)
 4007714:	10800217 	ldw	r2,8(r2)
 4007718:	1009883a 	mov	r4,r2
 400771c:	40033400 	call	4003340 <_ZN3USB14GetAddressPoolEv>
 4007720:	1009883a 	mov	r4,r2
 4007724:	20800017 	ldw	r2,0(r4)
 4007728:	10800204 	addi	r2,r2,8
 400772c:	10800017 	ldw	r2,0(r2)
 4007730:	e0ffff17 	ldw	r3,-4(fp)
 4007734:	18c00303 	ldbu	r3,12(r3)
 4007738:	18c03fcc 	andi	r3,r3,255
 400773c:	180b883a 	mov	r5,r3
 4007740:	103ee83a 	callr	r2
        bAddress     = 0;
 4007744:	e0bfff17 	ldw	r2,-4(fp)
 4007748:	10000305 	stb	zero,12(r2)
        bPollEnable  = false;
 400774c:	e0bfff17 	ldw	r2,-4(fp)
 4007750:	10000345 	stb	zero,13(r2)
        readPtr      = 0;
 4007754:	e0bfff17 	ldw	r2,-4(fp)
 4007758:	10001705 	stb	zero,92(r2)

        return 0;
 400775c:	0005883a 	mov	r2,zero
}
 4007760:	e037883a 	mov	sp,fp
 4007764:	dfc00117 	ldw	ra,4(sp)
 4007768:	df000017 	ldw	fp,0(sp)
 400776c:	dec00204 	addi	sp,sp,8
 4007770:	f800283a 	ret

04007774 <_ZN9USBH_MIDI19setupDeviceSpecificEv>:

/* Setup for well known vendor/device specific configuration */
void USBH_MIDI::setupDeviceSpecific()
{
 4007774:	defffe04 	addi	sp,sp,-8
 4007778:	df000115 	stw	fp,4(sp)
 400777c:	df000104 	addi	fp,sp,4
 4007780:	e13fff15 	stw	r4,-4(fp)
        // Novation
        if( vid == 0x1235 ) {
 4007784:	e0bfff17 	ldw	r2,-4(fp)
 4007788:	1080040b 	ldhu	r2,16(r2)
 400778c:	10bfffcc 	andi	r2,r2,65535
 4007790:	10848d58 	cmpnei	r2,r2,4661
 4007794:	10004e1e 	bne	r2,zero,40078d0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x15c>
                // LaunchPad and LaunchKey endpoint attribute is interrupt 
                // https://github.com/YuuichiAkagawa/USBH_MIDI/wiki/Novation-USB-Product-ID-List

                // LaunchPad: 0x20:S, 0x36:Mini, 0x51:Pro, 0x69:MK2
                if( pid == 0x20 || pid == 0x36 || pid == 0x51 || pid == 0x69 ) {
 4007798:	e0bfff17 	ldw	r2,-4(fp)
 400779c:	1080038b 	ldhu	r2,14(r2)
 40077a0:	10bfffcc 	andi	r2,r2,65535
 40077a4:	10800820 	cmpeqi	r2,r2,32
 40077a8:	10000f1e 	bne	r2,zero,40077e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
 40077ac:	e0bfff17 	ldw	r2,-4(fp)
 40077b0:	1080038b 	ldhu	r2,14(r2)
 40077b4:	10bfffcc 	andi	r2,r2,65535
 40077b8:	10800da0 	cmpeqi	r2,r2,54
 40077bc:	10000a1e 	bne	r2,zero,40077e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
 40077c0:	e0bfff17 	ldw	r2,-4(fp)
 40077c4:	1080038b 	ldhu	r2,14(r2)
 40077c8:	10bfffcc 	andi	r2,r2,65535
 40077cc:	10801460 	cmpeqi	r2,r2,81
 40077d0:	1000051e 	bne	r2,zero,40077e8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x74>
 40077d4:	e0bfff17 	ldw	r2,-4(fp)
 40077d8:	1080038b 	ldhu	r2,14(r2)
 40077dc:	10bfffcc 	andi	r2,r2,65535
 40077e0:	10801a58 	cmpnei	r2,r2,105
 40077e4:	1000041e 	bne	r2,zero,40077f8 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x84>
                        bTransferTypeMask = 2;
 40077e8:	e0bfff17 	ldw	r2,-4(fp)
 40077ec:	00c00084 	movi	r3,2
 40077f0:	10c00485 	stb	r3,18(r2)
                        return;
 40077f4:	00003606 	br	40078d0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x15c>
                }

                // LaunchKey: 0x30-32,  0x35:Mini, 0x7B-0x7D:MK2, 0x0102,0x113-0x122:MiniMk3, 0x134-0x137:MK3
                if( (0x30 <= pid && pid <= 0x32) || pid == 0x35 || (0x7B <= pid && pid <= 0x7D) 
 40077f8:	e0bfff17 	ldw	r2,-4(fp)
 40077fc:	1080038b 	ldhu	r2,14(r2)
 4007800:	10bfffcc 	andi	r2,r2,65535
 4007804:	10800c30 	cmpltui	r2,r2,48
 4007808:	1000051e 	bne	r2,zero,4007820 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xac>
 400780c:	e0bfff17 	ldw	r2,-4(fp)
 4007810:	1080038b 	ldhu	r2,14(r2)
 4007814:	10bfffcc 	andi	r2,r2,65535
 4007818:	10800cf0 	cmpltui	r2,r2,51
 400781c:	1000281e 	bne	r2,zero,40078c0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x14c>
 4007820:	e0bfff17 	ldw	r2,-4(fp)
 4007824:	1080038b 	ldhu	r2,14(r2)
 4007828:	10bfffcc 	andi	r2,r2,65535
 400782c:	10800d60 	cmpeqi	r2,r2,53
 4007830:	1000231e 	bne	r2,zero,40078c0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x14c>
 4007834:	e0bfff17 	ldw	r2,-4(fp)
 4007838:	1080038b 	ldhu	r2,14(r2)
 400783c:	10bfffcc 	andi	r2,r2,65535
 4007840:	10801ef0 	cmpltui	r2,r2,123
 4007844:	1000051e 	bne	r2,zero,400785c <_ZN9USBH_MIDI19setupDeviceSpecificEv+0xe8>
 4007848:	e0bfff17 	ldw	r2,-4(fp)
 400784c:	1080038b 	ldhu	r2,14(r2)
 4007850:	10bfffcc 	andi	r2,r2,65535
 4007854:	10801fb0 	cmpltui	r2,r2,126
 4007858:	1000191e 	bne	r2,zero,40078c0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x14c>
                  || pid == 0x102 || (0x113 <= pid && pid <= 0x122) || (0x134 <= pid && pid <= 0x137) ) {
 400785c:	e0bfff17 	ldw	r2,-4(fp)
 4007860:	1080038b 	ldhu	r2,14(r2)
 4007864:	10bfffcc 	andi	r2,r2,65535
 4007868:	108040a0 	cmpeqi	r2,r2,258
 400786c:	1000141e 	bne	r2,zero,40078c0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x14c>
 4007870:	e0bfff17 	ldw	r2,-4(fp)
 4007874:	1080038b 	ldhu	r2,14(r2)
 4007878:	10bfffcc 	andi	r2,r2,65535
 400787c:	108044f0 	cmpltui	r2,r2,275
 4007880:	1000051e 	bne	r2,zero,4007898 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x124>
 4007884:	e0bfff17 	ldw	r2,-4(fp)
 4007888:	1080038b 	ldhu	r2,14(r2)
 400788c:	10bfffcc 	andi	r2,r2,65535
 4007890:	108048f0 	cmpltui	r2,r2,291
 4007894:	10000a1e 	bne	r2,zero,40078c0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x14c>
 4007898:	e0bfff17 	ldw	r2,-4(fp)
 400789c:	1080038b 	ldhu	r2,14(r2)
 40078a0:	10bfffcc 	andi	r2,r2,65535
 40078a4:	10804d30 	cmpltui	r2,r2,308
 40078a8:	1000091e 	bne	r2,zero,40078d0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x15c>
 40078ac:	e0bfff17 	ldw	r2,-4(fp)
 40078b0:	1080038b 	ldhu	r2,14(r2)
 40078b4:	10bfffcc 	andi	r2,r2,65535
 40078b8:	10804e28 	cmpgeui	r2,r2,312
 40078bc:	1000041e 	bne	r2,zero,40078d0 <_ZN9USBH_MIDI19setupDeviceSpecificEv+0x15c>
                        bTransferTypeMask = 2;
 40078c0:	e0bfff17 	ldw	r2,-4(fp)
 40078c4:	00c00084 	movi	r3,2
 40078c8:	10c00485 	stb	r3,18(r2)
                        return;
 40078cc:	0001883a 	nop
                }
        }
}
 40078d0:	e037883a 	mov	sp,fp
 40078d4:	df000017 	ldw	fp,0(sp)
 40078d8:	dec00104 	addi	sp,sp,4
 40078dc:	f800283a 	ret

040078e0 <_ZN9USBH_MIDI8RecvDataEPtPh>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint16_t *bytes_rcvd, uint8_t *dataptr)
{
 40078e0:	defff804 	addi	sp,sp,-32
 40078e4:	dfc00715 	stw	ra,28(sp)
 40078e8:	df000615 	stw	fp,24(sp)
 40078ec:	df000604 	addi	fp,sp,24
 40078f0:	e13ffd15 	stw	r4,-12(fp)
 40078f4:	e17ffe15 	stw	r5,-8(fp)
 40078f8:	e1bfff15 	stw	r6,-4(fp)
        *bytes_rcvd = (uint16_t)epInfo[epDataInIndex].maxPktSize;
 40078fc:	e0bffd17 	ldw	r2,-12(fp)
 4007900:	108005c3 	ldbu	r2,23(r2)
 4007904:	10c03fcc 	andi	r3,r2,255
 4007908:	e0bffe17 	ldw	r2,-8(fp)
 400790c:	10c0000d 	sth	r3,0(r2)
        uint8_t  r = pUsb->inTransfer(bAddress, epInfo[epDataInIndex].epAddr, bytes_rcvd, dataptr);
 4007910:	e0bffd17 	ldw	r2,-12(fp)
 4007914:	10c00217 	ldw	r3,8(r2)
 4007918:	e0bffd17 	ldw	r2,-12(fp)
 400791c:	10800303 	ldbu	r2,12(r2)
 4007920:	11003fcc 	andi	r4,r2,255
 4007924:	e0bffd17 	ldw	r2,-12(fp)
 4007928:	10800583 	ldbu	r2,22(r2)
 400792c:	11403fcc 	andi	r5,r2,255
 4007930:	d8000115 	stw	zero,4(sp)
 4007934:	e0bfff17 	ldw	r2,-4(fp)
 4007938:	d8800015 	stw	r2,0(sp)
 400793c:	e1fffe17 	ldw	r7,-8(fp)
 4007940:	280d883a 	mov	r6,r5
 4007944:	200b883a 	mov	r5,r4
 4007948:	1809883a 	mov	r4,r3
 400794c:	40015d40 	call	40015d4 <_ZN3USB10inTransferEhhPtPhh>
 4007950:	e0bffc05 	stb	r2,-16(fp)
#ifdef EXTRADEBUG
        if( r )
                USBTRACE2("inTransfer():", r);
#endif
        if( *bytes_rcvd < (MIDI_EVENT_PACKET_SIZE-4)){
 4007954:	e0bffe17 	ldw	r2,-8(fp)
 4007958:	1080000b 	ldhu	r2,0(r2)
 400795c:	10bfffcc 	andi	r2,r2,65535
 4007960:	10800f28 	cmpgeui	r2,r2,60
 4007964:	10000d1e 	bne	r2,zero,400799c <_ZN9USBH_MIDI8RecvDataEPtPh+0xbc>
                dataptr[*bytes_rcvd]     = '\0';
 4007968:	e0bffe17 	ldw	r2,-8(fp)
 400796c:	1080000b 	ldhu	r2,0(r2)
 4007970:	10bfffcc 	andi	r2,r2,65535
 4007974:	e0ffff17 	ldw	r3,-4(fp)
 4007978:	1885883a 	add	r2,r3,r2
 400797c:	10000005 	stb	zero,0(r2)
                dataptr[(*bytes_rcvd)+1] = '\0';
 4007980:	e0bffe17 	ldw	r2,-8(fp)
 4007984:	1080000b 	ldhu	r2,0(r2)
 4007988:	10bfffcc 	andi	r2,r2,65535
 400798c:	10800044 	addi	r2,r2,1
 4007990:	e0ffff17 	ldw	r3,-4(fp)
 4007994:	1885883a 	add	r2,r3,r2
 4007998:	10000005 	stb	zero,0(r2)
        }
        return r;
 400799c:	e0bffc03 	ldbu	r2,-16(fp)
}
 40079a0:	e037883a 	mov	sp,fp
 40079a4:	dfc00117 	ldw	ra,4(sp)
 40079a8:	df000017 	ldw	fp,0(sp)
 40079ac:	dec00204 	addi	sp,sp,8
 40079b0:	f800283a 	ret

040079b4 <_ZN9USBH_MIDI8RecvDataEPhb>:

/* Receive data from MIDI device */
uint8_t USBH_MIDI::RecvData(uint8_t *outBuf, bool isRaw)
{
 40079b4:	defff904 	addi	sp,sp,-28
 40079b8:	dfc00615 	stw	ra,24(sp)
 40079bc:	df000515 	stw	fp,20(sp)
 40079c0:	df000504 	addi	fp,sp,20
 40079c4:	e13ffd15 	stw	r4,-12(fp)
 40079c8:	e17ffe15 	stw	r5,-8(fp)
 40079cc:	3005883a 	mov	r2,r6
 40079d0:	e0bfff05 	stb	r2,-4(fp)
        uint8_t rcode = 0;     //return code
 40079d4:	e03ffb05 	stb	zero,-20(fp)
        uint16_t  rcvd;

        if( bPollEnable == false ) return 0;
 40079d8:	e0bffd17 	ldw	r2,-12(fp)
 40079dc:	10800343 	ldbu	r2,13(r2)
 40079e0:	1080005c 	xori	r2,r2,1
 40079e4:	10803fcc 	andi	r2,r2,255
 40079e8:	10000226 	beq	r2,zero,40079f4 <_ZN9USBH_MIDI8RecvDataEPhb+0x40>
 40079ec:	0005883a 	mov	r2,zero
 40079f0:	00008506 	br	4007c08 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>

        //Checking unprocessed message in buffer.
        if( readPtr != 0 && readPtr < MIDI_EVENT_PACKET_SIZE ){
 40079f4:	e0bffd17 	ldw	r2,-12(fp)
 40079f8:	10801703 	ldbu	r2,92(r2)
 40079fc:	10803fcc 	andi	r2,r2,255
 4007a00:	10001826 	beq	r2,zero,4007a64 <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
 4007a04:	e0bffd17 	ldw	r2,-12(fp)
 4007a08:	10801703 	ldbu	r2,92(r2)
 4007a0c:	10803fcc 	andi	r2,r2,255
 4007a10:	10801028 	cmpgeui	r2,r2,64
 4007a14:	1000131e 	bne	r2,zero,4007a64 <_ZN9USBH_MIDI8RecvDataEPhb+0xb0>
                if(recvBuf[readPtr] == 0 && recvBuf[readPtr+1] == 0) {
 4007a18:	e0bffd17 	ldw	r2,-12(fp)
 4007a1c:	10801703 	ldbu	r2,92(r2)
 4007a20:	10803fcc 	andi	r2,r2,255
 4007a24:	e0fffd17 	ldw	r3,-12(fp)
 4007a28:	1885883a 	add	r2,r3,r2
 4007a2c:	10800704 	addi	r2,r2,28
 4007a30:	10800003 	ldbu	r2,0(r2)
 4007a34:	10803fcc 	andi	r2,r2,255
 4007a38:	10002a1e 	bne	r2,zero,4007ae4 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
 4007a3c:	e0bffd17 	ldw	r2,-12(fp)
 4007a40:	10801703 	ldbu	r2,92(r2)
 4007a44:	10803fcc 	andi	r2,r2,255
 4007a48:	10800044 	addi	r2,r2,1
 4007a4c:	e0fffd17 	ldw	r3,-12(fp)
 4007a50:	1885883a 	add	r2,r3,r2
 4007a54:	10800704 	addi	r2,r2,28
 4007a58:	10800003 	ldbu	r2,0(r2)
 4007a5c:	10803fcc 	andi	r2,r2,255
 4007a60:	1000201e 	bne	r2,zero,4007ae4 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                }else{
                        goto RecvData_return_from_buffer;
                }
        }

        readPtr = 0;
 4007a64:	e0bffd17 	ldw	r2,-12(fp)
 4007a68:	10001705 	stb	zero,92(r2)
        rcode = RecvData( &rcvd, recvBuf);
 4007a6c:	e0bffd17 	ldw	r2,-12(fp)
 4007a70:	10c00704 	addi	r3,r2,28
 4007a74:	e0bffc04 	addi	r2,fp,-16
 4007a78:	180d883a 	mov	r6,r3
 4007a7c:	100b883a 	mov	r5,r2
 4007a80:	e13ffd17 	ldw	r4,-12(fp)
 4007a84:	40078e00 	call	40078e0 <_ZN9USBH_MIDI8RecvDataEPtPh>
 4007a88:	e0bffb05 	stb	r2,-20(fp)
        if( rcode != 0 ) {
 4007a8c:	e0bffb03 	ldbu	r2,-20(fp)
 4007a90:	10000226 	beq	r2,zero,4007a9c <_ZN9USBH_MIDI8RecvDataEPhb+0xe8>
                return 0;
 4007a94:	0005883a 	mov	r2,zero
 4007a98:	00005b06 	br	4007c08 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

        //if all data is zero, no valid data received.
        if( recvBuf[0] == 0 && recvBuf[1] == 0 && recvBuf[2] == 0 && recvBuf[3] == 0 ) {
 4007a9c:	e0bffd17 	ldw	r2,-12(fp)
 4007aa0:	10800703 	ldbu	r2,28(r2)
 4007aa4:	10803fcc 	andi	r2,r2,255
 4007aa8:	10000e1e 	bne	r2,zero,4007ae4 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
 4007aac:	e0bffd17 	ldw	r2,-12(fp)
 4007ab0:	10800743 	ldbu	r2,29(r2)
 4007ab4:	10803fcc 	andi	r2,r2,255
 4007ab8:	10000a1e 	bne	r2,zero,4007ae4 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
 4007abc:	e0bffd17 	ldw	r2,-12(fp)
 4007ac0:	10800783 	ldbu	r2,30(r2)
 4007ac4:	10803fcc 	andi	r2,r2,255
 4007ac8:	1000061e 	bne	r2,zero,4007ae4 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
 4007acc:	e0bffd17 	ldw	r2,-12(fp)
 4007ad0:	108007c3 	ldbu	r2,31(r2)
 4007ad4:	10803fcc 	andi	r2,r2,255
 4007ad8:	1000021e 	bne	r2,zero,4007ae4 <_ZN9USBH_MIDI8RecvDataEPhb+0x130>
                return 0;
 4007adc:	0005883a 	mov	r2,zero
 4007ae0:	00004906 	br	4007c08 <_ZN9USBH_MIDI8RecvDataEPhb+0x254>
        }

RecvData_return_from_buffer:
        uint8_t m;
        uint8_t cin = recvBuf[readPtr];
 4007ae4:	e0bffd17 	ldw	r2,-12(fp)
 4007ae8:	10801703 	ldbu	r2,92(r2)
 4007aec:	10803fcc 	andi	r2,r2,255
 4007af0:	e0fffd17 	ldw	r3,-12(fp)
 4007af4:	1885883a 	add	r2,r3,r2
 4007af8:	10800704 	addi	r2,r2,28
 4007afc:	10800003 	ldbu	r2,0(r2)
 4007b00:	e0bffb45 	stb	r2,-19(fp)
        if( isRaw == true ) {
 4007b04:	e0bfff03 	ldbu	r2,-4(fp)
 4007b08:	10000526 	beq	r2,zero,4007b20 <_ZN9USBH_MIDI8RecvDataEPhb+0x16c>
                *(outBuf++) = cin;
 4007b0c:	e0bffe17 	ldw	r2,-8(fp)
 4007b10:	10c00044 	addi	r3,r2,1
 4007b14:	e0fffe15 	stw	r3,-8(fp)
 4007b18:	e0fffb43 	ldbu	r3,-19(fp)
 4007b1c:	10c00005 	stb	r3,0(r2)
        }
        readPtr++;
 4007b20:	e0bffd17 	ldw	r2,-12(fp)
 4007b24:	10801703 	ldbu	r2,92(r2)
 4007b28:	10800044 	addi	r2,r2,1
 4007b2c:	1007883a 	mov	r3,r2
 4007b30:	e0bffd17 	ldw	r2,-12(fp)
 4007b34:	10c01705 	stb	r3,92(r2)
        *(outBuf++) = m = recvBuf[readPtr++];
 4007b38:	e0bffe17 	ldw	r2,-8(fp)
 4007b3c:	10c00044 	addi	r3,r2,1
 4007b40:	e0fffe15 	stw	r3,-8(fp)
 4007b44:	e0fffd17 	ldw	r3,-12(fp)
 4007b48:	18c01703 	ldbu	r3,92(r3)
 4007b4c:	19000044 	addi	r4,r3,1
 4007b50:	200b883a 	mov	r5,r4
 4007b54:	e13ffd17 	ldw	r4,-12(fp)
 4007b58:	21401705 	stb	r5,92(r4)
 4007b5c:	18c03fcc 	andi	r3,r3,255
 4007b60:	e13ffd17 	ldw	r4,-12(fp)
 4007b64:	20c7883a 	add	r3,r4,r3
 4007b68:	18c00704 	addi	r3,r3,28
 4007b6c:	18c00003 	ldbu	r3,0(r3)
 4007b70:	e0fffb85 	stb	r3,-18(fp)
 4007b74:	e0fffb83 	ldbu	r3,-18(fp)
 4007b78:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
 4007b7c:	e0bffe17 	ldw	r2,-8(fp)
 4007b80:	10c00044 	addi	r3,r2,1
 4007b84:	e0fffe15 	stw	r3,-8(fp)
 4007b88:	e0fffd17 	ldw	r3,-12(fp)
 4007b8c:	18c01703 	ldbu	r3,92(r3)
 4007b90:	19000044 	addi	r4,r3,1
 4007b94:	200b883a 	mov	r5,r4
 4007b98:	e13ffd17 	ldw	r4,-12(fp)
 4007b9c:	21401705 	stb	r5,92(r4)
 4007ba0:	18c03fcc 	andi	r3,r3,255
 4007ba4:	e13ffd17 	ldw	r4,-12(fp)
 4007ba8:	20c7883a 	add	r3,r4,r3
 4007bac:	18c00704 	addi	r3,r3,28
 4007bb0:	18c00003 	ldbu	r3,0(r3)
 4007bb4:	10c00005 	stb	r3,0(r2)
        *(outBuf++) =     recvBuf[readPtr++];
 4007bb8:	e0bffe17 	ldw	r2,-8(fp)
 4007bbc:	10c00044 	addi	r3,r2,1
 4007bc0:	e0fffe15 	stw	r3,-8(fp)
 4007bc4:	e0fffd17 	ldw	r3,-12(fp)
 4007bc8:	18c01703 	ldbu	r3,92(r3)
 4007bcc:	19000044 	addi	r4,r3,1
 4007bd0:	200b883a 	mov	r5,r4
 4007bd4:	e13ffd17 	ldw	r4,-12(fp)
 4007bd8:	21401705 	stb	r5,92(r4)
 4007bdc:	18c03fcc 	andi	r3,r3,255
 4007be0:	e13ffd17 	ldw	r4,-12(fp)
 4007be4:	20c7883a 	add	r3,r4,r3
 4007be8:	18c00704 	addi	r3,r3,28
 4007bec:	18c00003 	ldbu	r3,0(r3)
 4007bf0:	10c00005 	stb	r3,0(r2)

        return getMsgSizeFromCin(cin & 0x0f);
 4007bf4:	e0bffb43 	ldbu	r2,-19(fp)
 4007bf8:	108003cc 	andi	r2,r2,15
 4007bfc:	100b883a 	mov	r5,r2
 4007c00:	e13ffd17 	ldw	r4,-12(fp)
 4007c04:	4008c640 	call	4008c64 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
 4007c08:	e037883a 	mov	sp,fp
 4007c0c:	dfc00117 	ldw	ra,4(sp)
 4007c10:	df000017 	ldw	fp,0(sp)
 4007c14:	dec00204 	addi	sp,sp,8
 4007c18:	f800283a 	ret

04007c1c <_ZN9USBH_MIDI8SendDataEPhh>:

/* Send data to MIDI device */
uint8_t USBH_MIDI::SendData(uint8_t *dataptr, uint8_t nCable)
{
 4007c1c:	defff804 	addi	sp,sp,-32
 4007c20:	dfc00715 	stw	ra,28(sp)
 4007c24:	df000615 	stw	fp,24(sp)
 4007c28:	df000604 	addi	fp,sp,24
 4007c2c:	e13ffd15 	stw	r4,-12(fp)
 4007c30:	e17ffe15 	stw	r5,-8(fp)
 4007c34:	3005883a 	mov	r2,r6
 4007c38:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[4];
        uint8_t status = dataptr[0];
 4007c3c:	e0bffe17 	ldw	r2,-8(fp)
 4007c40:	10800003 	ldbu	r2,0(r2)
 4007c44:	e0bffb05 	stb	r2,-20(fp)

        uint8_t cin =  convertStatus2Cin(status);
 4007c48:	e0bffb03 	ldbu	r2,-20(fp)
 4007c4c:	100b883a 	mov	r5,r2
 4007c50:	e13ffd17 	ldw	r4,-12(fp)
 4007c54:	4008c0c0 	call	4008c0c <_ZN9USBH_MIDI17convertStatus2CinEh>
 4007c58:	e0bffb45 	stb	r2,-19(fp)
        if ( status == 0xf0 ) {
 4007c5c:	e0bffb03 	ldbu	r2,-20(fp)
 4007c60:	10803c18 	cmpnei	r2,r2,240
 4007c64:	10000b1e 	bne	r2,zero,4007c94 <_ZN9USBH_MIDI8SendDataEPhh+0x78>
                // SysEx long message
                return SendSysEx(dataptr, countSysExDataSize(dataptr), nCable);
 4007c68:	e17ffe17 	ldw	r5,-8(fp)
 4007c6c:	e13ffd17 	ldw	r4,-12(fp)
 4007c70:	4007ddc0 	call	4007ddc <_ZN9USBH_MIDI18countSysExDataSizeEPh>
 4007c74:	10bfffcc 	andi	r2,r2,65535
 4007c78:	e0ffff03 	ldbu	r3,-4(fp)
 4007c7c:	180f883a 	mov	r7,r3
 4007c80:	100d883a 	mov	r6,r2
 4007c84:	e17ffe17 	ldw	r5,-8(fp)
 4007c88:	e13ffd17 	ldw	r4,-12(fp)
 4007c8c:	4007e640 	call	4007e64 <_ZN9USBH_MIDI9SendSysExEPhth>
 4007c90:	00003406 	br	4007d64 <_ZN9USBH_MIDI8SendDataEPhh+0x148>
        }

        //Building USB-MIDI Event Packets
        buf[0] = (uint8_t)(nCable << 4) | cin;
 4007c94:	e0bfff03 	ldbu	r2,-4(fp)
 4007c98:	1004913a 	slli	r2,r2,4
 4007c9c:	1007883a 	mov	r3,r2
 4007ca0:	e0bffb43 	ldbu	r2,-19(fp)
 4007ca4:	1884b03a 	or	r2,r3,r2
 4007ca8:	e0bffbc5 	stb	r2,-17(fp)
        buf[1] = dataptr[0];
 4007cac:	e0bffe17 	ldw	r2,-8(fp)
 4007cb0:	10800003 	ldbu	r2,0(r2)
 4007cb4:	e0bffc05 	stb	r2,-16(fp)

        uint8_t msglen = getMsgSizeFromCin(cin);
 4007cb8:	e0bffb43 	ldbu	r2,-19(fp)
 4007cbc:	100b883a 	mov	r5,r2
 4007cc0:	e13ffd17 	ldw	r4,-12(fp)
 4007cc4:	4008c640 	call	4008c64 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
 4007cc8:	e0bffb85 	stb	r2,-18(fp)
        switch(msglen) {
 4007ccc:	e0bffb83 	ldbu	r2,-18(fp)
 4007cd0:	10c000a0 	cmpeqi	r3,r2,2
 4007cd4:	18000c1e 	bne	r3,zero,4007d08 <_ZN9USBH_MIDI8SendDataEPhh+0xec>
 4007cd8:	10c000e0 	cmpeqi	r3,r2,3
 4007cdc:	1800031e 	bne	r3,zero,4007cec <_ZN9USBH_MIDI8SendDataEPhh+0xd0>
 4007ce0:	10800060 	cmpeqi	r2,r2,1
 4007ce4:	10000d1e 	bne	r2,zero,4007d1c <_ZN9USBH_MIDI8SendDataEPhh+0x100>
          case 1 :
                buf[2] = 0;
                buf[3] = 0;
                break;
          default :
                break;
 4007ce8:	00000f06 	br	4007d28 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

        uint8_t msglen = getMsgSizeFromCin(cin);
        switch(msglen) {
          //3 bytes message
          case 3 :
                buf[2] = dataptr[1];
 4007cec:	e0bffe17 	ldw	r2,-8(fp)
 4007cf0:	10800043 	ldbu	r2,1(r2)
 4007cf4:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = dataptr[2];
 4007cf8:	e0bffe17 	ldw	r2,-8(fp)
 4007cfc:	10800083 	ldbu	r2,2(r2)
 4007d00:	e0bffc85 	stb	r2,-14(fp)
                break;
 4007d04:	00000806 	br	4007d28 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //2 bytes message
          case 2 :
                buf[2] = dataptr[1];
 4007d08:	e0bffe17 	ldw	r2,-8(fp)
 4007d0c:	10800043 	ldbu	r2,1(r2)
 4007d10:	e0bffc45 	stb	r2,-15(fp)
                buf[3] = 0;
 4007d14:	e03ffc85 	stb	zero,-14(fp)
                break;
 4007d18:	00000306 	br	4007d28 <_ZN9USBH_MIDI8SendDataEPhh+0x10c>

          //1 byte message
          case 1 :
                buf[2] = 0;
 4007d1c:	e03ffc45 	stb	zero,-15(fp)
                buf[3] = 0;
 4007d20:	e03ffc85 	stb	zero,-14(fp)
                break;
 4007d24:	0001883a 	nop
        }
#ifdef EXTRADEBUG
        //Dump for raw USB-MIDI event packet
        Notify(PSTR("SendData():"), 0x80), D_PrintHex((buf[0]), 0x80), D_PrintHex((buf[1]), 0x80), D_PrintHex((buf[2]), 0x80), D_PrintHex((buf[3]), 0x80), Notify(PSTR("\r\n"), 0x80);
#endif
        return pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, 4, buf);
 4007d28:	e0bffd17 	ldw	r2,-12(fp)
 4007d2c:	10c00217 	ldw	r3,8(r2)
 4007d30:	e0bffd17 	ldw	r2,-12(fp)
 4007d34:	10800303 	ldbu	r2,12(r2)
 4007d38:	11003fcc 	andi	r4,r2,255
 4007d3c:	e0bffd17 	ldw	r2,-12(fp)
 4007d40:	10800643 	ldbu	r2,25(r2)
 4007d44:	11403fcc 	andi	r5,r2,255
 4007d48:	e0bffbc4 	addi	r2,fp,-17
 4007d4c:	d8800015 	stw	r2,0(sp)
 4007d50:	01c00104 	movi	r7,4
 4007d54:	280d883a 	mov	r6,r5
 4007d58:	200b883a 	mov	r5,r4
 4007d5c:	1809883a 	mov	r4,r3
 4007d60:	40019680 	call	4001968 <_ZN3USB11outTransferEhhtPh>
}
 4007d64:	e037883a 	mov	sp,fp
 4007d68:	dfc00117 	ldw	ra,4(sp)
 4007d6c:	df000017 	ldw	fp,0(sp)
 4007d70:	dec00204 	addi	sp,sp,8
 4007d74:	f800283a 	ret

04007d78 <_ZN9USBH_MIDI13lookupMsgSizeEhh>:
/*Return                                 */
/*  0 : undefined message                */
/*  0<: Vaild message size(1-3)          */
//uint8_t USBH_MIDI::lookupMsgSize(uint8_t midiMsg, uint8_t cin)
uint8_t USBH_MIDI::lookupMsgSize(uint8_t status, uint8_t cin)
{
 4007d78:	defffb04 	addi	sp,sp,-20
 4007d7c:	dfc00415 	stw	ra,16(sp)
 4007d80:	df000315 	stw	fp,12(sp)
 4007d84:	df000304 	addi	fp,sp,12
 4007d88:	e13ffd15 	stw	r4,-12(fp)
 4007d8c:	2807883a 	mov	r3,r5
 4007d90:	3005883a 	mov	r2,r6
 4007d94:	e0fffe05 	stb	r3,-8(fp)
 4007d98:	e0bfff05 	stb	r2,-4(fp)
        if( cin == 0 ){
 4007d9c:	e0bfff03 	ldbu	r2,-4(fp)
 4007da0:	1000051e 	bne	r2,zero,4007db8 <_ZN9USBH_MIDI13lookupMsgSizeEhh+0x40>
                cin =  convertStatus2Cin(status);
 4007da4:	e0bffe03 	ldbu	r2,-8(fp)
 4007da8:	100b883a 	mov	r5,r2
 4007dac:	e13ffd17 	ldw	r4,-12(fp)
 4007db0:	4008c0c0 	call	4008c0c <_ZN9USBH_MIDI17convertStatus2CinEh>
 4007db4:	e0bfff05 	stb	r2,-4(fp)
        }
        return getMsgSizeFromCin(cin);
 4007db8:	e0bfff03 	ldbu	r2,-4(fp)
 4007dbc:	100b883a 	mov	r5,r2
 4007dc0:	e13ffd17 	ldw	r4,-12(fp)
 4007dc4:	4008c640 	call	4008c64 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>
}
 4007dc8:	e037883a 	mov	sp,fp
 4007dcc:	dfc00117 	ldw	ra,4(sp)
 4007dd0:	df000017 	ldw	fp,0(sp)
 4007dd4:	dec00204 	addi	sp,sp,8
 4007dd8:	f800283a 	ret

04007ddc <_ZN9USBH_MIDI18countSysExDataSizeEPh>:

/* SysEx data size counter */
uint16_t USBH_MIDI::countSysExDataSize(uint8_t *dataptr)
{
 4007ddc:	defffc04 	addi	sp,sp,-16
 4007de0:	df000315 	stw	fp,12(sp)
 4007de4:	df000304 	addi	fp,sp,12
 4007de8:	e13ffe15 	stw	r4,-8(fp)
 4007dec:	e17fff15 	stw	r5,-4(fp)
        uint16_t c = 1;
 4007df0:	00800044 	movi	r2,1
 4007df4:	e0bffd0d 	sth	r2,-12(fp)

        if( *dataptr != 0xf0 ){ //not SysEx
 4007df8:	e0bfff17 	ldw	r2,-4(fp)
 4007dfc:	10800003 	ldbu	r2,0(r2)
 4007e00:	10803fcc 	andi	r2,r2,255
 4007e04:	10803c20 	cmpeqi	r2,r2,240
 4007e08:	1000021e 	bne	r2,zero,4007e14 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x38>
                return 0;
 4007e0c:	0005883a 	mov	r2,zero
 4007e10:	00001006 	br	4007e54 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x78>
        }

        //Search terminator(0xf7)
        while(*dataptr != 0xf7) {
 4007e14:	e0bfff17 	ldw	r2,-4(fp)
 4007e18:	10800003 	ldbu	r2,0(r2)
 4007e1c:	10803fcc 	andi	r2,r2,255
 4007e20:	10803de0 	cmpeqi	r2,r2,247
 4007e24:	10000a1e 	bne	r2,zero,4007e50 <_ZN9USBH_MIDI18countSysExDataSizeEPh+0x74>
                dataptr++;
 4007e28:	e0bfff17 	ldw	r2,-4(fp)
 4007e2c:	10800044 	addi	r2,r2,1
 4007e30:	e0bfff15 	stw	r2,-4(fp)
                c++;
 4007e34:	e0bffd0b 	ldhu	r2,-12(fp)
 4007e38:	10800044 	addi	r2,r2,1
 4007e3c:	e0bffd0d 	sth	r2,-12(fp)
                //Limiter (default: 256 bytes)
                if(c > MIDI_MAX_SYSEX_SIZE){
 4007e40:	e0bffd0b 	ldhu	r2,-12(fp)
 4007e44:	10804070 	cmpltui	r2,r2,257
 4007e48:	103ff21e 	bne	r2,zero,4007e14 <__alt_data_end+0xfc007e14>
                        c = 0;
 4007e4c:	e03ffd0d 	sth	zero,-12(fp)
                        break;
                }
        }
        return c;
 4007e50:	e0bffd0b 	ldhu	r2,-12(fp)
}
 4007e54:	e037883a 	mov	sp,fp
 4007e58:	df000017 	ldw	fp,0(sp)
 4007e5c:	dec00104 	addi	sp,sp,4
 4007e60:	f800283a 	ret

04007e64 <_ZN9USBH_MIDI9SendSysExEPhth>:

/* Send SysEx message to MIDI device */
uint8_t USBH_MIDI::SendSysEx(uint8_t *dataptr, uint16_t datasize, uint8_t nCable)
{
 4007e64:	deffe704 	addi	sp,sp,-100
 4007e68:	dfc01815 	stw	ra,96(sp)
 4007e6c:	df001715 	stw	fp,92(sp)
 4007e70:	df001704 	addi	fp,sp,92
 4007e74:	e13ffc15 	stw	r4,-16(fp)
 4007e78:	e17ffd15 	stw	r5,-12(fp)
 4007e7c:	3007883a 	mov	r3,r6
 4007e80:	3805883a 	mov	r2,r7
 4007e84:	e0fffe0d 	sth	r3,-8(fp)
 4007e88:	e0bfff05 	stb	r2,-4(fp)
        uint8_t buf[MIDI_EVENT_PACKET_SIZE];
        uint8_t rc = 0;
 4007e8c:	e03fea05 	stb	zero,-88(fp)
        uint16_t n = datasize;
 4007e90:	e0bffe0b 	ldhu	r2,-8(fp)
 4007e94:	e0bfea8d 	sth	r2,-86(fp)
        uint8_t wptr = 0;
 4007e98:	e03feb05 	stb	zero,-84(fp)
        uint8_t maxpkt = epInfo[epDataInIndex].maxPktSize;
 4007e9c:	e0bffc17 	ldw	r2,-16(fp)
 4007ea0:	108005c3 	ldbu	r2,23(r2)
 4007ea4:	e0bfeb45 	stb	r2,-83(fp)

        USBTRACE("SendSysEx:\r\t");
        USBTRACE2(" Length:\t", datasize);
 4007ea8:	e0bffe0b 	ldhu	r2,-8(fp)
 4007eac:	01402004 	movi	r5,128
 4007eb0:	1009883a 	mov	r4,r2
 4007eb4:	4008cfc0 	call	4008cfc <_Z10D_PrintHexItEvT_i>
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
 4007eb8:	e0bfea8b 	ldhu	r2,-86(fp)
 4007ebc:	1000b026 	beq	r2,zero,4008180 <_ZN9USBH_MIDI9SendSysExEPhth+0x31c>
                //Byte 0
                buf[wptr] = (nCable << 4) | 0x4;             //x4 SysEx starts or continues
 4007ec0:	e0bfeb03 	ldbu	r2,-84(fp)
 4007ec4:	e0ffff03 	ldbu	r3,-4(fp)
 4007ec8:	1806913a 	slli	r3,r3,4
 4007ecc:	18c00114 	ori	r3,r3,4
 4007ed0:	1809883a 	mov	r4,r3
 4007ed4:	e0ffeb84 	addi	r3,fp,-82
 4007ed8:	1885883a 	add	r2,r3,r2
 4007edc:	11000005 	stb	r4,0(r2)

                switch ( n ) {
 4007ee0:	e0bfea8b 	ldhu	r2,-86(fp)
 4007ee4:	10c000a0 	cmpeqi	r3,r2,2
 4007ee8:	18002a1e 	bne	r3,zero,4007f94 <_ZN9USBH_MIDI9SendSysExEPhth+0x130>
 4007eec:	10c000e0 	cmpeqi	r3,r2,3
 4007ef0:	1800521e 	bne	r3,zero,400803c <_ZN9USBH_MIDI9SendSysExEPhth+0x1d8>
 4007ef4:	10800060 	cmpeqi	r2,r2,1
 4007ef8:	10005826 	beq	r2,zero,400805c <_ZN9USBH_MIDI9SendSysExEPhth+0x1f8>
                    case 1 :
                        buf[wptr++] = (nCable << 4) | 0x5;   //x5 SysEx ends with following single byte.
 4007efc:	e0bfeb03 	ldbu	r2,-84(fp)
 4007f00:	10c00044 	addi	r3,r2,1
 4007f04:	e0ffeb05 	stb	r3,-84(fp)
 4007f08:	10803fcc 	andi	r2,r2,255
 4007f0c:	e0ffff03 	ldbu	r3,-4(fp)
 4007f10:	1806913a 	slli	r3,r3,4
 4007f14:	18c00154 	ori	r3,r3,5
 4007f18:	1809883a 	mov	r4,r3
 4007f1c:	e0ffeb84 	addi	r3,fp,-82
 4007f20:	1885883a 	add	r2,r3,r2
 4007f24:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
 4007f28:	e0bfeb03 	ldbu	r2,-84(fp)
 4007f2c:	10c00044 	addi	r3,r2,1
 4007f30:	e0ffeb05 	stb	r3,-84(fp)
 4007f34:	11003fcc 	andi	r4,r2,255
 4007f38:	e0bffd17 	ldw	r2,-12(fp)
 4007f3c:	10c00044 	addi	r3,r2,1
 4007f40:	e0fffd15 	stw	r3,-12(fp)
 4007f44:	10c00003 	ldbu	r3,0(r2)
 4007f48:	e0bfeb84 	addi	r2,fp,-82
 4007f4c:	1105883a 	add	r2,r2,r4
 4007f50:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
 4007f54:	e0bfeb03 	ldbu	r2,-84(fp)
 4007f58:	10c00044 	addi	r3,r2,1
 4007f5c:	e0ffeb05 	stb	r3,-84(fp)
 4007f60:	10803fcc 	andi	r2,r2,255
 4007f64:	e0ffeb84 	addi	r3,fp,-82
 4007f68:	1885883a 	add	r2,r3,r2
 4007f6c:	10000005 	stb	zero,0(r2)
                        buf[wptr++] = 0x00;
 4007f70:	e0bfeb03 	ldbu	r2,-84(fp)
 4007f74:	10c00044 	addi	r3,r2,1
 4007f78:	e0ffeb05 	stb	r3,-84(fp)
 4007f7c:	10803fcc 	andi	r2,r2,255
 4007f80:	e0ffeb84 	addi	r3,fp,-82
 4007f84:	1885883a 	add	r2,r3,r2
 4007f88:	10000005 	stb	zero,0(r2)
                        n = 0;
 4007f8c:	e03fea8d 	sth	zero,-86(fp)
                        break;
 4007f90:	00005a06 	br	40080fc <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 2 :
                        buf[wptr++] = (nCable << 4) | 0x6;   //x6 SysEx ends with following two bytes.
 4007f94:	e0bfeb03 	ldbu	r2,-84(fp)
 4007f98:	10c00044 	addi	r3,r2,1
 4007f9c:	e0ffeb05 	stb	r3,-84(fp)
 4007fa0:	10803fcc 	andi	r2,r2,255
 4007fa4:	e0ffff03 	ldbu	r3,-4(fp)
 4007fa8:	1806913a 	slli	r3,r3,4
 4007fac:	18c00194 	ori	r3,r3,6
 4007fb0:	1809883a 	mov	r4,r3
 4007fb4:	e0ffeb84 	addi	r3,fp,-82
 4007fb8:	1885883a 	add	r2,r3,r2
 4007fbc:	11000005 	stb	r4,0(r2)
                        buf[wptr++] = *(dataptr++);
 4007fc0:	e0bfeb03 	ldbu	r2,-84(fp)
 4007fc4:	10c00044 	addi	r3,r2,1
 4007fc8:	e0ffeb05 	stb	r3,-84(fp)
 4007fcc:	11003fcc 	andi	r4,r2,255
 4007fd0:	e0bffd17 	ldw	r2,-12(fp)
 4007fd4:	10c00044 	addi	r3,r2,1
 4007fd8:	e0fffd15 	stw	r3,-12(fp)
 4007fdc:	10c00003 	ldbu	r3,0(r2)
 4007fe0:	e0bfeb84 	addi	r2,fp,-82
 4007fe4:	1105883a 	add	r2,r2,r4
 4007fe8:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
 4007fec:	e0bfeb03 	ldbu	r2,-84(fp)
 4007ff0:	10c00044 	addi	r3,r2,1
 4007ff4:	e0ffeb05 	stb	r3,-84(fp)
 4007ff8:	11003fcc 	andi	r4,r2,255
 4007ffc:	e0bffd17 	ldw	r2,-12(fp)
 4008000:	10c00044 	addi	r3,r2,1
 4008004:	e0fffd15 	stw	r3,-12(fp)
 4008008:	10c00003 	ldbu	r3,0(r2)
 400800c:	e0bfeb84 	addi	r2,fp,-82
 4008010:	1105883a 	add	r2,r2,r4
 4008014:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = 0x00;
 4008018:	e0bfeb03 	ldbu	r2,-84(fp)
 400801c:	10c00044 	addi	r3,r2,1
 4008020:	e0ffeb05 	stb	r3,-84(fp)
 4008024:	10803fcc 	andi	r2,r2,255
 4008028:	e0ffeb84 	addi	r3,fp,-82
 400802c:	1885883a 	add	r2,r3,r2
 4008030:	10000005 	stb	zero,0(r2)
                        n = 0;
 4008034:	e03fea8d 	sth	zero,-86(fp)
                        break;
 4008038:	00003006 	br	40080fc <_ZN9USBH_MIDI9SendSysExEPhth+0x298>
                    case 3 :
                        buf[wptr]   = (nCable << 4) | 0x7;   //x7 SysEx ends with following three bytes.
 400803c:	e0bfeb03 	ldbu	r2,-84(fp)
 4008040:	e0ffff03 	ldbu	r3,-4(fp)
 4008044:	1806913a 	slli	r3,r3,4
 4008048:	18c001d4 	ori	r3,r3,7
 400804c:	1809883a 	mov	r4,r3
 4008050:	e0ffeb84 	addi	r3,fp,-82
 4008054:	1885883a 	add	r2,r3,r2
 4008058:	11000005 	stb	r4,0(r2)
                        // fall through
                    default :
                        wptr++;
 400805c:	e0bfeb03 	ldbu	r2,-84(fp)
 4008060:	10800044 	addi	r2,r2,1
 4008064:	e0bfeb05 	stb	r2,-84(fp)
                        buf[wptr++] = *(dataptr++);
 4008068:	e0bfeb03 	ldbu	r2,-84(fp)
 400806c:	10c00044 	addi	r3,r2,1
 4008070:	e0ffeb05 	stb	r3,-84(fp)
 4008074:	11003fcc 	andi	r4,r2,255
 4008078:	e0bffd17 	ldw	r2,-12(fp)
 400807c:	10c00044 	addi	r3,r2,1
 4008080:	e0fffd15 	stw	r3,-12(fp)
 4008084:	10c00003 	ldbu	r3,0(r2)
 4008088:	e0bfeb84 	addi	r2,fp,-82
 400808c:	1105883a 	add	r2,r2,r4
 4008090:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
 4008094:	e0bfeb03 	ldbu	r2,-84(fp)
 4008098:	10c00044 	addi	r3,r2,1
 400809c:	e0ffeb05 	stb	r3,-84(fp)
 40080a0:	11003fcc 	andi	r4,r2,255
 40080a4:	e0bffd17 	ldw	r2,-12(fp)
 40080a8:	10c00044 	addi	r3,r2,1
 40080ac:	e0fffd15 	stw	r3,-12(fp)
 40080b0:	10c00003 	ldbu	r3,0(r2)
 40080b4:	e0bfeb84 	addi	r2,fp,-82
 40080b8:	1105883a 	add	r2,r2,r4
 40080bc:	10c00005 	stb	r3,0(r2)
                        buf[wptr++] = *(dataptr++);
 40080c0:	e0bfeb03 	ldbu	r2,-84(fp)
 40080c4:	10c00044 	addi	r3,r2,1
 40080c8:	e0ffeb05 	stb	r3,-84(fp)
 40080cc:	11003fcc 	andi	r4,r2,255
 40080d0:	e0bffd17 	ldw	r2,-12(fp)
 40080d4:	10c00044 	addi	r3,r2,1
 40080d8:	e0fffd15 	stw	r3,-12(fp)
 40080dc:	10c00003 	ldbu	r3,0(r2)
 40080e0:	e0bfeb84 	addi	r2,fp,-82
 40080e4:	1105883a 	add	r2,r2,r4
 40080e8:	10c00005 	stb	r3,0(r2)
                        n = n - 3;
 40080ec:	e0bfea8b 	ldhu	r2,-86(fp)
 40080f0:	10bfff44 	addi	r2,r2,-3
 40080f4:	e0bfea8d 	sth	r2,-86(fp)
                        break;
 40080f8:	0001883a 	nop
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
 40080fc:	e0ffeb03 	ldbu	r3,-84(fp)
 4008100:	e0bfeb43 	ldbu	r2,-83(fp)
 4008104:	1880022e 	bgeu	r3,r2,4008110 <_ZN9USBH_MIDI9SendSysExEPhth+0x2ac>
 4008108:	e0bfea8b 	ldhu	r2,-86(fp)
 400810c:	103f6a1e 	bne	r2,zero,4007eb8 <__alt_data_end+0xfc007eb8>
                        USBTRACE2(" wptr:\t", wptr);
 4008110:	e0bfeb03 	ldbu	r2,-84(fp)
 4008114:	01402004 	movi	r5,128
 4008118:	1009883a 	mov	r4,r2
 400811c:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
 4008120:	e0bffc17 	ldw	r2,-16(fp)
 4008124:	10c00217 	ldw	r3,8(r2)
 4008128:	e0bffc17 	ldw	r2,-16(fp)
 400812c:	10800303 	ldbu	r2,12(r2)
 4008130:	11003fcc 	andi	r4,r2,255
 4008134:	e0bffc17 	ldw	r2,-16(fp)
 4008138:	10800643 	ldbu	r2,25(r2)
 400813c:	11403fcc 	andi	r5,r2,255
 4008140:	e1bfeb03 	ldbu	r6,-84(fp)
 4008144:	e0bfeb84 	addi	r2,fp,-82
 4008148:	d8800015 	stw	r2,0(sp)
 400814c:	300f883a 	mov	r7,r6
 4008150:	280d883a 	mov	r6,r5
 4008154:	200b883a 	mov	r5,r4
 4008158:	1809883a 	mov	r4,r3
 400815c:	40019680 	call	4001968 <_ZN3USB11outTransferEhhtPh>
 4008160:	e0bfea05 	stb	r2,-88(fp)
 4008164:	e0bfea03 	ldbu	r2,-88(fp)
 4008168:	1004c03a 	cmpne	r2,r2,zero
 400816c:	10803fcc 	andi	r2,r2,255
 4008170:	1000021e 	bne	r2,zero,400817c <_ZN9USBH_MIDI9SendSysExEPhth+0x318>
                                break;
                        }
                        wptr = 0;  //rewind write pointer
 4008174:	e03feb05 	stb	zero,-84(fp)
#ifdef EXTRADEBUG
        uint16_t pktSize = (n+2)/3;   //Calculate total USB MIDI packet size
        USBTRACE2(" Total pktSize:\t", pktSize);
#endif

        while(n > 0) {
 4008178:	003f4f06 	br	4007eb8 <__alt_data_end+0xfc007eb8>
                }

                if( wptr >= maxpkt || n == 0 ){ //Reach a maxPktSize or data end.
                        USBTRACE2(" wptr:\t", wptr);
                        if( (rc = pUsb->outTransfer(bAddress, epInfo[epDataOutIndex].epAddr, wptr, buf)) != 0 ){
                                break;
 400817c:	0001883a 	nop
                        }
                        wptr = 0;  //rewind write pointer
                }
        }
        return(rc);
 4008180:	e0bfea03 	ldbu	r2,-88(fp)
}
 4008184:	e037883a 	mov	sp,fp
 4008188:	dfc00117 	ldw	ra,4(sp)
 400818c:	df000017 	ldw	fp,0(sp)
 4008190:	dec00204 	addi	sp,sp,8
 4008194:	f800283a 	ret

04008198 <_ZN9USBH_MIDI16extractSysExDataEPhS0_>:

uint8_t USBH_MIDI::extractSysExData(uint8_t *p, uint8_t *buf)
{
 4008198:	defffb04 	addi	sp,sp,-20
 400819c:	df000415 	stw	fp,16(sp)
 40081a0:	df000404 	addi	fp,sp,16
 40081a4:	e13ffd15 	stw	r4,-12(fp)
 40081a8:	e17ffe15 	stw	r5,-8(fp)
 40081ac:	e1bfff15 	stw	r6,-4(fp)
        uint8_t rc = 0;
 40081b0:	e03ffc05 	stb	zero,-16(fp)
        uint8_t cin = *(p) & 0x0f;
 40081b4:	e0bffe17 	ldw	r2,-8(fp)
 40081b8:	10800003 	ldbu	r2,0(r2)
 40081bc:	108003cc 	andi	r2,r2,15
 40081c0:	e0bffc45 	stb	r2,-15(fp)

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;
 40081c4:	e0bffc43 	ldbu	r2,-15(fp)
 40081c8:	1080030c 	andi	r2,r2,12
 40081cc:	10800120 	cmpeqi	r2,r2,4
 40081d0:	1000021e 	bne	r2,zero,40081dc <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x44>
 40081d4:	e0bffc03 	ldbu	r2,-16(fp)
 40081d8:	00003b06 	br	40082c8 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x130>

        switch(cin) {
 40081dc:	e0bffc43 	ldbu	r2,-15(fp)
 40081e0:	10c00160 	cmpeqi	r3,r2,5
 40081e4:	18002e1e 	bne	r3,zero,40082a0 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x108>
 40081e8:	10c00188 	cmpgei	r3,r2,6
 40081ec:	1800031e 	bne	r3,zero,40081fc <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x64>
 40081f0:	10800120 	cmpeqi	r2,r2,4
 40081f4:	1000061e 	bne	r2,zero,4008210 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
 40081f8:	00003206 	br	40082c4 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        uint8_t cin = *(p) & 0x0f;

        //SysEx message?
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
 40081fc:	10c001a0 	cmpeqi	r3,r2,6
 4008200:	1800181e 	bne	r3,zero,4008264 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0xcc>
 4008204:	108001e0 	cmpeqi	r2,r2,7
 4008208:	1000011e 	bne	r2,zero,4008210 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x78>
            case 5:
                *buf++ = *(p+1);
                rc = 1;
                break;
            default:
                break;
 400820c:	00002d06 	br	40082c4 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
        if( (cin & 0xc) != 4 ) return rc;

        switch(cin) {
            case 4:
            case 7:
                *buf++ = *(p+1);
 4008210:	e0bfff17 	ldw	r2,-4(fp)
 4008214:	10c00044 	addi	r3,r2,1
 4008218:	e0ffff15 	stw	r3,-4(fp)
 400821c:	e0fffe17 	ldw	r3,-8(fp)
 4008220:	18c00043 	ldbu	r3,1(r3)
 4008224:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
 4008228:	e0bfff17 	ldw	r2,-4(fp)
 400822c:	10c00044 	addi	r3,r2,1
 4008230:	e0ffff15 	stw	r3,-4(fp)
 4008234:	e0fffe17 	ldw	r3,-8(fp)
 4008238:	18c00083 	ldbu	r3,2(r3)
 400823c:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+3);
 4008240:	e0bfff17 	ldw	r2,-4(fp)
 4008244:	10c00044 	addi	r3,r2,1
 4008248:	e0ffff15 	stw	r3,-4(fp)
 400824c:	e0fffe17 	ldw	r3,-8(fp)
 4008250:	18c000c3 	ldbu	r3,3(r3)
 4008254:	10c00005 	stb	r3,0(r2)
                rc = 3;
 4008258:	008000c4 	movi	r2,3
 400825c:	e0bffc05 	stb	r2,-16(fp)
                break;
 4008260:	00001806 	br	40082c4 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 6:
                *buf++ = *(p+1);
 4008264:	e0bfff17 	ldw	r2,-4(fp)
 4008268:	10c00044 	addi	r3,r2,1
 400826c:	e0ffff15 	stw	r3,-4(fp)
 4008270:	e0fffe17 	ldw	r3,-8(fp)
 4008274:	18c00043 	ldbu	r3,1(r3)
 4008278:	10c00005 	stb	r3,0(r2)
                *buf++ = *(p+2);
 400827c:	e0bfff17 	ldw	r2,-4(fp)
 4008280:	10c00044 	addi	r3,r2,1
 4008284:	e0ffff15 	stw	r3,-4(fp)
 4008288:	e0fffe17 	ldw	r3,-8(fp)
 400828c:	18c00083 	ldbu	r3,2(r3)
 4008290:	10c00005 	stb	r3,0(r2)
                rc = 2;
 4008294:	00800084 	movi	r2,2
 4008298:	e0bffc05 	stb	r2,-16(fp)
                break;
 400829c:	00000906 	br	40082c4 <_ZN9USBH_MIDI16extractSysExDataEPhS0_+0x12c>
            case 5:
                *buf++ = *(p+1);
 40082a0:	e0bfff17 	ldw	r2,-4(fp)
 40082a4:	10c00044 	addi	r3,r2,1
 40082a8:	e0ffff15 	stw	r3,-4(fp)
 40082ac:	e0fffe17 	ldw	r3,-8(fp)
 40082b0:	18c00043 	ldbu	r3,1(r3)
 40082b4:	10c00005 	stb	r3,0(r2)
                rc = 1;
 40082b8:	00800044 	movi	r2,1
 40082bc:	e0bffc05 	stb	r2,-16(fp)
                break;
 40082c0:	0001883a 	nop
            default:
                break;
        }
        return(rc);
 40082c4:	e0bffc03 	ldbu	r2,-16(fp)
}
 40082c8:	e037883a 	mov	sp,fp
 40082cc:	df000017 	ldw	fp,0(sp)
 40082d0:	dec00104 	addi	sp,sp,4
 40082d4:	f800283a 	ret

040082d8 <_ZN14MidiDescParserC1EP21UsbMidiConfigXtracterb>:

// Configuration Descriptor Parser
// Copied from confdescparser.h and modifiy.
MidiDescParser::MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi) :
 40082d8:	defffb04 	addi	sp,sp,-20
 40082dc:	dfc00415 	stw	ra,16(sp)
 40082e0:	df000315 	stw	fp,12(sp)
 40082e4:	df000304 	addi	fp,sp,12
 40082e8:	e13ffd15 	stw	r4,-12(fp)
 40082ec:	e17ffe15 	stw	r5,-8(fp)
 40082f0:	3005883a 	mov	r2,r6
 40082f4:	e0bfff05 	stb	r2,-4(fp)
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
nEPs(0),
isMidiSearch(modeMidi){
 40082f8:	e0bffd17 	ldw	r2,-12(fp)
 40082fc:	1009883a 	mov	r4,r2
 4008300:	40056180 	call	4005618 <_ZN13USBReadParserC1Ev>
 4008304:	008100b4 	movhi	r2,1026
 4008308:	108a2f04 	addi	r2,r2,10428
 400830c:	e0fffd17 	ldw	r3,-12(fp)
 4008310:	18800015 	stw	r2,0(r3)
 4008314:	e0bffd17 	ldw	r2,-12(fp)
 4008318:	e0fffe17 	ldw	r3,-8(fp)
 400831c:	10c00115 	stw	r3,4(r2)
 4008320:	e0bffd17 	ldw	r2,-12(fp)
 4008324:	10800204 	addi	r2,r2,8
 4008328:	1009883a 	mov	r4,r2
 400832c:	4004f080 	call	4004f08 <_ZN16MultiValueBufferC1Ev>
 4008330:	e0bffd17 	ldw	r2,-12(fp)
 4008334:	10800404 	addi	r2,r2,16
 4008338:	1009883a 	mov	r4,r2
 400833c:	4004f680 	call	4004f68 <_ZN20MultiByteValueParserC1Ev>
 4008340:	e0bffd17 	ldw	r2,-12(fp)
 4008344:	10800604 	addi	r2,r2,24
 4008348:	1009883a 	mov	r4,r2
 400834c:	40050240 	call	4005024 <_ZN11ByteSkipperC1Ev>
 4008350:	e0bffd17 	ldw	r2,-12(fp)
 4008354:	10000c05 	stb	zero,48(r2)
 4008358:	e0bffd17 	ldw	r2,-12(fp)
 400835c:	10000c45 	stb	zero,49(r2)
 4008360:	e0bffd17 	ldw	r2,-12(fp)
 4008364:	10000c85 	stb	zero,50(r2)
 4008368:	e0bffd17 	ldw	r2,-12(fp)
 400836c:	10000cc5 	stb	zero,51(r2)
 4008370:	e0bffd17 	ldw	r2,-12(fp)
 4008374:	e0ffff03 	ldbu	r3,-4(fp)
 4008378:	10c00d05 	stb	r3,52(r2)
        theBuffer.pValue = varBuffer;
 400837c:	e0bffd17 	ldw	r2,-12(fp)
 4008380:	10c00804 	addi	r3,r2,32
 4008384:	e0bffd17 	ldw	r2,-12(fp)
 4008388:	19803fcc 	andi	r6,r3,255
 400838c:	11000243 	ldbu	r4,9(r2)
 4008390:	2008703a 	and	r4,r4,zero
 4008394:	200b883a 	mov	r5,r4
 4008398:	3009883a 	mov	r4,r6
 400839c:	2908b03a 	or	r4,r5,r4
 40083a0:	11000245 	stb	r4,9(r2)
 40083a4:	1808d23a 	srli	r4,r3,8
 40083a8:	21803fcc 	andi	r6,r4,255
 40083ac:	11000283 	ldbu	r4,10(r2)
 40083b0:	2008703a 	and	r4,r4,zero
 40083b4:	200b883a 	mov	r5,r4
 40083b8:	3009883a 	mov	r4,r6
 40083bc:	2908b03a 	or	r4,r5,r4
 40083c0:	11000285 	stb	r4,10(r2)
 40083c4:	1808d43a 	srli	r4,r3,16
 40083c8:	21803fcc 	andi	r6,r4,255
 40083cc:	110002c3 	ldbu	r4,11(r2)
 40083d0:	2008703a 	and	r4,r4,zero
 40083d4:	200b883a 	mov	r5,r4
 40083d8:	3009883a 	mov	r4,r6
 40083dc:	2908b03a 	or	r4,r5,r4
 40083e0:	110002c5 	stb	r4,11(r2)
 40083e4:	180ad63a 	srli	r5,r3,24
 40083e8:	10c00303 	ldbu	r3,12(r2)
 40083ec:	1806703a 	and	r3,r3,zero
 40083f0:	1809883a 	mov	r4,r3
 40083f4:	2807883a 	mov	r3,r5
 40083f8:	20c6b03a 	or	r3,r4,r3
 40083fc:	10c00305 	stb	r3,12(r2)
        valParser.Initialize(&theBuffer);
 4008400:	e0bffd17 	ldw	r2,-12(fp)
 4008404:	10c00404 	addi	r3,r2,16
 4008408:	e0bffd17 	ldw	r2,-12(fp)
 400840c:	10800204 	addi	r2,r2,8
 4008410:	100b883a 	mov	r5,r2
 4008414:	1809883a 	mov	r4,r3
 4008418:	4004fa40 	call	4004fa4 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 400841c:	e0bffd17 	ldw	r2,-12(fp)
 4008420:	10c00604 	addi	r3,r2,24
 4008424:	e0bffd17 	ldw	r2,-12(fp)
 4008428:	10800204 	addi	r2,r2,8
 400842c:	100b883a 	mov	r5,r2
 4008430:	1809883a 	mov	r4,r3
 4008434:	40050600 	call	4005060 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
}
 4008438:	0001883a 	nop
 400843c:	e037883a 	mov	sp,fp
 4008440:	dfc00117 	ldw	ra,4(sp)
 4008444:	df000017 	ldw	fp,0(sp)
 4008448:	dec00204 	addi	sp,sp,8
 400844c:	f800283a 	ret

04008450 <_ZN14MidiDescParser5ParseEtPKhRKt>:
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 4008450:	defff804 	addi	sp,sp,-32
 4008454:	dfc00715 	stw	ra,28(sp)
 4008458:	df000615 	stw	fp,24(sp)
 400845c:	df000604 	addi	fp,sp,24
 4008460:	e13ffc15 	stw	r4,-16(fp)
 4008464:	2805883a 	mov	r2,r5
 4008468:	e1bffe15 	stw	r6,-8(fp)
 400846c:	e1ffff15 	stw	r7,-4(fp)
 4008470:	e0bffd0d 	sth	r2,-12(fp)
        uint16_t cntdn = (uint16_t)len;
 4008474:	e0bffd0b 	ldhu	r2,-12(fp)
 4008478:	e0bffa0d 	sth	r2,-24(fp)
        uint8_t *p = (uint8_t*)pbuf;
 400847c:	e0bffe17 	ldw	r2,-8(fp)
 4008480:	e0bffb15 	stw	r2,-20(fp)

        while(cntdn)
 4008484:	e0bffa0b 	ldhu	r2,-24(fp)
 4008488:	10bfffcc 	andi	r2,r2,65535
 400848c:	10000a26 	beq	r2,zero,40084b8 <_ZN14MidiDescParser5ParseEtPKhRKt+0x68>
                if(!ParseDescriptor(&p, &cntdn))
 4008490:	e0bffb04 	addi	r2,fp,-20
 4008494:	e1bffa04 	addi	r6,fp,-24
 4008498:	100b883a 	mov	r5,r2
 400849c:	e13ffc17 	ldw	r4,-16(fp)
 40084a0:	40084cc0 	call	40084cc <_ZN14MidiDescParser15ParseDescriptorEPPhPt>
 40084a4:	1080005c 	xori	r2,r2,1
 40084a8:	10803fcc 	andi	r2,r2,255
 40084ac:	1000011e 	bne	r2,zero,40084b4 <_ZN14MidiDescParser5ParseEtPKhRKt+0x64>
}
void MidiDescParser::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
        uint16_t cntdn = (uint16_t)len;
        uint8_t *p = (uint8_t*)pbuf;

        while(cntdn)
 40084b0:	003ff406 	br	4008484 <__alt_data_end+0xfc008484>
                if(!ParseDescriptor(&p, &cntdn))
                        return;
 40084b4:	0001883a 	nop
}
 40084b8:	e037883a 	mov	sp,fp
 40084bc:	dfc00117 	ldw	ra,4(sp)
 40084c0:	df000017 	ldw	fp,0(sp)
 40084c4:	dec00204 	addi	sp,sp,8
 40084c8:	f800283a 	ret

040084cc <_ZN14MidiDescParser15ParseDescriptorEPPhPt>:

bool MidiDescParser::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 40084cc:	defff604 	addi	sp,sp,-40
 40084d0:	dfc00915 	stw	ra,36(sp)
 40084d4:	df000815 	stw	fp,32(sp)
 40084d8:	df000804 	addi	fp,sp,32
 40084dc:	e13ffc15 	stw	r4,-16(fp)
 40084e0:	e17ffd15 	stw	r5,-12(fp)
 40084e4:	e1bffe15 	stw	r6,-8(fp)
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 40084e8:	e0bffc17 	ldw	r2,-16(fp)
 40084ec:	10800804 	addi	r2,r2,32
 40084f0:	e0bffa15 	stw	r2,-24(fp)
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 40084f4:	e0bffc17 	ldw	r2,-16(fp)
 40084f8:	10800804 	addi	r2,r2,32
 40084fc:	e0bffb15 	stw	r2,-20(fp)
        switch(stateParseDescr) {
 4008500:	e0bffc17 	ldw	r2,-16(fp)
 4008504:	10800c03 	ldbu	r2,48(r2)
 4008508:	10803fcc 	andi	r2,r2,255
 400850c:	10c00168 	cmpgeui	r3,r2,5
 4008510:	1801411e 	bne	r3,zero,4008a18 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x54c>
 4008514:	100690ba 	slli	r3,r2,2
 4008518:	00810074 	movhi	r2,1025
 400851c:	10a14b04 	addi	r2,r2,-31444
 4008520:	1885883a 	add	r2,r3,r2
 4008524:	10800017 	ldw	r2,0(r2)
 4008528:	1000683a 	jmp	r2
 400852c:	04008540 	call	400854 <__alt_mem_sdram-0x3bff7ac>
 4008530:	04008574 	movhi	r16,533
 4008534:	040085fc 	xorhi	r16,zero,535
 4008538:	04008690 	cmplti	r16,zero,538
 400853c:	040086fc 	xorhi	r16,zero,539
                case 0:
                        theBuffer.valueSize = 2;
 4008540:	e0bffc17 	ldw	r2,-16(fp)
 4008544:	00c00084 	movi	r3,2
 4008548:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
 400854c:	e0bffc17 	ldw	r2,-16(fp)
 4008550:	10c00404 	addi	r3,r2,16
 4008554:	e0bffc17 	ldw	r2,-16(fp)
 4008558:	10800204 	addi	r2,r2,8
 400855c:	100b883a 	mov	r5,r2
 4008560:	1809883a 	mov	r4,r3
 4008564:	4004fa40 	call	4004fa4 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 4008568:	e0bffc17 	ldw	r2,-16(fp)
 400856c:	00c00044 	movi	r3,1
 4008570:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 4008574:	e0bffc17 	ldw	r2,-16(fp)
 4008578:	10800404 	addi	r2,r2,16
 400857c:	e1bffe17 	ldw	r6,-8(fp)
 4008580:	e17ffd17 	ldw	r5,-12(fp)
 4008584:	1009883a 	mov	r4,r2
 4008588:	40069d00 	call	40069d0 <_ZN20MultiByteValueParser5ParseEPPhPt>
 400858c:	1080005c 	xori	r2,r2,1
 4008590:	10803fcc 	andi	r2,r2,255
 4008594:	10000226 	beq	r2,zero,40085a0 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0xd4>
                                return false;
 4008598:	0005883a 	mov	r2,zero
 400859c:	00011f06 	br	4008a1c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 40085a0:	e0bffc17 	ldw	r2,-16(fp)
 40085a4:	10c00217 	ldw	r3,8(r2)
 40085a8:	1806d23a 	srli	r3,r3,8
 40085ac:	10800317 	ldw	r2,12(r2)
 40085b0:	10803fcc 	andi	r2,r2,255
 40085b4:	1004963a 	slli	r2,r2,24
 40085b8:	10c4b03a 	or	r2,r2,r3
 40085bc:	10c00003 	ldbu	r3,0(r2)
 40085c0:	e0bffc17 	ldw	r2,-16(fp)
 40085c4:	10c00c45 	stb	r3,49(r2)
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 40085c8:	e0bffc17 	ldw	r2,-16(fp)
 40085cc:	10c00217 	ldw	r3,8(r2)
 40085d0:	1806d23a 	srli	r3,r3,8
 40085d4:	10800317 	ldw	r2,12(r2)
 40085d8:	10803fcc 	andi	r2,r2,255
 40085dc:	1004963a 	slli	r2,r2,24
 40085e0:	10c4b03a 	or	r2,r2,r3
 40085e4:	10c00043 	ldbu	r3,1(r2)
 40085e8:	e0bffc17 	ldw	r2,-16(fp)
 40085ec:	10c00c85 	stb	r3,50(r2)
                        stateParseDescr = 2;
 40085f0:	e0bffc17 	ldw	r2,-16(fp)
 40085f4:	00c00084 	movi	r3,2
 40085f8:	10c00c05 	stb	r3,48(r2)
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 40085fc:	e0bffc17 	ldw	r2,-16(fp)
 4008600:	10800804 	addi	r2,r2,32
 4008604:	10c00084 	addi	r3,r2,2
 4008608:	e0bffc17 	ldw	r2,-16(fp)
 400860c:	19803fcc 	andi	r6,r3,255
 4008610:	11000243 	ldbu	r4,9(r2)
 4008614:	2008703a 	and	r4,r4,zero
 4008618:	200b883a 	mov	r5,r4
 400861c:	3009883a 	mov	r4,r6
 4008620:	2908b03a 	or	r4,r5,r4
 4008624:	11000245 	stb	r4,9(r2)
 4008628:	1808d23a 	srli	r4,r3,8
 400862c:	21803fcc 	andi	r6,r4,255
 4008630:	11000283 	ldbu	r4,10(r2)
 4008634:	2008703a 	and	r4,r4,zero
 4008638:	200b883a 	mov	r5,r4
 400863c:	3009883a 	mov	r4,r6
 4008640:	2908b03a 	or	r4,r5,r4
 4008644:	11000285 	stb	r4,10(r2)
 4008648:	1808d43a 	srli	r4,r3,16
 400864c:	21803fcc 	andi	r6,r4,255
 4008650:	110002c3 	ldbu	r4,11(r2)
 4008654:	2008703a 	and	r4,r4,zero
 4008658:	200b883a 	mov	r5,r4
 400865c:	3009883a 	mov	r4,r6
 4008660:	2908b03a 	or	r4,r5,r4
 4008664:	110002c5 	stb	r4,11(r2)
 4008668:	180ad63a 	srli	r5,r3,24
 400866c:	10c00303 	ldbu	r3,12(r2)
 4008670:	1806703a 	and	r3,r3,zero
 4008674:	1809883a 	mov	r4,r3
 4008678:	2807883a 	mov	r3,r5
 400867c:	20c6b03a 	or	r3,r4,r3
 4008680:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 3;
 4008684:	e0bffc17 	ldw	r2,-16(fp)
 4008688:	00c000c4 	movi	r3,3
 400868c:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 3:
                        switch(dscrType) {
 4008690:	e0bffc17 	ldw	r2,-16(fp)
 4008694:	10800c83 	ldbu	r2,50(r2)
 4008698:	10803fcc 	andi	r2,r2,255
 400869c:	10c00120 	cmpeqi	r3,r2,4
 40086a0:	1800021e 	bne	r3,zero,40086ac <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1e0>
 40086a4:	10800148 	cmpgei	r2,r2,5
 40086a8:	00000306 	br	40086b8 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1ec>
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 40086ac:	e0bffc17 	ldw	r2,-16(fp)
 40086b0:	10000d45 	stb	zero,53(r2)
                                        break;
 40086b4:	00000106 	br	40086bc <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x1f0>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
 40086b8:	0001883a 	nop
                        }
                        theBuffer.valueSize = dscrLen - 2;
 40086bc:	e0bffc17 	ldw	r2,-16(fp)
 40086c0:	10800c43 	ldbu	r2,49(r2)
 40086c4:	10bfff84 	addi	r2,r2,-2
 40086c8:	1007883a 	mov	r3,r2
 40086cc:	e0bffc17 	ldw	r2,-16(fp)
 40086d0:	10c00205 	stb	r3,8(r2)
                        valParser.Initialize(&theBuffer);
 40086d4:	e0bffc17 	ldw	r2,-16(fp)
 40086d8:	10c00404 	addi	r3,r2,16
 40086dc:	e0bffc17 	ldw	r2,-16(fp)
 40086e0:	10800204 	addi	r2,r2,8
 40086e4:	100b883a 	mov	r5,r2
 40086e8:	1809883a 	mov	r4,r3
 40086ec:	4004fa40 	call	4004fa4 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 40086f0:	e0bffc17 	ldw	r2,-16(fp)
 40086f4:	00c00104 	movi	r3,4
 40086f8:	10c00c05 	stb	r3,48(r2)
                        // fall through
                case 4:
                        switch(dscrType) {
 40086fc:	e0bffc17 	ldw	r2,-16(fp)
 4008700:	10800c83 	ldbu	r2,50(r2)
 4008704:	10803fcc 	andi	r2,r2,255
 4008708:	10c00120 	cmpeqi	r3,r2,4
 400870c:	1800141e 	bne	r3,zero,4008760 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x294>
 4008710:	10c00160 	cmpeqi	r3,r2,5
 4008714:	18005a1e 	bne	r3,zero,4008880 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3b4>
 4008718:	108000a0 	cmpeqi	r2,r2,2
 400871c:	10008526 	beq	r2,zero,4008934 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x468>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 4008720:	e0bffc17 	ldw	r2,-16(fp)
 4008724:	10800404 	addi	r2,r2,16
 4008728:	e1bffe17 	ldw	r6,-8(fp)
 400872c:	e17ffd17 	ldw	r5,-12(fp)
 4008730:	1009883a 	mov	r4,r2
 4008734:	40069d00 	call	40069d0 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4008738:	1080005c 	xori	r2,r2,1
 400873c:	10803fcc 	andi	r2,r2,255
 4008740:	10000226 	beq	r2,zero,400874c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x280>
                                                return false;
 4008744:	0005883a 	mov	r2,zero
 4008748:	0000b406 	br	4008a1c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        confValue = ucd->bConfigurationValue;
 400874c:	e0bffa17 	ldw	r2,-24(fp)
 4008750:	10c00143 	ldbu	r3,5(r2)
 4008754:	e0bffc17 	ldw	r2,-16(fp)
 4008758:	10c00d85 	stb	r3,54(r2)
                                        break;
 400875c:	00008b06 	br	400898c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 4008760:	e0bffc17 	ldw	r2,-16(fp)
 4008764:	10800404 	addi	r2,r2,16
 4008768:	e1bffe17 	ldw	r6,-8(fp)
 400876c:	e17ffd17 	ldw	r5,-12(fp)
 4008770:	1009883a 	mov	r4,r2
 4008774:	40069d00 	call	40069d0 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4008778:	1080005c 	xori	r2,r2,1
 400877c:	10803fcc 	andi	r2,r2,255
 4008780:	10000226 	beq	r2,zero,400878c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x2c0>
                                                return false;
 4008784:	0005883a 	mov	r2,zero
 4008788:	0000a406 	br	4008a1c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        USBTRACE("Interface descriptor:\r\n");
                                        USBTRACE2(" Inf#:\t\t", uid->bInterfaceNumber);
 400878c:	e0bffb17 	ldw	r2,-20(fp)
 4008790:	10800083 	ldbu	r2,2(r2)
 4008794:	10803fcc 	andi	r2,r2,255
 4008798:	01402004 	movi	r5,128
 400879c:	1009883a 	mov	r4,r2
 40087a0:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Alt:\t\t", uid->bAlternateSetting);
 40087a4:	e0bffb17 	ldw	r2,-20(fp)
 40087a8:	108000c3 	ldbu	r2,3(r2)
 40087ac:	10803fcc 	andi	r2,r2,255
 40087b0:	01402004 	movi	r5,128
 40087b4:	1009883a 	mov	r4,r2
 40087b8:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" EPs:\t\t", uid->bNumEndpoints);
 40087bc:	e0bffb17 	ldw	r2,-20(fp)
 40087c0:	10800103 	ldbu	r2,4(r2)
 40087c4:	10803fcc 	andi	r2,r2,255
 40087c8:	01402004 	movi	r5,128
 40087cc:	1009883a 	mov	r4,r2
 40087d0:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntCl:\t\t", uid->bInterfaceClass);
 40087d4:	e0bffb17 	ldw	r2,-20(fp)
 40087d8:	10800143 	ldbu	r2,5(r2)
 40087dc:	10803fcc 	andi	r2,r2,255
 40087e0:	01402004 	movi	r5,128
 40087e4:	1009883a 	mov	r4,r2
 40087e8:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" IntSubcl:\t", uid->bInterfaceSubClass);
 40087ec:	e0bffb17 	ldw	r2,-20(fp)
 40087f0:	10800183 	ldbu	r2,6(r2)
 40087f4:	10803fcc 	andi	r2,r2,255
 40087f8:	01402004 	movi	r5,128
 40087fc:	1009883a 	mov	r4,r2
 4008800:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>
                                        USBTRACE2(" Protocol:\t", uid->bInterfaceProtocol);
 4008804:	e0bffb17 	ldw	r2,-20(fp)
 4008808:	108001c3 	ldbu	r2,7(r2)
 400880c:	10803fcc 	andi	r2,r2,255
 4008810:	01402004 	movi	r5,128
 4008814:	1009883a 	mov	r4,r2
 4008818:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>
                                        // MIDI check mode ?
                                        if( isMidiSearch ){ //true: MIDI Streaming, false: ALL
 400881c:	e0bffc17 	ldw	r2,-16(fp)
 4008820:	10800d03 	ldbu	r2,52(r2)
 4008824:	10803fcc 	andi	r2,r2,255
 4008828:	10000a26 	beq	r2,zero,4008854 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x388>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
 400882c:	e0bffb17 	ldw	r2,-20(fp)
 4008830:	10800143 	ldbu	r2,5(r2)
 4008834:	10803fcc 	andi	r2,r2,255
 4008838:	10800058 	cmpnei	r2,r2,1
 400883c:	10004e1e 	bne	r2,zero,4008978 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
 4008840:	e0bffb17 	ldw	r2,-20(fp)
 4008844:	10800183 	ldbu	r2,6(r2)
 4008848:	10803fcc 	andi	r2,r2,255
 400884c:	108000d8 	cmpnei	r2,r2,3
 4008850:	1000491e 	bne	r2,zero,4008978 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4ac>
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
                                                }
                                        }
                                        isGoodInterface = true;
 4008854:	e0bffc17 	ldw	r2,-16(fp)
 4008858:	00c00044 	movi	r3,1
 400885c:	10c00d45 	stb	r3,53(r2)
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
 4008860:	e0bffc17 	ldw	r2,-16(fp)
 4008864:	10800cc3 	ldbu	r2,51(r2)
 4008868:	10803fcc 	andi	r2,r2,255
 400886c:	108000a8 	cmpgeui	r2,r2,2
 4008870:	1000431e 	bne	r2,zero,4008980 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                                // reset endpoint counter
                                                nEPs = 0;
 4008874:	e0bffc17 	ldw	r2,-16(fp)
 4008878:	10000cc5 	stb	zero,51(r2)
                                        break;
 400887c:	00004006 	br	4008980 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4b4>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 4008880:	e0bffc17 	ldw	r2,-16(fp)
 4008884:	10800404 	addi	r2,r2,16
 4008888:	e1bffe17 	ldw	r6,-8(fp)
 400888c:	e17ffd17 	ldw	r5,-12(fp)
 4008890:	1009883a 	mov	r4,r2
 4008894:	40069d00 	call	40069d0 <_ZN20MultiByteValueParser5ParseEPPhPt>
 4008898:	1080005c 	xori	r2,r2,1
 400889c:	10803fcc 	andi	r2,r2,255
 40088a0:	10000226 	beq	r2,zero,40088ac <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x3e0>
                                                return false;
 40088a4:	0005883a 	mov	r2,zero
 40088a8:	00005c06 	br	4008a1c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                        if(isGoodInterface && nEPs < 2){
 40088ac:	e0bffc17 	ldw	r2,-16(fp)
 40088b0:	10800d43 	ldbu	r2,53(r2)
 40088b4:	10803fcc 	andi	r2,r2,255
 40088b8:	10003326 	beq	r2,zero,4008988 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
 40088bc:	e0bffc17 	ldw	r2,-16(fp)
 40088c0:	10800cc3 	ldbu	r2,51(r2)
 40088c4:	10803fcc 	andi	r2,r2,255
 40088c8:	108000a8 	cmpgeui	r2,r2,2
 40088cc:	10002e1e 	bne	r2,zero,4008988 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) ) 
 40088d0:	e0bffc17 	ldw	r2,-16(fp)
 40088d4:	10800117 	ldw	r2,4(r2)
 40088d8:	10800017 	ldw	r2,0(r2)
 40088dc:	10800017 	ldw	r2,0(r2)
 40088e0:	e0fffc17 	ldw	r3,-16(fp)
 40088e4:	19000117 	ldw	r4,4(r3)
 40088e8:	e0fffc17 	ldw	r3,-16(fp)
 40088ec:	18c00d83 	ldbu	r3,54(r3)
 40088f0:	19403fcc 	andi	r5,r3,255
 40088f4:	e0fffc17 	ldw	r3,-16(fp)
 40088f8:	18c00804 	addi	r3,r3,32
 40088fc:	d8c00115 	stw	r3,4(sp)
 4008900:	d8000015 	stw	zero,0(sp)
 4008904:	000f883a 	mov	r7,zero
 4008908:	000d883a 	mov	r6,zero
 400890c:	103ee83a 	callr	r2
 4008910:	10803fcc 	andi	r2,r2,255
 4008914:	10001c26 	beq	r2,zero,4008988 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>
                                                        nEPs++;
 4008918:	e0bffc17 	ldw	r2,-16(fp)
 400891c:	10800cc3 	ldbu	r2,51(r2)
 4008920:	10800044 	addi	r2,r2,1
 4008924:	1007883a 	mov	r3,r2
 4008928:	e0bffc17 	ldw	r2,-16(fp)
 400892c:	10c00cc5 	stb	r3,51(r2)
                                        }
                                        break;
 4008930:	00001506 	br	4008988 <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4bc>

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 4008934:	e0bffc17 	ldw	r2,-16(fp)
 4008938:	10c00604 	addi	r3,r2,24
 400893c:	e0bffc17 	ldw	r2,-16(fp)
 4008940:	10800c43 	ldbu	r2,49(r2)
 4008944:	10803fcc 	andi	r2,r2,255
 4008948:	10bfff84 	addi	r2,r2,-2
 400894c:	10bfffcc 	andi	r2,r2,65535
 4008950:	100f883a 	mov	r7,r2
 4008954:	e1bffe17 	ldw	r6,-8(fp)
 4008958:	e17ffd17 	ldw	r5,-12(fp)
 400895c:	1809883a 	mov	r4,r3
 4008960:	40050c80 	call	40050c8 <_ZN11ByteSkipper4SkipEPPhPtt>
 4008964:	1080005c 	xori	r2,r2,1
 4008968:	10803fcc 	andi	r2,r2,255
 400896c:	10000726 	beq	r2,zero,400898c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                                return false;
 4008970:	0005883a 	mov	r2,zero
 4008974:	00002906 	br	4008a1c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x550>
                                                if( uid->bInterfaceClass == USB_CLASS_AUDIO && uid->bInterfaceSubClass == USB_SUBCLASS_MIDISTREAMING ) {
                                                        // MIDI found.
                                                        USBTRACE("+MIDI found\r\n\r\n");
                                                }else{
                                                        USBTRACE("-MIDI not found\r\n\r\n");
                                                        break;
 4008978:	0001883a 	nop
 400897c:	00000306 	br	400898c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        isGoodInterface = true;
                                        // Initialize the counter if no two endpoints can be found in one interface.
                                        if(nEPs < 2)
                                                // reset endpoint counter
                                                nEPs = 0;
                                        break;
 4008980:	0001883a 	nop
 4008984:	00000106 	br	400898c <_ZN14MidiDescParser15ParseDescriptorEPPhPt+0x4c0>
                                        if(isGoodInterface && nEPs < 2){
                                                USBTRACE(">Extracting endpoint\r\n");
                                                if( theXtractor->EndpointXtract(confValue, 0, 0, 0, (USB_ENDPOINT_DESCRIPTOR*)varBuffer) ) 
                                                        nEPs++;
                                        }
                                        break;
 4008988:	0001883a 	nop

                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
 400898c:	e0bffc17 	ldw	r2,-16(fp)
 4008990:	10c00804 	addi	r3,r2,32
 4008994:	e0bffc17 	ldw	r2,-16(fp)
 4008998:	19803fcc 	andi	r6,r3,255
 400899c:	11000243 	ldbu	r4,9(r2)
 40089a0:	2008703a 	and	r4,r4,zero
 40089a4:	200b883a 	mov	r5,r4
 40089a8:	3009883a 	mov	r4,r6
 40089ac:	2908b03a 	or	r4,r5,r4
 40089b0:	11000245 	stb	r4,9(r2)
 40089b4:	1808d23a 	srli	r4,r3,8
 40089b8:	21803fcc 	andi	r6,r4,255
 40089bc:	11000283 	ldbu	r4,10(r2)
 40089c0:	2008703a 	and	r4,r4,zero
 40089c4:	200b883a 	mov	r5,r4
 40089c8:	3009883a 	mov	r4,r6
 40089cc:	2908b03a 	or	r4,r5,r4
 40089d0:	11000285 	stb	r4,10(r2)
 40089d4:	1808d43a 	srli	r4,r3,16
 40089d8:	21803fcc 	andi	r6,r4,255
 40089dc:	110002c3 	ldbu	r4,11(r2)
 40089e0:	2008703a 	and	r4,r4,zero
 40089e4:	200b883a 	mov	r5,r4
 40089e8:	3009883a 	mov	r4,r6
 40089ec:	2908b03a 	or	r4,r5,r4
 40089f0:	110002c5 	stb	r4,11(r2)
 40089f4:	180ad63a 	srli	r5,r3,24
 40089f8:	10c00303 	ldbu	r3,12(r2)
 40089fc:	1806703a 	and	r3,r3,zero
 4008a00:	1809883a 	mov	r4,r3
 4008a04:	2807883a 	mov	r3,r5
 4008a08:	20c6b03a 	or	r3,r4,r3
 4008a0c:	10c00305 	stb	r3,12(r2)
                        stateParseDescr = 0;
 4008a10:	e0bffc17 	ldw	r2,-16(fp)
 4008a14:	10000c05 	stb	zero,48(r2)
        }
        return true;
 4008a18:	00800044 	movi	r2,1
}
 4008a1c:	e037883a 	mov	sp,fp
 4008a20:	dfc00117 	ldw	ra,4(sp)
 4008a24:	df000017 	ldw	fp,0(sp)
 4008a28:	dec00204 	addi	sp,sp,8
 4008a2c:	f800283a 	ret

04008a30 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
bool USBH_MIDI::EndpointXtract(uint8_t conf __attribute__((unused)),
        uint8_t iface __attribute__((unused)),
        uint8_t alt __attribute__((unused)),
        uint8_t proto __attribute__((unused)),
        const USB_ENDPOINT_DESCRIPTOR *pep)
{
 4008a30:	defff904 	addi	sp,sp,-28
 4008a34:	df000615 	stw	fp,24(sp)
 4008a38:	df000604 	addi	fp,sp,24
 4008a3c:	e13ffb15 	stw	r4,-20(fp)
 4008a40:	3009883a 	mov	r4,r6
 4008a44:	3807883a 	mov	r3,r7
 4008a48:	e0800117 	ldw	r2,4(fp)
 4008a4c:	e17ffc05 	stb	r5,-16(fp)
 4008a50:	e13ffd05 	stb	r4,-12(fp)
 4008a54:	e0fffe05 	stb	r3,-8(fp)
 4008a58:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_USB_HOST
        PrintEndpointDescriptor(pep);
#endif
        // Is the endpoint transfer type bulk?
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
 4008a5c:	e0800217 	ldw	r2,8(fp)
 4008a60:	10c000c3 	ldbu	r3,3(r2)
 4008a64:	e0bffb17 	ldw	r2,-20(fp)
 4008a68:	10800483 	ldbu	r2,18(r2)
 4008a6c:	1884703a 	and	r2,r3,r2
 4008a70:	10803fcc 	andi	r2,r2,255
 4008a74:	10800098 	cmpnei	r2,r2,2
 4008a78:	10001f1e 	bne	r2,zero,4008af8 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xc8>
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
 4008a7c:	e0800217 	ldw	r2,8(fp)
 4008a80:	10800083 	ldbu	r2,2(r2)
 4008a84:	10803fcc 	andi	r2,r2,255
 4008a88:	1080201c 	xori	r2,r2,128
 4008a8c:	10bfe004 	addi	r2,r2,-128
 4008a90:	1000020e 	bge	r2,zero,4008a9c <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x6c>
 4008a94:	00800044 	movi	r2,1
 4008a98:	00000106 	br	4008aa0 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x70>
 4008a9c:	00800084 	movi	r2,2
 4008aa0:	e0bffa05 	stb	r2,-24(fp)
                USBTRACE("-No valid EP found.\r\n");
                return false;
        } 

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 4008aa4:	e0fffa03 	ldbu	r3,-24(fp)
 4008aa8:	e0800217 	ldw	r2,8(fp)
 4008aac:	10800083 	ldbu	r2,2(r2)
 4008ab0:	108003cc 	andi	r2,r2,15
 4008ab4:	100b883a 	mov	r5,r2
 4008ab8:	e13ffb17 	ldw	r4,-20(fp)
 4008abc:	1805883a 	mov	r2,r3
 4008ac0:	1085883a 	add	r2,r2,r2
 4008ac4:	10c5883a 	add	r2,r2,r3
 4008ac8:	2085883a 	add	r2,r4,r2
 4008acc:	108004c4 	addi	r2,r2,19
 4008ad0:	11400005 	stb	r5,0(r2)
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
 4008ad4:	e0800217 	ldw	r2,8(fp)
 4008ad8:	10c00103 	ldbu	r3,4(r2)
 4008adc:	10800143 	ldbu	r2,5(r2)
 4008ae0:	1004923a 	slli	r2,r2,8
 4008ae4:	10c4b03a 	or	r2,r2,r3
 4008ae8:	10bfffcc 	andi	r2,r2,65535
 4008aec:	10801070 	cmpltui	r2,r2,65
 4008af0:	10000d1e 	bne	r2,zero,4008b28 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xf8>
 4008af4:	00000206 	br	4008b00 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xd0>
        if((pep->bmAttributes & bTransferTypeMask) == USB_TRANSFER_TYPE_BULK) {
                USBTRACE("+valid EP found.\r\n");
                index = (pep->bEndpointAddress & 0x80) == 0x80 ? epDataInIndex : epDataOutIndex;
        } else {
                USBTRACE("-No valid EP found.\r\n");
                return false;
 4008af8:	0005883a 	mov	r2,zero
 4008afc:	00001906 	br	4008b64 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x134>

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
        // The maximum packet size for the USB Host Shield 2.0 library is 64 bytes.
        if(pep->wMaxPacketSize > MIDI_EVENT_PACKET_SIZE) {
                epInfo[index].maxPktSize = MIDI_EVENT_PACKET_SIZE;
 4008b00:	e0fffa03 	ldbu	r3,-24(fp)
 4008b04:	e13ffb17 	ldw	r4,-20(fp)
 4008b08:	1805883a 	mov	r2,r3
 4008b0c:	1085883a 	add	r2,r2,r2
 4008b10:	10c5883a 	add	r2,r2,r3
 4008b14:	2085883a 	add	r2,r4,r2
 4008b18:	10800504 	addi	r2,r2,20
 4008b1c:	00c01004 	movi	r3,64
 4008b20:	10c00005 	stb	r3,0(r2)
 4008b24:	00000e06 	br	4008b60 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x130>
        } else {
                epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 4008b28:	e0fffa03 	ldbu	r3,-24(fp)
 4008b2c:	e0800217 	ldw	r2,8(fp)
 4008b30:	11000103 	ldbu	r4,4(r2)
 4008b34:	10800143 	ldbu	r2,5(r2)
 4008b38:	1004923a 	slli	r2,r2,8
 4008b3c:	1104b03a 	or	r2,r2,r4
 4008b40:	100b883a 	mov	r5,r2
 4008b44:	e13ffb17 	ldw	r4,-20(fp)
 4008b48:	1805883a 	mov	r2,r3
 4008b4c:	1085883a 	add	r2,r2,r2
 4008b50:	10c5883a 	add	r2,r2,r3
 4008b54:	2085883a 	add	r2,r4,r2
 4008b58:	10800504 	addi	r2,r2,20
 4008b5c:	11400005 	stb	r5,0(r2)
        }

        return true;
 4008b60:	00800044 	movi	r2,1
}
 4008b64:	e037883a 	mov	sp,fp
 4008b68:	df000017 	ldw	fp,0(sp)
 4008b6c:	dec00104 	addi	sp,sp,4
 4008b70:	f800283a 	ret

04008b74 <_ZThn4_N9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
        };

        /* UsbConfigXtracter implementation */
        bool EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 4008b74:	213fff04 	addi	r4,r4,-4
 4008b78:	4008a301 	jmpi	4008a30 <_ZN9USBH_MIDI14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

04008b7c <_ZN21UsbMidiConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbMidiConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual bool EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 4008b7c:	defffa04 	addi	sp,sp,-24
 4008b80:	df000515 	stw	fp,20(sp)
 4008b84:	df000504 	addi	fp,sp,20
 4008b88:	e13ffb15 	stw	r4,-20(fp)
 4008b8c:	3009883a 	mov	r4,r6
 4008b90:	3807883a 	mov	r3,r7
 4008b94:	e0800117 	ldw	r2,4(fp)
 4008b98:	e17ffc05 	stb	r5,-16(fp)
 4008b9c:	e13ffd05 	stb	r4,-12(fp)
 4008ba0:	e0fffe05 	stb	r3,-8(fp)
 4008ba4:	e0bfff05 	stb	r2,-4(fp)
                return true;
 4008ba8:	00800044 	movi	r2,1
        };
 4008bac:	e037883a 	mov	sp,fp
 4008bb0:	df000017 	ldw	fp,0(sp)
 4008bb4:	dec00104 	addi	sp,sp,4
 4008bb8:	f800283a 	ret

04008bbc <_ZN14MidiDescParser12getConfValueEv>:
        bool ParseDescriptor(uint8_t **pp, uint16_t *pcntdn);

public:
        MidiDescParser(UsbMidiConfigXtracter *xtractor, bool modeMidi);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
        inline uint8_t getConfValue() { return confValue; };
 4008bbc:	defffe04 	addi	sp,sp,-8
 4008bc0:	df000115 	stw	fp,4(sp)
 4008bc4:	df000104 	addi	fp,sp,4
 4008bc8:	e13fff15 	stw	r4,-4(fp)
 4008bcc:	e0bfff17 	ldw	r2,-4(fp)
 4008bd0:	10800d83 	ldbu	r2,54(r2)
 4008bd4:	e037883a 	mov	sp,fp
 4008bd8:	df000017 	ldw	fp,0(sp)
 4008bdc:	dec00104 	addi	sp,sp,4
 4008be0:	f800283a 	ret

04008be4 <_ZN14MidiDescParser9getNumEPsEv>:
        inline uint8_t getNumEPs() { return nEPs; };
 4008be4:	defffe04 	addi	sp,sp,-8
 4008be8:	df000115 	stw	fp,4(sp)
 4008bec:	df000104 	addi	fp,sp,4
 4008bf0:	e13fff15 	stw	r4,-4(fp)
 4008bf4:	e0bfff17 	ldw	r2,-4(fp)
 4008bf8:	10800cc3 	ldbu	r2,51(r2)
 4008bfc:	e037883a 	mov	sp,fp
 4008c00:	df000017 	ldw	fp,0(sp)
 4008c04:	dec00104 	addi	sp,sp,4
 4008c08:	f800283a 	ret

04008c0c <_ZN9USBH_MIDI17convertStatus2CinEh>:
        uint8_t recvBuf[MIDI_EVENT_PACKET_SIZE];
        uint8_t readPtr;

        uint16_t countSysExDataSize(uint8_t *dataptr);
        void setupDeviceSpecific();
        inline uint8_t convertStatus2Cin(uint8_t status) {
 4008c0c:	defffd04 	addi	sp,sp,-12
 4008c10:	df000215 	stw	fp,8(sp)
 4008c14:	df000204 	addi	fp,sp,8
 4008c18:	e13ffe15 	stw	r4,-8(fp)
 4008c1c:	2805883a 	mov	r2,r5
 4008c20:	e0bfff05 	stb	r2,-4(fp)
                return ((status < 0xf0) ? ((status & 0xF0) >> 4) : pgm_read_byte_near(_ns_USBH_MIDI::sys2cin + (status & 0x0F)));
 4008c24:	e0bfff03 	ldbu	r2,-4(fp)
 4008c28:	10803c28 	cmpgeui	r2,r2,240
 4008c2c:	1000031e 	bne	r2,zero,4008c3c <_ZN9USBH_MIDI17convertStatus2CinEh+0x30>
 4008c30:	e0bfff03 	ldbu	r2,-4(fp)
 4008c34:	1004d13a 	srli	r2,r2,4
 4008c38:	00000606 	br	4008c54 <_ZN9USBH_MIDI17convertStatus2CinEh+0x48>
 4008c3c:	e0bfff03 	ldbu	r2,-4(fp)
 4008c40:	10c003cc 	andi	r3,r2,15
 4008c44:	008100b4 	movhi	r2,1026
 4008c48:	108a1984 	addi	r2,r2,10342
 4008c4c:	1885883a 	add	r2,r3,r2
 4008c50:	10800003 	ldbu	r2,0(r2)
        };
 4008c54:	e037883a 	mov	sp,fp
 4008c58:	df000017 	ldw	fp,0(sp)
 4008c5c:	dec00104 	addi	sp,sp,4
 4008c60:	f800283a 	ret

04008c64 <_ZN9USBH_MIDI17getMsgSizeFromCinEh>:
        inline uint8_t getMsgSizeFromCin(uint8_t cin) {
 4008c64:	defffd04 	addi	sp,sp,-12
 4008c68:	df000215 	stw	fp,8(sp)
 4008c6c:	df000204 	addi	fp,sp,8
 4008c70:	e13ffe15 	stw	r4,-8(fp)
 4008c74:	2805883a 	mov	r2,r5
 4008c78:	e0bfff05 	stb	r2,-4(fp)
                return pgm_read_byte_near(_ns_USBH_MIDI::cin2len + cin);
 4008c7c:	e0ffff03 	ldbu	r3,-4(fp)
 4008c80:	008100b4 	movhi	r2,1026
 4008c84:	108a1584 	addi	r2,r2,10326
 4008c88:	1885883a 	add	r2,r3,r2
 4008c8c:	10800003 	ldbu	r2,0(r2)
        };
 4008c90:	e037883a 	mov	sp,fp
 4008c94:	df000017 	ldw	fp,0(sp)
 4008c98:	dec00104 	addi	sp,sp,4
 4008c9c:	f800283a 	ret

04008ca0 <_ZN9USBH_MIDI10GetAddressEv>:
        inline uint8_t RcvData(uint8_t *outBuf) { return RecvData(outBuf); };

        // USBDeviceConfig implementation
        virtual uint8_t Init(uint8_t parent, uint8_t port, bool lowspeed);
        virtual uint8_t Release();
        virtual uint8_t GetAddress() { return bAddress; };
 4008ca0:	defffe04 	addi	sp,sp,-8
 4008ca4:	df000115 	stw	fp,4(sp)
 4008ca8:	df000104 	addi	fp,sp,4
 4008cac:	e13fff15 	stw	r4,-4(fp)
 4008cb0:	e0bfff17 	ldw	r2,-4(fp)
 4008cb4:	10800303 	ldbu	r2,12(r2)
 4008cb8:	e037883a 	mov	sp,fp
 4008cbc:	df000017 	ldw	fp,0(sp)
 4008cc0:	dec00104 	addi	sp,sp,4
 4008cc4:	f800283a 	ret

04008cc8 <_ZN21UsbMidiConfigXtracterC1Ev>:
const uint8_t cin2len[] PROGMEM =  {0, 0, 2, 3, 3, 1, 2, 3, 3, 3, 3, 3, 2, 2, 3, 1};
const uint8_t sys2cin[] PROGMEM =  {0, 2, 3, 2, 0, 0, 5, 0, 0xf, 0, 0xf, 0xf, 0xf, 0, 0xf, 0xf};
}

// Endpoint Descriptor extracter Class
class UsbMidiConfigXtracter {
 4008cc8:	defffe04 	addi	sp,sp,-8
 4008ccc:	df000115 	stw	fp,4(sp)
 4008cd0:	df000104 	addi	fp,sp,4
 4008cd4:	e13fff15 	stw	r4,-4(fp)
 4008cd8:	008100b4 	movhi	r2,1026
 4008cdc:	108a3204 	addi	r2,r2,10440
 4008ce0:	e0ffff17 	ldw	r3,-4(fp)
 4008ce4:	18800015 	stw	r2,0(r3)
 4008ce8:	0001883a 	nop
 4008cec:	e037883a 	mov	sp,fp
 4008cf0:	df000017 	ldw	fp,0(sp)
 4008cf4:	dec00104 	addi	sp,sp,4
 4008cf8:	f800283a 	ret

04008cfc <_Z10D_PrintHexItEvT_i>:
//                mask >>= 4;
//        }
//        prn->print((T)val, HEX);
//}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 4008cfc:	defffd04 	addi	sp,sp,-12
 4008d00:	df000215 	stw	fp,8(sp)
 4008d04:	df000204 	addi	fp,sp,8
 4008d08:	2005883a 	mov	r2,r4
 4008d0c:	e17fff15 	stw	r5,-4(fp)
 4008d10:	e0bffe0d 	sth	r2,-8(fp)
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 4008d14:	0001883a 	nop
 4008d18:	e037883a 	mov	sp,fp
 4008d1c:	df000017 	ldw	fp,0(sp)
 4008d20:	dec00104 	addi	sp,sp,4
 4008d24:	f800283a 	ret

04008d28 <_ZN6USBHID14GetReportDescrEtP13USBReadParser>:

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
}
 */
uint8_t USBHID::GetReportDescr(uint16_t wIndex, USBReadParser *parser) {
 4008d28:	deffe204 	addi	sp,sp,-120
 4008d2c:	dfc01d15 	stw	ra,116(sp)
 4008d30:	df001c15 	stw	fp,112(sp)
 4008d34:	df001c04 	addi	fp,sp,112
 4008d38:	e13ffd15 	stw	r4,-12(fp)
 4008d3c:	2805883a 	mov	r2,r5
 4008d40:	e1bfff15 	stw	r6,-4(fp)
 4008d44:	e0bffe0d 	sth	r2,-8(fp)
        const uint8_t constBufLen = 64;
 4008d48:	00801004 	movi	r2,64
 4008d4c:	e0bfec05 	stb	r2,-80(fp)
        uint8_t buf[constBufLen];

        uint8_t rcode = pUsb->ctrlReq(bAddress, 0x00, bmREQ_HID_REPORT, USB_REQUEST_GET_DESCRIPTOR, 0x00,
 4008d50:	e0bffd17 	ldw	r2,-12(fp)
 4008d54:	11000217 	ldw	r4,8(r2)
 4008d58:	e0bffd17 	ldw	r2,-12(fp)
 4008d5c:	10800303 	ldbu	r2,12(r2)
 4008d60:	11403fcc 	andi	r5,r2,255
 4008d64:	e0bffe0b 	ldhu	r2,-8(fp)
                HID_DESCRIPTOR_REPORT, wIndex, 128, constBufLen, buf, (USBReadParser*)parser);
 4008d68:	e0ffff17 	ldw	r3,-4(fp)
 4008d6c:	d8c00715 	stw	r3,28(sp)
 4008d70:	e0ffec84 	addi	r3,fp,-78
 4008d74:	d8c00615 	stw	r3,24(sp)
 4008d78:	00c01004 	movi	r3,64
 4008d7c:	d8c00515 	stw	r3,20(sp)
 4008d80:	00c02004 	movi	r3,128
 4008d84:	d8c00415 	stw	r3,16(sp)
 4008d88:	d8800315 	stw	r2,12(sp)
 4008d8c:	00800884 	movi	r2,34
 4008d90:	d8800215 	stw	r2,8(sp)
 4008d94:	d8000115 	stw	zero,4(sp)
 4008d98:	00800184 	movi	r2,6
 4008d9c:	d8800015 	stw	r2,0(sp)
 4008da0:	01c02044 	movi	r7,129
 4008da4:	000d883a 	mov	r6,zero
 4008da8:	40012c40 	call	40012c4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 4008dac:	e0bfec45 	stb	r2,-79(fp)

        //return ((rcode != hrSTALL) ? rcode : 0);
        return rcode;
 4008db0:	e0bfec43 	ldbu	r2,-79(fp)
}
 4008db4:	e037883a 	mov	sp,fp
 4008db8:	dfc00117 	ldw	ra,4(sp)
 4008dbc:	df000017 	ldw	fp,0(sp)
 4008dc0:	dec00204 	addi	sp,sp,8
 4008dc4:	f800283a 	ret

04008dc8 <_ZN6USBHID9SetReportEhhhhtPh>:
//uint8_t USBHID::getHidDescr( uint8_t ep, uint16_t nbytes, uint8_t* dataptr )
//{
//    return( pUsb->ctrlReq( bAddress, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, HID_DESCRIPTOR_HID, 0x0000, nbytes, dataptr ));
//}

uint8_t USBHID::SetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
 4008dc8:	defff004 	addi	sp,sp,-64
 4008dcc:	dfc00f15 	stw	ra,60(sp)
 4008dd0:	df000e15 	stw	fp,56(sp)
 4008dd4:	df000e04 	addi	fp,sp,56
 4008dd8:	e13ffa15 	stw	r4,-24(fp)
 4008ddc:	2811883a 	mov	r8,r5
 4008de0:	300b883a 	mov	r5,r6
 4008de4:	3809883a 	mov	r4,r7
 4008de8:	e0c00217 	ldw	r3,8(fp)
 4008dec:	e0800317 	ldw	r2,12(fp)
 4008df0:	e23ffb05 	stb	r8,-20(fp)
 4008df4:	e17ffc05 	stb	r5,-16(fp)
 4008df8:	e13ffd05 	stb	r4,-12(fp)
 4008dfc:	e0fffe05 	stb	r3,-8(fp)
 4008e00:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
 4008e04:	e0bffa17 	ldw	r2,-24(fp)
 4008e08:	12000217 	ldw	r8,8(r2)
 4008e0c:	e0bffa17 	ldw	r2,-24(fp)
 4008e10:	10800303 	ldbu	r2,12(r2)
 4008e14:	12403fcc 	andi	r9,r2,255
 4008e18:	e2bffb03 	ldbu	r10,-20(fp)
 4008e1c:	e0bffe03 	ldbu	r2,-8(fp)
 4008e20:	e0fffd03 	ldbu	r3,-12(fp)
 4008e24:	e13ffc03 	ldbu	r4,-16(fp)
 4008e28:	e17fff0b 	ldhu	r5,-4(fp)
 4008e2c:	e1bfff0b 	ldhu	r6,-4(fp)
 4008e30:	d8000715 	stw	zero,28(sp)
 4008e34:	e1c00417 	ldw	r7,16(fp)
 4008e38:	d9c00615 	stw	r7,24(sp)
 4008e3c:	d9800515 	stw	r6,20(sp)
 4008e40:	d9400415 	stw	r5,16(sp)
 4008e44:	d9000315 	stw	r4,12(sp)
 4008e48:	d8c00215 	stw	r3,8(sp)
 4008e4c:	d8800115 	stw	r2,4(sp)
 4008e50:	00800244 	movi	r2,9
 4008e54:	d8800015 	stw	r2,0(sp)
 4008e58:	01c00844 	movi	r7,33
 4008e5c:	500d883a 	mov	r6,r10
 4008e60:	480b883a 	mov	r5,r9
 4008e64:	4009883a 	mov	r4,r8
 4008e68:	40012c40 	call	40012c4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4008e6c:	e037883a 	mov	sp,fp
 4008e70:	dfc00117 	ldw	ra,4(sp)
 4008e74:	df000017 	ldw	fp,0(sp)
 4008e78:	dec00204 	addi	sp,sp,8
 4008e7c:	f800283a 	ret

04008e80 <_ZN6USBHID9GetReportEhhhhtPh>:

uint8_t USBHID::GetReport(uint8_t ep, uint8_t iface, uint8_t report_type, uint8_t report_id, uint16_t nbytes, uint8_t* dataptr) {
 4008e80:	defff004 	addi	sp,sp,-64
 4008e84:	dfc00f15 	stw	ra,60(sp)
 4008e88:	df000e15 	stw	fp,56(sp)
 4008e8c:	df000e04 	addi	fp,sp,56
 4008e90:	e13ffa15 	stw	r4,-24(fp)
 4008e94:	2811883a 	mov	r8,r5
 4008e98:	300b883a 	mov	r5,r6
 4008e9c:	3809883a 	mov	r4,r7
 4008ea0:	e0c00217 	ldw	r3,8(fp)
 4008ea4:	e0800317 	ldw	r2,12(fp)
 4008ea8:	e23ffb05 	stb	r8,-20(fp)
 4008eac:	e17ffc05 	stb	r5,-16(fp)
 4008eb0:	e13ffd05 	stb	r4,-12(fp)
 4008eb4:	e0fffe05 	stb	r3,-8(fp)
 4008eb8:	e0bfff0d 	sth	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, ep, bmREQ_HID_IN, HID_REQUEST_GET_REPORT, report_id, report_type, iface, nbytes, nbytes, dataptr, NULL));
 4008ebc:	e0bffa17 	ldw	r2,-24(fp)
 4008ec0:	12000217 	ldw	r8,8(r2)
 4008ec4:	e0bffa17 	ldw	r2,-24(fp)
 4008ec8:	10800303 	ldbu	r2,12(r2)
 4008ecc:	12403fcc 	andi	r9,r2,255
 4008ed0:	e2bffb03 	ldbu	r10,-20(fp)
 4008ed4:	e0bffe03 	ldbu	r2,-8(fp)
 4008ed8:	e0fffd03 	ldbu	r3,-12(fp)
 4008edc:	e13ffc03 	ldbu	r4,-16(fp)
 4008ee0:	e17fff0b 	ldhu	r5,-4(fp)
 4008ee4:	e1bfff0b 	ldhu	r6,-4(fp)
 4008ee8:	d8000715 	stw	zero,28(sp)
 4008eec:	e1c00417 	ldw	r7,16(fp)
 4008ef0:	d9c00615 	stw	r7,24(sp)
 4008ef4:	d9800515 	stw	r6,20(sp)
 4008ef8:	d9400415 	stw	r5,16(sp)
 4008efc:	d9000315 	stw	r4,12(sp)
 4008f00:	d8c00215 	stw	r3,8(sp)
 4008f04:	d8800115 	stw	r2,4(sp)
 4008f08:	00800044 	movi	r2,1
 4008f0c:	d8800015 	stw	r2,0(sp)
 4008f10:	01c02844 	movi	r7,161
 4008f14:	500d883a 	mov	r6,r10
 4008f18:	480b883a 	mov	r5,r9
 4008f1c:	4009883a 	mov	r4,r8
 4008f20:	40012c40 	call	40012c4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4008f24:	e037883a 	mov	sp,fp
 4008f28:	dfc00117 	ldw	ra,4(sp)
 4008f2c:	df000017 	ldw	fp,0(sp)
 4008f30:	dec00204 	addi	sp,sp,8
 4008f34:	f800283a 	ret

04008f38 <_ZN6USBHID7GetIdleEhhPh>:

uint8_t USBHID::GetIdle(uint8_t iface, uint8_t reportID, uint8_t* dataptr) {
 4008f38:	defff204 	addi	sp,sp,-56
 4008f3c:	dfc00d15 	stw	ra,52(sp)
 4008f40:	df000c15 	stw	fp,48(sp)
 4008f44:	df000c04 	addi	fp,sp,48
 4008f48:	e13ffc15 	stw	r4,-16(fp)
 4008f4c:	2807883a 	mov	r3,r5
 4008f50:	3005883a 	mov	r2,r6
 4008f54:	e1ffff15 	stw	r7,-4(fp)
 4008f58:	e0fffd05 	stb	r3,-12(fp)
 4008f5c:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_IDLE, reportID, 0, iface, 0x0001, 0x0001, dataptr, NULL));
 4008f60:	e0bffc17 	ldw	r2,-16(fp)
 4008f64:	12000217 	ldw	r8,8(r2)
 4008f68:	e0bffc17 	ldw	r2,-16(fp)
 4008f6c:	10800303 	ldbu	r2,12(r2)
 4008f70:	11403fcc 	andi	r5,r2,255
 4008f74:	e0bffe03 	ldbu	r2,-8(fp)
 4008f78:	e0fffd03 	ldbu	r3,-12(fp)
 4008f7c:	d8000715 	stw	zero,28(sp)
 4008f80:	e13fff17 	ldw	r4,-4(fp)
 4008f84:	d9000615 	stw	r4,24(sp)
 4008f88:	01000044 	movi	r4,1
 4008f8c:	d9000515 	stw	r4,20(sp)
 4008f90:	01000044 	movi	r4,1
 4008f94:	d9000415 	stw	r4,16(sp)
 4008f98:	d8c00315 	stw	r3,12(sp)
 4008f9c:	d8000215 	stw	zero,8(sp)
 4008fa0:	d8800115 	stw	r2,4(sp)
 4008fa4:	00800084 	movi	r2,2
 4008fa8:	d8800015 	stw	r2,0(sp)
 4008fac:	01c02844 	movi	r7,161
 4008fb0:	000d883a 	mov	r6,zero
 4008fb4:	4009883a 	mov	r4,r8
 4008fb8:	40012c40 	call	40012c4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4008fbc:	e037883a 	mov	sp,fp
 4008fc0:	dfc00117 	ldw	ra,4(sp)
 4008fc4:	df000017 	ldw	fp,0(sp)
 4008fc8:	dec00204 	addi	sp,sp,8
 4008fcc:	f800283a 	ret

04008fd0 <_ZN6USBHID7SetIdleEhhh>:

uint8_t USBHID::SetIdle(uint8_t iface, uint8_t reportID, uint8_t duration) {
 4008fd0:	defff204 	addi	sp,sp,-56
 4008fd4:	dfc00d15 	stw	ra,52(sp)
 4008fd8:	df000c15 	stw	fp,48(sp)
 4008fdc:	df000c04 	addi	fp,sp,48
 4008fe0:	e13ffc15 	stw	r4,-16(fp)
 4008fe4:	2809883a 	mov	r4,r5
 4008fe8:	3007883a 	mov	r3,r6
 4008fec:	3805883a 	mov	r2,r7
 4008ff0:	e13ffd05 	stb	r4,-12(fp)
 4008ff4:	e0fffe05 	stb	r3,-8(fp)
 4008ff8:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_IDLE, reportID, duration, iface, 0x0000, 0x0000, NULL, NULL));
 4008ffc:	e0bffc17 	ldw	r2,-16(fp)
 4009000:	12000217 	ldw	r8,8(r2)
 4009004:	e0bffc17 	ldw	r2,-16(fp)
 4009008:	10800303 	ldbu	r2,12(r2)
 400900c:	11403fcc 	andi	r5,r2,255
 4009010:	e0bffe03 	ldbu	r2,-8(fp)
 4009014:	e0ffff03 	ldbu	r3,-4(fp)
 4009018:	e13ffd03 	ldbu	r4,-12(fp)
 400901c:	d8000715 	stw	zero,28(sp)
 4009020:	d8000615 	stw	zero,24(sp)
 4009024:	d8000515 	stw	zero,20(sp)
 4009028:	d8000415 	stw	zero,16(sp)
 400902c:	d9000315 	stw	r4,12(sp)
 4009030:	d8c00215 	stw	r3,8(sp)
 4009034:	d8800115 	stw	r2,4(sp)
 4009038:	00800284 	movi	r2,10
 400903c:	d8800015 	stw	r2,0(sp)
 4009040:	01c00844 	movi	r7,33
 4009044:	000d883a 	mov	r6,zero
 4009048:	4009883a 	mov	r4,r8
 400904c:	40012c40 	call	40012c4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 4009050:	e037883a 	mov	sp,fp
 4009054:	dfc00117 	ldw	ra,4(sp)
 4009058:	df000017 	ldw	fp,0(sp)
 400905c:	dec00204 	addi	sp,sp,8
 4009060:	f800283a 	ret

04009064 <_ZN6USBHID11SetProtocolEhh>:

uint8_t USBHID::SetProtocol(uint8_t iface, uint8_t protocol) {
 4009064:	defff304 	addi	sp,sp,-52
 4009068:	dfc00c15 	stw	ra,48(sp)
 400906c:	df000b15 	stw	fp,44(sp)
 4009070:	df000b04 	addi	fp,sp,44
 4009074:	e13ffd15 	stw	r4,-12(fp)
 4009078:	2807883a 	mov	r3,r5
 400907c:	3005883a 	mov	r2,r6
 4009080:	e0fffe05 	stb	r3,-8(fp)
 4009084:	e0bfff05 	stb	r2,-4(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_OUT, HID_REQUEST_SET_PROTOCOL, protocol, 0x00, iface, 0x0000, 0x0000, NULL, NULL));
 4009088:	e0bffd17 	ldw	r2,-12(fp)
 400908c:	11000217 	ldw	r4,8(r2)
 4009090:	e0bffd17 	ldw	r2,-12(fp)
 4009094:	10800303 	ldbu	r2,12(r2)
 4009098:	11403fcc 	andi	r5,r2,255
 400909c:	e0bfff03 	ldbu	r2,-4(fp)
 40090a0:	e0fffe03 	ldbu	r3,-8(fp)
 40090a4:	d8000715 	stw	zero,28(sp)
 40090a8:	d8000615 	stw	zero,24(sp)
 40090ac:	d8000515 	stw	zero,20(sp)
 40090b0:	d8000415 	stw	zero,16(sp)
 40090b4:	d8c00315 	stw	r3,12(sp)
 40090b8:	d8000215 	stw	zero,8(sp)
 40090bc:	d8800115 	stw	r2,4(sp)
 40090c0:	008002c4 	movi	r2,11
 40090c4:	d8800015 	stw	r2,0(sp)
 40090c8:	01c00844 	movi	r7,33
 40090cc:	000d883a 	mov	r6,zero
 40090d0:	40012c40 	call	40012c4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 40090d4:	e037883a 	mov	sp,fp
 40090d8:	dfc00117 	ldw	ra,4(sp)
 40090dc:	df000017 	ldw	fp,0(sp)
 40090e0:	dec00204 	addi	sp,sp,8
 40090e4:	f800283a 	ret

040090e8 <_ZN6USBHID11GetProtocolEhPh>:

uint8_t USBHID::GetProtocol(uint8_t iface, uint8_t* dataptr) {
 40090e8:	defff304 	addi	sp,sp,-52
 40090ec:	dfc00c15 	stw	ra,48(sp)
 40090f0:	df000b15 	stw	fp,44(sp)
 40090f4:	df000b04 	addi	fp,sp,44
 40090f8:	e13ffd15 	stw	r4,-12(fp)
 40090fc:	2805883a 	mov	r2,r5
 4009100:	e1bfff15 	stw	r6,-4(fp)
 4009104:	e0bffe05 	stb	r2,-8(fp)
        return ( pUsb->ctrlReq(bAddress, 0, bmREQ_HID_IN, HID_REQUEST_GET_PROTOCOL, 0x00, 0x00, iface, 0x0001, 0x0001, dataptr, NULL));
 4009108:	e0bffd17 	ldw	r2,-12(fp)
 400910c:	11000217 	ldw	r4,8(r2)
 4009110:	e0bffd17 	ldw	r2,-12(fp)
 4009114:	10800303 	ldbu	r2,12(r2)
 4009118:	11403fcc 	andi	r5,r2,255
 400911c:	e0bffe03 	ldbu	r2,-8(fp)
 4009120:	d8000715 	stw	zero,28(sp)
 4009124:	e0ffff17 	ldw	r3,-4(fp)
 4009128:	d8c00615 	stw	r3,24(sp)
 400912c:	00c00044 	movi	r3,1
 4009130:	d8c00515 	stw	r3,20(sp)
 4009134:	00c00044 	movi	r3,1
 4009138:	d8c00415 	stw	r3,16(sp)
 400913c:	d8800315 	stw	r2,12(sp)
 4009140:	d8000215 	stw	zero,8(sp)
 4009144:	d8000115 	stw	zero,4(sp)
 4009148:	008000c4 	movi	r2,3
 400914c:	d8800015 	stw	r2,0(sp)
 4009150:	01c02844 	movi	r7,161
 4009154:	000d883a 	mov	r6,zero
 4009158:	40012c40 	call	40012c4 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 400915c:	e037883a 	mov	sp,fp
 4009160:	dfc00117 	ldw	ra,4(sp)
 4009164:	df000017 	ldw	fp,0(sp)
 4009168:	dec00204 	addi	sp,sp,8
 400916c:	f800283a 	ret

04009170 <_ZN6USBHID23PrintEndpointDescriptorEPK23USB_ENDPOINT_DESCRIPTOR>:

void USBHID::PrintEndpointDescriptor(const USB_ENDPOINT_DESCRIPTOR* ep_ptr) {
 4009170:	defffc04 	addi	sp,sp,-16
 4009174:	dfc00315 	stw	ra,12(sp)
 4009178:	df000215 	stw	fp,8(sp)
 400917c:	df000204 	addi	fp,sp,8
 4009180:	e13ffe15 	stw	r4,-8(fp)
 4009184:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("Endpoint descriptor:"), 0x80);
        Notify(PSTR("\r\nLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bLength, 0x80);
 4009188:	e0bfff17 	ldw	r2,-4(fp)
 400918c:	10800003 	ldbu	r2,0(r2)
 4009190:	10803fcc 	andi	r2,r2,255
 4009194:	01402004 	movi	r5,128
 4009198:	1009883a 	mov	r4,r2
 400919c:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bDescriptorType, 0x80);
 40091a0:	e0bfff17 	ldw	r2,-4(fp)
 40091a4:	10800043 	ldbu	r2,1(r2)
 40091a8:	10803fcc 	andi	r2,r2,255
 40091ac:	01402004 	movi	r5,128
 40091b0:	1009883a 	mov	r4,r2
 40091b4:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAddress:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bEndpointAddress, 0x80);
 40091b8:	e0bfff17 	ldw	r2,-4(fp)
 40091bc:	10800083 	ldbu	r2,2(r2)
 40091c0:	10803fcc 	andi	r2,r2,255
 40091c4:	01402004 	movi	r5,128
 40091c8:	1009883a 	mov	r4,r2
 40091cc:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nAttributes:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bmAttributes, 0x80);
 40091d0:	e0bfff17 	ldw	r2,-4(fp)
 40091d4:	108000c3 	ldbu	r2,3(r2)
 40091d8:	10803fcc 	andi	r2,r2,255
 40091dc:	01402004 	movi	r5,128
 40091e0:	1009883a 	mov	r4,r2
 40091e4:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>
        Notify(PSTR("\r\nMaxPktSize:\t"), 0x80);
        D_PrintHex<uint16_t > (ep_ptr->wMaxPacketSize, 0x80);
 40091e8:	e0bfff17 	ldw	r2,-4(fp)
 40091ec:	10c00103 	ldbu	r3,4(r2)
 40091f0:	10800143 	ldbu	r2,5(r2)
 40091f4:	1004923a 	slli	r2,r2,8
 40091f8:	10c4b03a 	or	r2,r2,r3
 40091fc:	10bfffcc 	andi	r2,r2,65535
 4009200:	01402004 	movi	r5,128
 4009204:	1009883a 	mov	r4,r2
 4009208:	4008cfc0 	call	4008cfc <_Z10D_PrintHexItEvT_i>
        Notify(PSTR("\r\nPoll Intrv:\t"), 0x80);
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
 400920c:	e0bfff17 	ldw	r2,-4(fp)
 4009210:	10800183 	ldbu	r2,6(r2)
 4009214:	10803fcc 	andi	r2,r2,255
 4009218:	01402004 	movi	r5,128
 400921c:	1009883a 	mov	r4,r2
 4009220:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>
}
 4009224:	0001883a 	nop
 4009228:	e037883a 	mov	sp,fp
 400922c:	dfc00117 	ldw	ra,4(sp)
 4009230:	df000017 	ldw	fp,0(sp)
 4009234:	dec00204 	addi	sp,sp,8
 4009238:	f800283a 	ret

0400923c <_ZN6USBHID18PrintHidDescriptorEPK18USB_HID_DESCRIPTOR>:

void USBHID::PrintHidDescriptor(const USB_HID_DESCRIPTOR *pDesc) {
 400923c:	defffc04 	addi	sp,sp,-16
 4009240:	dfc00315 	stw	ra,12(sp)
 4009244:	df000215 	stw	fp,8(sp)
 4009248:	df000204 	addi	fp,sp,8
 400924c:	e13ffe15 	stw	r4,-8(fp)
 4009250:	e17fff15 	stw	r5,-4(fp)
        Notify(PSTR("\r\n\r\nHID Descriptor:\r\n"), 0x80);
        Notify(PSTR("bDescLength:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bLength, 0x80);
 4009254:	e0bfff17 	ldw	r2,-4(fp)
 4009258:	10800003 	ldbu	r2,0(r2)
 400925c:	10803fcc 	andi	r2,r2,255
 4009260:	01402004 	movi	r5,128
 4009264:	1009883a 	mov	r4,r2
 4009268:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescriptorType:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescriptorType, 0x80);
 400926c:	e0bfff17 	ldw	r2,-4(fp)
 4009270:	10800043 	ldbu	r2,1(r2)
 4009274:	10803fcc 	andi	r2,r2,255
 4009278:	01402004 	movi	r5,128
 400927c:	1009883a 	mov	r4,r2
 4009280:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbcdHID:\t\t\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->bcdHID, 0x80);
 4009284:	e0bfff17 	ldw	r2,-4(fp)
 4009288:	10c00083 	ldbu	r3,2(r2)
 400928c:	108000c3 	ldbu	r2,3(r2)
 4009290:	1004923a 	slli	r2,r2,8
 4009294:	10c4b03a 	or	r2,r2,r3
 4009298:	10bfffcc 	andi	r2,r2,65535
 400929c:	01402004 	movi	r5,128
 40092a0:	1009883a 	mov	r4,r2
 40092a4:	4008cfc0 	call	4008cfc <_Z10D_PrintHexItEvT_i>

        Notify(PSTR("\r\nbCountryCode:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bCountryCode, 0x80);
 40092a8:	e0bfff17 	ldw	r2,-4(fp)
 40092ac:	10800103 	ldbu	r2,4(r2)
 40092b0:	10803fcc 	andi	r2,r2,255
 40092b4:	01402004 	movi	r5,128
 40092b8:	1009883a 	mov	r4,r2
 40092bc:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbNumDescriptors:\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bNumDescriptors, 0x80);
 40092c0:	e0bfff17 	ldw	r2,-4(fp)
 40092c4:	10800143 	ldbu	r2,5(r2)
 40092c8:	10803fcc 	andi	r2,r2,255
 40092cc:	01402004 	movi	r5,128
 40092d0:	1009883a 	mov	r4,r2
 40092d4:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nbDescrType:\t\t"), 0x80);
        D_PrintHex<uint8_t > (pDesc->bDescrType, 0x80);
 40092d8:	e0bfff17 	ldw	r2,-4(fp)
 40092dc:	10800183 	ldbu	r2,6(r2)
 40092e0:	10803fcc 	andi	r2,r2,255
 40092e4:	01402004 	movi	r5,128
 40092e8:	1009883a 	mov	r4,r2
 40092ec:	40034f00 	call	40034f0 <_Z10D_PrintHexIhEvT_i>

        Notify(PSTR("\r\nwDescriptorLength:\t"), 0x80);
        D_PrintHex<uint16_t > (pDesc->wDescriptorLength, 0x80);
 40092f0:	e0bfff17 	ldw	r2,-4(fp)
 40092f4:	10c001c3 	ldbu	r3,7(r2)
 40092f8:	10800203 	ldbu	r2,8(r2)
 40092fc:	1004923a 	slli	r2,r2,8
 4009300:	10c4b03a 	or	r2,r2,r3
 4009304:	10bfffcc 	andi	r2,r2,65535
 4009308:	01402004 	movi	r5,128
 400930c:	1009883a 	mov	r4,r2
 4009310:	4008cfc0 	call	4008cfc <_Z10D_PrintHexItEvT_i>
}
 4009314:	0001883a 	nop
 4009318:	e037883a 	mov	sp,fp
 400931c:	dfc00117 	ldw	ra,4(sp)
 4009320:	df000017 	ldw	fp,0(sp)
 4009324:	dec00204 	addi	sp,sp,8
 4009328:	f800283a 	ret

0400932c <_ZN8MAX3421eC1Ev>:
#include "../include/usbhost.h"

uint8_t usb_task_state;
MAX3421e::MAX3421e() {
 400932c:	defffd04 	addi	sp,sp,-12
 4009330:	dfc00215 	stw	ra,8(sp)
 4009334:	df000115 	stw	fp,4(sp)
 4009338:	df000104 	addi	fp,sp,4
 400933c:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Constructor\n");
 4009340:	010100b4 	movhi	r4,1026
 4009344:	21127a04 	addi	r4,r4,18920
 4009348:	400f0980 	call	400f098 <puts>
	vbusState = 0;
 400934c:	d0323745 	stb	zero,-14115(gp)
};
 4009350:	0001883a 	nop
 4009354:	e037883a 	mov	sp,fp
 4009358:	dfc00117 	ldw	ra,4(sp)
 400935c:	df000017 	ldw	fp,0(sp)
 4009360:	dec00204 	addi	sp,sp,8
 4009364:	f800283a 	ret

04009368 <_ZN8MAX3421e12getVbusStateEv>:

uint8_t MAX3421e::vbusState = 0;

uint8_t MAX3421e::getVbusState(void) {
 4009368:	defffe04 	addi	sp,sp,-8
 400936c:	df000115 	stw	fp,4(sp)
 4009370:	df000104 	addi	fp,sp,4
 4009374:	e13fff15 	stw	r4,-4(fp)
	return vbusState;
 4009378:	d0b23743 	ldbu	r2,-14115(gp)
};
 400937c:	e037883a 	mov	sp,fp
 4009380:	df000017 	ldw	fp,0(sp)
 4009384:	dec00104 	addi	sp,sp,4
 4009388:	f800283a 	ret

0400938c <_ZN8MAX3421e5regWrEhh>:

/* write single byte into MAX3421 register */
void MAX3421e::regWr(uint8_t reg, uint8_t val) {
 400938c:	defff704 	addi	sp,sp,-36
 4009390:	dfc00815 	stw	ra,32(sp)
 4009394:	df000715 	stw	fp,28(sp)
 4009398:	df000704 	addi	fp,sp,28
 400939c:	e13ffd15 	stw	r4,-12(fp)
 40093a0:	2807883a 	mov	r3,r5
 40093a4:	3005883a 	mov	r2,r6
 40093a8:	e0fffe05 	stb	r3,-8(fp)
 40093ac:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regWr\n");
	//    Select_MAX3421E;
	alt_u8 spi_command_string_tx[2] = "";
 40093b0:	e03ffc45 	stb	zero,-15(fp)
 40093b4:	e03ffc85 	stb	zero,-14(fp)
	alt_u8 spi_command_string_rx[1] = "";
 40093b8:	e03ffcc5 	stb	zero,-13(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
 40093bc:	e0bffe03 	ldbu	r2,-8(fp)
 40093c0:	10800084 	addi	r2,r2,2
 40093c4:	e0bffc45 	stb	r2,-15(fp)
	spi_command_string_tx[1] = val;
 40093c8:	e0bfff03 	ldbu	r2,-4(fp)
 40093cc:	e0bffc85 	stb	r2,-14(fp)
	//SPI_wr ( reg + 2 ); //set WR bit and send register number
	//SPI_wr ( val );
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 2,
 40093d0:	e0fffc44 	addi	r3,fp,-15
 40093d4:	d8000215 	stw	zero,8(sp)
 40093d8:	e0bffcc4 	addi	r2,fp,-13
 40093dc:	d8800115 	stw	r2,4(sp)
 40093e0:	d8000015 	stw	zero,0(sp)
 40093e4:	180f883a 	mov	r7,r3
 40093e8:	01800084 	movi	r6,2
 40093ec:	000b883a 	mov	r5,zero
 40093f0:	01020034 	movhi	r4,2048
 40093f4:	21042804 	addi	r4,r4,4256
 40093f8:	401e9f80 	call	401e9f8 <alt_avalon_spi_command>
		spi_command_string_tx, 0, spi_command_string_rx, 0);
 40093fc:	e0bffc05 	stb	r2,-16(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_wr RET = %x \n", return_code);
	//    Deselect_MAX3421E;
};
 4009400:	0001883a 	nop
 4009404:	e037883a 	mov	sp,fp
 4009408:	dfc00117 	ldw	ra,4(sp)
 400940c:	df000017 	ldw	fp,0(sp)
 4009410:	dec00204 	addi	sp,sp,8
 4009414:	f800283a 	ret

04009418 <_ZN8MAX3421e7bytesWrEhhPh>:
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
 4009418:	defff304 	addi	sp,sp,-52
 400941c:	dfc00c15 	stw	ra,48(sp)
 4009420:	df000b15 	stw	fp,44(sp)
 4009424:	dc000a15 	stw	r16,40(sp)
 4009428:	df000b04 	addi	fp,sp,44
 400942c:	e13ffb15 	stw	r4,-20(fp)
 4009430:	3009883a 	mov	r4,r6
 4009434:	e1fffe15 	stw	r7,-8(fp)
 4009438:	e17ffc05 	stb	r5,-16(fp)
 400943c:	e13ffd05 	stb	r4,-12(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
 4009440:	d809883a 	mov	r4,sp
 4009444:	2021883a 	mov	r16,r4
/* multiple-byte write                            */

/* returns a pointer to memory position after last written */
uint8_t* MAX3421e::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data) {
	//printf("MAX3421e bytesWr\n");
	alt_u8 spi_command_string_tx[nbytes + 1];
 4009448:	e13ffd03 	ldbu	r4,-12(fp)
 400944c:	e13ff815 	stw	r4,-32(fp)
 4009450:	200b883a 	mov	r5,r4
 4009454:	29400044 	addi	r5,r5,1
 4009458:	2819883a 	mov	r12,r5
 400945c:	001b883a 	mov	r13,zero
 4009460:	600ad77a 	srli	r5,r12,29
 4009464:	681290fa 	slli	r9,r13,3
 4009468:	2a52b03a 	or	r9,r5,r9
 400946c:	601090fa 	slli	r8,r12,3
 4009470:	200b883a 	mov	r5,r4
 4009474:	29400044 	addi	r5,r5,1
 4009478:	2815883a 	mov	r10,r5
 400947c:	0017883a 	mov	r11,zero
 4009480:	500ad77a 	srli	r5,r10,29
 4009484:	580690fa 	slli	r3,r11,3
 4009488:	28c6b03a 	or	r3,r5,r3
 400948c:	500490fa 	slli	r2,r10,3
 4009490:	2005883a 	mov	r2,r4
 4009494:	10800044 	addi	r2,r2,1
 4009498:	108000c4 	addi	r2,r2,3
 400949c:	1004d0ba 	srli	r2,r2,2
 40094a0:	1085883a 	add	r2,r2,r2
 40094a4:	1085883a 	add	r2,r2,r2
 40094a8:	d8b7c83a 	sub	sp,sp,r2
 40094ac:	d8800304 	addi	r2,sp,12
 40094b0:	1005883a 	mov	r2,r2
 40094b4:	e0bff915 	stw	r2,-28(fp)
	alt_u8 spi_command_string_rx[1];
	alt_u8 return_code;
	spi_command_string_tx[0] = reg + 2;
 40094b8:	e0bffc03 	ldbu	r2,-16(fp)
 40094bc:	10800084 	addi	r2,r2,2
 40094c0:	1007883a 	mov	r3,r2
 40094c4:	e0bff917 	ldw	r2,-28(fp)
 40094c8:	10c00005 	stb	r3,0(r2)
	memcpy(&spi_command_string_tx[1], data, nbytes);
 40094cc:	e0bff917 	ldw	r2,-28(fp)
 40094d0:	10800044 	addi	r2,r2,1
 40094d4:	e0fffd03 	ldbu	r3,-12(fp)
 40094d8:	180d883a 	mov	r6,r3
 40094dc:	e17ffe17 	ldw	r5,-8(fp)
 40094e0:	1009883a 	mov	r4,r2
 40094e4:	400ecdc0 	call	400ecdc <memcpy>

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, nbytes + 1,
 40094e8:	e0bffd03 	ldbu	r2,-12(fp)
 40094ec:	10800044 	addi	r2,r2,1
 40094f0:	1009883a 	mov	r4,r2
 40094f4:	e0fff917 	ldw	r3,-28(fp)
 40094f8:	d8000215 	stw	zero,8(sp)
 40094fc:	e0bffa44 	addi	r2,fp,-23
 4009500:	d8800115 	stw	r2,4(sp)
 4009504:	d8000015 	stw	zero,0(sp)
 4009508:	180f883a 	mov	r7,r3
 400950c:	200d883a 	mov	r6,r4
 4009510:	000b883a 	mov	r5,zero
 4009514:	01020034 	movhi	r4,2048
 4009518:	21042804 	addi	r4,r4,4256
 400951c:	401e9f80 	call	401e9f8 <alt_avalon_spi_command>
			spi_command_string_tx, 0, spi_command_string_rx, 0);
 4009520:	e0bffa05 	stb	r2,-24(fp)
//        nbytes--;
//    }
//    Deselect_MAX3421E;  //deassert SS
//    return( data );

	return (data + nbytes);
 4009524:	e0bffd03 	ldbu	r2,-12(fp)
 4009528:	e0fffe17 	ldw	r3,-8(fp)
 400952c:	1885883a 	add	r2,r3,r2
 4009530:	8037883a 	mov	sp,r16
}
 4009534:	e6ffff04 	addi	sp,fp,-4
 4009538:	dfc00217 	ldw	ra,8(sp)
 400953c:	df000117 	ldw	fp,4(sp)
 4009540:	dc000017 	ldw	r16,0(sp)
 4009544:	dec00304 	addi	sp,sp,12
 4009548:	f800283a 	ret

0400954c <_ZN8MAX3421e6gpioWrEh>:
/* GPIO write                                           */
/*GPIO byte is split between 2 registers, so two writes are needed to write one byte */

/* GPOUT bits are in the low nibble. 0-3 in IOPINS1, 4-7 in IOPINS2 */
void MAX3421e::gpioWr(uint8_t data) {
 400954c:	defffc04 	addi	sp,sp,-16
 4009550:	dfc00315 	stw	ra,12(sp)
 4009554:	df000215 	stw	fp,8(sp)
 4009558:	df000204 	addi	fp,sp,8
 400955c:	e13ffe15 	stw	r4,-8(fp)
 4009560:	2805883a 	mov	r2,r5
 4009564:	e0bfff05 	stb	r2,-4(fp)
	printf("MAX3421e gpioWr\n");
 4009568:	010100b4 	movhi	r4,1026
 400956c:	21128004 	addi	r4,r4,18944
 4009570:	400f0980 	call	400f098 <puts>
	regWr(rIOPINS1, data);
 4009574:	e0bfff03 	ldbu	r2,-4(fp)
 4009578:	100d883a 	mov	r6,r2
 400957c:	01402804 	movi	r5,160
 4009580:	e13ffe17 	ldw	r4,-8(fp)
 4009584:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
	data >>= 4;
 4009588:	e0bfff03 	ldbu	r2,-4(fp)
 400958c:	1005d13a 	srai	r2,r2,4
 4009590:	e0bfff05 	stb	r2,-4(fp)
	regWr(rIOPINS2, data);
 4009594:	e0bfff03 	ldbu	r2,-4(fp)
 4009598:	100d883a 	mov	r6,r2
 400959c:	01402a04 	movi	r5,168
 40095a0:	e13ffe17 	ldw	r4,-8(fp)
 40095a4:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
	return;
 40095a8:	0001883a 	nop
}
 40095ac:	e037883a 	mov	sp,fp
 40095b0:	dfc00117 	ldw	ra,4(sp)
 40095b4:	df000017 	ldw	fp,0(sp)
 40095b8:	dec00204 	addi	sp,sp,8
 40095bc:	f800283a 	ret

040095c0 <_ZN8MAX3421e5regRdEh>:

/* single host register read    */
uint8_t MAX3421e::regRd(uint8_t reg) {
 40095c0:	defff804 	addi	sp,sp,-32
 40095c4:	dfc00715 	stw	ra,28(sp)
 40095c8:	df000615 	stw	fp,24(sp)
 40095cc:	df000604 	addi	fp,sp,24
 40095d0:	e13ffe15 	stw	r4,-8(fp)
 40095d4:	2805883a 	mov	r2,r5
 40095d8:	e0bfff05 	stb	r2,-4(fp)
	//printf("MAX3421e regRd\n");
	alt_u8 spi_command_string_tx[1] = "";
 40095dc:	e03ffd45 	stb	zero,-11(fp)
	alt_u8 spi_command_string_rx[1] = "";
 40095e0:	e03ffd85 	stb	zero,-10(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
 40095e4:	e0bfff03 	ldbu	r2,-4(fp)
 40095e8:	e0bffd45 	stb	r2,-11(fp)
	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
 40095ec:	e0fffd44 	addi	r3,fp,-11
 40095f0:	d8000215 	stw	zero,8(sp)
 40095f4:	e0bffd84 	addi	r2,fp,-10
 40095f8:	d8800115 	stw	r2,4(sp)
 40095fc:	00800044 	movi	r2,1
 4009600:	d8800015 	stw	r2,0(sp)
 4009604:	180f883a 	mov	r7,r3
 4009608:	01800044 	movi	r6,1
 400960c:	000b883a 	mov	r5,zero
 4009610:	01020034 	movhi	r4,2048
 4009614:	21042804 	addi	r4,r4,4256
 4009618:	401e9f80 	call	401e9f8 <alt_avalon_spi_command>
		spi_command_string_tx, 1, spi_command_string_rx, 0);
 400961c:	e0bffd05 	stb	r2,-12(fp)
	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return spi_command_string_rx[0];
 4009620:	e0bffd83 	ldbu	r2,-10(fp)
}
 4009624:	e037883a 	mov	sp,fp
 4009628:	dfc00117 	ldw	ra,4(sp)
 400962c:	df000017 	ldw	fp,0(sp)
 4009630:	dec00204 	addi	sp,sp,8
 4009634:	f800283a 	ret

04009638 <_ZN8MAX3421e7bytesRdEhhPh>:
/* multiple-byte register read  */

/* returns a pointer to a memory position after last read   */
uint8_t* MAX3421e::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data) {
 4009638:	defff604 	addi	sp,sp,-40
 400963c:	dfc00915 	stw	ra,36(sp)
 4009640:	df000815 	stw	fp,32(sp)
 4009644:	df000804 	addi	fp,sp,32
 4009648:	e13ffc15 	stw	r4,-16(fp)
 400964c:	2807883a 	mov	r3,r5
 4009650:	3005883a 	mov	r2,r6
 4009654:	e1ffff15 	stw	r7,-4(fp)
 4009658:	e0fffd05 	stb	r3,-12(fp)
 400965c:	e0bffe05 	stb	r2,-8(fp)
	//printf("MAX3421e bytesRd\n");
	alt_u8 spi_command_string_tx[1] = "";
 4009660:	e03ffb45 	stb	zero,-19(fp)
	alt_u8 return_code;
	spi_command_string_tx[0] = reg;
 4009664:	e0bffd03 	ldbu	r2,-12(fp)
 4009668:	e0bffb45 	stb	r2,-19(fp)

	return_code = alt_avalon_spi_command(SPI_0_BASE, 0, 1,
 400966c:	e0bffe03 	ldbu	r2,-8(fp)
 4009670:	e13ffb44 	addi	r4,fp,-19
 4009674:	d8000215 	stw	zero,8(sp)
 4009678:	e0ffff17 	ldw	r3,-4(fp)
 400967c:	d8c00115 	stw	r3,4(sp)
 4009680:	d8800015 	stw	r2,0(sp)
 4009684:	200f883a 	mov	r7,r4
 4009688:	01800044 	movi	r6,1
 400968c:	000b883a 	mov	r5,zero
 4009690:	01020034 	movhi	r4,2048
 4009694:	21042804 	addi	r4,r4,4256
 4009698:	401e9f80 	call	401e9f8 <alt_avalon_spi_command>
		spi_command_string_tx, nbytes, data, 0);
 400969c:	e0bffb05 	stb	r2,-20(fp)

	if (return_code < 0)
		printf("ERROR SPI MAXreg_rd RET = %x \n", return_code);

	return (data + nbytes);
 40096a0:	e0bffe03 	ldbu	r2,-8(fp)
 40096a4:	e0ffff17 	ldw	r3,-4(fp)
 40096a8:	1885883a 	add	r2,r3,r2
}
 40096ac:	e037883a 	mov	sp,fp
 40096b0:	dfc00117 	ldw	ra,4(sp)
 40096b4:	df000017 	ldw	fp,0(sp)
 40096b8:	dec00204 	addi	sp,sp,8
 40096bc:	f800283a 	ret

040096c0 <_ZN8MAX3421e6gpioRdEv>:

/** @brief  Reads the current GPI input values
*   @retval uint8_t Bitwise value of all 8 GPI inputs
*/
/* GPIN pins are in high nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRd() {
 40096c0:	defffc04 	addi	sp,sp,-16
 40096c4:	dfc00315 	stw	ra,12(sp)
 40096c8:	df000215 	stw	fp,8(sp)
 40096cc:	df000204 	addi	fp,sp,8
 40096d0:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRd\n");
 40096d4:	010100b4 	movhi	r4,1026
 40096d8:	21128404 	addi	r4,r4,18960
 40096dc:	400f0980 	call	400f098 <puts>
	uint8_t gpin = 0;
 40096e0:	e03ffe05 	stb	zero,-8(fp)
	gpin = regRd(rIOPINS2); //pins 4-7
 40096e4:	01402a04 	movi	r5,168
 40096e8:	e13fff17 	ldw	r4,-4(fp)
 40096ec:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 40096f0:	e0bffe05 	stb	r2,-8(fp)
	gpin &= 0xf0; //clean lower nibble
 40096f4:	e0fffe03 	ldbu	r3,-8(fp)
 40096f8:	00bffc04 	movi	r2,-16
 40096fc:	1884703a 	and	r2,r3,r2
 4009700:	e0bffe05 	stb	r2,-8(fp)
	gpin |= (regRd(rIOPINS1) >> 4); //shift low bits and OR with upper from previous operation.
 4009704:	01402804 	movi	r5,160
 4009708:	e13fff17 	ldw	r4,-4(fp)
 400970c:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 4009710:	10803fcc 	andi	r2,r2,255
 4009714:	1005d13a 	srai	r2,r2,4
 4009718:	1007883a 	mov	r3,r2
 400971c:	e0bffe03 	ldbu	r2,-8(fp)
 4009720:	1884b03a 	or	r2,r3,r2
 4009724:	e0bffe05 	stb	r2,-8(fp)
	return ( gpin);
 4009728:	e0bffe03 	ldbu	r2,-8(fp)
}
 400972c:	e037883a 	mov	sp,fp
 4009730:	dfc00117 	ldw	ra,4(sp)
 4009734:	df000017 	ldw	fp,0(sp)
 4009738:	dec00204 	addi	sp,sp,8
 400973c:	f800283a 	ret

04009740 <_ZN8MAX3421e12gpioRdOutputEv>:

/** @brief  Reads the current GPI output values
*   @retval uint8_t Bitwise value of all 8 GPI outputs
*/
/* GPOUT pins are in low nibbles of IOPINS1, IOPINS2    */
uint8_t MAX3421e::gpioRdOutput() {
 4009740:	defffc04 	addi	sp,sp,-16
 4009744:	dfc00315 	stw	ra,12(sp)
 4009748:	df000215 	stw	fp,8(sp)
 400974c:	df000204 	addi	fp,sp,8
 4009750:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e gpioRdOutput\n");
 4009754:	010100b4 	movhi	r4,1026
 4009758:	21128804 	addi	r4,r4,18976
 400975c:	400f0980 	call	400f098 <puts>
	uint8_t gpout = 0;
 4009760:	e03ffe05 	stb	zero,-8(fp)
	gpout = regRd(rIOPINS1); //pins 0-3
 4009764:	01402804 	movi	r5,160
 4009768:	e13fff17 	ldw	r4,-4(fp)
 400976c:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 4009770:	e0bffe05 	stb	r2,-8(fp)
		gpout &= 0x0f; //clean upper nibble
 4009774:	e0bffe03 	ldbu	r2,-8(fp)
 4009778:	108003cc 	andi	r2,r2,15
 400977c:	e0bffe05 	stb	r2,-8(fp)
		gpout |= (regRd(rIOPINS2) << 4); //shift high bits and OR with lower from previous operation.
 4009780:	01402a04 	movi	r5,168
 4009784:	e13fff17 	ldw	r4,-4(fp)
 4009788:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 400978c:	10803fcc 	andi	r2,r2,255
 4009790:	1004913a 	slli	r2,r2,4
 4009794:	1007883a 	mov	r3,r2
 4009798:	e0bffe03 	ldbu	r2,-8(fp)
 400979c:	1884b03a 	or	r2,r3,r2
 40097a0:	e0bffe05 	stb	r2,-8(fp)
		return ( gpout);
 40097a4:	e0bffe03 	ldbu	r2,-8(fp)
}
 40097a8:	e037883a 	mov	sp,fp
 40097ac:	dfc00117 	ldw	ra,4(sp)
 40097b0:	df000017 	ldw	fp,0(sp)
 40097b4:	dec00204 	addi	sp,sp,8
 40097b8:	f800283a 	ret

040097bc <_ZN8MAX3421e5resetEv>:

/* reset MAX3421E. Returns number of cycles it took for PLL to stabilize after reset
  or zero if PLL haven't stabilized in 65535 cycles */
uint16_t MAX3421e::reset() {
 40097bc:	defffc04 	addi	sp,sp,-16
 40097c0:	dfc00315 	stw	ra,12(sp)
 40097c4:	df000215 	stw	fp,8(sp)
 40097c8:	df000204 	addi	fp,sp,8
 40097cc:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e reset\n");
 40097d0:	010100b4 	movhi	r4,1026
 40097d4:	21128e04 	addi	r4,r4,19000
 40097d8:	400f0980 	call	400f098 <puts>
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 40097dc:	0007883a 	mov	r3,zero
 40097e0:	00845c04 	movi	r2,4464
 40097e4:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
 40097e8:	010003f4 	movhi	r4,15
 40097ec:	21109004 	addi	r4,r4,16960
 40097f0:	401c1300 	call	401c130 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 40097f4:	00c00044 	movi	r3,1
 40097f8:	00845c04 	movi	r2,4464
 40097fc:	10c00035 	stwio	r3,0(r2)
	uint16_t i = 0;
 4009800:	e03ffe0d 	sth	zero,-8(fp)
	regWr(rUSBCTL, bmCHIPRES);
 4009804:	01800804 	movi	r6,32
 4009808:	01401e04 	movi	r5,120
 400980c:	e13fff17 	ldw	r4,-4(fp)
 4009810:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
	regWr(rUSBCTL, 0x00);
 4009814:	000d883a 	mov	r6,zero
 4009818:	01401e04 	movi	r5,120
 400981c:	e13fff17 	ldw	r4,-4(fp)
 4009820:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
	while(++i) {
 4009824:	e0bffe0b 	ldhu	r2,-8(fp)
 4009828:	10800044 	addi	r2,r2,1
 400982c:	e0bffe0d 	sth	r2,-8(fp)
 4009830:	e0bffe0b 	ldhu	r2,-8(fp)
 4009834:	1004c03a 	cmpne	r2,r2,zero
 4009838:	10803fcc 	andi	r2,r2,255
 400983c:	10000a26 	beq	r2,zero,4009868 <_ZN8MAX3421e5resetEv+0xac>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 4009840:	01401a04 	movi	r5,104
 4009844:	e13fff17 	ldw	r4,-4(fp)
 4009848:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 400984c:	10803fcc 	andi	r2,r2,255
 4009850:	1080004c 	andi	r2,r2,1
 4009854:	1004c03a 	cmpne	r2,r2,zero
 4009858:	10803fcc 	andi	r2,r2,255
 400985c:	1000011e 	bne	r2,zero,4009864 <_ZN8MAX3421e5resetEv+0xa8>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	uint16_t i = 0;
	regWr(rUSBCTL, bmCHIPRES);
	regWr(rUSBCTL, 0x00);
	while(++i) {
 4009860:	003ff006 	br	4009824 <__alt_data_end+0xfc009824>
		if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
			break;
 4009864:	0001883a 	nop
		}
	}
	return ( i);
 4009868:	e0bffe0b 	ldhu	r2,-8(fp)
}
 400986c:	e037883a 	mov	sp,fp
 4009870:	dfc00117 	ldw	ra,4(sp)
 4009874:	df000017 	ldw	fp,0(sp)
 4009878:	dec00204 	addi	sp,sp,8
 400987c:	f800283a 	ret

04009880 <_Z10Vbus_powerb>:

/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
bool Vbus_power(bool action) {
 4009880:	defffe04 	addi	sp,sp,-8
 4009884:	df000115 	stw	fp,4(sp)
 4009888:	df000104 	addi	fp,sp,4
 400988c:	2005883a 	mov	r2,r4
 4009890:	e0bfff05 	stb	r2,-4(fp)
	// power on/off successful
	return (1);
 4009894:	00800044 	movi	r2,1
}
 4009898:	e037883a 	mov	sp,fp
 400989c:	df000017 	ldw	fp,0(sp)
 40098a0:	dec00104 	addi	sp,sp,4
 40098a4:	f800283a 	ret

040098a8 <_ZN8MAX3421e4InitEv>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init() {
 40098a8:	defffd04 	addi	sp,sp,-12
 40098ac:	dfc00215 	stw	ra,8(sp)
 40098b0:	df000115 	stw	fp,4(sp)
 40098b4:	df000104 	addi	fp,sp,4
 40098b8:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e Init\n");
 40098bc:	010100b4 	movhi	r4,1026
 40098c0:	21129204 	addi	r4,r4,19016
 40098c4:	400f0980 	call	400f098 <puts>
	/* Configure full-duplex SPI, interrupt pulse   */
	/* MAX3421E - full-duplex SPI, level interrupt */
	// GPX pin on. Moved here, otherwise we flicker the vbus.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 40098c8:	01800604 	movi	r6,24
 40098cc:	01402204 	movi	r5,136
 40098d0:	e13fff17 	ldw	r4,-4(fp)
 40098d4:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 40098d8:	e13fff17 	ldw	r4,-4(fp)
 40098dc:	40097bc0 	call	40097bc <_ZN8MAX3421e5resetEv>
 40098e0:	10bfffcc 	andi	r2,r2,65535
 40098e4:	1005003a 	cmpeq	r2,r2,zero
 40098e8:	10803fcc 	andi	r2,r2,255
 40098ec:	10000226 	beq	r2,zero,40098f8 <_ZN8MAX3421e4InitEv+0x50>
		return ( -1);
 40098f0:	00bfffc4 	movi	r2,-1
 40098f4:	00002006 	br	4009978 <_ZN8MAX3421e4InitEv+0xd0>
	}

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 40098f8:	01803044 	movi	r6,193
 40098fc:	01403604 	movi	r5,216
 4009900:	e13fff17 	ldw	r4,-4(fp)
 4009904:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 4009908:	01801804 	movi	r6,96
 400990c:	01403404 	movi	r5,208
 4009910:	e13fff17 	ldw	r4,-4(fp)
 4009914:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 4009918:	01800104 	movi	r6,4
 400991c:	01403a04 	movi	r5,232
 4009920:	e13fff17 	ldw	r4,-4(fp)
 4009924:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 4009928:	01403a04 	movi	r5,232
 400992c:	e13fff17 	ldw	r4,-4(fp)
 4009930:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 4009934:	10803fcc 	andi	r2,r2,255
 4009938:	1080010c 	andi	r2,r2,4
 400993c:	1005003a 	cmpeq	r2,r2,zero
 4009940:	10803fcc 	andi	r2,r2,255
 4009944:	10000126 	beq	r2,zero,400994c <_ZN8MAX3421e4InitEv+0xa4>
 4009948:	003ff706 	br	4009928 <__alt_data_end+0xfc009928>

	busprobe(); //check if anything is connected
 400994c:	e13fff17 	ldw	r4,-4(fp)
 4009950:	4009aa40 	call	4009aa4 <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 4009954:	01800804 	movi	r6,32
 4009958:	01403204 	movi	r5,200
 400995c:	e13fff17 	ldw	r4,-4(fp)
 4009960:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
 4009964:	01800044 	movi	r6,1
 4009968:	01402004 	movi	r5,128
 400996c:	e13fff17 	ldw	r4,-4(fp)
 4009970:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>

	return ( 0);                           //enable interrupt pin
 4009974:	0005883a 	mov	r2,zero
}
 4009978:	e037883a 	mov	sp,fp
 400997c:	dfc00117 	ldw	ra,4(sp)
 4009980:	df000017 	ldw	fp,0(sp)
 4009984:	dec00204 	addi	sp,sp,8
 4009988:	f800283a 	ret

0400998c <_ZN8MAX3421e4InitEi>:

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
int8_t MAX3421e::Init(int mseconds) {
 400998c:	defffc04 	addi	sp,sp,-16
 4009990:	dfc00315 	stw	ra,12(sp)
 4009994:	df000215 	stw	fp,8(sp)
 4009998:	df000204 	addi	fp,sp,8
 400999c:	e13ffe15 	stw	r4,-8(fp)
 40099a0:	e17fff15 	stw	r5,-4(fp)
	printf("MAX3421e Init mseconds\n");
 40099a4:	010100b4 	movhi	r4,1026
 40099a8:	21129604 	addi	r4,r4,19032
 40099ac:	400f0980 	call	400f098 <puts>
	/* MAX3421E - full-duplex SPI, level interrupt, vbus off */
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL | GPX_VBDET));
 40099b0:	01800644 	movi	r6,25
 40099b4:	01402204 	movi	r5,136
 40099b8:	e13ffe17 	ldw	r4,-8(fp)
 40099bc:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>

	if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 40099c0:	e13ffe17 	ldw	r4,-8(fp)
 40099c4:	40097bc0 	call	40097bc <_ZN8MAX3421e5resetEv>
 40099c8:	10bfffcc 	andi	r2,r2,65535
 40099cc:	1005003a 	cmpeq	r2,r2,zero
 40099d0:	10803fcc 	andi	r2,r2,255
 40099d4:	10000226 	beq	r2,zero,40099e0 <_ZN8MAX3421e4InitEi+0x54>
		return ( -1);
 40099d8:	00bfffc4 	movi	r2,-1
 40099dc:	00002c06 	br	4009a90 <_ZN8MAX3421e4InitEi+0x104>
	}

	// Delay a minimum of 1 second to ensure any capacitors are drained.
	// 1 second is required to make sure we do not smoke a Microdrive!
	if(mseconds < 1000) mseconds = 1000;
 40099e0:	e0bfff17 	ldw	r2,-4(fp)
 40099e4:	1080fa08 	cmpgei	r2,r2,1000
 40099e8:	1000021e 	bne	r2,zero,40099f4 <_ZN8MAX3421e4InitEi+0x68>
 40099ec:	0080fa04 	movi	r2,1000
 40099f0:	e0bfff15 	stw	r2,-4(fp)
	delay(mseconds);
 40099f4:	e0bfff17 	ldw	r2,-4(fp)
 40099f8:	1009883a 	mov	r4,r2
 40099fc:	4000dac0 	call	4000dac <_Z5delaym>

	regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 4009a00:	01803044 	movi	r6,193
 4009a04:	01403604 	movi	r5,216
 4009a08:	e13ffe17 	ldw	r4,-8(fp)
 4009a0c:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>

	regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 4009a10:	01801804 	movi	r6,96
 4009a14:	01403404 	movi	r5,208
 4009a18:	e13ffe17 	ldw	r4,-8(fp)
 4009a1c:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>

	/* check if device is connected */
	regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 4009a20:	01800104 	movi	r6,4
 4009a24:	01403a04 	movi	r5,232
 4009a28:	e13ffe17 	ldw	r4,-8(fp)
 4009a2c:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
	while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 4009a30:	01403a04 	movi	r5,232
 4009a34:	e13ffe17 	ldw	r4,-8(fp)
 4009a38:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 4009a3c:	10803fcc 	andi	r2,r2,255
 4009a40:	1080010c 	andi	r2,r2,4
 4009a44:	1005003a 	cmpeq	r2,r2,zero
 4009a48:	10803fcc 	andi	r2,r2,255
 4009a4c:	10000126 	beq	r2,zero,4009a54 <_ZN8MAX3421e4InitEi+0xc8>
 4009a50:	003ff706 	br	4009a30 <__alt_data_end+0xfc009a30>

	busprobe(); //check if anything is connected
 4009a54:	e13ffe17 	ldw	r4,-8(fp)
 4009a58:	4009aa40 	call	4009aa4 <_ZN8MAX3421e8busprobeEv>

	regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 4009a5c:	01800804 	movi	r6,32
 4009a60:	01403204 	movi	r5,200
 4009a64:	e13ffe17 	ldw	r4,-8(fp)
 4009a68:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
	regWr(rCPUCTL, 0x01); //enable interrupt pin
 4009a6c:	01800044 	movi	r6,1
 4009a70:	01402004 	movi	r5,128
 4009a74:	e13ffe17 	ldw	r4,-8(fp)
 4009a78:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>

	// GPX pin on. This is done here so that busprobe will fail if we have a switch connected.
	regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 4009a7c:	01800604 	movi	r6,24
 4009a80:	01402204 	movi	r5,136
 4009a84:	e13ffe17 	ldw	r4,-8(fp)
 4009a88:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>

	return ( 0);
 4009a8c:	0005883a 	mov	r2,zero
}
 4009a90:	e037883a 	mov	sp,fp
 4009a94:	dfc00117 	ldw	ra,4(sp)
 4009a98:	df000017 	ldw	fp,0(sp)
 4009a9c:	dec00204 	addi	sp,sp,8
 4009aa0:	f800283a 	ret

04009aa4 <_ZN8MAX3421e8busprobeEv>:

/* probe bus to determine device presence and speed and switch host to this speed */
void MAX3421e::busprobe() {
 4009aa4:	defffc04 	addi	sp,sp,-16
 4009aa8:	dfc00315 	stw	ra,12(sp)
 4009aac:	df000215 	stw	fp,8(sp)
 4009ab0:	df000204 	addi	fp,sp,8
 4009ab4:	e13fff15 	stw	r4,-4(fp)
	printf("MAX3421e busprobe\n");
 4009ab8:	010100b4 	movhi	r4,1026
 4009abc:	21129c04 	addi	r4,r4,19056
 4009ac0:	400f0980 	call	400f098 <puts>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
 4009ac4:	01403e04 	movi	r5,248
 4009ac8:	e13fff17 	ldw	r4,-4(fp)
 4009acc:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 4009ad0:	e0bffe05 	stb	r2,-8(fp)
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 4009ad4:	e0fffe03 	ldbu	r3,-8(fp)
 4009ad8:	00bff004 	movi	r2,-64
 4009adc:	1884703a 	and	r2,r3,r2
 4009ae0:	e0bffe05 	stb	r2,-8(fp)
	switch(bus_sample) { //start full-speed or low-speed host
 4009ae4:	e0bffe03 	ldbu	r2,-8(fp)
 4009ae8:	10c01020 	cmpeqi	r3,r2,64
 4009aec:	1800251e 	bne	r3,zero,4009b84 <_ZN8MAX3421e8busprobeEv+0xe0>
 4009af0:	10c01048 	cmpgei	r3,r2,65
 4009af4:	1800021e 	bne	r3,zero,4009b00 <_ZN8MAX3421e8busprobeEv+0x5c>
 4009af8:	10003b26 	beq	r2,zero,4009be8 <_ZN8MAX3421e8busprobeEv+0x144>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
 4009afc:	00004006 	br	4009c00 <_ZN8MAX3421e8busprobeEv+0x15c>
void MAX3421e::busprobe() {
	printf("MAX3421e busprobe\n");
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
 4009b00:	10c02020 	cmpeqi	r3,r2,128
 4009b04:	1800031e 	bne	r3,zero,4009b14 <_ZN8MAX3421e8busprobeEv+0x70>
 4009b08:	10803020 	cmpeqi	r2,r2,192
 4009b0c:	1000331e 	bne	r2,zero,4009bdc <_ZN8MAX3421e8busprobeEv+0x138>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
			vbusState = SE0;
			break;
	}//end switch( bus_sample )
}
 4009b10:	00003b06 	br	4009c00 <_ZN8MAX3421e8busprobeEv+0x15c>
	uint8_t bus_sample;
	bus_sample = regRd(rHRSL); //Get J,K status
	bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
	switch(bus_sample) { //start full-speed or low-speed host
		case( bmJSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
 4009b14:	01403604 	movi	r5,216
 4009b18:	e13fff17 	ldw	r4,-4(fp)
 4009b1c:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 4009b20:	10803fcc 	andi	r2,r2,255
 4009b24:	1080008c 	andi	r2,r2,2
 4009b28:	1005003a 	cmpeq	r2,r2,zero
 4009b2c:	10803fcc 	andi	r2,r2,255
 4009b30:	10000a26 	beq	r2,zero,4009b5c <_ZN8MAX3421e8busprobeEv+0xb8>
				printf("Starting full-speed host\n");
 4009b34:	010100b4 	movhi	r4,1026
 4009b38:	2112a104 	addi	r4,r4,19076
 4009b3c:	400f0980 	call	400f098 <puts>
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
 4009b40:	01803244 	movi	r6,201
 4009b44:	01403604 	movi	r5,216
 4009b48:	e13fff17 	ldw	r4,-4(fp)
 4009b4c:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
 4009b50:	00800084 	movi	r2,2
 4009b54:	d0b23745 	stb	r2,-14115(gp)
			} else {
				printf("Starting low-speed host\n");
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			}
			break;
 4009b58:	00002906 	br	4009c00 <_ZN8MAX3421e8busprobeEv+0x15c>
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				printf("Starting full-speed host\n");
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			} else {
				printf("Starting low-speed host\n");
 4009b5c:	010100b4 	movhi	r4,1026
 4009b60:	2112a804 	addi	r4,r4,19104
 4009b64:	400f0980 	call	400f098 <puts>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
 4009b68:	018032c4 	movi	r6,203
 4009b6c:	01403604 	movi	r5,216
 4009b70:	e13fff17 	ldw	r4,-4(fp)
 4009b74:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
 4009b78:	008000c4 	movi	r2,3
 4009b7c:	d0b23745 	stb	r2,-14115(gp)
			}
			break;
 4009b80:	00001f06 	br	4009c00 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
 4009b84:	01403604 	movi	r5,216
 4009b88:	e13fff17 	ldw	r4,-4(fp)
 4009b8c:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 4009b90:	10803fcc 	andi	r2,r2,255
 4009b94:	1080008c 	andi	r2,r2,2
 4009b98:	1005003a 	cmpeq	r2,r2,zero
 4009b9c:	10803fcc 	andi	r2,r2,255
 4009ba0:	10000726 	beq	r2,zero,4009bc0 <_ZN8MAX3421e8busprobeEv+0x11c>
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
 4009ba4:	018032c4 	movi	r6,203
 4009ba8:	01403604 	movi	r5,216
 4009bac:	e13fff17 	ldw	r4,-4(fp)
 4009bb0:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
				vbusState = LSHOST;
 4009bb4:	008000c4 	movi	r2,3
 4009bb8:	d0b23745 	stb	r2,-14115(gp)
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
				vbusState = FSHOST;
			}
			break;
 4009bbc:	00001006 	br	4009c00 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmKSTATUS):
			if((regRd(rMODE) & bmLOWSPEED) == 0) {
				regWr(rMODE, MODE_LS_HOST); //start low-speed host
				vbusState = LSHOST;
			} else {
				regWr(rMODE, MODE_FS_HOST); //start full-speed host
 4009bc0:	01803244 	movi	r6,201
 4009bc4:	01403604 	movi	r5,216
 4009bc8:	e13fff17 	ldw	r4,-4(fp)
 4009bcc:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
				vbusState = FSHOST;
 4009bd0:	00800084 	movi	r2,2
 4009bd4:	d0b23745 	stb	r2,-14115(gp)
			}
			break;
 4009bd8:	00000906 	br	4009c00 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE1): //illegal state
			vbusState = SE1;
 4009bdc:	00800044 	movi	r2,1
 4009be0:	d0b23745 	stb	r2,-14115(gp)
			break;
 4009be4:	00000606 	br	4009c00 <_ZN8MAX3421e8busprobeEv+0x15c>
		case( bmSE0): //disconnected state
			regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 4009be8:	01803444 	movi	r6,209
 4009bec:	01403604 	movi	r5,216
 4009bf0:	e13fff17 	ldw	r4,-4(fp)
 4009bf4:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
			vbusState = SE0;
 4009bf8:	d0323745 	stb	zero,-14115(gp)
			break;
 4009bfc:	0001883a 	nop
	}//end switch( bus_sample )
}
 4009c00:	0001883a 	nop
 4009c04:	e037883a 	mov	sp,fp
 4009c08:	dfc00117 	ldw	ra,4(sp)
 4009c0c:	df000017 	ldw	fp,0(sp)
 4009c10:	dec00204 	addi	sp,sp,8
 4009c14:	f800283a 	ret

04009c18 <_ZN8MAX3421e4TaskEv>:

/* MAX3421 state change task and interrupt handler */
uint8_t MAX3421e::Task(void) {
 4009c18:	defffc04 	addi	sp,sp,-16
 4009c1c:	dfc00315 	stw	ra,12(sp)
 4009c20:	df000215 	stw	fp,8(sp)
 4009c24:	df000204 	addi	fp,sp,8
 4009c28:	e13fff15 	stw	r4,-4(fp)
//	printf("MAX3421e Task\n");

	uint8_t rcode = 0;
 4009c2c:	e03ffe05 	stb	zero,-8(fp)
	uint8_t pinvalue;
	//USB_HOST_SERIAL.print("Vbus state: ");
	//USB_HOST_SERIAL.println( vbusState, HEX );
	pinvalue = *((uint8_t*) USB_IRQ_BASE); //Read();
 4009c30:	00846404 	movi	r2,4496
 4009c34:	10800003 	ldbu	r2,0(r2)
 4009c38:	e0bffe45 	stb	r2,-7(fp)
	//pinvalue = digitalRead( MAX_INT );
	if(IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 4009c3c:	00846404 	movi	r2,4496
 4009c40:	10800037 	ldwio	r2,0(r2)
 4009c44:	1005003a 	cmpeq	r2,r2,zero
 4009c48:	10803fcc 	andi	r2,r2,255
 4009c4c:	10000326 	beq	r2,zero,4009c5c <_ZN8MAX3421e4TaskEv+0x44>
		rcode = IntHandler();
 4009c50:	e13fff17 	ldw	r4,-4(fp)
 4009c54:	4009c740 	call	4009c74 <_ZN8MAX3421e10IntHandlerEv>
 4009c58:	e0bffe05 	stb	r2,-8(fp)
	//    pinvalue = digitalRead( MAX_GPX );
	//    if( pinvalue == LOW ) {
	//        GpxHandler();
	//    }
	//    usbSM();                                //USB state machine
	return ( rcode);
 4009c5c:	e0bffe03 	ldbu	r2,-8(fp)
}
 4009c60:	e037883a 	mov	sp,fp
 4009c64:	dfc00117 	ldw	ra,4(sp)
 4009c68:	df000017 	ldw	fp,0(sp)
 4009c6c:	dec00204 	addi	sp,sp,8
 4009c70:	f800283a 	ret

04009c74 <_ZN8MAX3421e10IntHandlerEv>:

uint8_t MAX3421e::IntHandler() {
 4009c74:	defffc04 	addi	sp,sp,-16
 4009c78:	dfc00315 	stw	ra,12(sp)
 4009c7c:	df000215 	stw	fp,8(sp)
 4009c80:	df000204 	addi	fp,sp,8
 4009c84:	e13fff15 	stw	r4,-4(fp)
	uint8_t HIRQ;
	uint8_t HIRQ_sendback = 0x00;
 4009c88:	e03ffe05 	stb	zero,-8(fp)
	HIRQ = regRd(rHIRQ); //determine interrupt source
 4009c8c:	01403204 	movi	r5,200
 4009c90:	e13fff17 	ldw	r4,-4(fp)
 4009c94:	40095c00 	call	40095c0 <_ZN8MAX3421e5regRdEh>
 4009c98:	e0bffe45 	stb	r2,-7(fp)

	//if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
	//    HIRQ_sendback |= bmFRAMEIRQ;
	//}//end FRAMEIRQ handling
	if(HIRQ & bmCONDETIRQ) {
 4009c9c:	e0bffe43 	ldbu	r2,-7(fp)
 4009ca0:	1080080c 	andi	r2,r2,32
 4009ca4:	10000526 	beq	r2,zero,4009cbc <_ZN8MAX3421e10IntHandlerEv+0x48>
		busprobe();
 4009ca8:	e13fff17 	ldw	r4,-4(fp)
 4009cac:	4009aa40 	call	4009aa4 <_ZN8MAX3421e8busprobeEv>
		HIRQ_sendback |= bmCONDETIRQ;
 4009cb0:	e0bffe03 	ldbu	r2,-8(fp)
 4009cb4:	10800814 	ori	r2,r2,32
 4009cb8:	e0bffe05 	stb	r2,-8(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	regWr(rHIRQ, HIRQ_sendback);
 4009cbc:	e0bffe03 	ldbu	r2,-8(fp)
 4009cc0:	100d883a 	mov	r6,r2
 4009cc4:	01403204 	movi	r5,200
 4009cc8:	e13fff17 	ldw	r4,-4(fp)
 4009ccc:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>
	return ( HIRQ_sendback);
 4009cd0:	e0bffe03 	ldbu	r2,-8(fp)
}
 4009cd4:	e037883a 	mov	sp,fp
 4009cd8:	dfc00117 	ldw	ra,4(sp)
 4009cdc:	df000017 	ldw	fp,0(sp)
 4009ce0:	dec00204 	addi	sp,sp,8
 4009ce4:	f800283a 	ret

04009ce8 <_ZN8MAX3421e10GpxHandlerEv>:

uint8_t MAX3421e::GpxHandler()
{
 4009ce8:	defffe04 	addi	sp,sp,-8
 4009cec:	df000115 	stw	fp,4(sp)
 4009cf0:	df000104 	addi	fp,sp,4
 4009cf4:	e13fff15 	stw	r4,-4(fp)
	//BYTE GPINIRQ;
	//GPINIRQ = regRd( rGPINIRQ);            //read both IRQ registers
	return 0;
 4009cf8:	0005883a 	mov	r2,zero
}
 4009cfc:	e037883a 	mov	sp,fp
 4009d00:	df000017 	ldw	fp,0(sp)
 4009d04:	dec00104 	addi	sp,sp,4
 4009d08:	f800283a 	ret

04009d0c <_Z8toBinaryh>:
USB_DEVICE_DESCRIPTOR buf;
USB Usb;


void toBinary(uint8_t a)
{
 4009d0c:	defffc04 	addi	sp,sp,-16
 4009d10:	dfc00315 	stw	ra,12(sp)
 4009d14:	df000215 	stw	fp,8(sp)
 4009d18:	df000204 	addi	fp,sp,8
 4009d1c:	2005883a 	mov	r2,r4
 4009d20:	e0bfff05 	stb	r2,-4(fp)
   uint8_t i;

   for(i=0x80;i!=0;i>>=1)
 4009d24:	00bfe004 	movi	r2,-128
 4009d28:	e0bffe05 	stb	r2,-8(fp)
 4009d2c:	e0bffe03 	ldbu	r2,-8(fp)
 4009d30:	10000e26 	beq	r2,zero,4009d6c <_Z8toBinaryh+0x60>
       printf("%c",(a&i)?'1':'0');
 4009d34:	e0ffff03 	ldbu	r3,-4(fp)
 4009d38:	e0bffe03 	ldbu	r2,-8(fp)
 4009d3c:	1884703a 	and	r2,r3,r2
 4009d40:	10803fcc 	andi	r2,r2,255
 4009d44:	10000226 	beq	r2,zero,4009d50 <_Z8toBinaryh+0x44>
 4009d48:	00800c44 	movi	r2,49
 4009d4c:	00000106 	br	4009d54 <_Z8toBinaryh+0x48>
 4009d50:	00800c04 	movi	r2,48
 4009d54:	1009883a 	mov	r4,r2
 4009d58:	400efc00 	call	400efc0 <putchar>

void toBinary(uint8_t a)
{
   uint8_t i;

   for(i=0x80;i!=0;i>>=1)
 4009d5c:	e0bffe03 	ldbu	r2,-8(fp)
 4009d60:	1005d07a 	srai	r2,r2,1
 4009d64:	e0bffe05 	stb	r2,-8(fp)
 4009d68:	003ff006 	br	4009d2c <__alt_data_end+0xfc009d2c>
       printf("%c",(a&i)?'1':'0');
}
 4009d6c:	0001883a 	nop
 4009d70:	e037883a 	mov	sp,fp
 4009d74:	dfc00117 	ldw	ra,4(sp)
 4009d78:	df000017 	ldw	fp,0(sp)
 4009d7c:	dec00204 	addi	sp,sp,8
 4009d80:	f800283a 	ret

04009d84 <main>:

extern "C" {
       #include "sgtl5000/sgtl5000_test.h"
}

int main() {
 4009d84:	deffbe04 	addi	sp,sp,-264
 4009d88:	dfc04115 	stw	ra,260(sp)
 4009d8c:	df004015 	stw	fp,256(sp)
 4009d90:	ddc03f15 	stw	r23,252(sp)
 4009d94:	dd803e15 	stw	r22,248(sp)
 4009d98:	dd403d15 	stw	r21,244(sp)
 4009d9c:	dd003c15 	stw	r20,240(sp)
 4009da0:	dcc03b15 	stw	r19,236(sp)
 4009da4:	dc803a15 	stw	r18,232(sp)
 4009da8:	dc403915 	stw	r17,228(sp)
 4009dac:	dc003815 	stw	r16,224(sp)
 4009db0:	df004004 	addi	fp,sp,256
	printf("Initializing SGTL5000...\n");
 4009db4:	010100b4 	movhi	r4,1026
 4009db8:	211ae404 	addi	r4,r4,27536
 4009dbc:	400f0980 	call	400f098 <puts>
	InitializeSGTL();
 4009dc0:	400069c0 	call	400069c <InitializeSGTL>
	printf("Initializing MIDI connection...\n");
 4009dc4:	010100b4 	movhi	r4,1026
 4009dc8:	211aeb04 	addi	r4,r4,27564
 4009dcc:	400f0980 	call	400f098 <puts>
	USBH_MIDI Midi(&Usb);
 4009dd0:	e0bfcd04 	addi	r2,fp,-204
 4009dd4:	014100f4 	movhi	r5,1027
 4009dd8:	29762a04 	addi	r5,r5,-10072
 4009ddc:	1009883a 	mov	r4,r2
 4009de0:	4006d2c0 	call	4006d2c <_ZN9USBH_MIDIC1EP3USB>
	if(Usb.Init() == -1){
 4009de4:	010100f4 	movhi	r4,1027
 4009de8:	21362a04 	addi	r4,r4,-10072
 4009dec:	40098a80 	call	40098a8 <_ZN8MAX3421e4InitEv>
 4009df0:	10803fcc 	andi	r2,r2,255
 4009df4:	1080201c 	xori	r2,r2,128
 4009df8:	10bfe004 	addi	r2,r2,-128
 4009dfc:	10bfffe0 	cmpeqi	r2,r2,-1
 4009e00:	10803fcc 	andi	r2,r2,255
 4009e04:	10000426 	beq	r2,zero,4009e18 <main+0x94>
		printf("Halted...");
 4009e08:	010100b4 	movhi	r4,1026
 4009e0c:	211af304 	addi	r4,r4,27596
 4009e10:	400ef7c0 	call	400ef7c <printf>
		while(1);
 4009e14:	003fff06 	br	4009e14 <__alt_data_end+0xfc009e14>
	}
	delay(200);
 4009e18:	01003204 	movi	r4,200
 4009e1c:	4000dac0 	call	4000dac <_Z5delaym>

	/* Pointers to PIOs */
	int NUM_NOTES = 4;
 4009e20:	00800104 	movi	r2,4
 4009e24:	e0bfc515 	stw	r2,-236(fp)

	volatile unsigned int* note_vol_array[NUM_NOTES] = {(unsigned int*)0x1100, (unsigned int*)0x10f0, (unsigned int*)0x10e0, (unsigned int*)0x10d0};
 4009e28:	e0bfc517 	ldw	r2,-236(fp)
 4009e2c:	10ffffc4 	addi	r3,r2,-1
 4009e30:	e0ffc615 	stw	r3,-232(fp)
 4009e34:	1805883a 	mov	r2,r3
 4009e38:	10800044 	addi	r2,r2,1
 4009e3c:	e0bfe815 	stw	r2,-96(fp)
 4009e40:	e03fe915 	stw	zero,-92(fp)
 4009e44:	e13fe817 	ldw	r4,-96(fp)
 4009e48:	2004d6fa 	srli	r2,r4,27
 4009e4c:	e13fe917 	ldw	r4,-92(fp)
 4009e50:	2008917a 	slli	r4,r4,5
 4009e54:	e13feb15 	stw	r4,-84(fp)
 4009e58:	e13feb17 	ldw	r4,-84(fp)
 4009e5c:	1104b03a 	or	r2,r2,r4
 4009e60:	e0bfeb15 	stw	r2,-84(fp)
 4009e64:	e0bfe817 	ldw	r2,-96(fp)
 4009e68:	1004917a 	slli	r2,r2,5
 4009e6c:	1805883a 	mov	r2,r3
 4009e70:	10800044 	addi	r2,r2,1
 4009e74:	e0bfec15 	stw	r2,-80(fp)
 4009e78:	e03fed15 	stw	zero,-76(fp)
 4009e7c:	e13fec17 	ldw	r4,-80(fp)
 4009e80:	2004d6fa 	srli	r2,r4,27
 4009e84:	e13fed17 	ldw	r4,-76(fp)
 4009e88:	2008917a 	slli	r4,r4,5
 4009e8c:	e13fef15 	stw	r4,-68(fp)
 4009e90:	e13fef17 	ldw	r4,-68(fp)
 4009e94:	1104b03a 	or	r2,r2,r4
 4009e98:	e0bfef15 	stw	r2,-68(fp)
 4009e9c:	e0bfec17 	ldw	r2,-80(fp)
 4009ea0:	1004917a 	slli	r2,r2,5
 4009ea4:	1805883a 	mov	r2,r3
 4009ea8:	10800044 	addi	r2,r2,1
 4009eac:	1085883a 	add	r2,r2,r2
 4009eb0:	1085883a 	add	r2,r2,r2
 4009eb4:	108000c4 	addi	r2,r2,3
 4009eb8:	108000c4 	addi	r2,r2,3
 4009ebc:	1004d0ba 	srli	r2,r2,2
 4009ec0:	1085883a 	add	r2,r2,r2
 4009ec4:	1085883a 	add	r2,r2,r2
 4009ec8:	d8b7c83a 	sub	sp,sp,r2
 4009ecc:	d805883a 	mov	r2,sp
 4009ed0:	108000c4 	addi	r2,r2,3
 4009ed4:	1004d0ba 	srli	r2,r2,2
 4009ed8:	1085883a 	add	r2,r2,r2
 4009edc:	1085883a 	add	r2,r2,r2
 4009ee0:	e0bfc715 	stw	r2,-228(fp)
 4009ee4:	e0bfc717 	ldw	r2,-228(fp)
 4009ee8:	1809883a 	mov	r4,r3
 4009eec:	00c44004 	movi	r3,4352
 4009ef0:	10c00015 	stw	r3,0(r2)
 4009ef4:	10800104 	addi	r2,r2,4
 4009ef8:	20ffffc4 	addi	r3,r4,-1
 4009efc:	01043c04 	movi	r4,4336
 4009f00:	11000015 	stw	r4,0(r2)
 4009f04:	10800104 	addi	r2,r2,4
 4009f08:	18ffffc4 	addi	r3,r3,-1
 4009f0c:	01043804 	movi	r4,4320
 4009f10:	11000015 	stw	r4,0(r2)
 4009f14:	10800104 	addi	r2,r2,4
 4009f18:	193fffc4 	addi	r4,r3,-1
 4009f1c:	00c43404 	movi	r3,4304
 4009f20:	10c00015 	stw	r3,0(r2)
 4009f24:	10c00104 	addi	r3,r2,4
 4009f28:	20bfffc4 	addi	r2,r4,-1
 4009f2c:	113fffe0 	cmpeqi	r4,r2,-1
 4009f30:	2000041e 	bne	r4,zero,4009f44 <main+0x1c0>
 4009f34:	18000015 	stw	zero,0(r3)
 4009f38:	18c00104 	addi	r3,r3,4
 4009f3c:	10bfffc4 	addi	r2,r2,-1
 4009f40:	003ffa06 	br	4009f2c <__alt_data_end+0xfc009f2c>
//	*(reverb) = 0;
//	release_time = 0;
//	decay_time = 0;
//	sustain_level = 127;

	for(int i = 0; i < NUM_NOTES; i++)
 4009f44:	e03fc015 	stw	zero,-256(fp)
 4009f48:	e0ffc017 	ldw	r3,-256(fp)
 4009f4c:	e0bfc517 	ldw	r2,-236(fp)
 4009f50:	18800b0e 	bge	r3,r2,4009f80 <main+0x1fc>
			*(note_vol_array[i]) = 0;
 4009f54:	e0ffc717 	ldw	r3,-228(fp)
 4009f58:	e0bfc017 	ldw	r2,-256(fp)
 4009f5c:	1085883a 	add	r2,r2,r2
 4009f60:	1085883a 	add	r2,r2,r2
 4009f64:	1885883a 	add	r2,r3,r2
 4009f68:	10800017 	ldw	r2,0(r2)
 4009f6c:	10000015 	stw	zero,0(r2)
//	*(reverb) = 0;
//	release_time = 0;
//	decay_time = 0;
//	sustain_level = 127;

	for(int i = 0; i < NUM_NOTES; i++)
 4009f70:	e0bfc017 	ldw	r2,-256(fp)
 4009f74:	10800044 	addi	r2,r2,1
 4009f78:	e0bfc015 	stw	r2,-256(fp)
 4009f7c:	003ff206 	br	4009f48 <__alt_data_end+0xfc009f48>
			*(note_vol_array[i]) = 0;

	clock_t note_clocks[NUM_NOTES];
 4009f80:	e0bfc517 	ldw	r2,-236(fp)
 4009f84:	10bfffc4 	addi	r2,r2,-1
 4009f88:	e0bfc815 	stw	r2,-224(fp)
 4009f8c:	1007883a 	mov	r3,r2
 4009f90:	18c00044 	addi	r3,r3,1
 4009f94:	e0fff015 	stw	r3,-64(fp)
 4009f98:	e03ff115 	stw	zero,-60(fp)
 4009f9c:	e13ff017 	ldw	r4,-64(fp)
 4009fa0:	2006d6fa 	srli	r3,r4,27
 4009fa4:	e13ff117 	ldw	r4,-60(fp)
 4009fa8:	202e917a 	slli	r23,r4,5
 4009fac:	1deeb03a 	or	r23,r3,r23
 4009fb0:	e0fff017 	ldw	r3,-64(fp)
 4009fb4:	182c917a 	slli	r22,r3,5
 4009fb8:	1007883a 	mov	r3,r2
 4009fbc:	18c00044 	addi	r3,r3,1
 4009fc0:	e0fff215 	stw	r3,-56(fp)
 4009fc4:	e03ff315 	stw	zero,-52(fp)
 4009fc8:	e13ff217 	ldw	r4,-56(fp)
 4009fcc:	2006d6fa 	srli	r3,r4,27
 4009fd0:	e13ff317 	ldw	r4,-52(fp)
 4009fd4:	202a917a 	slli	r21,r4,5
 4009fd8:	1d6ab03a 	or	r21,r3,r21
 4009fdc:	e0fff217 	ldw	r3,-56(fp)
 4009fe0:	1828917a 	slli	r20,r3,5
 4009fe4:	10800044 	addi	r2,r2,1
 4009fe8:	1085883a 	add	r2,r2,r2
 4009fec:	1085883a 	add	r2,r2,r2
 4009ff0:	108000c4 	addi	r2,r2,3
 4009ff4:	108000c4 	addi	r2,r2,3
 4009ff8:	1004d0ba 	srli	r2,r2,2
 4009ffc:	1085883a 	add	r2,r2,r2
 400a000:	1085883a 	add	r2,r2,r2
 400a004:	d8b7c83a 	sub	sp,sp,r2
 400a008:	d805883a 	mov	r2,sp
 400a00c:	108000c4 	addi	r2,r2,3
 400a010:	1004d0ba 	srli	r2,r2,2
 400a014:	1085883a 	add	r2,r2,r2
 400a018:	1085883a 	add	r2,r2,r2
 400a01c:	e0bfc915 	stw	r2,-220(fp)
	int available_idx;
	bool note_used[NUM_NOTES] = {false};
 400a020:	e0bfc517 	ldw	r2,-236(fp)
 400a024:	10bfffc4 	addi	r2,r2,-1
 400a028:	e0bfca15 	stw	r2,-216(fp)
 400a02c:	1007883a 	mov	r3,r2
 400a030:	18c00044 	addi	r3,r3,1
 400a034:	e0fff415 	stw	r3,-48(fp)
 400a038:	e03ff515 	stw	zero,-44(fp)
 400a03c:	e13ff417 	ldw	r4,-48(fp)
 400a040:	2006d77a 	srli	r3,r4,29
 400a044:	e13ff517 	ldw	r4,-44(fp)
 400a048:	202690fa 	slli	r19,r4,3
 400a04c:	1ce6b03a 	or	r19,r3,r19
 400a050:	e0fff417 	ldw	r3,-48(fp)
 400a054:	182490fa 	slli	r18,r3,3
 400a058:	1007883a 	mov	r3,r2
 400a05c:	18c00044 	addi	r3,r3,1
 400a060:	e0fff615 	stw	r3,-40(fp)
 400a064:	e03ff715 	stw	zero,-36(fp)
 400a068:	e13ff617 	ldw	r4,-40(fp)
 400a06c:	2006d77a 	srli	r3,r4,29
 400a070:	e13ff717 	ldw	r4,-36(fp)
 400a074:	202290fa 	slli	r17,r4,3
 400a078:	1c62b03a 	or	r17,r3,r17
 400a07c:	e0fff617 	ldw	r3,-40(fp)
 400a080:	182090fa 	slli	r16,r3,3
 400a084:	1007883a 	mov	r3,r2
 400a088:	18c00044 	addi	r3,r3,1
 400a08c:	18c000c4 	addi	r3,r3,3
 400a090:	1806d0ba 	srli	r3,r3,2
 400a094:	18c7883a 	add	r3,r3,r3
 400a098:	18c7883a 	add	r3,r3,r3
 400a09c:	d8f7c83a 	sub	sp,sp,r3
 400a0a0:	d807883a 	mov	r3,sp
 400a0a4:	1807883a 	mov	r3,r3
 400a0a8:	e0ffcb15 	stw	r3,-212(fp)
 400a0ac:	e0ffcb17 	ldw	r3,-212(fp)
 400a0b0:	18000005 	stb	zero,0(r3)
 400a0b4:	18c00044 	addi	r3,r3,1
 400a0b8:	10bfffc4 	addi	r2,r2,-1
 400a0bc:	113fffe0 	cmpeqi	r4,r2,-1
 400a0c0:	2000041e 	bne	r4,zero,400a0d4 <main+0x350>
 400a0c4:	18000005 	stb	zero,0(r3)
 400a0c8:	18c00044 	addi	r3,r3,1
 400a0cc:	10bfffc4 	addi	r2,r2,-1
 400a0d0:	003ffa06 	br	400a0bc <__alt_data_end+0xfc00a0bc>
	bool first_note = true;
 400a0d4:	00800044 	movi	r2,1
 400a0d8:	e0bfc205 	stb	r2,-248(fp)
	bool muted = false;
 400a0dc:	e03fcc05 	stb	zero,-208(fp)

	while(1){
		Usb.Task();
 400a0e0:	010100f4 	movhi	r4,1027
 400a0e4:	21362a04 	addi	r4,r4,-10072
 400a0e8:	4001f440 	call	4001f44 <_ZN3USB4TaskEv>
		if(Midi){
 400a0ec:	e0bfcd04 	addi	r2,fp,-204
 400a0f0:	1009883a 	mov	r4,r2
 400a0f4:	400a9300 	call	400a930 <_ZN9USBH_MIDIcvbEv>
 400a0f8:	10803fcc 	andi	r2,r2,255
 400a0fc:	103ff826 	beq	r2,zero,400a0e0 <__alt_data_end+0xfc00a0e0>
			uint8_t MIDI_packet[ 3 ];
			uint8_t size;

			do {
				if ( (size = Midi.RecvData(MIDI_packet)) > 0 ) {
 400a100:	e0ffe704 	addi	r3,fp,-100
 400a104:	e0bfcd04 	addi	r2,fp,-204
 400a108:	000d883a 	mov	r6,zero
 400a10c:	180b883a 	mov	r5,r3
 400a110:	1009883a 	mov	r4,r2
 400a114:	40079b40 	call	40079b4 <_ZN9USBH_MIDI8RecvDataEPhb>
 400a118:	e0bfcc45 	stb	r2,-207(fp)
 400a11c:	e0bfcc43 	ldbu	r2,-207(fp)
 400a120:	1004c03a 	cmpne	r2,r2,zero
 400a124:	10803fcc 	andi	r2,r2,255
 400a128:	10006726 	beq	r2,zero,400a2c8 <main+0x544>

					switch(unsigned(MIDI_packet[0] >> 4)){
 400a12c:	e0bfe703 	ldbu	r2,-100(fp)
 400a130:	10803fcc 	andi	r2,r2,255
 400a134:	1005d13a 	srai	r2,r2,4
 400a138:	10c00220 	cmpeqi	r3,r2,8
 400a13c:	18003c1e 	bne	r3,zero,400a230 <main+0x4ac>
 400a140:	10800260 	cmpeqi	r2,r2,9
 400a144:	10006026 	beq	r2,zero,400a2c8 <main+0x544>
					case 9:						//Note ON
						if(first_note){			//handles an initial data packet that gets interpreted as note on event
 400a148:	e0bfc203 	ldbu	r2,-248(fp)
 400a14c:	10000226 	beq	r2,zero,400a158 <main+0x3d4>
							first_note = false;
 400a150:	e03fc205 	stb	zero,-248(fp)
							break;
 400a154:	00005c06 	br	400a2c8 <main+0x544>
						}

						if(!muted){	//check muted flag
 400a158:	e0bfcc03 	ldbu	r2,-208(fp)
 400a15c:	1080005c 	xori	r2,r2,1
 400a160:	10803fcc 	andi	r2,r2,255
 400a164:	10005526 	beq	r2,zero,400a2bc <main+0x538>
							/* Find first available note_vol */
							available_idx = -1;
 400a168:	00bfffc4 	movi	r2,-1
 400a16c:	e0bfc115 	stw	r2,-252(fp)
							for(int i = 0; i < NUM_NOTES; i++){
 400a170:	e03fc315 	stw	zero,-244(fp)
 400a174:	e0ffc317 	ldw	r3,-244(fp)
 400a178:	e0bfc517 	ldw	r2,-236(fp)
 400a17c:	1880130e 	bge	r3,r2,400a1cc <main+0x448>
								if(!note_used[i]){
 400a180:	e0ffcb17 	ldw	r3,-212(fp)
 400a184:	e0bfc317 	ldw	r2,-244(fp)
 400a188:	1885883a 	add	r2,r3,r2
 400a18c:	10800003 	ldbu	r2,0(r2)
 400a190:	1080005c 	xori	r2,r2,1
 400a194:	10803fcc 	andi	r2,r2,255
 400a198:	10000826 	beq	r2,zero,400a1bc <main+0x438>
									available_idx = i;
 400a19c:	e0bfc317 	ldw	r2,-244(fp)
 400a1a0:	e0bfc115 	stw	r2,-252(fp)
									note_used[i] = true;
 400a1a4:	e0ffcb17 	ldw	r3,-212(fp)
 400a1a8:	e0bfc317 	ldw	r2,-244(fp)
 400a1ac:	1885883a 	add	r2,r3,r2
 400a1b0:	00c00044 	movi	r3,1
 400a1b4:	10c00005 	stb	r3,0(r2)
									break;
 400a1b8:	00000406 	br	400a1cc <main+0x448>
						}

						if(!muted){	//check muted flag
							/* Find first available note_vol */
							available_idx = -1;
							for(int i = 0; i < NUM_NOTES; i++){
 400a1bc:	e0bfc317 	ldw	r2,-244(fp)
 400a1c0:	10800044 	addi	r2,r2,1
 400a1c4:	e0bfc315 	stw	r2,-244(fp)
 400a1c8:	003fea06 	br	400a174 <__alt_data_end+0xfc00a174>
									note_used[i] = true;
									break;
								}
							}
							/* If a note_vol is available, write to it*/
							if(available_idx != -1){
 400a1cc:	e0bfc117 	ldw	r2,-252(fp)
 400a1d0:	10bfffe0 	cmpeqi	r2,r2,-1
 400a1d4:	1000391e 	bne	r2,zero,400a2bc <main+0x538>
								*(note_vol_array[available_idx]) = (MIDI_packet[1] << 8) + MIDI_packet[2];
 400a1d8:	e0ffc717 	ldw	r3,-228(fp)
 400a1dc:	e0bfc117 	ldw	r2,-252(fp)
 400a1e0:	1085883a 	add	r2,r2,r2
 400a1e4:	1085883a 	add	r2,r2,r2
 400a1e8:	1885883a 	add	r2,r3,r2
 400a1ec:	10800017 	ldw	r2,0(r2)
 400a1f0:	e0ffe743 	ldbu	r3,-99(fp)
 400a1f4:	18c03fcc 	andi	r3,r3,255
 400a1f8:	1808923a 	slli	r4,r3,8
 400a1fc:	e0ffe783 	ldbu	r3,-98(fp)
 400a200:	18c03fcc 	andi	r3,r3,255
 400a204:	20c7883a 	add	r3,r4,r3
 400a208:	10c00015 	stw	r3,0(r2)
								note_clocks[available_idx] = clock();
 400a20c:	400e45c0 	call	400e45c <clock>
 400a210:	1009883a 	mov	r4,r2
 400a214:	e0ffc917 	ldw	r3,-220(fp)
 400a218:	e0bfc117 	ldw	r2,-252(fp)
 400a21c:	1085883a 	add	r2,r2,r2
 400a220:	1085883a 	add	r2,r2,r2
 400a224:	1885883a 	add	r2,r3,r2
 400a228:	11000015 	stw	r4,0(r2)
							}
						}
						break;
 400a22c:	00002306 	br	400a2bc <main+0x538>

					case 8:		//Note OFF
						for(int i = 0; i < NUM_NOTES; i++){    								//iterate over all note_vols
 400a230:	e03fc415 	stw	zero,-240(fp)
 400a234:	e0ffc417 	ldw	r3,-240(fp)
 400a238:	e0bfc517 	ldw	r2,-236(fp)
 400a23c:	1880210e 	bge	r3,r2,400a2c4 <main+0x540>
							if((*(note_vol_array[i]) >> 8) == unsigned(MIDI_packet[1])){  	//we've found the note to turn off
 400a240:	e0ffc717 	ldw	r3,-228(fp)
 400a244:	e0bfc417 	ldw	r2,-240(fp)
 400a248:	1085883a 	add	r2,r2,r2
 400a24c:	1085883a 	add	r2,r2,r2
 400a250:	1885883a 	add	r2,r3,r2
 400a254:	10800017 	ldw	r2,0(r2)
 400a258:	10800017 	ldw	r2,0(r2)
 400a25c:	1006d23a 	srli	r3,r2,8
 400a260:	e0bfe743 	ldbu	r2,-99(fp)
 400a264:	10803fcc 	andi	r2,r2,255
 400a268:	1885003a 	cmpeq	r2,r3,r2
 400a26c:	10803fcc 	andi	r2,r2,255
 400a270:	10000e26 	beq	r2,zero,400a2ac <main+0x528>
								*(note_vol_array[i]) = 0;                  					//note turned off
 400a274:	e0ffc717 	ldw	r3,-228(fp)
 400a278:	e0bfc417 	ldw	r2,-240(fp)
 400a27c:	1085883a 	add	r2,r2,r2
 400a280:	1085883a 	add	r2,r2,r2
 400a284:	1885883a 	add	r2,r3,r2
 400a288:	10800017 	ldw	r2,0(r2)
 400a28c:	10000015 	stw	zero,0(r2)
								note_used[i] = false;										//reset flag
 400a290:	e0ffcb17 	ldw	r3,-212(fp)
 400a294:	e0bfc417 	ldw	r2,-240(fp)
 400a298:	1885883a 	add	r2,r3,r2
 400a29c:	10000005 	stb	zero,0(r2)
								break;
 400a2a0:	0001883a 	nop
							}
						}
						break;
 400a2a4:	0001883a 	nop
 400a2a8:	00000606 	br	400a2c4 <main+0x540>
							}
						}
						break;

					case 8:		//Note OFF
						for(int i = 0; i < NUM_NOTES; i++){    								//iterate over all note_vols
 400a2ac:	e0bfc417 	ldw	r2,-240(fp)
 400a2b0:	10800044 	addi	r2,r2,1
 400a2b4:	e0bfc415 	stw	r2,-240(fp)
 400a2b8:	003fde06 	br	400a234 <__alt_data_end+0xfc00a234>
							if(available_idx != -1){
								*(note_vol_array[available_idx]) = (MIDI_packet[1] << 8) + MIDI_packet[2];
								note_clocks[available_idx] = clock();
							}
						}
						break;
 400a2bc:	0001883a 	nop
 400a2c0:	00000106 	br	400a2c8 <main+0x544>
								*(note_vol_array[i]) = 0;                  					//note turned off
								note_used[i] = false;										//reset flag
								break;
							}
						}
						break;
 400a2c4:	0001883a 	nop
					// 		break;
					// 	}
						// break;
					}
				}
			} while (size > 0);
 400a2c8:	e0bfcc43 	ldbu	r2,-207(fp)
 400a2cc:	103f8426 	beq	r2,zero,400a0e0 <__alt_data_end+0xfc00a0e0>
		Usb.Task();
		if(Midi){
			uint8_t MIDI_packet[ 3 ];
			uint8_t size;

			do {
 400a2d0:	003f8b06 	br	400a100 <__alt_data_end+0xfc00a100>

0400a2d4 <_Z9test_loopv>:
//		}
	}
}


void test_loop() {
 400a2d4:	defffd04 	addi	sp,sp,-12
 400a2d8:	dfc00215 	stw	ra,8(sp)
 400a2dc:	df000115 	stw	fp,4(sp)
 400a2e0:	df000104 	addi	fp,sp,4
       delay(200);
 400a2e4:	01003204 	movi	r4,200
 400a2e8:	4000dac0 	call	4000dac <_Z5delaym>
       Usb.Task();
 400a2ec:	010100f4 	movhi	r4,1027
 400a2f0:	21362a04 	addi	r4,r4,-10072
 400a2f4:	4001f440 	call	4001f44 <_ZN3USB4TaskEv>
       usbstate = Usb.getUsbTaskState();
 400a2f8:	010100f4 	movhi	r4,1027
 400a2fc:	21362a04 	addi	r4,r4,-10072
 400a300:	4000eb00 	call	4000eb0 <_ZN3USB15getUsbTaskStateEv>
 400a304:	d0b237c5 	stb	r2,-14113(gp)
       if(usbstate != laststate) {
 400a308:	d0f237c3 	ldbu	r3,-14113(gp)
 400a30c:	d0b23803 	ldbu	r2,-14112(gp)
 400a310:	18c03fcc 	andi	r3,r3,255
 400a314:	10803fcc 	andi	r2,r2,255
 400a318:	1880fc26 	beq	r3,r2,400a70c <_Z9test_loopv+0x438>
               laststate = usbstate;
 400a31c:	d0b237c3 	ldbu	r2,-14113(gp)
 400a320:	d0b23805 	stb	r2,-14112(gp)
               /**/
               switch(usbstate) {
 400a324:	d0b237c3 	ldbu	r2,-14113(gp)
 400a328:	10803fcc 	andi	r2,r2,255
 400a32c:	10c01820 	cmpeqi	r3,r2,96
 400a330:	18001f1e 	bne	r3,zero,400a3b0 <_Z9test_loopv+0xdc>
 400a334:	10c01848 	cmpgei	r3,r2,97
 400a338:	1800071e 	bne	r3,zero,400a358 <_Z9test_loopv+0x84>
 400a33c:	10c00c20 	cmpeqi	r3,r2,48
 400a340:	1800111e 	bne	r3,zero,400a388 <_Z9test_loopv+0xb4>
 400a344:	10c01420 	cmpeqi	r3,r2,80
 400a348:	1800141e 	bne	r3,zero,400a39c <_Z9test_loopv+0xc8>
 400a34c:	108004a0 	cmpeqi	r2,r2,18
 400a350:	1000081e 	bne	r2,zero,400a374 <_Z9test_loopv+0xa0>
                       case( USB_STATE_ERROR):
                               E_Notify(PSTR("\r\nUSB state machine reached error state"), 0x80);
                               break;

                       default:
                               break;
 400a354:	0000ed06 	br	400a70c <_Z9test_loopv+0x438>
       Usb.Task();
       usbstate = Usb.getUsbTaskState();
       if(usbstate != laststate) {
               laststate = usbstate;
               /**/
               switch(usbstate) {
 400a358:	10c02420 	cmpeqi	r3,r2,144
 400a35c:	18001e1e 	bne	r3,zero,400a3d8 <_Z9test_loopv+0x104>
 400a360:	10c02820 	cmpeqi	r3,r2,160
 400a364:	1800e41e 	bne	r3,zero,400a6f8 <_Z9test_loopv+0x424>
 400a368:	10801c20 	cmpeqi	r2,r2,112
 400a36c:	1000151e 	bne	r2,zero,400a3c4 <_Z9test_loopv+0xf0>
                       case( USB_STATE_ERROR):
                               E_Notify(PSTR("\r\nUSB state machine reached error state"), 0x80);
                               break;

                       default:
                               break;
 400a370:	0000e606 	br	400a70c <_Z9test_loopv+0x438>
       if(usbstate != laststate) {
               laststate = usbstate;
               /**/
               switch(usbstate) {
                       case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE):
                               E_Notify(PSTR("\r\nWaiting for device..."), 0x80);
 400a374:	01402004 	movi	r5,128
 400a378:	010100b4 	movhi	r4,1026
 400a37c:	211af604 	addi	r4,r4,27608
 400a380:	40068780 	call	4006878 <_Z8E_NotifyPKci>
                               break;
 400a384:	0000e106 	br	400a70c <_Z9test_loopv+0x438>
                       case( USB_ATTACHED_SUBSTATE_RESET_DEVICE):
                               E_Notify(PSTR("\r\nDevice connected. Resetting..."), 0x80);
 400a388:	01402004 	movi	r5,128
 400a38c:	010100b4 	movhi	r4,1026
 400a390:	211afc04 	addi	r4,r4,27632
 400a394:	40068780 	call	4006878 <_Z8E_NotifyPKci>
                               break;
 400a398:	0000dc06 	br	400a70c <_Z9test_loopv+0x438>
                       case( USB_ATTACHED_SUBSTATE_WAIT_SOF):
                               E_Notify(PSTR("\r\nReset complete. Waiting for the first SOF..."), 0x80);
 400a39c:	01402004 	movi	r5,128
 400a3a0:	010100b4 	movhi	r4,1026
 400a3a4:	211b0504 	addi	r4,r4,27668
 400a3a8:	40068780 	call	4006878 <_Z8E_NotifyPKci>
                               break;
 400a3ac:	0000d706 	br	400a70c <_Z9test_loopv+0x438>
                       case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE):
                               E_Notify(PSTR("\r\nSOF generation started. Enumerating device..."), 0x80);
 400a3b0:	01402004 	movi	r5,128
 400a3b4:	010100b4 	movhi	r4,1026
 400a3b8:	211b1104 	addi	r4,r4,27716
 400a3bc:	40068780 	call	4006878 <_Z8E_NotifyPKci>
                               break;
 400a3c0:	0000d206 	br	400a70c <_Z9test_loopv+0x438>
                       case( USB_STATE_ADDRESSING):
                               E_Notify(PSTR("\r\nSetting device address..."), 0x80);
 400a3c4:	01402004 	movi	r5,128
 400a3c8:	010100b4 	movhi	r4,1026
 400a3cc:	211b1d04 	addi	r4,r4,27764
 400a3d0:	40068780 	call	4006878 <_Z8E_NotifyPKci>
                               break;
 400a3d4:	0000cd06 	br	400a70c <_Z9test_loopv+0x438>
                       case( USB_STATE_RUNNING):
                               E_Notify(PSTR("\r\nGetting device descriptor"), 0x80);
 400a3d8:	01402004 	movi	r5,128
 400a3dc:	010100b4 	movhi	r4,1026
 400a3e0:	211b2404 	addi	r4,r4,27792
 400a3e4:	40068780 	call	4006878 <_Z8E_NotifyPKci>
                               rcode = Usb.getDevDescr(1, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*) & buf);
 400a3e8:	00800484 	movi	r2,18
 400a3ec:	10ffffcc 	andi	r3,r2,65535
 400a3f0:	008100f4 	movhi	r2,1027
 400a3f4:	10b62504 	addi	r2,r2,-10092
 400a3f8:	d8800015 	stw	r2,0(sp)
 400a3fc:	180f883a 	mov	r7,r3
 400a400:	000d883a 	mov	r6,zero
 400a404:	01400044 	movi	r5,1
 400a408:	010100f4 	movhi	r4,1027
 400a40c:	21362a04 	addi	r4,r4,-10072
 400a410:	4002f6c0 	call	4002f6c <_ZN3USB11getDevDescrEhhtPh>
 400a414:	d0b23785 	stb	r2,-14114(gp)

                               if(rcode) {
 400a418:	d0b23783 	ldbu	r2,-14114(gp)
 400a41c:	10803fcc 	andi	r2,r2,255
 400a420:	10000a26 	beq	r2,zero,400a44c <_Z9test_loopv+0x178>
                                       E_Notify(PSTR("\r\nError reading device descriptor. Error code "), 0x80);
 400a424:	01402004 	movi	r5,128
 400a428:	010100b4 	movhi	r4,1026
 400a42c:	211b2b04 	addi	r4,r4,27820
 400a430:	40068780 	call	4006878 <_Z8E_NotifyPKci>
                                       print_hex(rcode, 8);
 400a434:	d0b23783 	ldbu	r2,-14114(gp)
 400a438:	10803fcc 	andi	r2,r2,255
 400a43c:	01400204 	movi	r5,8
 400a440:	1009883a 	mov	r4,r2
 400a444:	400a77c0 	call	400a77c <_Z9print_hexii>
#ifdef ESP8266
                                               yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif

                               }
                               break;
 400a448:	0000b006 	br	400a70c <_Z9test_loopv+0x438>
                               if(rcode) {
                                       E_Notify(PSTR("\r\nError reading device descriptor. Error code "), 0x80);
                                       print_hex(rcode, 8);
                               } else {
                                       /**/
                                       E_Notify(PSTR("\r\nDescriptor Length:\t"), 0x80);
 400a44c:	01402004 	movi	r5,128
 400a450:	010100b4 	movhi	r4,1026
 400a454:	211b3704 	addi	r4,r4,27868
 400a458:	40068780 	call	4006878 <_Z8E_NotifyPKci>
                                       print_hex(buf.bLength, 8);
 400a45c:	008100f4 	movhi	r2,1027
 400a460:	10b62504 	addi	r2,r2,-10092
 400a464:	10800003 	ldbu	r2,0(r2)
 400a468:	10803fcc 	andi	r2,r2,255
 400a46c:	01400204 	movi	r5,8
 400a470:	1009883a 	mov	r4,r2
 400a474:	400a77c0 	call	400a77c <_Z9print_hexii>
                                       E_Notify(PSTR("\r\nDescriptor type:\t"), 0x80);
 400a478:	01402004 	movi	r5,128
 400a47c:	010100b4 	movhi	r4,1026
 400a480:	211b3d04 	addi	r4,r4,27892
 400a484:	40068780 	call	4006878 <_Z8E_NotifyPKci>
                                       print_hex(buf.bDescriptorType, 8);
 400a488:	008100f4 	movhi	r2,1027
 400a48c:	10b62504 	addi	r2,r2,-10092
 400a490:	10800043 	ldbu	r2,1(r2)
 400a494:	10803fcc 	andi	r2,r2,255
 400a498:	01400204 	movi	r5,8
 400a49c:	1009883a 	mov	r4,r2
 400a4a0:	400a77c0 	call	400a77c <_Z9print_hexii>
                                       E_Notify(PSTR("\r\nUSB version:\t\t"), 0x80);
 400a4a4:	01402004 	movi	r5,128
 400a4a8:	010100b4 	movhi	r4,1026
 400a4ac:	211b4204 	addi	r4,r4,27912
 400a4b0:	40068780 	call	4006878 <_Z8E_NotifyPKci>
                                       print_hex(buf.bcdUSB, 16);
 400a4b4:	008100f4 	movhi	r2,1027
 400a4b8:	10b62504 	addi	r2,r2,-10092
 400a4bc:	10c00083 	ldbu	r3,2(r2)
 400a4c0:	108000c3 	ldbu	r2,3(r2)
 400a4c4:	1004923a 	slli	r2,r2,8
 400a4c8:	10c4b03a 	or	r2,r2,r3
 400a4cc:	10bfffcc 	andi	r2,r2,65535
 400a4d0:	01400404 	movi	r5,16
 400a4d4:	1009883a 	mov	r4,r2
 400a4d8:	400a77c0 	call	400a77c <_Z9print_hexii>
                                       E_Notify(PSTR("\r\nDevice class:\t\t"), 0x80);
 400a4dc:	01402004 	movi	r5,128
 400a4e0:	010100b4 	movhi	r4,1026
 400a4e4:	211b4704 	addi	r4,r4,27932
 400a4e8:	40068780 	call	4006878 <_Z8E_NotifyPKci>
                                       print_hex(buf.bDeviceClass, 8);
 400a4ec:	008100f4 	movhi	r2,1027
 400a4f0:	10b62504 	addi	r2,r2,-10092
 400a4f4:	10800103 	ldbu	r2,4(r2)
 400a4f8:	10803fcc 	andi	r2,r2,255
 400a4fc:	01400204 	movi	r5,8
 400a500:	1009883a 	mov	r4,r2
 400a504:	400a77c0 	call	400a77c <_Z9print_hexii>
                                       E_Notify(PSTR("\r\nDevice Subclass:\t"), 0x80);
 400a508:	01402004 	movi	r5,128
 400a50c:	010100b4 	movhi	r4,1026
 400a510:	211b4c04 	addi	r4,r4,27952
 400a514:	40068780 	call	4006878 <_Z8E_NotifyPKci>
                                       print_hex(buf.bDeviceSubClass, 8);
 400a518:	008100f4 	movhi	r2,1027
 400a51c:	10b62504 	addi	r2,r2,-10092
 400a520:	10800143 	ldbu	r2,5(r2)
 400a524:	10803fcc 	andi	r2,r2,255
 400a528:	01400204 	movi	r5,8
 400a52c:	1009883a 	mov	r4,r2
 400a530:	400a77c0 	call	400a77c <_Z9print_hexii>
                                       E_Notify(PSTR("\r\nDevice Protocol:\t"), 0x80);
 400a534:	01402004 	movi	r5,128
 400a538:	010100b4 	movhi	r4,1026
 400a53c:	211b5104 	addi	r4,r4,27972
 400a540:	40068780 	call	4006878 <_Z8E_NotifyPKci>
                                       print_hex(buf.bDeviceProtocol, 8);
 400a544:	008100f4 	movhi	r2,1027
 400a548:	10b62504 	addi	r2,r2,-10092
 400a54c:	10800183 	ldbu	r2,6(r2)
 400a550:	10803fcc 	andi	r2,r2,255
 400a554:	01400204 	movi	r5,8
 400a558:	1009883a 	mov	r4,r2
 400a55c:	400a77c0 	call	400a77c <_Z9print_hexii>
                                       E_Notify(PSTR("\r\nMax.packet size:\t"), 0x80);
 400a560:	01402004 	movi	r5,128
 400a564:	010100b4 	movhi	r4,1026
 400a568:	211b5604 	addi	r4,r4,27992
 400a56c:	40068780 	call	4006878 <_Z8E_NotifyPKci>
                                       print_hex(buf.bMaxPacketSize0, 8);
 400a570:	008100f4 	movhi	r2,1027
 400a574:	10b62504 	addi	r2,r2,-10092
 400a578:	108001c3 	ldbu	r2,7(r2)
 400a57c:	10803fcc 	andi	r2,r2,255
 400a580:	01400204 	movi	r5,8
 400a584:	1009883a 	mov	r4,r2
 400a588:	400a77c0 	call	400a77c <_Z9print_hexii>
                                       E_Notify(PSTR("\r\nVendor  ID:\t\t"), 0x80);
 400a58c:	01402004 	movi	r5,128
 400a590:	010100b4 	movhi	r4,1026
 400a594:	211b5b04 	addi	r4,r4,28012
 400a598:	40068780 	call	4006878 <_Z8E_NotifyPKci>
                                       print_hex(buf.idVendor, 16);
 400a59c:	008100f4 	movhi	r2,1027
 400a5a0:	10b62504 	addi	r2,r2,-10092
 400a5a4:	10c00203 	ldbu	r3,8(r2)
 400a5a8:	10800243 	ldbu	r2,9(r2)
 400a5ac:	1004923a 	slli	r2,r2,8
 400a5b0:	10c4b03a 	or	r2,r2,r3
 400a5b4:	10bfffcc 	andi	r2,r2,65535
 400a5b8:	01400404 	movi	r5,16
 400a5bc:	1009883a 	mov	r4,r2
 400a5c0:	400a77c0 	call	400a77c <_Z9print_hexii>
                                       E_Notify(PSTR("\r\nProduct ID:\t\t"), 0x80);
 400a5c4:	01402004 	movi	r5,128
 400a5c8:	010100b4 	movhi	r4,1026
 400a5cc:	211b5f04 	addi	r4,r4,28028
 400a5d0:	40068780 	call	4006878 <_Z8E_NotifyPKci>
                                       print_hex(buf.idProduct, 16);
 400a5d4:	008100f4 	movhi	r2,1027
 400a5d8:	10b62504 	addi	r2,r2,-10092
 400a5dc:	10c00283 	ldbu	r3,10(r2)
 400a5e0:	108002c3 	ldbu	r2,11(r2)
 400a5e4:	1004923a 	slli	r2,r2,8
 400a5e8:	10c4b03a 	or	r2,r2,r3
 400a5ec:	10bfffcc 	andi	r2,r2,65535
 400a5f0:	01400404 	movi	r5,16
 400a5f4:	1009883a 	mov	r4,r2
 400a5f8:	400a77c0 	call	400a77c <_Z9print_hexii>
                                       E_Notify(PSTR("\r\nRevision ID:\t\t"), 0x80);
 400a5fc:	01402004 	movi	r5,128
 400a600:	010100b4 	movhi	r4,1026
 400a604:	211b6304 	addi	r4,r4,28044
 400a608:	40068780 	call	4006878 <_Z8E_NotifyPKci>
                                       print_hex(buf.bcdDevice, 16);
 400a60c:	008100f4 	movhi	r2,1027
 400a610:	10b62504 	addi	r2,r2,-10092
 400a614:	10c00303 	ldbu	r3,12(r2)
 400a618:	10800343 	ldbu	r2,13(r2)
 400a61c:	1004923a 	slli	r2,r2,8
 400a620:	10c4b03a 	or	r2,r2,r3
 400a624:	10bfffcc 	andi	r2,r2,65535
 400a628:	01400404 	movi	r5,16
 400a62c:	1009883a 	mov	r4,r2
 400a630:	400a77c0 	call	400a77c <_Z9print_hexii>
                                       E_Notify(PSTR("\r\nMfg.string index:\t"), 0x80);
 400a634:	01402004 	movi	r5,128
 400a638:	010100b4 	movhi	r4,1026
 400a63c:	211b6804 	addi	r4,r4,28064
 400a640:	40068780 	call	4006878 <_Z8E_NotifyPKci>
                                       print_hex(buf.iManufacturer, 8);
 400a644:	008100f4 	movhi	r2,1027
 400a648:	10b62504 	addi	r2,r2,-10092
 400a64c:	10800383 	ldbu	r2,14(r2)
 400a650:	10803fcc 	andi	r2,r2,255
 400a654:	01400204 	movi	r5,8
 400a658:	1009883a 	mov	r4,r2
 400a65c:	400a77c0 	call	400a77c <_Z9print_hexii>
                                       E_Notify(PSTR("\r\nProd.string index:\t"), 0x80);
 400a660:	01402004 	movi	r5,128
 400a664:	010100b4 	movhi	r4,1026
 400a668:	211b6e04 	addi	r4,r4,28088
 400a66c:	40068780 	call	4006878 <_Z8E_NotifyPKci>
                                       print_hex(buf.iProduct, 8);
 400a670:	008100f4 	movhi	r2,1027
 400a674:	10b62504 	addi	r2,r2,-10092
 400a678:	108003c3 	ldbu	r2,15(r2)
 400a67c:	10803fcc 	andi	r2,r2,255
 400a680:	01400204 	movi	r5,8
 400a684:	1009883a 	mov	r4,r2
 400a688:	400a77c0 	call	400a77c <_Z9print_hexii>
                                       E_Notify(PSTR("\r\nSerial number index:\t"), 0x80);
 400a68c:	01402004 	movi	r5,128
 400a690:	010100b4 	movhi	r4,1026
 400a694:	211b7404 	addi	r4,r4,28112
 400a698:	40068780 	call	4006878 <_Z8E_NotifyPKci>
                                       print_hex(buf.iSerialNumber, 8);
 400a69c:	008100f4 	movhi	r2,1027
 400a6a0:	10b62504 	addi	r2,r2,-10092
 400a6a4:	10800403 	ldbu	r2,16(r2)
 400a6a8:	10803fcc 	andi	r2,r2,255
 400a6ac:	01400204 	movi	r5,8
 400a6b0:	1009883a 	mov	r4,r2
 400a6b4:	400a77c0 	call	400a77c <_Z9print_hexii>
                                       E_Notify(PSTR("\r\nNumber of conf.:\t"), 0x80);
 400a6b8:	01402004 	movi	r5,128
 400a6bc:	010100b4 	movhi	r4,1026
 400a6c0:	211b7a04 	addi	r4,r4,28136
 400a6c4:	40068780 	call	4006878 <_Z8E_NotifyPKci>
                                       print_hex(buf.bNumConfigurations, 8);
 400a6c8:	008100f4 	movhi	r2,1027
 400a6cc:	10b62504 	addi	r2,r2,-10092
 400a6d0:	10800443 	ldbu	r2,17(r2)
 400a6d4:	10803fcc 	andi	r2,r2,255
 400a6d8:	01400204 	movi	r5,8
 400a6dc:	1009883a 	mov	r4,r2
 400a6e0:	400a77c0 	call	400a77c <_Z9print_hexii>
                                       /**/
                                       E_Notify(PSTR("\r\n\nAll tests passed. Press RESET to restart test"), 0x80);
 400a6e4:	01402004 	movi	r5,128
 400a6e8:	010100b4 	movhi	r4,1026
 400a6ec:	211b7f04 	addi	r4,r4,28156
 400a6f0:	40068780 	call	4006878 <_Z8E_NotifyPKci>
#ifdef ESP8266
                                               yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif

                               }
                               break;
 400a6f4:	00000506 	br	400a70c <_Z9test_loopv+0x438>
                       case( USB_STATE_ERROR):
                               E_Notify(PSTR("\r\nUSB state machine reached error state"), 0x80);
 400a6f8:	01402004 	movi	r5,128
 400a6fc:	010100b4 	movhi	r4,1026
 400a700:	211b8c04 	addi	r4,r4,28208
 400a704:	40068780 	call	4006878 <_Z8E_NotifyPKci>
                               break;
 400a708:	0001883a 	nop

                       default:
                               break;
               }//switch( usbstate...
       }
}//loop()...
 400a70c:	0001883a 	nop
 400a710:	e037883a 	mov	sp,fp
 400a714:	dfc00117 	ldw	ra,4(sp)
 400a718:	df000017 	ldw	fp,0(sp)
 400a71c:	dec00204 	addi	sp,sp,8
 400a720:	f800283a 	ret

0400a724 <_Z6halt55v>:

/* constantly transmits 0x55 via SPI to aid probing */
void halt55() {
 400a724:	defffe04 	addi	sp,sp,-8
 400a728:	dfc00115 	stw	ra,4(sp)
 400a72c:	df000015 	stw	fp,0(sp)
 400a730:	d839883a 	mov	fp,sp

       E_Notify(PSTR("\r\nUnrecoverable error - test halted!!"), 0x80);
 400a734:	01402004 	movi	r5,128
 400a738:	010100b4 	movhi	r4,1026
 400a73c:	211b9604 	addi	r4,r4,28248
 400a740:	40068780 	call	4006878 <_Z8E_NotifyPKci>
       E_Notify(PSTR("\r\n0x55 pattern is transmitted via SPI"), 0x80);
 400a744:	01402004 	movi	r5,128
 400a748:	010100b4 	movhi	r4,1026
 400a74c:	211ba004 	addi	r4,r4,28288
 400a750:	40068780 	call	4006878 <_Z8E_NotifyPKci>
       E_Notify(PSTR("\r\nPress RESET to restart test"), 0x80);
 400a754:	01402004 	movi	r5,128
 400a758:	010100b4 	movhi	r4,1026
 400a75c:	211baa04 	addi	r4,r4,28328
 400a760:	40068780 	call	4006878 <_Z8E_NotifyPKci>

       while(1) {
               Usb.regWr(0x55, 0x55);
 400a764:	01801544 	movi	r6,85
 400a768:	01401544 	movi	r5,85
 400a76c:	010100f4 	movhi	r4,1027
 400a770:	21362a04 	addi	r4,r4,-10072
 400a774:	400938c0 	call	400938c <_ZN8MAX3421e5regWrEhh>

       E_Notify(PSTR("\r\nUnrecoverable error - test halted!!"), 0x80);
       E_Notify(PSTR("\r\n0x55 pattern is transmitted via SPI"), 0x80);
       E_Notify(PSTR("\r\nPress RESET to restart test"), 0x80);

       while(1) {
 400a778:	003ffa06 	br	400a764 <__alt_data_end+0xfc00a764>

0400a77c <_Z9print_hexii>:
#endif
       }
}

/* prints hex numbers with leading zeroes */
void print_hex(int v, int num_places) {
 400a77c:	defff804 	addi	sp,sp,-32
 400a780:	dfc00715 	stw	ra,28(sp)
 400a784:	df000615 	stw	fp,24(sp)
 400a788:	df000604 	addi	fp,sp,24
 400a78c:	e13ffe15 	stw	r4,-8(fp)
 400a790:	e17fff15 	stw	r5,-4(fp)
       int mask = 0, n, num_nibbles, digit;
 400a794:	e03ffa15 	stw	zero,-24(fp)

       for(n = 1; n <= num_places; n++) {
 400a798:	00800044 	movi	r2,1
 400a79c:	e0bffb15 	stw	r2,-20(fp)
 400a7a0:	e0bffb17 	ldw	r2,-20(fp)
 400a7a4:	e0ffff17 	ldw	r3,-4(fp)
 400a7a8:	18800816 	blt	r3,r2,400a7cc <_Z9print_hexii+0x50>
               mask = (mask << 1) | 0x0001;
 400a7ac:	e0bffa17 	ldw	r2,-24(fp)
 400a7b0:	1085883a 	add	r2,r2,r2
 400a7b4:	10800054 	ori	r2,r2,1
 400a7b8:	e0bffa15 	stw	r2,-24(fp)

/* prints hex numbers with leading zeroes */
void print_hex(int v, int num_places) {
       int mask = 0, n, num_nibbles, digit;

       for(n = 1; n <= num_places; n++) {
 400a7bc:	e0bffb17 	ldw	r2,-20(fp)
 400a7c0:	10800044 	addi	r2,r2,1
 400a7c4:	e0bffb15 	stw	r2,-20(fp)
 400a7c8:	003ff506 	br	400a7a0 <__alt_data_end+0xfc00a7a0>
               mask = (mask << 1) | 0x0001;
       }
       v = v & mask; // truncate v to specified number of places
 400a7cc:	e0fffe17 	ldw	r3,-8(fp)
 400a7d0:	e0bffa17 	ldw	r2,-24(fp)
 400a7d4:	1884703a 	and	r2,r3,r2
 400a7d8:	e0bffe15 	stw	r2,-8(fp)

       num_nibbles = num_places / 4;
 400a7dc:	e0bfff17 	ldw	r2,-4(fp)
 400a7e0:	1000010e 	bge	r2,zero,400a7e8 <_Z9print_hexii+0x6c>
 400a7e4:	108000c4 	addi	r2,r2,3
 400a7e8:	1005d0ba 	srai	r2,r2,2
 400a7ec:	e0bffc15 	stw	r2,-16(fp)
       if((num_places % 4) != 0) {
 400a7f0:	e0bfff17 	ldw	r2,-4(fp)
 400a7f4:	108000cc 	andi	r2,r2,3
 400a7f8:	10000326 	beq	r2,zero,400a808 <_Z9print_hexii+0x8c>
               ++num_nibbles;
 400a7fc:	e0bffc17 	ldw	r2,-16(fp)
 400a800:	10800044 	addi	r2,r2,1
 400a804:	e0bffc15 	stw	r2,-16(fp)
       }
       do {
               digit = ((v >> (num_nibbles - 1) * 4)) & 0x0f;
 400a808:	e0bffc17 	ldw	r2,-16(fp)
 400a80c:	10bfffc4 	addi	r2,r2,-1
 400a810:	1085883a 	add	r2,r2,r2
 400a814:	1085883a 	add	r2,r2,r2
 400a818:	1007883a 	mov	r3,r2
 400a81c:	e0bffe17 	ldw	r2,-8(fp)
 400a820:	10c5d83a 	sra	r2,r2,r3
 400a824:	108003cc 	andi	r2,r2,15
 400a828:	e0bffd15 	stw	r2,-12(fp)
               printf("%x\n", digit);
 400a82c:	e17ffd17 	ldw	r5,-12(fp)
 400a830:	010100b4 	movhi	r4,1026
 400a834:	211bb204 	addi	r4,r4,28360
 400a838:	400ef7c0 	call	400ef7c <printf>

       num_nibbles = num_places / 4;
       if((num_places % 4) != 0) {
               ++num_nibbles;
       }
       do {
 400a83c:	e0bffc17 	ldw	r2,-16(fp)
 400a840:	10bfffc4 	addi	r2,r2,-1
 400a844:	e0bffc15 	stw	r2,-16(fp)
 400a848:	e0bffc17 	ldw	r2,-16(fp)
 400a84c:	1004c03a 	cmpne	r2,r2,zero
 400a850:	10803fcc 	andi	r2,r2,255
 400a854:	10000126 	beq	r2,zero,400a85c <_Z9print_hexii+0xe0>
 400a858:	003feb06 	br	400a808 <__alt_data_end+0xfc00a808>
               digit = ((v >> (num_nibbles - 1) * 4)) & 0x0f;
               printf("%x\n", digit);
       } while(--num_nibbles);
}
 400a85c:	0001883a 	nop
 400a860:	e037883a 	mov	sp,fp
 400a864:	dfc00117 	ldw	ra,4(sp)
 400a868:	df000017 	ldw	fp,0(sp)
 400a86c:	dec00204 	addi	sp,sp,8
 400a870:	f800283a 	ret

0400a874 <_Z13press_any_keyv>:

/* prints "Press any key" and returns when key is pressed */
void press_any_key() {
 400a874:	defffe04 	addi	sp,sp,-8
 400a878:	dfc00115 	stw	ra,4(sp)
 400a87c:	df000015 	stw	fp,0(sp)
 400a880:	d839883a 	mov	fp,sp
       E_Notify(PSTR("\r\nPress any key to continue..."), 0x80);
 400a884:	01402004 	movi	r5,128
 400a888:	010100b4 	movhi	r4,1026
 400a88c:	211bb304 	addi	r4,r4,28364
 400a890:	40068780 	call	4006878 <_Z8E_NotifyPKci>
//        char x;
//        scanf("%s", &x);
}
 400a894:	0001883a 	nop
 400a898:	e037883a 	mov	sp,fp
 400a89c:	dfc00117 	ldw	ra,4(sp)
 400a8a0:	df000017 	ldw	fp,0(sp)
 400a8a4:	dec00204 	addi	sp,sp,8
 400a8a8:	f800283a 	ret

0400a8ac <_Z41__static_initialization_and_destruction_0ii>:
 400a8ac:	defffc04 	addi	sp,sp,-16
 400a8b0:	dfc00315 	stw	ra,12(sp)
 400a8b4:	df000215 	stw	fp,8(sp)
 400a8b8:	df000204 	addi	fp,sp,8
 400a8bc:	e13ffe15 	stw	r4,-8(fp)
 400a8c0:	e17fff15 	stw	r5,-4(fp)
 400a8c4:	e0bffe17 	ldw	r2,-8(fp)
 400a8c8:	10800058 	cmpnei	r2,r2,1
 400a8cc:	1000061e 	bne	r2,zero,400a8e8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 400a8d0:	e0ffff17 	ldw	r3,-4(fp)
 400a8d4:	00bfffd4 	movui	r2,65535
 400a8d8:	1880031e 	bne	r3,r2,400a8e8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
uint8_t rcode;
uint8_t usbstate;
uint8_t laststate;
//uint8_t buf[sizeof(USB_DEVICE_DESCRIPTOR)];
USB_DEVICE_DESCRIPTOR buf;
USB Usb;
 400a8dc:	010100f4 	movhi	r4,1027
 400a8e0:	21362a04 	addi	r4,r4,-10072
 400a8e4:	4000e2c0 	call	4000e2c <_ZN3USBC1Ev>
/* prints "Press any key" and returns when key is pressed */
void press_any_key() {
       E_Notify(PSTR("\r\nPress any key to continue..."), 0x80);
//        char x;
//        scanf("%s", &x);
}
 400a8e8:	0001883a 	nop
 400a8ec:	e037883a 	mov	sp,fp
 400a8f0:	dfc00117 	ldw	ra,4(sp)
 400a8f4:	df000017 	ldw	fp,0(sp)
 400a8f8:	dec00204 	addi	sp,sp,8
 400a8fc:	f800283a 	ret

0400a900 <_GLOBAL__sub_I_rcode>:
 400a900:	defffe04 	addi	sp,sp,-8
 400a904:	dfc00115 	stw	ra,4(sp)
 400a908:	df000015 	stw	fp,0(sp)
 400a90c:	d839883a 	mov	fp,sp
 400a910:	017fffd4 	movui	r5,65535
 400a914:	01000044 	movi	r4,1
 400a918:	400a8ac0 	call	400a8ac <_Z41__static_initialization_and_destruction_0ii>
 400a91c:	e037883a 	mov	sp,fp
 400a920:	dfc00117 	ldw	ra,4(sp)
 400a924:	df000017 	ldw	fp,0(sp)
 400a928:	dec00204 	addi	sp,sp,8
 400a92c:	f800283a 	ret

0400a930 <_ZN9USBH_MIDIcvbEv>:
        void PrintEndpointDescriptor( const USB_ENDPOINT_DESCRIPTOR* ep_ptr );
#endif
public:
        USBH_MIDI(USB *p);
        // Misc functions
        operator bool() { return (bPollEnable); }
 400a930:	defffe04 	addi	sp,sp,-8
 400a934:	df000115 	stw	fp,4(sp)
 400a938:	df000104 	addi	fp,sp,4
 400a93c:	e13fff15 	stw	r4,-4(fp)
 400a940:	e0bfff17 	ldw	r2,-4(fp)
 400a944:	10800343 	ldbu	r2,13(r2)
 400a948:	e037883a 	mov	sp,fp
 400a94c:	df000017 	ldw	fp,0(sp)
 400a950:	dec00104 	addi	sp,sp,4
 400a954:	f800283a 	ret

0400a958 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 400a958:	008100b4 	movhi	r2,1026
 400a95c:	109bca04 	addi	r2,r2,28456
 400a960:	20800015 	stw	r2,0(r4)
 400a964:	400b7301 	jmpi	400b730 <_ZN10__cxxabiv117__class_type_infoD1Ev>

0400a968 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 400a968:	defffe04 	addi	sp,sp,-8
 400a96c:	008100b4 	movhi	r2,1026
 400a970:	dc000015 	stw	r16,0(sp)
 400a974:	dfc00115 	stw	ra,4(sp)
 400a978:	109bca04 	addi	r2,r2,28456
 400a97c:	20800015 	stw	r2,0(r4)
 400a980:	2021883a 	mov	r16,r4
 400a984:	400b7300 	call	400b730 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 400a988:	8009883a 	mov	r4,r16
 400a98c:	dfc00117 	ldw	ra,4(sp)
 400a990:	dc000017 	ldw	r16,0(sp)
 400a994:	dec00204 	addi	sp,sp,8
 400a998:	400b65c1 	jmpi	400b65c <_ZdlPv>

0400a99c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 400a99c:	defff504 	addi	sp,sp,-44
 400a9a0:	dc000115 	stw	r16,4(sp)
 400a9a4:	38800117 	ldw	r2,4(r7)
 400a9a8:	24000117 	ldw	r16,4(r4)
 400a9ac:	df000915 	stw	fp,36(sp)
 400a9b0:	ddc00815 	stw	r23,32(sp)
 400a9b4:	dd800715 	stw	r22,28(sp)
 400a9b8:	dcc00415 	stw	r19,16(sp)
 400a9bc:	dc800315 	stw	r18,12(sp)
 400a9c0:	dc400215 	stw	r17,8(sp)
 400a9c4:	dfc00a15 	stw	ra,40(sp)
 400a9c8:	dd400615 	stw	r21,24(sp)
 400a9cc:	dd000515 	stw	r20,20(sp)
 400a9d0:	2823883a 	mov	r17,r5
 400a9d4:	3039883a 	mov	fp,r6
 400a9d8:	dcc00b17 	ldw	r19,44(sp)
 400a9dc:	ddc00c17 	ldw	r23,48(sp)
 400a9e0:	dd800d17 	ldw	r22,52(sp)
 400a9e4:	dc800e17 	ldw	r18,56(sp)
 400a9e8:	80800b26 	beq	r16,r2,400aa18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
 400a9ec:	80c00007 	ldb	r3,0(r16)
 400a9f0:	2029883a 	mov	r20,r4
 400a9f4:	01000a84 	movi	r4,42
 400a9f8:	382b883a 	mov	r21,r7
 400a9fc:	19001a26 	beq	r3,r4,400aa68 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
 400aa00:	100b883a 	mov	r5,r2
 400aa04:	8009883a 	mov	r4,r16
 400aa08:	d8c00015 	stw	r3,0(sp)
 400aa0c:	400f4040 	call	400f404 <strcmp>
 400aa10:	d8c00017 	ldw	r3,0(sp)
 400aa14:	1000141e 	bne	r2,zero,400aa68 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
 400aa18:	94c00015 	stw	r19,0(r18)
 400aa1c:	97000115 	stw	fp,4(r18)
 400aa20:	88002816 	blt	r17,zero,400aac4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
 400aa24:	9c63883a 	add	r17,r19,r17
 400aa28:	b4403226 	beq	r22,r17,400aaf4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
 400aa2c:	00800044 	movi	r2,1
 400aa30:	90800315 	stw	r2,12(r18)
 400aa34:	0005883a 	mov	r2,zero
 400aa38:	dfc00a17 	ldw	ra,40(sp)
 400aa3c:	df000917 	ldw	fp,36(sp)
 400aa40:	ddc00817 	ldw	r23,32(sp)
 400aa44:	dd800717 	ldw	r22,28(sp)
 400aa48:	dd400617 	ldw	r21,24(sp)
 400aa4c:	dd000517 	ldw	r20,20(sp)
 400aa50:	dcc00417 	ldw	r19,16(sp)
 400aa54:	dc800317 	ldw	r18,12(sp)
 400aa58:	dc400217 	ldw	r17,8(sp)
 400aa5c:	dc000117 	ldw	r16,4(sp)
 400aa60:	dec00b04 	addi	sp,sp,44
 400aa64:	f800283a 	ret
 400aa68:	9d801926 	beq	r19,r22,400aad0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
 400aa6c:	a1000217 	ldw	r4,8(r20)
 400aa70:	a80f883a 	mov	r7,r21
 400aa74:	e00d883a 	mov	r6,fp
 400aa78:	20800017 	ldw	r2,0(r4)
 400aa7c:	dc800e15 	stw	r18,56(sp)
 400aa80:	dd800d15 	stw	r22,52(sp)
 400aa84:	ddc00c15 	stw	r23,48(sp)
 400aa88:	dcc00b15 	stw	r19,44(sp)
 400aa8c:	10800717 	ldw	r2,28(r2)
 400aa90:	880b883a 	mov	r5,r17
 400aa94:	dfc00a17 	ldw	ra,40(sp)
 400aa98:	df000917 	ldw	fp,36(sp)
 400aa9c:	ddc00817 	ldw	r23,32(sp)
 400aaa0:	dd800717 	ldw	r22,28(sp)
 400aaa4:	dd400617 	ldw	r21,24(sp)
 400aaa8:	dd000517 	ldw	r20,20(sp)
 400aaac:	dcc00417 	ldw	r19,16(sp)
 400aab0:	dc800317 	ldw	r18,12(sp)
 400aab4:	dc400217 	ldw	r17,8(sp)
 400aab8:	dc000117 	ldw	r16,4(sp)
 400aabc:	dec00b04 	addi	sp,sp,44
 400aac0:	1000683a 	jmp	r2
 400aac4:	00bfff84 	movi	r2,-2
 400aac8:	88bfda1e 	bne	r17,r2,400aa34 <__alt_data_end+0xfc00aa34>
 400aacc:	003fd706 	br	400aa2c <__alt_data_end+0xfc00aa2c>
 400aad0:	b9400117 	ldw	r5,4(r23)
 400aad4:	81400526 	beq	r16,r5,400aaec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
 400aad8:	00800a84 	movi	r2,42
 400aadc:	18bfe326 	beq	r3,r2,400aa6c <__alt_data_end+0xfc00aa6c>
 400aae0:	8009883a 	mov	r4,r16
 400aae4:	400f4040 	call	400f404 <strcmp>
 400aae8:	103fe01e 	bne	r2,zero,400aa6c <__alt_data_end+0xfc00aa6c>
 400aaec:	97000215 	stw	fp,8(r18)
 400aaf0:	003fd006 	br	400aa34 <__alt_data_end+0xfc00aa34>
 400aaf4:	00800184 	movi	r2,6
 400aaf8:	003fcd06 	br	400aa30 <__alt_data_end+0xfc00aa30>

0400aafc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 400aafc:	defffa04 	addi	sp,sp,-24
 400ab00:	dc000215 	stw	r16,8(sp)
 400ab04:	dc000617 	ldw	r16,24(sp)
 400ab08:	dc800415 	stw	r18,16(sp)
 400ab0c:	dc400315 	stw	r17,12(sp)
 400ab10:	dfc00515 	stw	ra,20(sp)
 400ab14:	2023883a 	mov	r17,r4
 400ab18:	2825883a 	mov	r18,r5
 400ab1c:	81800b26 	beq	r16,r6,400ab4c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
 400ab20:	89000217 	ldw	r4,8(r17)
 400ab24:	900b883a 	mov	r5,r18
 400ab28:	20800017 	ldw	r2,0(r4)
 400ab2c:	dc000615 	stw	r16,24(sp)
 400ab30:	10800817 	ldw	r2,32(r2)
 400ab34:	dfc00517 	ldw	ra,20(sp)
 400ab38:	dc800417 	ldw	r18,16(sp)
 400ab3c:	dc400317 	ldw	r17,12(sp)
 400ab40:	dc000217 	ldw	r16,8(sp)
 400ab44:	dec00604 	addi	sp,sp,24
 400ab48:	1000683a 	jmp	r2
 400ab4c:	21000117 	ldw	r4,4(r4)
 400ab50:	39400117 	ldw	r5,4(r7)
 400ab54:	21400926 	beq	r4,r5,400ab7c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
 400ab58:	20c00007 	ldb	r3,0(r4)
 400ab5c:	00800a84 	movi	r2,42
 400ab60:	18bfef26 	beq	r3,r2,400ab20 <__alt_data_end+0xfc00ab20>
 400ab64:	d9800015 	stw	r6,0(sp)
 400ab68:	d9c00115 	stw	r7,4(sp)
 400ab6c:	400f4040 	call	400f404 <strcmp>
 400ab70:	d9800017 	ldw	r6,0(sp)
 400ab74:	d9c00117 	ldw	r7,4(sp)
 400ab78:	103fe91e 	bne	r2,zero,400ab20 <__alt_data_end+0xfc00ab20>
 400ab7c:	00800184 	movi	r2,6
 400ab80:	dfc00517 	ldw	ra,20(sp)
 400ab84:	dc800417 	ldw	r18,16(sp)
 400ab88:	dc400317 	ldw	r17,12(sp)
 400ab8c:	dc000217 	ldw	r16,8(sp)
 400ab90:	dec00604 	addi	sp,sp,24
 400ab94:	f800283a 	ret

0400ab98 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 400ab98:	defffb04 	addi	sp,sp,-20
 400ab9c:	dcc00315 	stw	r19,12(sp)
 400aba0:	dc800215 	stw	r18,8(sp)
 400aba4:	dc400115 	stw	r17,4(sp)
 400aba8:	dc000015 	stw	r16,0(sp)
 400abac:	dfc00415 	stw	ra,16(sp)
 400abb0:	2027883a 	mov	r19,r4
 400abb4:	2821883a 	mov	r16,r5
 400abb8:	3023883a 	mov	r17,r6
 400abbc:	3825883a 	mov	r18,r7
 400abc0:	400b7740 	call	400b774 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 400abc4:	10c03fcc 	andi	r3,r2,255
 400abc8:	18000726 	beq	r3,zero,400abe8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
 400abcc:	dfc00417 	ldw	ra,16(sp)
 400abd0:	dcc00317 	ldw	r19,12(sp)
 400abd4:	dc800217 	ldw	r18,8(sp)
 400abd8:	dc400117 	ldw	r17,4(sp)
 400abdc:	dc000017 	ldw	r16,0(sp)
 400abe0:	dec00504 	addi	sp,sp,20
 400abe4:	f800283a 	ret
 400abe8:	99000217 	ldw	r4,8(r19)
 400abec:	900f883a 	mov	r7,r18
 400abf0:	880d883a 	mov	r6,r17
 400abf4:	20800017 	ldw	r2,0(r4)
 400abf8:	800b883a 	mov	r5,r16
 400abfc:	10800617 	ldw	r2,24(r2)
 400ac00:	dfc00417 	ldw	ra,16(sp)
 400ac04:	dcc00317 	ldw	r19,12(sp)
 400ac08:	dc800217 	ldw	r18,8(sp)
 400ac0c:	dc400117 	ldw	r17,4(sp)
 400ac10:	dc000017 	ldw	r16,0(sp)
 400ac14:	dec00504 	addi	sp,sp,20
 400ac18:	1000683a 	jmp	r2

0400ac1c <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 400ac1c:	008100b4 	movhi	r2,1026
 400ac20:	109be204 	addi	r2,r2,28552
 400ac24:	20800015 	stw	r2,0(r4)
 400ac28:	400b7301 	jmpi	400b730 <_ZN10__cxxabiv117__class_type_infoD1Ev>

0400ac2c <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 400ac2c:	defffe04 	addi	sp,sp,-8
 400ac30:	008100b4 	movhi	r2,1026
 400ac34:	dc000015 	stw	r16,0(sp)
 400ac38:	dfc00115 	stw	ra,4(sp)
 400ac3c:	109be204 	addi	r2,r2,28552
 400ac40:	20800015 	stw	r2,0(r4)
 400ac44:	2021883a 	mov	r16,r4
 400ac48:	400b7300 	call	400b730 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 400ac4c:	8009883a 	mov	r4,r16
 400ac50:	dfc00117 	ldw	ra,4(sp)
 400ac54:	dc000017 	ldw	r16,0(sp)
 400ac58:	dec00204 	addi	sp,sp,8
 400ac5c:	400b65c1 	jmpi	400b65c <_ZdlPv>

0400ac60 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 400ac60:	defff504 	addi	sp,sp,-44
 400ac64:	dc400215 	stw	r17,8(sp)
 400ac68:	dc400b17 	ldw	r17,44(sp)
 400ac6c:	df000915 	stw	fp,36(sp)
 400ac70:	ddc00815 	stw	r23,32(sp)
 400ac74:	dd800715 	stw	r22,28(sp)
 400ac78:	dc000115 	stw	r16,4(sp)
 400ac7c:	dfc00a15 	stw	ra,40(sp)
 400ac80:	dd400615 	stw	r21,24(sp)
 400ac84:	dd000515 	stw	r20,20(sp)
 400ac88:	dcc00415 	stw	r19,16(sp)
 400ac8c:	dc800315 	stw	r18,12(sp)
 400ac90:	3039883a 	mov	fp,r6
 400ac94:	2021883a 	mov	r16,r4
 400ac98:	282d883a 	mov	r22,r5
 400ac9c:	382f883a 	mov	r23,r7
 400aca0:	34402c26 	beq	r6,r17,400ad54 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xf4>
 400aca4:	85000317 	ldw	r20,12(r16)
 400aca8:	048000c4 	movi	r18,3
 400acac:	04ffff44 	movi	r19,-3
 400acb0:	a484983a 	sll	r2,r20,r18
 400acb4:	b80f883a 	mov	r7,r23
 400acb8:	b00b883a 	mov	r5,r22
 400acbc:	10800304 	addi	r2,r2,12
 400acc0:	80a1883a 	add	r16,r16,r2
 400acc4:	a0001626 	beq	r20,zero,400ad20 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xc0>
 400acc8:	81800017 	ldw	r6,0(r16)
 400accc:	a53fffc4 	addi	r20,r20,-1
 400acd0:	3080008c 	andi	r2,r6,2
 400acd4:	3540004c 	andi	r21,r6,1
 400acd8:	10000d26 	beq	r2,zero,400ad10 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
 400acdc:	300dd23a 	srai	r6,r6,8
 400ace0:	a8000426 	beq	r21,zero,400acf4 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x94>
 400ace4:	b4c00a26 	beq	r22,r19,400ad10 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xb0>
 400ace8:	e0800017 	ldw	r2,0(fp)
 400acec:	118d883a 	add	r6,r2,r6
 400acf0:	31800017 	ldw	r6,0(r6)
 400acf4:	813fff17 	ldw	r4,-4(r16)
 400acf8:	e18d883a 	add	r6,fp,r6
 400acfc:	20800017 	ldw	r2,0(r4)
 400ad00:	dc400015 	stw	r17,0(sp)
 400ad04:	10800817 	ldw	r2,32(r2)
 400ad08:	103ee83a 	callr	r2
 400ad0c:	90801b16 	blt	r18,r2,400ad7c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x11c>
 400ad10:	843ffe04 	addi	r16,r16,-8
 400ad14:	b80f883a 	mov	r7,r23
 400ad18:	b00b883a 	mov	r5,r22
 400ad1c:	a03fea1e 	bne	r20,zero,400acc8 <__alt_data_end+0xfc00acc8>
 400ad20:	00800044 	movi	r2,1
 400ad24:	dfc00a17 	ldw	ra,40(sp)
 400ad28:	df000917 	ldw	fp,36(sp)
 400ad2c:	ddc00817 	ldw	r23,32(sp)
 400ad30:	dd800717 	ldw	r22,28(sp)
 400ad34:	dd400617 	ldw	r21,24(sp)
 400ad38:	dd000517 	ldw	r20,20(sp)
 400ad3c:	dcc00417 	ldw	r19,16(sp)
 400ad40:	dc800317 	ldw	r18,12(sp)
 400ad44:	dc400217 	ldw	r17,8(sp)
 400ad48:	dc000117 	ldw	r16,4(sp)
 400ad4c:	dec00b04 	addi	sp,sp,44
 400ad50:	f800283a 	ret
 400ad54:	21000117 	ldw	r4,4(r4)
 400ad58:	39400117 	ldw	r5,4(r7)
 400ad5c:	21400526 	beq	r4,r5,400ad74 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x114>
 400ad60:	20c00007 	ldb	r3,0(r4)
 400ad64:	00800a84 	movi	r2,42
 400ad68:	18bfce26 	beq	r3,r2,400aca4 <__alt_data_end+0xfc00aca4>
 400ad6c:	400f4040 	call	400f404 <strcmp>
 400ad70:	103fcc1e 	bne	r2,zero,400aca4 <__alt_data_end+0xfc00aca4>
 400ad74:	00800184 	movi	r2,6
 400ad78:	003fea06 	br	400ad24 <__alt_data_end+0xfc00ad24>
 400ad7c:	a83fe926 	beq	r21,zero,400ad24 <__alt_data_end+0xfc00ad24>
 400ad80:	10800054 	ori	r2,r2,1
 400ad84:	003fe706 	br	400ad24 <__alt_data_end+0xfc00ad24>

0400ad88 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 400ad88:	deffe804 	addi	sp,sp,-96
 400ad8c:	df001615 	stw	fp,88(sp)
 400ad90:	df001b17 	ldw	fp,108(sp)
 400ad94:	ddc01515 	stw	r23,84(sp)
 400ad98:	dd001215 	stw	r20,72(sp)
 400ad9c:	e0800417 	ldw	r2,16(fp)
 400ada0:	dcc01115 	stw	r19,68(sp)
 400ada4:	dfc01715 	stw	ra,92(sp)
 400ada8:	dd801415 	stw	r22,80(sp)
 400adac:	dd401315 	stw	r21,76(sp)
 400adb0:	dc801015 	stw	r18,64(sp)
 400adb4:	dc400f15 	stw	r17,60(sp)
 400adb8:	dc000e15 	stw	r16,56(sp)
 400adbc:	d9000b15 	stw	r4,44(sp)
 400adc0:	d9c00915 	stw	r7,36(sp)
 400adc4:	1080040c 	andi	r2,r2,16
 400adc8:	282f883a 	mov	r23,r5
 400adcc:	3027883a 	mov	r19,r6
 400add0:	dd001817 	ldw	r20,96(sp)
 400add4:	10000226 	beq	r2,zero,400ade0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
 400add8:	20800217 	ldw	r2,8(r4)
 400addc:	e0800415 	stw	r2,16(fp)
 400ade0:	d8c01a17 	ldw	r3,104(sp)
 400ade4:	a0c0cb26 	beq	r20,r3,400b114 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38c>
 400ade8:	d8c00b17 	ldw	r3,44(sp)
 400adec:	1c000117 	ldw	r16,4(r3)
 400adf0:	d8c00917 	ldw	r3,36(sp)
 400adf4:	19400117 	ldw	r5,4(r3)
 400adf8:	2c000626 	beq	r5,r16,400ae14 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
 400adfc:	80c00007 	ldb	r3,0(r16)
 400ae00:	00800a84 	movi	r2,42
 400ae04:	18801b26 	beq	r3,r2,400ae74 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
 400ae08:	8009883a 	mov	r4,r16
 400ae0c:	400f4040 	call	400f404 <strcmp>
 400ae10:	1000181e 	bne	r2,zero,400ae74 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
 400ae14:	e5000015 	stw	r20,0(fp)
 400ae18:	e4c00115 	stw	r19,4(fp)
 400ae1c:	b8010916 	blt	r23,zero,400b244 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4bc>
 400ae20:	d8c01a17 	ldw	r3,104(sp)
 400ae24:	a5d9883a 	add	r12,r20,r23
 400ae28:	1b014126 	beq	r3,r12,400b330 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5a8>
 400ae2c:	00800044 	movi	r2,1
 400ae30:	e0800315 	stw	r2,12(fp)
 400ae34:	0005883a 	mov	r2,zero
 400ae38:	dfc01717 	ldw	ra,92(sp)
 400ae3c:	df001617 	ldw	fp,88(sp)
 400ae40:	ddc01517 	ldw	r23,84(sp)
 400ae44:	dd801417 	ldw	r22,80(sp)
 400ae48:	dd401317 	ldw	r21,76(sp)
 400ae4c:	dd001217 	ldw	r20,72(sp)
 400ae50:	dcc01117 	ldw	r19,68(sp)
 400ae54:	dc801017 	ldw	r18,64(sp)
 400ae58:	dc400f17 	ldw	r17,60(sp)
 400ae5c:	dc000e17 	ldw	r16,56(sp)
 400ae60:	dec01804 	addi	sp,sp,96
 400ae64:	f800283a 	ret
 400ae68:	d8c00917 	ldw	r3,36(sp)
 400ae6c:	18800117 	ldw	r2,4(r3)
 400ae70:	80bfe826 	beq	r16,r2,400ae14 <__alt_data_end+0xfc00ae14>
 400ae74:	b800ef16 	blt	r23,zero,400b234 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4ac>
 400ae78:	d8c01a17 	ldw	r3,104(sp)
 400ae7c:	1dedc83a 	sub	r22,r3,r23
 400ae80:	e005883a 	mov	r2,fp
 400ae84:	00c00044 	movi	r3,1
 400ae88:	b039883a 	mov	fp,r22
 400ae8c:	0021883a 	mov	r16,zero
 400ae90:	a02d883a 	mov	r22,r20
 400ae94:	d8000a45 	stb	zero,41(sp)
 400ae98:	d8c00a05 	stb	r3,40(sp)
 400ae9c:	048000c4 	movi	r18,3
 400aea0:	1029883a 	mov	r20,r2
 400aea4:	d8c00b17 	ldw	r3,44(sp)
 400aea8:	b805883a 	mov	r2,r23
 400aeac:	1ac00317 	ldw	r11,12(r3)
 400aeb0:	581490fa 	slli	r10,r11,3
 400aeb4:	52800304 	addi	r10,r10,12
 400aeb8:	1aab883a 	add	r21,r3,r10
 400aebc:	b007883a 	mov	r3,r22
 400aec0:	582d883a 	mov	r22,r11
 400aec4:	a82f883a 	mov	r23,r21
 400aec8:	1823883a 	mov	r17,r3
 400aecc:	102b883a 	mov	r21,r2
 400aed0:	b0005526 	beq	r22,zero,400b028 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2a0>
 400aed4:	b8800017 	ldw	r2,0(r23)
 400aed8:	a1400417 	ldw	r5,16(r20)
 400aedc:	d8000415 	stw	zero,16(sp)
 400aee0:	d8000515 	stw	zero,20(sp)
 400aee4:	d8000615 	stw	zero,24(sp)
 400aee8:	d8000715 	stw	zero,28(sp)
 400aeec:	d9400815 	stw	r5,32(sp)
 400aef0:	1100004c 	andi	r4,r2,1
 400aef4:	1007d23a 	srai	r3,r2,8
 400aef8:	20007526 	beq	r4,zero,400b0d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x348>
 400aefc:	89000017 	ldw	r4,0(r17)
 400af00:	99800054 	ori	r6,r19,1
 400af04:	20c7883a 	add	r3,r4,r3
 400af08:	18c00017 	ldw	r3,0(r3)
 400af0c:	88c7883a 	add	r3,r17,r3
 400af10:	e0000326 	beq	fp,zero,400af20 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x198>
 400af14:	d9c00a03 	ldbu	r7,40(sp)
 400af18:	e0c9803a 	cmpltu	r4,fp,r3
 400af1c:	21c07226 	beq	r4,r7,400b0e8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x360>
 400af20:	1080008c 	andi	r2,r2,2
 400af24:	1000041e 	bne	r2,zero,400af38 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b0>
 400af28:	013fff84 	movi	r4,-2
 400af2c:	a9007126 	beq	r21,r4,400b0f4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x36c>
 400af30:	00bfff44 	movi	r2,-3
 400af34:	308c703a 	and	r6,r6,r2
 400af38:	b93fff17 	ldw	r4,-4(r23)
 400af3c:	d9400404 	addi	r5,sp,16
 400af40:	d9c00917 	ldw	r7,36(sp)
 400af44:	20800017 	ldw	r2,0(r4)
 400af48:	d9400315 	stw	r5,12(sp)
 400af4c:	d9401a17 	ldw	r5,104(sp)
 400af50:	d8c00015 	stw	r3,0(sp)
 400af54:	d9400215 	stw	r5,8(sp)
 400af58:	d9401917 	ldw	r5,100(sp)
 400af5c:	d9400115 	stw	r5,4(sp)
 400af60:	10800717 	ldw	r2,28(r2)
 400af64:	a80b883a 	mov	r5,r21
 400af68:	103ee83a 	callr	r2
 400af6c:	a1400217 	ldw	r5,8(r20)
 400af70:	d9000617 	ldw	r4,24(sp)
 400af74:	d8c00717 	ldw	r3,28(sp)
 400af78:	2908b03a 	or	r4,r5,r4
 400af7c:	a1000215 	stw	r4,8(r20)
 400af80:	01400184 	movi	r5,6
 400af84:	1940a426 	beq	r3,r5,400b218 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
 400af88:	01400084 	movi	r5,2
 400af8c:	1940a226 	beq	r3,r5,400b218 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x490>
 400af90:	81403fcc 	andi	r5,r16,255
 400af94:	a1800017 	ldw	r6,0(r20)
 400af98:	28004f1e 	bne	r5,zero,400b0d8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x350>
 400af9c:	30007926 	beq	r6,zero,400b184 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3fc>
 400afa0:	d9400417 	ldw	r5,16(sp)
 400afa4:	29806926 	beq	r5,r6,400b14c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c4>
 400afa8:	28006d26 	beq	r5,zero,400b160 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3d8>
 400afac:	a2800317 	ldw	r10,12(r20)
 400afb0:	9100250e 	bge	r18,r4,400b048 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
 400afb4:	2100004c 	andi	r4,r4,1
 400afb8:	20000326 	beq	r4,zero,400afc8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x240>
 400afbc:	a0800417 	ldw	r2,16(r20)
 400afc0:	1080008c 	andi	r2,r2,2
 400afc4:	1000201e 	bne	r2,zero,400b048 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2c0>
 400afc8:	50004d1e 	bne	r10,zero,400b100 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x378>
 400afcc:	18002626 	beq	r3,zero,400b068 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e0>
 400afd0:	02800044 	movi	r10,1
 400afd4:	181b883a 	mov	r13,r3
 400afd8:	1a84f03a 	xor	r2,r3,r10
 400afdc:	501f883a 	mov	r15,r10
 400afe0:	90801f0e 	bge	r18,r2,400b060 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2d8>
 400afe4:	90c0880e 	bge	r18,r3,400b208 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x480>
 400afe8:	d9400417 	ldw	r5,16(sp)
 400afec:	1880008c 	andi	r2,r3,2
 400aff0:	d9000517 	ldw	r4,20(sp)
 400aff4:	a1400015 	stw	r5,0(r20)
 400aff8:	0021883a 	mov	r16,zero
 400affc:	a1000115 	stw	r4,4(r20)
 400b000:	a0c00315 	stw	r3,12(r20)
 400b004:	10004f1e 	bne	r2,zero,400b144 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
 400b008:	6b40004c 	andi	r13,r13,1
 400b00c:	68004d26 	beq	r13,zero,400b144 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3bc>
 400b010:	a1000217 	ldw	r4,8(r20)
 400b014:	01400104 	movi	r5,4
 400b018:	21408826 	beq	r4,r5,400b23c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
 400b01c:	b5bfffc4 	addi	r22,r22,-1
 400b020:	bdfffe04 	addi	r23,r23,-8
 400b024:	b03fab1e 	bne	r22,zero,400aed4 <__alt_data_end+0xfc00aed4>
 400b028:	d8800a43 	ldbu	r2,41(sp)
 400b02c:	a82f883a 	mov	r23,r21
 400b030:	882d883a 	mov	r22,r17
 400b034:	10008126 	beq	r2,zero,400b23c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
 400b038:	dd400a03 	ldbu	r21,40(sp)
 400b03c:	a8007f26 	beq	r21,zero,400b23c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4b4>
 400b040:	d8000a05 	stb	zero,40(sp)
 400b044:	003f9706 	br	400aea4 <__alt_data_end+0xfc00aea4>
 400b048:	501f883a 	mov	r15,r10
 400b04c:	181b883a 	mov	r13,r3
 400b050:	02800b0e 	bge	zero,r10,400b080 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2f8>
 400b054:	00c0570e 	bge	zero,r3,400b1b4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42c>
 400b058:	1a84f03a 	xor	r2,r3,r10
 400b05c:	90bfe116 	blt	r18,r2,400afe4 <__alt_data_end+0xfc00afe4>
 400b060:	1bc6703a 	and	r3,r3,r15
 400b064:	90c09916 	blt	r18,r3,400b2cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x544>
 400b068:	01000044 	movi	r4,1
 400b06c:	a1000315 	stw	r4,12(r20)
 400b070:	a0000015 	stw	zero,0(r20)
 400b074:	a1000217 	ldw	r4,8(r20)
 400b078:	04000044 	movi	r16,1
 400b07c:	003fe506 	br	400b014 <__alt_data_end+0xfc00b014>
 400b080:	90c00a0e 	bge	r18,r3,400b0ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
 400b084:	1880004c 	andi	r2,r3,1
 400b088:	10000426 	beq	r2,zero,400b09c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x314>
 400b08c:	d9000b17 	ldw	r4,44(sp)
 400b090:	20800217 	ldw	r2,8(r4)
 400b094:	1080008c 	andi	r2,r2,2
 400b098:	1000041e 	bne	r2,zero,400b0ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x324>
 400b09c:	1880005c 	xori	r2,r3,1
 400b0a0:	90bfd216 	blt	r18,r2,400afec <__alt_data_end+0xfc00afec>
 400b0a4:	03c00044 	movi	r15,1
 400b0a8:	003fed06 	br	400b060 <__alt_data_end+0xfc00b060>
 400b0ac:	a8006e16 	blt	r21,zero,400b268 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4e0>
 400b0b0:	d8801a17 	ldw	r2,104(sp)
 400b0b4:	354d883a 	add	r6,r6,r21
 400b0b8:	11805026 	beq	r2,r6,400b1fc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x474>
 400b0bc:	00c0a50e 	bge	zero,r3,400b354 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5cc>
 400b0c0:	03c00044 	movi	r15,1
 400b0c4:	1bc4f03a 	xor	r2,r3,r15
 400b0c8:	7815883a 	mov	r10,r15
 400b0cc:	003fc406 	br	400afe0 <__alt_data_end+0xfc00afe0>
 400b0d0:	980d883a 	mov	r6,r19
 400b0d4:	003f8d06 	br	400af0c <__alt_data_end+0xfc00af0c>
 400b0d8:	303fb11e 	bne	r6,zero,400afa0 <__alt_data_end+0xfc00afa0>
 400b0dc:	d9400417 	ldw	r5,16(sp)
 400b0e0:	283fb21e 	bne	r5,zero,400afac <__alt_data_end+0xfc00afac>
 400b0e4:	003fcb06 	br	400b014 <__alt_data_end+0xfc00b014>
 400b0e8:	00c00044 	movi	r3,1
 400b0ec:	d8c00a45 	stb	r3,41(sp)
 400b0f0:	003fca06 	br	400b01c <__alt_data_end+0xfc00b01c>
 400b0f4:	294000cc 	andi	r5,r5,3
 400b0f8:	283fc826 	beq	r5,zero,400b01c <__alt_data_end+0xfc00b01c>
 400b0fc:	003f8c06 	br	400af30 <__alt_data_end+0xfc00af30>
 400b100:	18001a26 	beq	r3,zero,400b16c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3e4>
 400b104:	181b883a 	mov	r13,r3
 400b108:	501f883a 	mov	r15,r10
 400b10c:	50c4f03a 	xor	r2,r10,r3
 400b110:	003fb306 	br	400afe0 <__alt_data_end+0xfc00afe0>
 400b114:	d8c00b17 	ldw	r3,44(sp)
 400b118:	1c000117 	ldw	r16,4(r3)
 400b11c:	d8c01917 	ldw	r3,100(sp)
 400b120:	19400117 	ldw	r5,4(r3)
 400b124:	81400626 	beq	r16,r5,400b140 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3b8>
 400b128:	80c00007 	ldb	r3,0(r16)
 400b12c:	00800a84 	movi	r2,42
 400b130:	18bf4d26 	beq	r3,r2,400ae68 <__alt_data_end+0xfc00ae68>
 400b134:	8009883a 	mov	r4,r16
 400b138:	400f4040 	call	400f404 <strcmp>
 400b13c:	10005c1e 	bne	r2,zero,400b2b0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x528>
 400b140:	e4c00215 	stw	r19,8(fp)
 400b144:	0005883a 	mov	r2,zero
 400b148:	003f3b06 	br	400ae38 <__alt_data_end+0xfc00ae38>
 400b14c:	a0c00117 	ldw	r3,4(r20)
 400b150:	d8800517 	ldw	r2,20(sp)
 400b154:	1884b03a 	or	r2,r3,r2
 400b158:	a0800115 	stw	r2,4(r20)
 400b15c:	003fad06 	br	400b014 <__alt_data_end+0xfc00b014>
 400b160:	10803fcc 	andi	r2,r2,255
 400b164:	103f911e 	bne	r2,zero,400afac <__alt_data_end+0xfc00afac>
 400b168:	003faa06 	br	400b014 <__alt_data_end+0xfc00b014>
 400b16c:	501b883a 	mov	r13,r10
 400b170:	5080005c 	xori	r2,r10,1
 400b174:	5007883a 	mov	r3,r10
 400b178:	90bfbb0e 	bge	r18,r2,400b068 <__alt_data_end+0xfc00b068>
 400b17c:	6880008c 	andi	r2,r13,2
 400b180:	003f9f06 	br	400b000 <__alt_data_end+0xfc00b000>
 400b184:	d8c00417 	ldw	r3,16(sp)
 400b188:	d9400517 	ldw	r5,20(sp)
 400b18c:	a0c00015 	stw	r3,0(r20)
 400b190:	a1400115 	stw	r5,4(r20)
 400b194:	18000526 	beq	r3,zero,400b1ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x424>
 400b198:	20001626 	beq	r4,zero,400b1f4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46c>
 400b19c:	d9400b17 	ldw	r5,44(sp)
 400b1a0:	28c00217 	ldw	r3,8(r5)
 400b1a4:	18c0004c 	andi	r3,r3,1
 400b1a8:	183f2326 	beq	r3,zero,400ae38 <__alt_data_end+0xfc00ae38>
 400b1ac:	1021883a 	mov	r16,r2
 400b1b0:	003f9806 	br	400b014 <__alt_data_end+0xfc00b014>
 400b1b4:	9280060e 	bge	r18,r10,400b1d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x448>
 400b1b8:	5080004c 	andi	r2,r10,1
 400b1bc:	10002426 	beq	r2,zero,400b250 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c8>
 400b1c0:	d8c00b17 	ldw	r3,44(sp)
 400b1c4:	18800217 	ldw	r2,8(r3)
 400b1c8:	1080008c 	andi	r2,r2,2
 400b1cc:	10003c26 	beq	r2,zero,400b2c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x538>
 400b1d0:	d9400417 	ldw	r5,16(sp)
 400b1d4:	a8004216 	blt	r21,zero,400b2e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x558>
 400b1d8:	d8c01a17 	ldw	r3,104(sp)
 400b1dc:	2d45883a 	add	r2,r5,r21
 400b1e0:	18805726 	beq	r3,r2,400b340 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b8>
 400b1e4:	7880005c 	xori	r2,r15,1
 400b1e8:	781b883a 	mov	r13,r15
 400b1ec:	5007883a 	mov	r3,r10
 400b1f0:	003fe106 	br	400b178 <__alt_data_end+0xfc00b178>
 400b1f4:	1021883a 	mov	r16,r2
 400b1f8:	003f8806 	br	400b01c <__alt_data_end+0xfc00b01c>
 400b1fc:	03c00184 	movi	r15,6
 400b200:	00ffb016 	blt	zero,r3,400b0c4 <__alt_data_end+0xfc00b0c4>
 400b204:	7815883a 	mov	r10,r15
 400b208:	7880008c 	andi	r2,r15,2
 400b20c:	781b883a 	mov	r13,r15
 400b210:	5007883a 	mov	r3,r10
 400b214:	003f7a06 	br	400b000 <__alt_data_end+0xfc00b000>
 400b218:	a039883a 	mov	fp,r20
 400b21c:	e0c00315 	stw	r3,12(fp)
 400b220:	d8c00417 	ldw	r3,16(sp)
 400b224:	a0c00015 	stw	r3,0(r20)
 400b228:	d8c00517 	ldw	r3,20(sp)
 400b22c:	a0c00115 	stw	r3,4(r20)
 400b230:	003f0106 	br	400ae38 <__alt_data_end+0xfc00ae38>
 400b234:	002d883a 	mov	r22,zero
 400b238:	003f1106 	br	400ae80 <__alt_data_end+0xfc00ae80>
 400b23c:	8005883a 	mov	r2,r16
 400b240:	003efd06 	br	400ae38 <__alt_data_end+0xfc00ae38>
 400b244:	00bfff84 	movi	r2,-2
 400b248:	b8bfbe1e 	bne	r23,r2,400b144 <__alt_data_end+0xfc00b144>
 400b24c:	003ef706 	br	400ae2c <__alt_data_end+0xfc00ae2c>
 400b250:	5080005c 	xori	r2,r10,1
 400b254:	90bf840e 	bge	r18,r2,400b068 <__alt_data_end+0xfc00b068>
 400b258:	501b883a 	mov	r13,r10
 400b25c:	5080008c 	andi	r2,r10,2
 400b260:	5007883a 	mov	r3,r10
 400b264:	003f6606 	br	400b000 <__alt_data_end+0xfc00b000>
 400b268:	013fff84 	movi	r4,-2
 400b26c:	a9003226 	beq	r21,r4,400b338 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5b0>
 400b270:	d9400917 	ldw	r5,36(sp)
 400b274:	d9001a17 	ldw	r4,104(sp)
 400b278:	d9c01917 	ldw	r7,100(sp)
 400b27c:	28800017 	ldw	r2,0(r5)
 400b280:	d9000015 	stw	r4,0(sp)
 400b284:	d9000917 	ldw	r4,36(sp)
 400b288:	10800817 	ldw	r2,32(r2)
 400b28c:	a80b883a 	mov	r5,r21
 400b290:	d8c00d15 	stw	r3,52(sp)
 400b294:	db400c15 	stw	r13,48(sp)
 400b298:	103ee83a 	callr	r2
 400b29c:	1015883a 	mov	r10,r2
 400b2a0:	101f883a 	mov	r15,r2
 400b2a4:	db400c17 	ldw	r13,48(sp)
 400b2a8:	d8c00d17 	ldw	r3,52(sp)
 400b2ac:	003f6906 	br	400b054 <__alt_data_end+0xfc00b054>
 400b2b0:	d8c00917 	ldw	r3,36(sp)
 400b2b4:	19400117 	ldw	r5,4(r3)
 400b2b8:	817ed31e 	bne	r16,r5,400ae08 <__alt_data_end+0xfc00ae08>
 400b2bc:	003ed506 	br	400ae14 <__alt_data_end+0xfc00ae14>
 400b2c0:	5080005c 	xori	r2,r10,1
 400b2c4:	90bfe416 	blt	r18,r2,400b258 <__alt_data_end+0xfc00b258>
 400b2c8:	003f6706 	br	400b068 <__alt_data_end+0xfc00b068>
 400b2cc:	00800084 	movi	r2,2
 400b2d0:	a0800315 	stw	r2,12(r20)
 400b2d4:	a0000015 	stw	zero,0(r20)
 400b2d8:	00800044 	movi	r2,1
 400b2dc:	003ed606 	br	400ae38 <__alt_data_end+0xfc00ae38>
 400b2e0:	013fff84 	movi	r4,-2
 400b2e4:	a9002526 	beq	r21,r4,400b37c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5f4>
 400b2e8:	d8c00917 	ldw	r3,36(sp)
 400b2ec:	d9c01917 	ldw	r7,100(sp)
 400b2f0:	d9000917 	ldw	r4,36(sp)
 400b2f4:	18800017 	ldw	r2,0(r3)
 400b2f8:	d8c01a17 	ldw	r3,104(sp)
 400b2fc:	280d883a 	mov	r6,r5
 400b300:	a80b883a 	mov	r5,r21
 400b304:	d8c00015 	stw	r3,0(sp)
 400b308:	10800817 	ldw	r2,32(r2)
 400b30c:	da800c15 	stw	r10,48(sp)
 400b310:	dbc00d15 	stw	r15,52(sp)
 400b314:	103ee83a 	callr	r2
 400b318:	da800c17 	ldw	r10,48(sp)
 400b31c:	1007883a 	mov	r3,r2
 400b320:	101b883a 	mov	r13,r2
 400b324:	dbc00d17 	ldw	r15,52(sp)
 400b328:	1284f03a 	xor	r2,r2,r10
 400b32c:	003f2c06 	br	400afe0 <__alt_data_end+0xfc00afe0>
 400b330:	00800184 	movi	r2,6
 400b334:	003ebe06 	br	400ae30 <__alt_data_end+0xfc00ae30>
 400b338:	00ff4b0e 	bge	zero,r3,400b068 <__alt_data_end+0xfc00b068>
 400b33c:	003f6006 	br	400b0c0 <__alt_data_end+0xfc00b0c0>
 400b340:	5080019c 	xori	r2,r10,6
 400b344:	90800916 	blt	r18,r2,400b36c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
 400b348:	50c0018c 	andi	r3,r10,6
 400b34c:	90ff460e 	bge	r18,r3,400b068 <__alt_data_end+0xfc00b068>
 400b350:	003fde06 	br	400b2cc <__alt_data_end+0xfc00b2cc>
 400b354:	d8c01a17 	ldw	r3,104(sp)
 400b358:	2d45883a 	add	r2,r5,r21
 400b35c:	18800326 	beq	r3,r2,400b36c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e4>
 400b360:	02800044 	movi	r10,1
 400b364:	501f883a 	mov	r15,r10
 400b368:	003f9e06 	br	400b1e4 <__alt_data_end+0xfc00b1e4>
 400b36c:	03400184 	movi	r13,6
 400b370:	00800084 	movi	r2,2
 400b374:	6807883a 	mov	r3,r13
 400b378:	003f1d06 	br	400aff0 <__alt_data_end+0xfc00aff0>
 400b37c:	501b883a 	mov	r13,r10
 400b380:	5080005c 	xori	r2,r10,1
 400b384:	5007883a 	mov	r3,r10
 400b388:	003f7b06 	br	400b178 <__alt_data_end+0xfc00b178>

0400b38c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 400b38c:	deffef04 	addi	sp,sp,-68
 400b390:	ddc00e15 	stw	r23,56(sp)
 400b394:	dd000b15 	stw	r20,44(sp)
 400b398:	dc400815 	stw	r17,32(sp)
 400b39c:	3029883a 	mov	r20,r6
 400b3a0:	dfc01015 	stw	ra,64(sp)
 400b3a4:	df000f15 	stw	fp,60(sp)
 400b3a8:	dd800d15 	stw	r22,52(sp)
 400b3ac:	dd400c15 	stw	r21,48(sp)
 400b3b0:	dcc00a15 	stw	r19,40(sp)
 400b3b4:	dc800915 	stw	r18,36(sp)
 400b3b8:	dc000715 	stw	r16,28(sp)
 400b3bc:	d9000515 	stw	r4,20(sp)
 400b3c0:	2823883a 	mov	r17,r5
 400b3c4:	382f883a 	mov	r23,r7
 400b3c8:	400b7740 	call	400b774 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 400b3cc:	100d883a 	mov	r6,r2
 400b3d0:	10803fcc 	andi	r2,r2,255
 400b3d4:	1000441e 	bne	r2,zero,400b4e8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x15c>
 400b3d8:	bc000217 	ldw	r16,8(r23)
 400b3dc:	8080040c 	andi	r2,r16,16
 400b3e0:	10000226 	beq	r2,zero,400b3ec <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x60>
 400b3e4:	d8c00517 	ldw	r3,20(sp)
 400b3e8:	1c000217 	ldw	r16,8(r3)
 400b3ec:	d8c00517 	ldw	r3,20(sp)
 400b3f0:	d8800517 	ldw	r2,20(sp)
 400b3f4:	1f000317 	ldw	fp,12(r3)
 400b3f8:	e01090fa 	slli	r8,fp,3
 400b3fc:	40c00304 	addi	r3,r8,12
 400b400:	10ed883a 	add	r22,r2,r3
 400b404:	80c0004c 	andi	r3,r16,1
 400b408:	42000204 	addi	r8,r8,8
 400b40c:	d8c00415 	stw	r3,16(sp)
 400b410:	122b883a 	add	r21,r2,r8
 400b414:	e0003226 	beq	fp,zero,400b4e0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x154>
 400b418:	b1800017 	ldw	r6,0(r22)
 400b41c:	d8000015 	stw	zero,0(sp)
 400b420:	d8000115 	stw	zero,4(sp)
 400b424:	dc000215 	stw	r16,8(sp)
 400b428:	d8000315 	stw	zero,12(sp)
 400b42c:	34c0008c 	andi	r19,r6,2
 400b430:	3480004c 	andi	r18,r6,1
 400b434:	9800021e 	bne	r19,zero,400b440 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xb4>
 400b438:	d8c00417 	ldw	r3,16(sp)
 400b43c:	18002426 	beq	r3,zero,400b4d0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
 400b440:	a0003626 	beq	r20,zero,400b51c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x190>
 400b444:	300dd23a 	srai	r6,r6,8
 400b448:	90000326 	beq	r18,zero,400b458 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
 400b44c:	a0800017 	ldw	r2,0(r20)
 400b450:	118d883a 	add	r6,r2,r6
 400b454:	31800017 	ldw	r6,0(r6)
 400b458:	a18d883a 	add	r6,r20,r6
 400b45c:	a9000017 	ldw	r4,0(r21)
 400b460:	d80f883a 	mov	r7,sp
 400b464:	880b883a 	mov	r5,r17
 400b468:	20800017 	ldw	r2,0(r4)
 400b46c:	10800617 	ldw	r2,24(r2)
 400b470:	103ee83a 	callr	r2
 400b474:	100d883a 	mov	r6,r2
 400b478:	10803fcc 	andi	r2,r2,255
 400b47c:	10001426 	beq	r2,zero,400b4d0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x144>
 400b480:	d8800317 	ldw	r2,12(sp)
 400b484:	00c00204 	movi	r3,8
 400b488:	10c02626 	beq	r2,r3,400b524 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x198>
 400b48c:	d8800117 	ldw	r2,4(sp)
 400b490:	00c000c4 	movi	r3,3
 400b494:	1880040e 	bge	r3,r2,400b4a8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
 400b498:	9800031e 	bne	r19,zero,400b4a8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x11c>
 400b49c:	00ffff44 	movi	r3,-3
 400b4a0:	10c4703a 	and	r2,r2,r3
 400b4a4:	d8800115 	stw	r2,4(sp)
 400b4a8:	b9400317 	ldw	r5,12(r23)
 400b4ac:	28002126 	beq	r5,zero,400b534 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1a8>
 400b4b0:	b8800017 	ldw	r2,0(r23)
 400b4b4:	d9000017 	ldw	r4,0(sp)
 400b4b8:	11004d1e 	bne	r2,r4,400b5f0 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x264>
 400b4bc:	10003126 	beq	r2,zero,400b584 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x1f8>
 400b4c0:	b9000117 	ldw	r4,4(r23)
 400b4c4:	d8800117 	ldw	r2,4(sp)
 400b4c8:	2084b03a 	or	r2,r4,r2
 400b4cc:	b8800115 	stw	r2,4(r23)
 400b4d0:	e73fffc4 	addi	fp,fp,-1
 400b4d4:	b5bffe04 	addi	r22,r22,-8
 400b4d8:	ad7ffe04 	addi	r21,r21,-8
 400b4dc:	e03fce1e 	bne	fp,zero,400b418 <__alt_data_end+0xfc00b418>
 400b4e0:	b9800117 	ldw	r6,4(r23)
 400b4e4:	300cc03a 	cmpne	r6,r6,zero
 400b4e8:	3005883a 	mov	r2,r6
 400b4ec:	dfc01017 	ldw	ra,64(sp)
 400b4f0:	df000f17 	ldw	fp,60(sp)
 400b4f4:	ddc00e17 	ldw	r23,56(sp)
 400b4f8:	dd800d17 	ldw	r22,52(sp)
 400b4fc:	dd400c17 	ldw	r21,48(sp)
 400b500:	dd000b17 	ldw	r20,44(sp)
 400b504:	dcc00a17 	ldw	r19,40(sp)
 400b508:	dc800917 	ldw	r18,36(sp)
 400b50c:	dc400817 	ldw	r17,32(sp)
 400b510:	dc000717 	ldw	r16,28(sp)
 400b514:	dec01104 	addi	sp,sp,68
 400b518:	f800283a 	ret
 400b51c:	000d883a 	mov	r6,zero
 400b520:	003fce06 	br	400b45c <__alt_data_end+0xfc00b45c>
 400b524:	903fd926 	beq	r18,zero,400b48c <__alt_data_end+0xfc00b48c>
 400b528:	a8800017 	ldw	r2,0(r21)
 400b52c:	d8800315 	stw	r2,12(sp)
 400b530:	003fd606 	br	400b48c <__alt_data_end+0xfc00b48c>
 400b534:	d9000017 	ldw	r4,0(sp)
 400b538:	d8800117 	ldw	r2,4(sp)
 400b53c:	00c000c4 	movi	r3,3
 400b540:	b9000015 	stw	r4,0(r23)
 400b544:	d9000217 	ldw	r4,8(sp)
 400b548:	b8800115 	stw	r2,4(r23)
 400b54c:	b9000215 	stw	r4,8(r23)
 400b550:	d9000317 	ldw	r4,12(sp)
 400b554:	b9000315 	stw	r4,12(r23)
 400b558:	18bfe30e 	bge	r3,r2,400b4e8 <__alt_data_end+0xfc00b4e8>
 400b55c:	1100008c 	andi	r4,r2,2
 400b560:	20001926 	beq	r4,zero,400b5c8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x23c>
 400b564:	d8c00517 	ldw	r3,20(sp)
 400b568:	18800217 	ldw	r2,8(r3)
 400b56c:	1080004c 	andi	r2,r2,1
 400b570:	103fdd26 	beq	r2,zero,400b4e8 <__alt_data_end+0xfc00b4e8>
 400b574:	e73fffc4 	addi	fp,fp,-1
 400b578:	b5bffe04 	addi	r22,r22,-8
 400b57c:	ad7ffe04 	addi	r21,r21,-8
 400b580:	003fd606 	br	400b4dc <__alt_data_end+0xfc00b4dc>
 400b584:	d8800317 	ldw	r2,12(sp)
 400b588:	00c00204 	movi	r3,8
 400b58c:	10c00b26 	beq	r2,r3,400b5bc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
 400b590:	28c00a26 	beq	r5,r3,400b5bc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
 400b594:	11000117 	ldw	r4,4(r2)
 400b598:	29400117 	ldw	r5,4(r5)
 400b59c:	217fc826 	beq	r4,r5,400b4c0 <__alt_data_end+0xfc00b4c0>
 400b5a0:	20800007 	ldb	r2,0(r4)
 400b5a4:	00c00a84 	movi	r3,42
 400b5a8:	10c00426 	beq	r2,r3,400b5bc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x230>
 400b5ac:	d9800615 	stw	r6,24(sp)
 400b5b0:	400f4040 	call	400f404 <strcmp>
 400b5b4:	d9800617 	ldw	r6,24(sp)
 400b5b8:	103fc126 	beq	r2,zero,400b4c0 <__alt_data_end+0xfc00b4c0>
 400b5bc:	00800084 	movi	r2,2
 400b5c0:	b8800115 	stw	r2,4(r23)
 400b5c4:	003fc806 	br	400b4e8 <__alt_data_end+0xfc00b4e8>
 400b5c8:	1080004c 	andi	r2,r2,1
 400b5cc:	103fc626 	beq	r2,zero,400b4e8 <__alt_data_end+0xfc00b4e8>
 400b5d0:	d8c00517 	ldw	r3,20(sp)
 400b5d4:	18800217 	ldw	r2,8(r3)
 400b5d8:	1080008c 	andi	r2,r2,2
 400b5dc:	103fc226 	beq	r2,zero,400b4e8 <__alt_data_end+0xfc00b4e8>
 400b5e0:	e73fffc4 	addi	fp,fp,-1
 400b5e4:	b5bffe04 	addi	r22,r22,-8
 400b5e8:	ad7ffe04 	addi	r21,r21,-8
 400b5ec:	003fbb06 	br	400b4dc <__alt_data_end+0xfc00b4dc>
 400b5f0:	00800084 	movi	r2,2
 400b5f4:	b8000015 	stw	zero,0(r23)
 400b5f8:	b8800115 	stw	r2,4(r23)
 400b5fc:	003fba06 	br	400b4e8 <__alt_data_end+0xfc00b4e8>

0400b600 <_ZNSt9type_infoD1Ev>:
 400b600:	f800283a 	ret

0400b604 <_ZNKSt9type_info14__is_pointer_pEv>:
 400b604:	0005883a 	mov	r2,zero
 400b608:	f800283a 	ret

0400b60c <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 400b60c:	0005883a 	mov	r2,zero
 400b610:	f800283a 	ret

0400b614 <_ZNSt9type_infoD0Ev>:
 400b614:	400b65c1 	jmpi	400b65c <_ZdlPv>

0400b618 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 400b618:	21000117 	ldw	r4,4(r4)
 400b61c:	29400117 	ldw	r5,4(r5)
 400b620:	21400c26 	beq	r4,r5,400b654 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
 400b624:	20c00007 	ldb	r3,0(r4)
 400b628:	00800a84 	movi	r2,42
 400b62c:	18800726 	beq	r3,r2,400b64c <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
 400b630:	deffff04 	addi	sp,sp,-4
 400b634:	dfc00015 	stw	ra,0(sp)
 400b638:	400f4040 	call	400f404 <strcmp>
 400b63c:	1005003a 	cmpeq	r2,r2,zero
 400b640:	dfc00017 	ldw	ra,0(sp)
 400b644:	dec00104 	addi	sp,sp,4
 400b648:	f800283a 	ret
 400b64c:	0005883a 	mov	r2,zero
 400b650:	f800283a 	ret
 400b654:	00800044 	movi	r2,1
 400b658:	f800283a 	ret

0400b65c <_ZdlPv>:
 400b65c:	400e4bc1 	jmpi	400e4bc <free>

0400b660 <__cxa_pure_virtual>:
 400b660:	014100b4 	movhi	r5,1026
 400b664:	deffff04 	addi	sp,sp,-4
 400b668:	295bf704 	addi	r5,r5,28636
 400b66c:	018006c4 	movi	r6,27
 400b670:	01000084 	movi	r4,2
 400b674:	dfc00015 	stw	ra,0(sp)
 400b678:	401c19c0 	call	401c19c <write>
 400b67c:	400ba280 	call	400ba28 <_ZSt9terminatev>

0400b680 <__cxa_deleted_virtual>:
 400b680:	014100b4 	movhi	r5,1026
 400b684:	deffff04 	addi	sp,sp,-4
 400b688:	295bfe04 	addi	r5,r5,28664
 400b68c:	01800784 	movi	r6,30
 400b690:	01000084 	movi	r4,2
 400b694:	dfc00015 	stw	ra,0(sp)
 400b698:	401c19c0 	call	401c19c <write>
 400b69c:	400ba280 	call	400ba28 <_ZSt9terminatev>

0400b6a0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 400b6a0:	20800017 	ldw	r2,0(r4)
 400b6a4:	defffa04 	addi	sp,sp,-24
 400b6a8:	dc000415 	stw	r16,16(sp)
 400b6ac:	10800617 	ldw	r2,24(r2)
 400b6b0:	3021883a 	mov	r16,r6
 400b6b4:	31800017 	ldw	r6,0(r6)
 400b6b8:	00c00404 	movi	r3,16
 400b6bc:	d8c00215 	stw	r3,8(sp)
 400b6c0:	dfc00515 	stw	ra,20(sp)
 400b6c4:	d8000015 	stw	zero,0(sp)
 400b6c8:	d8000115 	stw	zero,4(sp)
 400b6cc:	d8000315 	stw	zero,12(sp)
 400b6d0:	d80f883a 	mov	r7,sp
 400b6d4:	103ee83a 	callr	r2
 400b6d8:	d8800117 	ldw	r2,4(sp)
 400b6dc:	00c00184 	movi	r3,6
 400b6e0:	1080018c 	andi	r2,r2,6
 400b6e4:	10c00526 	beq	r2,r3,400b6fc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
 400b6e8:	0005883a 	mov	r2,zero
 400b6ec:	dfc00517 	ldw	ra,20(sp)
 400b6f0:	dc000417 	ldw	r16,16(sp)
 400b6f4:	dec00604 	addi	sp,sp,24
 400b6f8:	f800283a 	ret
 400b6fc:	d8c00017 	ldw	r3,0(sp)
 400b700:	00800044 	movi	r2,1
 400b704:	80c00015 	stw	r3,0(r16)
 400b708:	dfc00517 	ldw	ra,20(sp)
 400b70c:	dc000417 	ldw	r16,16(sp)
 400b710:	dec00604 	addi	sp,sp,24
 400b714:	f800283a 	ret

0400b718 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 400b718:	d8800017 	ldw	r2,0(sp)
 400b71c:	11800226 	beq	r2,r6,400b728 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
 400b720:	00800044 	movi	r2,1
 400b724:	f800283a 	ret
 400b728:	00800184 	movi	r2,6
 400b72c:	f800283a 	ret

0400b730 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 400b730:	008100b4 	movhi	r2,1026
 400b734:	109c1404 	addi	r2,r2,28752
 400b738:	20800015 	stw	r2,0(r4)
 400b73c:	400b6001 	jmpi	400b600 <_ZNSt9type_infoD1Ev>

0400b740 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 400b740:	defffe04 	addi	sp,sp,-8
 400b744:	008100b4 	movhi	r2,1026
 400b748:	dc000015 	stw	r16,0(sp)
 400b74c:	dfc00115 	stw	ra,4(sp)
 400b750:	109c1404 	addi	r2,r2,28752
 400b754:	20800015 	stw	r2,0(r4)
 400b758:	2021883a 	mov	r16,r4
 400b75c:	400b6000 	call	400b600 <_ZNSt9type_infoD1Ev>
 400b760:	8009883a 	mov	r4,r16
 400b764:	dfc00117 	ldw	ra,4(sp)
 400b768:	dc000017 	ldw	r16,0(sp)
 400b76c:	dec00204 	addi	sp,sp,8
 400b770:	400b65c1 	jmpi	400b65c <_ZdlPv>

0400b774 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 400b774:	21000117 	ldw	r4,4(r4)
 400b778:	29400117 	ldw	r5,4(r5)
 400b77c:	defffd04 	addi	sp,sp,-12
 400b780:	dc400115 	stw	r17,4(sp)
 400b784:	dc000015 	stw	r16,0(sp)
 400b788:	dfc00215 	stw	ra,8(sp)
 400b78c:	3023883a 	mov	r17,r6
 400b790:	3821883a 	mov	r16,r7
 400b794:	21400526 	beq	r4,r5,400b7ac <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
 400b798:	20c00007 	ldb	r3,0(r4)
 400b79c:	00800a84 	movi	r2,42
 400b7a0:	18800d26 	beq	r3,r2,400b7d8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
 400b7a4:	400f4040 	call	400f404 <strcmp>
 400b7a8:	10000b1e 	bne	r2,zero,400b7d8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
 400b7ac:	00800204 	movi	r2,8
 400b7b0:	80800315 	stw	r2,12(r16)
 400b7b4:	00800184 	movi	r2,6
 400b7b8:	80800115 	stw	r2,4(r16)
 400b7bc:	84400015 	stw	r17,0(r16)
 400b7c0:	00800044 	movi	r2,1
 400b7c4:	dfc00217 	ldw	ra,8(sp)
 400b7c8:	dc400117 	ldw	r17,4(sp)
 400b7cc:	dc000017 	ldw	r16,0(sp)
 400b7d0:	dec00304 	addi	sp,sp,12
 400b7d4:	f800283a 	ret
 400b7d8:	0005883a 	mov	r2,zero
 400b7dc:	003ff906 	br	400b7c4 <__alt_data_end+0xfc00b7c4>

0400b7e0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 400b7e0:	defffa04 	addi	sp,sp,-24
 400b7e4:	dc800415 	stw	r18,16(sp)
 400b7e8:	d8800817 	ldw	r2,32(sp)
 400b7ec:	dc800617 	ldw	r18,24(sp)
 400b7f0:	dc400315 	stw	r17,12(sp)
 400b7f4:	dc000215 	stw	r16,8(sp)
 400b7f8:	dfc00515 	stw	ra,20(sp)
 400b7fc:	dc400917 	ldw	r17,36(sp)
 400b800:	24000117 	ldw	r16,4(r4)
 400b804:	90801526 	beq	r18,r2,400b85c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
 400b808:	39400117 	ldw	r5,4(r7)
 400b80c:	2c000826 	beq	r5,r16,400b830 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
 400b810:	80c00007 	ldb	r3,0(r16)
 400b814:	00800a84 	movi	r2,42
 400b818:	18800926 	beq	r3,r2,400b840 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 400b81c:	8009883a 	mov	r4,r16
 400b820:	d9800115 	stw	r6,4(sp)
 400b824:	400f4040 	call	400f404 <strcmp>
 400b828:	d9800117 	ldw	r6,4(sp)
 400b82c:	1000041e 	bne	r2,zero,400b840 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 400b830:	00800044 	movi	r2,1
 400b834:	8c800015 	stw	r18,0(r17)
 400b838:	89800115 	stw	r6,4(r17)
 400b83c:	88800315 	stw	r2,12(r17)
 400b840:	0005883a 	mov	r2,zero
 400b844:	dfc00517 	ldw	ra,20(sp)
 400b848:	dc800417 	ldw	r18,16(sp)
 400b84c:	dc400317 	ldw	r17,12(sp)
 400b850:	dc000217 	ldw	r16,8(sp)
 400b854:	dec00604 	addi	sp,sp,24
 400b858:	f800283a 	ret
 400b85c:	d8800717 	ldw	r2,28(sp)
 400b860:	11400117 	ldw	r5,4(r2)
 400b864:	81400a26 	beq	r16,r5,400b890 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
 400b868:	80c00007 	ldb	r3,0(r16)
 400b86c:	00800a84 	movi	r2,42
 400b870:	18800c26 	beq	r3,r2,400b8a4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
 400b874:	8009883a 	mov	r4,r16
 400b878:	d9800115 	stw	r6,4(sp)
 400b87c:	d9c00015 	stw	r7,0(sp)
 400b880:	400f4040 	call	400f404 <strcmp>
 400b884:	d9800117 	ldw	r6,4(sp)
 400b888:	d9c00017 	ldw	r7,0(sp)
 400b88c:	1000021e 	bne	r2,zero,400b898 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
 400b890:	89800215 	stw	r6,8(r17)
 400b894:	003fea06 	br	400b840 <__alt_data_end+0xfc00b840>
 400b898:	39400117 	ldw	r5,4(r7)
 400b89c:	817fdf1e 	bne	r16,r5,400b81c <__alt_data_end+0xfc00b81c>
 400b8a0:	003fe306 	br	400b830 <__alt_data_end+0xfc00b830>
 400b8a4:	38800117 	ldw	r2,4(r7)
 400b8a8:	80bfe51e 	bne	r16,r2,400b840 <__alt_data_end+0xfc00b840>
 400b8ac:	003fe006 	br	400b830 <__alt_data_end+0xfc00b830>

0400b8b0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 400b8b0:	20800117 	ldw	r2,4(r4)
 400b8b4:	28c00117 	ldw	r3,4(r5)
 400b8b8:	10c02926 	beq	r2,r3,400b960 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
 400b8bc:	defffb04 	addi	sp,sp,-20
 400b8c0:	dcc00315 	stw	r19,12(sp)
 400b8c4:	dc800215 	stw	r18,8(sp)
 400b8c8:	dc400115 	stw	r17,4(sp)
 400b8cc:	dc000015 	stw	r16,0(sp)
 400b8d0:	dfc00415 	stw	ra,16(sp)
 400b8d4:	2821883a 	mov	r16,r5
 400b8d8:	11400007 	ldb	r5,0(r2)
 400b8dc:	2025883a 	mov	r18,r4
 400b8e0:	01000a84 	movi	r4,42
 400b8e4:	3823883a 	mov	r17,r7
 400b8e8:	3027883a 	mov	r19,r6
 400b8ec:	29000626 	beq	r5,r4,400b908 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 400b8f0:	180b883a 	mov	r5,r3
 400b8f4:	1009883a 	mov	r4,r2
 400b8f8:	400f4040 	call	400f404 <strcmp>
 400b8fc:	1000021e 	bne	r2,zero,400b908 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 400b900:	00800044 	movi	r2,1
 400b904:	00000306 	br	400b914 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
 400b908:	008000c4 	movi	r2,3
 400b90c:	1440082e 	bgeu	r2,r17,400b930 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
 400b910:	0005883a 	mov	r2,zero
 400b914:	dfc00417 	ldw	ra,16(sp)
 400b918:	dcc00317 	ldw	r19,12(sp)
 400b91c:	dc800217 	ldw	r18,8(sp)
 400b920:	dc400117 	ldw	r17,4(sp)
 400b924:	dc000017 	ldw	r16,0(sp)
 400b928:	dec00504 	addi	sp,sp,20
 400b92c:	f800283a 	ret
 400b930:	80800017 	ldw	r2,0(r16)
 400b934:	980d883a 	mov	r6,r19
 400b938:	900b883a 	mov	r5,r18
 400b93c:	10800517 	ldw	r2,20(r2)
 400b940:	8009883a 	mov	r4,r16
 400b944:	dfc00417 	ldw	ra,16(sp)
 400b948:	dcc00317 	ldw	r19,12(sp)
 400b94c:	dc800217 	ldw	r18,8(sp)
 400b950:	dc400117 	ldw	r17,4(sp)
 400b954:	dc000017 	ldw	r16,0(sp)
 400b958:	dec00504 	addi	sp,sp,20
 400b95c:	1000683a 	jmp	r2
 400b960:	00800044 	movi	r2,1
 400b964:	f800283a 	ret

0400b968 <_ZN10__cxxabiv111__terminateEPFvvE>:
 400b968:	00810074 	movhi	r2,1025
 400b96c:	deffef04 	addi	sp,sp,-68
 400b970:	10b0b404 	addi	r2,r2,-15664
 400b974:	d8800615 	stw	r2,24(sp)
 400b978:	008100b4 	movhi	r2,1026
 400b97c:	10809604 	addi	r2,r2,600
 400b980:	d8800715 	stw	r2,28(sp)
 400b984:	00810074 	movhi	r2,1025
 400b988:	10ae7004 	addi	r2,r2,-17984
 400b98c:	d9000d15 	stw	r4,52(sp)
 400b990:	d809883a 	mov	r4,sp
 400b994:	d8800915 	stw	r2,36(sp)
 400b998:	dfc01015 	stw	ra,64(sp)
 400b99c:	df000f15 	stw	fp,60(sp)
 400b9a0:	dec00815 	stw	sp,32(sp)
 400b9a4:	dec00a15 	stw	sp,40(sp)
 400b9a8:	400e0c80 	call	400e0c8 <_Unwind_SjLj_Register>
 400b9ac:	00800044 	movi	r2,1
 400b9b0:	d8800115 	stw	r2,4(sp)
 400b9b4:	d8800d17 	ldw	r2,52(sp)
 400b9b8:	103ee83a 	callr	r2
 400b9bc:	400e4440 	call	400e444 <abort>
 400b9c0:	d8c00217 	ldw	r3,8(sp)
 400b9c4:	d8800117 	ldw	r2,4(sp)
 400b9c8:	d8c00d15 	stw	r3,52(sp)
 400b9cc:	d8c00317 	ldw	r3,12(sp)
 400b9d0:	d8c00e15 	stw	r3,56(sp)
 400b9d4:	10000b26 	beq	r2,zero,400ba04 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
 400b9d8:	10bfffc4 	addi	r2,r2,-1
 400b9dc:	10000126 	beq	r2,zero,400b9e4 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
 400b9e0:	003b68fa 	trap	3
 400b9e4:	d8000115 	stw	zero,4(sp)
 400b9e8:	400cd140 	call	400cd14 <__cxa_end_catch>
 400b9ec:	d8c00e17 	ldw	r3,56(sp)
 400b9f0:	00bfffc4 	movi	r2,-1
 400b9f4:	18800826 	beq	r3,r2,400ba18 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
 400b9f8:	d9000d17 	ldw	r4,52(sp)
 400b9fc:	d8800115 	stw	r2,4(sp)
 400ba00:	400e2c40 	call	400e2c4 <_Unwind_SjLj_Resume>
 400ba04:	d9000d17 	ldw	r4,52(sp)
 400ba08:	400cc600 	call	400cc60 <__cxa_begin_catch>
 400ba0c:	00800084 	movi	r2,2
 400ba10:	d8800115 	stw	r2,4(sp)
 400ba14:	400e4440 	call	400e444 <abort>
 400ba18:	d8800e17 	ldw	r2,56(sp)
 400ba1c:	d9000d17 	ldw	r4,52(sp)
 400ba20:	d8800115 	stw	r2,4(sp)
 400ba24:	400c8d00 	call	400c8d0 <__cxa_call_unexpected>

0400ba28 <_ZSt9terminatev>:
 400ba28:	008100f4 	movhi	r2,1027
 400ba2c:	10a98004 	addi	r2,r2,-23040
 400ba30:	11000017 	ldw	r4,0(r2)
 400ba34:	deffff04 	addi	sp,sp,-4
 400ba38:	dfc00015 	stw	ra,0(sp)
 400ba3c:	400b9680 	call	400b968 <_ZN10__cxxabiv111__terminateEPFvvE>

0400ba40 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 400ba40:	deffff04 	addi	sp,sp,-4
 400ba44:	dfc00015 	stw	ra,0(sp)
 400ba48:	203ee83a 	callr	r4
 400ba4c:	400ba280 	call	400ba28 <_ZSt9terminatev>

0400ba50 <_ZSt10unexpectedv>:
 400ba50:	008100f4 	movhi	r2,1027
 400ba54:	10a97f04 	addi	r2,r2,-23044
 400ba58:	11000017 	ldw	r4,0(r2)
 400ba5c:	deffff04 	addi	sp,sp,-4
 400ba60:	dfc00015 	stw	ra,0(sp)
 400ba64:	400ba400 	call	400ba40 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0400ba68 <_ZSt13set_terminatePFvvE>:
 400ba68:	00c100f4 	movhi	r3,1027
 400ba6c:	18e98004 	addi	r3,r3,-23040
 400ba70:	18800017 	ldw	r2,0(r3)
 400ba74:	19000015 	stw	r4,0(r3)
 400ba78:	f800283a 	ret

0400ba7c <_ZSt13get_terminatev>:
 400ba7c:	008100f4 	movhi	r2,1027
 400ba80:	10a98004 	addi	r2,r2,-23040
 400ba84:	10800017 	ldw	r2,0(r2)
 400ba88:	f800283a 	ret

0400ba8c <_ZSt14set_unexpectedPFvvE>:
 400ba8c:	00c100f4 	movhi	r3,1027
 400ba90:	18e97f04 	addi	r3,r3,-23044
 400ba94:	18800017 	ldw	r2,0(r3)
 400ba98:	19000015 	stw	r4,0(r3)
 400ba9c:	f800283a 	ret

0400baa0 <_ZSt14get_unexpectedv>:
 400baa0:	008100f4 	movhi	r2,1027
 400baa4:	10a97f04 	addi	r2,r2,-23044
 400baa8:	10800017 	ldw	r2,0(r2)
 400baac:	f800283a 	ret

0400bab0 <_ZL21size_of_encoded_valueh>:
 400bab0:	deffff04 	addi	sp,sp,-4
 400bab4:	dfc00015 	stw	ra,0(sp)
 400bab8:	20c03fcc 	andi	r3,r4,255
 400babc:	00803fc4 	movi	r2,255
 400bac0:	18802026 	beq	r3,r2,400bb44 <_ZL21size_of_encoded_valueh+0x94>
 400bac4:	210001cc 	andi	r4,r4,7
 400bac8:	00800144 	movi	r2,5
 400bacc:	11001c36 	bltu	r2,r4,400bb40 <_ZL21size_of_encoded_valueh+0x90>
 400bad0:	200890ba 	slli	r4,r4,2
 400bad4:	00810074 	movhi	r2,1025
 400bad8:	10aeba04 	addi	r2,r2,-17688
 400badc:	2089883a 	add	r4,r4,r2
 400bae0:	20800017 	ldw	r2,0(r4)
 400bae4:	1000683a 	jmp	r2
 400bae8:	0400bb00 	call	400bb0 <__alt_mem_sdram-0x3bff450>
 400baec:	0400bb40 	call	400bb4 <__alt_mem_sdram-0x3bff44c>
 400baf0:	0400bb10 	cmplti	r16,zero,748
 400baf4:	0400bb00 	call	400bb0 <__alt_mem_sdram-0x3bff450>
 400baf8:	0400bb30 	cmpltui	r16,zero,748
 400bafc:	0400bb20 	cmpeqi	r16,zero,748
 400bb00:	00800104 	movi	r2,4
 400bb04:	dfc00017 	ldw	ra,0(sp)
 400bb08:	dec00104 	addi	sp,sp,4
 400bb0c:	f800283a 	ret
 400bb10:	00800084 	movi	r2,2
 400bb14:	dfc00017 	ldw	ra,0(sp)
 400bb18:	dec00104 	addi	sp,sp,4
 400bb1c:	f800283a 	ret
 400bb20:	00800044 	movi	r2,1
 400bb24:	dfc00017 	ldw	ra,0(sp)
 400bb28:	dec00104 	addi	sp,sp,4
 400bb2c:	f800283a 	ret
 400bb30:	00800204 	movi	r2,8
 400bb34:	dfc00017 	ldw	ra,0(sp)
 400bb38:	dec00104 	addi	sp,sp,4
 400bb3c:	f800283a 	ret
 400bb40:	400e4440 	call	400e444 <abort>
 400bb44:	0005883a 	mov	r2,zero
 400bb48:	dfc00017 	ldw	ra,0(sp)
 400bb4c:	dec00104 	addi	sp,sp,4
 400bb50:	f800283a 	ret

0400bb54 <_ZL28read_encoded_value_with_basehjPKhPj>:
 400bb54:	deffff04 	addi	sp,sp,-4
 400bb58:	dfc00015 	stw	ra,0(sp)
 400bb5c:	20c03fcc 	andi	r3,r4,255
 400bb60:	00801404 	movi	r2,80
 400bb64:	18807326 	beq	r3,r2,400bd34 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
 400bb68:	20c003cc 	andi	r3,r4,15
 400bb6c:	00800304 	movi	r2,12
 400bb70:	10c06f36 	bltu	r2,r3,400bd30 <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
 400bb74:	180690ba 	slli	r3,r3,2
 400bb78:	02010074 	movhi	r8,1025
 400bb7c:	422ee304 	addi	r8,r8,-17524
 400bb80:	1a07883a 	add	r3,r3,r8
 400bb84:	18800017 	ldw	r2,0(r3)
 400bb88:	1000683a 	jmp	r2
 400bb8c:	0400bbc0 	call	400bbc <__alt_mem_sdram-0x3bff444>
 400bb90:	0400bcdc 	xori	r16,zero,755
 400bb94:	0400bd18 	cmpnei	r16,zero,756
 400bb98:	0400bbc0 	call	400bbc <__alt_mem_sdram-0x3bff444>
 400bb9c:	0400bc24 	muli	r16,zero,752
 400bba0:	0400bc78 	rdprs	r16,zero,753
 400bba4:	0400bd30 	cmpltui	r16,zero,756
 400bba8:	0400bd30 	cmpltui	r16,zero,756
 400bbac:	0400bd30 	cmpltui	r16,zero,756
 400bbb0:	0400bc84 	movi	r16,754
 400bbb4:	0400bc54 	movui	r16,753
 400bbb8:	0400bbc0 	call	400bbc <__alt_mem_sdram-0x3bff444>
 400bbbc:	0400bc24 	muli	r16,zero,752
 400bbc0:	30800043 	ldbu	r2,1(r6)
 400bbc4:	30c00083 	ldbu	r3,2(r6)
 400bbc8:	324000c3 	ldbu	r9,3(r6)
 400bbcc:	32000003 	ldbu	r8,0(r6)
 400bbd0:	1004923a 	slli	r2,r2,8
 400bbd4:	1806943a 	slli	r3,r3,16
 400bbd8:	4812963a 	slli	r9,r9,24
 400bbdc:	1204b03a 	or	r2,r2,r8
 400bbe0:	1884b03a 	or	r2,r3,r2
 400bbe4:	4886b03a 	or	r3,r9,r2
 400bbe8:	30800104 	addi	r2,r6,4
 400bbec:	18000926 	beq	r3,zero,400bc14 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
 400bbf0:	22001c0c 	andi	r8,r4,112
 400bbf4:	02400404 	movi	r9,16
 400bbf8:	42405726 	beq	r8,r9,400bd58 <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
 400bbfc:	21003fcc 	andi	r4,r4,255
 400bc00:	2100201c 	xori	r4,r4,128
 400bc04:	213fe004 	addi	r4,r4,-128
 400bc08:	1947883a 	add	r3,r3,r5
 400bc0c:	2000010e 	bge	r4,zero,400bc14 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
 400bc10:	18c00017 	ldw	r3,0(r3)
 400bc14:	38c00015 	stw	r3,0(r7)
 400bc18:	dfc00017 	ldw	ra,0(sp)
 400bc1c:	dec00104 	addi	sp,sp,4
 400bc20:	f800283a 	ret
 400bc24:	30800043 	ldbu	r2,1(r6)
 400bc28:	30c00083 	ldbu	r3,2(r6)
 400bc2c:	324000c3 	ldbu	r9,3(r6)
 400bc30:	32000003 	ldbu	r8,0(r6)
 400bc34:	1004923a 	slli	r2,r2,8
 400bc38:	1806943a 	slli	r3,r3,16
 400bc3c:	4812963a 	slli	r9,r9,24
 400bc40:	1204b03a 	or	r2,r2,r8
 400bc44:	1884b03a 	or	r2,r3,r2
 400bc48:	4886b03a 	or	r3,r9,r2
 400bc4c:	30800204 	addi	r2,r6,8
 400bc50:	003fe606 	br	400bbec <__alt_data_end+0xfc00bbec>
 400bc54:	30c00043 	ldbu	r3,1(r6)
 400bc58:	32000003 	ldbu	r8,0(r6)
 400bc5c:	30800084 	addi	r2,r6,2
 400bc60:	1806923a 	slli	r3,r3,8
 400bc64:	1a06b03a 	or	r3,r3,r8
 400bc68:	18ffffcc 	andi	r3,r3,65535
 400bc6c:	18e0001c 	xori	r3,r3,32768
 400bc70:	18e00004 	addi	r3,r3,-32768
 400bc74:	003fdd06 	br	400bbec <__alt_data_end+0xfc00bbec>
 400bc78:	30c00003 	ldbu	r3,0(r6)
 400bc7c:	30800044 	addi	r2,r6,1
 400bc80:	003fda06 	br	400bbec <__alt_data_end+0xfc00bbec>
 400bc84:	3017883a 	mov	r11,r6
 400bc88:	0007883a 	mov	r3,zero
 400bc8c:	0013883a 	mov	r9,zero
 400bc90:	5a800003 	ldbu	r10,0(r11)
 400bc94:	58800044 	addi	r2,r11,1
 400bc98:	1017883a 	mov	r11,r2
 400bc9c:	52001fcc 	andi	r8,r10,127
 400bca0:	4250983a 	sll	r8,r8,r9
 400bca4:	53003fcc 	andi	r12,r10,255
 400bca8:	6300201c 	xori	r12,r12,128
 400bcac:	633fe004 	addi	r12,r12,-128
 400bcb0:	1a06b03a 	or	r3,r3,r8
 400bcb4:	4a4001c4 	addi	r9,r9,7
 400bcb8:	603ff516 	blt	r12,zero,400bc90 <__alt_data_end+0xfc00bc90>
 400bcbc:	020007c4 	movi	r8,31
 400bcc0:	427fca36 	bltu	r8,r9,400bbec <__alt_data_end+0xfc00bbec>
 400bcc4:	5280100c 	andi	r10,r10,64
 400bcc8:	503fc826 	beq	r10,zero,400bbec <__alt_data_end+0xfc00bbec>
 400bccc:	023fffc4 	movi	r8,-1
 400bcd0:	4252983a 	sll	r9,r8,r9
 400bcd4:	1a46b03a 	or	r3,r3,r9
 400bcd8:	003fc506 	br	400bbf0 <__alt_data_end+0xfc00bbf0>
 400bcdc:	3017883a 	mov	r11,r6
 400bce0:	0007883a 	mov	r3,zero
 400bce4:	0015883a 	mov	r10,zero
 400bce8:	5a000003 	ldbu	r8,0(r11)
 400bcec:	58800044 	addi	r2,r11,1
 400bcf0:	1017883a 	mov	r11,r2
 400bcf4:	42401fcc 	andi	r9,r8,127
 400bcf8:	4a92983a 	sll	r9,r9,r10
 400bcfc:	42003fcc 	andi	r8,r8,255
 400bd00:	4200201c 	xori	r8,r8,128
 400bd04:	423fe004 	addi	r8,r8,-128
 400bd08:	1a46b03a 	or	r3,r3,r9
 400bd0c:	528001c4 	addi	r10,r10,7
 400bd10:	403ff516 	blt	r8,zero,400bce8 <__alt_data_end+0xfc00bce8>
 400bd14:	003fb506 	br	400bbec <__alt_data_end+0xfc00bbec>
 400bd18:	30c00043 	ldbu	r3,1(r6)
 400bd1c:	32000003 	ldbu	r8,0(r6)
 400bd20:	30800084 	addi	r2,r6,2
 400bd24:	1806923a 	slli	r3,r3,8
 400bd28:	1a06b03a 	or	r3,r3,r8
 400bd2c:	003faf06 	br	400bbec <__alt_data_end+0xfc00bbec>
 400bd30:	400e4440 	call	400e444 <abort>
 400bd34:	308000c4 	addi	r2,r6,3
 400bd38:	00ffff04 	movi	r3,-4
 400bd3c:	10c4703a 	and	r2,r2,r3
 400bd40:	10c00017 	ldw	r3,0(r2)
 400bd44:	10800104 	addi	r2,r2,4
 400bd48:	38c00015 	stw	r3,0(r7)
 400bd4c:	dfc00017 	ldw	ra,0(sp)
 400bd50:	dec00104 	addi	sp,sp,4
 400bd54:	f800283a 	ret
 400bd58:	300b883a 	mov	r5,r6
 400bd5c:	003fa706 	br	400bbfc <__alt_data_end+0xfc00bbfc>

0400bd60 <_ZL15get_ttype_entryP16lsda_header_infom>:
 400bd60:	defffc04 	addi	sp,sp,-16
 400bd64:	dfc00315 	stw	ra,12(sp)
 400bd68:	dc000215 	stw	r16,8(sp)
 400bd6c:	2021883a 	mov	r16,r4
 400bd70:	21000503 	ldbu	r4,20(r4)
 400bd74:	d9400115 	stw	r5,4(sp)
 400bd78:	400bab00 	call	400bab0 <_ZL21size_of_encoded_valueh>
 400bd7c:	d9400117 	ldw	r5,4(sp)
 400bd80:	1009883a 	mov	r4,r2
 400bd84:	400d3680 	call	400d368 <__mulsi3>
 400bd88:	81800317 	ldw	r6,12(r16)
 400bd8c:	81400217 	ldw	r5,8(r16)
 400bd90:	81000503 	ldbu	r4,20(r16)
 400bd94:	d80f883a 	mov	r7,sp
 400bd98:	308dc83a 	sub	r6,r6,r2
 400bd9c:	400bb540 	call	400bb54 <_ZL28read_encoded_value_with_basehjPKhPj>
 400bda0:	d8800017 	ldw	r2,0(sp)
 400bda4:	dfc00317 	ldw	ra,12(sp)
 400bda8:	dc000217 	ldw	r16,8(sp)
 400bdac:	dec00404 	addi	sp,sp,16
 400bdb0:	f800283a 	ret

0400bdb4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 400bdb4:	deffff04 	addi	sp,sp,-4
 400bdb8:	dfc00015 	stw	ra,0(sp)
 400bdbc:	20c03fcc 	andi	r3,r4,255
 400bdc0:	00803fc4 	movi	r2,255
 400bdc4:	18800e26 	beq	r3,r2,400be00 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
 400bdc8:	20801c0c 	andi	r2,r4,112
 400bdcc:	00c00804 	movi	r3,32
 400bdd0:	10c01726 	beq	r2,r3,400be30 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
 400bdd4:	18800e2e 	bgeu	r3,r2,400be10 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
 400bdd8:	00c01004 	movi	r3,64
 400bddc:	10c01026 	beq	r2,r3,400be20 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
 400bde0:	00c01404 	movi	r3,80
 400bde4:	10c00626 	beq	r2,r3,400be00 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
 400bde8:	00c00c04 	movi	r3,48
 400bdec:	10c00b1e 	bne	r2,r3,400be1c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
 400bdf0:	2809883a 	mov	r4,r5
 400bdf4:	dfc00017 	ldw	ra,0(sp)
 400bdf8:	dec00104 	addi	sp,sp,4
 400bdfc:	400e1a01 	jmpi	400e1a0 <_Unwind_GetDataRelBase>
 400be00:	0005883a 	mov	r2,zero
 400be04:	dfc00017 	ldw	ra,0(sp)
 400be08:	dec00104 	addi	sp,sp,4
 400be0c:	f800283a 	ret
 400be10:	103ffb26 	beq	r2,zero,400be00 <__alt_data_end+0xfc00be00>
 400be14:	00c00404 	movi	r3,16
 400be18:	10fff926 	beq	r2,r3,400be00 <__alt_data_end+0xfc00be00>
 400be1c:	400e4440 	call	400e444 <abort>
 400be20:	2809883a 	mov	r4,r5
 400be24:	dfc00017 	ldw	ra,0(sp)
 400be28:	dec00104 	addi	sp,sp,4
 400be2c:	400e1901 	jmpi	400e190 <_Unwind_GetRegionStart>
 400be30:	2809883a 	mov	r4,r5
 400be34:	dfc00017 	ldw	ra,0(sp)
 400be38:	dec00104 	addi	sp,sp,4
 400be3c:	400e1a81 	jmpi	400e1a8 <_Unwind_GetTextRelBase>

0400be40 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 400be40:	defffb04 	addi	sp,sp,-20
 400be44:	dcc00315 	stw	r19,12(sp)
 400be48:	dc400115 	stw	r17,4(sp)
 400be4c:	dc000015 	stw	r16,0(sp)
 400be50:	dfc00415 	stw	ra,16(sp)
 400be54:	dc800215 	stw	r18,8(sp)
 400be58:	2027883a 	mov	r19,r4
 400be5c:	2821883a 	mov	r16,r5
 400be60:	3023883a 	mov	r17,r6
 400be64:	20003f26 	beq	r4,zero,400bf64 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
 400be68:	400e1900 	call	400e190 <_Unwind_GetRegionStart>
 400be6c:	88800015 	stw	r2,0(r17)
 400be70:	84800003 	ldbu	r18,0(r16)
 400be74:	00c03fc4 	movi	r3,255
 400be78:	84000044 	addi	r16,r16,1
 400be7c:	90c03726 	beq	r18,r3,400bf5c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
 400be80:	980b883a 	mov	r5,r19
 400be84:	9009883a 	mov	r4,r18
 400be88:	400bdb40 	call	400bdb4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400be8c:	800d883a 	mov	r6,r16
 400be90:	89c00104 	addi	r7,r17,4
 400be94:	100b883a 	mov	r5,r2
 400be98:	9009883a 	mov	r4,r18
 400be9c:	400bb540 	call	400bb54 <_ZL28read_encoded_value_with_basehjPKhPj>
 400bea0:	1021883a 	mov	r16,r2
 400bea4:	80c00003 	ldbu	r3,0(r16)
 400bea8:	01003fc4 	movi	r4,255
 400beac:	80800044 	addi	r2,r16,1
 400beb0:	88c00505 	stb	r3,20(r17)
 400beb4:	18c03fcc 	andi	r3,r3,255
 400beb8:	19002c26 	beq	r3,r4,400bf6c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
 400bebc:	100f883a 	mov	r7,r2
 400bec0:	000d883a 	mov	r6,zero
 400bec4:	000b883a 	mov	r5,zero
 400bec8:	38c00003 	ldbu	r3,0(r7)
 400becc:	10800044 	addi	r2,r2,1
 400bed0:	100f883a 	mov	r7,r2
 400bed4:	19001fcc 	andi	r4,r3,127
 400bed8:	2148983a 	sll	r4,r4,r5
 400bedc:	18c03fcc 	andi	r3,r3,255
 400bee0:	18c0201c 	xori	r3,r3,128
 400bee4:	18ffe004 	addi	r3,r3,-128
 400bee8:	310cb03a 	or	r6,r6,r4
 400beec:	294001c4 	addi	r5,r5,7
 400bef0:	183ff516 	blt	r3,zero,400bec8 <__alt_data_end+0xfc00bec8>
 400bef4:	118d883a 	add	r6,r2,r6
 400bef8:	89800315 	stw	r6,12(r17)
 400befc:	10c00003 	ldbu	r3,0(r2)
 400bf00:	000d883a 	mov	r6,zero
 400bf04:	10800044 	addi	r2,r2,1
 400bf08:	88c00545 	stb	r3,21(r17)
 400bf0c:	000b883a 	mov	r5,zero
 400bf10:	10c00003 	ldbu	r3,0(r2)
 400bf14:	10800044 	addi	r2,r2,1
 400bf18:	19001fcc 	andi	r4,r3,127
 400bf1c:	2148983a 	sll	r4,r4,r5
 400bf20:	18c03fcc 	andi	r3,r3,255
 400bf24:	18c0201c 	xori	r3,r3,128
 400bf28:	18ffe004 	addi	r3,r3,-128
 400bf2c:	310cb03a 	or	r6,r6,r4
 400bf30:	294001c4 	addi	r5,r5,7
 400bf34:	183ff616 	blt	r3,zero,400bf10 <__alt_data_end+0xfc00bf10>
 400bf38:	118d883a 	add	r6,r2,r6
 400bf3c:	89800415 	stw	r6,16(r17)
 400bf40:	dfc00417 	ldw	ra,16(sp)
 400bf44:	dcc00317 	ldw	r19,12(sp)
 400bf48:	dc800217 	ldw	r18,8(sp)
 400bf4c:	dc400117 	ldw	r17,4(sp)
 400bf50:	dc000017 	ldw	r16,0(sp)
 400bf54:	dec00504 	addi	sp,sp,20
 400bf58:	f800283a 	ret
 400bf5c:	88800115 	stw	r2,4(r17)
 400bf60:	003fd006 	br	400bea4 <__alt_data_end+0xfc00bea4>
 400bf64:	0005883a 	mov	r2,zero
 400bf68:	003fc006 	br	400be6c <__alt_data_end+0xfc00be6c>
 400bf6c:	88000315 	stw	zero,12(r17)
 400bf70:	003fe206 	br	400befc <__alt_data_end+0xfc00befc>

0400bf74 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
 400bf74:	28800017 	ldw	r2,0(r5)
 400bf78:	30c00017 	ldw	r3,0(r6)
 400bf7c:	defffb04 	addi	sp,sp,-20
 400bf80:	10800217 	ldw	r2,8(r2)
 400bf84:	dc400315 	stw	r17,12(sp)
 400bf88:	dc000215 	stw	r16,8(sp)
 400bf8c:	d9400115 	stw	r5,4(sp)
 400bf90:	dfc00415 	stw	ra,16(sp)
 400bf94:	2021883a 	mov	r16,r4
 400bf98:	d8c00015 	stw	r3,0(sp)
 400bf9c:	2809883a 	mov	r4,r5
 400bfa0:	3023883a 	mov	r17,r6
 400bfa4:	103ee83a 	callr	r2
 400bfa8:	10803fcc 	andi	r2,r2,255
 400bfac:	d9400117 	ldw	r5,4(sp)
 400bfb0:	10000326 	beq	r2,zero,400bfc0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
 400bfb4:	d8800017 	ldw	r2,0(sp)
 400bfb8:	10800017 	ldw	r2,0(r2)
 400bfbc:	d8800015 	stw	r2,0(sp)
 400bfc0:	80800017 	ldw	r2,0(r16)
 400bfc4:	01c00044 	movi	r7,1
 400bfc8:	d80d883a 	mov	r6,sp
 400bfcc:	10800417 	ldw	r2,16(r2)
 400bfd0:	8009883a 	mov	r4,r16
 400bfd4:	103ee83a 	callr	r2
 400bfd8:	10c03fcc 	andi	r3,r2,255
 400bfdc:	18000226 	beq	r3,zero,400bfe8 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
 400bfe0:	d8c00017 	ldw	r3,0(sp)
 400bfe4:	88c00015 	stw	r3,0(r17)
 400bfe8:	dfc00417 	ldw	ra,16(sp)
 400bfec:	dc400317 	ldw	r17,12(sp)
 400bff0:	dc000217 	ldw	r16,8(sp)
 400bff4:	dec00504 	addi	sp,sp,20
 400bff8:	f800283a 	ret

0400bffc <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
 400bffc:	defff304 	addi	sp,sp,-52
 400c000:	dc800615 	stw	r18,24(sp)
 400c004:	3825d23a 	srai	r18,r7,8
 400c008:	dd000815 	stw	r20,32(sp)
 400c00c:	dcc00715 	stw	r19,28(sp)
 400c010:	dfc00c15 	stw	ra,48(sp)
 400c014:	ddc00b15 	stw	r23,44(sp)
 400c018:	dd800a15 	stw	r22,40(sp)
 400c01c:	dd400915 	stw	r21,36(sp)
 400c020:	dc400515 	stw	r17,20(sp)
 400c024:	dc000415 	stw	r16,16(sp)
 400c028:	d9400215 	stw	r5,8(sp)
 400c02c:	3827883a 	mov	r19,r7
 400c030:	2029883a 	mov	r20,r4
 400c034:	9000010e 	bge	r18,zero,400c03c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x40>
 400c038:	04a5c83a 	sub	r18,zero,r18
 400c03c:	000b883a 	mov	r5,zero
 400c040:	01000144 	movi	r4,5
 400c044:	d9800315 	stw	r6,12(sp)
 400c048:	400bdb40 	call	400bdb4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400c04c:	d9800317 	ldw	r6,12(sp)
 400c050:	d9c00104 	addi	r7,sp,4
 400c054:	100b883a 	mov	r5,r2
 400c058:	01000144 	movi	r4,5
 400c05c:	400bb540 	call	400bb54 <_ZL28read_encoded_value_with_basehjPKhPj>
 400c060:	017ffe44 	movi	r5,-7
 400c064:	1009883a 	mov	r4,r2
 400c068:	1021883a 	mov	r16,r2
 400c06c:	400d3680 	call	400d368 <__mulsi3>
 400c070:	102d883a 	mov	r22,r2
 400c074:	0023883a 	mov	r17,zero
 400c078:	85400003 	ldbu	r21,0(r16)
 400c07c:	8009883a 	mov	r4,r16
 400c080:	014001c4 	movi	r5,7
 400c084:	400d3680 	call	400d368 <__mulsi3>
 400c088:	a8c01fcc 	andi	r3,r21,127
 400c08c:	1585883a 	add	r2,r2,r22
 400c090:	1886983a 	sll	r3,r3,r2
 400c094:	ad403fcc 	andi	r21,r21,255
 400c098:	ad40201c 	xori	r21,r21,128
 400c09c:	ad7fe004 	addi	r21,r21,-128
 400c0a0:	84000044 	addi	r16,r16,1
 400c0a4:	88e2b03a 	or	r17,r17,r3
 400c0a8:	a83ff316 	blt	r21,zero,400c078 <__alt_data_end+0xfc00c078>
 400c0ac:	8461883a 	add	r16,r16,r17
 400c0b0:	017ffe44 	movi	r5,-7
 400c0b4:	8009883a 	mov	r4,r16
 400c0b8:	400d3680 	call	400d368 <__mulsi3>
 400c0bc:	102d883a 	mov	r22,r2
 400c0c0:	002b883a 	mov	r21,zero
 400c0c4:	84400003 	ldbu	r17,0(r16)
 400c0c8:	8009883a 	mov	r4,r16
 400c0cc:	014001c4 	movi	r5,7
 400c0d0:	400d3680 	call	400d368 <__mulsi3>
 400c0d4:	88c01fcc 	andi	r3,r17,127
 400c0d8:	1585883a 	add	r2,r2,r22
 400c0dc:	1886983a 	sll	r3,r3,r2
 400c0e0:	8c403fcc 	andi	r17,r17,255
 400c0e4:	8c40201c 	xori	r17,r17,128
 400c0e8:	8c7fe004 	addi	r17,r17,-128
 400c0ec:	84000044 	addi	r16,r16,1
 400c0f0:	a8eab03a 	or	r21,r21,r3
 400c0f4:	883ff316 	blt	r17,zero,400c0c4 <__alt_data_end+0xfc00c0c4>
 400c0f8:	94403fcc 	andi	r17,r18,255
 400c0fc:	8c7fffc4 	addi	r17,r17,-1
 400c100:	8463883a 	add	r17,r16,r17
 400c104:	ad4000c4 	addi	r21,r21,3
 400c108:	00bfff04 	movi	r2,-4
 400c10c:	ac21883a 	add	r16,r21,r16
 400c110:	017ffe44 	movi	r5,-7
 400c114:	8809883a 	mov	r4,r17
 400c118:	80a0703a 	and	r16,r16,r2
 400c11c:	400d3680 	call	400d368 <__mulsi3>
 400c120:	0025883a 	mov	r18,zero
 400c124:	102f883a 	mov	r23,r2
 400c128:	8d800003 	ldbu	r22,0(r17)
 400c12c:	8809883a 	mov	r4,r17
 400c130:	014001c4 	movi	r5,7
 400c134:	400d3680 	call	400d368 <__mulsi3>
 400c138:	b0c01fcc 	andi	r3,r22,127
 400c13c:	15c5883a 	add	r2,r2,r23
 400c140:	1886983a 	sll	r3,r3,r2
 400c144:	b5803fcc 	andi	r22,r22,255
 400c148:	b580201c 	xori	r22,r22,128
 400c14c:	8d400044 	addi	r21,r17,1
 400c150:	b5bfe004 	addi	r22,r22,-128
 400c154:	90e4b03a 	or	r18,r18,r3
 400c158:	a823883a 	mov	r17,r21
 400c15c:	b03ff216 	blt	r22,zero,400c128 <__alt_data_end+0xfc00c128>
 400c160:	9cc03fcc 	andi	r19,r19,255
 400c164:	90002426 	beq	r18,zero,400c1f8 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1fc>
 400c168:	9809883a 	mov	r4,r19
 400c16c:	400bab00 	call	400bab0 <_ZL21size_of_encoded_valueh>
 400c170:	100b883a 	mov	r5,r2
 400c174:	913fffc4 	addi	r4,r18,-1
 400c178:	400d3680 	call	400d368 <__mulsi3>
 400c17c:	d9400d17 	ldw	r5,52(sp)
 400c180:	d80f883a 	mov	r7,sp
 400c184:	9809883a 	mov	r4,r19
 400c188:	140d883a 	add	r6,r2,r16
 400c18c:	400bb540 	call	400bb54 <_ZL28read_encoded_value_with_basehjPKhPj>
 400c190:	d9000017 	ldw	r4,0(sp)
 400c194:	d9800204 	addi	r6,sp,8
 400c198:	a00b883a 	mov	r5,r20
 400c19c:	400bf740 	call	400bf74 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 400c1a0:	10c03fcc 	andi	r3,r2,255
 400c1a4:	1800151e 	bne	r3,zero,400c1fc <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x200>
 400c1a8:	a809883a 	mov	r4,r21
 400c1ac:	017ffe44 	movi	r5,-7
 400c1b0:	400d3680 	call	400d368 <__mulsi3>
 400c1b4:	102d883a 	mov	r22,r2
 400c1b8:	a809883a 	mov	r4,r21
 400c1bc:	0025883a 	mov	r18,zero
 400c1c0:	24400003 	ldbu	r17,0(r4)
 400c1c4:	014001c4 	movi	r5,7
 400c1c8:	400d3680 	call	400d368 <__mulsi3>
 400c1cc:	88c01fcc 	andi	r3,r17,127
 400c1d0:	1585883a 	add	r2,r2,r22
 400c1d4:	1886983a 	sll	r3,r3,r2
 400c1d8:	8c403fcc 	andi	r17,r17,255
 400c1dc:	8c40201c 	xori	r17,r17,128
 400c1e0:	ad400044 	addi	r21,r21,1
 400c1e4:	8c7fe004 	addi	r17,r17,-128
 400c1e8:	90e4b03a 	or	r18,r18,r3
 400c1ec:	a809883a 	mov	r4,r21
 400c1f0:	883ff316 	blt	r17,zero,400c1c0 <__alt_data_end+0xfc00c1c0>
 400c1f4:	003fdb06 	br	400c164 <__alt_data_end+0xfc00c164>
 400c1f8:	0005883a 	mov	r2,zero
 400c1fc:	dfc00c17 	ldw	ra,48(sp)
 400c200:	ddc00b17 	ldw	r23,44(sp)
 400c204:	dd800a17 	ldw	r22,40(sp)
 400c208:	dd400917 	ldw	r21,36(sp)
 400c20c:	dd000817 	ldw	r20,32(sp)
 400c210:	dcc00717 	ldw	r19,28(sp)
 400c214:	dc800617 	ldw	r18,24(sp)
 400c218:	dc400517 	ldw	r17,20(sp)
 400c21c:	dc000417 	ldw	r16,16(sp)
 400c220:	dec00d04 	addi	sp,sp,52
 400c224:	f800283a 	ret

0400c228 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
 400c228:	defffb04 	addi	sp,sp,-20
 400c22c:	dc000115 	stw	r16,4(sp)
 400c230:	24000317 	ldw	r16,12(r4)
 400c234:	01ce303a 	nor	r7,zero,r7
 400c238:	dc800315 	stw	r18,12(sp)
 400c23c:	dc400215 	stw	r17,8(sp)
 400c240:	dfc00415 	stw	ra,16(sp)
 400c244:	2023883a 	mov	r17,r4
 400c248:	2825883a 	mov	r18,r5
 400c24c:	d9800015 	stw	r6,0(sp)
 400c250:	81e1883a 	add	r16,r16,r7
 400c254:	800d883a 	mov	r6,r16
 400c258:	000b883a 	mov	r5,zero
 400c25c:	0009883a 	mov	r4,zero
 400c260:	30800003 	ldbu	r2,0(r6)
 400c264:	84000044 	addi	r16,r16,1
 400c268:	800d883a 	mov	r6,r16
 400c26c:	10c01fcc 	andi	r3,r2,127
 400c270:	1906983a 	sll	r3,r3,r4
 400c274:	10803fcc 	andi	r2,r2,255
 400c278:	1080201c 	xori	r2,r2,128
 400c27c:	10bfe004 	addi	r2,r2,-128
 400c280:	28cab03a 	or	r5,r5,r3
 400c284:	210001c4 	addi	r4,r4,7
 400c288:	103ff516 	blt	r2,zero,400c260 <__alt_data_end+0xfc00c260>
 400c28c:	28000e26 	beq	r5,zero,400c2c8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
 400c290:	8809883a 	mov	r4,r17
 400c294:	400bd600 	call	400bd60 <_ZL15get_ttype_entryP16lsda_header_infom>
 400c298:	d80d883a 	mov	r6,sp
 400c29c:	900b883a 	mov	r5,r18
 400c2a0:	1009883a 	mov	r4,r2
 400c2a4:	400bf740 	call	400bf74 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 400c2a8:	10c03fcc 	andi	r3,r2,255
 400c2ac:	183fe926 	beq	r3,zero,400c254 <__alt_data_end+0xfc00c254>
 400c2b0:	dfc00417 	ldw	ra,16(sp)
 400c2b4:	dc800317 	ldw	r18,12(sp)
 400c2b8:	dc400217 	ldw	r17,8(sp)
 400c2bc:	dc000117 	ldw	r16,4(sp)
 400c2c0:	dec00504 	addi	sp,sp,20
 400c2c4:	f800283a 	ret
 400c2c8:	0005883a 	mov	r2,zero
 400c2cc:	003ff806 	br	400c2b0 <__alt_data_end+0xfc00c2b0>

0400c2d0 <__gxx_personality_sj0>:
 400c2d0:	00810074 	movhi	r2,1025
 400c2d4:	deffdd04 	addi	sp,sp,-140
 400c2d8:	10b0b404 	addi	r2,r2,-15664
 400c2dc:	d8800e15 	stw	r2,56(sp)
 400c2e0:	008100b4 	movhi	r2,1026
 400c2e4:	10809c04 	addi	r2,r2,624
 400c2e8:	d8800f15 	stw	r2,60(sp)
 400c2ec:	00810074 	movhi	r2,1025
 400c2f0:	10b22a04 	addi	r2,r2,-14168
 400c2f4:	d9001515 	stw	r4,84(sp)
 400c2f8:	d9000804 	addi	r4,sp,32
 400c2fc:	d8801115 	stw	r2,68(sp)
 400c300:	dfc02215 	stw	ra,136(sp)
 400c304:	df002115 	stw	fp,132(sp)
 400c308:	dec01015 	stw	sp,64(sp)
 400c30c:	dec01215 	stw	sp,72(sp)
 400c310:	d9401915 	stw	r5,100(sp)
 400c314:	d9801615 	stw	r6,88(sp)
 400c318:	d9c01715 	stw	r7,92(sp)
 400c31c:	400e0c80 	call	400e0c8 <_Unwind_SjLj_Register>
 400c320:	d8c01517 	ldw	r3,84(sp)
 400c324:	d8000715 	stw	zero,28(sp)
 400c328:	d8000615 	stw	zero,24(sp)
 400c32c:	00800044 	movi	r2,1
 400c330:	18800926 	beq	r3,r2,400c358 <__gxx_personality_sj0+0x88>
 400c334:	01c000c4 	movi	r7,3
 400c338:	d9c01515 	stw	r7,84(sp)
 400c33c:	d9000804 	addi	r4,sp,32
 400c340:	400e0e00 	call	400e0e0 <_Unwind_SjLj_Unregister>
 400c344:	d8801517 	ldw	r2,84(sp)
 400c348:	dfc02217 	ldw	ra,136(sp)
 400c34c:	df002117 	ldw	fp,132(sp)
 400c350:	dec02304 	addi	sp,sp,140
 400c354:	f800283a 	ret
 400c358:	d9001617 	ldw	r4,88(sp)
 400c35c:	00af3574 	movhi	r2,48341
 400c360:	d9c01717 	ldw	r7,92(sp)
 400c364:	10b54004 	addi	r2,r2,-11008
 400c368:	00ee2cb4 	movhi	r3,47282
 400c36c:	2085883a 	add	r2,r4,r2
 400c370:	18eaaf04 	addi	r3,r3,-21828
 400c374:	d8801b15 	stw	r2,108(sp)
 400c378:	38c7883a 	add	r3,r7,r3
 400c37c:	1105803a 	cmpltu	r2,r2,r4
 400c380:	10c7883a 	add	r3,r2,r3
 400c384:	d8c01c15 	stw	r3,112(sp)
 400c388:	d8c01917 	ldw	r3,100(sp)
 400c38c:	00800184 	movi	r2,6
 400c390:	18805426 	beq	r3,r2,400c4e4 <__gxx_personality_sj0+0x214>
 400c394:	d9002417 	ldw	r4,144(sp)
 400c398:	00bfffc4 	movi	r2,-1
 400c39c:	d8800915 	stw	r2,36(sp)
 400c3a0:	400e1840 	call	400e184 <_Unwind_GetLanguageSpecificData>
 400c3a4:	d8801a15 	stw	r2,104(sp)
 400c3a8:	1000c926 	beq	r2,zero,400c6d0 <__gxx_personality_sj0+0x400>
 400c3ac:	d9002417 	ldw	r4,144(sp)
 400c3b0:	d80d883a 	mov	r6,sp
 400c3b4:	100b883a 	mov	r5,r2
 400c3b8:	400be400 	call	400be40 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 400c3bc:	d9402417 	ldw	r5,144(sp)
 400c3c0:	d9000503 	ldbu	r4,20(sp)
 400c3c4:	d8801515 	stw	r2,84(sp)
 400c3c8:	400bdb40 	call	400bdb4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400c3cc:	d9002417 	ldw	r4,144(sp)
 400c3d0:	d9400604 	addi	r5,sp,24
 400c3d4:	d8800215 	stw	r2,8(sp)
 400c3d8:	400e1540 	call	400e154 <_Unwind_GetIPInfo>
 400c3dc:	d8c00617 	ldw	r3,24(sp)
 400c3e0:	18006126 	beq	r3,zero,400c568 <__gxx_personality_sj0+0x298>
 400c3e4:	1000ba16 	blt	r2,zero,400c6d0 <__gxx_personality_sj0+0x400>
 400c3e8:	10002f1e 	bne	r2,zero,400c4a8 <__gxx_personality_sj0+0x1d8>
 400c3ec:	d8001515 	stw	zero,84(sp)
 400c3f0:	d8001f15 	stw	zero,124(sp)
 400c3f4:	d8001815 	stw	zero,96(sp)
 400c3f8:	00c00044 	movi	r3,1
 400c3fc:	d9001917 	ldw	r4,100(sp)
 400c400:	2080004c 	andi	r2,r4,1
 400c404:	1000b51e 	bne	r2,zero,400c6dc <__gxx_personality_sj0+0x40c>
 400c408:	d9001917 	ldw	r4,100(sp)
 400c40c:	2080020c 	andi	r2,r4,8
 400c410:	1000b71e 	bne	r2,zero,400c6f0 <__gxx_personality_sj0+0x420>
 400c414:	d9c01c17 	ldw	r7,112(sp)
 400c418:	3800b826 	beq	r7,zero,400c6fc <__gxx_personality_sj0+0x42c>
 400c41c:	00800044 	movi	r2,1
 400c420:	1880b526 	beq	r3,r2,400c6f8 <__gxx_personality_sj0+0x428>
 400c424:	d9c01517 	ldw	r7,84(sp)
 400c428:	3800f516 	blt	r7,zero,400c800 <__gxx_personality_sj0+0x530>
 400c42c:	d9002417 	ldw	r4,144(sp)
 400c430:	d9802317 	ldw	r6,140(sp)
 400c434:	00bfffc4 	movi	r2,-1
 400c438:	000b883a 	mov	r5,zero
 400c43c:	d8800915 	stw	r2,36(sp)
 400c440:	400e1280 	call	400e128 <_Unwind_SetGR>
 400c444:	d9801517 	ldw	r6,84(sp)
 400c448:	d9002417 	ldw	r4,144(sp)
 400c44c:	01400044 	movi	r5,1
 400c450:	400e1280 	call	400e128 <_Unwind_SetGR>
 400c454:	d9002417 	ldw	r4,144(sp)
 400c458:	d9401f17 	ldw	r5,124(sp)
 400c45c:	400e1740 	call	400e174 <_Unwind_SetIP>
 400c460:	010001c4 	movi	r4,7
 400c464:	d9001515 	stw	r4,84(sp)
 400c468:	003fb406 	br	400c33c <__alt_data_end+0xfc00c33c>
 400c46c:	000f883a 	mov	r7,zero
 400c470:	000d883a 	mov	r6,zero
 400c474:	19000003 	ldbu	r4,0(r3)
 400c478:	18c00044 	addi	r3,r3,1
 400c47c:	d8c01515 	stw	r3,84(sp)
 400c480:	21401fcc 	andi	r5,r4,127
 400c484:	298a983a 	sll	r5,r5,r6
 400c488:	21003fcc 	andi	r4,r4,255
 400c48c:	2100201c 	xori	r4,r4,128
 400c490:	213fe004 	addi	r4,r4,-128
 400c494:	394eb03a 	or	r7,r7,r5
 400c498:	318001c4 	addi	r6,r6,7
 400c49c:	203ff516 	blt	r4,zero,400c474 <__alt_data_end+0xfc00c474>
 400c4a0:	10bfffc4 	addi	r2,r2,-1
 400c4a4:	10003226 	beq	r2,zero,400c570 <__gxx_personality_sj0+0x2a0>
 400c4a8:	d9c01517 	ldw	r7,84(sp)
 400c4ac:	0011883a 	mov	r8,zero
 400c4b0:	000d883a 	mov	r6,zero
 400c4b4:	39000003 	ldbu	r4,0(r7)
 400c4b8:	38c00044 	addi	r3,r7,1
 400c4bc:	180f883a 	mov	r7,r3
 400c4c0:	21401fcc 	andi	r5,r4,127
 400c4c4:	298a983a 	sll	r5,r5,r6
 400c4c8:	21003fcc 	andi	r4,r4,255
 400c4cc:	2100201c 	xori	r4,r4,128
 400c4d0:	213fe004 	addi	r4,r4,-128
 400c4d4:	4150b03a 	or	r8,r8,r5
 400c4d8:	318001c4 	addi	r6,r6,7
 400c4dc:	203ff516 	blt	r4,zero,400c4b4 <__alt_data_end+0xfc00c4b4>
 400c4e0:	003fe206 	br	400c46c <__alt_data_end+0xfc00c46c>
 400c4e4:	d9001c17 	ldw	r4,112(sp)
 400c4e8:	203faa1e 	bne	r4,zero,400c394 <__alt_data_end+0xfc00c394>
 400c4ec:	d9c01517 	ldw	r7,84(sp)
 400c4f0:	d8801b17 	ldw	r2,108(sp)
 400c4f4:	38bfa736 	bltu	r7,r2,400c394 <__alt_data_end+0xfc00c394>
 400c4f8:	d8c02317 	ldw	r3,140(sp)
 400c4fc:	18fffe17 	ldw	r3,-8(r3)
 400c500:	d8c01f15 	stw	r3,124(sp)
 400c504:	18008226 	beq	r3,zero,400c710 <__gxx_personality_sj0+0x440>
 400c508:	d9002317 	ldw	r4,140(sp)
 400c50c:	d9c02317 	ldw	r7,140(sp)
 400c510:	213ffb17 	ldw	r4,-20(r4)
 400c514:	39fffd17 	ldw	r7,-12(r7)
 400c518:	d9001515 	stw	r4,84(sp)
 400c51c:	d9c01a15 	stw	r7,104(sp)
 400c520:	d8801517 	ldw	r2,84(sp)
 400c524:	103fc10e 	bge	r2,zero,400c42c <__alt_data_end+0xfc00c42c>
 400c528:	d9002417 	ldw	r4,144(sp)
 400c52c:	d9401a17 	ldw	r5,104(sp)
 400c530:	d80d883a 	mov	r6,sp
 400c534:	00bfffc4 	movi	r2,-1
 400c538:	d8800915 	stw	r2,36(sp)
 400c53c:	400be400 	call	400be40 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 400c540:	d9402417 	ldw	r5,144(sp)
 400c544:	d9000503 	ldbu	r4,20(sp)
 400c548:	400bdb40 	call	400bdb4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400c54c:	d9000503 	ldbu	r4,20(sp)
 400c550:	d9402417 	ldw	r5,144(sp)
 400c554:	d8800215 	stw	r2,8(sp)
 400c558:	400bdb40 	call	400bdb4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 400c55c:	d8c02317 	ldw	r3,140(sp)
 400c560:	18bffe15 	stw	r2,-8(r3)
 400c564:	003fb106 	br	400c42c <__alt_data_end+0xfc00c42c>
 400c568:	10bfffc4 	addi	r2,r2,-1
 400c56c:	003f9d06 	br	400c3e4 <__alt_data_end+0xfc00c3e4>
 400c570:	42000044 	addi	r8,r8,1
 400c574:	da001f15 	stw	r8,124(sp)
 400c578:	38005326 	beq	r7,zero,400c6c8 <__gxx_personality_sj0+0x3f8>
 400c57c:	d8800417 	ldw	r2,16(sp)
 400c580:	39ffffc4 	addi	r7,r7,-1
 400c584:	11c5883a 	add	r2,r2,r7
 400c588:	d8801815 	stw	r2,96(sp)
 400c58c:	40005026 	beq	r8,zero,400c6d0 <__gxx_personality_sj0+0x400>
 400c590:	10007426 	beq	r2,zero,400c764 <__gxx_personality_sj0+0x494>
 400c594:	d8801917 	ldw	r2,100(sp)
 400c598:	1080020c 	andi	r2,r2,8
 400c59c:	d8802015 	stw	r2,128(sp)
 400c5a0:	1000a21e 	bne	r2,zero,400c82c <__gxx_personality_sj0+0x55c>
 400c5a4:	d8c01c17 	ldw	r3,112(sp)
 400c5a8:	1800b026 	beq	r3,zero,400c86c <__gxx_personality_sj0+0x59c>
 400c5ac:	01c100f4 	movhi	r7,1027
 400c5b0:	39e98504 	addi	r7,r7,-23020
 400c5b4:	d9c01e15 	stw	r7,120(sp)
 400c5b8:	d8001d05 	stb	zero,116(sp)
 400c5bc:	d8c01817 	ldw	r3,96(sp)
 400c5c0:	d8001515 	stw	zero,84(sp)
 400c5c4:	0009883a 	mov	r4,zero
 400c5c8:	19400003 	ldbu	r5,0(r3)
 400c5cc:	18800044 	addi	r2,r3,1
 400c5d0:	d9c01517 	ldw	r7,84(sp)
 400c5d4:	28c01fcc 	andi	r3,r5,127
 400c5d8:	1906983a 	sll	r3,r3,r4
 400c5dc:	29803fcc 	andi	r6,r5,255
 400c5e0:	3180201c 	xori	r6,r6,128
 400c5e4:	38ceb03a 	or	r7,r7,r3
 400c5e8:	d8801715 	stw	r2,92(sp)
 400c5ec:	31bfe004 	addi	r6,r6,-128
 400c5f0:	d9c01515 	stw	r7,84(sp)
 400c5f4:	210001c4 	addi	r4,r4,7
 400c5f8:	1007883a 	mov	r3,r2
 400c5fc:	303ff216 	blt	r6,zero,400c5c8 <__alt_data_end+0xfc00c5c8>
 400c600:	00c007c4 	movi	r3,31
 400c604:	19000836 	bltu	r3,r4,400c628 <__gxx_personality_sj0+0x358>
 400c608:	2940100c 	andi	r5,r5,64
 400c60c:	28000626 	beq	r5,zero,400c628 <__gxx_personality_sj0+0x358>
 400c610:	01c00044 	movi	r7,1
 400c614:	3908983a 	sll	r4,r7,r4
 400c618:	d8c01517 	ldw	r3,84(sp)
 400c61c:	0109c83a 	sub	r4,zero,r4
 400c620:	1906b03a 	or	r3,r3,r4
 400c624:	d8c01515 	stw	r3,84(sp)
 400c628:	d8001615 	stw	zero,88(sp)
 400c62c:	0009883a 	mov	r4,zero
 400c630:	11400003 	ldbu	r5,0(r2)
 400c634:	d9c01617 	ldw	r7,88(sp)
 400c638:	10800044 	addi	r2,r2,1
 400c63c:	28c01fcc 	andi	r3,r5,127
 400c640:	1906983a 	sll	r3,r3,r4
 400c644:	29803fcc 	andi	r6,r5,255
 400c648:	3180201c 	xori	r6,r6,128
 400c64c:	38ceb03a 	or	r7,r7,r3
 400c650:	31bfe004 	addi	r6,r6,-128
 400c654:	d9c01615 	stw	r7,88(sp)
 400c658:	210001c4 	addi	r4,r4,7
 400c65c:	303ff416 	blt	r6,zero,400c630 <__alt_data_end+0xfc00c630>
 400c660:	008007c4 	movi	r2,31
 400c664:	11000736 	bltu	r2,r4,400c684 <__gxx_personality_sj0+0x3b4>
 400c668:	2940100c 	andi	r5,r5,64
 400c66c:	28000526 	beq	r5,zero,400c684 <__gxx_personality_sj0+0x3b4>
 400c670:	00c00044 	movi	r3,1
 400c674:	1908983a 	sll	r4,r3,r4
 400c678:	0109c83a 	sub	r4,zero,r4
 400c67c:	390eb03a 	or	r7,r7,r4
 400c680:	d9c01615 	stw	r7,88(sp)
 400c684:	d9001517 	ldw	r4,84(sp)
 400c688:	20003c26 	beq	r4,zero,400c77c <__gxx_personality_sj0+0x4ac>
 400c68c:	01003e0e 	bge	zero,r4,400c788 <__gxx_personality_sj0+0x4b8>
 400c690:	01ffffc4 	movi	r7,-1
 400c694:	200b883a 	mov	r5,r4
 400c698:	d809883a 	mov	r4,sp
 400c69c:	d9c00915 	stw	r7,36(sp)
 400c6a0:	400bd600 	call	400bd60 <_ZL15get_ttype_entryP16lsda_header_infom>
 400c6a4:	10005f26 	beq	r2,zero,400c824 <__gxx_personality_sj0+0x554>
 400c6a8:	d8c01e17 	ldw	r3,120(sp)
 400c6ac:	1800571e 	bne	r3,zero,400c80c <__gxx_personality_sj0+0x53c>
 400c6b0:	d9001617 	ldw	r4,88(sp)
 400c6b4:	20002926 	beq	r4,zero,400c75c <__gxx_personality_sj0+0x48c>
 400c6b8:	d9c01717 	ldw	r7,92(sp)
 400c6bc:	390f883a 	add	r7,r7,r4
 400c6c0:	d9c01815 	stw	r7,96(sp)
 400c6c4:	003fbd06 	br	400c5bc <__alt_data_end+0xfc00c5bc>
 400c6c8:	d8c01f17 	ldw	r3,124(sp)
 400c6cc:	1800251e 	bne	r3,zero,400c764 <__gxx_personality_sj0+0x494>
 400c6d0:	01000204 	movi	r4,8
 400c6d4:	d9001515 	stw	r4,84(sp)
 400c6d8:	003f1806 	br	400c33c <__alt_data_end+0xfc00c33c>
 400c6dc:	d8801c17 	ldw	r2,112(sp)
 400c6e0:	10000d26 	beq	r2,zero,400c718 <__gxx_personality_sj0+0x448>
 400c6e4:	00800184 	movi	r2,6
 400c6e8:	d8801515 	stw	r2,84(sp)
 400c6ec:	003f1306 	br	400c33c <__alt_data_end+0xfc00c33c>
 400c6f0:	00800044 	movi	r2,1
 400c6f4:	18bf4d1e 	bne	r3,r2,400c42c <__alt_data_end+0xfc00c42c>
 400c6f8:	400ba280 	call	400ba28 <_ZSt9terminatev>
 400c6fc:	d9001b17 	ldw	r4,108(sp)
 400c700:	00800044 	movi	r2,1
 400c704:	113f4536 	bltu	r2,r4,400c41c <__alt_data_end+0xfc00c41c>
 400c708:	00800044 	movi	r2,1
 400c70c:	18bf841e 	bne	r3,r2,400c520 <__alt_data_end+0xfc00c520>
 400c710:	d9002317 	ldw	r4,140(sp)
 400c714:	400d0ac0 	call	400d0ac <__cxa_call_terminate>
 400c718:	d8c01b17 	ldw	r3,108(sp)
 400c71c:	00800044 	movi	r2,1
 400c720:	10fff036 	bltu	r2,r3,400c6e4 <__alt_data_end+0xfc00c6e4>
 400c724:	d9002317 	ldw	r4,140(sp)
 400c728:	d8801817 	ldw	r2,96(sp)
 400c72c:	d9c01517 	ldw	r7,84(sp)
 400c730:	d8c01a17 	ldw	r3,104(sp)
 400c734:	20bffc15 	stw	r2,-16(r4)
 400c738:	d8800717 	ldw	r2,28(sp)
 400c73c:	21fffb15 	stw	r7,-20(r4)
 400c740:	d9c01f17 	ldw	r7,124(sp)
 400c744:	20bfff15 	stw	r2,-4(r4)
 400c748:	00800184 	movi	r2,6
 400c74c:	20fffd15 	stw	r3,-12(r4)
 400c750:	21fffe15 	stw	r7,-8(r4)
 400c754:	d8801515 	stw	r2,84(sp)
 400c758:	003ef806 	br	400c33c <__alt_data_end+0xfc00c33c>
 400c75c:	d8801d03 	ldbu	r2,116(sp)
 400c760:	103fdb26 	beq	r2,zero,400c6d0 <__alt_data_end+0xfc00c6d0>
 400c764:	d8c01917 	ldw	r3,100(sp)
 400c768:	1880004c 	andi	r2,r3,1
 400c76c:	103fd81e 	bne	r2,zero,400c6d0 <__alt_data_end+0xfc00c6d0>
 400c770:	d8001515 	stw	zero,84(sp)
 400c774:	00c00084 	movi	r3,2
 400c778:	003f2306 	br	400c408 <__alt_data_end+0xfc00c408>
 400c77c:	00c00044 	movi	r3,1
 400c780:	d8c01d05 	stb	r3,116(sp)
 400c784:	003fca06 	br	400c6b0 <__alt_data_end+0xfc00c6b0>
 400c788:	d9001e17 	ldw	r4,120(sp)
 400c78c:	20000426 	beq	r4,zero,400c7a0 <__gxx_personality_sj0+0x4d0>
 400c790:	d9c02017 	ldw	r7,128(sp)
 400c794:	3800021e 	bne	r7,zero,400c7a0 <__gxx_personality_sj0+0x4d0>
 400c798:	d8801c17 	ldw	r2,112(sp)
 400c79c:	10002726 	beq	r2,zero,400c83c <__gxx_personality_sj0+0x56c>
 400c7a0:	d8801517 	ldw	r2,84(sp)
 400c7a4:	000d883a 	mov	r6,zero
 400c7a8:	000b883a 	mov	r5,zero
 400c7ac:	0088303a 	nor	r4,zero,r2
 400c7b0:	d8800317 	ldw	r2,12(sp)
 400c7b4:	1109883a 	add	r4,r2,r4
 400c7b8:	20800003 	ldbu	r2,0(r4)
 400c7bc:	21000044 	addi	r4,r4,1
 400c7c0:	10c01fcc 	andi	r3,r2,127
 400c7c4:	1946983a 	sll	r3,r3,r5
 400c7c8:	10803fcc 	andi	r2,r2,255
 400c7cc:	1080201c 	xori	r2,r2,128
 400c7d0:	10bfe004 	addi	r2,r2,-128
 400c7d4:	30ccb03a 	or	r6,r6,r3
 400c7d8:	294001c4 	addi	r5,r5,7
 400c7dc:	103ff616 	blt	r2,zero,400c7b8 <__alt_data_end+0xfc00c7b8>
 400c7e0:	3005003a 	cmpeq	r2,r6,zero
 400c7e4:	10803fcc 	andi	r2,r2,255
 400c7e8:	103fb126 	beq	r2,zero,400c6b0 <__alt_data_end+0xfc00c6b0>
 400c7ec:	d9c01917 	ldw	r7,100(sp)
 400c7f0:	3880004c 	andi	r2,r7,1
 400c7f4:	103fb91e 	bne	r2,zero,400c6dc <__alt_data_end+0xfc00c6dc>
 400c7f8:	d8802017 	ldw	r2,128(sp)
 400c7fc:	10002d26 	beq	r2,zero,400c8b4 <__gxx_personality_sj0+0x5e4>
 400c800:	00800044 	movi	r2,1
 400c804:	d8800915 	stw	r2,36(sp)
 400c808:	400ba500 	call	400ba50 <_ZSt10unexpectedv>
 400c80c:	d9800704 	addi	r6,sp,28
 400c810:	180b883a 	mov	r5,r3
 400c814:	1009883a 	mov	r4,r2
 400c818:	400bf740 	call	400bf74 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 400c81c:	10803fcc 	andi	r2,r2,255
 400c820:	103fa326 	beq	r2,zero,400c6b0 <__alt_data_end+0xfc00c6b0>
 400c824:	00c000c4 	movi	r3,3
 400c828:	003ef406 	br	400c3fc <__alt_data_end+0xfc00c3fc>
 400c82c:	010100f4 	movhi	r4,1027
 400c830:	21298304 	addi	r4,r4,-23028
 400c834:	d9001e15 	stw	r4,120(sp)
 400c838:	003f5f06 	br	400c5b8 <__alt_data_end+0xfc00c5b8>
 400c83c:	d9001b17 	ldw	r4,108(sp)
 400c840:	00c00044 	movi	r3,1
 400c844:	193fd636 	bltu	r3,r4,400c7a0 <__alt_data_end+0xfc00c7a0>
 400c848:	01ffffc4 	movi	r7,-1
 400c84c:	d9c00915 	stw	r7,36(sp)
 400c850:	d9800717 	ldw	r6,28(sp)
 400c854:	d9c01517 	ldw	r7,84(sp)
 400c858:	d9401e17 	ldw	r5,120(sp)
 400c85c:	d809883a 	mov	r4,sp
 400c860:	400c2280 	call	400c228 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 400c864:	1080005c 	xori	r2,r2,1
 400c868:	003fde06 	br	400c7e4 <__alt_data_end+0xfc00c7e4>
 400c86c:	d9001b17 	ldw	r4,108(sp)
 400c870:	00800044 	movi	r2,1
 400c874:	113f4d36 	bltu	r2,r4,400c5ac <__alt_data_end+0xfc00c5ac>
 400c878:	d9c02317 	ldw	r7,140(sp)
 400c87c:	38800017 	ldw	r2,0(r7)
 400c880:	1080004c 	andi	r2,r2,1
 400c884:	1000061e 	bne	r2,zero,400c8a0 <__gxx_personality_sj0+0x5d0>
 400c888:	d8c02317 	ldw	r3,140(sp)
 400c88c:	18800504 	addi	r2,r3,20
 400c890:	d8800715 	stw	r2,28(sp)
 400c894:	10bff017 	ldw	r2,-64(r2)
 400c898:	d8801e15 	stw	r2,120(sp)
 400c89c:	003f4606 	br	400c5b8 <__alt_data_end+0xfc00c5b8>
 400c8a0:	38bff517 	ldw	r2,-44(r7)
 400c8a4:	003ffa06 	br	400c890 <__alt_data_end+0xfc00c890>
 400c8a8:	d9000a17 	ldw	r4,40(sp)
 400c8ac:	400cc600 	call	400cc60 <__cxa_begin_catch>
 400c8b0:	003f9106 	br	400c6f8 <__alt_data_end+0xfc00c6f8>
 400c8b4:	d9c01c17 	ldw	r7,112(sp)
 400c8b8:	383eda1e 	bne	r7,zero,400c424 <__alt_data_end+0xfc00c424>
 400c8bc:	d8c01b17 	ldw	r3,108(sp)
 400c8c0:	00800044 	movi	r2,1
 400c8c4:	10fed736 	bltu	r2,r3,400c424 <__alt_data_end+0xfc00c424>
 400c8c8:	00c000c4 	movi	r3,3
 400c8cc:	003f8e06 	br	400c708 <__alt_data_end+0xfc00c708>

0400c8d0 <__cxa_call_unexpected>:
 400c8d0:	00810074 	movhi	r2,1025
 400c8d4:	deffe604 	addi	sp,sp,-104
 400c8d8:	10b0b404 	addi	r2,r2,-15664
 400c8dc:	d8800d15 	stw	r2,52(sp)
 400c8e0:	008100b4 	movhi	r2,1026
 400c8e4:	1080a004 	addi	r2,r2,640
 400c8e8:	d8800e15 	stw	r2,56(sp)
 400c8ec:	d8800104 	addi	r2,sp,4
 400c8f0:	d8800f15 	stw	r2,60(sp)
 400c8f4:	00810074 	movhi	r2,1025
 400c8f8:	10b25704 	addi	r2,r2,-13988
 400c8fc:	d9001415 	stw	r4,80(sp)
 400c900:	d9000704 	addi	r4,sp,28
 400c904:	dfc01915 	stw	ra,100(sp)
 400c908:	d8801015 	stw	r2,64(sp)
 400c90c:	df001815 	stw	fp,96(sp)
 400c910:	dec01115 	stw	sp,68(sp)
 400c914:	400e0c80 	call	400e0c8 <_Unwind_SjLj_Register>
 400c918:	d9001417 	ldw	r4,80(sp)
 400c91c:	400cc600 	call	400cc60 <__cxa_begin_catch>
 400c920:	d8c01417 	ldw	r3,80(sp)
 400c924:	18bffe17 	ldw	r2,-8(r3)
 400c928:	193ff717 	ldw	r4,-36(r3)
 400c92c:	18fffd17 	ldw	r3,-12(r3)
 400c930:	d8800315 	stw	r2,12(sp)
 400c934:	d8c01615 	stw	r3,88(sp)
 400c938:	d8c01417 	ldw	r3,80(sp)
 400c93c:	18fffb17 	ldw	r3,-20(r3)
 400c940:	d8c01515 	stw	r3,84(sp)
 400c944:	d8c01417 	ldw	r3,80(sp)
 400c948:	18fff817 	ldw	r3,-32(r3)
 400c94c:	d8c01415 	stw	r3,80(sp)
 400c950:	00c00044 	movi	r3,1
 400c954:	d8c00815 	stw	r3,32(sp)
 400c958:	400ba400 	call	400ba40 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 400c95c:	d8c00917 	ldw	r3,36(sp)
 400c960:	d8800817 	ldw	r2,32(sp)
 400c964:	d8c01715 	stw	r3,92(sp)
 400c968:	10000a26 	beq	r2,zero,400c994 <__cxa_call_unexpected+0xc4>
 400c96c:	10bfffc4 	addi	r2,r2,-1
 400c970:	10000126 	beq	r2,zero,400c978 <__cxa_call_unexpected+0xa8>
 400c974:	003b68fa 	trap	3
 400c978:	d8000815 	stw	zero,32(sp)
 400c97c:	400cd140 	call	400cd14 <__cxa_end_catch>
 400c980:	400cd140 	call	400cd14 <__cxa_end_catch>
 400c984:	d9001717 	ldw	r4,92(sp)
 400c988:	00bfffc4 	movi	r2,-1
 400c98c:	d8800815 	stw	r2,32(sp)
 400c990:	400e2c40 	call	400e2c4 <_Unwind_SjLj_Resume>
 400c994:	d9001717 	ldw	r4,92(sp)
 400c998:	400cc600 	call	400cc60 <__cxa_begin_catch>
 400c99c:	400d1040 	call	400d104 <__cxa_get_globals_fast>
 400c9a0:	10800017 	ldw	r2,0(r2)
 400c9a4:	10c00b17 	ldw	r3,44(r2)
 400c9a8:	18c0004c 	andi	r3,r3,1
 400c9ac:	18001e26 	beq	r3,zero,400ca28 <__cxa_call_unexpected+0x158>
 400c9b0:	10800017 	ldw	r2,0(r2)
 400c9b4:	d8801715 	stw	r2,92(sp)
 400c9b8:	d8801517 	ldw	r2,84(sp)
 400c9bc:	00802b0e 	bge	zero,r2,400ca6c <__cxa_call_unexpected+0x19c>
 400c9c0:	d8c01717 	ldw	r3,92(sp)
 400c9c4:	d8800317 	ldw	r2,12(sp)
 400c9c8:	d9c01517 	ldw	r7,84(sp)
 400c9cc:	193ff017 	ldw	r4,-64(r3)
 400c9d0:	d9801617 	ldw	r6,88(sp)
 400c9d4:	d8800015 	stw	r2,0(sp)
 400c9d8:	180b883a 	mov	r5,r3
 400c9dc:	00800084 	movi	r2,2
 400c9e0:	d8800815 	stw	r2,32(sp)
 400c9e4:	400bffc0 	call	400bffc <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 400c9e8:	10803fcc 	andi	r2,r2,255
 400c9ec:	10001e1e 	bne	r2,zero,400ca68 <__cxa_call_unexpected+0x198>
 400c9f0:	d8800317 	ldw	r2,12(sp)
 400c9f4:	d9c01517 	ldw	r7,84(sp)
 400c9f8:	d9801617 	ldw	r6,88(sp)
 400c9fc:	010100b4 	movhi	r4,1026
 400ca00:	d8800015 	stw	r2,0(sp)
 400ca04:	211c2f04 	addi	r4,r4,28860
 400ca08:	00800084 	movi	r2,2
 400ca0c:	000b883a 	mov	r5,zero
 400ca10:	d8800815 	stw	r2,32(sp)
 400ca14:	400bffc0 	call	400bffc <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 400ca18:	10803fcc 	andi	r2,r2,255
 400ca1c:	1000051e 	bne	r2,zero,400ca34 <__cxa_call_unexpected+0x164>
 400ca20:	d9001417 	ldw	r4,80(sp)
 400ca24:	400b9680 	call	400b968 <_ZN10__cxxabiv111__terminateEPFvvE>
 400ca28:	10801004 	addi	r2,r2,64
 400ca2c:	d8801715 	stw	r2,92(sp)
 400ca30:	003fe106 	br	400c9b8 <__alt_data_end+0xfc00c9b8>
 400ca34:	01000104 	movi	r4,4
 400ca38:	400cf480 	call	400cf48 <__cxa_allocate_exception>
 400ca3c:	00c100b4 	movhi	r3,1026
 400ca40:	18dc4a04 	addi	r3,r3,28968
 400ca44:	01810074 	movhi	r6,1025
 400ca48:	014100b4 	movhi	r5,1026
 400ca4c:	10c00015 	stw	r3,0(r2)
 400ca50:	31b44804 	addi	r6,r6,-12000
 400ca54:	00c00084 	movi	r3,2
 400ca58:	295c2f04 	addi	r5,r5,28860
 400ca5c:	1009883a 	mov	r4,r2
 400ca60:	d8c00815 	stw	r3,32(sp)
 400ca64:	400cb440 	call	400cb44 <__cxa_throw>
 400ca68:	400cbd40 	call	400cbd4 <__cxa_rethrow>
 400ca6c:	d9401617 	ldw	r5,88(sp)
 400ca70:	00800084 	movi	r2,2
 400ca74:	d9800104 	addi	r6,sp,4
 400ca78:	0009883a 	mov	r4,zero
 400ca7c:	d8800815 	stw	r2,32(sp)
 400ca80:	400be400 	call	400be40 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 400ca84:	d9801717 	ldw	r6,92(sp)
 400ca88:	d9c01517 	ldw	r7,84(sp)
 400ca8c:	d9000104 	addi	r4,sp,4
 400ca90:	317ff017 	ldw	r5,-64(r6)
 400ca94:	400c2280 	call	400c228 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 400ca98:	10803fcc 	andi	r2,r2,255
 400ca9c:	1000171e 	bne	r2,zero,400cafc <__cxa_call_unexpected+0x22c>
 400caa0:	d9c01517 	ldw	r7,84(sp)
 400caa4:	014100b4 	movhi	r5,1026
 400caa8:	00800084 	movi	r2,2
 400caac:	295c2f04 	addi	r5,r5,28860
 400cab0:	000d883a 	mov	r6,zero
 400cab4:	d9000104 	addi	r4,sp,4
 400cab8:	d8800815 	stw	r2,32(sp)
 400cabc:	400c2280 	call	400c228 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 400cac0:	10803fcc 	andi	r2,r2,255
 400cac4:	103fd626 	beq	r2,zero,400ca20 <__alt_data_end+0xfc00ca20>
 400cac8:	01000104 	movi	r4,4
 400cacc:	400cf480 	call	400cf48 <__cxa_allocate_exception>
 400cad0:	00c100b4 	movhi	r3,1026
 400cad4:	18dc4a04 	addi	r3,r3,28968
 400cad8:	01810074 	movhi	r6,1025
 400cadc:	014100b4 	movhi	r5,1026
 400cae0:	10c00015 	stw	r3,0(r2)
 400cae4:	31b44804 	addi	r6,r6,-12000
 400cae8:	00c00084 	movi	r3,2
 400caec:	295c2f04 	addi	r5,r5,28860
 400caf0:	1009883a 	mov	r4,r2
 400caf4:	d8c00815 	stw	r3,32(sp)
 400caf8:	400cb440 	call	400cb44 <__cxa_throw>
 400cafc:	400cbd40 	call	400cbd4 <__cxa_rethrow>

0400cb00 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
 400cb00:	defffe04 	addi	sp,sp,-8
 400cb04:	dfc00115 	stw	ra,4(sp)
 400cb08:	dc000015 	stw	r16,0(sp)
 400cb0c:	00800044 	movi	r2,1
 400cb10:	11000a36 	bltu	r2,r4,400cb3c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
 400cb14:	28bff617 	ldw	r2,-40(r5)
 400cb18:	2c000504 	addi	r16,r5,20
 400cb1c:	10000226 	beq	r2,zero,400cb28 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
 400cb20:	8009883a 	mov	r4,r16
 400cb24:	103ee83a 	callr	r2
 400cb28:	8009883a 	mov	r4,r16
 400cb2c:	dfc00117 	ldw	ra,4(sp)
 400cb30:	dc000017 	ldw	r16,0(sp)
 400cb34:	dec00204 	addi	sp,sp,8
 400cb38:	400cfa81 	jmpi	400cfa8 <__cxa_free_exception>
 400cb3c:	293ff817 	ldw	r4,-32(r5)
 400cb40:	400b9680 	call	400b968 <_ZN10__cxxabiv111__terminateEPFvvE>

0400cb44 <__cxa_throw>:
 400cb44:	defffb04 	addi	sp,sp,-20
 400cb48:	dfc00415 	stw	ra,16(sp)
 400cb4c:	dcc00315 	stw	r19,12(sp)
 400cb50:	dc800215 	stw	r18,8(sp)
 400cb54:	2827883a 	mov	r19,r5
 400cb58:	3025883a 	mov	r18,r6
 400cb5c:	dc400115 	stw	r17,4(sp)
 400cb60:	dc000015 	stw	r16,0(sp)
 400cb64:	2021883a 	mov	r16,r4
 400cb68:	400d1100 	call	400d110 <__cxa_get_globals>
 400cb6c:	10c00117 	ldw	r3,4(r2)
 400cb70:	847ffb04 	addi	r17,r16,-20
 400cb74:	18c00044 	addi	r3,r3,1
 400cb78:	10c00115 	stw	r3,4(r2)
 400cb7c:	00800044 	movi	r2,1
 400cb80:	80bfef15 	stw	r2,-68(r16)
 400cb84:	84fff015 	stw	r19,-64(r16)
 400cb88:	84bff115 	stw	r18,-60(r16)
 400cb8c:	400baa00 	call	400baa0 <_ZSt14get_unexpectedv>
 400cb90:	80bff215 	stw	r2,-56(r16)
 400cb94:	400ba7c0 	call	400ba7c <_ZSt13get_terminatev>
 400cb98:	80bff315 	stw	r2,-52(r16)
 400cb9c:	0090caf4 	movhi	r2,17195
 400cba0:	108ac004 	addi	r2,r2,11008
 400cba4:	80bffb15 	stw	r2,-20(r16)
 400cba8:	0091d3b4 	movhi	r2,18254
 400cbac:	109550c4 	addi	r2,r2,21827
 400cbb0:	80bffc15 	stw	r2,-16(r16)
 400cbb4:	00810074 	movhi	r2,1025
 400cbb8:	10b2c004 	addi	r2,r2,-13568
 400cbbc:	8809883a 	mov	r4,r17
 400cbc0:	80bffd15 	stw	r2,-12(r16)
 400cbc4:	400e1b00 	call	400e1b0 <_Unwind_SjLj_RaiseException>
 400cbc8:	8809883a 	mov	r4,r17
 400cbcc:	400cc600 	call	400cc60 <__cxa_begin_catch>
 400cbd0:	400ba280 	call	400ba28 <_ZSt9terminatev>

0400cbd4 <__cxa_rethrow>:
 400cbd4:	defffe04 	addi	sp,sp,-8
 400cbd8:	dfc00115 	stw	ra,4(sp)
 400cbdc:	dc000015 	stw	r16,0(sp)
 400cbe0:	400d1100 	call	400d110 <__cxa_get_globals>
 400cbe4:	10c00117 	ldw	r3,4(r2)
 400cbe8:	11000017 	ldw	r4,0(r2)
 400cbec:	18c00044 	addi	r3,r3,1
 400cbf0:	10c00115 	stw	r3,4(r2)
 400cbf4:	20001126 	beq	r4,zero,400cc3c <__cxa_rethrow+0x68>
 400cbf8:	21400b17 	ldw	r5,44(r4)
 400cbfc:	01ef3574 	movhi	r7,48341
 400cc00:	39f54004 	addi	r7,r7,-11008
 400cc04:	29cf883a 	add	r7,r5,r7
 400cc08:	20c00c17 	ldw	r3,48(r4)
 400cc0c:	394d803a 	cmpltu	r6,r7,r5
 400cc10:	016e2cb4 	movhi	r5,47282
 400cc14:	296aaf04 	addi	r5,r5,-21828
 400cc18:	1947883a 	add	r3,r3,r5
 400cc1c:	30c7883a 	add	r3,r6,r3
 400cc20:	18000726 	beq	r3,zero,400cc40 <__cxa_rethrow+0x6c>
 400cc24:	10000015 	stw	zero,0(r2)
 400cc28:	24000b04 	addi	r16,r4,44
 400cc2c:	8009883a 	mov	r4,r16
 400cc30:	400e3080 	call	400e308 <_Unwind_SjLj_Resume_or_Rethrow>
 400cc34:	8009883a 	mov	r4,r16
 400cc38:	400cc600 	call	400cc60 <__cxa_begin_catch>
 400cc3c:	400ba280 	call	400ba28 <_ZSt9terminatev>
 400cc40:	00c00044 	movi	r3,1
 400cc44:	19fff736 	bltu	r3,r7,400cc24 <__alt_data_end+0xfc00cc24>
 400cc48:	20800517 	ldw	r2,20(r4)
 400cc4c:	0085c83a 	sub	r2,zero,r2
 400cc50:	20800515 	stw	r2,20(r4)
 400cc54:	003ff406 	br	400cc28 <__alt_data_end+0xfc00cc28>

0400cc58 <__cxa_get_exception_ptr>:
 400cc58:	20bfff17 	ldw	r2,-4(r4)
 400cc5c:	f800283a 	ret

0400cc60 <__cxa_begin_catch>:
 400cc60:	defffe04 	addi	sp,sp,-8
 400cc64:	dc000015 	stw	r16,0(sp)
 400cc68:	dfc00115 	stw	ra,4(sp)
 400cc6c:	2021883a 	mov	r16,r4
 400cc70:	400d1100 	call	400d110 <__cxa_get_globals>
 400cc74:	81000017 	ldw	r4,0(r16)
 400cc78:	80c00117 	ldw	r3,4(r16)
 400cc7c:	01af3574 	movhi	r6,48341
 400cc80:	31b54004 	addi	r6,r6,-11008
 400cc84:	016e2cb4 	movhi	r5,47282
 400cc88:	296aaf04 	addi	r5,r5,-21828
 400cc8c:	218d883a 	add	r6,r4,r6
 400cc90:	3109803a 	cmpltu	r4,r6,r4
 400cc94:	1947883a 	add	r3,r3,r5
 400cc98:	20c7883a 	add	r3,r4,r3
 400cc9c:	817ff504 	addi	r5,r16,-44
 400cca0:	11000017 	ldw	r4,0(r2)
 400cca4:	18000726 	beq	r3,zero,400ccc4 <__cxa_begin_catch+0x64>
 400cca8:	2000191e 	bne	r4,zero,400cd10 <__cxa_begin_catch+0xb0>
 400ccac:	11400015 	stw	r5,0(r2)
 400ccb0:	0005883a 	mov	r2,zero
 400ccb4:	dfc00117 	ldw	ra,4(sp)
 400ccb8:	dc000017 	ldw	r16,0(sp)
 400ccbc:	dec00204 	addi	sp,sp,8
 400ccc0:	f800283a 	ret
 400ccc4:	01c00044 	movi	r7,1
 400ccc8:	39bff736 	bltu	r7,r6,400cca8 <__alt_data_end+0xfc00cca8>
 400cccc:	80fffa17 	ldw	r3,-24(r16)
 400ccd0:	18000d16 	blt	r3,zero,400cd08 <__cxa_begin_catch+0xa8>
 400ccd4:	18c00044 	addi	r3,r3,1
 400ccd8:	11800117 	ldw	r6,4(r2)
 400ccdc:	80fffa15 	stw	r3,-24(r16)
 400cce0:	30ffffc4 	addi	r3,r6,-1
 400cce4:	10c00115 	stw	r3,4(r2)
 400cce8:	21400226 	beq	r4,r5,400ccf4 <__cxa_begin_catch+0x94>
 400ccec:	813ff915 	stw	r4,-28(r16)
 400ccf0:	11400015 	stw	r5,0(r2)
 400ccf4:	80bfff17 	ldw	r2,-4(r16)
 400ccf8:	dfc00117 	ldw	ra,4(sp)
 400ccfc:	dc000017 	ldw	r16,0(sp)
 400cd00:	dec00204 	addi	sp,sp,8
 400cd04:	f800283a 	ret
 400cd08:	38c7c83a 	sub	r3,r7,r3
 400cd0c:	003ff206 	br	400ccd8 <__alt_data_end+0xfc00ccd8>
 400cd10:	400ba280 	call	400ba28 <_ZSt9terminatev>

0400cd14 <__cxa_end_catch>:
 400cd14:	deffff04 	addi	sp,sp,-4
 400cd18:	dfc00015 	stw	ra,0(sp)
 400cd1c:	400d1040 	call	400d104 <__cxa_get_globals_fast>
 400cd20:	11000017 	ldw	r4,0(r2)
 400cd24:	20001426 	beq	r4,zero,400cd78 <__cxa_end_catch+0x64>
 400cd28:	21400b17 	ldw	r5,44(r4)
 400cd2c:	01ef3574 	movhi	r7,48341
 400cd30:	39f54004 	addi	r7,r7,-11008
 400cd34:	29cf883a 	add	r7,r5,r7
 400cd38:	20c00c17 	ldw	r3,48(r4)
 400cd3c:	394d803a 	cmpltu	r6,r7,r5
 400cd40:	016e2cb4 	movhi	r5,47282
 400cd44:	296aaf04 	addi	r5,r5,-21828
 400cd48:	1947883a 	add	r3,r3,r5
 400cd4c:	30c7883a 	add	r3,r6,r3
 400cd50:	18000c1e 	bne	r3,zero,400cd84 <__cxa_end_catch+0x70>
 400cd54:	00c00044 	movi	r3,1
 400cd58:	19c00a36 	bltu	r3,r7,400cd84 <__cxa_end_catch+0x70>
 400cd5c:	20c00517 	ldw	r3,20(r4)
 400cd60:	18000d16 	blt	r3,zero,400cd98 <__cxa_end_catch+0x84>
 400cd64:	18ffffc4 	addi	r3,r3,-1
 400cd68:	18001026 	beq	r3,zero,400cdac <__cxa_end_catch+0x98>
 400cd6c:	00bfffc4 	movi	r2,-1
 400cd70:	18801426 	beq	r3,r2,400cdc4 <__cxa_end_catch+0xb0>
 400cd74:	20c00515 	stw	r3,20(r4)
 400cd78:	dfc00017 	ldw	ra,0(sp)
 400cd7c:	dec00104 	addi	sp,sp,4
 400cd80:	f800283a 	ret
 400cd84:	21000b04 	addi	r4,r4,44
 400cd88:	10000015 	stw	zero,0(r2)
 400cd8c:	dfc00017 	ldw	ra,0(sp)
 400cd90:	dec00104 	addi	sp,sp,4
 400cd94:	400e3541 	jmpi	400e354 <_Unwind_DeleteException>
 400cd98:	18c00044 	addi	r3,r3,1
 400cd9c:	183ff51e 	bne	r3,zero,400cd74 <__alt_data_end+0xfc00cd74>
 400cda0:	21400417 	ldw	r5,16(r4)
 400cda4:	11400015 	stw	r5,0(r2)
 400cda8:	003ff206 	br	400cd74 <__alt_data_end+0xfc00cd74>
 400cdac:	20c00417 	ldw	r3,16(r4)
 400cdb0:	21000b04 	addi	r4,r4,44
 400cdb4:	10c00015 	stw	r3,0(r2)
 400cdb8:	dfc00017 	ldw	ra,0(sp)
 400cdbc:	dec00104 	addi	sp,sp,4
 400cdc0:	400e3541 	jmpi	400e354 <_Unwind_DeleteException>
 400cdc4:	400ba280 	call	400ba28 <_ZSt9terminatev>

0400cdc8 <_ZSt18uncaught_exceptionv>:
 400cdc8:	deffff04 	addi	sp,sp,-4
 400cdcc:	dfc00015 	stw	ra,0(sp)
 400cdd0:	400d1100 	call	400d110 <__cxa_get_globals>
 400cdd4:	10800117 	ldw	r2,4(r2)
 400cdd8:	1004c03a 	cmpne	r2,r2,zero
 400cddc:	dfc00017 	ldw	ra,0(sp)
 400cde0:	dec00104 	addi	sp,sp,4
 400cde4:	f800283a 	ret

0400cde8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 400cde8:	018100f4 	movhi	r6,1027
 400cdec:	31b65904 	addi	r6,r6,-9884
 400cdf0:	31400117 	ldw	r5,4(r6)
 400cdf4:	223fff04 	addi	r8,r4,-4
 400cdf8:	227fff17 	ldw	r9,-4(r4)
 400cdfc:	28001326 	beq	r5,zero,400ce4c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
 400ce00:	424f883a 	add	r7,r8,r9
 400ce04:	29c01426 	beq	r5,r7,400ce58 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
 400ce08:	28c00117 	ldw	r3,4(r5)
 400ce0c:	18001c26 	beq	r3,zero,400ce80 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
 400ce10:	38c00336 	bltu	r7,r3,400ce20 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
 400ce14:	00001e06 	br	400ce90 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
 400ce18:	3880052e 	bgeu	r7,r2,400ce30 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
 400ce1c:	1007883a 	mov	r3,r2
 400ce20:	18800117 	ldw	r2,4(r3)
 400ce24:	29800104 	addi	r6,r5,4
 400ce28:	180b883a 	mov	r5,r3
 400ce2c:	103ffa1e 	bne	r2,zero,400ce18 <__alt_data_end+0xfc00ce18>
 400ce30:	19400017 	ldw	r5,0(r3)
 400ce34:	194f883a 	add	r7,r3,r5
 400ce38:	41c00e26 	beq	r8,r7,400ce74 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
 400ce3c:	20800015 	stw	r2,0(r4)
 400ce40:	30800017 	ldw	r2,0(r6)
 400ce44:	12000115 	stw	r8,4(r2)
 400ce48:	f800283a 	ret
 400ce4c:	20000015 	stw	zero,0(r4)
 400ce50:	32000115 	stw	r8,4(r6)
 400ce54:	f800283a 	ret
 400ce58:	28c00017 	ldw	r3,0(r5)
 400ce5c:	28800117 	ldw	r2,4(r5)
 400ce60:	1a53883a 	add	r9,r3,r9
 400ce64:	227fff15 	stw	r9,-4(r4)
 400ce68:	20800015 	stw	r2,0(r4)
 400ce6c:	32000115 	stw	r8,4(r6)
 400ce70:	f800283a 	ret
 400ce74:	494b883a 	add	r5,r9,r5
 400ce78:	19400015 	stw	r5,0(r3)
 400ce7c:	f800283a 	ret
 400ce80:	0005883a 	mov	r2,zero
 400ce84:	2807883a 	mov	r3,r5
 400ce88:	31800104 	addi	r6,r6,4
 400ce8c:	003fe806 	br	400ce30 <__alt_data_end+0xfc00ce30>
 400ce90:	1805883a 	mov	r2,r3
 400ce94:	31800104 	addi	r6,r6,4
 400ce98:	2807883a 	mov	r3,r5
 400ce9c:	003fe406 	br	400ce30 <__alt_data_end+0xfc00ce30>

0400cea0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 400cea0:	20800104 	addi	r2,r4,4
 400cea4:	00c001c4 	movi	r3,7
 400cea8:	1880112e 	bgeu	r3,r2,400cef0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
 400ceac:	20c9883a 	add	r4,r4,r3
 400ceb0:	00bfff04 	movi	r2,-4
 400ceb4:	208a703a 	and	r5,r4,r2
 400ceb8:	018100f4 	movhi	r6,1027
 400cebc:	31b65904 	addi	r6,r6,-9884
 400cec0:	30c00117 	ldw	r3,4(r6)
 400cec4:	18000826 	beq	r3,zero,400cee8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
 400cec8:	19000017 	ldw	r4,0(r3)
 400cecc:	21400436 	bltu	r4,r5,400cee0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
 400ced0:	00001a06 	br	400cf3c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
 400ced4:	11000017 	ldw	r4,0(r2)
 400ced8:	2140072e 	bgeu	r4,r5,400cef8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
 400cedc:	1007883a 	mov	r3,r2
 400cee0:	18800117 	ldw	r2,4(r3)
 400cee4:	103ffb1e 	bne	r2,zero,400ced4 <__alt_data_end+0xfc00ced4>
 400cee8:	0005883a 	mov	r2,zero
 400ceec:	f800283a 	ret
 400cef0:	01400204 	movi	r5,8
 400cef4:	003ff006 	br	400ceb8 <__alt_data_end+0xfc00ceb8>
 400cef8:	18c00104 	addi	r3,r3,4
 400cefc:	2149c83a 	sub	r4,r4,r5
 400cf00:	018001c4 	movi	r6,7
 400cf04:	3100092e 	bgeu	r6,r4,400cf2c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
 400cf08:	11c00117 	ldw	r7,4(r2)
 400cf0c:	114d883a 	add	r6,r2,r5
 400cf10:	31000015 	stw	r4,0(r6)
 400cf14:	31c00115 	stw	r7,4(r6)
 400cf18:	18800017 	ldw	r2,0(r3)
 400cf1c:	11400015 	stw	r5,0(r2)
 400cf20:	19800015 	stw	r6,0(r3)
 400cf24:	10800104 	addi	r2,r2,4
 400cf28:	f800283a 	ret
 400cf2c:	11000117 	ldw	r4,4(r2)
 400cf30:	10800104 	addi	r2,r2,4
 400cf34:	19000015 	stw	r4,0(r3)
 400cf38:	f800283a 	ret
 400cf3c:	1805883a 	mov	r2,r3
 400cf40:	30c00104 	addi	r3,r6,4
 400cf44:	003fed06 	br	400cefc <__alt_data_end+0xfc00cefc>

0400cf48 <__cxa_allocate_exception>:
 400cf48:	defffd04 	addi	sp,sp,-12
 400cf4c:	dc400115 	stw	r17,4(sp)
 400cf50:	24401104 	addi	r17,r4,68
 400cf54:	8809883a 	mov	r4,r17
 400cf58:	dc000015 	stw	r16,0(sp)
 400cf5c:	dfc00215 	stw	ra,8(sp)
 400cf60:	400e4a80 	call	400e4a8 <malloc>
 400cf64:	1021883a 	mov	r16,r2
 400cf68:	10000a26 	beq	r2,zero,400cf94 <__cxa_allocate_exception+0x4c>
 400cf6c:	01801104 	movi	r6,68
 400cf70:	000b883a 	mov	r5,zero
 400cf74:	8009883a 	mov	r4,r16
 400cf78:	400ee240 	call	400ee24 <memset>
 400cf7c:	80801104 	addi	r2,r16,68
 400cf80:	dfc00217 	ldw	ra,8(sp)
 400cf84:	dc400117 	ldw	r17,4(sp)
 400cf88:	dc000017 	ldw	r16,0(sp)
 400cf8c:	dec00304 	addi	sp,sp,12
 400cf90:	f800283a 	ret
 400cf94:	8809883a 	mov	r4,r17
 400cf98:	400cea00 	call	400cea0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 400cf9c:	1021883a 	mov	r16,r2
 400cfa0:	103ff21e 	bne	r2,zero,400cf6c <__alt_data_end+0xfc00cf6c>
 400cfa4:	400ba280 	call	400ba28 <_ZSt9terminatev>

0400cfa8 <__cxa_free_exception>:
 400cfa8:	00c100f4 	movhi	r3,1027
 400cfac:	18f65904 	addi	r3,r3,-9884
 400cfb0:	18800217 	ldw	r2,8(r3)
 400cfb4:	213fef04 	addi	r4,r4,-68
 400cfb8:	1100042e 	bgeu	r2,r4,400cfcc <__cxa_free_exception+0x24>
 400cfbc:	18c00317 	ldw	r3,12(r3)
 400cfc0:	10c5883a 	add	r2,r2,r3
 400cfc4:	2080012e 	bgeu	r4,r2,400cfcc <__cxa_free_exception+0x24>
 400cfc8:	400cde81 	jmpi	400cde8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 400cfcc:	400e4bc1 	jmpi	400e4bc <free>

0400cfd0 <__cxa_allocate_dependent_exception>:
 400cfd0:	defffe04 	addi	sp,sp,-8
 400cfd4:	01001004 	movi	r4,64
 400cfd8:	dc000015 	stw	r16,0(sp)
 400cfdc:	dfc00115 	stw	ra,4(sp)
 400cfe0:	400e4a80 	call	400e4a8 <malloc>
 400cfe4:	1021883a 	mov	r16,r2
 400cfe8:	10000926 	beq	r2,zero,400d010 <__cxa_allocate_dependent_exception+0x40>
 400cfec:	01801004 	movi	r6,64
 400cff0:	000b883a 	mov	r5,zero
 400cff4:	8009883a 	mov	r4,r16
 400cff8:	400ee240 	call	400ee24 <memset>
 400cffc:	8005883a 	mov	r2,r16
 400d000:	dfc00117 	ldw	ra,4(sp)
 400d004:	dc000017 	ldw	r16,0(sp)
 400d008:	dec00204 	addi	sp,sp,8
 400d00c:	f800283a 	ret
 400d010:	01001004 	movi	r4,64
 400d014:	400cea00 	call	400cea0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 400d018:	1021883a 	mov	r16,r2
 400d01c:	103ff31e 	bne	r2,zero,400cfec <__alt_data_end+0xfc00cfec>
 400d020:	400ba280 	call	400ba28 <_ZSt9terminatev>

0400d024 <__cxa_free_dependent_exception>:
 400d024:	014100f4 	movhi	r5,1027
 400d028:	29765904 	addi	r5,r5,-9884
 400d02c:	28c00217 	ldw	r3,8(r5)
 400d030:	2005883a 	mov	r2,r4
 400d034:	1900042e 	bgeu	r3,r4,400d048 <__cxa_free_dependent_exception+0x24>
 400d038:	29400317 	ldw	r5,12(r5)
 400d03c:	1947883a 	add	r3,r3,r5
 400d040:	20c0012e 	bgeu	r4,r3,400d048 <__cxa_free_dependent_exception+0x24>
 400d044:	400cde81 	jmpi	400cde8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 400d048:	1009883a 	mov	r4,r2
 400d04c:	400e4bc1 	jmpi	400e4bc <free>

0400d050 <_GLOBAL__sub_I___cxa_allocate_exception>:
 400d050:	defffd04 	addi	sp,sp,-12
 400d054:	dc400115 	stw	r17,4(sp)
 400d058:	dc000015 	stw	r16,0(sp)
 400d05c:	04424004 	movi	r17,2304
 400d060:	040100f4 	movhi	r16,1027
 400d064:	84365904 	addi	r16,r16,-9884
 400d068:	8809883a 	mov	r4,r17
 400d06c:	dfc00215 	stw	ra,8(sp)
 400d070:	84400315 	stw	r17,12(r16)
 400d074:	400e4a80 	call	400e4a8 <malloc>
 400d078:	80800215 	stw	r2,8(r16)
 400d07c:	10000826 	beq	r2,zero,400d0a0 <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
 400d080:	80800115 	stw	r2,4(r16)
 400d084:	14400015 	stw	r17,0(r2)
 400d088:	10000115 	stw	zero,4(r2)
 400d08c:	dfc00217 	ldw	ra,8(sp)
 400d090:	dc400117 	ldw	r17,4(sp)
 400d094:	dc000017 	ldw	r16,0(sp)
 400d098:	dec00304 	addi	sp,sp,12
 400d09c:	f800283a 	ret
 400d0a0:	80000315 	stw	zero,12(r16)
 400d0a4:	80000115 	stw	zero,4(r16)
 400d0a8:	003ff806 	br	400d08c <__alt_data_end+0xfc00d08c>

0400d0ac <__cxa_call_terminate>:
 400d0ac:	defffe04 	addi	sp,sp,-8
 400d0b0:	dfc00115 	stw	ra,4(sp)
 400d0b4:	dc000015 	stw	r16,0(sp)
 400d0b8:	20000d26 	beq	r4,zero,400d0f0 <__cxa_call_terminate+0x44>
 400d0bc:	2021883a 	mov	r16,r4
 400d0c0:	400cc600 	call	400cc60 <__cxa_begin_catch>
 400d0c4:	80c00017 	ldw	r3,0(r16)
 400d0c8:	016f3574 	movhi	r5,48341
 400d0cc:	29754004 	addi	r5,r5,-11008
 400d0d0:	194b883a 	add	r5,r3,r5
 400d0d4:	80800117 	ldw	r2,4(r16)
 400d0d8:	28c9803a 	cmpltu	r4,r5,r3
 400d0dc:	00ee2cb4 	movhi	r3,47282
 400d0e0:	18eaaf04 	addi	r3,r3,-21828
 400d0e4:	10c5883a 	add	r2,r2,r3
 400d0e8:	2085883a 	add	r2,r4,r2
 400d0ec:	10000126 	beq	r2,zero,400d0f4 <__cxa_call_terminate+0x48>
 400d0f0:	400ba280 	call	400ba28 <_ZSt9terminatev>
 400d0f4:	00800044 	movi	r2,1
 400d0f8:	117ffd36 	bltu	r2,r5,400d0f0 <__alt_data_end+0xfc00d0f0>
 400d0fc:	813ff817 	ldw	r4,-32(r16)
 400d100:	400b9680 	call	400b968 <_ZN10__cxxabiv111__terminateEPFvvE>

0400d104 <__cxa_get_globals_fast>:
 400d104:	008100f4 	movhi	r2,1027
 400d108:	10b61404 	addi	r2,r2,-10160
 400d10c:	f800283a 	ret

0400d110 <__cxa_get_globals>:
 400d110:	008100f4 	movhi	r2,1027
 400d114:	10b61404 	addi	r2,r2,-10160
 400d118:	f800283a 	ret

0400d11c <_ZNSt9exceptionD1Ev>:
 400d11c:	f800283a 	ret

0400d120 <_ZNSt13bad_exceptionD1Ev>:
 400d120:	f800283a 	ret

0400d124 <_ZNKSt9exception4whatEv>:
 400d124:	008100b4 	movhi	r2,1026
 400d128:	109c1d04 	addi	r2,r2,28788
 400d12c:	f800283a 	ret

0400d130 <_ZNKSt13bad_exception4whatEv>:
 400d130:	008100b4 	movhi	r2,1026
 400d134:	109c2104 	addi	r2,r2,28804
 400d138:	f800283a 	ret

0400d13c <_ZNSt9exceptionD0Ev>:
 400d13c:	400b65c1 	jmpi	400b65c <_ZdlPv>

0400d140 <_ZNSt13bad_exceptionD0Ev>:
 400d140:	400b65c1 	jmpi	400b65c <_ZdlPv>

0400d144 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
 400d144:	f800283a 	ret

0400d148 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
 400d148:	400b65c1 	jmpi	400b65c <_ZdlPv>

0400d14c <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
 400d14c:	f800283a 	ret

0400d150 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
 400d150:	400b65c1 	jmpi	400b65c <_ZdlPv>

0400d154 <__fixunssfsi>:
 400d154:	defffd04 	addi	sp,sp,-12
 400d158:	dc000015 	stw	r16,0(sp)
 400d15c:	0413c034 	movhi	r16,20224
 400d160:	800b883a 	mov	r5,r16
 400d164:	dc400115 	stw	r17,4(sp)
 400d168:	dfc00215 	stw	ra,8(sp)
 400d16c:	2023883a 	mov	r17,r4
 400d170:	400d3900 	call	400d390 <__gesf2>
 400d174:	1000070e 	bge	r2,zero,400d194 <__fixunssfsi+0x40>
 400d178:	8809883a 	mov	r4,r17
 400d17c:	400dd600 	call	400dd60 <__fixsfsi>
 400d180:	dfc00217 	ldw	ra,8(sp)
 400d184:	dc400117 	ldw	r17,4(sp)
 400d188:	dc000017 	ldw	r16,0(sp)
 400d18c:	dec00304 	addi	sp,sp,12
 400d190:	f800283a 	ret
 400d194:	800b883a 	mov	r5,r16
 400d198:	8809883a 	mov	r4,r17
 400d19c:	400d87c0 	call	400d87c <__subsf3>
 400d1a0:	1009883a 	mov	r4,r2
 400d1a4:	400dd600 	call	400dd60 <__fixsfsi>
 400d1a8:	00e00034 	movhi	r3,32768
 400d1ac:	10c5883a 	add	r2,r2,r3
 400d1b0:	003ff306 	br	400d180 <__alt_data_end+0xfc00d180>

0400d1b4 <__divsi3>:
 400d1b4:	20001b16 	blt	r4,zero,400d224 <__divsi3+0x70>
 400d1b8:	000f883a 	mov	r7,zero
 400d1bc:	28001616 	blt	r5,zero,400d218 <__divsi3+0x64>
 400d1c0:	200d883a 	mov	r6,r4
 400d1c4:	29001a2e 	bgeu	r5,r4,400d230 <__divsi3+0x7c>
 400d1c8:	00800804 	movi	r2,32
 400d1cc:	00c00044 	movi	r3,1
 400d1d0:	00000106 	br	400d1d8 <__divsi3+0x24>
 400d1d4:	10000d26 	beq	r2,zero,400d20c <__divsi3+0x58>
 400d1d8:	294b883a 	add	r5,r5,r5
 400d1dc:	10bfffc4 	addi	r2,r2,-1
 400d1e0:	18c7883a 	add	r3,r3,r3
 400d1e4:	293ffb36 	bltu	r5,r4,400d1d4 <__alt_data_end+0xfc00d1d4>
 400d1e8:	0005883a 	mov	r2,zero
 400d1ec:	18000726 	beq	r3,zero,400d20c <__divsi3+0x58>
 400d1f0:	0005883a 	mov	r2,zero
 400d1f4:	31400236 	bltu	r6,r5,400d200 <__divsi3+0x4c>
 400d1f8:	314dc83a 	sub	r6,r6,r5
 400d1fc:	10c4b03a 	or	r2,r2,r3
 400d200:	1806d07a 	srli	r3,r3,1
 400d204:	280ad07a 	srli	r5,r5,1
 400d208:	183ffa1e 	bne	r3,zero,400d1f4 <__alt_data_end+0xfc00d1f4>
 400d20c:	38000126 	beq	r7,zero,400d214 <__divsi3+0x60>
 400d210:	0085c83a 	sub	r2,zero,r2
 400d214:	f800283a 	ret
 400d218:	014bc83a 	sub	r5,zero,r5
 400d21c:	39c0005c 	xori	r7,r7,1
 400d220:	003fe706 	br	400d1c0 <__alt_data_end+0xfc00d1c0>
 400d224:	0109c83a 	sub	r4,zero,r4
 400d228:	01c00044 	movi	r7,1
 400d22c:	003fe306 	br	400d1bc <__alt_data_end+0xfc00d1bc>
 400d230:	00c00044 	movi	r3,1
 400d234:	003fee06 	br	400d1f0 <__alt_data_end+0xfc00d1f0>

0400d238 <__modsi3>:
 400d238:	20001716 	blt	r4,zero,400d298 <__modsi3+0x60>
 400d23c:	000f883a 	mov	r7,zero
 400d240:	2005883a 	mov	r2,r4
 400d244:	28001216 	blt	r5,zero,400d290 <__modsi3+0x58>
 400d248:	2900162e 	bgeu	r5,r4,400d2a4 <__modsi3+0x6c>
 400d24c:	01800804 	movi	r6,32
 400d250:	00c00044 	movi	r3,1
 400d254:	00000106 	br	400d25c <__modsi3+0x24>
 400d258:	30000a26 	beq	r6,zero,400d284 <__modsi3+0x4c>
 400d25c:	294b883a 	add	r5,r5,r5
 400d260:	31bfffc4 	addi	r6,r6,-1
 400d264:	18c7883a 	add	r3,r3,r3
 400d268:	293ffb36 	bltu	r5,r4,400d258 <__alt_data_end+0xfc00d258>
 400d26c:	18000526 	beq	r3,zero,400d284 <__modsi3+0x4c>
 400d270:	1806d07a 	srli	r3,r3,1
 400d274:	11400136 	bltu	r2,r5,400d27c <__modsi3+0x44>
 400d278:	1145c83a 	sub	r2,r2,r5
 400d27c:	280ad07a 	srli	r5,r5,1
 400d280:	183ffb1e 	bne	r3,zero,400d270 <__alt_data_end+0xfc00d270>
 400d284:	38000126 	beq	r7,zero,400d28c <__modsi3+0x54>
 400d288:	0085c83a 	sub	r2,zero,r2
 400d28c:	f800283a 	ret
 400d290:	014bc83a 	sub	r5,zero,r5
 400d294:	003fec06 	br	400d248 <__alt_data_end+0xfc00d248>
 400d298:	0109c83a 	sub	r4,zero,r4
 400d29c:	01c00044 	movi	r7,1
 400d2a0:	003fe706 	br	400d240 <__alt_data_end+0xfc00d240>
 400d2a4:	00c00044 	movi	r3,1
 400d2a8:	003ff106 	br	400d270 <__alt_data_end+0xfc00d270>

0400d2ac <__udivsi3>:
 400d2ac:	200d883a 	mov	r6,r4
 400d2b0:	2900152e 	bgeu	r5,r4,400d308 <__udivsi3+0x5c>
 400d2b4:	28001416 	blt	r5,zero,400d308 <__udivsi3+0x5c>
 400d2b8:	00800804 	movi	r2,32
 400d2bc:	00c00044 	movi	r3,1
 400d2c0:	00000206 	br	400d2cc <__udivsi3+0x20>
 400d2c4:	10000e26 	beq	r2,zero,400d300 <__udivsi3+0x54>
 400d2c8:	28000516 	blt	r5,zero,400d2e0 <__udivsi3+0x34>
 400d2cc:	294b883a 	add	r5,r5,r5
 400d2d0:	10bfffc4 	addi	r2,r2,-1
 400d2d4:	18c7883a 	add	r3,r3,r3
 400d2d8:	293ffa36 	bltu	r5,r4,400d2c4 <__alt_data_end+0xfc00d2c4>
 400d2dc:	18000826 	beq	r3,zero,400d300 <__udivsi3+0x54>
 400d2e0:	0005883a 	mov	r2,zero
 400d2e4:	31400236 	bltu	r6,r5,400d2f0 <__udivsi3+0x44>
 400d2e8:	314dc83a 	sub	r6,r6,r5
 400d2ec:	10c4b03a 	or	r2,r2,r3
 400d2f0:	1806d07a 	srli	r3,r3,1
 400d2f4:	280ad07a 	srli	r5,r5,1
 400d2f8:	183ffa1e 	bne	r3,zero,400d2e4 <__alt_data_end+0xfc00d2e4>
 400d2fc:	f800283a 	ret
 400d300:	0005883a 	mov	r2,zero
 400d304:	f800283a 	ret
 400d308:	00c00044 	movi	r3,1
 400d30c:	003ff406 	br	400d2e0 <__alt_data_end+0xfc00d2e0>

0400d310 <__umodsi3>:
 400d310:	2005883a 	mov	r2,r4
 400d314:	2900122e 	bgeu	r5,r4,400d360 <__umodsi3+0x50>
 400d318:	28001116 	blt	r5,zero,400d360 <__umodsi3+0x50>
 400d31c:	01800804 	movi	r6,32
 400d320:	00c00044 	movi	r3,1
 400d324:	00000206 	br	400d330 <__umodsi3+0x20>
 400d328:	30000c26 	beq	r6,zero,400d35c <__umodsi3+0x4c>
 400d32c:	28000516 	blt	r5,zero,400d344 <__umodsi3+0x34>
 400d330:	294b883a 	add	r5,r5,r5
 400d334:	31bfffc4 	addi	r6,r6,-1
 400d338:	18c7883a 	add	r3,r3,r3
 400d33c:	293ffa36 	bltu	r5,r4,400d328 <__alt_data_end+0xfc00d328>
 400d340:	18000626 	beq	r3,zero,400d35c <__umodsi3+0x4c>
 400d344:	1806d07a 	srli	r3,r3,1
 400d348:	11400136 	bltu	r2,r5,400d350 <__umodsi3+0x40>
 400d34c:	1145c83a 	sub	r2,r2,r5
 400d350:	280ad07a 	srli	r5,r5,1
 400d354:	183ffb1e 	bne	r3,zero,400d344 <__alt_data_end+0xfc00d344>
 400d358:	f800283a 	ret
 400d35c:	f800283a 	ret
 400d360:	00c00044 	movi	r3,1
 400d364:	003ff706 	br	400d344 <__alt_data_end+0xfc00d344>

0400d368 <__mulsi3>:
 400d368:	0005883a 	mov	r2,zero
 400d36c:	20000726 	beq	r4,zero,400d38c <__mulsi3+0x24>
 400d370:	20c0004c 	andi	r3,r4,1
 400d374:	2008d07a 	srli	r4,r4,1
 400d378:	18000126 	beq	r3,zero,400d380 <__mulsi3+0x18>
 400d37c:	1145883a 	add	r2,r2,r5
 400d380:	294b883a 	add	r5,r5,r5
 400d384:	203ffa1e 	bne	r4,zero,400d370 <__alt_data_end+0xfc00d370>
 400d388:	f800283a 	ret
 400d38c:	f800283a 	ret

0400d390 <__gesf2>:
 400d390:	2004d5fa 	srli	r2,r4,23
 400d394:	2806d5fa 	srli	r3,r5,23
 400d398:	01802034 	movhi	r6,128
 400d39c:	31bfffc4 	addi	r6,r6,-1
 400d3a0:	10803fcc 	andi	r2,r2,255
 400d3a4:	01c03fc4 	movi	r7,255
 400d3a8:	3110703a 	and	r8,r6,r4
 400d3ac:	18c03fcc 	andi	r3,r3,255
 400d3b0:	314c703a 	and	r6,r6,r5
 400d3b4:	2008d7fa 	srli	r4,r4,31
 400d3b8:	280ad7fa 	srli	r5,r5,31
 400d3bc:	11c01926 	beq	r2,r7,400d424 <__gesf2+0x94>
 400d3c0:	01c03fc4 	movi	r7,255
 400d3c4:	19c00f26 	beq	r3,r7,400d404 <__gesf2+0x74>
 400d3c8:	1000061e 	bne	r2,zero,400d3e4 <__gesf2+0x54>
 400d3cc:	400f003a 	cmpeq	r7,r8,zero
 400d3d0:	1800071e 	bne	r3,zero,400d3f0 <__gesf2+0x60>
 400d3d4:	3000061e 	bne	r6,zero,400d3f0 <__gesf2+0x60>
 400d3d8:	0005883a 	mov	r2,zero
 400d3dc:	40000e1e 	bne	r8,zero,400d418 <__gesf2+0x88>
 400d3e0:	f800283a 	ret
 400d3e4:	18000a1e 	bne	r3,zero,400d410 <__gesf2+0x80>
 400d3e8:	30000b26 	beq	r6,zero,400d418 <__gesf2+0x88>
 400d3ec:	000f883a 	mov	r7,zero
 400d3f0:	29403fcc 	andi	r5,r5,255
 400d3f4:	38000726 	beq	r7,zero,400d414 <__gesf2+0x84>
 400d3f8:	28000826 	beq	r5,zero,400d41c <__gesf2+0x8c>
 400d3fc:	00800044 	movi	r2,1
 400d400:	f800283a 	ret
 400d404:	303ff026 	beq	r6,zero,400d3c8 <__alt_data_end+0xfc00d3c8>
 400d408:	00bfff84 	movi	r2,-2
 400d40c:	f800283a 	ret
 400d410:	29403fcc 	andi	r5,r5,255
 400d414:	21400526 	beq	r4,r5,400d42c <__gesf2+0x9c>
 400d418:	203ff826 	beq	r4,zero,400d3fc <__alt_data_end+0xfc00d3fc>
 400d41c:	00bfffc4 	movi	r2,-1
 400d420:	f800283a 	ret
 400d424:	403fe626 	beq	r8,zero,400d3c0 <__alt_data_end+0xfc00d3c0>
 400d428:	003ff706 	br	400d408 <__alt_data_end+0xfc00d408>
 400d42c:	18bffa16 	blt	r3,r2,400d418 <__alt_data_end+0xfc00d418>
 400d430:	10c00216 	blt	r2,r3,400d43c <__gesf2+0xac>
 400d434:	323ff836 	bltu	r6,r8,400d418 <__alt_data_end+0xfc00d418>
 400d438:	4180022e 	bgeu	r8,r6,400d444 <__gesf2+0xb4>
 400d43c:	203fef1e 	bne	r4,zero,400d3fc <__alt_data_end+0xfc00d3fc>
 400d440:	003ff606 	br	400d41c <__alt_data_end+0xfc00d41c>
 400d444:	0005883a 	mov	r2,zero
 400d448:	f800283a 	ret

0400d44c <__mulsf3>:
 400d44c:	defff504 	addi	sp,sp,-44
 400d450:	dc000115 	stw	r16,4(sp)
 400d454:	2020d5fa 	srli	r16,r4,23
 400d458:	dd400615 	stw	r21,24(sp)
 400d45c:	202ad7fa 	srli	r21,r4,31
 400d460:	dc800315 	stw	r18,12(sp)
 400d464:	04802034 	movhi	r18,128
 400d468:	df000915 	stw	fp,36(sp)
 400d46c:	dd000515 	stw	r20,20(sp)
 400d470:	94bfffc4 	addi	r18,r18,-1
 400d474:	dfc00a15 	stw	ra,40(sp)
 400d478:	ddc00815 	stw	r23,32(sp)
 400d47c:	dd800715 	stw	r22,28(sp)
 400d480:	dcc00415 	stw	r19,16(sp)
 400d484:	dc400215 	stw	r17,8(sp)
 400d488:	84003fcc 	andi	r16,r16,255
 400d48c:	9124703a 	and	r18,r18,r4
 400d490:	a829883a 	mov	r20,r21
 400d494:	af003fcc 	andi	fp,r21,255
 400d498:	80005426 	beq	r16,zero,400d5ec <__mulsf3+0x1a0>
 400d49c:	00803fc4 	movi	r2,255
 400d4a0:	80802f26 	beq	r16,r2,400d560 <__mulsf3+0x114>
 400d4a4:	91002034 	orhi	r4,r18,128
 400d4a8:	202490fa 	slli	r18,r4,3
 400d4ac:	843fe044 	addi	r16,r16,-127
 400d4b0:	0023883a 	mov	r17,zero
 400d4b4:	002f883a 	mov	r23,zero
 400d4b8:	2804d5fa 	srli	r2,r5,23
 400d4bc:	282cd7fa 	srli	r22,r5,31
 400d4c0:	01002034 	movhi	r4,128
 400d4c4:	213fffc4 	addi	r4,r4,-1
 400d4c8:	10803fcc 	andi	r2,r2,255
 400d4cc:	2166703a 	and	r19,r4,r5
 400d4d0:	b1803fcc 	andi	r6,r22,255
 400d4d4:	10004c26 	beq	r2,zero,400d608 <__mulsf3+0x1bc>
 400d4d8:	00c03fc4 	movi	r3,255
 400d4dc:	10c04726 	beq	r2,r3,400d5fc <__mulsf3+0x1b0>
 400d4e0:	99002034 	orhi	r4,r19,128
 400d4e4:	202690fa 	slli	r19,r4,3
 400d4e8:	10bfe044 	addi	r2,r2,-127
 400d4ec:	0007883a 	mov	r3,zero
 400d4f0:	80a1883a 	add	r16,r16,r2
 400d4f4:	010003c4 	movi	r4,15
 400d4f8:	1c44b03a 	or	r2,r3,r17
 400d4fc:	b56af03a 	xor	r21,r22,r21
 400d500:	81c00044 	addi	r7,r16,1
 400d504:	20806b36 	bltu	r4,r2,400d6b4 <__mulsf3+0x268>
 400d508:	100490ba 	slli	r2,r2,2
 400d50c:	01010074 	movhi	r4,1025
 400d510:	21354804 	addi	r4,r4,-10976
 400d514:	1105883a 	add	r2,r2,r4
 400d518:	10800017 	ldw	r2,0(r2)
 400d51c:	1000683a 	jmp	r2
 400d520:	0400d6b4 	movhi	r16,858
 400d524:	0400d574 	movhi	r16,853
 400d528:	0400d574 	movhi	r16,853
 400d52c:	0400d570 	cmpltui	r16,zero,853
 400d530:	0400d698 	cmpnei	r16,zero,858
 400d534:	0400d698 	cmpnei	r16,zero,858
 400d538:	0400d684 	movi	r16,858
 400d53c:	0400d570 	cmpltui	r16,zero,853
 400d540:	0400d698 	cmpnei	r16,zero,858
 400d544:	0400d684 	movi	r16,858
 400d548:	0400d698 	cmpnei	r16,zero,858
 400d54c:	0400d570 	cmpltui	r16,zero,853
 400d550:	0400d6a4 	muli	r16,zero,858
 400d554:	0400d6a4 	muli	r16,zero,858
 400d558:	0400d6a4 	muli	r16,zero,858
 400d55c:	0400d7b4 	movhi	r16,862
 400d560:	90003b1e 	bne	r18,zero,400d650 <__mulsf3+0x204>
 400d564:	04400204 	movi	r17,8
 400d568:	05c00084 	movi	r23,2
 400d56c:	003fd206 	br	400d4b8 <__alt_data_end+0xfc00d4b8>
 400d570:	302b883a 	mov	r21,r6
 400d574:	00800084 	movi	r2,2
 400d578:	18802626 	beq	r3,r2,400d614 <__mulsf3+0x1c8>
 400d57c:	008000c4 	movi	r2,3
 400d580:	1880b826 	beq	r3,r2,400d864 <__mulsf3+0x418>
 400d584:	00800044 	movi	r2,1
 400d588:	1880af1e 	bne	r3,r2,400d848 <__mulsf3+0x3fc>
 400d58c:	a829883a 	mov	r20,r21
 400d590:	0007883a 	mov	r3,zero
 400d594:	0009883a 	mov	r4,zero
 400d598:	18803fcc 	andi	r2,r3,255
 400d59c:	100695fa 	slli	r3,r2,23
 400d5a0:	a0803fcc 	andi	r2,r20,255
 400d5a4:	100a97fa 	slli	r5,r2,31
 400d5a8:	00802034 	movhi	r2,128
 400d5ac:	10bfffc4 	addi	r2,r2,-1
 400d5b0:	2084703a 	and	r2,r4,r2
 400d5b4:	10c4b03a 	or	r2,r2,r3
 400d5b8:	1144b03a 	or	r2,r2,r5
 400d5bc:	dfc00a17 	ldw	ra,40(sp)
 400d5c0:	df000917 	ldw	fp,36(sp)
 400d5c4:	ddc00817 	ldw	r23,32(sp)
 400d5c8:	dd800717 	ldw	r22,28(sp)
 400d5cc:	dd400617 	ldw	r21,24(sp)
 400d5d0:	dd000517 	ldw	r20,20(sp)
 400d5d4:	dcc00417 	ldw	r19,16(sp)
 400d5d8:	dc800317 	ldw	r18,12(sp)
 400d5dc:	dc400217 	ldw	r17,8(sp)
 400d5e0:	dc000117 	ldw	r16,4(sp)
 400d5e4:	dec00b04 	addi	sp,sp,44
 400d5e8:	f800283a 	ret
 400d5ec:	90000d1e 	bne	r18,zero,400d624 <__mulsf3+0x1d8>
 400d5f0:	04400104 	movi	r17,4
 400d5f4:	05c00044 	movi	r23,1
 400d5f8:	003faf06 	br	400d4b8 <__alt_data_end+0xfc00d4b8>
 400d5fc:	9806c03a 	cmpne	r3,r19,zero
 400d600:	18c00084 	addi	r3,r3,2
 400d604:	003fba06 	br	400d4f0 <__alt_data_end+0xfc00d4f0>
 400d608:	9800141e 	bne	r19,zero,400d65c <__mulsf3+0x210>
 400d60c:	00c00044 	movi	r3,1
 400d610:	003fb706 	br	400d4f0 <__alt_data_end+0xfc00d4f0>
 400d614:	a829883a 	mov	r20,r21
 400d618:	00ffffc4 	movi	r3,-1
 400d61c:	0009883a 	mov	r4,zero
 400d620:	003fdd06 	br	400d598 <__alt_data_end+0xfc00d598>
 400d624:	9009883a 	mov	r4,r18
 400d628:	d9400015 	stw	r5,0(sp)
 400d62c:	400e3e00 	call	400e3e0 <__clzsi2>
 400d630:	10fffec4 	addi	r3,r2,-5
 400d634:	10801d84 	addi	r2,r2,118
 400d638:	90e4983a 	sll	r18,r18,r3
 400d63c:	00a1c83a 	sub	r16,zero,r2
 400d640:	0023883a 	mov	r17,zero
 400d644:	002f883a 	mov	r23,zero
 400d648:	d9400017 	ldw	r5,0(sp)
 400d64c:	003f9a06 	br	400d4b8 <__alt_data_end+0xfc00d4b8>
 400d650:	04400304 	movi	r17,12
 400d654:	05c000c4 	movi	r23,3
 400d658:	003f9706 	br	400d4b8 <__alt_data_end+0xfc00d4b8>
 400d65c:	9809883a 	mov	r4,r19
 400d660:	d9800015 	stw	r6,0(sp)
 400d664:	400e3e00 	call	400e3e0 <__clzsi2>
 400d668:	10fffec4 	addi	r3,r2,-5
 400d66c:	10801d84 	addi	r2,r2,118
 400d670:	98e6983a 	sll	r19,r19,r3
 400d674:	0085c83a 	sub	r2,zero,r2
 400d678:	0007883a 	mov	r3,zero
 400d67c:	d9800017 	ldw	r6,0(sp)
 400d680:	003f9b06 	br	400d4f0 <__alt_data_end+0xfc00d4f0>
 400d684:	01002034 	movhi	r4,128
 400d688:	0029883a 	mov	r20,zero
 400d68c:	213fffc4 	addi	r4,r4,-1
 400d690:	00ffffc4 	movi	r3,-1
 400d694:	003fc006 	br	400d598 <__alt_data_end+0xfc00d598>
 400d698:	9027883a 	mov	r19,r18
 400d69c:	b807883a 	mov	r3,r23
 400d6a0:	003fb406 	br	400d574 <__alt_data_end+0xfc00d574>
 400d6a4:	9027883a 	mov	r19,r18
 400d6a8:	e02b883a 	mov	r21,fp
 400d6ac:	b807883a 	mov	r3,r23
 400d6b0:	003fb006 	br	400d574 <__alt_data_end+0xfc00d574>
 400d6b4:	9028d43a 	srli	r20,r18,16
 400d6b8:	982cd43a 	srli	r22,r19,16
 400d6bc:	94bfffcc 	andi	r18,r18,65535
 400d6c0:	9cffffcc 	andi	r19,r19,65535
 400d6c4:	980b883a 	mov	r5,r19
 400d6c8:	9009883a 	mov	r4,r18
 400d6cc:	d9c00015 	stw	r7,0(sp)
 400d6d0:	400d3680 	call	400d368 <__mulsi3>
 400d6d4:	a00b883a 	mov	r5,r20
 400d6d8:	9809883a 	mov	r4,r19
 400d6dc:	1023883a 	mov	r17,r2
 400d6e0:	400d3680 	call	400d368 <__mulsi3>
 400d6e4:	a009883a 	mov	r4,r20
 400d6e8:	b00b883a 	mov	r5,r22
 400d6ec:	1027883a 	mov	r19,r2
 400d6f0:	400d3680 	call	400d368 <__mulsi3>
 400d6f4:	b00b883a 	mov	r5,r22
 400d6f8:	9009883a 	mov	r4,r18
 400d6fc:	1029883a 	mov	r20,r2
 400d700:	400d3680 	call	400d368 <__mulsi3>
 400d704:	8806d43a 	srli	r3,r17,16
 400d708:	14c5883a 	add	r2,r2,r19
 400d70c:	d9c00017 	ldw	r7,0(sp)
 400d710:	1885883a 	add	r2,r3,r2
 400d714:	14c0022e 	bgeu	r2,r19,400d720 <__mulsf3+0x2d4>
 400d718:	00c00074 	movhi	r3,1
 400d71c:	a0e9883a 	add	r20,r20,r3
 400d720:	1026943a 	slli	r19,r2,16
 400d724:	8c7fffcc 	andi	r17,r17,65535
 400d728:	1004d43a 	srli	r2,r2,16
 400d72c:	9c63883a 	add	r17,r19,r17
 400d730:	882691ba 	slli	r19,r17,6
 400d734:	1505883a 	add	r2,r2,r20
 400d738:	8822d6ba 	srli	r17,r17,26
 400d73c:	100891ba 	slli	r4,r2,6
 400d740:	9826c03a 	cmpne	r19,r19,zero
 400d744:	9c62b03a 	or	r17,r19,r17
 400d748:	8926b03a 	or	r19,r17,r4
 400d74c:	9882002c 	andhi	r2,r19,2048
 400d750:	10000426 	beq	r2,zero,400d764 <__mulsf3+0x318>
 400d754:	9804d07a 	srli	r2,r19,1
 400d758:	9900004c 	andi	r4,r19,1
 400d75c:	3821883a 	mov	r16,r7
 400d760:	1126b03a 	or	r19,r2,r4
 400d764:	80c01fc4 	addi	r3,r16,127
 400d768:	00c0210e 	bge	zero,r3,400d7f0 <__mulsf3+0x3a4>
 400d76c:	988001cc 	andi	r2,r19,7
 400d770:	10000426 	beq	r2,zero,400d784 <__mulsf3+0x338>
 400d774:	988003cc 	andi	r2,r19,15
 400d778:	01000104 	movi	r4,4
 400d77c:	11000126 	beq	r2,r4,400d784 <__mulsf3+0x338>
 400d780:	9927883a 	add	r19,r19,r4
 400d784:	9882002c 	andhi	r2,r19,2048
 400d788:	10000426 	beq	r2,zero,400d79c <__mulsf3+0x350>
 400d78c:	00be0034 	movhi	r2,63488
 400d790:	10bfffc4 	addi	r2,r2,-1
 400d794:	80c02004 	addi	r3,r16,128
 400d798:	98a6703a 	and	r19,r19,r2
 400d79c:	00803f84 	movi	r2,254
 400d7a0:	10ff9c16 	blt	r2,r3,400d614 <__alt_data_end+0xfc00d614>
 400d7a4:	980891ba 	slli	r4,r19,6
 400d7a8:	a829883a 	mov	r20,r21
 400d7ac:	2008d27a 	srli	r4,r4,9
 400d7b0:	003f7906 	br	400d598 <__alt_data_end+0xfc00d598>
 400d7b4:	9080102c 	andhi	r2,r18,64
 400d7b8:	10000826 	beq	r2,zero,400d7dc <__mulsf3+0x390>
 400d7bc:	9880102c 	andhi	r2,r19,64
 400d7c0:	1000061e 	bne	r2,zero,400d7dc <__mulsf3+0x390>
 400d7c4:	00802034 	movhi	r2,128
 400d7c8:	99001034 	orhi	r4,r19,64
 400d7cc:	10bfffc4 	addi	r2,r2,-1
 400d7d0:	b029883a 	mov	r20,r22
 400d7d4:	2088703a 	and	r4,r4,r2
 400d7d8:	003fad06 	br	400d690 <__alt_data_end+0xfc00d690>
 400d7dc:	00802034 	movhi	r2,128
 400d7e0:	91001034 	orhi	r4,r18,64
 400d7e4:	10bfffc4 	addi	r2,r2,-1
 400d7e8:	2088703a 	and	r4,r4,r2
 400d7ec:	003fa806 	br	400d690 <__alt_data_end+0xfc00d690>
 400d7f0:	00800044 	movi	r2,1
 400d7f4:	10c7c83a 	sub	r3,r2,r3
 400d7f8:	008006c4 	movi	r2,27
 400d7fc:	10ff6316 	blt	r2,r3,400d58c <__alt_data_end+0xfc00d58c>
 400d800:	00800804 	movi	r2,32
 400d804:	10c5c83a 	sub	r2,r2,r3
 400d808:	9884983a 	sll	r2,r19,r2
 400d80c:	98c6d83a 	srl	r3,r19,r3
 400d810:	1004c03a 	cmpne	r2,r2,zero
 400d814:	1884b03a 	or	r2,r3,r2
 400d818:	10c001cc 	andi	r3,r2,7
 400d81c:	18000426 	beq	r3,zero,400d830 <__mulsf3+0x3e4>
 400d820:	10c003cc 	andi	r3,r2,15
 400d824:	01000104 	movi	r4,4
 400d828:	19000126 	beq	r3,r4,400d830 <__mulsf3+0x3e4>
 400d82c:	1105883a 	add	r2,r2,r4
 400d830:	10c1002c 	andhi	r3,r2,1024
 400d834:	18000626 	beq	r3,zero,400d850 <__mulsf3+0x404>
 400d838:	a829883a 	mov	r20,r21
 400d83c:	00c00044 	movi	r3,1
 400d840:	0009883a 	mov	r4,zero
 400d844:	003f5406 	br	400d598 <__alt_data_end+0xfc00d598>
 400d848:	3821883a 	mov	r16,r7
 400d84c:	003fc506 	br	400d764 <__alt_data_end+0xfc00d764>
 400d850:	100491ba 	slli	r2,r2,6
 400d854:	a829883a 	mov	r20,r21
 400d858:	0007883a 	mov	r3,zero
 400d85c:	1008d27a 	srli	r4,r2,9
 400d860:	003f4d06 	br	400d598 <__alt_data_end+0xfc00d598>
 400d864:	00802034 	movhi	r2,128
 400d868:	99001034 	orhi	r4,r19,64
 400d86c:	10bfffc4 	addi	r2,r2,-1
 400d870:	a829883a 	mov	r20,r21
 400d874:	2088703a 	and	r4,r4,r2
 400d878:	003f8506 	br	400d690 <__alt_data_end+0xfc00d690>

0400d87c <__subsf3>:
 400d87c:	defffc04 	addi	sp,sp,-16
 400d880:	280cd5fa 	srli	r6,r5,23
 400d884:	dc000015 	stw	r16,0(sp)
 400d888:	01c02034 	movhi	r7,128
 400d88c:	2020d5fa 	srli	r16,r4,23
 400d890:	39ffffc4 	addi	r7,r7,-1
 400d894:	3906703a 	and	r3,r7,r4
 400d898:	dc400115 	stw	r17,4(sp)
 400d89c:	394e703a 	and	r7,r7,r5
 400d8a0:	2022d7fa 	srli	r17,r4,31
 400d8a4:	dfc00315 	stw	ra,12(sp)
 400d8a8:	dc800215 	stw	r18,8(sp)
 400d8ac:	31803fcc 	andi	r6,r6,255
 400d8b0:	01003fc4 	movi	r4,255
 400d8b4:	84003fcc 	andi	r16,r16,255
 400d8b8:	180690fa 	slli	r3,r3,3
 400d8bc:	2804d7fa 	srli	r2,r5,31
 400d8c0:	380e90fa 	slli	r7,r7,3
 400d8c4:	31006d26 	beq	r6,r4,400da7c <__subsf3+0x200>
 400d8c8:	1080005c 	xori	r2,r2,1
 400d8cc:	8189c83a 	sub	r4,r16,r6
 400d8d0:	14404f26 	beq	r2,r17,400da10 <__subsf3+0x194>
 400d8d4:	0100770e 	bge	zero,r4,400dab4 <__subsf3+0x238>
 400d8d8:	30001e1e 	bne	r6,zero,400d954 <__subsf3+0xd8>
 400d8dc:	38006a1e 	bne	r7,zero,400da88 <__subsf3+0x20c>
 400d8e0:	188001cc 	andi	r2,r3,7
 400d8e4:	10000426 	beq	r2,zero,400d8f8 <__subsf3+0x7c>
 400d8e8:	188003cc 	andi	r2,r3,15
 400d8ec:	01000104 	movi	r4,4
 400d8f0:	11000126 	beq	r2,r4,400d8f8 <__subsf3+0x7c>
 400d8f4:	1907883a 	add	r3,r3,r4
 400d8f8:	1881002c 	andhi	r2,r3,1024
 400d8fc:	10003926 	beq	r2,zero,400d9e4 <__subsf3+0x168>
 400d900:	84000044 	addi	r16,r16,1
 400d904:	00803fc4 	movi	r2,255
 400d908:	80807526 	beq	r16,r2,400dae0 <__subsf3+0x264>
 400d90c:	180691ba 	slli	r3,r3,6
 400d910:	8880004c 	andi	r2,r17,1
 400d914:	180ad27a 	srli	r5,r3,9
 400d918:	84003fcc 	andi	r16,r16,255
 400d91c:	800695fa 	slli	r3,r16,23
 400d920:	10803fcc 	andi	r2,r2,255
 400d924:	01002034 	movhi	r4,128
 400d928:	213fffc4 	addi	r4,r4,-1
 400d92c:	100497fa 	slli	r2,r2,31
 400d930:	2920703a 	and	r16,r5,r4
 400d934:	80e0b03a 	or	r16,r16,r3
 400d938:	8084b03a 	or	r2,r16,r2
 400d93c:	dfc00317 	ldw	ra,12(sp)
 400d940:	dc800217 	ldw	r18,8(sp)
 400d944:	dc400117 	ldw	r17,4(sp)
 400d948:	dc000017 	ldw	r16,0(sp)
 400d94c:	dec00404 	addi	sp,sp,16
 400d950:	f800283a 	ret
 400d954:	00803fc4 	movi	r2,255
 400d958:	80bfe126 	beq	r16,r2,400d8e0 <__alt_data_end+0xfc00d8e0>
 400d95c:	39c10034 	orhi	r7,r7,1024
 400d960:	008006c4 	movi	r2,27
 400d964:	11007416 	blt	r2,r4,400db38 <__subsf3+0x2bc>
 400d968:	00800804 	movi	r2,32
 400d96c:	1105c83a 	sub	r2,r2,r4
 400d970:	3884983a 	sll	r2,r7,r2
 400d974:	390ed83a 	srl	r7,r7,r4
 400d978:	1008c03a 	cmpne	r4,r2,zero
 400d97c:	390eb03a 	or	r7,r7,r4
 400d980:	19c7c83a 	sub	r3,r3,r7
 400d984:	1881002c 	andhi	r2,r3,1024
 400d988:	10001426 	beq	r2,zero,400d9dc <__subsf3+0x160>
 400d98c:	04810034 	movhi	r18,1024
 400d990:	94bfffc4 	addi	r18,r18,-1
 400d994:	1ca4703a 	and	r18,r3,r18
 400d998:	9009883a 	mov	r4,r18
 400d99c:	400e3e00 	call	400e3e0 <__clzsi2>
 400d9a0:	10bffec4 	addi	r2,r2,-5
 400d9a4:	90a4983a 	sll	r18,r18,r2
 400d9a8:	14005116 	blt	r2,r16,400daf0 <__subsf3+0x274>
 400d9ac:	1405c83a 	sub	r2,r2,r16
 400d9b0:	10c00044 	addi	r3,r2,1
 400d9b4:	00800804 	movi	r2,32
 400d9b8:	10c5c83a 	sub	r2,r2,r3
 400d9bc:	9084983a 	sll	r2,r18,r2
 400d9c0:	90e4d83a 	srl	r18,r18,r3
 400d9c4:	0021883a 	mov	r16,zero
 400d9c8:	1006c03a 	cmpne	r3,r2,zero
 400d9cc:	90c6b03a 	or	r3,r18,r3
 400d9d0:	003fc306 	br	400d8e0 <__alt_data_end+0xfc00d8e0>
 400d9d4:	2000e026 	beq	r4,zero,400dd58 <__subsf3+0x4dc>
 400d9d8:	2007883a 	mov	r3,r4
 400d9dc:	188001cc 	andi	r2,r3,7
 400d9e0:	103fc11e 	bne	r2,zero,400d8e8 <__alt_data_end+0xfc00d8e8>
 400d9e4:	180ad0fa 	srli	r5,r3,3
 400d9e8:	00c03fc4 	movi	r3,255
 400d9ec:	8880004c 	andi	r2,r17,1
 400d9f0:	80c0031e 	bne	r16,r3,400da00 <__subsf3+0x184>
 400d9f4:	28006d26 	beq	r5,zero,400dbac <__subsf3+0x330>
 400d9f8:	29401034 	orhi	r5,r5,64
 400d9fc:	043fffc4 	movi	r16,-1
 400da00:	00c02034 	movhi	r3,128
 400da04:	18ffffc4 	addi	r3,r3,-1
 400da08:	28ca703a 	and	r5,r5,r3
 400da0c:	003fc206 	br	400d918 <__alt_data_end+0xfc00d918>
 400da10:	01003c0e 	bge	zero,r4,400db04 <__subsf3+0x288>
 400da14:	30002126 	beq	r6,zero,400da9c <__subsf3+0x220>
 400da18:	01403fc4 	movi	r5,255
 400da1c:	817fb026 	beq	r16,r5,400d8e0 <__alt_data_end+0xfc00d8e0>
 400da20:	39c10034 	orhi	r7,r7,1024
 400da24:	014006c4 	movi	r5,27
 400da28:	29007416 	blt	r5,r4,400dbfc <__subsf3+0x380>
 400da2c:	01400804 	movi	r5,32
 400da30:	290bc83a 	sub	r5,r5,r4
 400da34:	394a983a 	sll	r5,r7,r5
 400da38:	390ed83a 	srl	r7,r7,r4
 400da3c:	2808c03a 	cmpne	r4,r5,zero
 400da40:	390eb03a 	or	r7,r7,r4
 400da44:	19c7883a 	add	r3,r3,r7
 400da48:	1901002c 	andhi	r4,r3,1024
 400da4c:	20003826 	beq	r4,zero,400db30 <__subsf3+0x2b4>
 400da50:	84000044 	addi	r16,r16,1
 400da54:	01003fc4 	movi	r4,255
 400da58:	81005426 	beq	r16,r4,400dbac <__subsf3+0x330>
 400da5c:	1023883a 	mov	r17,r2
 400da60:	00bf0034 	movhi	r2,64512
 400da64:	10bfffc4 	addi	r2,r2,-1
 400da68:	1900004c 	andi	r4,r3,1
 400da6c:	1886703a 	and	r3,r3,r2
 400da70:	1806d07a 	srli	r3,r3,1
 400da74:	1906b03a 	or	r3,r3,r4
 400da78:	003f9906 	br	400d8e0 <__alt_data_end+0xfc00d8e0>
 400da7c:	383f9226 	beq	r7,zero,400d8c8 <__alt_data_end+0xfc00d8c8>
 400da80:	10803fcc 	andi	r2,r2,255
 400da84:	003f9106 	br	400d8cc <__alt_data_end+0xfc00d8cc>
 400da88:	213fffc4 	addi	r4,r4,-1
 400da8c:	203fbc26 	beq	r4,zero,400d980 <__alt_data_end+0xfc00d980>
 400da90:	00803fc4 	movi	r2,255
 400da94:	80bfb21e 	bne	r16,r2,400d960 <__alt_data_end+0xfc00d960>
 400da98:	003f9106 	br	400d8e0 <__alt_data_end+0xfc00d8e0>
 400da9c:	383f9026 	beq	r7,zero,400d8e0 <__alt_data_end+0xfc00d8e0>
 400daa0:	213fffc4 	addi	r4,r4,-1
 400daa4:	203fe726 	beq	r4,zero,400da44 <__alt_data_end+0xfc00da44>
 400daa8:	01403fc4 	movi	r5,255
 400daac:	817fdd1e 	bne	r16,r5,400da24 <__alt_data_end+0xfc00da24>
 400dab0:	003f8b06 	br	400d8e0 <__alt_data_end+0xfc00d8e0>
 400dab4:	2000221e 	bne	r4,zero,400db40 <__subsf3+0x2c4>
 400dab8:	81000044 	addi	r4,r16,1
 400dabc:	21003fcc 	andi	r4,r4,255
 400dac0:	01400044 	movi	r5,1
 400dac4:	2900470e 	bge	r5,r4,400dbe4 <__subsf3+0x368>
 400dac8:	19e5c83a 	sub	r18,r3,r7
 400dacc:	9141002c 	andhi	r5,r18,1024
 400dad0:	28002d26 	beq	r5,zero,400db88 <__subsf3+0x30c>
 400dad4:	38e5c83a 	sub	r18,r7,r3
 400dad8:	1023883a 	mov	r17,r2
 400dadc:	003fae06 	br	400d998 <__alt_data_end+0xfc00d998>
 400dae0:	8880004c 	andi	r2,r17,1
 400dae4:	043fffc4 	movi	r16,-1
 400dae8:	000b883a 	mov	r5,zero
 400daec:	003f8a06 	br	400d918 <__alt_data_end+0xfc00d918>
 400daf0:	00ff0034 	movhi	r3,64512
 400daf4:	18ffffc4 	addi	r3,r3,-1
 400daf8:	80a1c83a 	sub	r16,r16,r2
 400dafc:	90c6703a 	and	r3,r18,r3
 400db00:	003f7706 	br	400d8e0 <__alt_data_end+0xfc00d8e0>
 400db04:	2000431e 	bne	r4,zero,400dc14 <__subsf3+0x398>
 400db08:	81000044 	addi	r4,r16,1
 400db0c:	21803fcc 	andi	r6,r4,255
 400db10:	01400044 	movi	r5,1
 400db14:	2980280e 	bge	r5,r6,400dbb8 <__subsf3+0x33c>
 400db18:	01403fc4 	movi	r5,255
 400db1c:	21402326 	beq	r4,r5,400dbac <__subsf3+0x330>
 400db20:	19c7883a 	add	r3,r3,r7
 400db24:	1806d07a 	srli	r3,r3,1
 400db28:	2021883a 	mov	r16,r4
 400db2c:	003f6c06 	br	400d8e0 <__alt_data_end+0xfc00d8e0>
 400db30:	1023883a 	mov	r17,r2
 400db34:	003fa906 	br	400d9dc <__alt_data_end+0xfc00d9dc>
 400db38:	01c00044 	movi	r7,1
 400db3c:	003f9006 	br	400d980 <__alt_data_end+0xfc00d980>
 400db40:	8000151e 	bne	r16,zero,400db98 <__subsf3+0x31c>
 400db44:	18002f26 	beq	r3,zero,400dc04 <__subsf3+0x388>
 400db48:	0108303a 	nor	r4,zero,r4
 400db4c:	20000a26 	beq	r4,zero,400db78 <__subsf3+0x2fc>
 400db50:	01403fc4 	movi	r5,255
 400db54:	31402b26 	beq	r6,r5,400dc04 <__subsf3+0x388>
 400db58:	014006c4 	movi	r5,27
 400db5c:	29006e16 	blt	r5,r4,400dd18 <__subsf3+0x49c>
 400db60:	01400804 	movi	r5,32
 400db64:	290bc83a 	sub	r5,r5,r4
 400db68:	194a983a 	sll	r5,r3,r5
 400db6c:	1908d83a 	srl	r4,r3,r4
 400db70:	2806c03a 	cmpne	r3,r5,zero
 400db74:	20c6b03a 	or	r3,r4,r3
 400db78:	38c7c83a 	sub	r3,r7,r3
 400db7c:	3021883a 	mov	r16,r6
 400db80:	1023883a 	mov	r17,r2
 400db84:	003f7f06 	br	400d984 <__alt_data_end+0xfc00d984>
 400db88:	903f831e 	bne	r18,zero,400d998 <__alt_data_end+0xfc00d998>
 400db8c:	0005883a 	mov	r2,zero
 400db90:	0021883a 	mov	r16,zero
 400db94:	003f9a06 	br	400da00 <__alt_data_end+0xfc00da00>
 400db98:	01403fc4 	movi	r5,255
 400db9c:	31401926 	beq	r6,r5,400dc04 <__subsf3+0x388>
 400dba0:	0109c83a 	sub	r4,zero,r4
 400dba4:	18c10034 	orhi	r3,r3,1024
 400dba8:	003feb06 	br	400db58 <__alt_data_end+0xfc00db58>
 400dbac:	043fffc4 	movi	r16,-1
 400dbb0:	000b883a 	mov	r5,zero
 400dbb4:	003f5806 	br	400d918 <__alt_data_end+0xfc00d918>
 400dbb8:	8000481e 	bne	r16,zero,400dcdc <__subsf3+0x460>
 400dbbc:	18006226 	beq	r3,zero,400dd48 <__subsf3+0x4cc>
 400dbc0:	383f4726 	beq	r7,zero,400d8e0 <__alt_data_end+0xfc00d8e0>
 400dbc4:	19c7883a 	add	r3,r3,r7
 400dbc8:	1881002c 	andhi	r2,r3,1024
 400dbcc:	103f8326 	beq	r2,zero,400d9dc <__alt_data_end+0xfc00d9dc>
 400dbd0:	00bf0034 	movhi	r2,64512
 400dbd4:	10bfffc4 	addi	r2,r2,-1
 400dbd8:	2821883a 	mov	r16,r5
 400dbdc:	1886703a 	and	r3,r3,r2
 400dbe0:	003f3f06 	br	400d8e0 <__alt_data_end+0xfc00d8e0>
 400dbe4:	80001c1e 	bne	r16,zero,400dc58 <__subsf3+0x3dc>
 400dbe8:	1800261e 	bne	r3,zero,400dc84 <__subsf3+0x408>
 400dbec:	38004c26 	beq	r7,zero,400dd20 <__subsf3+0x4a4>
 400dbf0:	3807883a 	mov	r3,r7
 400dbf4:	1023883a 	mov	r17,r2
 400dbf8:	003f3906 	br	400d8e0 <__alt_data_end+0xfc00d8e0>
 400dbfc:	01c00044 	movi	r7,1
 400dc00:	003f9006 	br	400da44 <__alt_data_end+0xfc00da44>
 400dc04:	3807883a 	mov	r3,r7
 400dc08:	3021883a 	mov	r16,r6
 400dc0c:	1023883a 	mov	r17,r2
 400dc10:	003f3306 	br	400d8e0 <__alt_data_end+0xfc00d8e0>
 400dc14:	8000161e 	bne	r16,zero,400dc70 <__subsf3+0x3f4>
 400dc18:	18002d26 	beq	r3,zero,400dcd0 <__subsf3+0x454>
 400dc1c:	0108303a 	nor	r4,zero,r4
 400dc20:	20000a26 	beq	r4,zero,400dc4c <__subsf3+0x3d0>
 400dc24:	01403fc4 	movi	r5,255
 400dc28:	31402926 	beq	r6,r5,400dcd0 <__subsf3+0x454>
 400dc2c:	014006c4 	movi	r5,27
 400dc30:	29004716 	blt	r5,r4,400dd50 <__subsf3+0x4d4>
 400dc34:	01400804 	movi	r5,32
 400dc38:	290bc83a 	sub	r5,r5,r4
 400dc3c:	194a983a 	sll	r5,r3,r5
 400dc40:	1908d83a 	srl	r4,r3,r4
 400dc44:	2806c03a 	cmpne	r3,r5,zero
 400dc48:	20c6b03a 	or	r3,r4,r3
 400dc4c:	19c7883a 	add	r3,r3,r7
 400dc50:	3021883a 	mov	r16,r6
 400dc54:	003f7c06 	br	400da48 <__alt_data_end+0xfc00da48>
 400dc58:	1800111e 	bne	r3,zero,400dca0 <__subsf3+0x424>
 400dc5c:	38003326 	beq	r7,zero,400dd2c <__subsf3+0x4b0>
 400dc60:	3807883a 	mov	r3,r7
 400dc64:	1023883a 	mov	r17,r2
 400dc68:	04003fc4 	movi	r16,255
 400dc6c:	003f1c06 	br	400d8e0 <__alt_data_end+0xfc00d8e0>
 400dc70:	01403fc4 	movi	r5,255
 400dc74:	31401626 	beq	r6,r5,400dcd0 <__subsf3+0x454>
 400dc78:	0109c83a 	sub	r4,zero,r4
 400dc7c:	18c10034 	orhi	r3,r3,1024
 400dc80:	003fea06 	br	400dc2c <__alt_data_end+0xfc00dc2c>
 400dc84:	383f1626 	beq	r7,zero,400d8e0 <__alt_data_end+0xfc00d8e0>
 400dc88:	19c9c83a 	sub	r4,r3,r7
 400dc8c:	2141002c 	andhi	r5,r4,1024
 400dc90:	283f5026 	beq	r5,zero,400d9d4 <__alt_data_end+0xfc00d9d4>
 400dc94:	38c7c83a 	sub	r3,r7,r3
 400dc98:	1023883a 	mov	r17,r2
 400dc9c:	003f1006 	br	400d8e0 <__alt_data_end+0xfc00d8e0>
 400dca0:	38001b26 	beq	r7,zero,400dd10 <__subsf3+0x494>
 400dca4:	1806d0fa 	srli	r3,r3,3
 400dca8:	1900102c 	andhi	r4,r3,64
 400dcac:	20000526 	beq	r4,zero,400dcc4 <__subsf3+0x448>
 400dcb0:	380ed0fa 	srli	r7,r7,3
 400dcb4:	3900102c 	andhi	r4,r7,64
 400dcb8:	2000021e 	bne	r4,zero,400dcc4 <__subsf3+0x448>
 400dcbc:	3807883a 	mov	r3,r7
 400dcc0:	1023883a 	mov	r17,r2
 400dcc4:	180690fa 	slli	r3,r3,3
 400dcc8:	04003fc4 	movi	r16,255
 400dccc:	003f0406 	br	400d8e0 <__alt_data_end+0xfc00d8e0>
 400dcd0:	3807883a 	mov	r3,r7
 400dcd4:	3021883a 	mov	r16,r6
 400dcd8:	003f0106 	br	400d8e0 <__alt_data_end+0xfc00d8e0>
 400dcdc:	18001726 	beq	r3,zero,400dd3c <__subsf3+0x4c0>
 400dce0:	38000b26 	beq	r7,zero,400dd10 <__subsf3+0x494>
 400dce4:	1806d0fa 	srli	r3,r3,3
 400dce8:	1900102c 	andhi	r4,r3,64
 400dcec:	20000426 	beq	r4,zero,400dd00 <__subsf3+0x484>
 400dcf0:	380ed0fa 	srli	r7,r7,3
 400dcf4:	3900102c 	andhi	r4,r7,64
 400dcf8:	2000011e 	bne	r4,zero,400dd00 <__subsf3+0x484>
 400dcfc:	3807883a 	mov	r3,r7
 400dd00:	180690fa 	slli	r3,r3,3
 400dd04:	1023883a 	mov	r17,r2
 400dd08:	04003fc4 	movi	r16,255
 400dd0c:	003ef406 	br	400d8e0 <__alt_data_end+0xfc00d8e0>
 400dd10:	04003fc4 	movi	r16,255
 400dd14:	003ef206 	br	400d8e0 <__alt_data_end+0xfc00d8e0>
 400dd18:	00c00044 	movi	r3,1
 400dd1c:	003f9606 	br	400db78 <__alt_data_end+0xfc00db78>
 400dd20:	000b883a 	mov	r5,zero
 400dd24:	0005883a 	mov	r2,zero
 400dd28:	003f3506 	br	400da00 <__alt_data_end+0xfc00da00>
 400dd2c:	01402034 	movhi	r5,128
 400dd30:	297fffc4 	addi	r5,r5,-1
 400dd34:	0005883a 	mov	r2,zero
 400dd38:	003f2f06 	br	400d9f8 <__alt_data_end+0xfc00d9f8>
 400dd3c:	3807883a 	mov	r3,r7
 400dd40:	04003fc4 	movi	r16,255
 400dd44:	003ee606 	br	400d8e0 <__alt_data_end+0xfc00d8e0>
 400dd48:	3807883a 	mov	r3,r7
 400dd4c:	003ee406 	br	400d8e0 <__alt_data_end+0xfc00d8e0>
 400dd50:	00c00044 	movi	r3,1
 400dd54:	003fbd06 	br	400dc4c <__alt_data_end+0xfc00dc4c>
 400dd58:	0005883a 	mov	r2,zero
 400dd5c:	003f2806 	br	400da00 <__alt_data_end+0xfc00da00>

0400dd60 <__fixsfsi>:
 400dd60:	200ad5fa 	srli	r5,r4,23
 400dd64:	00c02034 	movhi	r3,128
 400dd68:	18ffffc4 	addi	r3,r3,-1
 400dd6c:	29403fcc 	andi	r5,r5,255
 400dd70:	00801f84 	movi	r2,126
 400dd74:	1906703a 	and	r3,r3,r4
 400dd78:	2008d7fa 	srli	r4,r4,31
 400dd7c:	11400e0e 	bge	r2,r5,400ddb8 <__fixsfsi+0x58>
 400dd80:	00802744 	movi	r2,157
 400dd84:	11400816 	blt	r2,r5,400dda8 <__fixsfsi+0x48>
 400dd88:	00802544 	movi	r2,149
 400dd8c:	18c02034 	orhi	r3,r3,128
 400dd90:	11400b0e 	bge	r2,r5,400ddc0 <__fixsfsi+0x60>
 400dd94:	28bfda84 	addi	r2,r5,-150
 400dd98:	1884983a 	sll	r2,r3,r2
 400dd9c:	20000726 	beq	r4,zero,400ddbc <__fixsfsi+0x5c>
 400dda0:	0085c83a 	sub	r2,zero,r2
 400dda4:	f800283a 	ret
 400dda8:	00a00034 	movhi	r2,32768
 400ddac:	10bfffc4 	addi	r2,r2,-1
 400ddb0:	2085883a 	add	r2,r4,r2
 400ddb4:	f800283a 	ret
 400ddb8:	0005883a 	mov	r2,zero
 400ddbc:	f800283a 	ret
 400ddc0:	00802584 	movi	r2,150
 400ddc4:	1145c83a 	sub	r2,r2,r5
 400ddc8:	1884d83a 	srl	r2,r3,r2
 400ddcc:	003ff306 	br	400dd9c <__alt_data_end+0xfc00dd9c>

0400ddd0 <__floatunsisf>:
 400ddd0:	defffe04 	addi	sp,sp,-8
 400ddd4:	dfc00115 	stw	ra,4(sp)
 400ddd8:	dc000015 	stw	r16,0(sp)
 400dddc:	20002c26 	beq	r4,zero,400de90 <__floatunsisf+0xc0>
 400dde0:	2021883a 	mov	r16,r4
 400dde4:	400e3e00 	call	400e3e0 <__clzsi2>
 400dde8:	00c02784 	movi	r3,158
 400ddec:	1887c83a 	sub	r3,r3,r2
 400ddf0:	01002584 	movi	r4,150
 400ddf4:	20c00f16 	blt	r4,r3,400de34 <__floatunsisf+0x64>
 400ddf8:	20c9c83a 	sub	r4,r4,r3
 400ddfc:	8108983a 	sll	r4,r16,r4
 400de00:	00802034 	movhi	r2,128
 400de04:	10bfffc4 	addi	r2,r2,-1
 400de08:	2088703a 	and	r4,r4,r2
 400de0c:	18803fcc 	andi	r2,r3,255
 400de10:	100695fa 	slli	r3,r2,23
 400de14:	00802034 	movhi	r2,128
 400de18:	10bfffc4 	addi	r2,r2,-1
 400de1c:	2084703a 	and	r2,r4,r2
 400de20:	10c4b03a 	or	r2,r2,r3
 400de24:	dfc00117 	ldw	ra,4(sp)
 400de28:	dc000017 	ldw	r16,0(sp)
 400de2c:	dec00204 	addi	sp,sp,8
 400de30:	f800283a 	ret
 400de34:	01002644 	movi	r4,153
 400de38:	20c01816 	blt	r4,r3,400de9c <__floatunsisf+0xcc>
 400de3c:	20c9c83a 	sub	r4,r4,r3
 400de40:	8108983a 	sll	r4,r16,r4
 400de44:	017f0034 	movhi	r5,64512
 400de48:	297fffc4 	addi	r5,r5,-1
 400de4c:	218001cc 	andi	r6,r4,7
 400de50:	214a703a 	and	r5,r4,r5
 400de54:	30000426 	beq	r6,zero,400de68 <__floatunsisf+0x98>
 400de58:	210003cc 	andi	r4,r4,15
 400de5c:	01800104 	movi	r6,4
 400de60:	21800126 	beq	r4,r6,400de68 <__floatunsisf+0x98>
 400de64:	298b883a 	add	r5,r5,r6
 400de68:	2901002c 	andhi	r4,r5,1024
 400de6c:	20000526 	beq	r4,zero,400de84 <__floatunsisf+0xb4>
 400de70:	00c027c4 	movi	r3,159
 400de74:	1887c83a 	sub	r3,r3,r2
 400de78:	00bf0034 	movhi	r2,64512
 400de7c:	10bfffc4 	addi	r2,r2,-1
 400de80:	288a703a 	and	r5,r5,r2
 400de84:	280891ba 	slli	r4,r5,6
 400de88:	2008d27a 	srli	r4,r4,9
 400de8c:	003fdf06 	br	400de0c <__alt_data_end+0xfc00de0c>
 400de90:	0007883a 	mov	r3,zero
 400de94:	0009883a 	mov	r4,zero
 400de98:	003fdc06 	br	400de0c <__alt_data_end+0xfc00de0c>
 400de9c:	01402e44 	movi	r5,185
 400dea0:	28cbc83a 	sub	r5,r5,r3
 400dea4:	01000144 	movi	r4,5
 400dea8:	2089c83a 	sub	r4,r4,r2
 400deac:	814a983a 	sll	r5,r16,r5
 400deb0:	8108d83a 	srl	r4,r16,r4
 400deb4:	2820c03a 	cmpne	r16,r5,zero
 400deb8:	2408b03a 	or	r4,r4,r16
 400debc:	003fe106 	br	400de44 <__alt_data_end+0xfc00de44>

0400dec0 <_Unwind_ForcedUnwind_Phase2>:
 400dec0:	defff404 	addi	sp,sp,-48
 400dec4:	dd800915 	stw	r22,36(sp)
 400dec8:	058100f4 	movhi	r22,1027
 400decc:	ddc00a15 	stw	r23,40(sp)
 400ded0:	dd400815 	stw	r21,32(sp)
 400ded4:	dd000715 	stw	r20,28(sp)
 400ded8:	dcc00615 	stw	r19,24(sp)
 400dedc:	dc400415 	stw	r17,16(sp)
 400dee0:	dc000315 	stw	r16,12(sp)
 400dee4:	dfc00b15 	stw	ra,44(sp)
 400dee8:	dc800515 	stw	r18,20(sp)
 400deec:	2021883a 	mov	r16,r4
 400def0:	2823883a 	mov	r17,r5
 400def4:	24c00317 	ldw	r19,12(r4)
 400def8:	25000417 	ldw	r20,16(r4)
 400defc:	28c00017 	ldw	r3,0(r5)
 400df00:	b5b61604 	addi	r22,r22,-10152
 400df04:	054001c4 	movi	r21,7
 400df08:	05c00204 	movi	r23,8
 400df0c:	00001606 	br	400df68 <_Unwind_ForcedUnwind_Phase2+0xa8>
 400df10:	81800017 	ldw	r6,0(r16)
 400df14:	81c00117 	ldw	r7,4(r16)
 400df18:	1c800617 	ldw	r18,24(r3)
 400df1c:	dd000215 	stw	r20,8(sp)
 400df20:	dc400115 	stw	r17,4(sp)
 400df24:	dc000015 	stw	r16,0(sp)
 400df28:	983ee83a 	callr	r19
 400df2c:	01400284 	movi	r5,10
 400df30:	01000044 	movi	r4,1
 400df34:	1000241e 	bne	r2,zero,400dfc8 <_Unwind_ForcedUnwind_Phase2+0x108>
 400df38:	90000726 	beq	r18,zero,400df58 <_Unwind_ForcedUnwind_Phase2+0x98>
 400df3c:	81800017 	ldw	r6,0(r16)
 400df40:	81c00117 	ldw	r7,4(r16)
 400df44:	dc400115 	stw	r17,4(sp)
 400df48:	dc000015 	stw	r16,0(sp)
 400df4c:	903ee83a 	callr	r18
 400df50:	15401f26 	beq	r2,r21,400dfd0 <_Unwind_ForcedUnwind_Phase2+0x110>
 400df54:	15c01c1e 	bne	r2,r23,400dfc8 <_Unwind_ForcedUnwind_Phase2+0x108>
 400df58:	88800017 	ldw	r2,0(r17)
 400df5c:	10c00017 	ldw	r3,0(r2)
 400df60:	b0c00015 	stw	r3,0(r22)
 400df64:	88c00015 	stw	r3,0(r17)
 400df68:	01400284 	movi	r5,10
 400df6c:	01000044 	movi	r4,1
 400df70:	183fe71e 	bne	r3,zero,400df10 <__alt_data_end+0xfc00df10>
 400df74:	81800017 	ldw	r6,0(r16)
 400df78:	81c00117 	ldw	r7,4(r16)
 400df7c:	01400684 	movi	r5,26
 400df80:	dd000215 	stw	r20,8(sp)
 400df84:	dc400115 	stw	r17,4(sp)
 400df88:	dc000015 	stw	r16,0(sp)
 400df8c:	01000044 	movi	r4,1
 400df90:	983ee83a 	callr	r19
 400df94:	10000c1e 	bne	r2,zero,400dfc8 <_Unwind_ForcedUnwind_Phase2+0x108>
 400df98:	00800144 	movi	r2,5
 400df9c:	dfc00b17 	ldw	ra,44(sp)
 400dfa0:	ddc00a17 	ldw	r23,40(sp)
 400dfa4:	dd800917 	ldw	r22,36(sp)
 400dfa8:	dd400817 	ldw	r21,32(sp)
 400dfac:	dd000717 	ldw	r20,28(sp)
 400dfb0:	dcc00617 	ldw	r19,24(sp)
 400dfb4:	dc800517 	ldw	r18,20(sp)
 400dfb8:	dc400417 	ldw	r17,16(sp)
 400dfbc:	dc000317 	ldw	r16,12(sp)
 400dfc0:	dec00c04 	addi	sp,sp,48
 400dfc4:	f800283a 	ret
 400dfc8:	00800084 	movi	r2,2
 400dfcc:	003ff306 	br	400df9c <__alt_data_end+0xfc00df9c>
 400dfd0:	a805883a 	mov	r2,r21
 400dfd4:	003ff106 	br	400df9c <__alt_data_end+0xfc00df9c>

0400dfd8 <_Unwind_RaiseException_Phase2>:
 400dfd8:	28c00017 	ldw	r3,0(r5)
 400dfdc:	defff804 	addi	sp,sp,-32
 400dfe0:	dcc00515 	stw	r19,20(sp)
 400dfe4:	dc800415 	stw	r18,16(sp)
 400dfe8:	dc400315 	stw	r17,12(sp)
 400dfec:	dc000215 	stw	r16,8(sp)
 400dff0:	dfc00715 	stw	ra,28(sp)
 400dff4:	dd000615 	stw	r20,24(sp)
 400dff8:	2823883a 	mov	r17,r5
 400dffc:	2021883a 	mov	r16,r4
 400e000:	048001c4 	movi	r18,7
 400e004:	04c00204 	movi	r19,8
 400e008:	18001326 	beq	r3,zero,400e058 <_Unwind_RaiseException_Phase2+0x80>
 400e00c:	81000417 	ldw	r4,16(r16)
 400e010:	1a000617 	ldw	r8,24(r3)
 400e014:	19001926 	beq	r3,r4,400e07c <_Unwind_RaiseException_Phase2+0xa4>
 400e018:	40000c26 	beq	r8,zero,400e04c <_Unwind_RaiseException_Phase2+0x74>
 400e01c:	01400084 	movi	r5,2
 400e020:	0029883a 	mov	r20,zero
 400e024:	81800017 	ldw	r6,0(r16)
 400e028:	81c00117 	ldw	r7,4(r16)
 400e02c:	01000044 	movi	r4,1
 400e030:	dc400115 	stw	r17,4(sp)
 400e034:	dc000015 	stw	r16,0(sp)
 400e038:	403ee83a 	callr	r8
 400e03c:	14801326 	beq	r2,r18,400e08c <_Unwind_RaiseException_Phase2+0xb4>
 400e040:	14c0051e 	bne	r2,r19,400e058 <_Unwind_RaiseException_Phase2+0x80>
 400e044:	a000131e 	bne	r20,zero,400e094 <_Unwind_RaiseException_Phase2+0xbc>
 400e048:	88c00017 	ldw	r3,0(r17)
 400e04c:	18c00017 	ldw	r3,0(r3)
 400e050:	88c00015 	stw	r3,0(r17)
 400e054:	183fed1e 	bne	r3,zero,400e00c <__alt_data_end+0xfc00e00c>
 400e058:	00800084 	movi	r2,2
 400e05c:	dfc00717 	ldw	ra,28(sp)
 400e060:	dd000617 	ldw	r20,24(sp)
 400e064:	dcc00517 	ldw	r19,20(sp)
 400e068:	dc800417 	ldw	r18,16(sp)
 400e06c:	dc400317 	ldw	r17,12(sp)
 400e070:	dc000217 	ldw	r16,8(sp)
 400e074:	dec00804 	addi	sp,sp,32
 400e078:	f800283a 	ret
 400e07c:	40000526 	beq	r8,zero,400e094 <_Unwind_RaiseException_Phase2+0xbc>
 400e080:	01400184 	movi	r5,6
 400e084:	05000104 	movi	r20,4
 400e088:	003fe606 	br	400e024 <__alt_data_end+0xfc00e024>
 400e08c:	9005883a 	mov	r2,r18
 400e090:	003ff206 	br	400e05c <__alt_data_end+0xfc00e05c>
 400e094:	400e4440 	call	400e444 <abort>

0400e098 <uw_install_context.isra.1>:
 400e098:	20c00017 	ldw	r3,0(r4)
 400e09c:	deffff04 	addi	sp,sp,-4
 400e0a0:	014100f4 	movhi	r5,1027
 400e0a4:	19000917 	ldw	r4,36(r3)
 400e0a8:	df000015 	stw	fp,0(sp)
 400e0ac:	18800804 	addi	r2,r3,32
 400e0b0:	d839883a 	mov	fp,sp
 400e0b4:	29761604 	addi	r5,r5,-10152
 400e0b8:	28c00015 	stw	r3,0(r5)
 400e0bc:	17000017 	ldw	fp,0(r2)
 400e0c0:	1ec00a17 	ldw	sp,40(r3)
 400e0c4:	2000683a 	jmp	r4

0400e0c8 <_Unwind_SjLj_Register>:
 400e0c8:	008100f4 	movhi	r2,1027
 400e0cc:	10b61604 	addi	r2,r2,-10152
 400e0d0:	10c00017 	ldw	r3,0(r2)
 400e0d4:	11000015 	stw	r4,0(r2)
 400e0d8:	20c00015 	stw	r3,0(r4)
 400e0dc:	f800283a 	ret

0400e0e0 <_Unwind_SjLj_Unregister>:
 400e0e0:	20c00017 	ldw	r3,0(r4)
 400e0e4:	008100f4 	movhi	r2,1027
 400e0e8:	10b61604 	addi	r2,r2,-10152
 400e0ec:	10c00015 	stw	r3,0(r2)
 400e0f0:	f800283a 	ret

0400e0f4 <_Unwind_GetGR>:
 400e0f4:	20800017 	ldw	r2,0(r4)
 400e0f8:	29400084 	addi	r5,r5,2
 400e0fc:	294b883a 	add	r5,r5,r5
 400e100:	294b883a 	add	r5,r5,r5
 400e104:	114b883a 	add	r5,r2,r5
 400e108:	28800017 	ldw	r2,0(r5)
 400e10c:	f800283a 	ret

0400e110 <_Unwind_GetCFA>:
 400e110:	20800017 	ldw	r2,0(r4)
 400e114:	10000226 	beq	r2,zero,400e120 <_Unwind_GetCFA+0x10>
 400e118:	10800a17 	ldw	r2,40(r2)
 400e11c:	f800283a 	ret
 400e120:	0005883a 	mov	r2,zero
 400e124:	f800283a 	ret

0400e128 <_Unwind_SetGR>:
 400e128:	20800017 	ldw	r2,0(r4)
 400e12c:	29400084 	addi	r5,r5,2
 400e130:	294b883a 	add	r5,r5,r5
 400e134:	294b883a 	add	r5,r5,r5
 400e138:	114b883a 	add	r5,r2,r5
 400e13c:	29800015 	stw	r6,0(r5)
 400e140:	f800283a 	ret

0400e144 <_Unwind_GetIP>:
 400e144:	20800017 	ldw	r2,0(r4)
 400e148:	10800117 	ldw	r2,4(r2)
 400e14c:	10800044 	addi	r2,r2,1
 400e150:	f800283a 	ret

0400e154 <_Unwind_GetIPInfo>:
 400e154:	20800017 	ldw	r2,0(r4)
 400e158:	28000015 	stw	zero,0(r5)
 400e15c:	10000326 	beq	r2,zero,400e16c <_Unwind_GetIPInfo+0x18>
 400e160:	10800117 	ldw	r2,4(r2)
 400e164:	10800044 	addi	r2,r2,1
 400e168:	f800283a 	ret
 400e16c:	0005883a 	mov	r2,zero
 400e170:	f800283a 	ret

0400e174 <_Unwind_SetIP>:
 400e174:	20800017 	ldw	r2,0(r4)
 400e178:	297fffc4 	addi	r5,r5,-1
 400e17c:	11400115 	stw	r5,4(r2)
 400e180:	f800283a 	ret

0400e184 <_Unwind_GetLanguageSpecificData>:
 400e184:	20800017 	ldw	r2,0(r4)
 400e188:	10800717 	ldw	r2,28(r2)
 400e18c:	f800283a 	ret

0400e190 <_Unwind_GetRegionStart>:
 400e190:	0005883a 	mov	r2,zero
 400e194:	f800283a 	ret

0400e198 <_Unwind_FindEnclosingFunction>:
 400e198:	0005883a 	mov	r2,zero
 400e19c:	f800283a 	ret

0400e1a0 <_Unwind_GetDataRelBase>:
 400e1a0:	0005883a 	mov	r2,zero
 400e1a4:	f800283a 	ret

0400e1a8 <_Unwind_GetTextRelBase>:
 400e1a8:	0005883a 	mov	r2,zero
 400e1ac:	f800283a 	ret

0400e1b0 <_Unwind_SjLj_RaiseException>:
 400e1b0:	008100f4 	movhi	r2,1027
 400e1b4:	defff804 	addi	sp,sp,-32
 400e1b8:	10b61604 	addi	r2,r2,-10152
 400e1bc:	dc800515 	stw	r18,20(sp)
 400e1c0:	14800017 	ldw	r18,0(r2)
 400e1c4:	dfc00715 	stw	ra,28(sp)
 400e1c8:	dcc00615 	stw	r19,24(sp)
 400e1cc:	dc400415 	stw	r17,16(sp)
 400e1d0:	dc000315 	stw	r16,12(sp)
 400e1d4:	dc800215 	stw	r18,8(sp)
 400e1d8:	90001426 	beq	r18,zero,400e22c <_Unwind_SjLj_RaiseException+0x7c>
 400e1dc:	2021883a 	mov	r16,r4
 400e1e0:	9005883a 	mov	r2,r18
 400e1e4:	04400184 	movi	r17,6
 400e1e8:	04c00204 	movi	r19,8
 400e1ec:	10800617 	ldw	r2,24(r2)
 400e1f0:	10000a26 	beq	r2,zero,400e21c <_Unwind_SjLj_RaiseException+0x6c>
 400e1f4:	81800017 	ldw	r6,0(r16)
 400e1f8:	81c00117 	ldw	r7,4(r16)
 400e1fc:	01400044 	movi	r5,1
 400e200:	d8c00204 	addi	r3,sp,8
 400e204:	d8c00115 	stw	r3,4(sp)
 400e208:	dc000015 	stw	r16,0(sp)
 400e20c:	2809883a 	mov	r4,r5
 400e210:	103ee83a 	callr	r2
 400e214:	14400d26 	beq	r2,r17,400e24c <_Unwind_SjLj_RaiseException+0x9c>
 400e218:	14c0171e 	bne	r2,r19,400e278 <_Unwind_SjLj_RaiseException+0xc8>
 400e21c:	d8800217 	ldw	r2,8(sp)
 400e220:	10800017 	ldw	r2,0(r2)
 400e224:	d8800215 	stw	r2,8(sp)
 400e228:	103ff01e 	bne	r2,zero,400e1ec <__alt_data_end+0xfc00e1ec>
 400e22c:	00800144 	movi	r2,5
 400e230:	dfc00717 	ldw	ra,28(sp)
 400e234:	dcc00617 	ldw	r19,24(sp)
 400e238:	dc800517 	ldw	r18,20(sp)
 400e23c:	dc400417 	ldw	r17,16(sp)
 400e240:	dc000317 	ldw	r16,12(sp)
 400e244:	dec00804 	addi	sp,sp,32
 400e248:	f800283a 	ret
 400e24c:	d8800217 	ldw	r2,8(sp)
 400e250:	80000315 	stw	zero,12(r16)
 400e254:	d9400204 	addi	r5,sp,8
 400e258:	80800415 	stw	r2,16(r16)
 400e25c:	8009883a 	mov	r4,r16
 400e260:	dc800215 	stw	r18,8(sp)
 400e264:	400dfd80 	call	400dfd8 <_Unwind_RaiseException_Phase2>
 400e268:	00c001c4 	movi	r3,7
 400e26c:	10fff01e 	bne	r2,r3,400e230 <__alt_data_end+0xfc00e230>
 400e270:	d9000204 	addi	r4,sp,8
 400e274:	400e0980 	call	400e098 <uw_install_context.isra.1>
 400e278:	008000c4 	movi	r2,3
 400e27c:	003fec06 	br	400e230 <__alt_data_end+0xfc00e230>

0400e280 <_Unwind_SjLj_ForcedUnwind>:
 400e280:	00c100f4 	movhi	r3,1027
 400e284:	18f61604 	addi	r3,r3,-10152
 400e288:	defffe04 	addi	sp,sp,-8
 400e28c:	18c00017 	ldw	r3,0(r3)
 400e290:	dfc00115 	stw	ra,4(sp)
 400e294:	21400315 	stw	r5,12(r4)
 400e298:	21800415 	stw	r6,16(r4)
 400e29c:	d80b883a 	mov	r5,sp
 400e2a0:	d8c00015 	stw	r3,0(sp)
 400e2a4:	400dec00 	call	400dec0 <_Unwind_ForcedUnwind_Phase2>
 400e2a8:	00c001c4 	movi	r3,7
 400e2ac:	10c00326 	beq	r2,r3,400e2bc <_Unwind_SjLj_ForcedUnwind+0x3c>
 400e2b0:	dfc00117 	ldw	ra,4(sp)
 400e2b4:	dec00204 	addi	sp,sp,8
 400e2b8:	f800283a 	ret
 400e2bc:	d809883a 	mov	r4,sp
 400e2c0:	400e0980 	call	400e098 <uw_install_context.isra.1>

0400e2c4 <_Unwind_SjLj_Resume>:
 400e2c4:	00c100f4 	movhi	r3,1027
 400e2c8:	18f61604 	addi	r3,r3,-10152
 400e2cc:	18c00017 	ldw	r3,0(r3)
 400e2d0:	20800317 	ldw	r2,12(r4)
 400e2d4:	defffe04 	addi	sp,sp,-8
 400e2d8:	dfc00115 	stw	ra,4(sp)
 400e2dc:	d8c00015 	stw	r3,0(sp)
 400e2e0:	d80b883a 	mov	r5,sp
 400e2e4:	1000041e 	bne	r2,zero,400e2f8 <_Unwind_SjLj_Resume+0x34>
 400e2e8:	400dfd80 	call	400dfd8 <_Unwind_RaiseException_Phase2>
 400e2ec:	00c001c4 	movi	r3,7
 400e2f0:	10c00326 	beq	r2,r3,400e300 <_Unwind_SjLj_Resume+0x3c>
 400e2f4:	400e4440 	call	400e444 <abort>
 400e2f8:	400dec00 	call	400dec0 <_Unwind_ForcedUnwind_Phase2>
 400e2fc:	003ffb06 	br	400e2ec <__alt_data_end+0xfc00e2ec>
 400e300:	d809883a 	mov	r4,sp
 400e304:	400e0980 	call	400e098 <uw_install_context.isra.1>

0400e308 <_Unwind_SjLj_Resume_or_Rethrow>:
 400e308:	20800317 	ldw	r2,12(r4)
 400e30c:	defffe04 	addi	sp,sp,-8
 400e310:	dfc00115 	stw	ra,4(sp)
 400e314:	1000041e 	bne	r2,zero,400e328 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
 400e318:	400e1b00 	call	400e1b0 <_Unwind_SjLj_RaiseException>
 400e31c:	dfc00117 	ldw	ra,4(sp)
 400e320:	dec00204 	addi	sp,sp,8
 400e324:	f800283a 	ret
 400e328:	008100f4 	movhi	r2,1027
 400e32c:	10b61604 	addi	r2,r2,-10152
 400e330:	10800017 	ldw	r2,0(r2)
 400e334:	d80b883a 	mov	r5,sp
 400e338:	d8800015 	stw	r2,0(sp)
 400e33c:	400dec00 	call	400dec0 <_Unwind_ForcedUnwind_Phase2>
 400e340:	00c001c4 	movi	r3,7
 400e344:	10c00126 	beq	r2,r3,400e34c <_Unwind_SjLj_Resume_or_Rethrow+0x44>
 400e348:	400e4440 	call	400e444 <abort>
 400e34c:	d809883a 	mov	r4,sp
 400e350:	400e0980 	call	400e098 <uw_install_context.isra.1>

0400e354 <_Unwind_DeleteException>:
 400e354:	20800217 	ldw	r2,8(r4)
 400e358:	10000326 	beq	r2,zero,400e368 <_Unwind_DeleteException+0x14>
 400e35c:	200b883a 	mov	r5,r4
 400e360:	01000044 	movi	r4,1
 400e364:	1000683a 	jmp	r2
 400e368:	f800283a 	ret

0400e36c <_Unwind_Backtrace>:
 400e36c:	008100f4 	movhi	r2,1027
 400e370:	10b61604 	addi	r2,r2,-10152
 400e374:	10800017 	ldw	r2,0(r2)
 400e378:	defffc04 	addi	sp,sp,-16
 400e37c:	dc400215 	stw	r17,8(sp)
 400e380:	dc000115 	stw	r16,4(sp)
 400e384:	dfc00315 	stw	ra,12(sp)
 400e388:	2023883a 	mov	r17,r4
 400e38c:	2821883a 	mov	r16,r5
 400e390:	d8800015 	stw	r2,0(sp)
 400e394:	00000506 	br	400e3ac <_Unwind_Backtrace+0x40>
 400e398:	883ee83a 	callr	r17
 400e39c:	10000e1e 	bne	r2,zero,400e3d8 <_Unwind_Backtrace+0x6c>
 400e3a0:	d8800017 	ldw	r2,0(sp)
 400e3a4:	10800017 	ldw	r2,0(r2)
 400e3a8:	d8800015 	stw	r2,0(sp)
 400e3ac:	800b883a 	mov	r5,r16
 400e3b0:	d809883a 	mov	r4,sp
 400e3b4:	103ff81e 	bne	r2,zero,400e398 <__alt_data_end+0xfc00e398>
 400e3b8:	883ee83a 	callr	r17
 400e3bc:	1000061e 	bne	r2,zero,400e3d8 <_Unwind_Backtrace+0x6c>
 400e3c0:	00800144 	movi	r2,5
 400e3c4:	dfc00317 	ldw	ra,12(sp)
 400e3c8:	dc400217 	ldw	r17,8(sp)
 400e3cc:	dc000117 	ldw	r16,4(sp)
 400e3d0:	dec00404 	addi	sp,sp,16
 400e3d4:	f800283a 	ret
 400e3d8:	008000c4 	movi	r2,3
 400e3dc:	003ff906 	br	400e3c4 <__alt_data_end+0xfc00e3c4>

0400e3e0 <__clzsi2>:
 400e3e0:	00bfffd4 	movui	r2,65535
 400e3e4:	11000536 	bltu	r2,r4,400e3fc <__clzsi2+0x1c>
 400e3e8:	00803fc4 	movi	r2,255
 400e3ec:	11000f36 	bltu	r2,r4,400e42c <__clzsi2+0x4c>
 400e3f0:	00800804 	movi	r2,32
 400e3f4:	0007883a 	mov	r3,zero
 400e3f8:	00000506 	br	400e410 <__clzsi2+0x30>
 400e3fc:	00804034 	movhi	r2,256
 400e400:	10bfffc4 	addi	r2,r2,-1
 400e404:	11000c2e 	bgeu	r2,r4,400e438 <__clzsi2+0x58>
 400e408:	00800204 	movi	r2,8
 400e40c:	00c00604 	movi	r3,24
 400e410:	20c8d83a 	srl	r4,r4,r3
 400e414:	00c100b4 	movhi	r3,1026
 400e418:	18dc5704 	addi	r3,r3,29020
 400e41c:	1909883a 	add	r4,r3,r4
 400e420:	20c00003 	ldbu	r3,0(r4)
 400e424:	10c5c83a 	sub	r2,r2,r3
 400e428:	f800283a 	ret
 400e42c:	00800604 	movi	r2,24
 400e430:	00c00204 	movi	r3,8
 400e434:	003ff606 	br	400e410 <__alt_data_end+0xfc00e410>
 400e438:	00800404 	movi	r2,16
 400e43c:	1007883a 	mov	r3,r2
 400e440:	003ff306 	br	400e410 <__alt_data_end+0xfc00e410>

0400e444 <abort>:
 400e444:	deffff04 	addi	sp,sp,-4
 400e448:	01000184 	movi	r4,6
 400e44c:	dfc00015 	stw	ra,0(sp)
 400e450:	400f3540 	call	400f354 <raise>
 400e454:	01000044 	movi	r4,1
 400e458:	401b7a40 	call	401b7a4 <_exit>

0400e45c <clock>:
 400e45c:	008100f4 	movhi	r2,1027
 400e460:	10a98804 	addi	r2,r2,-23008
 400e464:	11000017 	ldw	r4,0(r2)
 400e468:	defffb04 	addi	sp,sp,-20
 400e46c:	d80b883a 	mov	r5,sp
 400e470:	dfc00415 	stw	ra,16(sp)
 400e474:	400f5780 	call	400f578 <_times_r>
 400e478:	00ffffc4 	movi	r3,-1
 400e47c:	10c00726 	beq	r2,r3,400e49c <clock+0x40>
 400e480:	d8c00017 	ldw	r3,0(sp)
 400e484:	d8800117 	ldw	r2,4(sp)
 400e488:	1885883a 	add	r2,r3,r2
 400e48c:	d8c00217 	ldw	r3,8(sp)
 400e490:	10c7883a 	add	r3,r2,r3
 400e494:	d8800317 	ldw	r2,12(sp)
 400e498:	1885883a 	add	r2,r3,r2
 400e49c:	dfc00417 	ldw	ra,16(sp)
 400e4a0:	dec00504 	addi	sp,sp,20
 400e4a4:	f800283a 	ret

0400e4a8 <malloc>:
 400e4a8:	008100f4 	movhi	r2,1027
 400e4ac:	10a98804 	addi	r2,r2,-23008
 400e4b0:	200b883a 	mov	r5,r4
 400e4b4:	11000017 	ldw	r4,0(r2)
 400e4b8:	400e4d01 	jmpi	400e4d0 <_malloc_r>

0400e4bc <free>:
 400e4bc:	008100f4 	movhi	r2,1027
 400e4c0:	10a98804 	addi	r2,r2,-23008
 400e4c4:	200b883a 	mov	r5,r4
 400e4c8:	11000017 	ldw	r4,0(r2)
 400e4cc:	4013ab41 	jmpi	4013ab4 <_free_r>

0400e4d0 <_malloc_r>:
 400e4d0:	defff504 	addi	sp,sp,-44
 400e4d4:	dc800315 	stw	r18,12(sp)
 400e4d8:	dfc00a15 	stw	ra,40(sp)
 400e4dc:	df000915 	stw	fp,36(sp)
 400e4e0:	ddc00815 	stw	r23,32(sp)
 400e4e4:	dd800715 	stw	r22,28(sp)
 400e4e8:	dd400615 	stw	r21,24(sp)
 400e4ec:	dd000515 	stw	r20,20(sp)
 400e4f0:	dcc00415 	stw	r19,16(sp)
 400e4f4:	dc400215 	stw	r17,8(sp)
 400e4f8:	dc000115 	stw	r16,4(sp)
 400e4fc:	288002c4 	addi	r2,r5,11
 400e500:	00c00584 	movi	r3,22
 400e504:	2025883a 	mov	r18,r4
 400e508:	18807f2e 	bgeu	r3,r2,400e708 <_malloc_r+0x238>
 400e50c:	047ffe04 	movi	r17,-8
 400e510:	1462703a 	and	r17,r2,r17
 400e514:	8800a316 	blt	r17,zero,400e7a4 <_malloc_r+0x2d4>
 400e518:	8940a236 	bltu	r17,r5,400e7a4 <_malloc_r+0x2d4>
 400e51c:	401bdc00 	call	401bdc0 <__malloc_lock>
 400e520:	00807dc4 	movi	r2,503
 400e524:	1441e92e 	bgeu	r2,r17,400eccc <_malloc_r+0x7fc>
 400e528:	8804d27a 	srli	r2,r17,9
 400e52c:	1000a126 	beq	r2,zero,400e7b4 <_malloc_r+0x2e4>
 400e530:	00c00104 	movi	r3,4
 400e534:	18811e36 	bltu	r3,r2,400e9b0 <_malloc_r+0x4e0>
 400e538:	8804d1ba 	srli	r2,r17,6
 400e53c:	12000e44 	addi	r8,r2,57
 400e540:	11c00e04 	addi	r7,r2,56
 400e544:	4209883a 	add	r4,r8,r8
 400e548:	04c100b4 	movhi	r19,1026
 400e54c:	2109883a 	add	r4,r4,r4
 400e550:	9cde2b04 	addi	r19,r19,30892
 400e554:	2109883a 	add	r4,r4,r4
 400e558:	9909883a 	add	r4,r19,r4
 400e55c:	24000117 	ldw	r16,4(r4)
 400e560:	213ffe04 	addi	r4,r4,-8
 400e564:	24009726 	beq	r4,r16,400e7c4 <_malloc_r+0x2f4>
 400e568:	80800117 	ldw	r2,4(r16)
 400e56c:	01bfff04 	movi	r6,-4
 400e570:	014003c4 	movi	r5,15
 400e574:	1184703a 	and	r2,r2,r6
 400e578:	1447c83a 	sub	r3,r2,r17
 400e57c:	28c00716 	blt	r5,r3,400e59c <_malloc_r+0xcc>
 400e580:	1800920e 	bge	r3,zero,400e7cc <_malloc_r+0x2fc>
 400e584:	84000317 	ldw	r16,12(r16)
 400e588:	24008e26 	beq	r4,r16,400e7c4 <_malloc_r+0x2f4>
 400e58c:	80800117 	ldw	r2,4(r16)
 400e590:	1184703a 	and	r2,r2,r6
 400e594:	1447c83a 	sub	r3,r2,r17
 400e598:	28fff90e 	bge	r5,r3,400e580 <__alt_data_end+0xfc00e580>
 400e59c:	3809883a 	mov	r4,r7
 400e5a0:	018100b4 	movhi	r6,1026
 400e5a4:	9c000417 	ldw	r16,16(r19)
 400e5a8:	319e2b04 	addi	r6,r6,30892
 400e5ac:	32000204 	addi	r8,r6,8
 400e5b0:	82013426 	beq	r16,r8,400ea84 <_malloc_r+0x5b4>
 400e5b4:	80c00117 	ldw	r3,4(r16)
 400e5b8:	00bfff04 	movi	r2,-4
 400e5bc:	188e703a 	and	r7,r3,r2
 400e5c0:	3c45c83a 	sub	r2,r7,r17
 400e5c4:	00c003c4 	movi	r3,15
 400e5c8:	18811f16 	blt	r3,r2,400ea48 <_malloc_r+0x578>
 400e5cc:	32000515 	stw	r8,20(r6)
 400e5d0:	32000415 	stw	r8,16(r6)
 400e5d4:	10007f0e 	bge	r2,zero,400e7d4 <_malloc_r+0x304>
 400e5d8:	00807fc4 	movi	r2,511
 400e5dc:	11c0fd36 	bltu	r2,r7,400e9d4 <_malloc_r+0x504>
 400e5e0:	3806d0fa 	srli	r3,r7,3
 400e5e4:	01c00044 	movi	r7,1
 400e5e8:	30800117 	ldw	r2,4(r6)
 400e5ec:	19400044 	addi	r5,r3,1
 400e5f0:	294b883a 	add	r5,r5,r5
 400e5f4:	1807d0ba 	srai	r3,r3,2
 400e5f8:	294b883a 	add	r5,r5,r5
 400e5fc:	294b883a 	add	r5,r5,r5
 400e600:	298b883a 	add	r5,r5,r6
 400e604:	38c6983a 	sll	r3,r7,r3
 400e608:	29c00017 	ldw	r7,0(r5)
 400e60c:	2a7ffe04 	addi	r9,r5,-8
 400e610:	1886b03a 	or	r3,r3,r2
 400e614:	82400315 	stw	r9,12(r16)
 400e618:	81c00215 	stw	r7,8(r16)
 400e61c:	30c00115 	stw	r3,4(r6)
 400e620:	2c000015 	stw	r16,0(r5)
 400e624:	3c000315 	stw	r16,12(r7)
 400e628:	2005d0ba 	srai	r2,r4,2
 400e62c:	01400044 	movi	r5,1
 400e630:	288a983a 	sll	r5,r5,r2
 400e634:	19406f36 	bltu	r3,r5,400e7f4 <_malloc_r+0x324>
 400e638:	28c4703a 	and	r2,r5,r3
 400e63c:	10000a1e 	bne	r2,zero,400e668 <_malloc_r+0x198>
 400e640:	00bfff04 	movi	r2,-4
 400e644:	294b883a 	add	r5,r5,r5
 400e648:	2088703a 	and	r4,r4,r2
 400e64c:	28c4703a 	and	r2,r5,r3
 400e650:	21000104 	addi	r4,r4,4
 400e654:	1000041e 	bne	r2,zero,400e668 <_malloc_r+0x198>
 400e658:	294b883a 	add	r5,r5,r5
 400e65c:	28c4703a 	and	r2,r5,r3
 400e660:	21000104 	addi	r4,r4,4
 400e664:	103ffc26 	beq	r2,zero,400e658 <__alt_data_end+0xfc00e658>
 400e668:	02bfff04 	movi	r10,-4
 400e66c:	024003c4 	movi	r9,15
 400e670:	21800044 	addi	r6,r4,1
 400e674:	318d883a 	add	r6,r6,r6
 400e678:	318d883a 	add	r6,r6,r6
 400e67c:	318d883a 	add	r6,r6,r6
 400e680:	998d883a 	add	r6,r19,r6
 400e684:	333ffe04 	addi	r12,r6,-8
 400e688:	2017883a 	mov	r11,r4
 400e68c:	31800104 	addi	r6,r6,4
 400e690:	34000017 	ldw	r16,0(r6)
 400e694:	31fffd04 	addi	r7,r6,-12
 400e698:	81c0041e 	bne	r16,r7,400e6ac <_malloc_r+0x1dc>
 400e69c:	0000fb06 	br	400ea8c <_malloc_r+0x5bc>
 400e6a0:	1801030e 	bge	r3,zero,400eab0 <_malloc_r+0x5e0>
 400e6a4:	84000317 	ldw	r16,12(r16)
 400e6a8:	81c0f826 	beq	r16,r7,400ea8c <_malloc_r+0x5bc>
 400e6ac:	80800117 	ldw	r2,4(r16)
 400e6b0:	1284703a 	and	r2,r2,r10
 400e6b4:	1447c83a 	sub	r3,r2,r17
 400e6b8:	48fff90e 	bge	r9,r3,400e6a0 <__alt_data_end+0xfc00e6a0>
 400e6bc:	80800317 	ldw	r2,12(r16)
 400e6c0:	81000217 	ldw	r4,8(r16)
 400e6c4:	89400054 	ori	r5,r17,1
 400e6c8:	81400115 	stw	r5,4(r16)
 400e6cc:	20800315 	stw	r2,12(r4)
 400e6d0:	11000215 	stw	r4,8(r2)
 400e6d4:	8463883a 	add	r17,r16,r17
 400e6d8:	9c400515 	stw	r17,20(r19)
 400e6dc:	9c400415 	stw	r17,16(r19)
 400e6e0:	18800054 	ori	r2,r3,1
 400e6e4:	88800115 	stw	r2,4(r17)
 400e6e8:	8a000315 	stw	r8,12(r17)
 400e6ec:	8a000215 	stw	r8,8(r17)
 400e6f0:	88e3883a 	add	r17,r17,r3
 400e6f4:	88c00015 	stw	r3,0(r17)
 400e6f8:	9009883a 	mov	r4,r18
 400e6fc:	401bde40 	call	401bde4 <__malloc_unlock>
 400e700:	80800204 	addi	r2,r16,8
 400e704:	00001b06 	br	400e774 <_malloc_r+0x2a4>
 400e708:	04400404 	movi	r17,16
 400e70c:	89402536 	bltu	r17,r5,400e7a4 <_malloc_r+0x2d4>
 400e710:	401bdc00 	call	401bdc0 <__malloc_lock>
 400e714:	00800184 	movi	r2,6
 400e718:	01000084 	movi	r4,2
 400e71c:	04c100b4 	movhi	r19,1026
 400e720:	1085883a 	add	r2,r2,r2
 400e724:	9cde2b04 	addi	r19,r19,30892
 400e728:	1085883a 	add	r2,r2,r2
 400e72c:	9885883a 	add	r2,r19,r2
 400e730:	14000117 	ldw	r16,4(r2)
 400e734:	10fffe04 	addi	r3,r2,-8
 400e738:	80c0d926 	beq	r16,r3,400eaa0 <_malloc_r+0x5d0>
 400e73c:	80c00117 	ldw	r3,4(r16)
 400e740:	81000317 	ldw	r4,12(r16)
 400e744:	00bfff04 	movi	r2,-4
 400e748:	1884703a 	and	r2,r3,r2
 400e74c:	81400217 	ldw	r5,8(r16)
 400e750:	8085883a 	add	r2,r16,r2
 400e754:	10c00117 	ldw	r3,4(r2)
 400e758:	29000315 	stw	r4,12(r5)
 400e75c:	21400215 	stw	r5,8(r4)
 400e760:	18c00054 	ori	r3,r3,1
 400e764:	10c00115 	stw	r3,4(r2)
 400e768:	9009883a 	mov	r4,r18
 400e76c:	401bde40 	call	401bde4 <__malloc_unlock>
 400e770:	80800204 	addi	r2,r16,8
 400e774:	dfc00a17 	ldw	ra,40(sp)
 400e778:	df000917 	ldw	fp,36(sp)
 400e77c:	ddc00817 	ldw	r23,32(sp)
 400e780:	dd800717 	ldw	r22,28(sp)
 400e784:	dd400617 	ldw	r21,24(sp)
 400e788:	dd000517 	ldw	r20,20(sp)
 400e78c:	dcc00417 	ldw	r19,16(sp)
 400e790:	dc800317 	ldw	r18,12(sp)
 400e794:	dc400217 	ldw	r17,8(sp)
 400e798:	dc000117 	ldw	r16,4(sp)
 400e79c:	dec00b04 	addi	sp,sp,44
 400e7a0:	f800283a 	ret
 400e7a4:	00800304 	movi	r2,12
 400e7a8:	90800015 	stw	r2,0(r18)
 400e7ac:	0005883a 	mov	r2,zero
 400e7b0:	003ff006 	br	400e774 <__alt_data_end+0xfc00e774>
 400e7b4:	01002004 	movi	r4,128
 400e7b8:	02001004 	movi	r8,64
 400e7bc:	01c00fc4 	movi	r7,63
 400e7c0:	003f6106 	br	400e548 <__alt_data_end+0xfc00e548>
 400e7c4:	4009883a 	mov	r4,r8
 400e7c8:	003f7506 	br	400e5a0 <__alt_data_end+0xfc00e5a0>
 400e7cc:	81000317 	ldw	r4,12(r16)
 400e7d0:	003fde06 	br	400e74c <__alt_data_end+0xfc00e74c>
 400e7d4:	81c5883a 	add	r2,r16,r7
 400e7d8:	11400117 	ldw	r5,4(r2)
 400e7dc:	9009883a 	mov	r4,r18
 400e7e0:	29400054 	ori	r5,r5,1
 400e7e4:	11400115 	stw	r5,4(r2)
 400e7e8:	401bde40 	call	401bde4 <__malloc_unlock>
 400e7ec:	80800204 	addi	r2,r16,8
 400e7f0:	003fe006 	br	400e774 <__alt_data_end+0xfc00e774>
 400e7f4:	9c000217 	ldw	r16,8(r19)
 400e7f8:	00bfff04 	movi	r2,-4
 400e7fc:	85800117 	ldw	r22,4(r16)
 400e800:	b0ac703a 	and	r22,r22,r2
 400e804:	b4400336 	bltu	r22,r17,400e814 <_malloc_r+0x344>
 400e808:	b445c83a 	sub	r2,r22,r17
 400e80c:	00c003c4 	movi	r3,15
 400e810:	18805d16 	blt	r3,r2,400e988 <_malloc_r+0x4b8>
 400e814:	05c100f4 	movhi	r23,1027
 400e818:	008100f4 	movhi	r2,1027
 400e81c:	10b61904 	addi	r2,r2,-10140
 400e820:	bde98904 	addi	r23,r23,-23004
 400e824:	15400017 	ldw	r21,0(r2)
 400e828:	b8c00017 	ldw	r3,0(r23)
 400e82c:	00bfffc4 	movi	r2,-1
 400e830:	858d883a 	add	r6,r16,r22
 400e834:	8d6b883a 	add	r21,r17,r21
 400e838:	1880ea26 	beq	r3,r2,400ebe4 <_malloc_r+0x714>
 400e83c:	ad4403c4 	addi	r21,r21,4111
 400e840:	00bc0004 	movi	r2,-4096
 400e844:	a8aa703a 	and	r21,r21,r2
 400e848:	a80b883a 	mov	r5,r21
 400e84c:	9009883a 	mov	r4,r18
 400e850:	d9800015 	stw	r6,0(sp)
 400e854:	400f0ac0 	call	400f0ac <_sbrk_r>
 400e858:	1029883a 	mov	r20,r2
 400e85c:	00bfffc4 	movi	r2,-1
 400e860:	d9800017 	ldw	r6,0(sp)
 400e864:	a080e826 	beq	r20,r2,400ec08 <_malloc_r+0x738>
 400e868:	a180a636 	bltu	r20,r6,400eb04 <_malloc_r+0x634>
 400e86c:	070100f4 	movhi	fp,1027
 400e870:	e7365d04 	addi	fp,fp,-9868
 400e874:	e0800017 	ldw	r2,0(fp)
 400e878:	a887883a 	add	r3,r21,r2
 400e87c:	e0c00015 	stw	r3,0(fp)
 400e880:	3500e626 	beq	r6,r20,400ec1c <_malloc_r+0x74c>
 400e884:	b9000017 	ldw	r4,0(r23)
 400e888:	00bfffc4 	movi	r2,-1
 400e88c:	2080ee26 	beq	r4,r2,400ec48 <_malloc_r+0x778>
 400e890:	a185c83a 	sub	r2,r20,r6
 400e894:	10c5883a 	add	r2,r2,r3
 400e898:	e0800015 	stw	r2,0(fp)
 400e89c:	a0c001cc 	andi	r3,r20,7
 400e8a0:	1800bc26 	beq	r3,zero,400eb94 <_malloc_r+0x6c4>
 400e8a4:	a0e9c83a 	sub	r20,r20,r3
 400e8a8:	00840204 	movi	r2,4104
 400e8ac:	a5000204 	addi	r20,r20,8
 400e8b0:	10c7c83a 	sub	r3,r2,r3
 400e8b4:	a545883a 	add	r2,r20,r21
 400e8b8:	1083ffcc 	andi	r2,r2,4095
 400e8bc:	18abc83a 	sub	r21,r3,r2
 400e8c0:	a80b883a 	mov	r5,r21
 400e8c4:	9009883a 	mov	r4,r18
 400e8c8:	400f0ac0 	call	400f0ac <_sbrk_r>
 400e8cc:	00ffffc4 	movi	r3,-1
 400e8d0:	10c0e126 	beq	r2,r3,400ec58 <_malloc_r+0x788>
 400e8d4:	1505c83a 	sub	r2,r2,r20
 400e8d8:	1545883a 	add	r2,r2,r21
 400e8dc:	10800054 	ori	r2,r2,1
 400e8e0:	e0c00017 	ldw	r3,0(fp)
 400e8e4:	9d000215 	stw	r20,8(r19)
 400e8e8:	a0800115 	stw	r2,4(r20)
 400e8ec:	a8c7883a 	add	r3,r21,r3
 400e8f0:	e0c00015 	stw	r3,0(fp)
 400e8f4:	84c00e26 	beq	r16,r19,400e930 <_malloc_r+0x460>
 400e8f8:	018003c4 	movi	r6,15
 400e8fc:	3580a72e 	bgeu	r6,r22,400eb9c <_malloc_r+0x6cc>
 400e900:	81400117 	ldw	r5,4(r16)
 400e904:	013ffe04 	movi	r4,-8
 400e908:	b0bffd04 	addi	r2,r22,-12
 400e90c:	1104703a 	and	r2,r2,r4
 400e910:	2900004c 	andi	r4,r5,1
 400e914:	2088b03a 	or	r4,r4,r2
 400e918:	81000115 	stw	r4,4(r16)
 400e91c:	01400144 	movi	r5,5
 400e920:	8089883a 	add	r4,r16,r2
 400e924:	21400115 	stw	r5,4(r4)
 400e928:	21400215 	stw	r5,8(r4)
 400e92c:	3080cd36 	bltu	r6,r2,400ec64 <_malloc_r+0x794>
 400e930:	008100f4 	movhi	r2,1027
 400e934:	10b61804 	addi	r2,r2,-10144
 400e938:	11000017 	ldw	r4,0(r2)
 400e93c:	20c0012e 	bgeu	r4,r3,400e944 <_malloc_r+0x474>
 400e940:	10c00015 	stw	r3,0(r2)
 400e944:	008100f4 	movhi	r2,1027
 400e948:	10b61704 	addi	r2,r2,-10148
 400e94c:	11000017 	ldw	r4,0(r2)
 400e950:	9c000217 	ldw	r16,8(r19)
 400e954:	20c0012e 	bgeu	r4,r3,400e95c <_malloc_r+0x48c>
 400e958:	10c00015 	stw	r3,0(r2)
 400e95c:	80c00117 	ldw	r3,4(r16)
 400e960:	00bfff04 	movi	r2,-4
 400e964:	1886703a 	and	r3,r3,r2
 400e968:	1c45c83a 	sub	r2,r3,r17
 400e96c:	1c400236 	bltu	r3,r17,400e978 <_malloc_r+0x4a8>
 400e970:	00c003c4 	movi	r3,15
 400e974:	18800416 	blt	r3,r2,400e988 <_malloc_r+0x4b8>
 400e978:	9009883a 	mov	r4,r18
 400e97c:	401bde40 	call	401bde4 <__malloc_unlock>
 400e980:	0005883a 	mov	r2,zero
 400e984:	003f7b06 	br	400e774 <__alt_data_end+0xfc00e774>
 400e988:	88c00054 	ori	r3,r17,1
 400e98c:	80c00115 	stw	r3,4(r16)
 400e990:	8463883a 	add	r17,r16,r17
 400e994:	10800054 	ori	r2,r2,1
 400e998:	9c400215 	stw	r17,8(r19)
 400e99c:	88800115 	stw	r2,4(r17)
 400e9a0:	9009883a 	mov	r4,r18
 400e9a4:	401bde40 	call	401bde4 <__malloc_unlock>
 400e9a8:	80800204 	addi	r2,r16,8
 400e9ac:	003f7106 	br	400e774 <__alt_data_end+0xfc00e774>
 400e9b0:	00c00504 	movi	r3,20
 400e9b4:	18804a2e 	bgeu	r3,r2,400eae0 <_malloc_r+0x610>
 400e9b8:	00c01504 	movi	r3,84
 400e9bc:	18806e36 	bltu	r3,r2,400eb78 <_malloc_r+0x6a8>
 400e9c0:	8804d33a 	srli	r2,r17,12
 400e9c4:	12001bc4 	addi	r8,r2,111
 400e9c8:	11c01b84 	addi	r7,r2,110
 400e9cc:	4209883a 	add	r4,r8,r8
 400e9d0:	003edd06 	br	400e548 <__alt_data_end+0xfc00e548>
 400e9d4:	3804d27a 	srli	r2,r7,9
 400e9d8:	00c00104 	movi	r3,4
 400e9dc:	1880442e 	bgeu	r3,r2,400eaf0 <_malloc_r+0x620>
 400e9e0:	00c00504 	movi	r3,20
 400e9e4:	18808136 	bltu	r3,r2,400ebec <_malloc_r+0x71c>
 400e9e8:	11401704 	addi	r5,r2,92
 400e9ec:	10c016c4 	addi	r3,r2,91
 400e9f0:	294b883a 	add	r5,r5,r5
 400e9f4:	294b883a 	add	r5,r5,r5
 400e9f8:	294b883a 	add	r5,r5,r5
 400e9fc:	994b883a 	add	r5,r19,r5
 400ea00:	28800017 	ldw	r2,0(r5)
 400ea04:	018100b4 	movhi	r6,1026
 400ea08:	297ffe04 	addi	r5,r5,-8
 400ea0c:	319e2b04 	addi	r6,r6,30892
 400ea10:	28806526 	beq	r5,r2,400eba8 <_malloc_r+0x6d8>
 400ea14:	01bfff04 	movi	r6,-4
 400ea18:	10c00117 	ldw	r3,4(r2)
 400ea1c:	1986703a 	and	r3,r3,r6
 400ea20:	38c0022e 	bgeu	r7,r3,400ea2c <_malloc_r+0x55c>
 400ea24:	10800217 	ldw	r2,8(r2)
 400ea28:	28bffb1e 	bne	r5,r2,400ea18 <__alt_data_end+0xfc00ea18>
 400ea2c:	11400317 	ldw	r5,12(r2)
 400ea30:	98c00117 	ldw	r3,4(r19)
 400ea34:	81400315 	stw	r5,12(r16)
 400ea38:	80800215 	stw	r2,8(r16)
 400ea3c:	2c000215 	stw	r16,8(r5)
 400ea40:	14000315 	stw	r16,12(r2)
 400ea44:	003ef806 	br	400e628 <__alt_data_end+0xfc00e628>
 400ea48:	88c00054 	ori	r3,r17,1
 400ea4c:	80c00115 	stw	r3,4(r16)
 400ea50:	8463883a 	add	r17,r16,r17
 400ea54:	34400515 	stw	r17,20(r6)
 400ea58:	34400415 	stw	r17,16(r6)
 400ea5c:	10c00054 	ori	r3,r2,1
 400ea60:	8a000315 	stw	r8,12(r17)
 400ea64:	8a000215 	stw	r8,8(r17)
 400ea68:	88c00115 	stw	r3,4(r17)
 400ea6c:	88a3883a 	add	r17,r17,r2
 400ea70:	88800015 	stw	r2,0(r17)
 400ea74:	9009883a 	mov	r4,r18
 400ea78:	401bde40 	call	401bde4 <__malloc_unlock>
 400ea7c:	80800204 	addi	r2,r16,8
 400ea80:	003f3c06 	br	400e774 <__alt_data_end+0xfc00e774>
 400ea84:	30c00117 	ldw	r3,4(r6)
 400ea88:	003ee706 	br	400e628 <__alt_data_end+0xfc00e628>
 400ea8c:	5ac00044 	addi	r11,r11,1
 400ea90:	588000cc 	andi	r2,r11,3
 400ea94:	31800204 	addi	r6,r6,8
 400ea98:	103efd1e 	bne	r2,zero,400e690 <__alt_data_end+0xfc00e690>
 400ea9c:	00002406 	br	400eb30 <_malloc_r+0x660>
 400eaa0:	14000317 	ldw	r16,12(r2)
 400eaa4:	143f251e 	bne	r2,r16,400e73c <__alt_data_end+0xfc00e73c>
 400eaa8:	21000084 	addi	r4,r4,2
 400eaac:	003ebc06 	br	400e5a0 <__alt_data_end+0xfc00e5a0>
 400eab0:	8085883a 	add	r2,r16,r2
 400eab4:	10c00117 	ldw	r3,4(r2)
 400eab8:	81000317 	ldw	r4,12(r16)
 400eabc:	81400217 	ldw	r5,8(r16)
 400eac0:	18c00054 	ori	r3,r3,1
 400eac4:	10c00115 	stw	r3,4(r2)
 400eac8:	29000315 	stw	r4,12(r5)
 400eacc:	21400215 	stw	r5,8(r4)
 400ead0:	9009883a 	mov	r4,r18
 400ead4:	401bde40 	call	401bde4 <__malloc_unlock>
 400ead8:	80800204 	addi	r2,r16,8
 400eadc:	003f2506 	br	400e774 <__alt_data_end+0xfc00e774>
 400eae0:	12001704 	addi	r8,r2,92
 400eae4:	11c016c4 	addi	r7,r2,91
 400eae8:	4209883a 	add	r4,r8,r8
 400eaec:	003e9606 	br	400e548 <__alt_data_end+0xfc00e548>
 400eaf0:	3804d1ba 	srli	r2,r7,6
 400eaf4:	11400e44 	addi	r5,r2,57
 400eaf8:	10c00e04 	addi	r3,r2,56
 400eafc:	294b883a 	add	r5,r5,r5
 400eb00:	003fbc06 	br	400e9f4 <__alt_data_end+0xfc00e9f4>
 400eb04:	84ff5926 	beq	r16,r19,400e86c <__alt_data_end+0xfc00e86c>
 400eb08:	008100b4 	movhi	r2,1026
 400eb0c:	109e2b04 	addi	r2,r2,30892
 400eb10:	14000217 	ldw	r16,8(r2)
 400eb14:	00bfff04 	movi	r2,-4
 400eb18:	80c00117 	ldw	r3,4(r16)
 400eb1c:	1886703a 	and	r3,r3,r2
 400eb20:	003f9106 	br	400e968 <__alt_data_end+0xfc00e968>
 400eb24:	60800217 	ldw	r2,8(r12)
 400eb28:	213fffc4 	addi	r4,r4,-1
 400eb2c:	1300651e 	bne	r2,r12,400ecc4 <_malloc_r+0x7f4>
 400eb30:	208000cc 	andi	r2,r4,3
 400eb34:	633ffe04 	addi	r12,r12,-8
 400eb38:	103ffa1e 	bne	r2,zero,400eb24 <__alt_data_end+0xfc00eb24>
 400eb3c:	98800117 	ldw	r2,4(r19)
 400eb40:	0146303a 	nor	r3,zero,r5
 400eb44:	1884703a 	and	r2,r3,r2
 400eb48:	98800115 	stw	r2,4(r19)
 400eb4c:	294b883a 	add	r5,r5,r5
 400eb50:	117f2836 	bltu	r2,r5,400e7f4 <__alt_data_end+0xfc00e7f4>
 400eb54:	283f2726 	beq	r5,zero,400e7f4 <__alt_data_end+0xfc00e7f4>
 400eb58:	2886703a 	and	r3,r5,r2
 400eb5c:	5809883a 	mov	r4,r11
 400eb60:	183ec31e 	bne	r3,zero,400e670 <__alt_data_end+0xfc00e670>
 400eb64:	294b883a 	add	r5,r5,r5
 400eb68:	2886703a 	and	r3,r5,r2
 400eb6c:	21000104 	addi	r4,r4,4
 400eb70:	183ffc26 	beq	r3,zero,400eb64 <__alt_data_end+0xfc00eb64>
 400eb74:	003ebe06 	br	400e670 <__alt_data_end+0xfc00e670>
 400eb78:	00c05504 	movi	r3,340
 400eb7c:	18801236 	bltu	r3,r2,400ebc8 <_malloc_r+0x6f8>
 400eb80:	8804d3fa 	srli	r2,r17,15
 400eb84:	12001e04 	addi	r8,r2,120
 400eb88:	11c01dc4 	addi	r7,r2,119
 400eb8c:	4209883a 	add	r4,r8,r8
 400eb90:	003e6d06 	br	400e548 <__alt_data_end+0xfc00e548>
 400eb94:	00c40004 	movi	r3,4096
 400eb98:	003f4606 	br	400e8b4 <__alt_data_end+0xfc00e8b4>
 400eb9c:	00800044 	movi	r2,1
 400eba0:	a0800115 	stw	r2,4(r20)
 400eba4:	003f7406 	br	400e978 <__alt_data_end+0xfc00e978>
 400eba8:	1805d0ba 	srai	r2,r3,2
 400ebac:	01c00044 	movi	r7,1
 400ebb0:	30c00117 	ldw	r3,4(r6)
 400ebb4:	388e983a 	sll	r7,r7,r2
 400ebb8:	2805883a 	mov	r2,r5
 400ebbc:	38c6b03a 	or	r3,r7,r3
 400ebc0:	30c00115 	stw	r3,4(r6)
 400ebc4:	003f9b06 	br	400ea34 <__alt_data_end+0xfc00ea34>
 400ebc8:	00c15504 	movi	r3,1364
 400ebcc:	18801a36 	bltu	r3,r2,400ec38 <_malloc_r+0x768>
 400ebd0:	8804d4ba 	srli	r2,r17,18
 400ebd4:	12001f44 	addi	r8,r2,125
 400ebd8:	11c01f04 	addi	r7,r2,124
 400ebdc:	4209883a 	add	r4,r8,r8
 400ebe0:	003e5906 	br	400e548 <__alt_data_end+0xfc00e548>
 400ebe4:	ad400404 	addi	r21,r21,16
 400ebe8:	003f1706 	br	400e848 <__alt_data_end+0xfc00e848>
 400ebec:	00c01504 	movi	r3,84
 400ebf0:	18802336 	bltu	r3,r2,400ec80 <_malloc_r+0x7b0>
 400ebf4:	3804d33a 	srli	r2,r7,12
 400ebf8:	11401bc4 	addi	r5,r2,111
 400ebfc:	10c01b84 	addi	r3,r2,110
 400ec00:	294b883a 	add	r5,r5,r5
 400ec04:	003f7b06 	br	400e9f4 <__alt_data_end+0xfc00e9f4>
 400ec08:	9c000217 	ldw	r16,8(r19)
 400ec0c:	00bfff04 	movi	r2,-4
 400ec10:	80c00117 	ldw	r3,4(r16)
 400ec14:	1886703a 	and	r3,r3,r2
 400ec18:	003f5306 	br	400e968 <__alt_data_end+0xfc00e968>
 400ec1c:	3083ffcc 	andi	r2,r6,4095
 400ec20:	103f181e 	bne	r2,zero,400e884 <__alt_data_end+0xfc00e884>
 400ec24:	99000217 	ldw	r4,8(r19)
 400ec28:	b545883a 	add	r2,r22,r21
 400ec2c:	10800054 	ori	r2,r2,1
 400ec30:	20800115 	stw	r2,4(r4)
 400ec34:	003f3e06 	br	400e930 <__alt_data_end+0xfc00e930>
 400ec38:	01003f84 	movi	r4,254
 400ec3c:	02001fc4 	movi	r8,127
 400ec40:	01c01f84 	movi	r7,126
 400ec44:	003e4006 	br	400e548 <__alt_data_end+0xfc00e548>
 400ec48:	008100f4 	movhi	r2,1027
 400ec4c:	10a98904 	addi	r2,r2,-23004
 400ec50:	15000015 	stw	r20,0(r2)
 400ec54:	003f1106 	br	400e89c <__alt_data_end+0xfc00e89c>
 400ec58:	00800044 	movi	r2,1
 400ec5c:	002b883a 	mov	r21,zero
 400ec60:	003f1f06 	br	400e8e0 <__alt_data_end+0xfc00e8e0>
 400ec64:	81400204 	addi	r5,r16,8
 400ec68:	9009883a 	mov	r4,r18
 400ec6c:	4013ab40 	call	4013ab4 <_free_r>
 400ec70:	008100f4 	movhi	r2,1027
 400ec74:	10b65d04 	addi	r2,r2,-9868
 400ec78:	10c00017 	ldw	r3,0(r2)
 400ec7c:	003f2c06 	br	400e930 <__alt_data_end+0xfc00e930>
 400ec80:	00c05504 	movi	r3,340
 400ec84:	18800536 	bltu	r3,r2,400ec9c <_malloc_r+0x7cc>
 400ec88:	3804d3fa 	srli	r2,r7,15
 400ec8c:	11401e04 	addi	r5,r2,120
 400ec90:	10c01dc4 	addi	r3,r2,119
 400ec94:	294b883a 	add	r5,r5,r5
 400ec98:	003f5606 	br	400e9f4 <__alt_data_end+0xfc00e9f4>
 400ec9c:	00c15504 	movi	r3,1364
 400eca0:	18800536 	bltu	r3,r2,400ecb8 <_malloc_r+0x7e8>
 400eca4:	3804d4ba 	srli	r2,r7,18
 400eca8:	11401f44 	addi	r5,r2,125
 400ecac:	10c01f04 	addi	r3,r2,124
 400ecb0:	294b883a 	add	r5,r5,r5
 400ecb4:	003f4f06 	br	400e9f4 <__alt_data_end+0xfc00e9f4>
 400ecb8:	01403f84 	movi	r5,254
 400ecbc:	00c01f84 	movi	r3,126
 400ecc0:	003f4c06 	br	400e9f4 <__alt_data_end+0xfc00e9f4>
 400ecc4:	98800117 	ldw	r2,4(r19)
 400ecc8:	003fa006 	br	400eb4c <__alt_data_end+0xfc00eb4c>
 400eccc:	8808d0fa 	srli	r4,r17,3
 400ecd0:	20800044 	addi	r2,r4,1
 400ecd4:	1085883a 	add	r2,r2,r2
 400ecd8:	003e9006 	br	400e71c <__alt_data_end+0xfc00e71c>

0400ecdc <memcpy>:
 400ecdc:	defffd04 	addi	sp,sp,-12
 400ece0:	dfc00215 	stw	ra,8(sp)
 400ece4:	dc400115 	stw	r17,4(sp)
 400ece8:	dc000015 	stw	r16,0(sp)
 400ecec:	00c003c4 	movi	r3,15
 400ecf0:	2005883a 	mov	r2,r4
 400ecf4:	1980452e 	bgeu	r3,r6,400ee0c <memcpy+0x130>
 400ecf8:	2906b03a 	or	r3,r5,r4
 400ecfc:	18c000cc 	andi	r3,r3,3
 400ed00:	1800441e 	bne	r3,zero,400ee14 <memcpy+0x138>
 400ed04:	347ffc04 	addi	r17,r6,-16
 400ed08:	8822d13a 	srli	r17,r17,4
 400ed0c:	28c00104 	addi	r3,r5,4
 400ed10:	23400104 	addi	r13,r4,4
 400ed14:	8820913a 	slli	r16,r17,4
 400ed18:	2b000204 	addi	r12,r5,8
 400ed1c:	22c00204 	addi	r11,r4,8
 400ed20:	84000504 	addi	r16,r16,20
 400ed24:	2a800304 	addi	r10,r5,12
 400ed28:	22400304 	addi	r9,r4,12
 400ed2c:	2c21883a 	add	r16,r5,r16
 400ed30:	2811883a 	mov	r8,r5
 400ed34:	200f883a 	mov	r7,r4
 400ed38:	41000017 	ldw	r4,0(r8)
 400ed3c:	1fc00017 	ldw	ra,0(r3)
 400ed40:	63c00017 	ldw	r15,0(r12)
 400ed44:	39000015 	stw	r4,0(r7)
 400ed48:	53800017 	ldw	r14,0(r10)
 400ed4c:	6fc00015 	stw	ra,0(r13)
 400ed50:	5bc00015 	stw	r15,0(r11)
 400ed54:	4b800015 	stw	r14,0(r9)
 400ed58:	18c00404 	addi	r3,r3,16
 400ed5c:	39c00404 	addi	r7,r7,16
 400ed60:	42000404 	addi	r8,r8,16
 400ed64:	6b400404 	addi	r13,r13,16
 400ed68:	63000404 	addi	r12,r12,16
 400ed6c:	5ac00404 	addi	r11,r11,16
 400ed70:	52800404 	addi	r10,r10,16
 400ed74:	4a400404 	addi	r9,r9,16
 400ed78:	1c3fef1e 	bne	r3,r16,400ed38 <__alt_data_end+0xfc00ed38>
 400ed7c:	89c00044 	addi	r7,r17,1
 400ed80:	380e913a 	slli	r7,r7,4
 400ed84:	310003cc 	andi	r4,r6,15
 400ed88:	02c000c4 	movi	r11,3
 400ed8c:	11c7883a 	add	r3,r2,r7
 400ed90:	29cb883a 	add	r5,r5,r7
 400ed94:	5900212e 	bgeu	r11,r4,400ee1c <memcpy+0x140>
 400ed98:	1813883a 	mov	r9,r3
 400ed9c:	2811883a 	mov	r8,r5
 400eda0:	200f883a 	mov	r7,r4
 400eda4:	42800017 	ldw	r10,0(r8)
 400eda8:	4a400104 	addi	r9,r9,4
 400edac:	39ffff04 	addi	r7,r7,-4
 400edb0:	4abfff15 	stw	r10,-4(r9)
 400edb4:	42000104 	addi	r8,r8,4
 400edb8:	59fffa36 	bltu	r11,r7,400eda4 <__alt_data_end+0xfc00eda4>
 400edbc:	213fff04 	addi	r4,r4,-4
 400edc0:	2008d0ba 	srli	r4,r4,2
 400edc4:	318000cc 	andi	r6,r6,3
 400edc8:	21000044 	addi	r4,r4,1
 400edcc:	2109883a 	add	r4,r4,r4
 400edd0:	2109883a 	add	r4,r4,r4
 400edd4:	1907883a 	add	r3,r3,r4
 400edd8:	290b883a 	add	r5,r5,r4
 400eddc:	30000626 	beq	r6,zero,400edf8 <memcpy+0x11c>
 400ede0:	198d883a 	add	r6,r3,r6
 400ede4:	29c00003 	ldbu	r7,0(r5)
 400ede8:	18c00044 	addi	r3,r3,1
 400edec:	29400044 	addi	r5,r5,1
 400edf0:	19ffffc5 	stb	r7,-1(r3)
 400edf4:	19bffb1e 	bne	r3,r6,400ede4 <__alt_data_end+0xfc00ede4>
 400edf8:	dfc00217 	ldw	ra,8(sp)
 400edfc:	dc400117 	ldw	r17,4(sp)
 400ee00:	dc000017 	ldw	r16,0(sp)
 400ee04:	dec00304 	addi	sp,sp,12
 400ee08:	f800283a 	ret
 400ee0c:	2007883a 	mov	r3,r4
 400ee10:	003ff206 	br	400eddc <__alt_data_end+0xfc00eddc>
 400ee14:	2007883a 	mov	r3,r4
 400ee18:	003ff106 	br	400ede0 <__alt_data_end+0xfc00ede0>
 400ee1c:	200d883a 	mov	r6,r4
 400ee20:	003fee06 	br	400eddc <__alt_data_end+0xfc00eddc>

0400ee24 <memset>:
 400ee24:	20c000cc 	andi	r3,r4,3
 400ee28:	2005883a 	mov	r2,r4
 400ee2c:	18004426 	beq	r3,zero,400ef40 <memset+0x11c>
 400ee30:	31ffffc4 	addi	r7,r6,-1
 400ee34:	30004026 	beq	r6,zero,400ef38 <memset+0x114>
 400ee38:	2813883a 	mov	r9,r5
 400ee3c:	200d883a 	mov	r6,r4
 400ee40:	2007883a 	mov	r3,r4
 400ee44:	00000406 	br	400ee58 <memset+0x34>
 400ee48:	3a3fffc4 	addi	r8,r7,-1
 400ee4c:	31800044 	addi	r6,r6,1
 400ee50:	38003926 	beq	r7,zero,400ef38 <memset+0x114>
 400ee54:	400f883a 	mov	r7,r8
 400ee58:	18c00044 	addi	r3,r3,1
 400ee5c:	32400005 	stb	r9,0(r6)
 400ee60:	1a0000cc 	andi	r8,r3,3
 400ee64:	403ff81e 	bne	r8,zero,400ee48 <__alt_data_end+0xfc00ee48>
 400ee68:	010000c4 	movi	r4,3
 400ee6c:	21c02d2e 	bgeu	r4,r7,400ef24 <memset+0x100>
 400ee70:	29003fcc 	andi	r4,r5,255
 400ee74:	200c923a 	slli	r6,r4,8
 400ee78:	3108b03a 	or	r4,r6,r4
 400ee7c:	200c943a 	slli	r6,r4,16
 400ee80:	218cb03a 	or	r6,r4,r6
 400ee84:	010003c4 	movi	r4,15
 400ee88:	21c0182e 	bgeu	r4,r7,400eeec <memset+0xc8>
 400ee8c:	3b3ffc04 	addi	r12,r7,-16
 400ee90:	6018d13a 	srli	r12,r12,4
 400ee94:	1a000104 	addi	r8,r3,4
 400ee98:	1ac00204 	addi	r11,r3,8
 400ee9c:	6008913a 	slli	r4,r12,4
 400eea0:	1a800304 	addi	r10,r3,12
 400eea4:	1813883a 	mov	r9,r3
 400eea8:	21000504 	addi	r4,r4,20
 400eeac:	1909883a 	add	r4,r3,r4
 400eeb0:	49800015 	stw	r6,0(r9)
 400eeb4:	41800015 	stw	r6,0(r8)
 400eeb8:	59800015 	stw	r6,0(r11)
 400eebc:	51800015 	stw	r6,0(r10)
 400eec0:	42000404 	addi	r8,r8,16
 400eec4:	4a400404 	addi	r9,r9,16
 400eec8:	5ac00404 	addi	r11,r11,16
 400eecc:	52800404 	addi	r10,r10,16
 400eed0:	413ff71e 	bne	r8,r4,400eeb0 <__alt_data_end+0xfc00eeb0>
 400eed4:	63000044 	addi	r12,r12,1
 400eed8:	6018913a 	slli	r12,r12,4
 400eedc:	39c003cc 	andi	r7,r7,15
 400eee0:	010000c4 	movi	r4,3
 400eee4:	1b07883a 	add	r3,r3,r12
 400eee8:	21c00e2e 	bgeu	r4,r7,400ef24 <memset+0x100>
 400eeec:	1813883a 	mov	r9,r3
 400eef0:	3811883a 	mov	r8,r7
 400eef4:	010000c4 	movi	r4,3
 400eef8:	49800015 	stw	r6,0(r9)
 400eefc:	423fff04 	addi	r8,r8,-4
 400ef00:	4a400104 	addi	r9,r9,4
 400ef04:	223ffc36 	bltu	r4,r8,400eef8 <__alt_data_end+0xfc00eef8>
 400ef08:	393fff04 	addi	r4,r7,-4
 400ef0c:	2008d0ba 	srli	r4,r4,2
 400ef10:	39c000cc 	andi	r7,r7,3
 400ef14:	21000044 	addi	r4,r4,1
 400ef18:	2109883a 	add	r4,r4,r4
 400ef1c:	2109883a 	add	r4,r4,r4
 400ef20:	1907883a 	add	r3,r3,r4
 400ef24:	38000526 	beq	r7,zero,400ef3c <memset+0x118>
 400ef28:	19cf883a 	add	r7,r3,r7
 400ef2c:	19400005 	stb	r5,0(r3)
 400ef30:	18c00044 	addi	r3,r3,1
 400ef34:	38fffd1e 	bne	r7,r3,400ef2c <__alt_data_end+0xfc00ef2c>
 400ef38:	f800283a 	ret
 400ef3c:	f800283a 	ret
 400ef40:	2007883a 	mov	r3,r4
 400ef44:	300f883a 	mov	r7,r6
 400ef48:	003fc706 	br	400ee68 <__alt_data_end+0xfc00ee68>

0400ef4c <_printf_r>:
 400ef4c:	defffd04 	addi	sp,sp,-12
 400ef50:	2805883a 	mov	r2,r5
 400ef54:	dfc00015 	stw	ra,0(sp)
 400ef58:	d9800115 	stw	r6,4(sp)
 400ef5c:	d9c00215 	stw	r7,8(sp)
 400ef60:	21400217 	ldw	r5,8(r4)
 400ef64:	d9c00104 	addi	r7,sp,4
 400ef68:	100d883a 	mov	r6,r2
 400ef6c:	400f5800 	call	400f580 <___vfprintf_internal_r>
 400ef70:	dfc00017 	ldw	ra,0(sp)
 400ef74:	dec00304 	addi	sp,sp,12
 400ef78:	f800283a 	ret

0400ef7c <printf>:
 400ef7c:	defffc04 	addi	sp,sp,-16
 400ef80:	dfc00015 	stw	ra,0(sp)
 400ef84:	d9400115 	stw	r5,4(sp)
 400ef88:	d9800215 	stw	r6,8(sp)
 400ef8c:	d9c00315 	stw	r7,12(sp)
 400ef90:	008100f4 	movhi	r2,1027
 400ef94:	10a98804 	addi	r2,r2,-23008
 400ef98:	10800017 	ldw	r2,0(r2)
 400ef9c:	200b883a 	mov	r5,r4
 400efa0:	d9800104 	addi	r6,sp,4
 400efa4:	11000217 	ldw	r4,8(r2)
 400efa8:	401185c0 	call	401185c <__vfprintf_internal>
 400efac:	dfc00017 	ldw	ra,0(sp)
 400efb0:	dec00404 	addi	sp,sp,16
 400efb4:	f800283a 	ret

0400efb8 <_putchar_r>:
 400efb8:	21800217 	ldw	r6,8(r4)
 400efbc:	40159a41 	jmpi	40159a4 <_putc_r>

0400efc0 <putchar>:
 400efc0:	008100f4 	movhi	r2,1027
 400efc4:	10a98804 	addi	r2,r2,-23008
 400efc8:	200b883a 	mov	r5,r4
 400efcc:	11000017 	ldw	r4,0(r2)
 400efd0:	21800217 	ldw	r6,8(r4)
 400efd4:	40159a41 	jmpi	40159a4 <_putc_r>

0400efd8 <_puts_r>:
 400efd8:	defff604 	addi	sp,sp,-40
 400efdc:	dc000715 	stw	r16,28(sp)
 400efe0:	2021883a 	mov	r16,r4
 400efe4:	2809883a 	mov	r4,r5
 400efe8:	dc400815 	stw	r17,32(sp)
 400efec:	dfc00915 	stw	ra,36(sp)
 400eff0:	2823883a 	mov	r17,r5
 400eff4:	400f4e00 	call	400f4e0 <strlen>
 400eff8:	10c00044 	addi	r3,r2,1
 400effc:	d8800115 	stw	r2,4(sp)
 400f000:	008100b4 	movhi	r2,1026
 400f004:	109c9804 	addi	r2,r2,29280
 400f008:	d8800215 	stw	r2,8(sp)
 400f00c:	00800044 	movi	r2,1
 400f010:	d8800315 	stw	r2,12(sp)
 400f014:	00800084 	movi	r2,2
 400f018:	dc400015 	stw	r17,0(sp)
 400f01c:	d8c00615 	stw	r3,24(sp)
 400f020:	dec00415 	stw	sp,16(sp)
 400f024:	d8800515 	stw	r2,20(sp)
 400f028:	80000226 	beq	r16,zero,400f034 <_puts_r+0x5c>
 400f02c:	80800e17 	ldw	r2,56(r16)
 400f030:	10001426 	beq	r2,zero,400f084 <_puts_r+0xac>
 400f034:	81400217 	ldw	r5,8(r16)
 400f038:	2880030b 	ldhu	r2,12(r5)
 400f03c:	10c8000c 	andi	r3,r2,8192
 400f040:	1800061e 	bne	r3,zero,400f05c <_puts_r+0x84>
 400f044:	29001917 	ldw	r4,100(r5)
 400f048:	00f7ffc4 	movi	r3,-8193
 400f04c:	10880014 	ori	r2,r2,8192
 400f050:	20c6703a 	and	r3,r4,r3
 400f054:	2880030d 	sth	r2,12(r5)
 400f058:	28c01915 	stw	r3,100(r5)
 400f05c:	d9800404 	addi	r6,sp,16
 400f060:	8009883a 	mov	r4,r16
 400f064:	4013dc40 	call	4013dc4 <__sfvwrite_r>
 400f068:	1000091e 	bne	r2,zero,400f090 <_puts_r+0xb8>
 400f06c:	00800284 	movi	r2,10
 400f070:	dfc00917 	ldw	ra,36(sp)
 400f074:	dc400817 	ldw	r17,32(sp)
 400f078:	dc000717 	ldw	r16,28(sp)
 400f07c:	dec00a04 	addi	sp,sp,40
 400f080:	f800283a 	ret
 400f084:	8009883a 	mov	r4,r16
 400f088:	40139400 	call	4013940 <__sinit>
 400f08c:	003fe906 	br	400f034 <__alt_data_end+0xfc00f034>
 400f090:	00bfffc4 	movi	r2,-1
 400f094:	003ff606 	br	400f070 <__alt_data_end+0xfc00f070>

0400f098 <puts>:
 400f098:	008100f4 	movhi	r2,1027
 400f09c:	10a98804 	addi	r2,r2,-23008
 400f0a0:	200b883a 	mov	r5,r4
 400f0a4:	11000017 	ldw	r4,0(r2)
 400f0a8:	400efd81 	jmpi	400efd8 <_puts_r>

0400f0ac <_sbrk_r>:
 400f0ac:	defffd04 	addi	sp,sp,-12
 400f0b0:	dc000015 	stw	r16,0(sp)
 400f0b4:	040100f4 	movhi	r16,1027
 400f0b8:	dc400115 	stw	r17,4(sp)
 400f0bc:	84361a04 	addi	r16,r16,-10136
 400f0c0:	2023883a 	mov	r17,r4
 400f0c4:	2809883a 	mov	r4,r5
 400f0c8:	dfc00215 	stw	ra,8(sp)
 400f0cc:	80000015 	stw	zero,0(r16)
 400f0d0:	401bfcc0 	call	401bfcc <sbrk>
 400f0d4:	00ffffc4 	movi	r3,-1
 400f0d8:	10c00526 	beq	r2,r3,400f0f0 <_sbrk_r+0x44>
 400f0dc:	dfc00217 	ldw	ra,8(sp)
 400f0e0:	dc400117 	ldw	r17,4(sp)
 400f0e4:	dc000017 	ldw	r16,0(sp)
 400f0e8:	dec00304 	addi	sp,sp,12
 400f0ec:	f800283a 	ret
 400f0f0:	80c00017 	ldw	r3,0(r16)
 400f0f4:	183ff926 	beq	r3,zero,400f0dc <__alt_data_end+0xfc00f0dc>
 400f0f8:	88c00015 	stw	r3,0(r17)
 400f0fc:	003ff706 	br	400f0dc <__alt_data_end+0xfc00f0dc>

0400f100 <_init_signal_r>:
 400f100:	2080b717 	ldw	r2,732(r4)
 400f104:	10000226 	beq	r2,zero,400f110 <_init_signal_r+0x10>
 400f108:	0005883a 	mov	r2,zero
 400f10c:	f800283a 	ret
 400f110:	defffe04 	addi	sp,sp,-8
 400f114:	01402004 	movi	r5,128
 400f118:	dc000015 	stw	r16,0(sp)
 400f11c:	dfc00115 	stw	ra,4(sp)
 400f120:	2021883a 	mov	r16,r4
 400f124:	400e4d00 	call	400e4d0 <_malloc_r>
 400f128:	8080b715 	stw	r2,732(r16)
 400f12c:	10000d26 	beq	r2,zero,400f164 <_init_signal_r+0x64>
 400f130:	0007883a 	mov	r3,zero
 400f134:	01002004 	movi	r4,128
 400f138:	00000106 	br	400f140 <_init_signal_r+0x40>
 400f13c:	8080b717 	ldw	r2,732(r16)
 400f140:	10c5883a 	add	r2,r2,r3
 400f144:	10000015 	stw	zero,0(r2)
 400f148:	18c00104 	addi	r3,r3,4
 400f14c:	193ffb1e 	bne	r3,r4,400f13c <__alt_data_end+0xfc00f13c>
 400f150:	0005883a 	mov	r2,zero
 400f154:	dfc00117 	ldw	ra,4(sp)
 400f158:	dc000017 	ldw	r16,0(sp)
 400f15c:	dec00204 	addi	sp,sp,8
 400f160:	f800283a 	ret
 400f164:	00bfffc4 	movi	r2,-1
 400f168:	003ffa06 	br	400f154 <__alt_data_end+0xfc00f154>

0400f16c <_signal_r>:
 400f16c:	00c007c4 	movi	r3,31
 400f170:	19401536 	bltu	r3,r5,400f1c8 <_signal_r+0x5c>
 400f174:	2080b717 	ldw	r2,732(r4)
 400f178:	defffc04 	addi	sp,sp,-16
 400f17c:	dc800215 	stw	r18,8(sp)
 400f180:	dc400115 	stw	r17,4(sp)
 400f184:	dc000015 	stw	r16,0(sp)
 400f188:	dfc00315 	stw	ra,12(sp)
 400f18c:	3023883a 	mov	r17,r6
 400f190:	2021883a 	mov	r16,r4
 400f194:	2825883a 	mov	r18,r5
 400f198:	10000f26 	beq	r2,zero,400f1d8 <_signal_r+0x6c>
 400f19c:	948b883a 	add	r5,r18,r18
 400f1a0:	294b883a 	add	r5,r5,r5
 400f1a4:	114b883a 	add	r5,r2,r5
 400f1a8:	28800017 	ldw	r2,0(r5)
 400f1ac:	2c400015 	stw	r17,0(r5)
 400f1b0:	dfc00317 	ldw	ra,12(sp)
 400f1b4:	dc800217 	ldw	r18,8(sp)
 400f1b8:	dc400117 	ldw	r17,4(sp)
 400f1bc:	dc000017 	ldw	r16,0(sp)
 400f1c0:	dec00404 	addi	sp,sp,16
 400f1c4:	f800283a 	ret
 400f1c8:	00c00584 	movi	r3,22
 400f1cc:	20c00015 	stw	r3,0(r4)
 400f1d0:	00bfffc4 	movi	r2,-1
 400f1d4:	f800283a 	ret
 400f1d8:	400f1000 	call	400f100 <_init_signal_r>
 400f1dc:	1000021e 	bne	r2,zero,400f1e8 <_signal_r+0x7c>
 400f1e0:	8080b717 	ldw	r2,732(r16)
 400f1e4:	003fed06 	br	400f19c <__alt_data_end+0xfc00f19c>
 400f1e8:	00bfffc4 	movi	r2,-1
 400f1ec:	003ff006 	br	400f1b0 <__alt_data_end+0xfc00f1b0>

0400f1f0 <_raise_r>:
 400f1f0:	008007c4 	movi	r2,31
 400f1f4:	11402936 	bltu	r2,r5,400f29c <_raise_r+0xac>
 400f1f8:	20c0b717 	ldw	r3,732(r4)
 400f1fc:	defffd04 	addi	sp,sp,-12
 400f200:	dc400115 	stw	r17,4(sp)
 400f204:	dc000015 	stw	r16,0(sp)
 400f208:	dfc00215 	stw	ra,8(sp)
 400f20c:	2021883a 	mov	r16,r4
 400f210:	2823883a 	mov	r17,r5
 400f214:	18001726 	beq	r3,zero,400f274 <_raise_r+0x84>
 400f218:	2945883a 	add	r2,r5,r5
 400f21c:	1085883a 	add	r2,r2,r2
 400f220:	1887883a 	add	r3,r3,r2
 400f224:	19800017 	ldw	r6,0(r3)
 400f228:	30001226 	beq	r6,zero,400f274 <_raise_r+0x84>
 400f22c:	00800044 	movi	r2,1
 400f230:	30800e26 	beq	r6,r2,400f26c <_raise_r+0x7c>
 400f234:	013fffc4 	movi	r4,-1
 400f238:	31000926 	beq	r6,r4,400f260 <_raise_r+0x70>
 400f23c:	18000015 	stw	zero,0(r3)
 400f240:	2809883a 	mov	r4,r5
 400f244:	303ee83a 	callr	r6
 400f248:	0005883a 	mov	r2,zero
 400f24c:	dfc00217 	ldw	ra,8(sp)
 400f250:	dc400117 	ldw	r17,4(sp)
 400f254:	dc000017 	ldw	r16,0(sp)
 400f258:	dec00304 	addi	sp,sp,12
 400f25c:	f800283a 	ret
 400f260:	00c00584 	movi	r3,22
 400f264:	80c00015 	stw	r3,0(r16)
 400f268:	003ff806 	br	400f24c <__alt_data_end+0xfc00f24c>
 400f26c:	0005883a 	mov	r2,zero
 400f270:	003ff606 	br	400f24c <__alt_data_end+0xfc00f24c>
 400f274:	8009883a 	mov	r4,r16
 400f278:	400f4000 	call	400f400 <_getpid_r>
 400f27c:	880d883a 	mov	r6,r17
 400f280:	100b883a 	mov	r5,r2
 400f284:	8009883a 	mov	r4,r16
 400f288:	dfc00217 	ldw	ra,8(sp)
 400f28c:	dc400117 	ldw	r17,4(sp)
 400f290:	dc000017 	ldw	r16,0(sp)
 400f294:	dec00304 	addi	sp,sp,12
 400f298:	400f3a41 	jmpi	400f3a4 <_kill_r>
 400f29c:	00800584 	movi	r2,22
 400f2a0:	20800015 	stw	r2,0(r4)
 400f2a4:	00bfffc4 	movi	r2,-1
 400f2a8:	f800283a 	ret

0400f2ac <__sigtramp_r>:
 400f2ac:	008007c4 	movi	r2,31
 400f2b0:	11402436 	bltu	r2,r5,400f344 <__sigtramp_r+0x98>
 400f2b4:	20c0b717 	ldw	r3,732(r4)
 400f2b8:	defffd04 	addi	sp,sp,-12
 400f2bc:	dc400115 	stw	r17,4(sp)
 400f2c0:	dc000015 	stw	r16,0(sp)
 400f2c4:	dfc00215 	stw	ra,8(sp)
 400f2c8:	2021883a 	mov	r16,r4
 400f2cc:	2823883a 	mov	r17,r5
 400f2d0:	18001826 	beq	r3,zero,400f334 <__sigtramp_r+0x88>
 400f2d4:	8c45883a 	add	r2,r17,r17
 400f2d8:	1085883a 	add	r2,r2,r2
 400f2dc:	1885883a 	add	r2,r3,r2
 400f2e0:	10c00017 	ldw	r3,0(r2)
 400f2e4:	18001126 	beq	r3,zero,400f32c <__sigtramp_r+0x80>
 400f2e8:	013fffc4 	movi	r4,-1
 400f2ec:	19000d26 	beq	r3,r4,400f324 <__sigtramp_r+0x78>
 400f2f0:	01000044 	movi	r4,1
 400f2f4:	19000926 	beq	r3,r4,400f31c <__sigtramp_r+0x70>
 400f2f8:	10000015 	stw	zero,0(r2)
 400f2fc:	8809883a 	mov	r4,r17
 400f300:	183ee83a 	callr	r3
 400f304:	0005883a 	mov	r2,zero
 400f308:	dfc00217 	ldw	ra,8(sp)
 400f30c:	dc400117 	ldw	r17,4(sp)
 400f310:	dc000017 	ldw	r16,0(sp)
 400f314:	dec00304 	addi	sp,sp,12
 400f318:	f800283a 	ret
 400f31c:	008000c4 	movi	r2,3
 400f320:	003ff906 	br	400f308 <__alt_data_end+0xfc00f308>
 400f324:	00800084 	movi	r2,2
 400f328:	003ff706 	br	400f308 <__alt_data_end+0xfc00f308>
 400f32c:	00800044 	movi	r2,1
 400f330:	003ff506 	br	400f308 <__alt_data_end+0xfc00f308>
 400f334:	400f1000 	call	400f100 <_init_signal_r>
 400f338:	1000041e 	bne	r2,zero,400f34c <__sigtramp_r+0xa0>
 400f33c:	80c0b717 	ldw	r3,732(r16)
 400f340:	003fe406 	br	400f2d4 <__alt_data_end+0xfc00f2d4>
 400f344:	00bfffc4 	movi	r2,-1
 400f348:	f800283a 	ret
 400f34c:	00bfffc4 	movi	r2,-1
 400f350:	003fed06 	br	400f308 <__alt_data_end+0xfc00f308>

0400f354 <raise>:
 400f354:	008100f4 	movhi	r2,1027
 400f358:	10a98804 	addi	r2,r2,-23008
 400f35c:	200b883a 	mov	r5,r4
 400f360:	11000017 	ldw	r4,0(r2)
 400f364:	400f1f01 	jmpi	400f1f0 <_raise_r>

0400f368 <signal>:
 400f368:	008100f4 	movhi	r2,1027
 400f36c:	10a98804 	addi	r2,r2,-23008
 400f370:	280d883a 	mov	r6,r5
 400f374:	200b883a 	mov	r5,r4
 400f378:	11000017 	ldw	r4,0(r2)
 400f37c:	400f16c1 	jmpi	400f16c <_signal_r>

0400f380 <_init_signal>:
 400f380:	008100f4 	movhi	r2,1027
 400f384:	10a98804 	addi	r2,r2,-23008
 400f388:	11000017 	ldw	r4,0(r2)
 400f38c:	400f1001 	jmpi	400f100 <_init_signal_r>

0400f390 <__sigtramp>:
 400f390:	008100f4 	movhi	r2,1027
 400f394:	10a98804 	addi	r2,r2,-23008
 400f398:	200b883a 	mov	r5,r4
 400f39c:	11000017 	ldw	r4,0(r2)
 400f3a0:	400f2ac1 	jmpi	400f2ac <__sigtramp_r>

0400f3a4 <_kill_r>:
 400f3a4:	defffd04 	addi	sp,sp,-12
 400f3a8:	2805883a 	mov	r2,r5
 400f3ac:	dc000015 	stw	r16,0(sp)
 400f3b0:	040100f4 	movhi	r16,1027
 400f3b4:	dc400115 	stw	r17,4(sp)
 400f3b8:	84361a04 	addi	r16,r16,-10136
 400f3bc:	2023883a 	mov	r17,r4
 400f3c0:	300b883a 	mov	r5,r6
 400f3c4:	1009883a 	mov	r4,r2
 400f3c8:	dfc00215 	stw	ra,8(sp)
 400f3cc:	80000015 	stw	zero,0(r16)
 400f3d0:	401ba100 	call	401ba10 <kill>
 400f3d4:	00ffffc4 	movi	r3,-1
 400f3d8:	10c00526 	beq	r2,r3,400f3f0 <_kill_r+0x4c>
 400f3dc:	dfc00217 	ldw	ra,8(sp)
 400f3e0:	dc400117 	ldw	r17,4(sp)
 400f3e4:	dc000017 	ldw	r16,0(sp)
 400f3e8:	dec00304 	addi	sp,sp,12
 400f3ec:	f800283a 	ret
 400f3f0:	80c00017 	ldw	r3,0(r16)
 400f3f4:	183ff926 	beq	r3,zero,400f3dc <__alt_data_end+0xfc00f3dc>
 400f3f8:	88c00015 	stw	r3,0(r17)
 400f3fc:	003ff706 	br	400f3dc <__alt_data_end+0xfc00f3dc>

0400f400 <_getpid_r>:
 400f400:	401b8cc1 	jmpi	401b8cc <getpid>

0400f404 <strcmp>:
 400f404:	2144b03a 	or	r2,r4,r5
 400f408:	108000cc 	andi	r2,r2,3
 400f40c:	1000171e 	bne	r2,zero,400f46c <strcmp+0x68>
 400f410:	20800017 	ldw	r2,0(r4)
 400f414:	28c00017 	ldw	r3,0(r5)
 400f418:	10c0141e 	bne	r2,r3,400f46c <strcmp+0x68>
 400f41c:	027fbff4 	movhi	r9,65279
 400f420:	4a7fbfc4 	addi	r9,r9,-257
 400f424:	0086303a 	nor	r3,zero,r2
 400f428:	02202074 	movhi	r8,32897
 400f42c:	1245883a 	add	r2,r2,r9
 400f430:	42202004 	addi	r8,r8,-32640
 400f434:	10c4703a 	and	r2,r2,r3
 400f438:	1204703a 	and	r2,r2,r8
 400f43c:	10000226 	beq	r2,zero,400f448 <strcmp+0x44>
 400f440:	00002306 	br	400f4d0 <strcmp+0xcc>
 400f444:	1000221e 	bne	r2,zero,400f4d0 <strcmp+0xcc>
 400f448:	21000104 	addi	r4,r4,4
 400f44c:	20c00017 	ldw	r3,0(r4)
 400f450:	29400104 	addi	r5,r5,4
 400f454:	29800017 	ldw	r6,0(r5)
 400f458:	1a4f883a 	add	r7,r3,r9
 400f45c:	00c4303a 	nor	r2,zero,r3
 400f460:	3884703a 	and	r2,r7,r2
 400f464:	1204703a 	and	r2,r2,r8
 400f468:	19bff626 	beq	r3,r6,400f444 <__alt_data_end+0xfc00f444>
 400f46c:	20800003 	ldbu	r2,0(r4)
 400f470:	10c03fcc 	andi	r3,r2,255
 400f474:	18c0201c 	xori	r3,r3,128
 400f478:	18ffe004 	addi	r3,r3,-128
 400f47c:	18000c26 	beq	r3,zero,400f4b0 <strcmp+0xac>
 400f480:	29800007 	ldb	r6,0(r5)
 400f484:	19800326 	beq	r3,r6,400f494 <strcmp+0x90>
 400f488:	00001306 	br	400f4d8 <strcmp+0xd4>
 400f48c:	29800007 	ldb	r6,0(r5)
 400f490:	11800b1e 	bne	r2,r6,400f4c0 <strcmp+0xbc>
 400f494:	21000044 	addi	r4,r4,1
 400f498:	20c00003 	ldbu	r3,0(r4)
 400f49c:	29400044 	addi	r5,r5,1
 400f4a0:	18803fcc 	andi	r2,r3,255
 400f4a4:	1080201c 	xori	r2,r2,128
 400f4a8:	10bfe004 	addi	r2,r2,-128
 400f4ac:	103ff71e 	bne	r2,zero,400f48c <__alt_data_end+0xfc00f48c>
 400f4b0:	0007883a 	mov	r3,zero
 400f4b4:	28800003 	ldbu	r2,0(r5)
 400f4b8:	1885c83a 	sub	r2,r3,r2
 400f4bc:	f800283a 	ret
 400f4c0:	28800003 	ldbu	r2,0(r5)
 400f4c4:	18c03fcc 	andi	r3,r3,255
 400f4c8:	1885c83a 	sub	r2,r3,r2
 400f4cc:	f800283a 	ret
 400f4d0:	0005883a 	mov	r2,zero
 400f4d4:	f800283a 	ret
 400f4d8:	10c03fcc 	andi	r3,r2,255
 400f4dc:	003ff506 	br	400f4b4 <__alt_data_end+0xfc00f4b4>

0400f4e0 <strlen>:
 400f4e0:	208000cc 	andi	r2,r4,3
 400f4e4:	10002026 	beq	r2,zero,400f568 <strlen+0x88>
 400f4e8:	20800007 	ldb	r2,0(r4)
 400f4ec:	10002026 	beq	r2,zero,400f570 <strlen+0x90>
 400f4f0:	2005883a 	mov	r2,r4
 400f4f4:	00000206 	br	400f500 <strlen+0x20>
 400f4f8:	10c00007 	ldb	r3,0(r2)
 400f4fc:	18001826 	beq	r3,zero,400f560 <strlen+0x80>
 400f500:	10800044 	addi	r2,r2,1
 400f504:	10c000cc 	andi	r3,r2,3
 400f508:	183ffb1e 	bne	r3,zero,400f4f8 <__alt_data_end+0xfc00f4f8>
 400f50c:	10c00017 	ldw	r3,0(r2)
 400f510:	01ffbff4 	movhi	r7,65279
 400f514:	39ffbfc4 	addi	r7,r7,-257
 400f518:	00ca303a 	nor	r5,zero,r3
 400f51c:	01a02074 	movhi	r6,32897
 400f520:	19c7883a 	add	r3,r3,r7
 400f524:	31a02004 	addi	r6,r6,-32640
 400f528:	1946703a 	and	r3,r3,r5
 400f52c:	1986703a 	and	r3,r3,r6
 400f530:	1800091e 	bne	r3,zero,400f558 <strlen+0x78>
 400f534:	10800104 	addi	r2,r2,4
 400f538:	10c00017 	ldw	r3,0(r2)
 400f53c:	19cb883a 	add	r5,r3,r7
 400f540:	00c6303a 	nor	r3,zero,r3
 400f544:	28c6703a 	and	r3,r5,r3
 400f548:	1986703a 	and	r3,r3,r6
 400f54c:	183ff926 	beq	r3,zero,400f534 <__alt_data_end+0xfc00f534>
 400f550:	00000106 	br	400f558 <strlen+0x78>
 400f554:	10800044 	addi	r2,r2,1
 400f558:	10c00007 	ldb	r3,0(r2)
 400f55c:	183ffd1e 	bne	r3,zero,400f554 <__alt_data_end+0xfc00f554>
 400f560:	1105c83a 	sub	r2,r2,r4
 400f564:	f800283a 	ret
 400f568:	2005883a 	mov	r2,r4
 400f56c:	003fe706 	br	400f50c <__alt_data_end+0xfc00f50c>
 400f570:	0005883a 	mov	r2,zero
 400f574:	f800283a 	ret

0400f578 <_times_r>:
 400f578:	2809883a 	mov	r4,r5
 400f57c:	401c0b81 	jmpi	401c0b8 <times>

0400f580 <___vfprintf_internal_r>:
 400f580:	deffb804 	addi	sp,sp,-288
 400f584:	dfc04715 	stw	ra,284(sp)
 400f588:	ddc04515 	stw	r23,276(sp)
 400f58c:	dd404315 	stw	r21,268(sp)
 400f590:	d9002d15 	stw	r4,180(sp)
 400f594:	282f883a 	mov	r23,r5
 400f598:	302b883a 	mov	r21,r6
 400f59c:	d9c02e15 	stw	r7,184(sp)
 400f5a0:	df004615 	stw	fp,280(sp)
 400f5a4:	dd804415 	stw	r22,272(sp)
 400f5a8:	dd004215 	stw	r20,264(sp)
 400f5ac:	dcc04115 	stw	r19,260(sp)
 400f5b0:	dc804015 	stw	r18,256(sp)
 400f5b4:	dc403f15 	stw	r17,252(sp)
 400f5b8:	dc003e15 	stw	r16,248(sp)
 400f5bc:	40144c00 	call	40144c0 <_localeconv_r>
 400f5c0:	10800017 	ldw	r2,0(r2)
 400f5c4:	1009883a 	mov	r4,r2
 400f5c8:	d8803415 	stw	r2,208(sp)
 400f5cc:	400f4e00 	call	400f4e0 <strlen>
 400f5d0:	d8803715 	stw	r2,220(sp)
 400f5d4:	d8802d17 	ldw	r2,180(sp)
 400f5d8:	10000226 	beq	r2,zero,400f5e4 <___vfprintf_internal_r+0x64>
 400f5dc:	10800e17 	ldw	r2,56(r2)
 400f5e0:	1000fb26 	beq	r2,zero,400f9d0 <___vfprintf_internal_r+0x450>
 400f5e4:	b880030b 	ldhu	r2,12(r23)
 400f5e8:	10c8000c 	andi	r3,r2,8192
 400f5ec:	1800061e 	bne	r3,zero,400f608 <___vfprintf_internal_r+0x88>
 400f5f0:	b9001917 	ldw	r4,100(r23)
 400f5f4:	00f7ffc4 	movi	r3,-8193
 400f5f8:	10880014 	ori	r2,r2,8192
 400f5fc:	20c6703a 	and	r3,r4,r3
 400f600:	b880030d 	sth	r2,12(r23)
 400f604:	b8c01915 	stw	r3,100(r23)
 400f608:	10c0020c 	andi	r3,r2,8
 400f60c:	1800c326 	beq	r3,zero,400f91c <___vfprintf_internal_r+0x39c>
 400f610:	b8c00417 	ldw	r3,16(r23)
 400f614:	1800c126 	beq	r3,zero,400f91c <___vfprintf_internal_r+0x39c>
 400f618:	1080068c 	andi	r2,r2,26
 400f61c:	00c00284 	movi	r3,10
 400f620:	10c0c626 	beq	r2,r3,400f93c <___vfprintf_internal_r+0x3bc>
 400f624:	d8c00404 	addi	r3,sp,16
 400f628:	050100b4 	movhi	r20,1026
 400f62c:	d9001e04 	addi	r4,sp,120
 400f630:	a51ca984 	addi	r20,r20,29350
 400f634:	d8c01e15 	stw	r3,120(sp)
 400f638:	d8002015 	stw	zero,128(sp)
 400f63c:	d8001f15 	stw	zero,124(sp)
 400f640:	d8003315 	stw	zero,204(sp)
 400f644:	d8003615 	stw	zero,216(sp)
 400f648:	d8003815 	stw	zero,224(sp)
 400f64c:	1811883a 	mov	r8,r3
 400f650:	d8003915 	stw	zero,228(sp)
 400f654:	d8003a15 	stw	zero,232(sp)
 400f658:	d8002f15 	stw	zero,188(sp)
 400f65c:	d9002815 	stw	r4,160(sp)
 400f660:	a8800007 	ldb	r2,0(r21)
 400f664:	10028b26 	beq	r2,zero,4010094 <___vfprintf_internal_r+0xb14>
 400f668:	00c00944 	movi	r3,37
 400f66c:	a823883a 	mov	r17,r21
 400f670:	10c0021e 	bne	r2,r3,400f67c <___vfprintf_internal_r+0xfc>
 400f674:	00001406 	br	400f6c8 <___vfprintf_internal_r+0x148>
 400f678:	10c00326 	beq	r2,r3,400f688 <___vfprintf_internal_r+0x108>
 400f67c:	8c400044 	addi	r17,r17,1
 400f680:	88800007 	ldb	r2,0(r17)
 400f684:	103ffc1e 	bne	r2,zero,400f678 <__alt_data_end+0xfc00f678>
 400f688:	8d61c83a 	sub	r16,r17,r21
 400f68c:	80000e26 	beq	r16,zero,400f6c8 <___vfprintf_internal_r+0x148>
 400f690:	d8c02017 	ldw	r3,128(sp)
 400f694:	d8801f17 	ldw	r2,124(sp)
 400f698:	45400015 	stw	r21,0(r8)
 400f69c:	1c07883a 	add	r3,r3,r16
 400f6a0:	10800044 	addi	r2,r2,1
 400f6a4:	d8c02015 	stw	r3,128(sp)
 400f6a8:	44000115 	stw	r16,4(r8)
 400f6ac:	d8801f15 	stw	r2,124(sp)
 400f6b0:	00c001c4 	movi	r3,7
 400f6b4:	1880a916 	blt	r3,r2,400f95c <___vfprintf_internal_r+0x3dc>
 400f6b8:	42000204 	addi	r8,r8,8
 400f6bc:	d9402f17 	ldw	r5,188(sp)
 400f6c0:	2c0b883a 	add	r5,r5,r16
 400f6c4:	d9402f15 	stw	r5,188(sp)
 400f6c8:	88800007 	ldb	r2,0(r17)
 400f6cc:	1000aa26 	beq	r2,zero,400f978 <___vfprintf_internal_r+0x3f8>
 400f6d0:	8d400044 	addi	r21,r17,1
 400f6d4:	8c400047 	ldb	r17,1(r17)
 400f6d8:	0021883a 	mov	r16,zero
 400f6dc:	00bfffc4 	movi	r2,-1
 400f6e0:	0025883a 	mov	r18,zero
 400f6e4:	dc002905 	stb	r16,164(sp)
 400f6e8:	d8002785 	stb	zero,158(sp)
 400f6ec:	d8002b05 	stb	zero,172(sp)
 400f6f0:	d8802a15 	stw	r2,168(sp)
 400f6f4:	d8003115 	stw	zero,196(sp)
 400f6f8:	04c01604 	movi	r19,88
 400f6fc:	05800244 	movi	r22,9
 400f700:	9021883a 	mov	r16,r18
 400f704:	4039883a 	mov	fp,r8
 400f708:	ad400044 	addi	r21,r21,1
 400f70c:	88bff804 	addi	r2,r17,-32
 400f710:	98833236 	bltu	r19,r2,40103dc <___vfprintf_internal_r+0xe5c>
 400f714:	100490ba 	slli	r2,r2,2
 400f718:	00c10074 	movhi	r3,1025
 400f71c:	18fdcb04 	addi	r3,r3,-2260
 400f720:	10c5883a 	add	r2,r2,r3
 400f724:	10800017 	ldw	r2,0(r2)
 400f728:	1000683a 	jmp	r2
 400f72c:	040102d4 	movui	r16,1035
 400f730:	040103dc 	xori	r16,zero,1039
 400f734:	040103dc 	xori	r16,zero,1039
 400f738:	040102f4 	movhi	r16,1035
 400f73c:	040103dc 	xori	r16,zero,1039
 400f740:	040103dc 	xori	r16,zero,1039
 400f744:	040103dc 	xori	r16,zero,1039
 400f748:	040103dc 	xori	r16,zero,1039
 400f74c:	040103dc 	xori	r16,zero,1039
 400f750:	040103dc 	xori	r16,zero,1039
 400f754:	0400f9dc 	xori	r16,zero,999
 400f758:	040101e4 	muli	r16,zero,1031
 400f75c:	040103dc 	xori	r16,zero,1039
 400f760:	0400f8a0 	cmpeqi	r16,zero,994
 400f764:	0400fa00 	call	400fa0 <__alt_mem_sdram-0x3bff060>
 400f768:	040103dc 	xori	r16,zero,1039
 400f76c:	0400fa50 	cmplti	r16,zero,1001
 400f770:	0400fa5c 	xori	r16,zero,1001
 400f774:	0400fa5c 	xori	r16,zero,1001
 400f778:	0400fa5c 	xori	r16,zero,1001
 400f77c:	0400fa5c 	xori	r16,zero,1001
 400f780:	0400fa5c 	xori	r16,zero,1001
 400f784:	0400fa5c 	xori	r16,zero,1001
 400f788:	0400fa5c 	xori	r16,zero,1001
 400f78c:	0400fa5c 	xori	r16,zero,1001
 400f790:	0400fa5c 	xori	r16,zero,1001
 400f794:	040103dc 	xori	r16,zero,1039
 400f798:	040103dc 	xori	r16,zero,1039
 400f79c:	040103dc 	xori	r16,zero,1039
 400f7a0:	040103dc 	xori	r16,zero,1039
 400f7a4:	040103dc 	xori	r16,zero,1039
 400f7a8:	040103dc 	xori	r16,zero,1039
 400f7ac:	040103dc 	xori	r16,zero,1039
 400f7b0:	040103dc 	xori	r16,zero,1039
 400f7b4:	040103dc 	xori	r16,zero,1039
 400f7b8:	040103dc 	xori	r16,zero,1039
 400f7bc:	0400fa98 	cmpnei	r16,zero,1002
 400f7c0:	0400fb60 	cmpeqi	r16,zero,1005
 400f7c4:	040103dc 	xori	r16,zero,1039
 400f7c8:	0400fb60 	cmpeqi	r16,zero,1005
 400f7cc:	040103dc 	xori	r16,zero,1039
 400f7d0:	040103dc 	xori	r16,zero,1039
 400f7d4:	040103dc 	xori	r16,zero,1039
 400f7d8:	040103dc 	xori	r16,zero,1039
 400f7dc:	0400fc0c 	andi	r16,zero,1008
 400f7e0:	040103dc 	xori	r16,zero,1039
 400f7e4:	040103dc 	xori	r16,zero,1039
 400f7e8:	0400fc18 	cmpnei	r16,zero,1008
 400f7ec:	040103dc 	xori	r16,zero,1039
 400f7f0:	040103dc 	xori	r16,zero,1039
 400f7f4:	040103dc 	xori	r16,zero,1039
 400f7f8:	040103dc 	xori	r16,zero,1039
 400f7fc:	040103dc 	xori	r16,zero,1039
 400f800:	0401009c 	xori	r16,zero,1026
 400f804:	040103dc 	xori	r16,zero,1039
 400f808:	040103dc 	xori	r16,zero,1039
 400f80c:	04010108 	cmpgei	r16,zero,1028
 400f810:	040103dc 	xori	r16,zero,1039
 400f814:	040103dc 	xori	r16,zero,1039
 400f818:	040103dc 	xori	r16,zero,1039
 400f81c:	040103dc 	xori	r16,zero,1039
 400f820:	040103dc 	xori	r16,zero,1039
 400f824:	040103dc 	xori	r16,zero,1039
 400f828:	040103dc 	xori	r16,zero,1039
 400f82c:	040103dc 	xori	r16,zero,1039
 400f830:	040103dc 	xori	r16,zero,1039
 400f834:	040103dc 	xori	r16,zero,1039
 400f838:	04010380 	call	401038 <__alt_mem_sdram-0x3bfefc8>
 400f83c:	04010300 	call	401030 <__alt_mem_sdram-0x3bfefd0>
 400f840:	0400fb60 	cmpeqi	r16,zero,1005
 400f844:	0400fb60 	cmpeqi	r16,zero,1005
 400f848:	0400fb60 	cmpeqi	r16,zero,1005
 400f84c:	04010320 	cmpeqi	r16,zero,1036
 400f850:	04010300 	call	401030 <__alt_mem_sdram-0x3bfefd0>
 400f854:	040103dc 	xori	r16,zero,1039
 400f858:	040103dc 	xori	r16,zero,1039
 400f85c:	0401032c 	andhi	r16,zero,1036
 400f860:	040103dc 	xori	r16,zero,1039
 400f864:	04010340 	call	401034 <__alt_mem_sdram-0x3bfefcc>
 400f868:	040101c4 	movi	r16,1031
 400f86c:	0400f8ac 	andhi	r16,zero,994
 400f870:	040101fc 	xorhi	r16,zero,1031
 400f874:	040103dc 	xori	r16,zero,1039
 400f878:	04010208 	cmpgei	r16,zero,1032
 400f87c:	040103dc 	xori	r16,zero,1039
 400f880:	0401026c 	andhi	r16,zero,1033
 400f884:	040103dc 	xori	r16,zero,1039
 400f888:	040103dc 	xori	r16,zero,1039
 400f88c:	0401028c 	andi	r16,zero,1034
 400f890:	d8c03117 	ldw	r3,196(sp)
 400f894:	d8802e15 	stw	r2,184(sp)
 400f898:	00c7c83a 	sub	r3,zero,r3
 400f89c:	d8c03115 	stw	r3,196(sp)
 400f8a0:	84000114 	ori	r16,r16,4
 400f8a4:	ac400007 	ldb	r17,0(r21)
 400f8a8:	003f9706 	br	400f708 <__alt_data_end+0xfc00f708>
 400f8ac:	00800c04 	movi	r2,48
 400f8b0:	d8802705 	stb	r2,156(sp)
 400f8b4:	00801e04 	movi	r2,120
 400f8b8:	d8802745 	stb	r2,157(sp)
 400f8bc:	d9002a17 	ldw	r4,168(sp)
 400f8c0:	d8802e17 	ldw	r2,184(sp)
 400f8c4:	d8002785 	stb	zero,158(sp)
 400f8c8:	e011883a 	mov	r8,fp
 400f8cc:	10c00104 	addi	r3,r2,4
 400f8d0:	14c00017 	ldw	r19,0(r2)
 400f8d4:	002d883a 	mov	r22,zero
 400f8d8:	80800094 	ori	r2,r16,2
 400f8dc:	2002ca16 	blt	r4,zero,4010408 <___vfprintf_internal_r+0xe88>
 400f8e0:	00bfdfc4 	movi	r2,-129
 400f8e4:	80a4703a 	and	r18,r16,r2
 400f8e8:	d8c02e15 	stw	r3,184(sp)
 400f8ec:	94800094 	ori	r18,r18,2
 400f8f0:	9802b41e 	bne	r19,zero,40103c4 <___vfprintf_internal_r+0xe44>
 400f8f4:	014100b4 	movhi	r5,1026
 400f8f8:	295ca204 	addi	r5,r5,29320
 400f8fc:	d9403915 	stw	r5,228(sp)
 400f900:	04401e04 	movi	r17,120
 400f904:	d8802a17 	ldw	r2,168(sp)
 400f908:	0039883a 	mov	fp,zero
 400f90c:	1001fa26 	beq	r2,zero,40100f8 <___vfprintf_internal_r+0xb78>
 400f910:	0027883a 	mov	r19,zero
 400f914:	002d883a 	mov	r22,zero
 400f918:	00021906 	br	4010180 <___vfprintf_internal_r+0xc00>
 400f91c:	d9002d17 	ldw	r4,180(sp)
 400f920:	b80b883a 	mov	r5,r23
 400f924:	40119340 	call	4011934 <__swsetup_r>
 400f928:	1005dc1e 	bne	r2,zero,401109c <___vfprintf_internal_r+0x1b1c>
 400f92c:	b880030b 	ldhu	r2,12(r23)
 400f930:	00c00284 	movi	r3,10
 400f934:	1080068c 	andi	r2,r2,26
 400f938:	10ff3a1e 	bne	r2,r3,400f624 <__alt_data_end+0xfc00f624>
 400f93c:	b880038f 	ldh	r2,14(r23)
 400f940:	103f3816 	blt	r2,zero,400f624 <__alt_data_end+0xfc00f624>
 400f944:	d9c02e17 	ldw	r7,184(sp)
 400f948:	d9002d17 	ldw	r4,180(sp)
 400f94c:	a80d883a 	mov	r6,r21
 400f950:	b80b883a 	mov	r5,r23
 400f954:	40118780 	call	4011878 <__sbprintf>
 400f958:	00001106 	br	400f9a0 <___vfprintf_internal_r+0x420>
 400f95c:	d9002d17 	ldw	r4,180(sp)
 400f960:	d9801e04 	addi	r6,sp,120
 400f964:	b80b883a 	mov	r5,r23
 400f968:	401631c0 	call	401631c <__sprint_r>
 400f96c:	1000081e 	bne	r2,zero,400f990 <___vfprintf_internal_r+0x410>
 400f970:	da000404 	addi	r8,sp,16
 400f974:	003f5106 	br	400f6bc <__alt_data_end+0xfc00f6bc>
 400f978:	d8802017 	ldw	r2,128(sp)
 400f97c:	10000426 	beq	r2,zero,400f990 <___vfprintf_internal_r+0x410>
 400f980:	d9002d17 	ldw	r4,180(sp)
 400f984:	d9801e04 	addi	r6,sp,120
 400f988:	b80b883a 	mov	r5,r23
 400f98c:	401631c0 	call	401631c <__sprint_r>
 400f990:	b880030b 	ldhu	r2,12(r23)
 400f994:	1080100c 	andi	r2,r2,64
 400f998:	1005c01e 	bne	r2,zero,401109c <___vfprintf_internal_r+0x1b1c>
 400f99c:	d8802f17 	ldw	r2,188(sp)
 400f9a0:	dfc04717 	ldw	ra,284(sp)
 400f9a4:	df004617 	ldw	fp,280(sp)
 400f9a8:	ddc04517 	ldw	r23,276(sp)
 400f9ac:	dd804417 	ldw	r22,272(sp)
 400f9b0:	dd404317 	ldw	r21,268(sp)
 400f9b4:	dd004217 	ldw	r20,264(sp)
 400f9b8:	dcc04117 	ldw	r19,260(sp)
 400f9bc:	dc804017 	ldw	r18,256(sp)
 400f9c0:	dc403f17 	ldw	r17,252(sp)
 400f9c4:	dc003e17 	ldw	r16,248(sp)
 400f9c8:	dec04804 	addi	sp,sp,288
 400f9cc:	f800283a 	ret
 400f9d0:	d9002d17 	ldw	r4,180(sp)
 400f9d4:	40139400 	call	4013940 <__sinit>
 400f9d8:	003f0206 	br	400f5e4 <__alt_data_end+0xfc00f5e4>
 400f9dc:	d9002e17 	ldw	r4,184(sp)
 400f9e0:	d9402e17 	ldw	r5,184(sp)
 400f9e4:	21000017 	ldw	r4,0(r4)
 400f9e8:	28800104 	addi	r2,r5,4
 400f9ec:	d9003115 	stw	r4,196(sp)
 400f9f0:	203fa716 	blt	r4,zero,400f890 <__alt_data_end+0xfc00f890>
 400f9f4:	d8802e15 	stw	r2,184(sp)
 400f9f8:	ac400007 	ldb	r17,0(r21)
 400f9fc:	003f4206 	br	400f708 <__alt_data_end+0xfc00f708>
 400fa00:	ac400007 	ldb	r17,0(r21)
 400fa04:	01000a84 	movi	r4,42
 400fa08:	a8c00044 	addi	r3,r21,1
 400fa0c:	89075826 	beq	r17,r4,4011770 <___vfprintf_internal_r+0x21f0>
 400fa10:	8cbff404 	addi	r18,r17,-48
 400fa14:	b486ae36 	bltu	r22,r18,40114d0 <___vfprintf_internal_r+0x1f50>
 400fa18:	0009883a 	mov	r4,zero
 400fa1c:	1823883a 	mov	r17,r3
 400fa20:	01400284 	movi	r5,10
 400fa24:	400d3680 	call	400d368 <__mulsi3>
 400fa28:	88c00007 	ldb	r3,0(r17)
 400fa2c:	1489883a 	add	r4,r2,r18
 400fa30:	8d400044 	addi	r21,r17,1
 400fa34:	1cbff404 	addi	r18,r3,-48
 400fa38:	a823883a 	mov	r17,r21
 400fa3c:	b4bff82e 	bgeu	r22,r18,400fa20 <__alt_data_end+0xfc00fa20>
 400fa40:	1823883a 	mov	r17,r3
 400fa44:	2005f616 	blt	r4,zero,4011220 <___vfprintf_internal_r+0x1ca0>
 400fa48:	d9002a15 	stw	r4,168(sp)
 400fa4c:	003f2f06 	br	400f70c <__alt_data_end+0xfc00f70c>
 400fa50:	84002014 	ori	r16,r16,128
 400fa54:	ac400007 	ldb	r17,0(r21)
 400fa58:	003f2b06 	br	400f708 <__alt_data_end+0xfc00f708>
 400fa5c:	8cbff404 	addi	r18,r17,-48
 400fa60:	d8003115 	stw	zero,196(sp)
 400fa64:	0009883a 	mov	r4,zero
 400fa68:	a823883a 	mov	r17,r21
 400fa6c:	01400284 	movi	r5,10
 400fa70:	400d3680 	call	400d368 <__mulsi3>
 400fa74:	88c00007 	ldb	r3,0(r17)
 400fa78:	9089883a 	add	r4,r18,r2
 400fa7c:	ad400044 	addi	r21,r21,1
 400fa80:	1cbff404 	addi	r18,r3,-48
 400fa84:	a823883a 	mov	r17,r21
 400fa88:	b4bff82e 	bgeu	r22,r18,400fa6c <__alt_data_end+0xfc00fa6c>
 400fa8c:	1823883a 	mov	r17,r3
 400fa90:	d9003115 	stw	r4,196(sp)
 400fa94:	003f1d06 	br	400f70c <__alt_data_end+0xfc00f70c>
 400fa98:	8025883a 	mov	r18,r16
 400fa9c:	dc002903 	ldbu	r16,164(sp)
 400faa0:	e011883a 	mov	r8,fp
 400faa4:	84003fcc 	andi	r16,r16,255
 400faa8:	8007531e 	bne	r16,zero,40117f8 <___vfprintf_internal_r+0x2278>
 400faac:	94800414 	ori	r18,r18,16
 400fab0:	9080080c 	andi	r2,r18,32
 400fab4:	1003a326 	beq	r2,zero,4010944 <___vfprintf_internal_r+0x13c4>
 400fab8:	d9002e17 	ldw	r4,184(sp)
 400fabc:	20800117 	ldw	r2,4(r4)
 400fac0:	24c00017 	ldw	r19,0(r4)
 400fac4:	21000204 	addi	r4,r4,8
 400fac8:	d9002e15 	stw	r4,184(sp)
 400facc:	102d883a 	mov	r22,r2
 400fad0:	10047316 	blt	r2,zero,4010ca0 <___vfprintf_internal_r+0x1720>
 400fad4:	d9002a17 	ldw	r4,168(sp)
 400fad8:	df002783 	ldbu	fp,158(sp)
 400fadc:	2003e416 	blt	r4,zero,4010a70 <___vfprintf_internal_r+0x14f0>
 400fae0:	00ffdfc4 	movi	r3,-129
 400fae4:	9d84b03a 	or	r2,r19,r22
 400fae8:	90e4703a 	and	r18,r18,r3
 400faec:	10018026 	beq	r2,zero,40100f0 <___vfprintf_internal_r+0xb70>
 400faf0:	b003ab26 	beq	r22,zero,40109a0 <___vfprintf_internal_r+0x1420>
 400faf4:	dc402915 	stw	r17,164(sp)
 400faf8:	dc001e04 	addi	r16,sp,120
 400fafc:	b023883a 	mov	r17,r22
 400fb00:	402d883a 	mov	r22,r8
 400fb04:	9809883a 	mov	r4,r19
 400fb08:	880b883a 	mov	r5,r17
 400fb0c:	01800284 	movi	r6,10
 400fb10:	000f883a 	mov	r7,zero
 400fb14:	40188600 	call	4018860 <__umoddi3>
 400fb18:	10800c04 	addi	r2,r2,48
 400fb1c:	843fffc4 	addi	r16,r16,-1
 400fb20:	9809883a 	mov	r4,r19
 400fb24:	880b883a 	mov	r5,r17
 400fb28:	80800005 	stb	r2,0(r16)
 400fb2c:	01800284 	movi	r6,10
 400fb30:	000f883a 	mov	r7,zero
 400fb34:	40182640 	call	4018264 <__udivdi3>
 400fb38:	1027883a 	mov	r19,r2
 400fb3c:	10c4b03a 	or	r2,r2,r3
 400fb40:	1823883a 	mov	r17,r3
 400fb44:	103fef1e 	bne	r2,zero,400fb04 <__alt_data_end+0xfc00fb04>
 400fb48:	d8c02817 	ldw	r3,160(sp)
 400fb4c:	dc402917 	ldw	r17,164(sp)
 400fb50:	b011883a 	mov	r8,r22
 400fb54:	1c07c83a 	sub	r3,r3,r16
 400fb58:	d8c02b15 	stw	r3,172(sp)
 400fb5c:	00005f06 	br	400fcdc <___vfprintf_internal_r+0x75c>
 400fb60:	8025883a 	mov	r18,r16
 400fb64:	dc002903 	ldbu	r16,164(sp)
 400fb68:	e011883a 	mov	r8,fp
 400fb6c:	84003fcc 	andi	r16,r16,255
 400fb70:	80071e1e 	bne	r16,zero,40117ec <___vfprintf_internal_r+0x226c>
 400fb74:	9080020c 	andi	r2,r18,8
 400fb78:	1004af26 	beq	r2,zero,4010e38 <___vfprintf_internal_r+0x18b8>
 400fb7c:	d9002e17 	ldw	r4,184(sp)
 400fb80:	d9402e17 	ldw	r5,184(sp)
 400fb84:	d8802e17 	ldw	r2,184(sp)
 400fb88:	21000017 	ldw	r4,0(r4)
 400fb8c:	29400117 	ldw	r5,4(r5)
 400fb90:	10800204 	addi	r2,r2,8
 400fb94:	d9003615 	stw	r4,216(sp)
 400fb98:	d9403815 	stw	r5,224(sp)
 400fb9c:	d8802e15 	stw	r2,184(sp)
 400fba0:	d9003617 	ldw	r4,216(sp)
 400fba4:	d9403817 	ldw	r5,224(sp)
 400fba8:	da003d15 	stw	r8,244(sp)
 400fbac:	04000044 	movi	r16,1
 400fbb0:	40160700 	call	4016070 <__fpclassifyd>
 400fbb4:	da003d17 	ldw	r8,244(sp)
 400fbb8:	1404441e 	bne	r2,r16,4010ccc <___vfprintf_internal_r+0x174c>
 400fbbc:	d9003617 	ldw	r4,216(sp)
 400fbc0:	d9403817 	ldw	r5,224(sp)
 400fbc4:	000d883a 	mov	r6,zero
 400fbc8:	000f883a 	mov	r7,zero
 400fbcc:	401a2040 	call	401a204 <__ledf2>
 400fbd0:	da003d17 	ldw	r8,244(sp)
 400fbd4:	1005e316 	blt	r2,zero,4011364 <___vfprintf_internal_r+0x1de4>
 400fbd8:	df002783 	ldbu	fp,158(sp)
 400fbdc:	008011c4 	movi	r2,71
 400fbe0:	1445580e 	bge	r2,r17,4011144 <___vfprintf_internal_r+0x1bc4>
 400fbe4:	040100b4 	movhi	r16,1026
 400fbe8:	841c9a04 	addi	r16,r16,29288
 400fbec:	00c000c4 	movi	r3,3
 400fbf0:	00bfdfc4 	movi	r2,-129
 400fbf4:	d8c02915 	stw	r3,164(sp)
 400fbf8:	90a4703a 	and	r18,r18,r2
 400fbfc:	d8c02b15 	stw	r3,172(sp)
 400fc00:	d8002a15 	stw	zero,168(sp)
 400fc04:	d8003215 	stw	zero,200(sp)
 400fc08:	00003a06 	br	400fcf4 <___vfprintf_internal_r+0x774>
 400fc0c:	84000214 	ori	r16,r16,8
 400fc10:	ac400007 	ldb	r17,0(r21)
 400fc14:	003ebc06 	br	400f708 <__alt_data_end+0xfc00f708>
 400fc18:	8025883a 	mov	r18,r16
 400fc1c:	dc002903 	ldbu	r16,164(sp)
 400fc20:	e011883a 	mov	r8,fp
 400fc24:	84003fcc 	andi	r16,r16,255
 400fc28:	8007001e 	bne	r16,zero,401182c <___vfprintf_internal_r+0x22ac>
 400fc2c:	94800414 	ori	r18,r18,16
 400fc30:	9080080c 	andi	r2,r18,32
 400fc34:	1002fa26 	beq	r2,zero,4010820 <___vfprintf_internal_r+0x12a0>
 400fc38:	d9002e17 	ldw	r4,184(sp)
 400fc3c:	d9402a17 	ldw	r5,168(sp)
 400fc40:	d8002785 	stb	zero,158(sp)
 400fc44:	20800204 	addi	r2,r4,8
 400fc48:	24c00017 	ldw	r19,0(r4)
 400fc4c:	25800117 	ldw	r22,4(r4)
 400fc50:	2804b116 	blt	r5,zero,4010f18 <___vfprintf_internal_r+0x1998>
 400fc54:	013fdfc4 	movi	r4,-129
 400fc58:	9d86b03a 	or	r3,r19,r22
 400fc5c:	d8802e15 	stw	r2,184(sp)
 400fc60:	9124703a 	and	r18,r18,r4
 400fc64:	1802fb1e 	bne	r3,zero,4010854 <___vfprintf_internal_r+0x12d4>
 400fc68:	d8c02a17 	ldw	r3,168(sp)
 400fc6c:	0039883a 	mov	fp,zero
 400fc70:	1805e526 	beq	r3,zero,4011408 <___vfprintf_internal_r+0x1e88>
 400fc74:	0027883a 	mov	r19,zero
 400fc78:	002d883a 	mov	r22,zero
 400fc7c:	dc001e04 	addi	r16,sp,120
 400fc80:	9806d0fa 	srli	r3,r19,3
 400fc84:	b008977a 	slli	r4,r22,29
 400fc88:	b02cd0fa 	srli	r22,r22,3
 400fc8c:	9cc001cc 	andi	r19,r19,7
 400fc90:	98800c04 	addi	r2,r19,48
 400fc94:	843fffc4 	addi	r16,r16,-1
 400fc98:	20e6b03a 	or	r19,r4,r3
 400fc9c:	80800005 	stb	r2,0(r16)
 400fca0:	9d86b03a 	or	r3,r19,r22
 400fca4:	183ff61e 	bne	r3,zero,400fc80 <__alt_data_end+0xfc00fc80>
 400fca8:	90c0004c 	andi	r3,r18,1
 400fcac:	18014126 	beq	r3,zero,40101b4 <___vfprintf_internal_r+0xc34>
 400fcb0:	10803fcc 	andi	r2,r2,255
 400fcb4:	1080201c 	xori	r2,r2,128
 400fcb8:	10bfe004 	addi	r2,r2,-128
 400fcbc:	00c00c04 	movi	r3,48
 400fcc0:	10c13c26 	beq	r2,r3,40101b4 <___vfprintf_internal_r+0xc34>
 400fcc4:	80ffffc5 	stb	r3,-1(r16)
 400fcc8:	d8c02817 	ldw	r3,160(sp)
 400fccc:	80bfffc4 	addi	r2,r16,-1
 400fcd0:	1021883a 	mov	r16,r2
 400fcd4:	1887c83a 	sub	r3,r3,r2
 400fcd8:	d8c02b15 	stw	r3,172(sp)
 400fcdc:	d8802b17 	ldw	r2,172(sp)
 400fce0:	d9002a17 	ldw	r4,168(sp)
 400fce4:	1100010e 	bge	r2,r4,400fcec <___vfprintf_internal_r+0x76c>
 400fce8:	2005883a 	mov	r2,r4
 400fcec:	d8802915 	stw	r2,164(sp)
 400fcf0:	d8003215 	stw	zero,200(sp)
 400fcf4:	e7003fcc 	andi	fp,fp,255
 400fcf8:	e700201c 	xori	fp,fp,128
 400fcfc:	e73fe004 	addi	fp,fp,-128
 400fd00:	e0000326 	beq	fp,zero,400fd10 <___vfprintf_internal_r+0x790>
 400fd04:	d8c02917 	ldw	r3,164(sp)
 400fd08:	18c00044 	addi	r3,r3,1
 400fd0c:	d8c02915 	stw	r3,164(sp)
 400fd10:	90c0008c 	andi	r3,r18,2
 400fd14:	d8c02c15 	stw	r3,176(sp)
 400fd18:	18000326 	beq	r3,zero,400fd28 <___vfprintf_internal_r+0x7a8>
 400fd1c:	d8c02917 	ldw	r3,164(sp)
 400fd20:	18c00084 	addi	r3,r3,2
 400fd24:	d8c02915 	stw	r3,164(sp)
 400fd28:	90c0210c 	andi	r3,r18,132
 400fd2c:	d8c03015 	stw	r3,192(sp)
 400fd30:	1801c51e 	bne	r3,zero,4010448 <___vfprintf_internal_r+0xec8>
 400fd34:	d9003117 	ldw	r4,196(sp)
 400fd38:	d8c02917 	ldw	r3,164(sp)
 400fd3c:	20e7c83a 	sub	r19,r4,r3
 400fd40:	04c1c10e 	bge	zero,r19,4010448 <___vfprintf_internal_r+0xec8>
 400fd44:	02400404 	movi	r9,16
 400fd48:	d8c02017 	ldw	r3,128(sp)
 400fd4c:	d8801f17 	ldw	r2,124(sp)
 400fd50:	4cc52f0e 	bge	r9,r19,4011210 <___vfprintf_internal_r+0x1c90>
 400fd54:	014100b4 	movhi	r5,1026
 400fd58:	295cad84 	addi	r5,r5,29366
 400fd5c:	dc403b15 	stw	r17,236(sp)
 400fd60:	d9403515 	stw	r5,212(sp)
 400fd64:	9823883a 	mov	r17,r19
 400fd68:	482d883a 	mov	r22,r9
 400fd6c:	9027883a 	mov	r19,r18
 400fd70:	070001c4 	movi	fp,7
 400fd74:	8025883a 	mov	r18,r16
 400fd78:	dc002d17 	ldw	r16,180(sp)
 400fd7c:	00000306 	br	400fd8c <___vfprintf_internal_r+0x80c>
 400fd80:	8c7ffc04 	addi	r17,r17,-16
 400fd84:	42000204 	addi	r8,r8,8
 400fd88:	b440130e 	bge	r22,r17,400fdd8 <___vfprintf_internal_r+0x858>
 400fd8c:	010100b4 	movhi	r4,1026
 400fd90:	18c00404 	addi	r3,r3,16
 400fd94:	10800044 	addi	r2,r2,1
 400fd98:	211cad84 	addi	r4,r4,29366
 400fd9c:	41000015 	stw	r4,0(r8)
 400fda0:	45800115 	stw	r22,4(r8)
 400fda4:	d8c02015 	stw	r3,128(sp)
 400fda8:	d8801f15 	stw	r2,124(sp)
 400fdac:	e0bff40e 	bge	fp,r2,400fd80 <__alt_data_end+0xfc00fd80>
 400fdb0:	d9801e04 	addi	r6,sp,120
 400fdb4:	b80b883a 	mov	r5,r23
 400fdb8:	8009883a 	mov	r4,r16
 400fdbc:	401631c0 	call	401631c <__sprint_r>
 400fdc0:	103ef31e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 400fdc4:	8c7ffc04 	addi	r17,r17,-16
 400fdc8:	d8c02017 	ldw	r3,128(sp)
 400fdcc:	d8801f17 	ldw	r2,124(sp)
 400fdd0:	da000404 	addi	r8,sp,16
 400fdd4:	b47fed16 	blt	r22,r17,400fd8c <__alt_data_end+0xfc00fd8c>
 400fdd8:	9021883a 	mov	r16,r18
 400fddc:	9825883a 	mov	r18,r19
 400fde0:	8827883a 	mov	r19,r17
 400fde4:	dc403b17 	ldw	r17,236(sp)
 400fde8:	d9403517 	ldw	r5,212(sp)
 400fdec:	98c7883a 	add	r3,r19,r3
 400fdf0:	10800044 	addi	r2,r2,1
 400fdf4:	41400015 	stw	r5,0(r8)
 400fdf8:	44c00115 	stw	r19,4(r8)
 400fdfc:	d8c02015 	stw	r3,128(sp)
 400fe00:	d8801f15 	stw	r2,124(sp)
 400fe04:	010001c4 	movi	r4,7
 400fe08:	2082c516 	blt	r4,r2,4010920 <___vfprintf_internal_r+0x13a0>
 400fe0c:	df002787 	ldb	fp,158(sp)
 400fe10:	42000204 	addi	r8,r8,8
 400fe14:	e0000c26 	beq	fp,zero,400fe48 <___vfprintf_internal_r+0x8c8>
 400fe18:	d8801f17 	ldw	r2,124(sp)
 400fe1c:	d9002784 	addi	r4,sp,158
 400fe20:	18c00044 	addi	r3,r3,1
 400fe24:	10800044 	addi	r2,r2,1
 400fe28:	41000015 	stw	r4,0(r8)
 400fe2c:	01000044 	movi	r4,1
 400fe30:	41000115 	stw	r4,4(r8)
 400fe34:	d8c02015 	stw	r3,128(sp)
 400fe38:	d8801f15 	stw	r2,124(sp)
 400fe3c:	010001c4 	movi	r4,7
 400fe40:	20825e16 	blt	r4,r2,40107bc <___vfprintf_internal_r+0x123c>
 400fe44:	42000204 	addi	r8,r8,8
 400fe48:	d8802c17 	ldw	r2,176(sp)
 400fe4c:	10000c26 	beq	r2,zero,400fe80 <___vfprintf_internal_r+0x900>
 400fe50:	d8801f17 	ldw	r2,124(sp)
 400fe54:	d9002704 	addi	r4,sp,156
 400fe58:	18c00084 	addi	r3,r3,2
 400fe5c:	10800044 	addi	r2,r2,1
 400fe60:	41000015 	stw	r4,0(r8)
 400fe64:	01000084 	movi	r4,2
 400fe68:	41000115 	stw	r4,4(r8)
 400fe6c:	d8c02015 	stw	r3,128(sp)
 400fe70:	d8801f15 	stw	r2,124(sp)
 400fe74:	010001c4 	movi	r4,7
 400fe78:	20825816 	blt	r4,r2,40107dc <___vfprintf_internal_r+0x125c>
 400fe7c:	42000204 	addi	r8,r8,8
 400fe80:	d9003017 	ldw	r4,192(sp)
 400fe84:	00802004 	movi	r2,128
 400fe88:	2081bb26 	beq	r4,r2,4010578 <___vfprintf_internal_r+0xff8>
 400fe8c:	d9402a17 	ldw	r5,168(sp)
 400fe90:	d8802b17 	ldw	r2,172(sp)
 400fe94:	28adc83a 	sub	r22,r5,r2
 400fe98:	0580310e 	bge	zero,r22,400ff60 <___vfprintf_internal_r+0x9e0>
 400fe9c:	07000404 	movi	fp,16
 400fea0:	d8801f17 	ldw	r2,124(sp)
 400fea4:	e584360e 	bge	fp,r22,4010f80 <___vfprintf_internal_r+0x1a00>
 400fea8:	014100b4 	movhi	r5,1026
 400feac:	295ca984 	addi	r5,r5,29350
 400feb0:	dc402a15 	stw	r17,168(sp)
 400feb4:	d9402c15 	stw	r5,176(sp)
 400feb8:	b023883a 	mov	r17,r22
 400febc:	04c001c4 	movi	r19,7
 400fec0:	a82d883a 	mov	r22,r21
 400fec4:	902b883a 	mov	r21,r18
 400fec8:	8025883a 	mov	r18,r16
 400fecc:	dc002d17 	ldw	r16,180(sp)
 400fed0:	00000306 	br	400fee0 <___vfprintf_internal_r+0x960>
 400fed4:	8c7ffc04 	addi	r17,r17,-16
 400fed8:	42000204 	addi	r8,r8,8
 400fedc:	e440110e 	bge	fp,r17,400ff24 <___vfprintf_internal_r+0x9a4>
 400fee0:	18c00404 	addi	r3,r3,16
 400fee4:	10800044 	addi	r2,r2,1
 400fee8:	45000015 	stw	r20,0(r8)
 400feec:	47000115 	stw	fp,4(r8)
 400fef0:	d8c02015 	stw	r3,128(sp)
 400fef4:	d8801f15 	stw	r2,124(sp)
 400fef8:	98bff60e 	bge	r19,r2,400fed4 <__alt_data_end+0xfc00fed4>
 400fefc:	d9801e04 	addi	r6,sp,120
 400ff00:	b80b883a 	mov	r5,r23
 400ff04:	8009883a 	mov	r4,r16
 400ff08:	401631c0 	call	401631c <__sprint_r>
 400ff0c:	103ea01e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 400ff10:	8c7ffc04 	addi	r17,r17,-16
 400ff14:	d8c02017 	ldw	r3,128(sp)
 400ff18:	d8801f17 	ldw	r2,124(sp)
 400ff1c:	da000404 	addi	r8,sp,16
 400ff20:	e47fef16 	blt	fp,r17,400fee0 <__alt_data_end+0xfc00fee0>
 400ff24:	9021883a 	mov	r16,r18
 400ff28:	a825883a 	mov	r18,r21
 400ff2c:	b02b883a 	mov	r21,r22
 400ff30:	882d883a 	mov	r22,r17
 400ff34:	dc402a17 	ldw	r17,168(sp)
 400ff38:	d9002c17 	ldw	r4,176(sp)
 400ff3c:	1d87883a 	add	r3,r3,r22
 400ff40:	10800044 	addi	r2,r2,1
 400ff44:	41000015 	stw	r4,0(r8)
 400ff48:	45800115 	stw	r22,4(r8)
 400ff4c:	d8c02015 	stw	r3,128(sp)
 400ff50:	d8801f15 	stw	r2,124(sp)
 400ff54:	010001c4 	movi	r4,7
 400ff58:	20821016 	blt	r4,r2,401079c <___vfprintf_internal_r+0x121c>
 400ff5c:	42000204 	addi	r8,r8,8
 400ff60:	9080400c 	andi	r2,r18,256
 400ff64:	10013a1e 	bne	r2,zero,4010450 <___vfprintf_internal_r+0xed0>
 400ff68:	d9402b17 	ldw	r5,172(sp)
 400ff6c:	d8801f17 	ldw	r2,124(sp)
 400ff70:	44000015 	stw	r16,0(r8)
 400ff74:	1947883a 	add	r3,r3,r5
 400ff78:	10800044 	addi	r2,r2,1
 400ff7c:	41400115 	stw	r5,4(r8)
 400ff80:	d8c02015 	stw	r3,128(sp)
 400ff84:	d8801f15 	stw	r2,124(sp)
 400ff88:	010001c4 	movi	r4,7
 400ff8c:	2081f516 	blt	r4,r2,4010764 <___vfprintf_internal_r+0x11e4>
 400ff90:	42000204 	addi	r8,r8,8
 400ff94:	9480010c 	andi	r18,r18,4
 400ff98:	90003226 	beq	r18,zero,4010064 <___vfprintf_internal_r+0xae4>
 400ff9c:	d9403117 	ldw	r5,196(sp)
 400ffa0:	d8802917 	ldw	r2,164(sp)
 400ffa4:	28a1c83a 	sub	r16,r5,r2
 400ffa8:	04002e0e 	bge	zero,r16,4010064 <___vfprintf_internal_r+0xae4>
 400ffac:	04400404 	movi	r17,16
 400ffb0:	d8801f17 	ldw	r2,124(sp)
 400ffb4:	8c04c40e 	bge	r17,r16,40112c8 <___vfprintf_internal_r+0x1d48>
 400ffb8:	014100b4 	movhi	r5,1026
 400ffbc:	295cad84 	addi	r5,r5,29366
 400ffc0:	d9403515 	stw	r5,212(sp)
 400ffc4:	048001c4 	movi	r18,7
 400ffc8:	dcc02d17 	ldw	r19,180(sp)
 400ffcc:	00000306 	br	400ffdc <___vfprintf_internal_r+0xa5c>
 400ffd0:	843ffc04 	addi	r16,r16,-16
 400ffd4:	42000204 	addi	r8,r8,8
 400ffd8:	8c00130e 	bge	r17,r16,4010028 <___vfprintf_internal_r+0xaa8>
 400ffdc:	010100b4 	movhi	r4,1026
 400ffe0:	18c00404 	addi	r3,r3,16
 400ffe4:	10800044 	addi	r2,r2,1
 400ffe8:	211cad84 	addi	r4,r4,29366
 400ffec:	41000015 	stw	r4,0(r8)
 400fff0:	44400115 	stw	r17,4(r8)
 400fff4:	d8c02015 	stw	r3,128(sp)
 400fff8:	d8801f15 	stw	r2,124(sp)
 400fffc:	90bff40e 	bge	r18,r2,400ffd0 <__alt_data_end+0xfc00ffd0>
 4010000:	d9801e04 	addi	r6,sp,120
 4010004:	b80b883a 	mov	r5,r23
 4010008:	9809883a 	mov	r4,r19
 401000c:	401631c0 	call	401631c <__sprint_r>
 4010010:	103e5f1e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 4010014:	843ffc04 	addi	r16,r16,-16
 4010018:	d8c02017 	ldw	r3,128(sp)
 401001c:	d8801f17 	ldw	r2,124(sp)
 4010020:	da000404 	addi	r8,sp,16
 4010024:	8c3fed16 	blt	r17,r16,400ffdc <__alt_data_end+0xfc00ffdc>
 4010028:	d9403517 	ldw	r5,212(sp)
 401002c:	1c07883a 	add	r3,r3,r16
 4010030:	10800044 	addi	r2,r2,1
 4010034:	41400015 	stw	r5,0(r8)
 4010038:	44000115 	stw	r16,4(r8)
 401003c:	d8c02015 	stw	r3,128(sp)
 4010040:	d8801f15 	stw	r2,124(sp)
 4010044:	010001c4 	movi	r4,7
 4010048:	2080060e 	bge	r4,r2,4010064 <___vfprintf_internal_r+0xae4>
 401004c:	d9002d17 	ldw	r4,180(sp)
 4010050:	d9801e04 	addi	r6,sp,120
 4010054:	b80b883a 	mov	r5,r23
 4010058:	401631c0 	call	401631c <__sprint_r>
 401005c:	103e4c1e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 4010060:	d8c02017 	ldw	r3,128(sp)
 4010064:	d8803117 	ldw	r2,196(sp)
 4010068:	d9002917 	ldw	r4,164(sp)
 401006c:	1100010e 	bge	r2,r4,4010074 <___vfprintf_internal_r+0xaf4>
 4010070:	2005883a 	mov	r2,r4
 4010074:	d9402f17 	ldw	r5,188(sp)
 4010078:	288b883a 	add	r5,r5,r2
 401007c:	d9402f15 	stw	r5,188(sp)
 4010080:	1801c01e 	bne	r3,zero,4010784 <___vfprintf_internal_r+0x1204>
 4010084:	a8800007 	ldb	r2,0(r21)
 4010088:	d8001f15 	stw	zero,124(sp)
 401008c:	da000404 	addi	r8,sp,16
 4010090:	103d751e 	bne	r2,zero,400f668 <__alt_data_end+0xfc00f668>
 4010094:	a823883a 	mov	r17,r21
 4010098:	003d8b06 	br	400f6c8 <__alt_data_end+0xfc00f6c8>
 401009c:	8025883a 	mov	r18,r16
 40100a0:	dc002903 	ldbu	r16,164(sp)
 40100a4:	e011883a 	mov	r8,fp
 40100a8:	84003fcc 	andi	r16,r16,255
 40100ac:	8005e51e 	bne	r16,zero,4011844 <___vfprintf_internal_r+0x22c4>
 40100b0:	94800414 	ori	r18,r18,16
 40100b4:	9080080c 	andi	r2,r18,32
 40100b8:	10022b26 	beq	r2,zero,4010968 <___vfprintf_internal_r+0x13e8>
 40100bc:	d9002e17 	ldw	r4,184(sp)
 40100c0:	d9402a17 	ldw	r5,168(sp)
 40100c4:	d8002785 	stb	zero,158(sp)
 40100c8:	20c00204 	addi	r3,r4,8
 40100cc:	24c00017 	ldw	r19,0(r4)
 40100d0:	25800117 	ldw	r22,4(r4)
 40100d4:	28042e16 	blt	r5,zero,4011190 <___vfprintf_internal_r+0x1c10>
 40100d8:	013fdfc4 	movi	r4,-129
 40100dc:	9d84b03a 	or	r2,r19,r22
 40100e0:	d8c02e15 	stw	r3,184(sp)
 40100e4:	9124703a 	and	r18,r18,r4
 40100e8:	0039883a 	mov	fp,zero
 40100ec:	103e801e 	bne	r2,zero,400faf0 <__alt_data_end+0xfc00faf0>
 40100f0:	d9002a17 	ldw	r4,168(sp)
 40100f4:	2002e01e 	bne	r4,zero,4010c78 <___vfprintf_internal_r+0x16f8>
 40100f8:	d8002a15 	stw	zero,168(sp)
 40100fc:	d8002b15 	stw	zero,172(sp)
 4010100:	dc001e04 	addi	r16,sp,120
 4010104:	003ef506 	br	400fcdc <__alt_data_end+0xfc00fcdc>
 4010108:	8025883a 	mov	r18,r16
 401010c:	dc002903 	ldbu	r16,164(sp)
 4010110:	e011883a 	mov	r8,fp
 4010114:	84003fcc 	andi	r16,r16,255
 4010118:	8005ba1e 	bne	r16,zero,4011804 <___vfprintf_internal_r+0x2284>
 401011c:	010100b4 	movhi	r4,1026
 4010120:	211c9d04 	addi	r4,r4,29300
 4010124:	d9003915 	stw	r4,228(sp)
 4010128:	9080080c 	andi	r2,r18,32
 401012c:	10006126 	beq	r2,zero,40102b4 <___vfprintf_internal_r+0xd34>
 4010130:	d9402e17 	ldw	r5,184(sp)
 4010134:	2cc00017 	ldw	r19,0(r5)
 4010138:	2d800117 	ldw	r22,4(r5)
 401013c:	29400204 	addi	r5,r5,8
 4010140:	d9402e15 	stw	r5,184(sp)
 4010144:	9080004c 	andi	r2,r18,1
 4010148:	1001ac26 	beq	r2,zero,40107fc <___vfprintf_internal_r+0x127c>
 401014c:	9d84b03a 	or	r2,r19,r22
 4010150:	10038526 	beq	r2,zero,4010f68 <___vfprintf_internal_r+0x19e8>
 4010154:	d8c02a17 	ldw	r3,168(sp)
 4010158:	00800c04 	movi	r2,48
 401015c:	d8802705 	stb	r2,156(sp)
 4010160:	dc402745 	stb	r17,157(sp)
 4010164:	d8002785 	stb	zero,158(sp)
 4010168:	90800094 	ori	r2,r18,2
 401016c:	18047916 	blt	r3,zero,4011354 <___vfprintf_internal_r+0x1dd4>
 4010170:	00bfdfc4 	movi	r2,-129
 4010174:	90a4703a 	and	r18,r18,r2
 4010178:	94800094 	ori	r18,r18,2
 401017c:	0039883a 	mov	fp,zero
 4010180:	d9003917 	ldw	r4,228(sp)
 4010184:	dc001e04 	addi	r16,sp,120
 4010188:	988003cc 	andi	r2,r19,15
 401018c:	b006973a 	slli	r3,r22,28
 4010190:	2085883a 	add	r2,r4,r2
 4010194:	9826d13a 	srli	r19,r19,4
 4010198:	10800003 	ldbu	r2,0(r2)
 401019c:	b02cd13a 	srli	r22,r22,4
 40101a0:	843fffc4 	addi	r16,r16,-1
 40101a4:	1ce6b03a 	or	r19,r3,r19
 40101a8:	80800005 	stb	r2,0(r16)
 40101ac:	9d84b03a 	or	r2,r19,r22
 40101b0:	103ff51e 	bne	r2,zero,4010188 <__alt_data_end+0xfc010188>
 40101b4:	d8c02817 	ldw	r3,160(sp)
 40101b8:	1c07c83a 	sub	r3,r3,r16
 40101bc:	d8c02b15 	stw	r3,172(sp)
 40101c0:	003ec606 	br	400fcdc <__alt_data_end+0xfc00fcdc>
 40101c4:	8025883a 	mov	r18,r16
 40101c8:	dc002903 	ldbu	r16,164(sp)
 40101cc:	e011883a 	mov	r8,fp
 40101d0:	84003fcc 	andi	r16,r16,255
 40101d4:	803e9626 	beq	r16,zero,400fc30 <__alt_data_end+0xfc00fc30>
 40101d8:	d8c02b03 	ldbu	r3,172(sp)
 40101dc:	d8c02785 	stb	r3,158(sp)
 40101e0:	003e9306 	br	400fc30 <__alt_data_end+0xfc00fc30>
 40101e4:	00c00044 	movi	r3,1
 40101e8:	d8c02905 	stb	r3,164(sp)
 40101ec:	00c00ac4 	movi	r3,43
 40101f0:	d8c02b05 	stb	r3,172(sp)
 40101f4:	ac400007 	ldb	r17,0(r21)
 40101f8:	003d4306 	br	400f708 <__alt_data_end+0xfc00f708>
 40101fc:	84000814 	ori	r16,r16,32
 4010200:	ac400007 	ldb	r17,0(r21)
 4010204:	003d4006 	br	400f708 <__alt_data_end+0xfc00f708>
 4010208:	d8802e17 	ldw	r2,184(sp)
 401020c:	8025883a 	mov	r18,r16
 4010210:	d8002785 	stb	zero,158(sp)
 4010214:	14000017 	ldw	r16,0(r2)
 4010218:	e011883a 	mov	r8,fp
 401021c:	14c00104 	addi	r19,r2,4
 4010220:	80042d26 	beq	r16,zero,40112d8 <___vfprintf_internal_r+0x1d58>
 4010224:	d8c02a17 	ldw	r3,168(sp)
 4010228:	1803e416 	blt	r3,zero,40111bc <___vfprintf_internal_r+0x1c3c>
 401022c:	180d883a 	mov	r6,r3
 4010230:	000b883a 	mov	r5,zero
 4010234:	8009883a 	mov	r4,r16
 4010238:	df003d15 	stw	fp,244(sp)
 401023c:	40146ac0 	call	40146ac <memchr>
 4010240:	da003d17 	ldw	r8,244(sp)
 4010244:	10046826 	beq	r2,zero,40113e8 <___vfprintf_internal_r+0x1e68>
 4010248:	1405c83a 	sub	r2,r2,r16
 401024c:	d8802b15 	stw	r2,172(sp)
 4010250:	1003e016 	blt	r2,zero,40111d4 <___vfprintf_internal_r+0x1c54>
 4010254:	df002783 	ldbu	fp,158(sp)
 4010258:	d8802915 	stw	r2,164(sp)
 401025c:	dcc02e15 	stw	r19,184(sp)
 4010260:	d8002a15 	stw	zero,168(sp)
 4010264:	d8003215 	stw	zero,200(sp)
 4010268:	003ea206 	br	400fcf4 <__alt_data_end+0xfc00fcf4>
 401026c:	8025883a 	mov	r18,r16
 4010270:	dc002903 	ldbu	r16,164(sp)
 4010274:	e011883a 	mov	r8,fp
 4010278:	84003fcc 	andi	r16,r16,255
 401027c:	803f8d26 	beq	r16,zero,40100b4 <__alt_data_end+0xfc0100b4>
 4010280:	d8c02b03 	ldbu	r3,172(sp)
 4010284:	d8c02785 	stb	r3,158(sp)
 4010288:	003f8a06 	br	40100b4 <__alt_data_end+0xfc0100b4>
 401028c:	8025883a 	mov	r18,r16
 4010290:	dc002903 	ldbu	r16,164(sp)
 4010294:	e011883a 	mov	r8,fp
 4010298:	84003fcc 	andi	r16,r16,255
 401029c:	8005661e 	bne	r16,zero,4011838 <___vfprintf_internal_r+0x22b8>
 40102a0:	010100b4 	movhi	r4,1026
 40102a4:	211ca204 	addi	r4,r4,29320
 40102a8:	d9003915 	stw	r4,228(sp)
 40102ac:	9080080c 	andi	r2,r18,32
 40102b0:	103f9f1e 	bne	r2,zero,4010130 <__alt_data_end+0xfc010130>
 40102b4:	9080040c 	andi	r2,r18,16
 40102b8:	1002eb26 	beq	r2,zero,4010e68 <___vfprintf_internal_r+0x18e8>
 40102bc:	d8802e17 	ldw	r2,184(sp)
 40102c0:	002d883a 	mov	r22,zero
 40102c4:	14c00017 	ldw	r19,0(r2)
 40102c8:	10800104 	addi	r2,r2,4
 40102cc:	d8802e15 	stw	r2,184(sp)
 40102d0:	003f9c06 	br	4010144 <__alt_data_end+0xfc010144>
 40102d4:	d8802b07 	ldb	r2,172(sp)
 40102d8:	1002e11e 	bne	r2,zero,4010e60 <___vfprintf_internal_r+0x18e0>
 40102dc:	00c00044 	movi	r3,1
 40102e0:	d8c02905 	stb	r3,164(sp)
 40102e4:	00c00804 	movi	r3,32
 40102e8:	d8c02b05 	stb	r3,172(sp)
 40102ec:	ac400007 	ldb	r17,0(r21)
 40102f0:	003d0506 	br	400f708 <__alt_data_end+0xfc00f708>
 40102f4:	84000054 	ori	r16,r16,1
 40102f8:	ac400007 	ldb	r17,0(r21)
 40102fc:	003d0206 	br	400f708 <__alt_data_end+0xfc00f708>
 4010300:	8025883a 	mov	r18,r16
 4010304:	dc002903 	ldbu	r16,164(sp)
 4010308:	e011883a 	mov	r8,fp
 401030c:	84003fcc 	andi	r16,r16,255
 4010310:	803de726 	beq	r16,zero,400fab0 <__alt_data_end+0xfc00fab0>
 4010314:	d8c02b03 	ldbu	r3,172(sp)
 4010318:	d8c02785 	stb	r3,158(sp)
 401031c:	003de406 	br	400fab0 <__alt_data_end+0xfc00fab0>
 4010320:	84001014 	ori	r16,r16,64
 4010324:	ac400007 	ldb	r17,0(r21)
 4010328:	003cf706 	br	400f708 <__alt_data_end+0xfc00f708>
 401032c:	ac400007 	ldb	r17,0(r21)
 4010330:	00801b04 	movi	r2,108
 4010334:	88838f26 	beq	r17,r2,4011174 <___vfprintf_internal_r+0x1bf4>
 4010338:	84000414 	ori	r16,r16,16
 401033c:	003cf206 	br	400f708 <__alt_data_end+0xfc00f708>
 4010340:	8025883a 	mov	r18,r16
 4010344:	dc002903 	ldbu	r16,164(sp)
 4010348:	e011883a 	mov	r8,fp
 401034c:	84003fcc 	andi	r16,r16,255
 4010350:	80053f1e 	bne	r16,zero,4011850 <___vfprintf_internal_r+0x22d0>
 4010354:	9080080c 	andi	r2,r18,32
 4010358:	1002d226 	beq	r2,zero,4010ea4 <___vfprintf_internal_r+0x1924>
 401035c:	d9002e17 	ldw	r4,184(sp)
 4010360:	d9402f17 	ldw	r5,188(sp)
 4010364:	20800017 	ldw	r2,0(r4)
 4010368:	2807d7fa 	srai	r3,r5,31
 401036c:	21000104 	addi	r4,r4,4
 4010370:	d9002e15 	stw	r4,184(sp)
 4010374:	11400015 	stw	r5,0(r2)
 4010378:	10c00115 	stw	r3,4(r2)
 401037c:	003cb806 	br	400f660 <__alt_data_end+0xfc00f660>
 4010380:	d8c02e17 	ldw	r3,184(sp)
 4010384:	d9002e17 	ldw	r4,184(sp)
 4010388:	8025883a 	mov	r18,r16
 401038c:	18800017 	ldw	r2,0(r3)
 4010390:	21000104 	addi	r4,r4,4
 4010394:	00c00044 	movi	r3,1
 4010398:	e011883a 	mov	r8,fp
 401039c:	d8c02915 	stw	r3,164(sp)
 40103a0:	d8002785 	stb	zero,158(sp)
 40103a4:	d8801405 	stb	r2,80(sp)
 40103a8:	d9002e15 	stw	r4,184(sp)
 40103ac:	d8c02b15 	stw	r3,172(sp)
 40103b0:	d8002a15 	stw	zero,168(sp)
 40103b4:	d8003215 	stw	zero,200(sp)
 40103b8:	dc001404 	addi	r16,sp,80
 40103bc:	0039883a 	mov	fp,zero
 40103c0:	003e5306 	br	400fd10 <__alt_data_end+0xfc00fd10>
 40103c4:	010100b4 	movhi	r4,1026
 40103c8:	211ca204 	addi	r4,r4,29320
 40103cc:	0039883a 	mov	fp,zero
 40103d0:	d9003915 	stw	r4,228(sp)
 40103d4:	04401e04 	movi	r17,120
 40103d8:	003f6906 	br	4010180 <__alt_data_end+0xfc010180>
 40103dc:	8025883a 	mov	r18,r16
 40103e0:	dc002903 	ldbu	r16,164(sp)
 40103e4:	e011883a 	mov	r8,fp
 40103e8:	84003fcc 	andi	r16,r16,255
 40103ec:	8005081e 	bne	r16,zero,4011810 <___vfprintf_internal_r+0x2290>
 40103f0:	883d6126 	beq	r17,zero,400f978 <__alt_data_end+0xfc00f978>
 40103f4:	00c00044 	movi	r3,1
 40103f8:	d8c02915 	stw	r3,164(sp)
 40103fc:	dc401405 	stb	r17,80(sp)
 4010400:	d8002785 	stb	zero,158(sp)
 4010404:	003fe906 	br	40103ac <__alt_data_end+0xfc0103ac>
 4010408:	014100b4 	movhi	r5,1026
 401040c:	295ca204 	addi	r5,r5,29320
 4010410:	d9403915 	stw	r5,228(sp)
 4010414:	d8c02e15 	stw	r3,184(sp)
 4010418:	1025883a 	mov	r18,r2
 401041c:	04401e04 	movi	r17,120
 4010420:	9d84b03a 	or	r2,r19,r22
 4010424:	1000fc1e 	bne	r2,zero,4010818 <___vfprintf_internal_r+0x1298>
 4010428:	0039883a 	mov	fp,zero
 401042c:	00800084 	movi	r2,2
 4010430:	10803fcc 	andi	r2,r2,255
 4010434:	00c00044 	movi	r3,1
 4010438:	10c20f26 	beq	r2,r3,4010c78 <___vfprintf_internal_r+0x16f8>
 401043c:	00c00084 	movi	r3,2
 4010440:	10fd3326 	beq	r2,r3,400f910 <__alt_data_end+0xfc00f910>
 4010444:	003e0b06 	br	400fc74 <__alt_data_end+0xfc00fc74>
 4010448:	d8c02017 	ldw	r3,128(sp)
 401044c:	003e7106 	br	400fe14 <__alt_data_end+0xfc00fe14>
 4010450:	00801944 	movi	r2,101
 4010454:	14407e0e 	bge	r2,r17,4010650 <___vfprintf_internal_r+0x10d0>
 4010458:	d9003617 	ldw	r4,216(sp)
 401045c:	d9403817 	ldw	r5,224(sp)
 4010460:	000d883a 	mov	r6,zero
 4010464:	000f883a 	mov	r7,zero
 4010468:	d8c03c15 	stw	r3,240(sp)
 401046c:	da003d15 	stw	r8,244(sp)
 4010470:	401a0a00 	call	401a0a0 <__eqdf2>
 4010474:	d8c03c17 	ldw	r3,240(sp)
 4010478:	da003d17 	ldw	r8,244(sp)
 401047c:	1000f71e 	bne	r2,zero,401085c <___vfprintf_internal_r+0x12dc>
 4010480:	d8801f17 	ldw	r2,124(sp)
 4010484:	010100b4 	movhi	r4,1026
 4010488:	211ca904 	addi	r4,r4,29348
 401048c:	18c00044 	addi	r3,r3,1
 4010490:	10800044 	addi	r2,r2,1
 4010494:	41000015 	stw	r4,0(r8)
 4010498:	01000044 	movi	r4,1
 401049c:	41000115 	stw	r4,4(r8)
 40104a0:	d8c02015 	stw	r3,128(sp)
 40104a4:	d8801f15 	stw	r2,124(sp)
 40104a8:	010001c4 	movi	r4,7
 40104ac:	2082b816 	blt	r4,r2,4010f90 <___vfprintf_internal_r+0x1a10>
 40104b0:	42000204 	addi	r8,r8,8
 40104b4:	d8802617 	ldw	r2,152(sp)
 40104b8:	d9403317 	ldw	r5,204(sp)
 40104bc:	11400216 	blt	r2,r5,40104c8 <___vfprintf_internal_r+0xf48>
 40104c0:	9080004c 	andi	r2,r18,1
 40104c4:	103eb326 	beq	r2,zero,400ff94 <__alt_data_end+0xfc00ff94>
 40104c8:	d8803717 	ldw	r2,220(sp)
 40104cc:	d9003417 	ldw	r4,208(sp)
 40104d0:	d9403717 	ldw	r5,220(sp)
 40104d4:	1887883a 	add	r3,r3,r2
 40104d8:	d8801f17 	ldw	r2,124(sp)
 40104dc:	41000015 	stw	r4,0(r8)
 40104e0:	41400115 	stw	r5,4(r8)
 40104e4:	10800044 	addi	r2,r2,1
 40104e8:	d8c02015 	stw	r3,128(sp)
 40104ec:	d8801f15 	stw	r2,124(sp)
 40104f0:	010001c4 	movi	r4,7
 40104f4:	20832916 	blt	r4,r2,401119c <___vfprintf_internal_r+0x1c1c>
 40104f8:	42000204 	addi	r8,r8,8
 40104fc:	d8803317 	ldw	r2,204(sp)
 4010500:	143fffc4 	addi	r16,r2,-1
 4010504:	043ea30e 	bge	zero,r16,400ff94 <__alt_data_end+0xfc00ff94>
 4010508:	04400404 	movi	r17,16
 401050c:	d8801f17 	ldw	r2,124(sp)
 4010510:	8c00880e 	bge	r17,r16,4010734 <___vfprintf_internal_r+0x11b4>
 4010514:	014100b4 	movhi	r5,1026
 4010518:	295ca984 	addi	r5,r5,29350
 401051c:	d9402c15 	stw	r5,176(sp)
 4010520:	058001c4 	movi	r22,7
 4010524:	dcc02d17 	ldw	r19,180(sp)
 4010528:	00000306 	br	4010538 <___vfprintf_internal_r+0xfb8>
 401052c:	42000204 	addi	r8,r8,8
 4010530:	843ffc04 	addi	r16,r16,-16
 4010534:	8c00820e 	bge	r17,r16,4010740 <___vfprintf_internal_r+0x11c0>
 4010538:	18c00404 	addi	r3,r3,16
 401053c:	10800044 	addi	r2,r2,1
 4010540:	45000015 	stw	r20,0(r8)
 4010544:	44400115 	stw	r17,4(r8)
 4010548:	d8c02015 	stw	r3,128(sp)
 401054c:	d8801f15 	stw	r2,124(sp)
 4010550:	b0bff60e 	bge	r22,r2,401052c <__alt_data_end+0xfc01052c>
 4010554:	d9801e04 	addi	r6,sp,120
 4010558:	b80b883a 	mov	r5,r23
 401055c:	9809883a 	mov	r4,r19
 4010560:	401631c0 	call	401631c <__sprint_r>
 4010564:	103d0a1e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 4010568:	d8c02017 	ldw	r3,128(sp)
 401056c:	d8801f17 	ldw	r2,124(sp)
 4010570:	da000404 	addi	r8,sp,16
 4010574:	003fee06 	br	4010530 <__alt_data_end+0xfc010530>
 4010578:	d9403117 	ldw	r5,196(sp)
 401057c:	d8802917 	ldw	r2,164(sp)
 4010580:	28adc83a 	sub	r22,r5,r2
 4010584:	05be410e 	bge	zero,r22,400fe8c <__alt_data_end+0xfc00fe8c>
 4010588:	07000404 	movi	fp,16
 401058c:	d8801f17 	ldw	r2,124(sp)
 4010590:	e5838f0e 	bge	fp,r22,40113d0 <___vfprintf_internal_r+0x1e50>
 4010594:	014100b4 	movhi	r5,1026
 4010598:	295ca984 	addi	r5,r5,29350
 401059c:	dc403015 	stw	r17,192(sp)
 40105a0:	d9402c15 	stw	r5,176(sp)
 40105a4:	b023883a 	mov	r17,r22
 40105a8:	04c001c4 	movi	r19,7
 40105ac:	a82d883a 	mov	r22,r21
 40105b0:	902b883a 	mov	r21,r18
 40105b4:	8025883a 	mov	r18,r16
 40105b8:	dc002d17 	ldw	r16,180(sp)
 40105bc:	00000306 	br	40105cc <___vfprintf_internal_r+0x104c>
 40105c0:	8c7ffc04 	addi	r17,r17,-16
 40105c4:	42000204 	addi	r8,r8,8
 40105c8:	e440110e 	bge	fp,r17,4010610 <___vfprintf_internal_r+0x1090>
 40105cc:	18c00404 	addi	r3,r3,16
 40105d0:	10800044 	addi	r2,r2,1
 40105d4:	45000015 	stw	r20,0(r8)
 40105d8:	47000115 	stw	fp,4(r8)
 40105dc:	d8c02015 	stw	r3,128(sp)
 40105e0:	d8801f15 	stw	r2,124(sp)
 40105e4:	98bff60e 	bge	r19,r2,40105c0 <__alt_data_end+0xfc0105c0>
 40105e8:	d9801e04 	addi	r6,sp,120
 40105ec:	b80b883a 	mov	r5,r23
 40105f0:	8009883a 	mov	r4,r16
 40105f4:	401631c0 	call	401631c <__sprint_r>
 40105f8:	103ce51e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 40105fc:	8c7ffc04 	addi	r17,r17,-16
 4010600:	d8c02017 	ldw	r3,128(sp)
 4010604:	d8801f17 	ldw	r2,124(sp)
 4010608:	da000404 	addi	r8,sp,16
 401060c:	e47fef16 	blt	fp,r17,40105cc <__alt_data_end+0xfc0105cc>
 4010610:	9021883a 	mov	r16,r18
 4010614:	a825883a 	mov	r18,r21
 4010618:	b02b883a 	mov	r21,r22
 401061c:	882d883a 	mov	r22,r17
 4010620:	dc403017 	ldw	r17,192(sp)
 4010624:	d9002c17 	ldw	r4,176(sp)
 4010628:	1d87883a 	add	r3,r3,r22
 401062c:	10800044 	addi	r2,r2,1
 4010630:	41000015 	stw	r4,0(r8)
 4010634:	45800115 	stw	r22,4(r8)
 4010638:	d8c02015 	stw	r3,128(sp)
 401063c:	d8801f15 	stw	r2,124(sp)
 4010640:	010001c4 	movi	r4,7
 4010644:	20818e16 	blt	r4,r2,4010c80 <___vfprintf_internal_r+0x1700>
 4010648:	42000204 	addi	r8,r8,8
 401064c:	003e0f06 	br	400fe8c <__alt_data_end+0xfc00fe8c>
 4010650:	d9403317 	ldw	r5,204(sp)
 4010654:	00800044 	movi	r2,1
 4010658:	18c00044 	addi	r3,r3,1
 401065c:	1141530e 	bge	r2,r5,4010bac <___vfprintf_internal_r+0x162c>
 4010660:	dc401f17 	ldw	r17,124(sp)
 4010664:	00800044 	movi	r2,1
 4010668:	40800115 	stw	r2,4(r8)
 401066c:	8c400044 	addi	r17,r17,1
 4010670:	44000015 	stw	r16,0(r8)
 4010674:	d8c02015 	stw	r3,128(sp)
 4010678:	dc401f15 	stw	r17,124(sp)
 401067c:	008001c4 	movi	r2,7
 4010680:	14416b16 	blt	r2,r17,4010c30 <___vfprintf_internal_r+0x16b0>
 4010684:	42000204 	addi	r8,r8,8
 4010688:	d8803717 	ldw	r2,220(sp)
 401068c:	d9003417 	ldw	r4,208(sp)
 4010690:	8c400044 	addi	r17,r17,1
 4010694:	10c7883a 	add	r3,r2,r3
 4010698:	40800115 	stw	r2,4(r8)
 401069c:	41000015 	stw	r4,0(r8)
 40106a0:	d8c02015 	stw	r3,128(sp)
 40106a4:	dc401f15 	stw	r17,124(sp)
 40106a8:	008001c4 	movi	r2,7
 40106ac:	14416916 	blt	r2,r17,4010c54 <___vfprintf_internal_r+0x16d4>
 40106b0:	45800204 	addi	r22,r8,8
 40106b4:	d9003617 	ldw	r4,216(sp)
 40106b8:	d9403817 	ldw	r5,224(sp)
 40106bc:	000d883a 	mov	r6,zero
 40106c0:	000f883a 	mov	r7,zero
 40106c4:	d8c03c15 	stw	r3,240(sp)
 40106c8:	401a0a00 	call	401a0a0 <__eqdf2>
 40106cc:	d8c03c17 	ldw	r3,240(sp)
 40106d0:	1000bc26 	beq	r2,zero,40109c4 <___vfprintf_internal_r+0x1444>
 40106d4:	d9403317 	ldw	r5,204(sp)
 40106d8:	84000044 	addi	r16,r16,1
 40106dc:	8c400044 	addi	r17,r17,1
 40106e0:	28bfffc4 	addi	r2,r5,-1
 40106e4:	1887883a 	add	r3,r3,r2
 40106e8:	b0800115 	stw	r2,4(r22)
 40106ec:	b4000015 	stw	r16,0(r22)
 40106f0:	d8c02015 	stw	r3,128(sp)
 40106f4:	dc401f15 	stw	r17,124(sp)
 40106f8:	008001c4 	movi	r2,7
 40106fc:	14414316 	blt	r2,r17,4010c0c <___vfprintf_internal_r+0x168c>
 4010700:	b5800204 	addi	r22,r22,8
 4010704:	d9003a17 	ldw	r4,232(sp)
 4010708:	df0022c4 	addi	fp,sp,139
 401070c:	8c400044 	addi	r17,r17,1
 4010710:	20c7883a 	add	r3,r4,r3
 4010714:	b7000015 	stw	fp,0(r22)
 4010718:	b1000115 	stw	r4,4(r22)
 401071c:	d8c02015 	stw	r3,128(sp)
 4010720:	dc401f15 	stw	r17,124(sp)
 4010724:	008001c4 	movi	r2,7
 4010728:	14400e16 	blt	r2,r17,4010764 <___vfprintf_internal_r+0x11e4>
 401072c:	b2000204 	addi	r8,r22,8
 4010730:	003e1806 	br	400ff94 <__alt_data_end+0xfc00ff94>
 4010734:	010100b4 	movhi	r4,1026
 4010738:	211ca984 	addi	r4,r4,29350
 401073c:	d9002c15 	stw	r4,176(sp)
 4010740:	d9002c17 	ldw	r4,176(sp)
 4010744:	1c07883a 	add	r3,r3,r16
 4010748:	44000115 	stw	r16,4(r8)
 401074c:	41000015 	stw	r4,0(r8)
 4010750:	10800044 	addi	r2,r2,1
 4010754:	d8c02015 	stw	r3,128(sp)
 4010758:	d8801f15 	stw	r2,124(sp)
 401075c:	010001c4 	movi	r4,7
 4010760:	20be0b0e 	bge	r4,r2,400ff90 <__alt_data_end+0xfc00ff90>
 4010764:	d9002d17 	ldw	r4,180(sp)
 4010768:	d9801e04 	addi	r6,sp,120
 401076c:	b80b883a 	mov	r5,r23
 4010770:	401631c0 	call	401631c <__sprint_r>
 4010774:	103c861e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 4010778:	d8c02017 	ldw	r3,128(sp)
 401077c:	da000404 	addi	r8,sp,16
 4010780:	003e0406 	br	400ff94 <__alt_data_end+0xfc00ff94>
 4010784:	d9002d17 	ldw	r4,180(sp)
 4010788:	d9801e04 	addi	r6,sp,120
 401078c:	b80b883a 	mov	r5,r23
 4010790:	401631c0 	call	401631c <__sprint_r>
 4010794:	103e3b26 	beq	r2,zero,4010084 <__alt_data_end+0xfc010084>
 4010798:	003c7d06 	br	400f990 <__alt_data_end+0xfc00f990>
 401079c:	d9002d17 	ldw	r4,180(sp)
 40107a0:	d9801e04 	addi	r6,sp,120
 40107a4:	b80b883a 	mov	r5,r23
 40107a8:	401631c0 	call	401631c <__sprint_r>
 40107ac:	103c781e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 40107b0:	d8c02017 	ldw	r3,128(sp)
 40107b4:	da000404 	addi	r8,sp,16
 40107b8:	003de906 	br	400ff60 <__alt_data_end+0xfc00ff60>
 40107bc:	d9002d17 	ldw	r4,180(sp)
 40107c0:	d9801e04 	addi	r6,sp,120
 40107c4:	b80b883a 	mov	r5,r23
 40107c8:	401631c0 	call	401631c <__sprint_r>
 40107cc:	103c701e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 40107d0:	d8c02017 	ldw	r3,128(sp)
 40107d4:	da000404 	addi	r8,sp,16
 40107d8:	003d9b06 	br	400fe48 <__alt_data_end+0xfc00fe48>
 40107dc:	d9002d17 	ldw	r4,180(sp)
 40107e0:	d9801e04 	addi	r6,sp,120
 40107e4:	b80b883a 	mov	r5,r23
 40107e8:	401631c0 	call	401631c <__sprint_r>
 40107ec:	103c681e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 40107f0:	d8c02017 	ldw	r3,128(sp)
 40107f4:	da000404 	addi	r8,sp,16
 40107f8:	003da106 	br	400fe80 <__alt_data_end+0xfc00fe80>
 40107fc:	d9402a17 	ldw	r5,168(sp)
 4010800:	d8002785 	stb	zero,158(sp)
 4010804:	283f0616 	blt	r5,zero,4010420 <__alt_data_end+0xfc010420>
 4010808:	00ffdfc4 	movi	r3,-129
 401080c:	9d84b03a 	or	r2,r19,r22
 4010810:	90e4703a 	and	r18,r18,r3
 4010814:	103c3b26 	beq	r2,zero,400f904 <__alt_data_end+0xfc00f904>
 4010818:	0039883a 	mov	fp,zero
 401081c:	003e5806 	br	4010180 <__alt_data_end+0xfc010180>
 4010820:	9080040c 	andi	r2,r18,16
 4010824:	1001b326 	beq	r2,zero,4010ef4 <___vfprintf_internal_r+0x1974>
 4010828:	d8c02e17 	ldw	r3,184(sp)
 401082c:	d9002a17 	ldw	r4,168(sp)
 4010830:	d8002785 	stb	zero,158(sp)
 4010834:	18800104 	addi	r2,r3,4
 4010838:	1cc00017 	ldw	r19,0(r3)
 401083c:	002d883a 	mov	r22,zero
 4010840:	2001b516 	blt	r4,zero,4010f18 <___vfprintf_internal_r+0x1998>
 4010844:	00ffdfc4 	movi	r3,-129
 4010848:	d8802e15 	stw	r2,184(sp)
 401084c:	90e4703a 	and	r18,r18,r3
 4010850:	983d0526 	beq	r19,zero,400fc68 <__alt_data_end+0xfc00fc68>
 4010854:	0039883a 	mov	fp,zero
 4010858:	003d0806 	br	400fc7c <__alt_data_end+0xfc00fc7c>
 401085c:	dc402617 	ldw	r17,152(sp)
 4010860:	0441d30e 	bge	zero,r17,4010fb0 <___vfprintf_internal_r+0x1a30>
 4010864:	dc403217 	ldw	r17,200(sp)
 4010868:	d8803317 	ldw	r2,204(sp)
 401086c:	1440010e 	bge	r2,r17,4010874 <___vfprintf_internal_r+0x12f4>
 4010870:	1023883a 	mov	r17,r2
 4010874:	04400a0e 	bge	zero,r17,40108a0 <___vfprintf_internal_r+0x1320>
 4010878:	d8801f17 	ldw	r2,124(sp)
 401087c:	1c47883a 	add	r3,r3,r17
 4010880:	44000015 	stw	r16,0(r8)
 4010884:	10800044 	addi	r2,r2,1
 4010888:	44400115 	stw	r17,4(r8)
 401088c:	d8c02015 	stw	r3,128(sp)
 4010890:	d8801f15 	stw	r2,124(sp)
 4010894:	010001c4 	movi	r4,7
 4010898:	20826516 	blt	r4,r2,4011230 <___vfprintf_internal_r+0x1cb0>
 401089c:	42000204 	addi	r8,r8,8
 40108a0:	88026116 	blt	r17,zero,4011228 <___vfprintf_internal_r+0x1ca8>
 40108a4:	d9003217 	ldw	r4,200(sp)
 40108a8:	2463c83a 	sub	r17,r4,r17
 40108ac:	04407b0e 	bge	zero,r17,4010a9c <___vfprintf_internal_r+0x151c>
 40108b0:	05800404 	movi	r22,16
 40108b4:	d8801f17 	ldw	r2,124(sp)
 40108b8:	b4419d0e 	bge	r22,r17,4010f30 <___vfprintf_internal_r+0x19b0>
 40108bc:	010100b4 	movhi	r4,1026
 40108c0:	211ca984 	addi	r4,r4,29350
 40108c4:	d9002c15 	stw	r4,176(sp)
 40108c8:	070001c4 	movi	fp,7
 40108cc:	dcc02d17 	ldw	r19,180(sp)
 40108d0:	00000306 	br	40108e0 <___vfprintf_internal_r+0x1360>
 40108d4:	42000204 	addi	r8,r8,8
 40108d8:	8c7ffc04 	addi	r17,r17,-16
 40108dc:	b441970e 	bge	r22,r17,4010f3c <___vfprintf_internal_r+0x19bc>
 40108e0:	18c00404 	addi	r3,r3,16
 40108e4:	10800044 	addi	r2,r2,1
 40108e8:	45000015 	stw	r20,0(r8)
 40108ec:	45800115 	stw	r22,4(r8)
 40108f0:	d8c02015 	stw	r3,128(sp)
 40108f4:	d8801f15 	stw	r2,124(sp)
 40108f8:	e0bff60e 	bge	fp,r2,40108d4 <__alt_data_end+0xfc0108d4>
 40108fc:	d9801e04 	addi	r6,sp,120
 4010900:	b80b883a 	mov	r5,r23
 4010904:	9809883a 	mov	r4,r19
 4010908:	401631c0 	call	401631c <__sprint_r>
 401090c:	103c201e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 4010910:	d8c02017 	ldw	r3,128(sp)
 4010914:	d8801f17 	ldw	r2,124(sp)
 4010918:	da000404 	addi	r8,sp,16
 401091c:	003fee06 	br	40108d8 <__alt_data_end+0xfc0108d8>
 4010920:	d9002d17 	ldw	r4,180(sp)
 4010924:	d9801e04 	addi	r6,sp,120
 4010928:	b80b883a 	mov	r5,r23
 401092c:	401631c0 	call	401631c <__sprint_r>
 4010930:	103c171e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 4010934:	d8c02017 	ldw	r3,128(sp)
 4010938:	df002787 	ldb	fp,158(sp)
 401093c:	da000404 	addi	r8,sp,16
 4010940:	003d3406 	br	400fe14 <__alt_data_end+0xfc00fe14>
 4010944:	9080040c 	andi	r2,r18,16
 4010948:	10016126 	beq	r2,zero,4010ed0 <___vfprintf_internal_r+0x1950>
 401094c:	d9402e17 	ldw	r5,184(sp)
 4010950:	2cc00017 	ldw	r19,0(r5)
 4010954:	29400104 	addi	r5,r5,4
 4010958:	d9402e15 	stw	r5,184(sp)
 401095c:	982dd7fa 	srai	r22,r19,31
 4010960:	b005883a 	mov	r2,r22
 4010964:	003c5a06 	br	400fad0 <__alt_data_end+0xfc00fad0>
 4010968:	9080040c 	andi	r2,r18,16
 401096c:	10003526 	beq	r2,zero,4010a44 <___vfprintf_internal_r+0x14c4>
 4010970:	d8c02e17 	ldw	r3,184(sp)
 4010974:	d9002a17 	ldw	r4,168(sp)
 4010978:	d8002785 	stb	zero,158(sp)
 401097c:	18800104 	addi	r2,r3,4
 4010980:	1cc00017 	ldw	r19,0(r3)
 4010984:	002d883a 	mov	r22,zero
 4010988:	20003716 	blt	r4,zero,4010a68 <___vfprintf_internal_r+0x14e8>
 401098c:	00ffdfc4 	movi	r3,-129
 4010990:	d8802e15 	stw	r2,184(sp)
 4010994:	90e4703a 	and	r18,r18,r3
 4010998:	0039883a 	mov	fp,zero
 401099c:	983dd426 	beq	r19,zero,40100f0 <__alt_data_end+0xfc0100f0>
 40109a0:	00800244 	movi	r2,9
 40109a4:	14fc5336 	bltu	r2,r19,400faf4 <__alt_data_end+0xfc00faf4>
 40109a8:	d8c02817 	ldw	r3,160(sp)
 40109ac:	dc001dc4 	addi	r16,sp,119
 40109b0:	9cc00c04 	addi	r19,r19,48
 40109b4:	1c07c83a 	sub	r3,r3,r16
 40109b8:	dcc01dc5 	stb	r19,119(sp)
 40109bc:	d8c02b15 	stw	r3,172(sp)
 40109c0:	003cc606 	br	400fcdc <__alt_data_end+0xfc00fcdc>
 40109c4:	d8803317 	ldw	r2,204(sp)
 40109c8:	143fffc4 	addi	r16,r2,-1
 40109cc:	043f4d0e 	bge	zero,r16,4010704 <__alt_data_end+0xfc010704>
 40109d0:	07000404 	movi	fp,16
 40109d4:	e400810e 	bge	fp,r16,4010bdc <___vfprintf_internal_r+0x165c>
 40109d8:	014100b4 	movhi	r5,1026
 40109dc:	295ca984 	addi	r5,r5,29350
 40109e0:	d9402c15 	stw	r5,176(sp)
 40109e4:	01c001c4 	movi	r7,7
 40109e8:	dcc02d17 	ldw	r19,180(sp)
 40109ec:	00000306 	br	40109fc <___vfprintf_internal_r+0x147c>
 40109f0:	b5800204 	addi	r22,r22,8
 40109f4:	843ffc04 	addi	r16,r16,-16
 40109f8:	e4007b0e 	bge	fp,r16,4010be8 <___vfprintf_internal_r+0x1668>
 40109fc:	18c00404 	addi	r3,r3,16
 4010a00:	8c400044 	addi	r17,r17,1
 4010a04:	b5000015 	stw	r20,0(r22)
 4010a08:	b7000115 	stw	fp,4(r22)
 4010a0c:	d8c02015 	stw	r3,128(sp)
 4010a10:	dc401f15 	stw	r17,124(sp)
 4010a14:	3c7ff60e 	bge	r7,r17,40109f0 <__alt_data_end+0xfc0109f0>
 4010a18:	d9801e04 	addi	r6,sp,120
 4010a1c:	b80b883a 	mov	r5,r23
 4010a20:	9809883a 	mov	r4,r19
 4010a24:	d9c03c15 	stw	r7,240(sp)
 4010a28:	401631c0 	call	401631c <__sprint_r>
 4010a2c:	d9c03c17 	ldw	r7,240(sp)
 4010a30:	103bd71e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 4010a34:	d8c02017 	ldw	r3,128(sp)
 4010a38:	dc401f17 	ldw	r17,124(sp)
 4010a3c:	dd800404 	addi	r22,sp,16
 4010a40:	003fec06 	br	40109f4 <__alt_data_end+0xfc0109f4>
 4010a44:	9080100c 	andi	r2,r18,64
 4010a48:	d8002785 	stb	zero,158(sp)
 4010a4c:	10010e26 	beq	r2,zero,4010e88 <___vfprintf_internal_r+0x1908>
 4010a50:	d9402e17 	ldw	r5,184(sp)
 4010a54:	d8c02a17 	ldw	r3,168(sp)
 4010a58:	002d883a 	mov	r22,zero
 4010a5c:	28800104 	addi	r2,r5,4
 4010a60:	2cc0000b 	ldhu	r19,0(r5)
 4010a64:	183fc90e 	bge	r3,zero,401098c <__alt_data_end+0xfc01098c>
 4010a68:	d8802e15 	stw	r2,184(sp)
 4010a6c:	0039883a 	mov	fp,zero
 4010a70:	9d84b03a 	or	r2,r19,r22
 4010a74:	103c1e1e 	bne	r2,zero,400faf0 <__alt_data_end+0xfc00faf0>
 4010a78:	00800044 	movi	r2,1
 4010a7c:	003e6c06 	br	4010430 <__alt_data_end+0xfc010430>
 4010a80:	d9002d17 	ldw	r4,180(sp)
 4010a84:	d9801e04 	addi	r6,sp,120
 4010a88:	b80b883a 	mov	r5,r23
 4010a8c:	401631c0 	call	401631c <__sprint_r>
 4010a90:	103bbf1e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 4010a94:	d8c02017 	ldw	r3,128(sp)
 4010a98:	da000404 	addi	r8,sp,16
 4010a9c:	d9003217 	ldw	r4,200(sp)
 4010aa0:	d8802617 	ldw	r2,152(sp)
 4010aa4:	d9403317 	ldw	r5,204(sp)
 4010aa8:	8123883a 	add	r17,r16,r4
 4010aac:	11400216 	blt	r2,r5,4010ab8 <___vfprintf_internal_r+0x1538>
 4010ab0:	9100004c 	andi	r4,r18,1
 4010ab4:	20000d26 	beq	r4,zero,4010aec <___vfprintf_internal_r+0x156c>
 4010ab8:	d9003717 	ldw	r4,220(sp)
 4010abc:	d9403417 	ldw	r5,208(sp)
 4010ac0:	1907883a 	add	r3,r3,r4
 4010ac4:	d9001f17 	ldw	r4,124(sp)
 4010ac8:	41400015 	stw	r5,0(r8)
 4010acc:	d9403717 	ldw	r5,220(sp)
 4010ad0:	21000044 	addi	r4,r4,1
 4010ad4:	d8c02015 	stw	r3,128(sp)
 4010ad8:	41400115 	stw	r5,4(r8)
 4010adc:	d9001f15 	stw	r4,124(sp)
 4010ae0:	014001c4 	movi	r5,7
 4010ae4:	2901e816 	blt	r5,r4,4011288 <___vfprintf_internal_r+0x1d08>
 4010ae8:	42000204 	addi	r8,r8,8
 4010aec:	d9003317 	ldw	r4,204(sp)
 4010af0:	8121883a 	add	r16,r16,r4
 4010af4:	2085c83a 	sub	r2,r4,r2
 4010af8:	8461c83a 	sub	r16,r16,r17
 4010afc:	1400010e 	bge	r2,r16,4010b04 <___vfprintf_internal_r+0x1584>
 4010b00:	1021883a 	mov	r16,r2
 4010b04:	04000a0e 	bge	zero,r16,4010b30 <___vfprintf_internal_r+0x15b0>
 4010b08:	d9001f17 	ldw	r4,124(sp)
 4010b0c:	1c07883a 	add	r3,r3,r16
 4010b10:	44400015 	stw	r17,0(r8)
 4010b14:	21000044 	addi	r4,r4,1
 4010b18:	44000115 	stw	r16,4(r8)
 4010b1c:	d8c02015 	stw	r3,128(sp)
 4010b20:	d9001f15 	stw	r4,124(sp)
 4010b24:	014001c4 	movi	r5,7
 4010b28:	2901fb16 	blt	r5,r4,4011318 <___vfprintf_internal_r+0x1d98>
 4010b2c:	42000204 	addi	r8,r8,8
 4010b30:	8001f716 	blt	r16,zero,4011310 <___vfprintf_internal_r+0x1d90>
 4010b34:	1421c83a 	sub	r16,r2,r16
 4010b38:	043d160e 	bge	zero,r16,400ff94 <__alt_data_end+0xfc00ff94>
 4010b3c:	04400404 	movi	r17,16
 4010b40:	d8801f17 	ldw	r2,124(sp)
 4010b44:	8c3efb0e 	bge	r17,r16,4010734 <__alt_data_end+0xfc010734>
 4010b48:	014100b4 	movhi	r5,1026
 4010b4c:	295ca984 	addi	r5,r5,29350
 4010b50:	d9402c15 	stw	r5,176(sp)
 4010b54:	058001c4 	movi	r22,7
 4010b58:	dcc02d17 	ldw	r19,180(sp)
 4010b5c:	00000306 	br	4010b6c <___vfprintf_internal_r+0x15ec>
 4010b60:	42000204 	addi	r8,r8,8
 4010b64:	843ffc04 	addi	r16,r16,-16
 4010b68:	8c3ef50e 	bge	r17,r16,4010740 <__alt_data_end+0xfc010740>
 4010b6c:	18c00404 	addi	r3,r3,16
 4010b70:	10800044 	addi	r2,r2,1
 4010b74:	45000015 	stw	r20,0(r8)
 4010b78:	44400115 	stw	r17,4(r8)
 4010b7c:	d8c02015 	stw	r3,128(sp)
 4010b80:	d8801f15 	stw	r2,124(sp)
 4010b84:	b0bff60e 	bge	r22,r2,4010b60 <__alt_data_end+0xfc010b60>
 4010b88:	d9801e04 	addi	r6,sp,120
 4010b8c:	b80b883a 	mov	r5,r23
 4010b90:	9809883a 	mov	r4,r19
 4010b94:	401631c0 	call	401631c <__sprint_r>
 4010b98:	103b7d1e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 4010b9c:	d8c02017 	ldw	r3,128(sp)
 4010ba0:	d8801f17 	ldw	r2,124(sp)
 4010ba4:	da000404 	addi	r8,sp,16
 4010ba8:	003fee06 	br	4010b64 <__alt_data_end+0xfc010b64>
 4010bac:	9088703a 	and	r4,r18,r2
 4010bb0:	203eab1e 	bne	r4,zero,4010660 <__alt_data_end+0xfc010660>
 4010bb4:	dc401f17 	ldw	r17,124(sp)
 4010bb8:	40800115 	stw	r2,4(r8)
 4010bbc:	44000015 	stw	r16,0(r8)
 4010bc0:	8c400044 	addi	r17,r17,1
 4010bc4:	d8c02015 	stw	r3,128(sp)
 4010bc8:	dc401f15 	stw	r17,124(sp)
 4010bcc:	008001c4 	movi	r2,7
 4010bd0:	14400e16 	blt	r2,r17,4010c0c <___vfprintf_internal_r+0x168c>
 4010bd4:	45800204 	addi	r22,r8,8
 4010bd8:	003eca06 	br	4010704 <__alt_data_end+0xfc010704>
 4010bdc:	010100b4 	movhi	r4,1026
 4010be0:	211ca984 	addi	r4,r4,29350
 4010be4:	d9002c15 	stw	r4,176(sp)
 4010be8:	d8802c17 	ldw	r2,176(sp)
 4010bec:	1c07883a 	add	r3,r3,r16
 4010bf0:	8c400044 	addi	r17,r17,1
 4010bf4:	b0800015 	stw	r2,0(r22)
 4010bf8:	b4000115 	stw	r16,4(r22)
 4010bfc:	d8c02015 	stw	r3,128(sp)
 4010c00:	dc401f15 	stw	r17,124(sp)
 4010c04:	008001c4 	movi	r2,7
 4010c08:	147ebd0e 	bge	r2,r17,4010700 <__alt_data_end+0xfc010700>
 4010c0c:	d9002d17 	ldw	r4,180(sp)
 4010c10:	d9801e04 	addi	r6,sp,120
 4010c14:	b80b883a 	mov	r5,r23
 4010c18:	401631c0 	call	401631c <__sprint_r>
 4010c1c:	103b5c1e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 4010c20:	d8c02017 	ldw	r3,128(sp)
 4010c24:	dc401f17 	ldw	r17,124(sp)
 4010c28:	dd800404 	addi	r22,sp,16
 4010c2c:	003eb506 	br	4010704 <__alt_data_end+0xfc010704>
 4010c30:	d9002d17 	ldw	r4,180(sp)
 4010c34:	d9801e04 	addi	r6,sp,120
 4010c38:	b80b883a 	mov	r5,r23
 4010c3c:	401631c0 	call	401631c <__sprint_r>
 4010c40:	103b531e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 4010c44:	d8c02017 	ldw	r3,128(sp)
 4010c48:	dc401f17 	ldw	r17,124(sp)
 4010c4c:	da000404 	addi	r8,sp,16
 4010c50:	003e8d06 	br	4010688 <__alt_data_end+0xfc010688>
 4010c54:	d9002d17 	ldw	r4,180(sp)
 4010c58:	d9801e04 	addi	r6,sp,120
 4010c5c:	b80b883a 	mov	r5,r23
 4010c60:	401631c0 	call	401631c <__sprint_r>
 4010c64:	103b4a1e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 4010c68:	d8c02017 	ldw	r3,128(sp)
 4010c6c:	dc401f17 	ldw	r17,124(sp)
 4010c70:	dd800404 	addi	r22,sp,16
 4010c74:	003e8f06 	br	40106b4 <__alt_data_end+0xfc0106b4>
 4010c78:	0027883a 	mov	r19,zero
 4010c7c:	003f4a06 	br	40109a8 <__alt_data_end+0xfc0109a8>
 4010c80:	d9002d17 	ldw	r4,180(sp)
 4010c84:	d9801e04 	addi	r6,sp,120
 4010c88:	b80b883a 	mov	r5,r23
 4010c8c:	401631c0 	call	401631c <__sprint_r>
 4010c90:	103b3f1e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 4010c94:	d8c02017 	ldw	r3,128(sp)
 4010c98:	da000404 	addi	r8,sp,16
 4010c9c:	003c7b06 	br	400fe8c <__alt_data_end+0xfc00fe8c>
 4010ca0:	d9402a17 	ldw	r5,168(sp)
 4010ca4:	04e7c83a 	sub	r19,zero,r19
 4010ca8:	07000b44 	movi	fp,45
 4010cac:	9804c03a 	cmpne	r2,r19,zero
 4010cb0:	05adc83a 	sub	r22,zero,r22
 4010cb4:	df002785 	stb	fp,158(sp)
 4010cb8:	b0adc83a 	sub	r22,r22,r2
 4010cbc:	28017b16 	blt	r5,zero,40112ac <___vfprintf_internal_r+0x1d2c>
 4010cc0:	00bfdfc4 	movi	r2,-129
 4010cc4:	90a4703a 	and	r18,r18,r2
 4010cc8:	003b8906 	br	400faf0 <__alt_data_end+0xfc00faf0>
 4010ccc:	d9003617 	ldw	r4,216(sp)
 4010cd0:	d9403817 	ldw	r5,224(sp)
 4010cd4:	da003d15 	stw	r8,244(sp)
 4010cd8:	40160700 	call	4016070 <__fpclassifyd>
 4010cdc:	da003d17 	ldw	r8,244(sp)
 4010ce0:	1000f026 	beq	r2,zero,40110a4 <___vfprintf_internal_r+0x1b24>
 4010ce4:	d9002a17 	ldw	r4,168(sp)
 4010ce8:	05bff7c4 	movi	r22,-33
 4010cec:	00bfffc4 	movi	r2,-1
 4010cf0:	8dac703a 	and	r22,r17,r22
 4010cf4:	20820026 	beq	r4,r2,40114f8 <___vfprintf_internal_r+0x1f78>
 4010cf8:	008011c4 	movi	r2,71
 4010cfc:	b081f726 	beq	r22,r2,40114dc <___vfprintf_internal_r+0x1f5c>
 4010d00:	d9003817 	ldw	r4,224(sp)
 4010d04:	90c04014 	ori	r3,r18,256
 4010d08:	d8c02c15 	stw	r3,176(sp)
 4010d0c:	20021516 	blt	r4,zero,4011564 <___vfprintf_internal_r+0x1fe4>
 4010d10:	dcc03817 	ldw	r19,224(sp)
 4010d14:	d8002905 	stb	zero,164(sp)
 4010d18:	00801984 	movi	r2,102
 4010d1c:	8881f926 	beq	r17,r2,4011504 <___vfprintf_internal_r+0x1f84>
 4010d20:	00801184 	movi	r2,70
 4010d24:	88821c26 	beq	r17,r2,4011598 <___vfprintf_internal_r+0x2018>
 4010d28:	00801144 	movi	r2,69
 4010d2c:	b081ef26 	beq	r22,r2,40114ec <___vfprintf_internal_r+0x1f6c>
 4010d30:	d8c02a17 	ldw	r3,168(sp)
 4010d34:	d8802104 	addi	r2,sp,132
 4010d38:	d8800315 	stw	r2,12(sp)
 4010d3c:	d9403617 	ldw	r5,216(sp)
 4010d40:	d8802504 	addi	r2,sp,148
 4010d44:	d9002d17 	ldw	r4,180(sp)
 4010d48:	d8800215 	stw	r2,8(sp)
 4010d4c:	d8802604 	addi	r2,sp,152
 4010d50:	d8c00015 	stw	r3,0(sp)
 4010d54:	d8800115 	stw	r2,4(sp)
 4010d58:	01c00084 	movi	r7,2
 4010d5c:	980d883a 	mov	r6,r19
 4010d60:	d8c03c15 	stw	r3,240(sp)
 4010d64:	da003d15 	stw	r8,244(sp)
 4010d68:	4011cb00 	call	4011cb0 <_dtoa_r>
 4010d6c:	1021883a 	mov	r16,r2
 4010d70:	008019c4 	movi	r2,103
 4010d74:	d8c03c17 	ldw	r3,240(sp)
 4010d78:	da003d17 	ldw	r8,244(sp)
 4010d7c:	88817126 	beq	r17,r2,4011344 <___vfprintf_internal_r+0x1dc4>
 4010d80:	008011c4 	movi	r2,71
 4010d84:	88829126 	beq	r17,r2,40117cc <___vfprintf_internal_r+0x224c>
 4010d88:	80f9883a 	add	fp,r16,r3
 4010d8c:	d9003617 	ldw	r4,216(sp)
 4010d90:	000d883a 	mov	r6,zero
 4010d94:	000f883a 	mov	r7,zero
 4010d98:	980b883a 	mov	r5,r19
 4010d9c:	da003d15 	stw	r8,244(sp)
 4010da0:	401a0a00 	call	401a0a0 <__eqdf2>
 4010da4:	da003d17 	ldw	r8,244(sp)
 4010da8:	10018d26 	beq	r2,zero,40113e0 <___vfprintf_internal_r+0x1e60>
 4010dac:	d8802117 	ldw	r2,132(sp)
 4010db0:	1700062e 	bgeu	r2,fp,4010dcc <___vfprintf_internal_r+0x184c>
 4010db4:	01000c04 	movi	r4,48
 4010db8:	10c00044 	addi	r3,r2,1
 4010dbc:	d8c02115 	stw	r3,132(sp)
 4010dc0:	11000005 	stb	r4,0(r2)
 4010dc4:	d8802117 	ldw	r2,132(sp)
 4010dc8:	173ffb36 	bltu	r2,fp,4010db8 <__alt_data_end+0xfc010db8>
 4010dcc:	1405c83a 	sub	r2,r2,r16
 4010dd0:	d8803315 	stw	r2,204(sp)
 4010dd4:	008011c4 	movi	r2,71
 4010dd8:	b0817626 	beq	r22,r2,40113b4 <___vfprintf_internal_r+0x1e34>
 4010ddc:	00801944 	movi	r2,101
 4010de0:	1442800e 	bge	r2,r17,40117e4 <___vfprintf_internal_r+0x2264>
 4010de4:	d8c02617 	ldw	r3,152(sp)
 4010de8:	00801984 	movi	r2,102
 4010dec:	d8c03215 	stw	r3,200(sp)
 4010df0:	8881fe26 	beq	r17,r2,40115ec <___vfprintf_internal_r+0x206c>
 4010df4:	d8c03217 	ldw	r3,200(sp)
 4010df8:	d9003317 	ldw	r4,204(sp)
 4010dfc:	1901dd16 	blt	r3,r4,4011574 <___vfprintf_internal_r+0x1ff4>
 4010e00:	9480004c 	andi	r18,r18,1
 4010e04:	90022b1e 	bne	r18,zero,40116b4 <___vfprintf_internal_r+0x2134>
 4010e08:	1805883a 	mov	r2,r3
 4010e0c:	18028316 	blt	r3,zero,401181c <___vfprintf_internal_r+0x229c>
 4010e10:	d8c03217 	ldw	r3,200(sp)
 4010e14:	044019c4 	movi	r17,103
 4010e18:	d8c02b15 	stw	r3,172(sp)
 4010e1c:	df002907 	ldb	fp,164(sp)
 4010e20:	e001531e 	bne	fp,zero,4011370 <___vfprintf_internal_r+0x1df0>
 4010e24:	df002783 	ldbu	fp,158(sp)
 4010e28:	d8802915 	stw	r2,164(sp)
 4010e2c:	dc802c17 	ldw	r18,176(sp)
 4010e30:	d8002a15 	stw	zero,168(sp)
 4010e34:	003baf06 	br	400fcf4 <__alt_data_end+0xfc00fcf4>
 4010e38:	d8c02e17 	ldw	r3,184(sp)
 4010e3c:	d9002e17 	ldw	r4,184(sp)
 4010e40:	d9402e17 	ldw	r5,184(sp)
 4010e44:	18c00017 	ldw	r3,0(r3)
 4010e48:	21000117 	ldw	r4,4(r4)
 4010e4c:	29400204 	addi	r5,r5,8
 4010e50:	d8c03615 	stw	r3,216(sp)
 4010e54:	d9003815 	stw	r4,224(sp)
 4010e58:	d9402e15 	stw	r5,184(sp)
 4010e5c:	003b5006 	br	400fba0 <__alt_data_end+0xfc00fba0>
 4010e60:	ac400007 	ldb	r17,0(r21)
 4010e64:	003a2806 	br	400f708 <__alt_data_end+0xfc00f708>
 4010e68:	9080100c 	andi	r2,r18,64
 4010e6c:	1000a826 	beq	r2,zero,4011110 <___vfprintf_internal_r+0x1b90>
 4010e70:	d8c02e17 	ldw	r3,184(sp)
 4010e74:	002d883a 	mov	r22,zero
 4010e78:	1cc0000b 	ldhu	r19,0(r3)
 4010e7c:	18c00104 	addi	r3,r3,4
 4010e80:	d8c02e15 	stw	r3,184(sp)
 4010e84:	003caf06 	br	4010144 <__alt_data_end+0xfc010144>
 4010e88:	d9002e17 	ldw	r4,184(sp)
 4010e8c:	d9402a17 	ldw	r5,168(sp)
 4010e90:	002d883a 	mov	r22,zero
 4010e94:	20800104 	addi	r2,r4,4
 4010e98:	24c00017 	ldw	r19,0(r4)
 4010e9c:	283ebb0e 	bge	r5,zero,401098c <__alt_data_end+0xfc01098c>
 4010ea0:	003ef106 	br	4010a68 <__alt_data_end+0xfc010a68>
 4010ea4:	9080040c 	andi	r2,r18,16
 4010ea8:	1000921e 	bne	r2,zero,40110f4 <___vfprintf_internal_r+0x1b74>
 4010eac:	9480100c 	andi	r18,r18,64
 4010eb0:	90013926 	beq	r18,zero,4011398 <___vfprintf_internal_r+0x1e18>
 4010eb4:	d9402e17 	ldw	r5,184(sp)
 4010eb8:	d8c02f17 	ldw	r3,188(sp)
 4010ebc:	28800017 	ldw	r2,0(r5)
 4010ec0:	29400104 	addi	r5,r5,4
 4010ec4:	d9402e15 	stw	r5,184(sp)
 4010ec8:	10c0000d 	sth	r3,0(r2)
 4010ecc:	0039e406 	br	400f660 <__alt_data_end+0xfc00f660>
 4010ed0:	9080100c 	andi	r2,r18,64
 4010ed4:	10008026 	beq	r2,zero,40110d8 <___vfprintf_internal_r+0x1b58>
 4010ed8:	d8802e17 	ldw	r2,184(sp)
 4010edc:	14c0000f 	ldh	r19,0(r2)
 4010ee0:	10800104 	addi	r2,r2,4
 4010ee4:	d8802e15 	stw	r2,184(sp)
 4010ee8:	982dd7fa 	srai	r22,r19,31
 4010eec:	b005883a 	mov	r2,r22
 4010ef0:	003af706 	br	400fad0 <__alt_data_end+0xfc00fad0>
 4010ef4:	9080100c 	andi	r2,r18,64
 4010ef8:	d8002785 	stb	zero,158(sp)
 4010efc:	10008a1e 	bne	r2,zero,4011128 <___vfprintf_internal_r+0x1ba8>
 4010f00:	d9002e17 	ldw	r4,184(sp)
 4010f04:	d9402a17 	ldw	r5,168(sp)
 4010f08:	002d883a 	mov	r22,zero
 4010f0c:	20800104 	addi	r2,r4,4
 4010f10:	24c00017 	ldw	r19,0(r4)
 4010f14:	283e4b0e 	bge	r5,zero,4010844 <__alt_data_end+0xfc010844>
 4010f18:	9d86b03a 	or	r3,r19,r22
 4010f1c:	d8802e15 	stw	r2,184(sp)
 4010f20:	183e4c1e 	bne	r3,zero,4010854 <__alt_data_end+0xfc010854>
 4010f24:	0039883a 	mov	fp,zero
 4010f28:	0005883a 	mov	r2,zero
 4010f2c:	003d4006 	br	4010430 <__alt_data_end+0xfc010430>
 4010f30:	014100b4 	movhi	r5,1026
 4010f34:	295ca984 	addi	r5,r5,29350
 4010f38:	d9402c15 	stw	r5,176(sp)
 4010f3c:	d9402c17 	ldw	r5,176(sp)
 4010f40:	1c47883a 	add	r3,r3,r17
 4010f44:	10800044 	addi	r2,r2,1
 4010f48:	41400015 	stw	r5,0(r8)
 4010f4c:	44400115 	stw	r17,4(r8)
 4010f50:	d8c02015 	stw	r3,128(sp)
 4010f54:	d8801f15 	stw	r2,124(sp)
 4010f58:	010001c4 	movi	r4,7
 4010f5c:	20bec816 	blt	r4,r2,4010a80 <__alt_data_end+0xfc010a80>
 4010f60:	42000204 	addi	r8,r8,8
 4010f64:	003ecd06 	br	4010a9c <__alt_data_end+0xfc010a9c>
 4010f68:	d9002a17 	ldw	r4,168(sp)
 4010f6c:	d8002785 	stb	zero,158(sp)
 4010f70:	203d2d16 	blt	r4,zero,4010428 <__alt_data_end+0xfc010428>
 4010f74:	00bfdfc4 	movi	r2,-129
 4010f78:	90a4703a 	and	r18,r18,r2
 4010f7c:	003a6106 	br	400f904 <__alt_data_end+0xfc00f904>
 4010f80:	010100b4 	movhi	r4,1026
 4010f84:	211ca984 	addi	r4,r4,29350
 4010f88:	d9002c15 	stw	r4,176(sp)
 4010f8c:	003bea06 	br	400ff38 <__alt_data_end+0xfc00ff38>
 4010f90:	d9002d17 	ldw	r4,180(sp)
 4010f94:	d9801e04 	addi	r6,sp,120
 4010f98:	b80b883a 	mov	r5,r23
 4010f9c:	401631c0 	call	401631c <__sprint_r>
 4010fa0:	103a7b1e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 4010fa4:	d8c02017 	ldw	r3,128(sp)
 4010fa8:	da000404 	addi	r8,sp,16
 4010fac:	003d4106 	br	40104b4 <__alt_data_end+0xfc0104b4>
 4010fb0:	d8801f17 	ldw	r2,124(sp)
 4010fb4:	014100b4 	movhi	r5,1026
 4010fb8:	01000044 	movi	r4,1
 4010fbc:	18c00044 	addi	r3,r3,1
 4010fc0:	10800044 	addi	r2,r2,1
 4010fc4:	295ca904 	addi	r5,r5,29348
 4010fc8:	41000115 	stw	r4,4(r8)
 4010fcc:	41400015 	stw	r5,0(r8)
 4010fd0:	d8c02015 	stw	r3,128(sp)
 4010fd4:	d8801f15 	stw	r2,124(sp)
 4010fd8:	010001c4 	movi	r4,7
 4010fdc:	20805c16 	blt	r4,r2,4011150 <___vfprintf_internal_r+0x1bd0>
 4010fe0:	42000204 	addi	r8,r8,8
 4010fe4:	8800041e 	bne	r17,zero,4010ff8 <___vfprintf_internal_r+0x1a78>
 4010fe8:	d8803317 	ldw	r2,204(sp)
 4010fec:	1000021e 	bne	r2,zero,4010ff8 <___vfprintf_internal_r+0x1a78>
 4010ff0:	9080004c 	andi	r2,r18,1
 4010ff4:	103be726 	beq	r2,zero,400ff94 <__alt_data_end+0xfc00ff94>
 4010ff8:	d9003717 	ldw	r4,220(sp)
 4010ffc:	d8801f17 	ldw	r2,124(sp)
 4011000:	d9403417 	ldw	r5,208(sp)
 4011004:	20c7883a 	add	r3,r4,r3
 4011008:	10800044 	addi	r2,r2,1
 401100c:	41000115 	stw	r4,4(r8)
 4011010:	41400015 	stw	r5,0(r8)
 4011014:	d8c02015 	stw	r3,128(sp)
 4011018:	d8801f15 	stw	r2,124(sp)
 401101c:	010001c4 	movi	r4,7
 4011020:	20812116 	blt	r4,r2,40114a8 <___vfprintf_internal_r+0x1f28>
 4011024:	42000204 	addi	r8,r8,8
 4011028:	0463c83a 	sub	r17,zero,r17
 401102c:	0440730e 	bge	zero,r17,40111fc <___vfprintf_internal_r+0x1c7c>
 4011030:	05800404 	movi	r22,16
 4011034:	b440860e 	bge	r22,r17,4011250 <___vfprintf_internal_r+0x1cd0>
 4011038:	014100b4 	movhi	r5,1026
 401103c:	295ca984 	addi	r5,r5,29350
 4011040:	d9402c15 	stw	r5,176(sp)
 4011044:	070001c4 	movi	fp,7
 4011048:	dcc02d17 	ldw	r19,180(sp)
 401104c:	00000306 	br	401105c <___vfprintf_internal_r+0x1adc>
 4011050:	42000204 	addi	r8,r8,8
 4011054:	8c7ffc04 	addi	r17,r17,-16
 4011058:	b440800e 	bge	r22,r17,401125c <___vfprintf_internal_r+0x1cdc>
 401105c:	18c00404 	addi	r3,r3,16
 4011060:	10800044 	addi	r2,r2,1
 4011064:	45000015 	stw	r20,0(r8)
 4011068:	45800115 	stw	r22,4(r8)
 401106c:	d8c02015 	stw	r3,128(sp)
 4011070:	d8801f15 	stw	r2,124(sp)
 4011074:	e0bff60e 	bge	fp,r2,4011050 <__alt_data_end+0xfc011050>
 4011078:	d9801e04 	addi	r6,sp,120
 401107c:	b80b883a 	mov	r5,r23
 4011080:	9809883a 	mov	r4,r19
 4011084:	401631c0 	call	401631c <__sprint_r>
 4011088:	103a411e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 401108c:	d8c02017 	ldw	r3,128(sp)
 4011090:	d8801f17 	ldw	r2,124(sp)
 4011094:	da000404 	addi	r8,sp,16
 4011098:	003fee06 	br	4011054 <__alt_data_end+0xfc011054>
 401109c:	00bfffc4 	movi	r2,-1
 40110a0:	003a3f06 	br	400f9a0 <__alt_data_end+0xfc00f9a0>
 40110a4:	008011c4 	movi	r2,71
 40110a8:	1440b816 	blt	r2,r17,401138c <___vfprintf_internal_r+0x1e0c>
 40110ac:	040100b4 	movhi	r16,1026
 40110b0:	841c9b04 	addi	r16,r16,29292
 40110b4:	00c000c4 	movi	r3,3
 40110b8:	00bfdfc4 	movi	r2,-129
 40110bc:	d8c02915 	stw	r3,164(sp)
 40110c0:	90a4703a 	and	r18,r18,r2
 40110c4:	df002783 	ldbu	fp,158(sp)
 40110c8:	d8c02b15 	stw	r3,172(sp)
 40110cc:	d8002a15 	stw	zero,168(sp)
 40110d0:	d8003215 	stw	zero,200(sp)
 40110d4:	003b0706 	br	400fcf4 <__alt_data_end+0xfc00fcf4>
 40110d8:	d8c02e17 	ldw	r3,184(sp)
 40110dc:	1cc00017 	ldw	r19,0(r3)
 40110e0:	18c00104 	addi	r3,r3,4
 40110e4:	d8c02e15 	stw	r3,184(sp)
 40110e8:	982dd7fa 	srai	r22,r19,31
 40110ec:	b005883a 	mov	r2,r22
 40110f0:	003a7706 	br	400fad0 <__alt_data_end+0xfc00fad0>
 40110f4:	d8c02e17 	ldw	r3,184(sp)
 40110f8:	d9002f17 	ldw	r4,188(sp)
 40110fc:	18800017 	ldw	r2,0(r3)
 4011100:	18c00104 	addi	r3,r3,4
 4011104:	d8c02e15 	stw	r3,184(sp)
 4011108:	11000015 	stw	r4,0(r2)
 401110c:	00395406 	br	400f660 <__alt_data_end+0xfc00f660>
 4011110:	d9002e17 	ldw	r4,184(sp)
 4011114:	002d883a 	mov	r22,zero
 4011118:	24c00017 	ldw	r19,0(r4)
 401111c:	21000104 	addi	r4,r4,4
 4011120:	d9002e15 	stw	r4,184(sp)
 4011124:	003c0706 	br	4010144 <__alt_data_end+0xfc010144>
 4011128:	d9402e17 	ldw	r5,184(sp)
 401112c:	d8c02a17 	ldw	r3,168(sp)
 4011130:	002d883a 	mov	r22,zero
 4011134:	28800104 	addi	r2,r5,4
 4011138:	2cc0000b 	ldhu	r19,0(r5)
 401113c:	183dc10e 	bge	r3,zero,4010844 <__alt_data_end+0xfc010844>
 4011140:	003f7506 	br	4010f18 <__alt_data_end+0xfc010f18>
 4011144:	040100b4 	movhi	r16,1026
 4011148:	841c9904 	addi	r16,r16,29284
 401114c:	003aa706 	br	400fbec <__alt_data_end+0xfc00fbec>
 4011150:	d9002d17 	ldw	r4,180(sp)
 4011154:	d9801e04 	addi	r6,sp,120
 4011158:	b80b883a 	mov	r5,r23
 401115c:	401631c0 	call	401631c <__sprint_r>
 4011160:	103a0b1e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 4011164:	dc402617 	ldw	r17,152(sp)
 4011168:	d8c02017 	ldw	r3,128(sp)
 401116c:	da000404 	addi	r8,sp,16
 4011170:	003f9c06 	br	4010fe4 <__alt_data_end+0xfc010fe4>
 4011174:	ac400043 	ldbu	r17,1(r21)
 4011178:	84000814 	ori	r16,r16,32
 401117c:	ad400044 	addi	r21,r21,1
 4011180:	8c403fcc 	andi	r17,r17,255
 4011184:	8c40201c 	xori	r17,r17,128
 4011188:	8c7fe004 	addi	r17,r17,-128
 401118c:	00395e06 	br	400f708 <__alt_data_end+0xfc00f708>
 4011190:	d8c02e15 	stw	r3,184(sp)
 4011194:	0039883a 	mov	fp,zero
 4011198:	003e3506 	br	4010a70 <__alt_data_end+0xfc010a70>
 401119c:	d9002d17 	ldw	r4,180(sp)
 40111a0:	d9801e04 	addi	r6,sp,120
 40111a4:	b80b883a 	mov	r5,r23
 40111a8:	401631c0 	call	401631c <__sprint_r>
 40111ac:	1039f81e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 40111b0:	d8c02017 	ldw	r3,128(sp)
 40111b4:	da000404 	addi	r8,sp,16
 40111b8:	003cd006 	br	40104fc <__alt_data_end+0xfc0104fc>
 40111bc:	8009883a 	mov	r4,r16
 40111c0:	df003d15 	stw	fp,244(sp)
 40111c4:	400f4e00 	call	400f4e0 <strlen>
 40111c8:	d8802b15 	stw	r2,172(sp)
 40111cc:	da003d17 	ldw	r8,244(sp)
 40111d0:	103c200e 	bge	r2,zero,4010254 <__alt_data_end+0xfc010254>
 40111d4:	0005883a 	mov	r2,zero
 40111d8:	003c1e06 	br	4010254 <__alt_data_end+0xfc010254>
 40111dc:	d9002d17 	ldw	r4,180(sp)
 40111e0:	d9801e04 	addi	r6,sp,120
 40111e4:	b80b883a 	mov	r5,r23
 40111e8:	401631c0 	call	401631c <__sprint_r>
 40111ec:	1039e81e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 40111f0:	d8c02017 	ldw	r3,128(sp)
 40111f4:	d8801f17 	ldw	r2,124(sp)
 40111f8:	da000404 	addi	r8,sp,16
 40111fc:	d9403317 	ldw	r5,204(sp)
 4011200:	10800044 	addi	r2,r2,1
 4011204:	44000015 	stw	r16,0(r8)
 4011208:	28c7883a 	add	r3,r5,r3
 401120c:	003b5b06 	br	400ff7c <__alt_data_end+0xfc00ff7c>
 4011210:	010100b4 	movhi	r4,1026
 4011214:	211cad84 	addi	r4,r4,29366
 4011218:	d9003515 	stw	r4,212(sp)
 401121c:	003af206 	br	400fde8 <__alt_data_end+0xfc00fde8>
 4011220:	013fffc4 	movi	r4,-1
 4011224:	003a0806 	br	400fa48 <__alt_data_end+0xfc00fa48>
 4011228:	0023883a 	mov	r17,zero
 401122c:	003d9d06 	br	40108a4 <__alt_data_end+0xfc0108a4>
 4011230:	d9002d17 	ldw	r4,180(sp)
 4011234:	d9801e04 	addi	r6,sp,120
 4011238:	b80b883a 	mov	r5,r23
 401123c:	401631c0 	call	401631c <__sprint_r>
 4011240:	1039d31e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 4011244:	d8c02017 	ldw	r3,128(sp)
 4011248:	da000404 	addi	r8,sp,16
 401124c:	003d9406 	br	40108a0 <__alt_data_end+0xfc0108a0>
 4011250:	010100b4 	movhi	r4,1026
 4011254:	211ca984 	addi	r4,r4,29350
 4011258:	d9002c15 	stw	r4,176(sp)
 401125c:	d9002c17 	ldw	r4,176(sp)
 4011260:	1c47883a 	add	r3,r3,r17
 4011264:	10800044 	addi	r2,r2,1
 4011268:	41000015 	stw	r4,0(r8)
 401126c:	44400115 	stw	r17,4(r8)
 4011270:	d8c02015 	stw	r3,128(sp)
 4011274:	d8801f15 	stw	r2,124(sp)
 4011278:	010001c4 	movi	r4,7
 401127c:	20bfd716 	blt	r4,r2,40111dc <__alt_data_end+0xfc0111dc>
 4011280:	42000204 	addi	r8,r8,8
 4011284:	003fdd06 	br	40111fc <__alt_data_end+0xfc0111fc>
 4011288:	d9002d17 	ldw	r4,180(sp)
 401128c:	d9801e04 	addi	r6,sp,120
 4011290:	b80b883a 	mov	r5,r23
 4011294:	401631c0 	call	401631c <__sprint_r>
 4011298:	1039bd1e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 401129c:	d8802617 	ldw	r2,152(sp)
 40112a0:	d8c02017 	ldw	r3,128(sp)
 40112a4:	da000404 	addi	r8,sp,16
 40112a8:	003e1006 	br	4010aec <__alt_data_end+0xfc010aec>
 40112ac:	00800044 	movi	r2,1
 40112b0:	10803fcc 	andi	r2,r2,255
 40112b4:	00c00044 	movi	r3,1
 40112b8:	10fa0d26 	beq	r2,r3,400faf0 <__alt_data_end+0xfc00faf0>
 40112bc:	00c00084 	movi	r3,2
 40112c0:	10fbaf26 	beq	r2,r3,4010180 <__alt_data_end+0xfc010180>
 40112c4:	003a6d06 	br	400fc7c <__alt_data_end+0xfc00fc7c>
 40112c8:	010100b4 	movhi	r4,1026
 40112cc:	211cad84 	addi	r4,r4,29366
 40112d0:	d9003515 	stw	r4,212(sp)
 40112d4:	003b5406 	br	4010028 <__alt_data_end+0xfc010028>
 40112d8:	d8802a17 	ldw	r2,168(sp)
 40112dc:	00c00184 	movi	r3,6
 40112e0:	1880012e 	bgeu	r3,r2,40112e8 <___vfprintf_internal_r+0x1d68>
 40112e4:	1805883a 	mov	r2,r3
 40112e8:	d8802b15 	stw	r2,172(sp)
 40112ec:	1000ef16 	blt	r2,zero,40116ac <___vfprintf_internal_r+0x212c>
 40112f0:	040100b4 	movhi	r16,1026
 40112f4:	d8802915 	stw	r2,164(sp)
 40112f8:	dcc02e15 	stw	r19,184(sp)
 40112fc:	d8002a15 	stw	zero,168(sp)
 4011300:	d8003215 	stw	zero,200(sp)
 4011304:	841ca704 	addi	r16,r16,29340
 4011308:	0039883a 	mov	fp,zero
 401130c:	003a8006 	br	400fd10 <__alt_data_end+0xfc00fd10>
 4011310:	0021883a 	mov	r16,zero
 4011314:	003e0706 	br	4010b34 <__alt_data_end+0xfc010b34>
 4011318:	d9002d17 	ldw	r4,180(sp)
 401131c:	d9801e04 	addi	r6,sp,120
 4011320:	b80b883a 	mov	r5,r23
 4011324:	401631c0 	call	401631c <__sprint_r>
 4011328:	1039991e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 401132c:	d8802617 	ldw	r2,152(sp)
 4011330:	d9403317 	ldw	r5,204(sp)
 4011334:	d8c02017 	ldw	r3,128(sp)
 4011338:	da000404 	addi	r8,sp,16
 401133c:	2885c83a 	sub	r2,r5,r2
 4011340:	003dfb06 	br	4010b30 <__alt_data_end+0xfc010b30>
 4011344:	9080004c 	andi	r2,r18,1
 4011348:	103e8f1e 	bne	r2,zero,4010d88 <__alt_data_end+0xfc010d88>
 401134c:	d8802117 	ldw	r2,132(sp)
 4011350:	003e9e06 	br	4010dcc <__alt_data_end+0xfc010dcc>
 4011354:	1025883a 	mov	r18,r2
 4011358:	0039883a 	mov	fp,zero
 401135c:	00800084 	movi	r2,2
 4011360:	003fd306 	br	40112b0 <__alt_data_end+0xfc0112b0>
 4011364:	07000b44 	movi	fp,45
 4011368:	df002785 	stb	fp,158(sp)
 401136c:	003a1b06 	br	400fbdc <__alt_data_end+0xfc00fbdc>
 4011370:	00c00b44 	movi	r3,45
 4011374:	d8c02785 	stb	r3,158(sp)
 4011378:	d8802915 	stw	r2,164(sp)
 401137c:	dc802c17 	ldw	r18,176(sp)
 4011380:	d8002a15 	stw	zero,168(sp)
 4011384:	07000b44 	movi	fp,45
 4011388:	003a5e06 	br	400fd04 <__alt_data_end+0xfc00fd04>
 401138c:	040100b4 	movhi	r16,1026
 4011390:	841c9c04 	addi	r16,r16,29296
 4011394:	003f4706 	br	40110b4 <__alt_data_end+0xfc0110b4>
 4011398:	d9002e17 	ldw	r4,184(sp)
 401139c:	d9402f17 	ldw	r5,188(sp)
 40113a0:	20800017 	ldw	r2,0(r4)
 40113a4:	21000104 	addi	r4,r4,4
 40113a8:	d9002e15 	stw	r4,184(sp)
 40113ac:	11400015 	stw	r5,0(r2)
 40113b0:	0038ab06 	br	400f660 <__alt_data_end+0xfc00f660>
 40113b4:	dd802617 	ldw	r22,152(sp)
 40113b8:	00bfff44 	movi	r2,-3
 40113bc:	b0801c16 	blt	r22,r2,4011430 <___vfprintf_internal_r+0x1eb0>
 40113c0:	d9402a17 	ldw	r5,168(sp)
 40113c4:	2d801a16 	blt	r5,r22,4011430 <___vfprintf_internal_r+0x1eb0>
 40113c8:	dd803215 	stw	r22,200(sp)
 40113cc:	003e8906 	br	4010df4 <__alt_data_end+0xfc010df4>
 40113d0:	010100b4 	movhi	r4,1026
 40113d4:	211ca984 	addi	r4,r4,29350
 40113d8:	d9002c15 	stw	r4,176(sp)
 40113dc:	003c9106 	br	4010624 <__alt_data_end+0xfc010624>
 40113e0:	e005883a 	mov	r2,fp
 40113e4:	003e7906 	br	4010dcc <__alt_data_end+0xfc010dcc>
 40113e8:	d9002a17 	ldw	r4,168(sp)
 40113ec:	df002783 	ldbu	fp,158(sp)
 40113f0:	dcc02e15 	stw	r19,184(sp)
 40113f4:	d9002915 	stw	r4,164(sp)
 40113f8:	d9002b15 	stw	r4,172(sp)
 40113fc:	d8002a15 	stw	zero,168(sp)
 4011400:	d8003215 	stw	zero,200(sp)
 4011404:	003a3b06 	br	400fcf4 <__alt_data_end+0xfc00fcf4>
 4011408:	9080004c 	andi	r2,r18,1
 401140c:	0039883a 	mov	fp,zero
 4011410:	10000426 	beq	r2,zero,4011424 <___vfprintf_internal_r+0x1ea4>
 4011414:	00800c04 	movi	r2,48
 4011418:	dc001dc4 	addi	r16,sp,119
 401141c:	d8801dc5 	stb	r2,119(sp)
 4011420:	003b6406 	br	40101b4 <__alt_data_end+0xfc0101b4>
 4011424:	d8002b15 	stw	zero,172(sp)
 4011428:	dc001e04 	addi	r16,sp,120
 401142c:	003a2b06 	br	400fcdc <__alt_data_end+0xfc00fcdc>
 4011430:	8c7fff84 	addi	r17,r17,-2
 4011434:	b5bfffc4 	addi	r22,r22,-1
 4011438:	dd802615 	stw	r22,152(sp)
 401143c:	dc4022c5 	stb	r17,139(sp)
 4011440:	b000bf16 	blt	r22,zero,4011740 <___vfprintf_internal_r+0x21c0>
 4011444:	00800ac4 	movi	r2,43
 4011448:	d8802305 	stb	r2,140(sp)
 401144c:	00800244 	movi	r2,9
 4011450:	15807016 	blt	r2,r22,4011614 <___vfprintf_internal_r+0x2094>
 4011454:	00800c04 	movi	r2,48
 4011458:	b5800c04 	addi	r22,r22,48
 401145c:	d8802345 	stb	r2,141(sp)
 4011460:	dd802385 	stb	r22,142(sp)
 4011464:	d88023c4 	addi	r2,sp,143
 4011468:	df0022c4 	addi	fp,sp,139
 401146c:	d8c03317 	ldw	r3,204(sp)
 4011470:	1739c83a 	sub	fp,r2,fp
 4011474:	d9003317 	ldw	r4,204(sp)
 4011478:	e0c7883a 	add	r3,fp,r3
 401147c:	df003a15 	stw	fp,232(sp)
 4011480:	d8c02b15 	stw	r3,172(sp)
 4011484:	00800044 	movi	r2,1
 4011488:	1100b30e 	bge	r2,r4,4011758 <___vfprintf_internal_r+0x21d8>
 401148c:	d8c02b17 	ldw	r3,172(sp)
 4011490:	18c00044 	addi	r3,r3,1
 4011494:	d8c02b15 	stw	r3,172(sp)
 4011498:	1805883a 	mov	r2,r3
 401149c:	1800ac16 	blt	r3,zero,4011750 <___vfprintf_internal_r+0x21d0>
 40114a0:	d8003215 	stw	zero,200(sp)
 40114a4:	003e5d06 	br	4010e1c <__alt_data_end+0xfc010e1c>
 40114a8:	d9002d17 	ldw	r4,180(sp)
 40114ac:	d9801e04 	addi	r6,sp,120
 40114b0:	b80b883a 	mov	r5,r23
 40114b4:	401631c0 	call	401631c <__sprint_r>
 40114b8:	1039351e 	bne	r2,zero,400f990 <__alt_data_end+0xfc00f990>
 40114bc:	dc402617 	ldw	r17,152(sp)
 40114c0:	d8c02017 	ldw	r3,128(sp)
 40114c4:	d8801f17 	ldw	r2,124(sp)
 40114c8:	da000404 	addi	r8,sp,16
 40114cc:	003ed606 	br	4011028 <__alt_data_end+0xfc011028>
 40114d0:	182b883a 	mov	r21,r3
 40114d4:	d8002a15 	stw	zero,168(sp)
 40114d8:	00388c06 	br	400f70c <__alt_data_end+0xfc00f70c>
 40114dc:	d8802a17 	ldw	r2,168(sp)
 40114e0:	103e071e 	bne	r2,zero,4010d00 <__alt_data_end+0xfc010d00>
 40114e4:	dc002a15 	stw	r16,168(sp)
 40114e8:	003e0506 	br	4010d00 <__alt_data_end+0xfc010d00>
 40114ec:	d9002a17 	ldw	r4,168(sp)
 40114f0:	20c00044 	addi	r3,r4,1
 40114f4:	003e0f06 	br	4010d34 <__alt_data_end+0xfc010d34>
 40114f8:	01400184 	movi	r5,6
 40114fc:	d9402a15 	stw	r5,168(sp)
 4011500:	003dff06 	br	4010d00 <__alt_data_end+0xfc010d00>
 4011504:	d8802104 	addi	r2,sp,132
 4011508:	d8800315 	stw	r2,12(sp)
 401150c:	d8802504 	addi	r2,sp,148
 4011510:	d8800215 	stw	r2,8(sp)
 4011514:	d8802604 	addi	r2,sp,152
 4011518:	d8800115 	stw	r2,4(sp)
 401151c:	d8802a17 	ldw	r2,168(sp)
 4011520:	d9403617 	ldw	r5,216(sp)
 4011524:	d9002d17 	ldw	r4,180(sp)
 4011528:	d8800015 	stw	r2,0(sp)
 401152c:	01c000c4 	movi	r7,3
 4011530:	980d883a 	mov	r6,r19
 4011534:	da003d15 	stw	r8,244(sp)
 4011538:	4011cb00 	call	4011cb0 <_dtoa_r>
 401153c:	d8c02a17 	ldw	r3,168(sp)
 4011540:	da003d17 	ldw	r8,244(sp)
 4011544:	1021883a 	mov	r16,r2
 4011548:	10f9883a 	add	fp,r2,r3
 401154c:	81000007 	ldb	r4,0(r16)
 4011550:	00800c04 	movi	r2,48
 4011554:	20805e26 	beq	r4,r2,40116d0 <___vfprintf_internal_r+0x2150>
 4011558:	d8c02617 	ldw	r3,152(sp)
 401155c:	e0f9883a 	add	fp,fp,r3
 4011560:	003e0a06 	br	4010d8c <__alt_data_end+0xfc010d8c>
 4011564:	00c00b44 	movi	r3,45
 4011568:	24e0003c 	xorhi	r19,r4,32768
 401156c:	d8c02905 	stb	r3,164(sp)
 4011570:	003de906 	br	4010d18 <__alt_data_end+0xfc010d18>
 4011574:	d8c03217 	ldw	r3,200(sp)
 4011578:	00c07a0e 	bge	zero,r3,4011764 <___vfprintf_internal_r+0x21e4>
 401157c:	00800044 	movi	r2,1
 4011580:	d9003317 	ldw	r4,204(sp)
 4011584:	1105883a 	add	r2,r2,r4
 4011588:	d8802b15 	stw	r2,172(sp)
 401158c:	10004e16 	blt	r2,zero,40116c8 <___vfprintf_internal_r+0x2148>
 4011590:	044019c4 	movi	r17,103
 4011594:	003e2106 	br	4010e1c <__alt_data_end+0xfc010e1c>
 4011598:	d9002a17 	ldw	r4,168(sp)
 401159c:	d8802104 	addi	r2,sp,132
 40115a0:	d8800315 	stw	r2,12(sp)
 40115a4:	d9000015 	stw	r4,0(sp)
 40115a8:	d8802504 	addi	r2,sp,148
 40115ac:	d9403617 	ldw	r5,216(sp)
 40115b0:	d9002d17 	ldw	r4,180(sp)
 40115b4:	d8800215 	stw	r2,8(sp)
 40115b8:	d8802604 	addi	r2,sp,152
 40115bc:	d8800115 	stw	r2,4(sp)
 40115c0:	01c000c4 	movi	r7,3
 40115c4:	980d883a 	mov	r6,r19
 40115c8:	da003d15 	stw	r8,244(sp)
 40115cc:	4011cb00 	call	4011cb0 <_dtoa_r>
 40115d0:	d8c02a17 	ldw	r3,168(sp)
 40115d4:	da003d17 	ldw	r8,244(sp)
 40115d8:	1021883a 	mov	r16,r2
 40115dc:	00801184 	movi	r2,70
 40115e0:	80f9883a 	add	fp,r16,r3
 40115e4:	88bfd926 	beq	r17,r2,401154c <__alt_data_end+0xfc01154c>
 40115e8:	003de806 	br	4010d8c <__alt_data_end+0xfc010d8c>
 40115ec:	d9002a17 	ldw	r4,168(sp)
 40115f0:	00c04d0e 	bge	zero,r3,4011728 <___vfprintf_internal_r+0x21a8>
 40115f4:	2000441e 	bne	r4,zero,4011708 <___vfprintf_internal_r+0x2188>
 40115f8:	9480004c 	andi	r18,r18,1
 40115fc:	9000421e 	bne	r18,zero,4011708 <___vfprintf_internal_r+0x2188>
 4011600:	1805883a 	mov	r2,r3
 4011604:	18006f16 	blt	r3,zero,40117c4 <___vfprintf_internal_r+0x2244>
 4011608:	d8c03217 	ldw	r3,200(sp)
 401160c:	d8c02b15 	stw	r3,172(sp)
 4011610:	003e0206 	br	4010e1c <__alt_data_end+0xfc010e1c>
 4011614:	df0022c4 	addi	fp,sp,139
 4011618:	dc002a15 	stw	r16,168(sp)
 401161c:	4027883a 	mov	r19,r8
 4011620:	e021883a 	mov	r16,fp
 4011624:	b009883a 	mov	r4,r22
 4011628:	01400284 	movi	r5,10
 401162c:	400d2380 	call	400d238 <__modsi3>
 4011630:	10800c04 	addi	r2,r2,48
 4011634:	843fffc4 	addi	r16,r16,-1
 4011638:	b009883a 	mov	r4,r22
 401163c:	01400284 	movi	r5,10
 4011640:	80800005 	stb	r2,0(r16)
 4011644:	400d1b40 	call	400d1b4 <__divsi3>
 4011648:	102d883a 	mov	r22,r2
 401164c:	00800244 	movi	r2,9
 4011650:	15bff416 	blt	r2,r22,4011624 <__alt_data_end+0xfc011624>
 4011654:	9811883a 	mov	r8,r19
 4011658:	b0800c04 	addi	r2,r22,48
 401165c:	8027883a 	mov	r19,r16
 4011660:	997fffc4 	addi	r5,r19,-1
 4011664:	98bfffc5 	stb	r2,-1(r19)
 4011668:	dc002a17 	ldw	r16,168(sp)
 401166c:	2f006d2e 	bgeu	r5,fp,4011824 <___vfprintf_internal_r+0x22a4>
 4011670:	d9c02384 	addi	r7,sp,142
 4011674:	3ccfc83a 	sub	r7,r7,r19
 4011678:	d9002344 	addi	r4,sp,141
 401167c:	e1cf883a 	add	r7,fp,r7
 4011680:	00000106 	br	4011688 <___vfprintf_internal_r+0x2108>
 4011684:	28800003 	ldbu	r2,0(r5)
 4011688:	20800005 	stb	r2,0(r4)
 401168c:	21000044 	addi	r4,r4,1
 4011690:	29400044 	addi	r5,r5,1
 4011694:	393ffb1e 	bne	r7,r4,4011684 <__alt_data_end+0xfc011684>
 4011698:	d8802304 	addi	r2,sp,140
 401169c:	14c5c83a 	sub	r2,r2,r19
 40116a0:	d8c02344 	addi	r3,sp,141
 40116a4:	1885883a 	add	r2,r3,r2
 40116a8:	003f7006 	br	401146c <__alt_data_end+0xfc01146c>
 40116ac:	0005883a 	mov	r2,zero
 40116b0:	003f0f06 	br	40112f0 <__alt_data_end+0xfc0112f0>
 40116b4:	d8c03217 	ldw	r3,200(sp)
 40116b8:	18c00044 	addi	r3,r3,1
 40116bc:	d8c02b15 	stw	r3,172(sp)
 40116c0:	1805883a 	mov	r2,r3
 40116c4:	183fb20e 	bge	r3,zero,4011590 <__alt_data_end+0xfc011590>
 40116c8:	0005883a 	mov	r2,zero
 40116cc:	003fb006 	br	4011590 <__alt_data_end+0xfc011590>
 40116d0:	d9003617 	ldw	r4,216(sp)
 40116d4:	000d883a 	mov	r6,zero
 40116d8:	000f883a 	mov	r7,zero
 40116dc:	980b883a 	mov	r5,r19
 40116e0:	d8c03c15 	stw	r3,240(sp)
 40116e4:	da003d15 	stw	r8,244(sp)
 40116e8:	401a0a00 	call	401a0a0 <__eqdf2>
 40116ec:	d8c03c17 	ldw	r3,240(sp)
 40116f0:	da003d17 	ldw	r8,244(sp)
 40116f4:	103f9826 	beq	r2,zero,4011558 <__alt_data_end+0xfc011558>
 40116f8:	00800044 	movi	r2,1
 40116fc:	10c7c83a 	sub	r3,r2,r3
 4011700:	d8c02615 	stw	r3,152(sp)
 4011704:	003f9506 	br	401155c <__alt_data_end+0xfc01155c>
 4011708:	d9002a17 	ldw	r4,168(sp)
 401170c:	d8c03217 	ldw	r3,200(sp)
 4011710:	20800044 	addi	r2,r4,1
 4011714:	1885883a 	add	r2,r3,r2
 4011718:	d8802b15 	stw	r2,172(sp)
 401171c:	103dbf0e 	bge	r2,zero,4010e1c <__alt_data_end+0xfc010e1c>
 4011720:	0005883a 	mov	r2,zero
 4011724:	003dbd06 	br	4010e1c <__alt_data_end+0xfc010e1c>
 4011728:	2000201e 	bne	r4,zero,40117ac <___vfprintf_internal_r+0x222c>
 401172c:	9480004c 	andi	r18,r18,1
 4011730:	90001e1e 	bne	r18,zero,40117ac <___vfprintf_internal_r+0x222c>
 4011734:	00800044 	movi	r2,1
 4011738:	d8802b15 	stw	r2,172(sp)
 401173c:	003db706 	br	4010e1c <__alt_data_end+0xfc010e1c>
 4011740:	00800b44 	movi	r2,45
 4011744:	05adc83a 	sub	r22,zero,r22
 4011748:	d8802305 	stb	r2,140(sp)
 401174c:	003f3f06 	br	401144c <__alt_data_end+0xfc01144c>
 4011750:	0005883a 	mov	r2,zero
 4011754:	003f5206 	br	40114a0 <__alt_data_end+0xfc0114a0>
 4011758:	90a4703a 	and	r18,r18,r2
 401175c:	903f4e26 	beq	r18,zero,4011498 <__alt_data_end+0xfc011498>
 4011760:	003f4a06 	br	401148c <__alt_data_end+0xfc01148c>
 4011764:	00800084 	movi	r2,2
 4011768:	10c5c83a 	sub	r2,r2,r3
 401176c:	003f8406 	br	4011580 <__alt_data_end+0xfc011580>
 4011770:	d9402e17 	ldw	r5,184(sp)
 4011774:	d9002e17 	ldw	r4,184(sp)
 4011778:	ac400043 	ldbu	r17,1(r21)
 401177c:	29400017 	ldw	r5,0(r5)
 4011780:	20800104 	addi	r2,r4,4
 4011784:	d8802e15 	stw	r2,184(sp)
 4011788:	d9402a15 	stw	r5,168(sp)
 401178c:	182b883a 	mov	r21,r3
 4011790:	283e7b0e 	bge	r5,zero,4011180 <__alt_data_end+0xfc011180>
 4011794:	8c403fcc 	andi	r17,r17,255
 4011798:	017fffc4 	movi	r5,-1
 401179c:	8c40201c 	xori	r17,r17,128
 40117a0:	d9402a15 	stw	r5,168(sp)
 40117a4:	8c7fe004 	addi	r17,r17,-128
 40117a8:	0037d706 	br	400f708 <__alt_data_end+0xfc00f708>
 40117ac:	d8c02a17 	ldw	r3,168(sp)
 40117b0:	18c00084 	addi	r3,r3,2
 40117b4:	d8c02b15 	stw	r3,172(sp)
 40117b8:	1805883a 	mov	r2,r3
 40117bc:	183d970e 	bge	r3,zero,4010e1c <__alt_data_end+0xfc010e1c>
 40117c0:	003fd706 	br	4011720 <__alt_data_end+0xfc011720>
 40117c4:	0005883a 	mov	r2,zero
 40117c8:	003f8f06 	br	4011608 <__alt_data_end+0xfc011608>
 40117cc:	9080004c 	andi	r2,r18,1
 40117d0:	103f821e 	bne	r2,zero,40115dc <__alt_data_end+0xfc0115dc>
 40117d4:	d8802117 	ldw	r2,132(sp)
 40117d8:	1405c83a 	sub	r2,r2,r16
 40117dc:	d8803315 	stw	r2,204(sp)
 40117e0:	b47ef426 	beq	r22,r17,40113b4 <__alt_data_end+0xfc0113b4>
 40117e4:	dd802617 	ldw	r22,152(sp)
 40117e8:	003f1206 	br	4011434 <__alt_data_end+0xfc011434>
 40117ec:	d8c02b03 	ldbu	r3,172(sp)
 40117f0:	d8c02785 	stb	r3,158(sp)
 40117f4:	0038df06 	br	400fb74 <__alt_data_end+0xfc00fb74>
 40117f8:	d8c02b03 	ldbu	r3,172(sp)
 40117fc:	d8c02785 	stb	r3,158(sp)
 4011800:	0038aa06 	br	400faac <__alt_data_end+0xfc00faac>
 4011804:	d8c02b03 	ldbu	r3,172(sp)
 4011808:	d8c02785 	stb	r3,158(sp)
 401180c:	003a4306 	br	401011c <__alt_data_end+0xfc01011c>
 4011810:	d8c02b03 	ldbu	r3,172(sp)
 4011814:	d8c02785 	stb	r3,158(sp)
 4011818:	003af506 	br	40103f0 <__alt_data_end+0xfc0103f0>
 401181c:	0005883a 	mov	r2,zero
 4011820:	003d7b06 	br	4010e10 <__alt_data_end+0xfc010e10>
 4011824:	d8802344 	addi	r2,sp,141
 4011828:	003f1006 	br	401146c <__alt_data_end+0xfc01146c>
 401182c:	d8c02b03 	ldbu	r3,172(sp)
 4011830:	d8c02785 	stb	r3,158(sp)
 4011834:	0038fd06 	br	400fc2c <__alt_data_end+0xfc00fc2c>
 4011838:	d8c02b03 	ldbu	r3,172(sp)
 401183c:	d8c02785 	stb	r3,158(sp)
 4011840:	003a9706 	br	40102a0 <__alt_data_end+0xfc0102a0>
 4011844:	d8c02b03 	ldbu	r3,172(sp)
 4011848:	d8c02785 	stb	r3,158(sp)
 401184c:	003a1806 	br	40100b0 <__alt_data_end+0xfc0100b0>
 4011850:	d8c02b03 	ldbu	r3,172(sp)
 4011854:	d8c02785 	stb	r3,158(sp)
 4011858:	003abe06 	br	4010354 <__alt_data_end+0xfc010354>

0401185c <__vfprintf_internal>:
 401185c:	008100f4 	movhi	r2,1027
 4011860:	10a98804 	addi	r2,r2,-23008
 4011864:	300f883a 	mov	r7,r6
 4011868:	280d883a 	mov	r6,r5
 401186c:	200b883a 	mov	r5,r4
 4011870:	11000017 	ldw	r4,0(r2)
 4011874:	400f5801 	jmpi	400f580 <___vfprintf_internal_r>

04011878 <__sbprintf>:
 4011878:	2880030b 	ldhu	r2,12(r5)
 401187c:	2ac01917 	ldw	r11,100(r5)
 4011880:	2a80038b 	ldhu	r10,14(r5)
 4011884:	2a400717 	ldw	r9,28(r5)
 4011888:	2a000917 	ldw	r8,36(r5)
 401188c:	defee204 	addi	sp,sp,-1144
 4011890:	00c10004 	movi	r3,1024
 4011894:	dc011a15 	stw	r16,1128(sp)
 4011898:	10bfff4c 	andi	r2,r2,65533
 401189c:	2821883a 	mov	r16,r5
 40118a0:	d8cb883a 	add	r5,sp,r3
 40118a4:	dc811c15 	stw	r18,1136(sp)
 40118a8:	dc411b15 	stw	r17,1132(sp)
 40118ac:	dfc11d15 	stw	ra,1140(sp)
 40118b0:	2025883a 	mov	r18,r4
 40118b4:	d881030d 	sth	r2,1036(sp)
 40118b8:	dac11915 	stw	r11,1124(sp)
 40118bc:	da81038d 	sth	r10,1038(sp)
 40118c0:	da410715 	stw	r9,1052(sp)
 40118c4:	da010915 	stw	r8,1060(sp)
 40118c8:	dec10015 	stw	sp,1024(sp)
 40118cc:	dec10415 	stw	sp,1040(sp)
 40118d0:	d8c10215 	stw	r3,1032(sp)
 40118d4:	d8c10515 	stw	r3,1044(sp)
 40118d8:	d8010615 	stw	zero,1048(sp)
 40118dc:	400f5800 	call	400f580 <___vfprintf_internal_r>
 40118e0:	1023883a 	mov	r17,r2
 40118e4:	10000416 	blt	r2,zero,40118f8 <__sbprintf+0x80>
 40118e8:	d9410004 	addi	r5,sp,1024
 40118ec:	9009883a 	mov	r4,r18
 40118f0:	40135540 	call	4013554 <_fflush_r>
 40118f4:	10000d1e 	bne	r2,zero,401192c <__sbprintf+0xb4>
 40118f8:	d881030b 	ldhu	r2,1036(sp)
 40118fc:	1080100c 	andi	r2,r2,64
 4011900:	10000326 	beq	r2,zero,4011910 <__sbprintf+0x98>
 4011904:	8080030b 	ldhu	r2,12(r16)
 4011908:	10801014 	ori	r2,r2,64
 401190c:	8080030d 	sth	r2,12(r16)
 4011910:	8805883a 	mov	r2,r17
 4011914:	dfc11d17 	ldw	ra,1140(sp)
 4011918:	dc811c17 	ldw	r18,1136(sp)
 401191c:	dc411b17 	ldw	r17,1132(sp)
 4011920:	dc011a17 	ldw	r16,1128(sp)
 4011924:	dec11e04 	addi	sp,sp,1144
 4011928:	f800283a 	ret
 401192c:	047fffc4 	movi	r17,-1
 4011930:	003ff106 	br	40118f8 <__alt_data_end+0xfc0118f8>

04011934 <__swsetup_r>:
 4011934:	008100f4 	movhi	r2,1027
 4011938:	defffd04 	addi	sp,sp,-12
 401193c:	10a98804 	addi	r2,r2,-23008
 4011940:	dc400115 	stw	r17,4(sp)
 4011944:	2023883a 	mov	r17,r4
 4011948:	11000017 	ldw	r4,0(r2)
 401194c:	dc000015 	stw	r16,0(sp)
 4011950:	dfc00215 	stw	ra,8(sp)
 4011954:	2821883a 	mov	r16,r5
 4011958:	20000226 	beq	r4,zero,4011964 <__swsetup_r+0x30>
 401195c:	20800e17 	ldw	r2,56(r4)
 4011960:	10003126 	beq	r2,zero,4011a28 <__swsetup_r+0xf4>
 4011964:	8080030b 	ldhu	r2,12(r16)
 4011968:	10c0020c 	andi	r3,r2,8
 401196c:	1009883a 	mov	r4,r2
 4011970:	18000f26 	beq	r3,zero,40119b0 <__swsetup_r+0x7c>
 4011974:	80c00417 	ldw	r3,16(r16)
 4011978:	18001526 	beq	r3,zero,40119d0 <__swsetup_r+0x9c>
 401197c:	1100004c 	andi	r4,r2,1
 4011980:	20001c1e 	bne	r4,zero,40119f4 <__swsetup_r+0xc0>
 4011984:	1080008c 	andi	r2,r2,2
 4011988:	1000291e 	bne	r2,zero,4011a30 <__swsetup_r+0xfc>
 401198c:	80800517 	ldw	r2,20(r16)
 4011990:	80800215 	stw	r2,8(r16)
 4011994:	18001c26 	beq	r3,zero,4011a08 <__swsetup_r+0xd4>
 4011998:	0005883a 	mov	r2,zero
 401199c:	dfc00217 	ldw	ra,8(sp)
 40119a0:	dc400117 	ldw	r17,4(sp)
 40119a4:	dc000017 	ldw	r16,0(sp)
 40119a8:	dec00304 	addi	sp,sp,12
 40119ac:	f800283a 	ret
 40119b0:	2080040c 	andi	r2,r4,16
 40119b4:	10002e26 	beq	r2,zero,4011a70 <__swsetup_r+0x13c>
 40119b8:	2080010c 	andi	r2,r4,4
 40119bc:	10001e1e 	bne	r2,zero,4011a38 <__swsetup_r+0x104>
 40119c0:	80c00417 	ldw	r3,16(r16)
 40119c4:	20800214 	ori	r2,r4,8
 40119c8:	8080030d 	sth	r2,12(r16)
 40119cc:	183feb1e 	bne	r3,zero,401197c <__alt_data_end+0xfc01197c>
 40119d0:	1100a00c 	andi	r4,r2,640
 40119d4:	01408004 	movi	r5,512
 40119d8:	217fe826 	beq	r4,r5,401197c <__alt_data_end+0xfc01197c>
 40119dc:	800b883a 	mov	r5,r16
 40119e0:	8809883a 	mov	r4,r17
 40119e4:	40144f00 	call	40144f0 <__smakebuf_r>
 40119e8:	8080030b 	ldhu	r2,12(r16)
 40119ec:	80c00417 	ldw	r3,16(r16)
 40119f0:	003fe206 	br	401197c <__alt_data_end+0xfc01197c>
 40119f4:	80800517 	ldw	r2,20(r16)
 40119f8:	80000215 	stw	zero,8(r16)
 40119fc:	0085c83a 	sub	r2,zero,r2
 4011a00:	80800615 	stw	r2,24(r16)
 4011a04:	183fe41e 	bne	r3,zero,4011998 <__alt_data_end+0xfc011998>
 4011a08:	80c0030b 	ldhu	r3,12(r16)
 4011a0c:	0005883a 	mov	r2,zero
 4011a10:	1900200c 	andi	r4,r3,128
 4011a14:	203fe126 	beq	r4,zero,401199c <__alt_data_end+0xfc01199c>
 4011a18:	18c01014 	ori	r3,r3,64
 4011a1c:	80c0030d 	sth	r3,12(r16)
 4011a20:	00bfffc4 	movi	r2,-1
 4011a24:	003fdd06 	br	401199c <__alt_data_end+0xfc01199c>
 4011a28:	40139400 	call	4013940 <__sinit>
 4011a2c:	003fcd06 	br	4011964 <__alt_data_end+0xfc011964>
 4011a30:	0005883a 	mov	r2,zero
 4011a34:	003fd606 	br	4011990 <__alt_data_end+0xfc011990>
 4011a38:	81400c17 	ldw	r5,48(r16)
 4011a3c:	28000626 	beq	r5,zero,4011a58 <__swsetup_r+0x124>
 4011a40:	80801004 	addi	r2,r16,64
 4011a44:	28800326 	beq	r5,r2,4011a54 <__swsetup_r+0x120>
 4011a48:	8809883a 	mov	r4,r17
 4011a4c:	4013ab40 	call	4013ab4 <_free_r>
 4011a50:	8100030b 	ldhu	r4,12(r16)
 4011a54:	80000c15 	stw	zero,48(r16)
 4011a58:	80c00417 	ldw	r3,16(r16)
 4011a5c:	00bff6c4 	movi	r2,-37
 4011a60:	1108703a 	and	r4,r2,r4
 4011a64:	80000115 	stw	zero,4(r16)
 4011a68:	80c00015 	stw	r3,0(r16)
 4011a6c:	003fd506 	br	40119c4 <__alt_data_end+0xfc0119c4>
 4011a70:	00800244 	movi	r2,9
 4011a74:	88800015 	stw	r2,0(r17)
 4011a78:	20801014 	ori	r2,r4,64
 4011a7c:	8080030d 	sth	r2,12(r16)
 4011a80:	00bfffc4 	movi	r2,-1
 4011a84:	003fc506 	br	401199c <__alt_data_end+0xfc01199c>

04011a88 <quorem>:
 4011a88:	defff204 	addi	sp,sp,-56
 4011a8c:	ddc00b15 	stw	r23,44(sp)
 4011a90:	20800417 	ldw	r2,16(r4)
 4011a94:	2dc00417 	ldw	r23,16(r5)
 4011a98:	dfc00d15 	stw	ra,52(sp)
 4011a9c:	df000c15 	stw	fp,48(sp)
 4011aa0:	dd800a15 	stw	r22,40(sp)
 4011aa4:	dd400915 	stw	r21,36(sp)
 4011aa8:	dd000815 	stw	r20,32(sp)
 4011aac:	dcc00715 	stw	r19,28(sp)
 4011ab0:	dc800615 	stw	r18,24(sp)
 4011ab4:	dc400515 	stw	r17,20(sp)
 4011ab8:	dc000415 	stw	r16,16(sp)
 4011abc:	15c07a16 	blt	r2,r23,4011ca8 <quorem+0x220>
 4011ac0:	bdffffc4 	addi	r23,r23,-1
 4011ac4:	bde9883a 	add	r20,r23,r23
 4011ac8:	28c00504 	addi	r3,r5,20
 4011acc:	a529883a 	add	r20,r20,r20
 4011ad0:	1d39883a 	add	fp,r3,r20
 4011ad4:	24c00504 	addi	r19,r4,20
 4011ad8:	d9400215 	stw	r5,8(sp)
 4011adc:	9d29883a 	add	r20,r19,r20
 4011ae0:	e1400017 	ldw	r5,0(fp)
 4011ae4:	d9000015 	stw	r4,0(sp)
 4011ae8:	a1000017 	ldw	r4,0(r20)
 4011aec:	29400044 	addi	r5,r5,1
 4011af0:	d8c00115 	stw	r3,4(sp)
 4011af4:	dd000315 	stw	r20,12(sp)
 4011af8:	400d2ac0 	call	400d2ac <__udivsi3>
 4011afc:	1025883a 	mov	r18,r2
 4011b00:	10003026 	beq	r2,zero,4011bc4 <quorem+0x13c>
 4011b04:	dc400117 	ldw	r17,4(sp)
 4011b08:	9829883a 	mov	r20,r19
 4011b0c:	002d883a 	mov	r22,zero
 4011b10:	0021883a 	mov	r16,zero
 4011b14:	8d400017 	ldw	r21,0(r17)
 4011b18:	900b883a 	mov	r5,r18
 4011b1c:	8c400104 	addi	r17,r17,4
 4011b20:	a93fffcc 	andi	r4,r21,65535
 4011b24:	400d3680 	call	400d368 <__mulsi3>
 4011b28:	a808d43a 	srli	r4,r21,16
 4011b2c:	900b883a 	mov	r5,r18
 4011b30:	15ad883a 	add	r22,r2,r22
 4011b34:	400d3680 	call	400d368 <__mulsi3>
 4011b38:	a1000017 	ldw	r4,0(r20)
 4011b3c:	b00cd43a 	srli	r6,r22,16
 4011b40:	b0ffffcc 	andi	r3,r22,65535
 4011b44:	217fffcc 	andi	r5,r4,65535
 4011b48:	2c21883a 	add	r16,r5,r16
 4011b4c:	80c7c83a 	sub	r3,r16,r3
 4011b50:	2008d43a 	srli	r4,r4,16
 4011b54:	1185883a 	add	r2,r2,r6
 4011b58:	1821d43a 	srai	r16,r3,16
 4011b5c:	117fffcc 	andi	r5,r2,65535
 4011b60:	2149c83a 	sub	r4,r4,r5
 4011b64:	2421883a 	add	r16,r4,r16
 4011b68:	8008943a 	slli	r4,r16,16
 4011b6c:	18ffffcc 	andi	r3,r3,65535
 4011b70:	102cd43a 	srli	r22,r2,16
 4011b74:	20c8b03a 	or	r4,r4,r3
 4011b78:	a1000015 	stw	r4,0(r20)
 4011b7c:	8021d43a 	srai	r16,r16,16
 4011b80:	a5000104 	addi	r20,r20,4
 4011b84:	e47fe32e 	bgeu	fp,r17,4011b14 <__alt_data_end+0xfc011b14>
 4011b88:	d8c00317 	ldw	r3,12(sp)
 4011b8c:	18800017 	ldw	r2,0(r3)
 4011b90:	10000c1e 	bne	r2,zero,4011bc4 <quorem+0x13c>
 4011b94:	18bfff04 	addi	r2,r3,-4
 4011b98:	9880082e 	bgeu	r19,r2,4011bbc <quorem+0x134>
 4011b9c:	18ffff17 	ldw	r3,-4(r3)
 4011ba0:	18000326 	beq	r3,zero,4011bb0 <quorem+0x128>
 4011ba4:	00000506 	br	4011bbc <quorem+0x134>
 4011ba8:	10c00017 	ldw	r3,0(r2)
 4011bac:	1800031e 	bne	r3,zero,4011bbc <quorem+0x134>
 4011bb0:	10bfff04 	addi	r2,r2,-4
 4011bb4:	bdffffc4 	addi	r23,r23,-1
 4011bb8:	98bffb36 	bltu	r19,r2,4011ba8 <__alt_data_end+0xfc011ba8>
 4011bbc:	d8c00017 	ldw	r3,0(sp)
 4011bc0:	1dc00415 	stw	r23,16(r3)
 4011bc4:	d9400217 	ldw	r5,8(sp)
 4011bc8:	d9000017 	ldw	r4,0(sp)
 4011bcc:	40152700 	call	4015270 <__mcmp>
 4011bd0:	10002816 	blt	r2,zero,4011c74 <quorem+0x1ec>
 4011bd4:	dc400117 	ldw	r17,4(sp)
 4011bd8:	94800044 	addi	r18,r18,1
 4011bdc:	980d883a 	mov	r6,r19
 4011be0:	0007883a 	mov	r3,zero
 4011be4:	31000017 	ldw	r4,0(r6)
 4011be8:	89400017 	ldw	r5,0(r17)
 4011bec:	31800104 	addi	r6,r6,4
 4011bf0:	20bfffcc 	andi	r2,r4,65535
 4011bf4:	10c7883a 	add	r3,r2,r3
 4011bf8:	28bfffcc 	andi	r2,r5,65535
 4011bfc:	1885c83a 	sub	r2,r3,r2
 4011c00:	280ad43a 	srli	r5,r5,16
 4011c04:	2008d43a 	srli	r4,r4,16
 4011c08:	1007d43a 	srai	r3,r2,16
 4011c0c:	10bfffcc 	andi	r2,r2,65535
 4011c10:	2149c83a 	sub	r4,r4,r5
 4011c14:	20c9883a 	add	r4,r4,r3
 4011c18:	200a943a 	slli	r5,r4,16
 4011c1c:	8c400104 	addi	r17,r17,4
 4011c20:	2007d43a 	srai	r3,r4,16
 4011c24:	2884b03a 	or	r2,r5,r2
 4011c28:	30bfff15 	stw	r2,-4(r6)
 4011c2c:	e47fed2e 	bgeu	fp,r17,4011be4 <__alt_data_end+0xfc011be4>
 4011c30:	bdc5883a 	add	r2,r23,r23
 4011c34:	1085883a 	add	r2,r2,r2
 4011c38:	9887883a 	add	r3,r19,r2
 4011c3c:	18800017 	ldw	r2,0(r3)
 4011c40:	10000c1e 	bne	r2,zero,4011c74 <quorem+0x1ec>
 4011c44:	18bfff04 	addi	r2,r3,-4
 4011c48:	9880082e 	bgeu	r19,r2,4011c6c <quorem+0x1e4>
 4011c4c:	18ffff17 	ldw	r3,-4(r3)
 4011c50:	18000326 	beq	r3,zero,4011c60 <quorem+0x1d8>
 4011c54:	00000506 	br	4011c6c <quorem+0x1e4>
 4011c58:	10c00017 	ldw	r3,0(r2)
 4011c5c:	1800031e 	bne	r3,zero,4011c6c <quorem+0x1e4>
 4011c60:	10bfff04 	addi	r2,r2,-4
 4011c64:	bdffffc4 	addi	r23,r23,-1
 4011c68:	98bffb36 	bltu	r19,r2,4011c58 <__alt_data_end+0xfc011c58>
 4011c6c:	d8c00017 	ldw	r3,0(sp)
 4011c70:	1dc00415 	stw	r23,16(r3)
 4011c74:	9005883a 	mov	r2,r18
 4011c78:	dfc00d17 	ldw	ra,52(sp)
 4011c7c:	df000c17 	ldw	fp,48(sp)
 4011c80:	ddc00b17 	ldw	r23,44(sp)
 4011c84:	dd800a17 	ldw	r22,40(sp)
 4011c88:	dd400917 	ldw	r21,36(sp)
 4011c8c:	dd000817 	ldw	r20,32(sp)
 4011c90:	dcc00717 	ldw	r19,28(sp)
 4011c94:	dc800617 	ldw	r18,24(sp)
 4011c98:	dc400517 	ldw	r17,20(sp)
 4011c9c:	dc000417 	ldw	r16,16(sp)
 4011ca0:	dec00e04 	addi	sp,sp,56
 4011ca4:	f800283a 	ret
 4011ca8:	0005883a 	mov	r2,zero
 4011cac:	003ff206 	br	4011c78 <__alt_data_end+0xfc011c78>

04011cb0 <_dtoa_r>:
 4011cb0:	20801017 	ldw	r2,64(r4)
 4011cb4:	deffde04 	addi	sp,sp,-136
 4011cb8:	df002015 	stw	fp,128(sp)
 4011cbc:	dcc01b15 	stw	r19,108(sp)
 4011cc0:	dc801a15 	stw	r18,104(sp)
 4011cc4:	dc401915 	stw	r17,100(sp)
 4011cc8:	dc001815 	stw	r16,96(sp)
 4011ccc:	dfc02115 	stw	ra,132(sp)
 4011cd0:	ddc01f15 	stw	r23,124(sp)
 4011cd4:	dd801e15 	stw	r22,120(sp)
 4011cd8:	dd401d15 	stw	r21,116(sp)
 4011cdc:	dd001c15 	stw	r20,112(sp)
 4011ce0:	d9c00315 	stw	r7,12(sp)
 4011ce4:	2039883a 	mov	fp,r4
 4011ce8:	3023883a 	mov	r17,r6
 4011cec:	2825883a 	mov	r18,r5
 4011cf0:	dc002417 	ldw	r16,144(sp)
 4011cf4:	3027883a 	mov	r19,r6
 4011cf8:	10000826 	beq	r2,zero,4011d1c <_dtoa_r+0x6c>
 4011cfc:	21801117 	ldw	r6,68(r4)
 4011d00:	00c00044 	movi	r3,1
 4011d04:	100b883a 	mov	r5,r2
 4011d08:	1986983a 	sll	r3,r3,r6
 4011d0c:	11800115 	stw	r6,4(r2)
 4011d10:	10c00215 	stw	r3,8(r2)
 4011d14:	40149940 	call	4014994 <_Bfree>
 4011d18:	e0001015 	stw	zero,64(fp)
 4011d1c:	88002e16 	blt	r17,zero,4011dd8 <_dtoa_r+0x128>
 4011d20:	80000015 	stw	zero,0(r16)
 4011d24:	889ffc2c 	andhi	r2,r17,32752
 4011d28:	00dffc34 	movhi	r3,32752
 4011d2c:	10c01c26 	beq	r2,r3,4011da0 <_dtoa_r+0xf0>
 4011d30:	000d883a 	mov	r6,zero
 4011d34:	000f883a 	mov	r7,zero
 4011d38:	9009883a 	mov	r4,r18
 4011d3c:	980b883a 	mov	r5,r19
 4011d40:	401a0a00 	call	401a0a0 <__eqdf2>
 4011d44:	10002b1e 	bne	r2,zero,4011df4 <_dtoa_r+0x144>
 4011d48:	d9c02317 	ldw	r7,140(sp)
 4011d4c:	00800044 	movi	r2,1
 4011d50:	38800015 	stw	r2,0(r7)
 4011d54:	d8802517 	ldw	r2,148(sp)
 4011d58:	10019e26 	beq	r2,zero,40123d4 <_dtoa_r+0x724>
 4011d5c:	d8c02517 	ldw	r3,148(sp)
 4011d60:	008100b4 	movhi	r2,1026
 4011d64:	109ca944 	addi	r2,r2,29349
 4011d68:	18800015 	stw	r2,0(r3)
 4011d6c:	10bfffc4 	addi	r2,r2,-1
 4011d70:	dfc02117 	ldw	ra,132(sp)
 4011d74:	df002017 	ldw	fp,128(sp)
 4011d78:	ddc01f17 	ldw	r23,124(sp)
 4011d7c:	dd801e17 	ldw	r22,120(sp)
 4011d80:	dd401d17 	ldw	r21,116(sp)
 4011d84:	dd001c17 	ldw	r20,112(sp)
 4011d88:	dcc01b17 	ldw	r19,108(sp)
 4011d8c:	dc801a17 	ldw	r18,104(sp)
 4011d90:	dc401917 	ldw	r17,100(sp)
 4011d94:	dc001817 	ldw	r16,96(sp)
 4011d98:	dec02204 	addi	sp,sp,136
 4011d9c:	f800283a 	ret
 4011da0:	d8c02317 	ldw	r3,140(sp)
 4011da4:	0089c3c4 	movi	r2,9999
 4011da8:	18800015 	stw	r2,0(r3)
 4011dac:	90017726 	beq	r18,zero,401238c <_dtoa_r+0x6dc>
 4011db0:	008100b4 	movhi	r2,1026
 4011db4:	109cb504 	addi	r2,r2,29396
 4011db8:	d9002517 	ldw	r4,148(sp)
 4011dbc:	203fec26 	beq	r4,zero,4011d70 <__alt_data_end+0xfc011d70>
 4011dc0:	10c000c7 	ldb	r3,3(r2)
 4011dc4:	1801781e 	bne	r3,zero,40123a8 <_dtoa_r+0x6f8>
 4011dc8:	10c000c4 	addi	r3,r2,3
 4011dcc:	d9802517 	ldw	r6,148(sp)
 4011dd0:	30c00015 	stw	r3,0(r6)
 4011dd4:	003fe606 	br	4011d70 <__alt_data_end+0xfc011d70>
 4011dd8:	04e00034 	movhi	r19,32768
 4011ddc:	9cffffc4 	addi	r19,r19,-1
 4011de0:	00800044 	movi	r2,1
 4011de4:	8ce6703a 	and	r19,r17,r19
 4011de8:	80800015 	stw	r2,0(r16)
 4011dec:	9823883a 	mov	r17,r19
 4011df0:	003fcc06 	br	4011d24 <__alt_data_end+0xfc011d24>
 4011df4:	d8800204 	addi	r2,sp,8
 4011df8:	d8800015 	stw	r2,0(sp)
 4011dfc:	d9c00104 	addi	r7,sp,4
 4011e00:	900b883a 	mov	r5,r18
 4011e04:	980d883a 	mov	r6,r19
 4011e08:	e009883a 	mov	r4,fp
 4011e0c:	8820d53a 	srli	r16,r17,20
 4011e10:	401563c0 	call	401563c <__d2b>
 4011e14:	d8800915 	stw	r2,36(sp)
 4011e18:	8001651e 	bne	r16,zero,40123b0 <_dtoa_r+0x700>
 4011e1c:	dd800217 	ldw	r22,8(sp)
 4011e20:	dc000117 	ldw	r16,4(sp)
 4011e24:	00800804 	movi	r2,32
 4011e28:	b421883a 	add	r16,r22,r16
 4011e2c:	80c10c84 	addi	r3,r16,1074
 4011e30:	10c2d10e 	bge	r2,r3,4012978 <_dtoa_r+0xcc8>
 4011e34:	00801004 	movi	r2,64
 4011e38:	81010484 	addi	r4,r16,1042
 4011e3c:	10c7c83a 	sub	r3,r2,r3
 4011e40:	9108d83a 	srl	r4,r18,r4
 4011e44:	88e2983a 	sll	r17,r17,r3
 4011e48:	2448b03a 	or	r4,r4,r17
 4011e4c:	401b5bc0 	call	401b5bc <__floatunsidf>
 4011e50:	017f8434 	movhi	r5,65040
 4011e54:	01800044 	movi	r6,1
 4011e58:	1009883a 	mov	r4,r2
 4011e5c:	194b883a 	add	r5,r3,r5
 4011e60:	843fffc4 	addi	r16,r16,-1
 4011e64:	d9801115 	stw	r6,68(sp)
 4011e68:	000d883a 	mov	r6,zero
 4011e6c:	01cffe34 	movhi	r7,16376
 4011e70:	401ab640 	call	401ab64 <__subdf3>
 4011e74:	0198dbf4 	movhi	r6,25455
 4011e78:	01cff4f4 	movhi	r7,16339
 4011e7c:	3190d844 	addi	r6,r6,17249
 4011e80:	39e1e9c4 	addi	r7,r7,-30809
 4011e84:	1009883a 	mov	r4,r2
 4011e88:	180b883a 	mov	r5,r3
 4011e8c:	401a2f80 	call	401a2f8 <__muldf3>
 4011e90:	01a2d874 	movhi	r6,35681
 4011e94:	01cff1f4 	movhi	r7,16327
 4011e98:	31b22cc4 	addi	r6,r6,-14157
 4011e9c:	39e28a04 	addi	r7,r7,-30168
 4011ea0:	180b883a 	mov	r5,r3
 4011ea4:	1009883a 	mov	r4,r2
 4011ea8:	4018e240 	call	4018e24 <__adddf3>
 4011eac:	8009883a 	mov	r4,r16
 4011eb0:	1029883a 	mov	r20,r2
 4011eb4:	1823883a 	mov	r17,r3
 4011eb8:	401b4e00 	call	401b4e0 <__floatsidf>
 4011ebc:	019427f4 	movhi	r6,20639
 4011ec0:	01cff4f4 	movhi	r7,16339
 4011ec4:	319e7ec4 	addi	r6,r6,31227
 4011ec8:	39d104c4 	addi	r7,r7,17427
 4011ecc:	1009883a 	mov	r4,r2
 4011ed0:	180b883a 	mov	r5,r3
 4011ed4:	401a2f80 	call	401a2f8 <__muldf3>
 4011ed8:	100d883a 	mov	r6,r2
 4011edc:	180f883a 	mov	r7,r3
 4011ee0:	a009883a 	mov	r4,r20
 4011ee4:	880b883a 	mov	r5,r17
 4011ee8:	4018e240 	call	4018e24 <__adddf3>
 4011eec:	1009883a 	mov	r4,r2
 4011ef0:	180b883a 	mov	r5,r3
 4011ef4:	1029883a 	mov	r20,r2
 4011ef8:	1823883a 	mov	r17,r3
 4011efc:	401b4600 	call	401b460 <__fixdfsi>
 4011f00:	000d883a 	mov	r6,zero
 4011f04:	000f883a 	mov	r7,zero
 4011f08:	a009883a 	mov	r4,r20
 4011f0c:	880b883a 	mov	r5,r17
 4011f10:	d8800515 	stw	r2,20(sp)
 4011f14:	401a2040 	call	401a204 <__ledf2>
 4011f18:	10028716 	blt	r2,zero,4012938 <_dtoa_r+0xc88>
 4011f1c:	d8c00517 	ldw	r3,20(sp)
 4011f20:	00800584 	movi	r2,22
 4011f24:	10c27536 	bltu	r2,r3,40128fc <_dtoa_r+0xc4c>
 4011f28:	180490fa 	slli	r2,r3,3
 4011f2c:	00c100b4 	movhi	r3,1026
 4011f30:	18dcd004 	addi	r3,r3,29504
 4011f34:	1885883a 	add	r2,r3,r2
 4011f38:	11000017 	ldw	r4,0(r2)
 4011f3c:	11400117 	ldw	r5,4(r2)
 4011f40:	900d883a 	mov	r6,r18
 4011f44:	980f883a 	mov	r7,r19
 4011f48:	401a1280 	call	401a128 <__gedf2>
 4011f4c:	00828d0e 	bge	zero,r2,4012984 <_dtoa_r+0xcd4>
 4011f50:	d9000517 	ldw	r4,20(sp)
 4011f54:	d8000e15 	stw	zero,56(sp)
 4011f58:	213fffc4 	addi	r4,r4,-1
 4011f5c:	d9000515 	stw	r4,20(sp)
 4011f60:	b42dc83a 	sub	r22,r22,r16
 4011f64:	b5bfffc4 	addi	r22,r22,-1
 4011f68:	b0026f16 	blt	r22,zero,4012928 <_dtoa_r+0xc78>
 4011f6c:	d8000815 	stw	zero,32(sp)
 4011f70:	d9c00517 	ldw	r7,20(sp)
 4011f74:	38026416 	blt	r7,zero,4012908 <_dtoa_r+0xc58>
 4011f78:	b1ed883a 	add	r22,r22,r7
 4011f7c:	d9c00d15 	stw	r7,52(sp)
 4011f80:	d8000a15 	stw	zero,40(sp)
 4011f84:	d9800317 	ldw	r6,12(sp)
 4011f88:	00800244 	movi	r2,9
 4011f8c:	11811436 	bltu	r2,r6,40123e0 <_dtoa_r+0x730>
 4011f90:	00800144 	movi	r2,5
 4011f94:	1184e10e 	bge	r2,r6,401331c <_dtoa_r+0x166c>
 4011f98:	31bfff04 	addi	r6,r6,-4
 4011f9c:	d9800315 	stw	r6,12(sp)
 4011fa0:	0023883a 	mov	r17,zero
 4011fa4:	d9800317 	ldw	r6,12(sp)
 4011fa8:	008000c4 	movi	r2,3
 4011fac:	30836726 	beq	r6,r2,4012d4c <_dtoa_r+0x109c>
 4011fb0:	1183410e 	bge	r2,r6,4012cb8 <_dtoa_r+0x1008>
 4011fb4:	d9c00317 	ldw	r7,12(sp)
 4011fb8:	00800104 	movi	r2,4
 4011fbc:	38827c26 	beq	r7,r2,40129b0 <_dtoa_r+0xd00>
 4011fc0:	00800144 	movi	r2,5
 4011fc4:	3884c41e 	bne	r7,r2,40132d8 <_dtoa_r+0x1628>
 4011fc8:	00800044 	movi	r2,1
 4011fcc:	d8800b15 	stw	r2,44(sp)
 4011fd0:	d8c00517 	ldw	r3,20(sp)
 4011fd4:	d9002217 	ldw	r4,136(sp)
 4011fd8:	1907883a 	add	r3,r3,r4
 4011fdc:	19800044 	addi	r6,r3,1
 4011fe0:	d8c00c15 	stw	r3,48(sp)
 4011fe4:	d9800615 	stw	r6,24(sp)
 4011fe8:	0183a40e 	bge	zero,r6,4012e7c <_dtoa_r+0x11cc>
 4011fec:	d9800617 	ldw	r6,24(sp)
 4011ff0:	3021883a 	mov	r16,r6
 4011ff4:	e0001115 	stw	zero,68(fp)
 4011ff8:	008005c4 	movi	r2,23
 4011ffc:	1184c92e 	bgeu	r2,r6,4013324 <_dtoa_r+0x1674>
 4012000:	00c00044 	movi	r3,1
 4012004:	00800104 	movi	r2,4
 4012008:	1085883a 	add	r2,r2,r2
 401200c:	11000504 	addi	r4,r2,20
 4012010:	180b883a 	mov	r5,r3
 4012014:	18c00044 	addi	r3,r3,1
 4012018:	313ffb2e 	bgeu	r6,r4,4012008 <__alt_data_end+0xfc012008>
 401201c:	e1401115 	stw	r5,68(fp)
 4012020:	e009883a 	mov	r4,fp
 4012024:	40148ec0 	call	40148ec <_Balloc>
 4012028:	d8800715 	stw	r2,28(sp)
 401202c:	e0801015 	stw	r2,64(fp)
 4012030:	00800384 	movi	r2,14
 4012034:	1400f736 	bltu	r2,r16,4012414 <_dtoa_r+0x764>
 4012038:	8800f626 	beq	r17,zero,4012414 <_dtoa_r+0x764>
 401203c:	d9c00517 	ldw	r7,20(sp)
 4012040:	01c39a0e 	bge	zero,r7,4012eac <_dtoa_r+0x11fc>
 4012044:	388003cc 	andi	r2,r7,15
 4012048:	100490fa 	slli	r2,r2,3
 401204c:	382bd13a 	srai	r21,r7,4
 4012050:	00c100b4 	movhi	r3,1026
 4012054:	18dcd004 	addi	r3,r3,29504
 4012058:	1885883a 	add	r2,r3,r2
 401205c:	a8c0040c 	andi	r3,r21,16
 4012060:	12400017 	ldw	r9,0(r2)
 4012064:	12000117 	ldw	r8,4(r2)
 4012068:	18037926 	beq	r3,zero,4012e50 <_dtoa_r+0x11a0>
 401206c:	008100b4 	movhi	r2,1026
 4012070:	109cc604 	addi	r2,r2,29464
 4012074:	11800817 	ldw	r6,32(r2)
 4012078:	11c00917 	ldw	r7,36(r2)
 401207c:	9009883a 	mov	r4,r18
 4012080:	980b883a 	mov	r5,r19
 4012084:	da001715 	stw	r8,92(sp)
 4012088:	da401615 	stw	r9,88(sp)
 401208c:	40196d00 	call	40196d0 <__divdf3>
 4012090:	da001717 	ldw	r8,92(sp)
 4012094:	da401617 	ldw	r9,88(sp)
 4012098:	ad4003cc 	andi	r21,r21,15
 401209c:	040000c4 	movi	r16,3
 40120a0:	1023883a 	mov	r17,r2
 40120a4:	1829883a 	mov	r20,r3
 40120a8:	a8001126 	beq	r21,zero,40120f0 <_dtoa_r+0x440>
 40120ac:	05c100b4 	movhi	r23,1026
 40120b0:	bddcc604 	addi	r23,r23,29464
 40120b4:	4805883a 	mov	r2,r9
 40120b8:	4007883a 	mov	r3,r8
 40120bc:	a980004c 	andi	r6,r21,1
 40120c0:	1009883a 	mov	r4,r2
 40120c4:	a82bd07a 	srai	r21,r21,1
 40120c8:	180b883a 	mov	r5,r3
 40120cc:	30000426 	beq	r6,zero,40120e0 <_dtoa_r+0x430>
 40120d0:	b9800017 	ldw	r6,0(r23)
 40120d4:	b9c00117 	ldw	r7,4(r23)
 40120d8:	84000044 	addi	r16,r16,1
 40120dc:	401a2f80 	call	401a2f8 <__muldf3>
 40120e0:	bdc00204 	addi	r23,r23,8
 40120e4:	a83ff51e 	bne	r21,zero,40120bc <__alt_data_end+0xfc0120bc>
 40120e8:	1013883a 	mov	r9,r2
 40120ec:	1811883a 	mov	r8,r3
 40120f0:	480d883a 	mov	r6,r9
 40120f4:	400f883a 	mov	r7,r8
 40120f8:	8809883a 	mov	r4,r17
 40120fc:	a00b883a 	mov	r5,r20
 4012100:	40196d00 	call	40196d0 <__divdf3>
 4012104:	d8800f15 	stw	r2,60(sp)
 4012108:	d8c01015 	stw	r3,64(sp)
 401210c:	d8c00e17 	ldw	r3,56(sp)
 4012110:	18000626 	beq	r3,zero,401212c <_dtoa_r+0x47c>
 4012114:	d9000f17 	ldw	r4,60(sp)
 4012118:	d9401017 	ldw	r5,64(sp)
 401211c:	000d883a 	mov	r6,zero
 4012120:	01cffc34 	movhi	r7,16368
 4012124:	401a2040 	call	401a204 <__ledf2>
 4012128:	10040b16 	blt	r2,zero,4013158 <_dtoa_r+0x14a8>
 401212c:	8009883a 	mov	r4,r16
 4012130:	401b4e00 	call	401b4e0 <__floatsidf>
 4012134:	d9800f17 	ldw	r6,60(sp)
 4012138:	d9c01017 	ldw	r7,64(sp)
 401213c:	1009883a 	mov	r4,r2
 4012140:	180b883a 	mov	r5,r3
 4012144:	401a2f80 	call	401a2f8 <__muldf3>
 4012148:	000d883a 	mov	r6,zero
 401214c:	01d00734 	movhi	r7,16412
 4012150:	1009883a 	mov	r4,r2
 4012154:	180b883a 	mov	r5,r3
 4012158:	4018e240 	call	4018e24 <__adddf3>
 401215c:	1021883a 	mov	r16,r2
 4012160:	d8800617 	ldw	r2,24(sp)
 4012164:	047f3034 	movhi	r17,64704
 4012168:	1c63883a 	add	r17,r3,r17
 401216c:	10031826 	beq	r2,zero,4012dd0 <_dtoa_r+0x1120>
 4012170:	d8c00517 	ldw	r3,20(sp)
 4012174:	db000617 	ldw	r12,24(sp)
 4012178:	d8c01315 	stw	r3,76(sp)
 401217c:	d9000b17 	ldw	r4,44(sp)
 4012180:	20038f26 	beq	r4,zero,4012fc0 <_dtoa_r+0x1310>
 4012184:	60bfffc4 	addi	r2,r12,-1
 4012188:	100490fa 	slli	r2,r2,3
 401218c:	00c100b4 	movhi	r3,1026
 4012190:	18dcd004 	addi	r3,r3,29504
 4012194:	1885883a 	add	r2,r3,r2
 4012198:	11800017 	ldw	r6,0(r2)
 401219c:	11c00117 	ldw	r7,4(r2)
 40121a0:	d8800717 	ldw	r2,28(sp)
 40121a4:	0009883a 	mov	r4,zero
 40121a8:	014ff834 	movhi	r5,16352
 40121ac:	db001615 	stw	r12,88(sp)
 40121b0:	15c00044 	addi	r23,r2,1
 40121b4:	40196d00 	call	40196d0 <__divdf3>
 40121b8:	800d883a 	mov	r6,r16
 40121bc:	880f883a 	mov	r7,r17
 40121c0:	1009883a 	mov	r4,r2
 40121c4:	180b883a 	mov	r5,r3
 40121c8:	401ab640 	call	401ab64 <__subdf3>
 40121cc:	d9401017 	ldw	r5,64(sp)
 40121d0:	d9000f17 	ldw	r4,60(sp)
 40121d4:	102b883a 	mov	r21,r2
 40121d8:	d8c01215 	stw	r3,72(sp)
 40121dc:	401b4600 	call	401b460 <__fixdfsi>
 40121e0:	1009883a 	mov	r4,r2
 40121e4:	1029883a 	mov	r20,r2
 40121e8:	401b4e00 	call	401b4e0 <__floatsidf>
 40121ec:	d9000f17 	ldw	r4,60(sp)
 40121f0:	d9401017 	ldw	r5,64(sp)
 40121f4:	100d883a 	mov	r6,r2
 40121f8:	180f883a 	mov	r7,r3
 40121fc:	401ab640 	call	401ab64 <__subdf3>
 4012200:	1823883a 	mov	r17,r3
 4012204:	d8c00717 	ldw	r3,28(sp)
 4012208:	d9401217 	ldw	r5,72(sp)
 401220c:	a2000c04 	addi	r8,r20,48
 4012210:	1021883a 	mov	r16,r2
 4012214:	1a000005 	stb	r8,0(r3)
 4012218:	800d883a 	mov	r6,r16
 401221c:	880f883a 	mov	r7,r17
 4012220:	a809883a 	mov	r4,r21
 4012224:	4029883a 	mov	r20,r8
 4012228:	401a1280 	call	401a128 <__gedf2>
 401222c:	00841d16 	blt	zero,r2,40132a4 <_dtoa_r+0x15f4>
 4012230:	800d883a 	mov	r6,r16
 4012234:	880f883a 	mov	r7,r17
 4012238:	0009883a 	mov	r4,zero
 401223c:	014ffc34 	movhi	r5,16368
 4012240:	401ab640 	call	401ab64 <__subdf3>
 4012244:	d9401217 	ldw	r5,72(sp)
 4012248:	100d883a 	mov	r6,r2
 401224c:	180f883a 	mov	r7,r3
 4012250:	a809883a 	mov	r4,r21
 4012254:	401a1280 	call	401a128 <__gedf2>
 4012258:	db001617 	ldw	r12,88(sp)
 401225c:	00840e16 	blt	zero,r2,4013298 <_dtoa_r+0x15e8>
 4012260:	00800044 	movi	r2,1
 4012264:	13006b0e 	bge	r2,r12,4012414 <_dtoa_r+0x764>
 4012268:	d9000717 	ldw	r4,28(sp)
 401226c:	dd800f15 	stw	r22,60(sp)
 4012270:	dcc01015 	stw	r19,64(sp)
 4012274:	2319883a 	add	r12,r4,r12
 4012278:	dcc01217 	ldw	r19,72(sp)
 401227c:	602d883a 	mov	r22,r12
 4012280:	dc801215 	stw	r18,72(sp)
 4012284:	b825883a 	mov	r18,r23
 4012288:	00000906 	br	40122b0 <_dtoa_r+0x600>
 401228c:	401ab640 	call	401ab64 <__subdf3>
 4012290:	a80d883a 	mov	r6,r21
 4012294:	980f883a 	mov	r7,r19
 4012298:	1009883a 	mov	r4,r2
 401229c:	180b883a 	mov	r5,r3
 40122a0:	401a2040 	call	401a204 <__ledf2>
 40122a4:	1003e816 	blt	r2,zero,4013248 <_dtoa_r+0x1598>
 40122a8:	b825883a 	mov	r18,r23
 40122ac:	bd83e926 	beq	r23,r22,4013254 <_dtoa_r+0x15a4>
 40122b0:	a809883a 	mov	r4,r21
 40122b4:	980b883a 	mov	r5,r19
 40122b8:	000d883a 	mov	r6,zero
 40122bc:	01d00934 	movhi	r7,16420
 40122c0:	401a2f80 	call	401a2f8 <__muldf3>
 40122c4:	000d883a 	mov	r6,zero
 40122c8:	01d00934 	movhi	r7,16420
 40122cc:	8009883a 	mov	r4,r16
 40122d0:	880b883a 	mov	r5,r17
 40122d4:	102b883a 	mov	r21,r2
 40122d8:	1827883a 	mov	r19,r3
 40122dc:	401a2f80 	call	401a2f8 <__muldf3>
 40122e0:	180b883a 	mov	r5,r3
 40122e4:	1009883a 	mov	r4,r2
 40122e8:	1821883a 	mov	r16,r3
 40122ec:	1023883a 	mov	r17,r2
 40122f0:	401b4600 	call	401b460 <__fixdfsi>
 40122f4:	1009883a 	mov	r4,r2
 40122f8:	1029883a 	mov	r20,r2
 40122fc:	401b4e00 	call	401b4e0 <__floatsidf>
 4012300:	8809883a 	mov	r4,r17
 4012304:	800b883a 	mov	r5,r16
 4012308:	100d883a 	mov	r6,r2
 401230c:	180f883a 	mov	r7,r3
 4012310:	401ab640 	call	401ab64 <__subdf3>
 4012314:	a5000c04 	addi	r20,r20,48
 4012318:	a80d883a 	mov	r6,r21
 401231c:	980f883a 	mov	r7,r19
 4012320:	1009883a 	mov	r4,r2
 4012324:	180b883a 	mov	r5,r3
 4012328:	95000005 	stb	r20,0(r18)
 401232c:	1021883a 	mov	r16,r2
 4012330:	1823883a 	mov	r17,r3
 4012334:	401a2040 	call	401a204 <__ledf2>
 4012338:	bdc00044 	addi	r23,r23,1
 401233c:	800d883a 	mov	r6,r16
 4012340:	880f883a 	mov	r7,r17
 4012344:	0009883a 	mov	r4,zero
 4012348:	014ffc34 	movhi	r5,16368
 401234c:	103fcf0e 	bge	r2,zero,401228c <__alt_data_end+0xfc01228c>
 4012350:	d8c01317 	ldw	r3,76(sp)
 4012354:	d8c00515 	stw	r3,20(sp)
 4012358:	d9400917 	ldw	r5,36(sp)
 401235c:	e009883a 	mov	r4,fp
 4012360:	40149940 	call	4014994 <_Bfree>
 4012364:	d9000517 	ldw	r4,20(sp)
 4012368:	d9802317 	ldw	r6,140(sp)
 401236c:	d9c02517 	ldw	r7,148(sp)
 4012370:	b8000005 	stb	zero,0(r23)
 4012374:	20800044 	addi	r2,r4,1
 4012378:	30800015 	stw	r2,0(r6)
 401237c:	3802aa26 	beq	r7,zero,4012e28 <_dtoa_r+0x1178>
 4012380:	3dc00015 	stw	r23,0(r7)
 4012384:	d8800717 	ldw	r2,28(sp)
 4012388:	003e7906 	br	4011d70 <__alt_data_end+0xfc011d70>
 401238c:	00800434 	movhi	r2,16
 4012390:	10bfffc4 	addi	r2,r2,-1
 4012394:	88a2703a 	and	r17,r17,r2
 4012398:	883e851e 	bne	r17,zero,4011db0 <__alt_data_end+0xfc011db0>
 401239c:	008100b4 	movhi	r2,1026
 40123a0:	109cb204 	addi	r2,r2,29384
 40123a4:	003e8406 	br	4011db8 <__alt_data_end+0xfc011db8>
 40123a8:	10c00204 	addi	r3,r2,8
 40123ac:	003e8706 	br	4011dcc <__alt_data_end+0xfc011dcc>
 40123b0:	01400434 	movhi	r5,16
 40123b4:	297fffc4 	addi	r5,r5,-1
 40123b8:	994a703a 	and	r5,r19,r5
 40123bc:	9009883a 	mov	r4,r18
 40123c0:	843f0044 	addi	r16,r16,-1023
 40123c4:	294ffc34 	orhi	r5,r5,16368
 40123c8:	dd800217 	ldw	r22,8(sp)
 40123cc:	d8001115 	stw	zero,68(sp)
 40123d0:	003ea506 	br	4011e68 <__alt_data_end+0xfc011e68>
 40123d4:	008100b4 	movhi	r2,1026
 40123d8:	109ca904 	addi	r2,r2,29348
 40123dc:	003e6406 	br	4011d70 <__alt_data_end+0xfc011d70>
 40123e0:	e0001115 	stw	zero,68(fp)
 40123e4:	000b883a 	mov	r5,zero
 40123e8:	e009883a 	mov	r4,fp
 40123ec:	40148ec0 	call	40148ec <_Balloc>
 40123f0:	01bfffc4 	movi	r6,-1
 40123f4:	01c00044 	movi	r7,1
 40123f8:	d8800715 	stw	r2,28(sp)
 40123fc:	d9800c15 	stw	r6,48(sp)
 4012400:	e0801015 	stw	r2,64(fp)
 4012404:	d8000315 	stw	zero,12(sp)
 4012408:	d9c00b15 	stw	r7,44(sp)
 401240c:	d9800615 	stw	r6,24(sp)
 4012410:	d8002215 	stw	zero,136(sp)
 4012414:	d8800117 	ldw	r2,4(sp)
 4012418:	10008916 	blt	r2,zero,4012640 <_dtoa_r+0x990>
 401241c:	d9000517 	ldw	r4,20(sp)
 4012420:	00c00384 	movi	r3,14
 4012424:	19008616 	blt	r3,r4,4012640 <_dtoa_r+0x990>
 4012428:	200490fa 	slli	r2,r4,3
 401242c:	00c100b4 	movhi	r3,1026
 4012430:	d9802217 	ldw	r6,136(sp)
 4012434:	18dcd004 	addi	r3,r3,29504
 4012438:	1885883a 	add	r2,r3,r2
 401243c:	14000017 	ldw	r16,0(r2)
 4012440:	14400117 	ldw	r17,4(r2)
 4012444:	30016316 	blt	r6,zero,40129d4 <_dtoa_r+0xd24>
 4012448:	800d883a 	mov	r6,r16
 401244c:	880f883a 	mov	r7,r17
 4012450:	9009883a 	mov	r4,r18
 4012454:	980b883a 	mov	r5,r19
 4012458:	40196d00 	call	40196d0 <__divdf3>
 401245c:	180b883a 	mov	r5,r3
 4012460:	1009883a 	mov	r4,r2
 4012464:	401b4600 	call	401b460 <__fixdfsi>
 4012468:	1009883a 	mov	r4,r2
 401246c:	102b883a 	mov	r21,r2
 4012470:	401b4e00 	call	401b4e0 <__floatsidf>
 4012474:	800d883a 	mov	r6,r16
 4012478:	880f883a 	mov	r7,r17
 401247c:	1009883a 	mov	r4,r2
 4012480:	180b883a 	mov	r5,r3
 4012484:	401a2f80 	call	401a2f8 <__muldf3>
 4012488:	100d883a 	mov	r6,r2
 401248c:	180f883a 	mov	r7,r3
 4012490:	9009883a 	mov	r4,r18
 4012494:	980b883a 	mov	r5,r19
 4012498:	401ab640 	call	401ab64 <__subdf3>
 401249c:	d9c00717 	ldw	r7,28(sp)
 40124a0:	1009883a 	mov	r4,r2
 40124a4:	a8800c04 	addi	r2,r21,48
 40124a8:	38800005 	stb	r2,0(r7)
 40124ac:	3dc00044 	addi	r23,r7,1
 40124b0:	d9c00617 	ldw	r7,24(sp)
 40124b4:	01800044 	movi	r6,1
 40124b8:	180b883a 	mov	r5,r3
 40124bc:	2005883a 	mov	r2,r4
 40124c0:	39803826 	beq	r7,r6,40125a4 <_dtoa_r+0x8f4>
 40124c4:	000d883a 	mov	r6,zero
 40124c8:	01d00934 	movhi	r7,16420
 40124cc:	401a2f80 	call	401a2f8 <__muldf3>
 40124d0:	000d883a 	mov	r6,zero
 40124d4:	000f883a 	mov	r7,zero
 40124d8:	1009883a 	mov	r4,r2
 40124dc:	180b883a 	mov	r5,r3
 40124e0:	1025883a 	mov	r18,r2
 40124e4:	1827883a 	mov	r19,r3
 40124e8:	401a0a00 	call	401a0a0 <__eqdf2>
 40124ec:	103f9a26 	beq	r2,zero,4012358 <__alt_data_end+0xfc012358>
 40124f0:	d9c00617 	ldw	r7,24(sp)
 40124f4:	d8c00717 	ldw	r3,28(sp)
 40124f8:	b829883a 	mov	r20,r23
 40124fc:	38bfffc4 	addi	r2,r7,-1
 4012500:	18ad883a 	add	r22,r3,r2
 4012504:	00000a06 	br	4012530 <_dtoa_r+0x880>
 4012508:	401a2f80 	call	401a2f8 <__muldf3>
 401250c:	000d883a 	mov	r6,zero
 4012510:	000f883a 	mov	r7,zero
 4012514:	1009883a 	mov	r4,r2
 4012518:	180b883a 	mov	r5,r3
 401251c:	1025883a 	mov	r18,r2
 4012520:	1827883a 	mov	r19,r3
 4012524:	b829883a 	mov	r20,r23
 4012528:	401a0a00 	call	401a0a0 <__eqdf2>
 401252c:	103f8a26 	beq	r2,zero,4012358 <__alt_data_end+0xfc012358>
 4012530:	800d883a 	mov	r6,r16
 4012534:	880f883a 	mov	r7,r17
 4012538:	9009883a 	mov	r4,r18
 401253c:	980b883a 	mov	r5,r19
 4012540:	40196d00 	call	40196d0 <__divdf3>
 4012544:	180b883a 	mov	r5,r3
 4012548:	1009883a 	mov	r4,r2
 401254c:	401b4600 	call	401b460 <__fixdfsi>
 4012550:	1009883a 	mov	r4,r2
 4012554:	102b883a 	mov	r21,r2
 4012558:	401b4e00 	call	401b4e0 <__floatsidf>
 401255c:	800d883a 	mov	r6,r16
 4012560:	880f883a 	mov	r7,r17
 4012564:	1009883a 	mov	r4,r2
 4012568:	180b883a 	mov	r5,r3
 401256c:	401a2f80 	call	401a2f8 <__muldf3>
 4012570:	100d883a 	mov	r6,r2
 4012574:	180f883a 	mov	r7,r3
 4012578:	9009883a 	mov	r4,r18
 401257c:	980b883a 	mov	r5,r19
 4012580:	401ab640 	call	401ab64 <__subdf3>
 4012584:	aa000c04 	addi	r8,r21,48
 4012588:	a2000005 	stb	r8,0(r20)
 401258c:	000d883a 	mov	r6,zero
 4012590:	01d00934 	movhi	r7,16420
 4012594:	1009883a 	mov	r4,r2
 4012598:	180b883a 	mov	r5,r3
 401259c:	a5c00044 	addi	r23,r20,1
 40125a0:	b53fd91e 	bne	r22,r20,4012508 <__alt_data_end+0xfc012508>
 40125a4:	100d883a 	mov	r6,r2
 40125a8:	180f883a 	mov	r7,r3
 40125ac:	1009883a 	mov	r4,r2
 40125b0:	180b883a 	mov	r5,r3
 40125b4:	4018e240 	call	4018e24 <__adddf3>
 40125b8:	100d883a 	mov	r6,r2
 40125bc:	180f883a 	mov	r7,r3
 40125c0:	8009883a 	mov	r4,r16
 40125c4:	880b883a 	mov	r5,r17
 40125c8:	1027883a 	mov	r19,r2
 40125cc:	1825883a 	mov	r18,r3
 40125d0:	401a2040 	call	401a204 <__ledf2>
 40125d4:	10000816 	blt	r2,zero,40125f8 <_dtoa_r+0x948>
 40125d8:	980d883a 	mov	r6,r19
 40125dc:	900f883a 	mov	r7,r18
 40125e0:	8009883a 	mov	r4,r16
 40125e4:	880b883a 	mov	r5,r17
 40125e8:	401a0a00 	call	401a0a0 <__eqdf2>
 40125ec:	103f5a1e 	bne	r2,zero,4012358 <__alt_data_end+0xfc012358>
 40125f0:	ad40004c 	andi	r21,r21,1
 40125f4:	a83f5826 	beq	r21,zero,4012358 <__alt_data_end+0xfc012358>
 40125f8:	bd3fffc3 	ldbu	r20,-1(r23)
 40125fc:	b8bfffc4 	addi	r2,r23,-1
 4012600:	1007883a 	mov	r3,r2
 4012604:	01400e44 	movi	r5,57
 4012608:	d9800717 	ldw	r6,28(sp)
 401260c:	00000506 	br	4012624 <_dtoa_r+0x974>
 4012610:	18ffffc4 	addi	r3,r3,-1
 4012614:	11824726 	beq	r2,r6,4012f34 <_dtoa_r+0x1284>
 4012618:	1d000003 	ldbu	r20,0(r3)
 401261c:	102f883a 	mov	r23,r2
 4012620:	10bfffc4 	addi	r2,r2,-1
 4012624:	a1003fcc 	andi	r4,r20,255
 4012628:	2100201c 	xori	r4,r4,128
 401262c:	213fe004 	addi	r4,r4,-128
 4012630:	217ff726 	beq	r4,r5,4012610 <__alt_data_end+0xfc012610>
 4012634:	a2000044 	addi	r8,r20,1
 4012638:	12000005 	stb	r8,0(r2)
 401263c:	003f4606 	br	4012358 <__alt_data_end+0xfc012358>
 4012640:	d9000b17 	ldw	r4,44(sp)
 4012644:	2000c826 	beq	r4,zero,4012968 <_dtoa_r+0xcb8>
 4012648:	d9800317 	ldw	r6,12(sp)
 401264c:	00c00044 	movi	r3,1
 4012650:	1980f90e 	bge	r3,r6,4012a38 <_dtoa_r+0xd88>
 4012654:	d8800617 	ldw	r2,24(sp)
 4012658:	d8c00a17 	ldw	r3,40(sp)
 401265c:	157fffc4 	addi	r21,r2,-1
 4012660:	1d41f316 	blt	r3,r21,4012e30 <_dtoa_r+0x1180>
 4012664:	1d6bc83a 	sub	r21,r3,r21
 4012668:	d9c00617 	ldw	r7,24(sp)
 401266c:	3802aa16 	blt	r7,zero,4013118 <_dtoa_r+0x1468>
 4012670:	dd000817 	ldw	r20,32(sp)
 4012674:	d8800617 	ldw	r2,24(sp)
 4012678:	d8c00817 	ldw	r3,32(sp)
 401267c:	01400044 	movi	r5,1
 4012680:	e009883a 	mov	r4,fp
 4012684:	1887883a 	add	r3,r3,r2
 4012688:	d8c00815 	stw	r3,32(sp)
 401268c:	b0ad883a 	add	r22,r22,r2
 4012690:	4014d200 	call	4014d20 <__i2b>
 4012694:	1023883a 	mov	r17,r2
 4012698:	a0000826 	beq	r20,zero,40126bc <_dtoa_r+0xa0c>
 401269c:	0580070e 	bge	zero,r22,40126bc <_dtoa_r+0xa0c>
 40126a0:	a005883a 	mov	r2,r20
 40126a4:	b500b916 	blt	r22,r20,401298c <_dtoa_r+0xcdc>
 40126a8:	d9000817 	ldw	r4,32(sp)
 40126ac:	a0a9c83a 	sub	r20,r20,r2
 40126b0:	b0adc83a 	sub	r22,r22,r2
 40126b4:	2089c83a 	sub	r4,r4,r2
 40126b8:	d9000815 	stw	r4,32(sp)
 40126bc:	d9800a17 	ldw	r6,40(sp)
 40126c0:	0181810e 	bge	zero,r6,4012cc8 <_dtoa_r+0x1018>
 40126c4:	d9c00b17 	ldw	r7,44(sp)
 40126c8:	3800b326 	beq	r7,zero,4012998 <_dtoa_r+0xce8>
 40126cc:	a800b226 	beq	r21,zero,4012998 <_dtoa_r+0xce8>
 40126d0:	880b883a 	mov	r5,r17
 40126d4:	a80d883a 	mov	r6,r21
 40126d8:	e009883a 	mov	r4,fp
 40126dc:	4014fe80 	call	4014fe8 <__pow5mult>
 40126e0:	d9800917 	ldw	r6,36(sp)
 40126e4:	100b883a 	mov	r5,r2
 40126e8:	e009883a 	mov	r4,fp
 40126ec:	1023883a 	mov	r17,r2
 40126f0:	4014d5c0 	call	4014d5c <__multiply>
 40126f4:	1021883a 	mov	r16,r2
 40126f8:	d8800a17 	ldw	r2,40(sp)
 40126fc:	d9400917 	ldw	r5,36(sp)
 4012700:	e009883a 	mov	r4,fp
 4012704:	1545c83a 	sub	r2,r2,r21
 4012708:	d8800a15 	stw	r2,40(sp)
 401270c:	40149940 	call	4014994 <_Bfree>
 4012710:	d8c00a17 	ldw	r3,40(sp)
 4012714:	18009f1e 	bne	r3,zero,4012994 <_dtoa_r+0xce4>
 4012718:	05c00044 	movi	r23,1
 401271c:	e009883a 	mov	r4,fp
 4012720:	b80b883a 	mov	r5,r23
 4012724:	4014d200 	call	4014d20 <__i2b>
 4012728:	d9000d17 	ldw	r4,52(sp)
 401272c:	102b883a 	mov	r21,r2
 4012730:	2000ce26 	beq	r4,zero,4012a6c <_dtoa_r+0xdbc>
 4012734:	200d883a 	mov	r6,r4
 4012738:	100b883a 	mov	r5,r2
 401273c:	e009883a 	mov	r4,fp
 4012740:	4014fe80 	call	4014fe8 <__pow5mult>
 4012744:	d9800317 	ldw	r6,12(sp)
 4012748:	102b883a 	mov	r21,r2
 401274c:	b981810e 	bge	r23,r6,4012d54 <_dtoa_r+0x10a4>
 4012750:	0027883a 	mov	r19,zero
 4012754:	a8800417 	ldw	r2,16(r21)
 4012758:	05c00804 	movi	r23,32
 401275c:	10800104 	addi	r2,r2,4
 4012760:	1085883a 	add	r2,r2,r2
 4012764:	1085883a 	add	r2,r2,r2
 4012768:	a885883a 	add	r2,r21,r2
 401276c:	11000017 	ldw	r4,0(r2)
 4012770:	4014c080 	call	4014c08 <__hi0bits>
 4012774:	b885c83a 	sub	r2,r23,r2
 4012778:	1585883a 	add	r2,r2,r22
 401277c:	108007cc 	andi	r2,r2,31
 4012780:	1000b326 	beq	r2,zero,4012a50 <_dtoa_r+0xda0>
 4012784:	00c00804 	movi	r3,32
 4012788:	1887c83a 	sub	r3,r3,r2
 401278c:	01000104 	movi	r4,4
 4012790:	20c2cd0e 	bge	r4,r3,40132c8 <_dtoa_r+0x1618>
 4012794:	00c00704 	movi	r3,28
 4012798:	1885c83a 	sub	r2,r3,r2
 401279c:	d8c00817 	ldw	r3,32(sp)
 40127a0:	a0a9883a 	add	r20,r20,r2
 40127a4:	b0ad883a 	add	r22,r22,r2
 40127a8:	1887883a 	add	r3,r3,r2
 40127ac:	d8c00815 	stw	r3,32(sp)
 40127b0:	d9800817 	ldw	r6,32(sp)
 40127b4:	0180040e 	bge	zero,r6,40127c8 <_dtoa_r+0xb18>
 40127b8:	800b883a 	mov	r5,r16
 40127bc:	e009883a 	mov	r4,fp
 40127c0:	40151280 	call	4015128 <__lshift>
 40127c4:	1021883a 	mov	r16,r2
 40127c8:	0580050e 	bge	zero,r22,40127e0 <_dtoa_r+0xb30>
 40127cc:	a80b883a 	mov	r5,r21
 40127d0:	b00d883a 	mov	r6,r22
 40127d4:	e009883a 	mov	r4,fp
 40127d8:	40151280 	call	4015128 <__lshift>
 40127dc:	102b883a 	mov	r21,r2
 40127e0:	d9c00e17 	ldw	r7,56(sp)
 40127e4:	3801211e 	bne	r7,zero,4012c6c <_dtoa_r+0xfbc>
 40127e8:	d9800617 	ldw	r6,24(sp)
 40127ec:	0181380e 	bge	zero,r6,4012cd0 <_dtoa_r+0x1020>
 40127f0:	d8c00b17 	ldw	r3,44(sp)
 40127f4:	1800ab1e 	bne	r3,zero,4012aa4 <_dtoa_r+0xdf4>
 40127f8:	dc800717 	ldw	r18,28(sp)
 40127fc:	dcc00617 	ldw	r19,24(sp)
 4012800:	9029883a 	mov	r20,r18
 4012804:	00000206 	br	4012810 <_dtoa_r+0xb60>
 4012808:	40149bc0 	call	40149bc <__multadd>
 401280c:	1021883a 	mov	r16,r2
 4012810:	a80b883a 	mov	r5,r21
 4012814:	8009883a 	mov	r4,r16
 4012818:	4011a880 	call	4011a88 <quorem>
 401281c:	10800c04 	addi	r2,r2,48
 4012820:	90800005 	stb	r2,0(r18)
 4012824:	94800044 	addi	r18,r18,1
 4012828:	9507c83a 	sub	r3,r18,r20
 401282c:	000f883a 	mov	r7,zero
 4012830:	01800284 	movi	r6,10
 4012834:	800b883a 	mov	r5,r16
 4012838:	e009883a 	mov	r4,fp
 401283c:	1cfff216 	blt	r3,r19,4012808 <__alt_data_end+0xfc012808>
 4012840:	1011883a 	mov	r8,r2
 4012844:	d8800617 	ldw	r2,24(sp)
 4012848:	0082370e 	bge	zero,r2,4013128 <_dtoa_r+0x1478>
 401284c:	d9000717 	ldw	r4,28(sp)
 4012850:	0025883a 	mov	r18,zero
 4012854:	20af883a 	add	r23,r4,r2
 4012858:	01800044 	movi	r6,1
 401285c:	800b883a 	mov	r5,r16
 4012860:	e009883a 	mov	r4,fp
 4012864:	da001715 	stw	r8,92(sp)
 4012868:	40151280 	call	4015128 <__lshift>
 401286c:	a80b883a 	mov	r5,r21
 4012870:	1009883a 	mov	r4,r2
 4012874:	d8800915 	stw	r2,36(sp)
 4012878:	40152700 	call	4015270 <__mcmp>
 401287c:	da001717 	ldw	r8,92(sp)
 4012880:	0081800e 	bge	zero,r2,4012e84 <_dtoa_r+0x11d4>
 4012884:	b93fffc3 	ldbu	r4,-1(r23)
 4012888:	b8bfffc4 	addi	r2,r23,-1
 401288c:	1007883a 	mov	r3,r2
 4012890:	01800e44 	movi	r6,57
 4012894:	d9c00717 	ldw	r7,28(sp)
 4012898:	00000506 	br	40128b0 <_dtoa_r+0xc00>
 401289c:	18ffffc4 	addi	r3,r3,-1
 40128a0:	11c12326 	beq	r2,r7,4012d30 <_dtoa_r+0x1080>
 40128a4:	19000003 	ldbu	r4,0(r3)
 40128a8:	102f883a 	mov	r23,r2
 40128ac:	10bfffc4 	addi	r2,r2,-1
 40128b0:	21403fcc 	andi	r5,r4,255
 40128b4:	2940201c 	xori	r5,r5,128
 40128b8:	297fe004 	addi	r5,r5,-128
 40128bc:	29bff726 	beq	r5,r6,401289c <__alt_data_end+0xfc01289c>
 40128c0:	21000044 	addi	r4,r4,1
 40128c4:	11000005 	stb	r4,0(r2)
 40128c8:	a80b883a 	mov	r5,r21
 40128cc:	e009883a 	mov	r4,fp
 40128d0:	40149940 	call	4014994 <_Bfree>
 40128d4:	883ea026 	beq	r17,zero,4012358 <__alt_data_end+0xfc012358>
 40128d8:	90000426 	beq	r18,zero,40128ec <_dtoa_r+0xc3c>
 40128dc:	94400326 	beq	r18,r17,40128ec <_dtoa_r+0xc3c>
 40128e0:	900b883a 	mov	r5,r18
 40128e4:	e009883a 	mov	r4,fp
 40128e8:	40149940 	call	4014994 <_Bfree>
 40128ec:	880b883a 	mov	r5,r17
 40128f0:	e009883a 	mov	r4,fp
 40128f4:	40149940 	call	4014994 <_Bfree>
 40128f8:	003e9706 	br	4012358 <__alt_data_end+0xfc012358>
 40128fc:	01800044 	movi	r6,1
 4012900:	d9800e15 	stw	r6,56(sp)
 4012904:	003d9606 	br	4011f60 <__alt_data_end+0xfc011f60>
 4012908:	d8800817 	ldw	r2,32(sp)
 401290c:	d8c00517 	ldw	r3,20(sp)
 4012910:	d8000d15 	stw	zero,52(sp)
 4012914:	10c5c83a 	sub	r2,r2,r3
 4012918:	00c9c83a 	sub	r4,zero,r3
 401291c:	d8800815 	stw	r2,32(sp)
 4012920:	d9000a15 	stw	r4,40(sp)
 4012924:	003d9706 	br	4011f84 <__alt_data_end+0xfc011f84>
 4012928:	05adc83a 	sub	r22,zero,r22
 401292c:	dd800815 	stw	r22,32(sp)
 4012930:	002d883a 	mov	r22,zero
 4012934:	003d8e06 	br	4011f70 <__alt_data_end+0xfc011f70>
 4012938:	d9000517 	ldw	r4,20(sp)
 401293c:	401b4e00 	call	401b4e0 <__floatsidf>
 4012940:	100d883a 	mov	r6,r2
 4012944:	180f883a 	mov	r7,r3
 4012948:	a009883a 	mov	r4,r20
 401294c:	880b883a 	mov	r5,r17
 4012950:	401a0a00 	call	401a0a0 <__eqdf2>
 4012954:	103d7126 	beq	r2,zero,4011f1c <__alt_data_end+0xfc011f1c>
 4012958:	d9c00517 	ldw	r7,20(sp)
 401295c:	39ffffc4 	addi	r7,r7,-1
 4012960:	d9c00515 	stw	r7,20(sp)
 4012964:	003d6d06 	br	4011f1c <__alt_data_end+0xfc011f1c>
 4012968:	dd400a17 	ldw	r21,40(sp)
 401296c:	dd000817 	ldw	r20,32(sp)
 4012970:	0023883a 	mov	r17,zero
 4012974:	003f4806 	br	4012698 <__alt_data_end+0xfc012698>
 4012978:	10e3c83a 	sub	r17,r2,r3
 401297c:	9448983a 	sll	r4,r18,r17
 4012980:	003d3206 	br	4011e4c <__alt_data_end+0xfc011e4c>
 4012984:	d8000e15 	stw	zero,56(sp)
 4012988:	003d7506 	br	4011f60 <__alt_data_end+0xfc011f60>
 401298c:	b005883a 	mov	r2,r22
 4012990:	003f4506 	br	40126a8 <__alt_data_end+0xfc0126a8>
 4012994:	dc000915 	stw	r16,36(sp)
 4012998:	d9800a17 	ldw	r6,40(sp)
 401299c:	d9400917 	ldw	r5,36(sp)
 40129a0:	e009883a 	mov	r4,fp
 40129a4:	4014fe80 	call	4014fe8 <__pow5mult>
 40129a8:	1021883a 	mov	r16,r2
 40129ac:	003f5a06 	br	4012718 <__alt_data_end+0xfc012718>
 40129b0:	01c00044 	movi	r7,1
 40129b4:	d9c00b15 	stw	r7,44(sp)
 40129b8:	d8802217 	ldw	r2,136(sp)
 40129bc:	0081280e 	bge	zero,r2,4012e60 <_dtoa_r+0x11b0>
 40129c0:	100d883a 	mov	r6,r2
 40129c4:	1021883a 	mov	r16,r2
 40129c8:	d8800c15 	stw	r2,48(sp)
 40129cc:	d8800615 	stw	r2,24(sp)
 40129d0:	003d8806 	br	4011ff4 <__alt_data_end+0xfc011ff4>
 40129d4:	d8800617 	ldw	r2,24(sp)
 40129d8:	00be9b16 	blt	zero,r2,4012448 <__alt_data_end+0xfc012448>
 40129dc:	10010f1e 	bne	r2,zero,4012e1c <_dtoa_r+0x116c>
 40129e0:	880b883a 	mov	r5,r17
 40129e4:	000d883a 	mov	r6,zero
 40129e8:	01d00534 	movhi	r7,16404
 40129ec:	8009883a 	mov	r4,r16
 40129f0:	401a2f80 	call	401a2f8 <__muldf3>
 40129f4:	900d883a 	mov	r6,r18
 40129f8:	980f883a 	mov	r7,r19
 40129fc:	1009883a 	mov	r4,r2
 4012a00:	180b883a 	mov	r5,r3
 4012a04:	401a1280 	call	401a128 <__gedf2>
 4012a08:	002b883a 	mov	r21,zero
 4012a0c:	0023883a 	mov	r17,zero
 4012a10:	1000bf16 	blt	r2,zero,4012d10 <_dtoa_r+0x1060>
 4012a14:	d9802217 	ldw	r6,136(sp)
 4012a18:	ddc00717 	ldw	r23,28(sp)
 4012a1c:	018c303a 	nor	r6,zero,r6
 4012a20:	d9800515 	stw	r6,20(sp)
 4012a24:	a80b883a 	mov	r5,r21
 4012a28:	e009883a 	mov	r4,fp
 4012a2c:	40149940 	call	4014994 <_Bfree>
 4012a30:	883e4926 	beq	r17,zero,4012358 <__alt_data_end+0xfc012358>
 4012a34:	003fad06 	br	40128ec <__alt_data_end+0xfc0128ec>
 4012a38:	d9c01117 	ldw	r7,68(sp)
 4012a3c:	3801bc26 	beq	r7,zero,4013130 <_dtoa_r+0x1480>
 4012a40:	10810cc4 	addi	r2,r2,1075
 4012a44:	dd400a17 	ldw	r21,40(sp)
 4012a48:	dd000817 	ldw	r20,32(sp)
 4012a4c:	003f0a06 	br	4012678 <__alt_data_end+0xfc012678>
 4012a50:	00800704 	movi	r2,28
 4012a54:	d9000817 	ldw	r4,32(sp)
 4012a58:	a0a9883a 	add	r20,r20,r2
 4012a5c:	b0ad883a 	add	r22,r22,r2
 4012a60:	2089883a 	add	r4,r4,r2
 4012a64:	d9000815 	stw	r4,32(sp)
 4012a68:	003f5106 	br	40127b0 <__alt_data_end+0xfc0127b0>
 4012a6c:	d8c00317 	ldw	r3,12(sp)
 4012a70:	b8c1fc0e 	bge	r23,r3,4013264 <_dtoa_r+0x15b4>
 4012a74:	0027883a 	mov	r19,zero
 4012a78:	b805883a 	mov	r2,r23
 4012a7c:	003f3e06 	br	4012778 <__alt_data_end+0xfc012778>
 4012a80:	880b883a 	mov	r5,r17
 4012a84:	e009883a 	mov	r4,fp
 4012a88:	000f883a 	mov	r7,zero
 4012a8c:	01800284 	movi	r6,10
 4012a90:	40149bc0 	call	40149bc <__multadd>
 4012a94:	d9000c17 	ldw	r4,48(sp)
 4012a98:	1023883a 	mov	r17,r2
 4012a9c:	0102040e 	bge	zero,r4,40132b0 <_dtoa_r+0x1600>
 4012aa0:	d9000615 	stw	r4,24(sp)
 4012aa4:	0500050e 	bge	zero,r20,4012abc <_dtoa_r+0xe0c>
 4012aa8:	880b883a 	mov	r5,r17
 4012aac:	a00d883a 	mov	r6,r20
 4012ab0:	e009883a 	mov	r4,fp
 4012ab4:	40151280 	call	4015128 <__lshift>
 4012ab8:	1023883a 	mov	r17,r2
 4012abc:	9801241e 	bne	r19,zero,4012f50 <_dtoa_r+0x12a0>
 4012ac0:	8829883a 	mov	r20,r17
 4012ac4:	d9000617 	ldw	r4,24(sp)
 4012ac8:	dcc00717 	ldw	r19,28(sp)
 4012acc:	9480004c 	andi	r18,r18,1
 4012ad0:	20bfffc4 	addi	r2,r4,-1
 4012ad4:	9885883a 	add	r2,r19,r2
 4012ad8:	d8800415 	stw	r2,16(sp)
 4012adc:	dc800615 	stw	r18,24(sp)
 4012ae0:	a80b883a 	mov	r5,r21
 4012ae4:	8009883a 	mov	r4,r16
 4012ae8:	4011a880 	call	4011a88 <quorem>
 4012aec:	880b883a 	mov	r5,r17
 4012af0:	8009883a 	mov	r4,r16
 4012af4:	102f883a 	mov	r23,r2
 4012af8:	40152700 	call	4015270 <__mcmp>
 4012afc:	a80b883a 	mov	r5,r21
 4012b00:	a00d883a 	mov	r6,r20
 4012b04:	e009883a 	mov	r4,fp
 4012b08:	102d883a 	mov	r22,r2
 4012b0c:	40152d00 	call	40152d0 <__mdiff>
 4012b10:	1007883a 	mov	r3,r2
 4012b14:	10800317 	ldw	r2,12(r2)
 4012b18:	bc800c04 	addi	r18,r23,48
 4012b1c:	180b883a 	mov	r5,r3
 4012b20:	10004e1e 	bne	r2,zero,4012c5c <_dtoa_r+0xfac>
 4012b24:	8009883a 	mov	r4,r16
 4012b28:	d8c01615 	stw	r3,88(sp)
 4012b2c:	40152700 	call	4015270 <__mcmp>
 4012b30:	d8c01617 	ldw	r3,88(sp)
 4012b34:	e009883a 	mov	r4,fp
 4012b38:	d8801615 	stw	r2,88(sp)
 4012b3c:	180b883a 	mov	r5,r3
 4012b40:	40149940 	call	4014994 <_Bfree>
 4012b44:	d8801617 	ldw	r2,88(sp)
 4012b48:	1000041e 	bne	r2,zero,4012b5c <_dtoa_r+0xeac>
 4012b4c:	d9800317 	ldw	r6,12(sp)
 4012b50:	3000021e 	bne	r6,zero,4012b5c <_dtoa_r+0xeac>
 4012b54:	d8c00617 	ldw	r3,24(sp)
 4012b58:	18003726 	beq	r3,zero,4012c38 <_dtoa_r+0xf88>
 4012b5c:	b0002016 	blt	r22,zero,4012be0 <_dtoa_r+0xf30>
 4012b60:	b000041e 	bne	r22,zero,4012b74 <_dtoa_r+0xec4>
 4012b64:	d9000317 	ldw	r4,12(sp)
 4012b68:	2000021e 	bne	r4,zero,4012b74 <_dtoa_r+0xec4>
 4012b6c:	d8c00617 	ldw	r3,24(sp)
 4012b70:	18001b26 	beq	r3,zero,4012be0 <_dtoa_r+0xf30>
 4012b74:	00810716 	blt	zero,r2,4012f94 <_dtoa_r+0x12e4>
 4012b78:	d8c00417 	ldw	r3,16(sp)
 4012b7c:	9d800044 	addi	r22,r19,1
 4012b80:	9c800005 	stb	r18,0(r19)
 4012b84:	b02f883a 	mov	r23,r22
 4012b88:	98c10626 	beq	r19,r3,4012fa4 <_dtoa_r+0x12f4>
 4012b8c:	800b883a 	mov	r5,r16
 4012b90:	000f883a 	mov	r7,zero
 4012b94:	01800284 	movi	r6,10
 4012b98:	e009883a 	mov	r4,fp
 4012b9c:	40149bc0 	call	40149bc <__multadd>
 4012ba0:	1021883a 	mov	r16,r2
 4012ba4:	000f883a 	mov	r7,zero
 4012ba8:	01800284 	movi	r6,10
 4012bac:	880b883a 	mov	r5,r17
 4012bb0:	e009883a 	mov	r4,fp
 4012bb4:	8d002526 	beq	r17,r20,4012c4c <_dtoa_r+0xf9c>
 4012bb8:	40149bc0 	call	40149bc <__multadd>
 4012bbc:	a00b883a 	mov	r5,r20
 4012bc0:	000f883a 	mov	r7,zero
 4012bc4:	01800284 	movi	r6,10
 4012bc8:	e009883a 	mov	r4,fp
 4012bcc:	1023883a 	mov	r17,r2
 4012bd0:	40149bc0 	call	40149bc <__multadd>
 4012bd4:	1029883a 	mov	r20,r2
 4012bd8:	b027883a 	mov	r19,r22
 4012bdc:	003fc006 	br	4012ae0 <__alt_data_end+0xfc012ae0>
 4012be0:	9011883a 	mov	r8,r18
 4012be4:	00800e0e 	bge	zero,r2,4012c20 <_dtoa_r+0xf70>
 4012be8:	800b883a 	mov	r5,r16
 4012bec:	01800044 	movi	r6,1
 4012bf0:	e009883a 	mov	r4,fp
 4012bf4:	da001715 	stw	r8,92(sp)
 4012bf8:	40151280 	call	4015128 <__lshift>
 4012bfc:	a80b883a 	mov	r5,r21
 4012c00:	1009883a 	mov	r4,r2
 4012c04:	1021883a 	mov	r16,r2
 4012c08:	40152700 	call	4015270 <__mcmp>
 4012c0c:	da001717 	ldw	r8,92(sp)
 4012c10:	0081960e 	bge	zero,r2,401326c <_dtoa_r+0x15bc>
 4012c14:	00800e44 	movi	r2,57
 4012c18:	40817026 	beq	r8,r2,40131dc <_dtoa_r+0x152c>
 4012c1c:	ba000c44 	addi	r8,r23,49
 4012c20:	8825883a 	mov	r18,r17
 4012c24:	9dc00044 	addi	r23,r19,1
 4012c28:	9a000005 	stb	r8,0(r19)
 4012c2c:	a023883a 	mov	r17,r20
 4012c30:	dc000915 	stw	r16,36(sp)
 4012c34:	003f2406 	br	40128c8 <__alt_data_end+0xfc0128c8>
 4012c38:	00800e44 	movi	r2,57
 4012c3c:	9011883a 	mov	r8,r18
 4012c40:	90816626 	beq	r18,r2,40131dc <_dtoa_r+0x152c>
 4012c44:	05bff516 	blt	zero,r22,4012c1c <__alt_data_end+0xfc012c1c>
 4012c48:	003ff506 	br	4012c20 <__alt_data_end+0xfc012c20>
 4012c4c:	40149bc0 	call	40149bc <__multadd>
 4012c50:	1023883a 	mov	r17,r2
 4012c54:	1029883a 	mov	r20,r2
 4012c58:	003fdf06 	br	4012bd8 <__alt_data_end+0xfc012bd8>
 4012c5c:	e009883a 	mov	r4,fp
 4012c60:	40149940 	call	4014994 <_Bfree>
 4012c64:	00800044 	movi	r2,1
 4012c68:	003fbc06 	br	4012b5c <__alt_data_end+0xfc012b5c>
 4012c6c:	a80b883a 	mov	r5,r21
 4012c70:	8009883a 	mov	r4,r16
 4012c74:	40152700 	call	4015270 <__mcmp>
 4012c78:	103edb0e 	bge	r2,zero,40127e8 <__alt_data_end+0xfc0127e8>
 4012c7c:	800b883a 	mov	r5,r16
 4012c80:	000f883a 	mov	r7,zero
 4012c84:	01800284 	movi	r6,10
 4012c88:	e009883a 	mov	r4,fp
 4012c8c:	40149bc0 	call	40149bc <__multadd>
 4012c90:	1021883a 	mov	r16,r2
 4012c94:	d8800517 	ldw	r2,20(sp)
 4012c98:	d8c00b17 	ldw	r3,44(sp)
 4012c9c:	10bfffc4 	addi	r2,r2,-1
 4012ca0:	d8800515 	stw	r2,20(sp)
 4012ca4:	183f761e 	bne	r3,zero,4012a80 <__alt_data_end+0xfc012a80>
 4012ca8:	d9000c17 	ldw	r4,48(sp)
 4012cac:	0101730e 	bge	zero,r4,401327c <_dtoa_r+0x15cc>
 4012cb0:	d9000615 	stw	r4,24(sp)
 4012cb4:	003ed006 	br	40127f8 <__alt_data_end+0xfc0127f8>
 4012cb8:	00800084 	movi	r2,2
 4012cbc:	3081861e 	bne	r6,r2,40132d8 <_dtoa_r+0x1628>
 4012cc0:	d8000b15 	stw	zero,44(sp)
 4012cc4:	003f3c06 	br	40129b8 <__alt_data_end+0xfc0129b8>
 4012cc8:	dc000917 	ldw	r16,36(sp)
 4012ccc:	003e9206 	br	4012718 <__alt_data_end+0xfc012718>
 4012cd0:	d9c00317 	ldw	r7,12(sp)
 4012cd4:	00800084 	movi	r2,2
 4012cd8:	11fec50e 	bge	r2,r7,40127f0 <__alt_data_end+0xfc0127f0>
 4012cdc:	d9000617 	ldw	r4,24(sp)
 4012ce0:	20013c1e 	bne	r4,zero,40131d4 <_dtoa_r+0x1524>
 4012ce4:	a80b883a 	mov	r5,r21
 4012ce8:	000f883a 	mov	r7,zero
 4012cec:	01800144 	movi	r6,5
 4012cf0:	e009883a 	mov	r4,fp
 4012cf4:	40149bc0 	call	40149bc <__multadd>
 4012cf8:	100b883a 	mov	r5,r2
 4012cfc:	8009883a 	mov	r4,r16
 4012d00:	102b883a 	mov	r21,r2
 4012d04:	40152700 	call	4015270 <__mcmp>
 4012d08:	dc000915 	stw	r16,36(sp)
 4012d0c:	00bf410e 	bge	zero,r2,4012a14 <__alt_data_end+0xfc012a14>
 4012d10:	d9c00717 	ldw	r7,28(sp)
 4012d14:	00800c44 	movi	r2,49
 4012d18:	38800005 	stb	r2,0(r7)
 4012d1c:	d8800517 	ldw	r2,20(sp)
 4012d20:	3dc00044 	addi	r23,r7,1
 4012d24:	10800044 	addi	r2,r2,1
 4012d28:	d8800515 	stw	r2,20(sp)
 4012d2c:	003f3d06 	br	4012a24 <__alt_data_end+0xfc012a24>
 4012d30:	d9800517 	ldw	r6,20(sp)
 4012d34:	d9c00717 	ldw	r7,28(sp)
 4012d38:	00800c44 	movi	r2,49
 4012d3c:	31800044 	addi	r6,r6,1
 4012d40:	d9800515 	stw	r6,20(sp)
 4012d44:	38800005 	stb	r2,0(r7)
 4012d48:	003edf06 	br	40128c8 <__alt_data_end+0xfc0128c8>
 4012d4c:	d8000b15 	stw	zero,44(sp)
 4012d50:	003c9f06 	br	4011fd0 <__alt_data_end+0xfc011fd0>
 4012d54:	903e7e1e 	bne	r18,zero,4012750 <__alt_data_end+0xfc012750>
 4012d58:	00800434 	movhi	r2,16
 4012d5c:	10bfffc4 	addi	r2,r2,-1
 4012d60:	9884703a 	and	r2,r19,r2
 4012d64:	1000ea1e 	bne	r2,zero,4013110 <_dtoa_r+0x1460>
 4012d68:	9cdffc2c 	andhi	r19,r19,32752
 4012d6c:	9800e826 	beq	r19,zero,4013110 <_dtoa_r+0x1460>
 4012d70:	d9c00817 	ldw	r7,32(sp)
 4012d74:	b5800044 	addi	r22,r22,1
 4012d78:	04c00044 	movi	r19,1
 4012d7c:	39c00044 	addi	r7,r7,1
 4012d80:	d9c00815 	stw	r7,32(sp)
 4012d84:	d8800d17 	ldw	r2,52(sp)
 4012d88:	103e721e 	bne	r2,zero,4012754 <__alt_data_end+0xfc012754>
 4012d8c:	00800044 	movi	r2,1
 4012d90:	003e7906 	br	4012778 <__alt_data_end+0xfc012778>
 4012d94:	8009883a 	mov	r4,r16
 4012d98:	401b4e00 	call	401b4e0 <__floatsidf>
 4012d9c:	d9800f17 	ldw	r6,60(sp)
 4012da0:	d9c01017 	ldw	r7,64(sp)
 4012da4:	1009883a 	mov	r4,r2
 4012da8:	180b883a 	mov	r5,r3
 4012dac:	401a2f80 	call	401a2f8 <__muldf3>
 4012db0:	000d883a 	mov	r6,zero
 4012db4:	01d00734 	movhi	r7,16412
 4012db8:	1009883a 	mov	r4,r2
 4012dbc:	180b883a 	mov	r5,r3
 4012dc0:	4018e240 	call	4018e24 <__adddf3>
 4012dc4:	047f3034 	movhi	r17,64704
 4012dc8:	1021883a 	mov	r16,r2
 4012dcc:	1c63883a 	add	r17,r3,r17
 4012dd0:	d9000f17 	ldw	r4,60(sp)
 4012dd4:	d9401017 	ldw	r5,64(sp)
 4012dd8:	000d883a 	mov	r6,zero
 4012ddc:	01d00534 	movhi	r7,16404
 4012de0:	401ab640 	call	401ab64 <__subdf3>
 4012de4:	800d883a 	mov	r6,r16
 4012de8:	880f883a 	mov	r7,r17
 4012dec:	1009883a 	mov	r4,r2
 4012df0:	180b883a 	mov	r5,r3
 4012df4:	102b883a 	mov	r21,r2
 4012df8:	1829883a 	mov	r20,r3
 4012dfc:	401a1280 	call	401a128 <__gedf2>
 4012e00:	00806c16 	blt	zero,r2,4012fb4 <_dtoa_r+0x1304>
 4012e04:	89e0003c 	xorhi	r7,r17,32768
 4012e08:	800d883a 	mov	r6,r16
 4012e0c:	a809883a 	mov	r4,r21
 4012e10:	a00b883a 	mov	r5,r20
 4012e14:	401a2040 	call	401a204 <__ledf2>
 4012e18:	103d7e0e 	bge	r2,zero,4012414 <__alt_data_end+0xfc012414>
 4012e1c:	002b883a 	mov	r21,zero
 4012e20:	0023883a 	mov	r17,zero
 4012e24:	003efb06 	br	4012a14 <__alt_data_end+0xfc012a14>
 4012e28:	d8800717 	ldw	r2,28(sp)
 4012e2c:	003bd006 	br	4011d70 <__alt_data_end+0xfc011d70>
 4012e30:	d9000a17 	ldw	r4,40(sp)
 4012e34:	d9800d17 	ldw	r6,52(sp)
 4012e38:	dd400a15 	stw	r21,40(sp)
 4012e3c:	a905c83a 	sub	r2,r21,r4
 4012e40:	308d883a 	add	r6,r6,r2
 4012e44:	d9800d15 	stw	r6,52(sp)
 4012e48:	002b883a 	mov	r21,zero
 4012e4c:	003e0606 	br	4012668 <__alt_data_end+0xfc012668>
 4012e50:	9023883a 	mov	r17,r18
 4012e54:	9829883a 	mov	r20,r19
 4012e58:	04000084 	movi	r16,2
 4012e5c:	003c9206 	br	40120a8 <__alt_data_end+0xfc0120a8>
 4012e60:	04000044 	movi	r16,1
 4012e64:	dc000c15 	stw	r16,48(sp)
 4012e68:	dc000615 	stw	r16,24(sp)
 4012e6c:	dc002215 	stw	r16,136(sp)
 4012e70:	e0001115 	stw	zero,68(fp)
 4012e74:	000b883a 	mov	r5,zero
 4012e78:	003c6906 	br	4012020 <__alt_data_end+0xfc012020>
 4012e7c:	3021883a 	mov	r16,r6
 4012e80:	003ffb06 	br	4012e70 <__alt_data_end+0xfc012e70>
 4012e84:	1000021e 	bne	r2,zero,4012e90 <_dtoa_r+0x11e0>
 4012e88:	4200004c 	andi	r8,r8,1
 4012e8c:	403e7d1e 	bne	r8,zero,4012884 <__alt_data_end+0xfc012884>
 4012e90:	01000c04 	movi	r4,48
 4012e94:	00000106 	br	4012e9c <_dtoa_r+0x11ec>
 4012e98:	102f883a 	mov	r23,r2
 4012e9c:	b8bfffc4 	addi	r2,r23,-1
 4012ea0:	10c00007 	ldb	r3,0(r2)
 4012ea4:	193ffc26 	beq	r3,r4,4012e98 <__alt_data_end+0xfc012e98>
 4012ea8:	003e8706 	br	40128c8 <__alt_data_end+0xfc0128c8>
 4012eac:	d8800517 	ldw	r2,20(sp)
 4012eb0:	00a3c83a 	sub	r17,zero,r2
 4012eb4:	8800a426 	beq	r17,zero,4013148 <_dtoa_r+0x1498>
 4012eb8:	888003cc 	andi	r2,r17,15
 4012ebc:	100490fa 	slli	r2,r2,3
 4012ec0:	00c100b4 	movhi	r3,1026
 4012ec4:	18dcd004 	addi	r3,r3,29504
 4012ec8:	1885883a 	add	r2,r3,r2
 4012ecc:	11800017 	ldw	r6,0(r2)
 4012ed0:	11c00117 	ldw	r7,4(r2)
 4012ed4:	9009883a 	mov	r4,r18
 4012ed8:	980b883a 	mov	r5,r19
 4012edc:	8823d13a 	srai	r17,r17,4
 4012ee0:	401a2f80 	call	401a2f8 <__muldf3>
 4012ee4:	d8800f15 	stw	r2,60(sp)
 4012ee8:	d8c01015 	stw	r3,64(sp)
 4012eec:	8800e826 	beq	r17,zero,4013290 <_dtoa_r+0x15e0>
 4012ef0:	050100b4 	movhi	r20,1026
 4012ef4:	a51cc604 	addi	r20,r20,29464
 4012ef8:	04000084 	movi	r16,2
 4012efc:	8980004c 	andi	r6,r17,1
 4012f00:	1009883a 	mov	r4,r2
 4012f04:	8823d07a 	srai	r17,r17,1
 4012f08:	180b883a 	mov	r5,r3
 4012f0c:	30000426 	beq	r6,zero,4012f20 <_dtoa_r+0x1270>
 4012f10:	a1800017 	ldw	r6,0(r20)
 4012f14:	a1c00117 	ldw	r7,4(r20)
 4012f18:	84000044 	addi	r16,r16,1
 4012f1c:	401a2f80 	call	401a2f8 <__muldf3>
 4012f20:	a5000204 	addi	r20,r20,8
 4012f24:	883ff51e 	bne	r17,zero,4012efc <__alt_data_end+0xfc012efc>
 4012f28:	d8800f15 	stw	r2,60(sp)
 4012f2c:	d8c01015 	stw	r3,64(sp)
 4012f30:	003c7606 	br	401210c <__alt_data_end+0xfc01210c>
 4012f34:	00c00c04 	movi	r3,48
 4012f38:	10c00005 	stb	r3,0(r2)
 4012f3c:	d8c00517 	ldw	r3,20(sp)
 4012f40:	bd3fffc3 	ldbu	r20,-1(r23)
 4012f44:	18c00044 	addi	r3,r3,1
 4012f48:	d8c00515 	stw	r3,20(sp)
 4012f4c:	003db906 	br	4012634 <__alt_data_end+0xfc012634>
 4012f50:	89400117 	ldw	r5,4(r17)
 4012f54:	e009883a 	mov	r4,fp
 4012f58:	40148ec0 	call	40148ec <_Balloc>
 4012f5c:	89800417 	ldw	r6,16(r17)
 4012f60:	89400304 	addi	r5,r17,12
 4012f64:	11000304 	addi	r4,r2,12
 4012f68:	31800084 	addi	r6,r6,2
 4012f6c:	318d883a 	add	r6,r6,r6
 4012f70:	318d883a 	add	r6,r6,r6
 4012f74:	1027883a 	mov	r19,r2
 4012f78:	400ecdc0 	call	400ecdc <memcpy>
 4012f7c:	01800044 	movi	r6,1
 4012f80:	980b883a 	mov	r5,r19
 4012f84:	e009883a 	mov	r4,fp
 4012f88:	40151280 	call	4015128 <__lshift>
 4012f8c:	1029883a 	mov	r20,r2
 4012f90:	003ecc06 	br	4012ac4 <__alt_data_end+0xfc012ac4>
 4012f94:	00800e44 	movi	r2,57
 4012f98:	90809026 	beq	r18,r2,40131dc <_dtoa_r+0x152c>
 4012f9c:	92000044 	addi	r8,r18,1
 4012fa0:	003f1f06 	br	4012c20 <__alt_data_end+0xfc012c20>
 4012fa4:	9011883a 	mov	r8,r18
 4012fa8:	8825883a 	mov	r18,r17
 4012fac:	a023883a 	mov	r17,r20
 4012fb0:	003e2906 	br	4012858 <__alt_data_end+0xfc012858>
 4012fb4:	002b883a 	mov	r21,zero
 4012fb8:	0023883a 	mov	r17,zero
 4012fbc:	003f5406 	br	4012d10 <__alt_data_end+0xfc012d10>
 4012fc0:	61bfffc4 	addi	r6,r12,-1
 4012fc4:	300490fa 	slli	r2,r6,3
 4012fc8:	00c100b4 	movhi	r3,1026
 4012fcc:	18dcd004 	addi	r3,r3,29504
 4012fd0:	1885883a 	add	r2,r3,r2
 4012fd4:	11000017 	ldw	r4,0(r2)
 4012fd8:	11400117 	ldw	r5,4(r2)
 4012fdc:	d8800717 	ldw	r2,28(sp)
 4012fe0:	880f883a 	mov	r7,r17
 4012fe4:	d9801215 	stw	r6,72(sp)
 4012fe8:	800d883a 	mov	r6,r16
 4012fec:	db001615 	stw	r12,88(sp)
 4012ff0:	15c00044 	addi	r23,r2,1
 4012ff4:	401a2f80 	call	401a2f8 <__muldf3>
 4012ff8:	d9401017 	ldw	r5,64(sp)
 4012ffc:	d9000f17 	ldw	r4,60(sp)
 4013000:	d8c01515 	stw	r3,84(sp)
 4013004:	d8801415 	stw	r2,80(sp)
 4013008:	401b4600 	call	401b460 <__fixdfsi>
 401300c:	1009883a 	mov	r4,r2
 4013010:	1021883a 	mov	r16,r2
 4013014:	401b4e00 	call	401b4e0 <__floatsidf>
 4013018:	d9000f17 	ldw	r4,60(sp)
 401301c:	d9401017 	ldw	r5,64(sp)
 4013020:	100d883a 	mov	r6,r2
 4013024:	180f883a 	mov	r7,r3
 4013028:	401ab640 	call	401ab64 <__subdf3>
 401302c:	1829883a 	mov	r20,r3
 4013030:	d8c00717 	ldw	r3,28(sp)
 4013034:	84000c04 	addi	r16,r16,48
 4013038:	1023883a 	mov	r17,r2
 401303c:	1c000005 	stb	r16,0(r3)
 4013040:	db001617 	ldw	r12,88(sp)
 4013044:	00800044 	movi	r2,1
 4013048:	60802226 	beq	r12,r2,40130d4 <_dtoa_r+0x1424>
 401304c:	d9c00717 	ldw	r7,28(sp)
 4013050:	8805883a 	mov	r2,r17
 4013054:	b82b883a 	mov	r21,r23
 4013058:	3b19883a 	add	r12,r7,r12
 401305c:	6023883a 	mov	r17,r12
 4013060:	a007883a 	mov	r3,r20
 4013064:	dc800f15 	stw	r18,60(sp)
 4013068:	000d883a 	mov	r6,zero
 401306c:	01d00934 	movhi	r7,16420
 4013070:	1009883a 	mov	r4,r2
 4013074:	180b883a 	mov	r5,r3
 4013078:	401a2f80 	call	401a2f8 <__muldf3>
 401307c:	180b883a 	mov	r5,r3
 4013080:	1009883a 	mov	r4,r2
 4013084:	1829883a 	mov	r20,r3
 4013088:	1025883a 	mov	r18,r2
 401308c:	401b4600 	call	401b460 <__fixdfsi>
 4013090:	1009883a 	mov	r4,r2
 4013094:	1021883a 	mov	r16,r2
 4013098:	401b4e00 	call	401b4e0 <__floatsidf>
 401309c:	100d883a 	mov	r6,r2
 40130a0:	180f883a 	mov	r7,r3
 40130a4:	9009883a 	mov	r4,r18
 40130a8:	a00b883a 	mov	r5,r20
 40130ac:	84000c04 	addi	r16,r16,48
 40130b0:	401ab640 	call	401ab64 <__subdf3>
 40130b4:	ad400044 	addi	r21,r21,1
 40130b8:	ac3fffc5 	stb	r16,-1(r21)
 40130bc:	ac7fea1e 	bne	r21,r17,4013068 <__alt_data_end+0xfc013068>
 40130c0:	1023883a 	mov	r17,r2
 40130c4:	d8801217 	ldw	r2,72(sp)
 40130c8:	dc800f17 	ldw	r18,60(sp)
 40130cc:	1829883a 	mov	r20,r3
 40130d0:	b8af883a 	add	r23,r23,r2
 40130d4:	d9001417 	ldw	r4,80(sp)
 40130d8:	d9401517 	ldw	r5,84(sp)
 40130dc:	000d883a 	mov	r6,zero
 40130e0:	01cff834 	movhi	r7,16352
 40130e4:	4018e240 	call	4018e24 <__adddf3>
 40130e8:	880d883a 	mov	r6,r17
 40130ec:	a00f883a 	mov	r7,r20
 40130f0:	1009883a 	mov	r4,r2
 40130f4:	180b883a 	mov	r5,r3
 40130f8:	401a2040 	call	401a204 <__ledf2>
 40130fc:	10003e0e 	bge	r2,zero,40131f8 <_dtoa_r+0x1548>
 4013100:	d9001317 	ldw	r4,76(sp)
 4013104:	bd3fffc3 	ldbu	r20,-1(r23)
 4013108:	d9000515 	stw	r4,20(sp)
 401310c:	003d3b06 	br	40125fc <__alt_data_end+0xfc0125fc>
 4013110:	0027883a 	mov	r19,zero
 4013114:	003f1b06 	br	4012d84 <__alt_data_end+0xfc012d84>
 4013118:	d8800817 	ldw	r2,32(sp)
 401311c:	11e9c83a 	sub	r20,r2,r7
 4013120:	0005883a 	mov	r2,zero
 4013124:	003d5406 	br	4012678 <__alt_data_end+0xfc012678>
 4013128:	00800044 	movi	r2,1
 401312c:	003dc706 	br	401284c <__alt_data_end+0xfc01284c>
 4013130:	d8c00217 	ldw	r3,8(sp)
 4013134:	00800d84 	movi	r2,54
 4013138:	dd400a17 	ldw	r21,40(sp)
 401313c:	10c5c83a 	sub	r2,r2,r3
 4013140:	dd000817 	ldw	r20,32(sp)
 4013144:	003d4c06 	br	4012678 <__alt_data_end+0xfc012678>
 4013148:	dc800f15 	stw	r18,60(sp)
 401314c:	dcc01015 	stw	r19,64(sp)
 4013150:	04000084 	movi	r16,2
 4013154:	003bed06 	br	401210c <__alt_data_end+0xfc01210c>
 4013158:	d9000617 	ldw	r4,24(sp)
 401315c:	203f0d26 	beq	r4,zero,4012d94 <__alt_data_end+0xfc012d94>
 4013160:	d9800c17 	ldw	r6,48(sp)
 4013164:	01bcab0e 	bge	zero,r6,4012414 <__alt_data_end+0xfc012414>
 4013168:	d9401017 	ldw	r5,64(sp)
 401316c:	d9000f17 	ldw	r4,60(sp)
 4013170:	000d883a 	mov	r6,zero
 4013174:	01d00934 	movhi	r7,16420
 4013178:	401a2f80 	call	401a2f8 <__muldf3>
 401317c:	81000044 	addi	r4,r16,1
 4013180:	d8800f15 	stw	r2,60(sp)
 4013184:	d8c01015 	stw	r3,64(sp)
 4013188:	401b4e00 	call	401b4e0 <__floatsidf>
 401318c:	d9800f17 	ldw	r6,60(sp)
 4013190:	d9c01017 	ldw	r7,64(sp)
 4013194:	1009883a 	mov	r4,r2
 4013198:	180b883a 	mov	r5,r3
 401319c:	401a2f80 	call	401a2f8 <__muldf3>
 40131a0:	01d00734 	movhi	r7,16412
 40131a4:	000d883a 	mov	r6,zero
 40131a8:	1009883a 	mov	r4,r2
 40131ac:	180b883a 	mov	r5,r3
 40131b0:	4018e240 	call	4018e24 <__adddf3>
 40131b4:	d9c00517 	ldw	r7,20(sp)
 40131b8:	047f3034 	movhi	r17,64704
 40131bc:	1021883a 	mov	r16,r2
 40131c0:	39ffffc4 	addi	r7,r7,-1
 40131c4:	d9c01315 	stw	r7,76(sp)
 40131c8:	1c63883a 	add	r17,r3,r17
 40131cc:	db000c17 	ldw	r12,48(sp)
 40131d0:	003bea06 	br	401217c <__alt_data_end+0xfc01217c>
 40131d4:	dc000915 	stw	r16,36(sp)
 40131d8:	003e0e06 	br	4012a14 <__alt_data_end+0xfc012a14>
 40131dc:	01000e44 	movi	r4,57
 40131e0:	8825883a 	mov	r18,r17
 40131e4:	9dc00044 	addi	r23,r19,1
 40131e8:	99000005 	stb	r4,0(r19)
 40131ec:	a023883a 	mov	r17,r20
 40131f0:	dc000915 	stw	r16,36(sp)
 40131f4:	003da406 	br	4012888 <__alt_data_end+0xfc012888>
 40131f8:	d9801417 	ldw	r6,80(sp)
 40131fc:	d9c01517 	ldw	r7,84(sp)
 4013200:	0009883a 	mov	r4,zero
 4013204:	014ff834 	movhi	r5,16352
 4013208:	401ab640 	call	401ab64 <__subdf3>
 401320c:	880d883a 	mov	r6,r17
 4013210:	a00f883a 	mov	r7,r20
 4013214:	1009883a 	mov	r4,r2
 4013218:	180b883a 	mov	r5,r3
 401321c:	401a1280 	call	401a128 <__gedf2>
 4013220:	00bc7c0e 	bge	zero,r2,4012414 <__alt_data_end+0xfc012414>
 4013224:	01000c04 	movi	r4,48
 4013228:	00000106 	br	4013230 <_dtoa_r+0x1580>
 401322c:	102f883a 	mov	r23,r2
 4013230:	b8bfffc4 	addi	r2,r23,-1
 4013234:	10c00007 	ldb	r3,0(r2)
 4013238:	193ffc26 	beq	r3,r4,401322c <__alt_data_end+0xfc01322c>
 401323c:	d9801317 	ldw	r6,76(sp)
 4013240:	d9800515 	stw	r6,20(sp)
 4013244:	003c4406 	br	4012358 <__alt_data_end+0xfc012358>
 4013248:	d9801317 	ldw	r6,76(sp)
 401324c:	d9800515 	stw	r6,20(sp)
 4013250:	003cea06 	br	40125fc <__alt_data_end+0xfc0125fc>
 4013254:	dd800f17 	ldw	r22,60(sp)
 4013258:	dcc01017 	ldw	r19,64(sp)
 401325c:	dc801217 	ldw	r18,72(sp)
 4013260:	003c6c06 	br	4012414 <__alt_data_end+0xfc012414>
 4013264:	903e031e 	bne	r18,zero,4012a74 <__alt_data_end+0xfc012a74>
 4013268:	003ebb06 	br	4012d58 <__alt_data_end+0xfc012d58>
 401326c:	103e6c1e 	bne	r2,zero,4012c20 <__alt_data_end+0xfc012c20>
 4013270:	4080004c 	andi	r2,r8,1
 4013274:	103e6a26 	beq	r2,zero,4012c20 <__alt_data_end+0xfc012c20>
 4013278:	003e6606 	br	4012c14 <__alt_data_end+0xfc012c14>
 401327c:	d8c00317 	ldw	r3,12(sp)
 4013280:	00800084 	movi	r2,2
 4013284:	10c02916 	blt	r2,r3,401332c <_dtoa_r+0x167c>
 4013288:	d9000c17 	ldw	r4,48(sp)
 401328c:	003e8806 	br	4012cb0 <__alt_data_end+0xfc012cb0>
 4013290:	04000084 	movi	r16,2
 4013294:	003b9d06 	br	401210c <__alt_data_end+0xfc01210c>
 4013298:	d9001317 	ldw	r4,76(sp)
 401329c:	d9000515 	stw	r4,20(sp)
 40132a0:	003cd606 	br	40125fc <__alt_data_end+0xfc0125fc>
 40132a4:	d8801317 	ldw	r2,76(sp)
 40132a8:	d8800515 	stw	r2,20(sp)
 40132ac:	003c2a06 	br	4012358 <__alt_data_end+0xfc012358>
 40132b0:	d9800317 	ldw	r6,12(sp)
 40132b4:	00800084 	movi	r2,2
 40132b8:	11801516 	blt	r2,r6,4013310 <_dtoa_r+0x1660>
 40132bc:	d9c00c17 	ldw	r7,48(sp)
 40132c0:	d9c00615 	stw	r7,24(sp)
 40132c4:	003df706 	br	4012aa4 <__alt_data_end+0xfc012aa4>
 40132c8:	193d3926 	beq	r3,r4,40127b0 <__alt_data_end+0xfc0127b0>
 40132cc:	00c00f04 	movi	r3,60
 40132d0:	1885c83a 	sub	r2,r3,r2
 40132d4:	003ddf06 	br	4012a54 <__alt_data_end+0xfc012a54>
 40132d8:	e009883a 	mov	r4,fp
 40132dc:	e0001115 	stw	zero,68(fp)
 40132e0:	000b883a 	mov	r5,zero
 40132e4:	40148ec0 	call	40148ec <_Balloc>
 40132e8:	d8800715 	stw	r2,28(sp)
 40132ec:	d8c00717 	ldw	r3,28(sp)
 40132f0:	00bfffc4 	movi	r2,-1
 40132f4:	01000044 	movi	r4,1
 40132f8:	d8800c15 	stw	r2,48(sp)
 40132fc:	e0c01015 	stw	r3,64(fp)
 4013300:	d9000b15 	stw	r4,44(sp)
 4013304:	d8800615 	stw	r2,24(sp)
 4013308:	d8002215 	stw	zero,136(sp)
 401330c:	003c4106 	br	4012414 <__alt_data_end+0xfc012414>
 4013310:	d8c00c17 	ldw	r3,48(sp)
 4013314:	d8c00615 	stw	r3,24(sp)
 4013318:	003e7006 	br	4012cdc <__alt_data_end+0xfc012cdc>
 401331c:	04400044 	movi	r17,1
 4013320:	003b2006 	br	4011fa4 <__alt_data_end+0xfc011fa4>
 4013324:	000b883a 	mov	r5,zero
 4013328:	003b3d06 	br	4012020 <__alt_data_end+0xfc012020>
 401332c:	d8800c17 	ldw	r2,48(sp)
 4013330:	d8800615 	stw	r2,24(sp)
 4013334:	003e6906 	br	4012cdc <__alt_data_end+0xfc012cdc>

04013338 <__sflush_r>:
 4013338:	2880030b 	ldhu	r2,12(r5)
 401333c:	defffb04 	addi	sp,sp,-20
 4013340:	dcc00315 	stw	r19,12(sp)
 4013344:	dc400115 	stw	r17,4(sp)
 4013348:	dfc00415 	stw	ra,16(sp)
 401334c:	dc800215 	stw	r18,8(sp)
 4013350:	dc000015 	stw	r16,0(sp)
 4013354:	10c0020c 	andi	r3,r2,8
 4013358:	2823883a 	mov	r17,r5
 401335c:	2027883a 	mov	r19,r4
 4013360:	1800311e 	bne	r3,zero,4013428 <__sflush_r+0xf0>
 4013364:	28c00117 	ldw	r3,4(r5)
 4013368:	10820014 	ori	r2,r2,2048
 401336c:	2880030d 	sth	r2,12(r5)
 4013370:	00c04b0e 	bge	zero,r3,40134a0 <__sflush_r+0x168>
 4013374:	8a000a17 	ldw	r8,40(r17)
 4013378:	40002326 	beq	r8,zero,4013408 <__sflush_r+0xd0>
 401337c:	9c000017 	ldw	r16,0(r19)
 4013380:	10c4000c 	andi	r3,r2,4096
 4013384:	98000015 	stw	zero,0(r19)
 4013388:	18004826 	beq	r3,zero,40134ac <__sflush_r+0x174>
 401338c:	89801417 	ldw	r6,80(r17)
 4013390:	10c0010c 	andi	r3,r2,4
 4013394:	18000626 	beq	r3,zero,40133b0 <__sflush_r+0x78>
 4013398:	88c00117 	ldw	r3,4(r17)
 401339c:	88800c17 	ldw	r2,48(r17)
 40133a0:	30cdc83a 	sub	r6,r6,r3
 40133a4:	10000226 	beq	r2,zero,40133b0 <__sflush_r+0x78>
 40133a8:	88800f17 	ldw	r2,60(r17)
 40133ac:	308dc83a 	sub	r6,r6,r2
 40133b0:	89400717 	ldw	r5,28(r17)
 40133b4:	000f883a 	mov	r7,zero
 40133b8:	9809883a 	mov	r4,r19
 40133bc:	403ee83a 	callr	r8
 40133c0:	00ffffc4 	movi	r3,-1
 40133c4:	10c04426 	beq	r2,r3,40134d8 <__sflush_r+0x1a0>
 40133c8:	88c0030b 	ldhu	r3,12(r17)
 40133cc:	89000417 	ldw	r4,16(r17)
 40133d0:	88000115 	stw	zero,4(r17)
 40133d4:	197dffcc 	andi	r5,r3,63487
 40133d8:	8940030d 	sth	r5,12(r17)
 40133dc:	89000015 	stw	r4,0(r17)
 40133e0:	18c4000c 	andi	r3,r3,4096
 40133e4:	18002c1e 	bne	r3,zero,4013498 <__sflush_r+0x160>
 40133e8:	89400c17 	ldw	r5,48(r17)
 40133ec:	9c000015 	stw	r16,0(r19)
 40133f0:	28000526 	beq	r5,zero,4013408 <__sflush_r+0xd0>
 40133f4:	88801004 	addi	r2,r17,64
 40133f8:	28800226 	beq	r5,r2,4013404 <__sflush_r+0xcc>
 40133fc:	9809883a 	mov	r4,r19
 4013400:	4013ab40 	call	4013ab4 <_free_r>
 4013404:	88000c15 	stw	zero,48(r17)
 4013408:	0005883a 	mov	r2,zero
 401340c:	dfc00417 	ldw	ra,16(sp)
 4013410:	dcc00317 	ldw	r19,12(sp)
 4013414:	dc800217 	ldw	r18,8(sp)
 4013418:	dc400117 	ldw	r17,4(sp)
 401341c:	dc000017 	ldw	r16,0(sp)
 4013420:	dec00504 	addi	sp,sp,20
 4013424:	f800283a 	ret
 4013428:	2c800417 	ldw	r18,16(r5)
 401342c:	903ff626 	beq	r18,zero,4013408 <__alt_data_end+0xfc013408>
 4013430:	2c000017 	ldw	r16,0(r5)
 4013434:	108000cc 	andi	r2,r2,3
 4013438:	2c800015 	stw	r18,0(r5)
 401343c:	84a1c83a 	sub	r16,r16,r18
 4013440:	1000131e 	bne	r2,zero,4013490 <__sflush_r+0x158>
 4013444:	28800517 	ldw	r2,20(r5)
 4013448:	88800215 	stw	r2,8(r17)
 401344c:	04000316 	blt	zero,r16,401345c <__sflush_r+0x124>
 4013450:	003fed06 	br	4013408 <__alt_data_end+0xfc013408>
 4013454:	90a5883a 	add	r18,r18,r2
 4013458:	043feb0e 	bge	zero,r16,4013408 <__alt_data_end+0xfc013408>
 401345c:	88800917 	ldw	r2,36(r17)
 4013460:	89400717 	ldw	r5,28(r17)
 4013464:	800f883a 	mov	r7,r16
 4013468:	900d883a 	mov	r6,r18
 401346c:	9809883a 	mov	r4,r19
 4013470:	103ee83a 	callr	r2
 4013474:	80a1c83a 	sub	r16,r16,r2
 4013478:	00bff616 	blt	zero,r2,4013454 <__alt_data_end+0xfc013454>
 401347c:	88c0030b 	ldhu	r3,12(r17)
 4013480:	00bfffc4 	movi	r2,-1
 4013484:	18c01014 	ori	r3,r3,64
 4013488:	88c0030d 	sth	r3,12(r17)
 401348c:	003fdf06 	br	401340c <__alt_data_end+0xfc01340c>
 4013490:	0005883a 	mov	r2,zero
 4013494:	003fec06 	br	4013448 <__alt_data_end+0xfc013448>
 4013498:	88801415 	stw	r2,80(r17)
 401349c:	003fd206 	br	40133e8 <__alt_data_end+0xfc0133e8>
 40134a0:	28c00f17 	ldw	r3,60(r5)
 40134a4:	00ffb316 	blt	zero,r3,4013374 <__alt_data_end+0xfc013374>
 40134a8:	003fd706 	br	4013408 <__alt_data_end+0xfc013408>
 40134ac:	89400717 	ldw	r5,28(r17)
 40134b0:	000d883a 	mov	r6,zero
 40134b4:	01c00044 	movi	r7,1
 40134b8:	9809883a 	mov	r4,r19
 40134bc:	403ee83a 	callr	r8
 40134c0:	100d883a 	mov	r6,r2
 40134c4:	00bfffc4 	movi	r2,-1
 40134c8:	30801426 	beq	r6,r2,401351c <__sflush_r+0x1e4>
 40134cc:	8880030b 	ldhu	r2,12(r17)
 40134d0:	8a000a17 	ldw	r8,40(r17)
 40134d4:	003fae06 	br	4013390 <__alt_data_end+0xfc013390>
 40134d8:	98c00017 	ldw	r3,0(r19)
 40134dc:	183fba26 	beq	r3,zero,40133c8 <__alt_data_end+0xfc0133c8>
 40134e0:	01000744 	movi	r4,29
 40134e4:	19000626 	beq	r3,r4,4013500 <__sflush_r+0x1c8>
 40134e8:	01000584 	movi	r4,22
 40134ec:	19000426 	beq	r3,r4,4013500 <__sflush_r+0x1c8>
 40134f0:	88c0030b 	ldhu	r3,12(r17)
 40134f4:	18c01014 	ori	r3,r3,64
 40134f8:	88c0030d 	sth	r3,12(r17)
 40134fc:	003fc306 	br	401340c <__alt_data_end+0xfc01340c>
 4013500:	8880030b 	ldhu	r2,12(r17)
 4013504:	88c00417 	ldw	r3,16(r17)
 4013508:	88000115 	stw	zero,4(r17)
 401350c:	10bdffcc 	andi	r2,r2,63487
 4013510:	8880030d 	sth	r2,12(r17)
 4013514:	88c00015 	stw	r3,0(r17)
 4013518:	003fb306 	br	40133e8 <__alt_data_end+0xfc0133e8>
 401351c:	98800017 	ldw	r2,0(r19)
 4013520:	103fea26 	beq	r2,zero,40134cc <__alt_data_end+0xfc0134cc>
 4013524:	00c00744 	movi	r3,29
 4013528:	10c00226 	beq	r2,r3,4013534 <__sflush_r+0x1fc>
 401352c:	00c00584 	movi	r3,22
 4013530:	10c0031e 	bne	r2,r3,4013540 <__sflush_r+0x208>
 4013534:	9c000015 	stw	r16,0(r19)
 4013538:	0005883a 	mov	r2,zero
 401353c:	003fb306 	br	401340c <__alt_data_end+0xfc01340c>
 4013540:	88c0030b 	ldhu	r3,12(r17)
 4013544:	3005883a 	mov	r2,r6
 4013548:	18c01014 	ori	r3,r3,64
 401354c:	88c0030d 	sth	r3,12(r17)
 4013550:	003fae06 	br	401340c <__alt_data_end+0xfc01340c>

04013554 <_fflush_r>:
 4013554:	defffd04 	addi	sp,sp,-12
 4013558:	dc000115 	stw	r16,4(sp)
 401355c:	dfc00215 	stw	ra,8(sp)
 4013560:	2021883a 	mov	r16,r4
 4013564:	20000226 	beq	r4,zero,4013570 <_fflush_r+0x1c>
 4013568:	20800e17 	ldw	r2,56(r4)
 401356c:	10000c26 	beq	r2,zero,40135a0 <_fflush_r+0x4c>
 4013570:	2880030f 	ldh	r2,12(r5)
 4013574:	1000051e 	bne	r2,zero,401358c <_fflush_r+0x38>
 4013578:	0005883a 	mov	r2,zero
 401357c:	dfc00217 	ldw	ra,8(sp)
 4013580:	dc000117 	ldw	r16,4(sp)
 4013584:	dec00304 	addi	sp,sp,12
 4013588:	f800283a 	ret
 401358c:	8009883a 	mov	r4,r16
 4013590:	dfc00217 	ldw	ra,8(sp)
 4013594:	dc000117 	ldw	r16,4(sp)
 4013598:	dec00304 	addi	sp,sp,12
 401359c:	40133381 	jmpi	4013338 <__sflush_r>
 40135a0:	d9400015 	stw	r5,0(sp)
 40135a4:	40139400 	call	4013940 <__sinit>
 40135a8:	d9400017 	ldw	r5,0(sp)
 40135ac:	003ff006 	br	4013570 <__alt_data_end+0xfc013570>

040135b0 <fflush>:
 40135b0:	20000526 	beq	r4,zero,40135c8 <fflush+0x18>
 40135b4:	008100f4 	movhi	r2,1027
 40135b8:	10a98804 	addi	r2,r2,-23008
 40135bc:	200b883a 	mov	r5,r4
 40135c0:	11000017 	ldw	r4,0(r2)
 40135c4:	40135541 	jmpi	4013554 <_fflush_r>
 40135c8:	008100f4 	movhi	r2,1027
 40135cc:	10a98704 	addi	r2,r2,-23012
 40135d0:	11000017 	ldw	r4,0(r2)
 40135d4:	01410074 	movhi	r5,1025
 40135d8:	294d5504 	addi	r5,r5,13652
 40135dc:	40143501 	jmpi	4014350 <_fwalk_reent>

040135e0 <__fp_unlock>:
 40135e0:	0005883a 	mov	r2,zero
 40135e4:	f800283a 	ret

040135e8 <_cleanup_r>:
 40135e8:	01410074 	movhi	r5,1025
 40135ec:	295f0004 	addi	r5,r5,31744
 40135f0:	40143501 	jmpi	4014350 <_fwalk_reent>

040135f4 <__sinit.part.1>:
 40135f4:	defff704 	addi	sp,sp,-36
 40135f8:	00c10074 	movhi	r3,1025
 40135fc:	dfc00815 	stw	ra,32(sp)
 4013600:	ddc00715 	stw	r23,28(sp)
 4013604:	dd800615 	stw	r22,24(sp)
 4013608:	dd400515 	stw	r21,20(sp)
 401360c:	dd000415 	stw	r20,16(sp)
 4013610:	dcc00315 	stw	r19,12(sp)
 4013614:	dc800215 	stw	r18,8(sp)
 4013618:	dc400115 	stw	r17,4(sp)
 401361c:	dc000015 	stw	r16,0(sp)
 4013620:	18cd7a04 	addi	r3,r3,13800
 4013624:	24000117 	ldw	r16,4(r4)
 4013628:	20c00f15 	stw	r3,60(r4)
 401362c:	2080bb04 	addi	r2,r4,748
 4013630:	00c000c4 	movi	r3,3
 4013634:	20c0b915 	stw	r3,740(r4)
 4013638:	2080ba15 	stw	r2,744(r4)
 401363c:	2000b815 	stw	zero,736(r4)
 4013640:	05c00204 	movi	r23,8
 4013644:	00800104 	movi	r2,4
 4013648:	2025883a 	mov	r18,r4
 401364c:	b80d883a 	mov	r6,r23
 4013650:	81001704 	addi	r4,r16,92
 4013654:	000b883a 	mov	r5,zero
 4013658:	80000015 	stw	zero,0(r16)
 401365c:	80000115 	stw	zero,4(r16)
 4013660:	80000215 	stw	zero,8(r16)
 4013664:	8080030d 	sth	r2,12(r16)
 4013668:	80001915 	stw	zero,100(r16)
 401366c:	8000038d 	sth	zero,14(r16)
 4013670:	80000415 	stw	zero,16(r16)
 4013674:	80000515 	stw	zero,20(r16)
 4013678:	80000615 	stw	zero,24(r16)
 401367c:	400ee240 	call	400ee24 <memset>
 4013680:	05810074 	movhi	r22,1025
 4013684:	94400217 	ldw	r17,8(r18)
 4013688:	05410074 	movhi	r21,1025
 401368c:	05010074 	movhi	r20,1025
 4013690:	04c10074 	movhi	r19,1025
 4013694:	b5983904 	addi	r22,r22,24804
 4013698:	ad585004 	addi	r21,r21,24896
 401369c:	a5186f04 	addi	r20,r20,25020
 40136a0:	9cd88604 	addi	r19,r19,25112
 40136a4:	85800815 	stw	r22,32(r16)
 40136a8:	85400915 	stw	r21,36(r16)
 40136ac:	85000a15 	stw	r20,40(r16)
 40136b0:	84c00b15 	stw	r19,44(r16)
 40136b4:	84000715 	stw	r16,28(r16)
 40136b8:	00800284 	movi	r2,10
 40136bc:	8880030d 	sth	r2,12(r17)
 40136c0:	00800044 	movi	r2,1
 40136c4:	b80d883a 	mov	r6,r23
 40136c8:	89001704 	addi	r4,r17,92
 40136cc:	000b883a 	mov	r5,zero
 40136d0:	88000015 	stw	zero,0(r17)
 40136d4:	88000115 	stw	zero,4(r17)
 40136d8:	88000215 	stw	zero,8(r17)
 40136dc:	88001915 	stw	zero,100(r17)
 40136e0:	8880038d 	sth	r2,14(r17)
 40136e4:	88000415 	stw	zero,16(r17)
 40136e8:	88000515 	stw	zero,20(r17)
 40136ec:	88000615 	stw	zero,24(r17)
 40136f0:	400ee240 	call	400ee24 <memset>
 40136f4:	94000317 	ldw	r16,12(r18)
 40136f8:	00800484 	movi	r2,18
 40136fc:	8c400715 	stw	r17,28(r17)
 4013700:	8d800815 	stw	r22,32(r17)
 4013704:	8d400915 	stw	r21,36(r17)
 4013708:	8d000a15 	stw	r20,40(r17)
 401370c:	8cc00b15 	stw	r19,44(r17)
 4013710:	8080030d 	sth	r2,12(r16)
 4013714:	00800084 	movi	r2,2
 4013718:	80000015 	stw	zero,0(r16)
 401371c:	80000115 	stw	zero,4(r16)
 4013720:	80000215 	stw	zero,8(r16)
 4013724:	80001915 	stw	zero,100(r16)
 4013728:	8080038d 	sth	r2,14(r16)
 401372c:	80000415 	stw	zero,16(r16)
 4013730:	80000515 	stw	zero,20(r16)
 4013734:	80000615 	stw	zero,24(r16)
 4013738:	b80d883a 	mov	r6,r23
 401373c:	000b883a 	mov	r5,zero
 4013740:	81001704 	addi	r4,r16,92
 4013744:	400ee240 	call	400ee24 <memset>
 4013748:	00800044 	movi	r2,1
 401374c:	84000715 	stw	r16,28(r16)
 4013750:	85800815 	stw	r22,32(r16)
 4013754:	85400915 	stw	r21,36(r16)
 4013758:	85000a15 	stw	r20,40(r16)
 401375c:	84c00b15 	stw	r19,44(r16)
 4013760:	90800e15 	stw	r2,56(r18)
 4013764:	dfc00817 	ldw	ra,32(sp)
 4013768:	ddc00717 	ldw	r23,28(sp)
 401376c:	dd800617 	ldw	r22,24(sp)
 4013770:	dd400517 	ldw	r21,20(sp)
 4013774:	dd000417 	ldw	r20,16(sp)
 4013778:	dcc00317 	ldw	r19,12(sp)
 401377c:	dc800217 	ldw	r18,8(sp)
 4013780:	dc400117 	ldw	r17,4(sp)
 4013784:	dc000017 	ldw	r16,0(sp)
 4013788:	dec00904 	addi	sp,sp,36
 401378c:	f800283a 	ret

04013790 <__fp_lock>:
 4013790:	0005883a 	mov	r2,zero
 4013794:	f800283a 	ret

04013798 <__sfmoreglue>:
 4013798:	defffc04 	addi	sp,sp,-16
 401379c:	dc800215 	stw	r18,8(sp)
 40137a0:	2825883a 	mov	r18,r5
 40137a4:	dc000015 	stw	r16,0(sp)
 40137a8:	01401a04 	movi	r5,104
 40137ac:	2021883a 	mov	r16,r4
 40137b0:	913fffc4 	addi	r4,r18,-1
 40137b4:	dfc00315 	stw	ra,12(sp)
 40137b8:	dc400115 	stw	r17,4(sp)
 40137bc:	400d3680 	call	400d368 <__mulsi3>
 40137c0:	8009883a 	mov	r4,r16
 40137c4:	11401d04 	addi	r5,r2,116
 40137c8:	1023883a 	mov	r17,r2
 40137cc:	400e4d00 	call	400e4d0 <_malloc_r>
 40137d0:	1021883a 	mov	r16,r2
 40137d4:	10000726 	beq	r2,zero,40137f4 <__sfmoreglue+0x5c>
 40137d8:	11000304 	addi	r4,r2,12
 40137dc:	10000015 	stw	zero,0(r2)
 40137e0:	14800115 	stw	r18,4(r2)
 40137e4:	11000215 	stw	r4,8(r2)
 40137e8:	89801a04 	addi	r6,r17,104
 40137ec:	000b883a 	mov	r5,zero
 40137f0:	400ee240 	call	400ee24 <memset>
 40137f4:	8005883a 	mov	r2,r16
 40137f8:	dfc00317 	ldw	ra,12(sp)
 40137fc:	dc800217 	ldw	r18,8(sp)
 4013800:	dc400117 	ldw	r17,4(sp)
 4013804:	dc000017 	ldw	r16,0(sp)
 4013808:	dec00404 	addi	sp,sp,16
 401380c:	f800283a 	ret

04013810 <__sfp>:
 4013810:	defffb04 	addi	sp,sp,-20
 4013814:	dc000015 	stw	r16,0(sp)
 4013818:	040100f4 	movhi	r16,1027
 401381c:	84298704 	addi	r16,r16,-23012
 4013820:	dcc00315 	stw	r19,12(sp)
 4013824:	2027883a 	mov	r19,r4
 4013828:	81000017 	ldw	r4,0(r16)
 401382c:	dfc00415 	stw	ra,16(sp)
 4013830:	dc800215 	stw	r18,8(sp)
 4013834:	20800e17 	ldw	r2,56(r4)
 4013838:	dc400115 	stw	r17,4(sp)
 401383c:	1000021e 	bne	r2,zero,4013848 <__sfp+0x38>
 4013840:	40135f40 	call	40135f4 <__sinit.part.1>
 4013844:	81000017 	ldw	r4,0(r16)
 4013848:	2480b804 	addi	r18,r4,736
 401384c:	047fffc4 	movi	r17,-1
 4013850:	91000117 	ldw	r4,4(r18)
 4013854:	94000217 	ldw	r16,8(r18)
 4013858:	213fffc4 	addi	r4,r4,-1
 401385c:	20000a16 	blt	r4,zero,4013888 <__sfp+0x78>
 4013860:	8080030f 	ldh	r2,12(r16)
 4013864:	10000c26 	beq	r2,zero,4013898 <__sfp+0x88>
 4013868:	80c01d04 	addi	r3,r16,116
 401386c:	00000206 	br	4013878 <__sfp+0x68>
 4013870:	18bfe60f 	ldh	r2,-104(r3)
 4013874:	10000826 	beq	r2,zero,4013898 <__sfp+0x88>
 4013878:	213fffc4 	addi	r4,r4,-1
 401387c:	1c3ffd04 	addi	r16,r3,-12
 4013880:	18c01a04 	addi	r3,r3,104
 4013884:	247ffa1e 	bne	r4,r17,4013870 <__alt_data_end+0xfc013870>
 4013888:	90800017 	ldw	r2,0(r18)
 401388c:	10001d26 	beq	r2,zero,4013904 <__sfp+0xf4>
 4013890:	1025883a 	mov	r18,r2
 4013894:	003fee06 	br	4013850 <__alt_data_end+0xfc013850>
 4013898:	00bfffc4 	movi	r2,-1
 401389c:	8080038d 	sth	r2,14(r16)
 40138a0:	00800044 	movi	r2,1
 40138a4:	8080030d 	sth	r2,12(r16)
 40138a8:	80001915 	stw	zero,100(r16)
 40138ac:	80000015 	stw	zero,0(r16)
 40138b0:	80000215 	stw	zero,8(r16)
 40138b4:	80000115 	stw	zero,4(r16)
 40138b8:	80000415 	stw	zero,16(r16)
 40138bc:	80000515 	stw	zero,20(r16)
 40138c0:	80000615 	stw	zero,24(r16)
 40138c4:	01800204 	movi	r6,8
 40138c8:	000b883a 	mov	r5,zero
 40138cc:	81001704 	addi	r4,r16,92
 40138d0:	400ee240 	call	400ee24 <memset>
 40138d4:	8005883a 	mov	r2,r16
 40138d8:	80000c15 	stw	zero,48(r16)
 40138dc:	80000d15 	stw	zero,52(r16)
 40138e0:	80001115 	stw	zero,68(r16)
 40138e4:	80001215 	stw	zero,72(r16)
 40138e8:	dfc00417 	ldw	ra,16(sp)
 40138ec:	dcc00317 	ldw	r19,12(sp)
 40138f0:	dc800217 	ldw	r18,8(sp)
 40138f4:	dc400117 	ldw	r17,4(sp)
 40138f8:	dc000017 	ldw	r16,0(sp)
 40138fc:	dec00504 	addi	sp,sp,20
 4013900:	f800283a 	ret
 4013904:	01400104 	movi	r5,4
 4013908:	9809883a 	mov	r4,r19
 401390c:	40137980 	call	4013798 <__sfmoreglue>
 4013910:	90800015 	stw	r2,0(r18)
 4013914:	103fde1e 	bne	r2,zero,4013890 <__alt_data_end+0xfc013890>
 4013918:	00800304 	movi	r2,12
 401391c:	98800015 	stw	r2,0(r19)
 4013920:	0005883a 	mov	r2,zero
 4013924:	003ff006 	br	40138e8 <__alt_data_end+0xfc0138e8>

04013928 <_cleanup>:
 4013928:	008100f4 	movhi	r2,1027
 401392c:	10a98704 	addi	r2,r2,-23012
 4013930:	11000017 	ldw	r4,0(r2)
 4013934:	01410074 	movhi	r5,1025
 4013938:	295f0004 	addi	r5,r5,31744
 401393c:	40143501 	jmpi	4014350 <_fwalk_reent>

04013940 <__sinit>:
 4013940:	20800e17 	ldw	r2,56(r4)
 4013944:	10000126 	beq	r2,zero,401394c <__sinit+0xc>
 4013948:	f800283a 	ret
 401394c:	40135f41 	jmpi	40135f4 <__sinit.part.1>

04013950 <__sfp_lock_acquire>:
 4013950:	f800283a 	ret

04013954 <__sfp_lock_release>:
 4013954:	f800283a 	ret

04013958 <__sinit_lock_acquire>:
 4013958:	f800283a 	ret

0401395c <__sinit_lock_release>:
 401395c:	f800283a 	ret

04013960 <__fp_lock_all>:
 4013960:	008100f4 	movhi	r2,1027
 4013964:	10a98804 	addi	r2,r2,-23008
 4013968:	11000017 	ldw	r4,0(r2)
 401396c:	01410074 	movhi	r5,1025
 4013970:	294de404 	addi	r5,r5,14224
 4013974:	401428c1 	jmpi	401428c <_fwalk>

04013978 <__fp_unlock_all>:
 4013978:	008100f4 	movhi	r2,1027
 401397c:	10a98804 	addi	r2,r2,-23008
 4013980:	11000017 	ldw	r4,0(r2)
 4013984:	01410074 	movhi	r5,1025
 4013988:	294d7804 	addi	r5,r5,13792
 401398c:	401428c1 	jmpi	401428c <_fwalk>

04013990 <_malloc_trim_r>:
 4013990:	defffb04 	addi	sp,sp,-20
 4013994:	dcc00315 	stw	r19,12(sp)
 4013998:	04c100b4 	movhi	r19,1026
 401399c:	dc800215 	stw	r18,8(sp)
 40139a0:	dc400115 	stw	r17,4(sp)
 40139a4:	dc000015 	stw	r16,0(sp)
 40139a8:	dfc00415 	stw	ra,16(sp)
 40139ac:	2821883a 	mov	r16,r5
 40139b0:	9cde2b04 	addi	r19,r19,30892
 40139b4:	2025883a 	mov	r18,r4
 40139b8:	401bdc00 	call	401bdc0 <__malloc_lock>
 40139bc:	98800217 	ldw	r2,8(r19)
 40139c0:	14400117 	ldw	r17,4(r2)
 40139c4:	00bfff04 	movi	r2,-4
 40139c8:	88a2703a 	and	r17,r17,r2
 40139cc:	8c21c83a 	sub	r16,r17,r16
 40139d0:	8403fbc4 	addi	r16,r16,4079
 40139d4:	8020d33a 	srli	r16,r16,12
 40139d8:	0083ffc4 	movi	r2,4095
 40139dc:	843fffc4 	addi	r16,r16,-1
 40139e0:	8020933a 	slli	r16,r16,12
 40139e4:	1400060e 	bge	r2,r16,4013a00 <_malloc_trim_r+0x70>
 40139e8:	000b883a 	mov	r5,zero
 40139ec:	9009883a 	mov	r4,r18
 40139f0:	400f0ac0 	call	400f0ac <_sbrk_r>
 40139f4:	98c00217 	ldw	r3,8(r19)
 40139f8:	1c47883a 	add	r3,r3,r17
 40139fc:	10c00a26 	beq	r2,r3,4013a28 <_malloc_trim_r+0x98>
 4013a00:	9009883a 	mov	r4,r18
 4013a04:	401bde40 	call	401bde4 <__malloc_unlock>
 4013a08:	0005883a 	mov	r2,zero
 4013a0c:	dfc00417 	ldw	ra,16(sp)
 4013a10:	dcc00317 	ldw	r19,12(sp)
 4013a14:	dc800217 	ldw	r18,8(sp)
 4013a18:	dc400117 	ldw	r17,4(sp)
 4013a1c:	dc000017 	ldw	r16,0(sp)
 4013a20:	dec00504 	addi	sp,sp,20
 4013a24:	f800283a 	ret
 4013a28:	040bc83a 	sub	r5,zero,r16
 4013a2c:	9009883a 	mov	r4,r18
 4013a30:	400f0ac0 	call	400f0ac <_sbrk_r>
 4013a34:	00ffffc4 	movi	r3,-1
 4013a38:	10c00d26 	beq	r2,r3,4013a70 <_malloc_trim_r+0xe0>
 4013a3c:	00c100f4 	movhi	r3,1027
 4013a40:	18f65d04 	addi	r3,r3,-9868
 4013a44:	18800017 	ldw	r2,0(r3)
 4013a48:	99000217 	ldw	r4,8(r19)
 4013a4c:	8c23c83a 	sub	r17,r17,r16
 4013a50:	8c400054 	ori	r17,r17,1
 4013a54:	1421c83a 	sub	r16,r2,r16
 4013a58:	24400115 	stw	r17,4(r4)
 4013a5c:	9009883a 	mov	r4,r18
 4013a60:	1c000015 	stw	r16,0(r3)
 4013a64:	401bde40 	call	401bde4 <__malloc_unlock>
 4013a68:	00800044 	movi	r2,1
 4013a6c:	003fe706 	br	4013a0c <__alt_data_end+0xfc013a0c>
 4013a70:	000b883a 	mov	r5,zero
 4013a74:	9009883a 	mov	r4,r18
 4013a78:	400f0ac0 	call	400f0ac <_sbrk_r>
 4013a7c:	99000217 	ldw	r4,8(r19)
 4013a80:	014003c4 	movi	r5,15
 4013a84:	1107c83a 	sub	r3,r2,r4
 4013a88:	28ffdd0e 	bge	r5,r3,4013a00 <__alt_data_end+0xfc013a00>
 4013a8c:	014100f4 	movhi	r5,1027
 4013a90:	29698904 	addi	r5,r5,-23004
 4013a94:	29400017 	ldw	r5,0(r5)
 4013a98:	18c00054 	ori	r3,r3,1
 4013a9c:	20c00115 	stw	r3,4(r4)
 4013aa0:	00c100f4 	movhi	r3,1027
 4013aa4:	1145c83a 	sub	r2,r2,r5
 4013aa8:	18f65d04 	addi	r3,r3,-9868
 4013aac:	18800015 	stw	r2,0(r3)
 4013ab0:	003fd306 	br	4013a00 <__alt_data_end+0xfc013a00>

04013ab4 <_free_r>:
 4013ab4:	28004126 	beq	r5,zero,4013bbc <_free_r+0x108>
 4013ab8:	defffd04 	addi	sp,sp,-12
 4013abc:	dc400115 	stw	r17,4(sp)
 4013ac0:	dc000015 	stw	r16,0(sp)
 4013ac4:	2023883a 	mov	r17,r4
 4013ac8:	2821883a 	mov	r16,r5
 4013acc:	dfc00215 	stw	ra,8(sp)
 4013ad0:	401bdc00 	call	401bdc0 <__malloc_lock>
 4013ad4:	81ffff17 	ldw	r7,-4(r16)
 4013ad8:	00bfff84 	movi	r2,-2
 4013adc:	010100b4 	movhi	r4,1026
 4013ae0:	81bffe04 	addi	r6,r16,-8
 4013ae4:	3884703a 	and	r2,r7,r2
 4013ae8:	211e2b04 	addi	r4,r4,30892
 4013aec:	308b883a 	add	r5,r6,r2
 4013af0:	2a400117 	ldw	r9,4(r5)
 4013af4:	22000217 	ldw	r8,8(r4)
 4013af8:	00ffff04 	movi	r3,-4
 4013afc:	48c6703a 	and	r3,r9,r3
 4013b00:	2a005726 	beq	r5,r8,4013c60 <_free_r+0x1ac>
 4013b04:	28c00115 	stw	r3,4(r5)
 4013b08:	39c0004c 	andi	r7,r7,1
 4013b0c:	3800091e 	bne	r7,zero,4013b34 <_free_r+0x80>
 4013b10:	823ffe17 	ldw	r8,-8(r16)
 4013b14:	22400204 	addi	r9,r4,8
 4013b18:	320dc83a 	sub	r6,r6,r8
 4013b1c:	31c00217 	ldw	r7,8(r6)
 4013b20:	1205883a 	add	r2,r2,r8
 4013b24:	3a406526 	beq	r7,r9,4013cbc <_free_r+0x208>
 4013b28:	32000317 	ldw	r8,12(r6)
 4013b2c:	3a000315 	stw	r8,12(r7)
 4013b30:	41c00215 	stw	r7,8(r8)
 4013b34:	28cf883a 	add	r7,r5,r3
 4013b38:	39c00117 	ldw	r7,4(r7)
 4013b3c:	39c0004c 	andi	r7,r7,1
 4013b40:	38003a26 	beq	r7,zero,4013c2c <_free_r+0x178>
 4013b44:	10c00054 	ori	r3,r2,1
 4013b48:	30c00115 	stw	r3,4(r6)
 4013b4c:	3087883a 	add	r3,r6,r2
 4013b50:	18800015 	stw	r2,0(r3)
 4013b54:	00c07fc4 	movi	r3,511
 4013b58:	18801936 	bltu	r3,r2,4013bc0 <_free_r+0x10c>
 4013b5c:	1004d0fa 	srli	r2,r2,3
 4013b60:	01c00044 	movi	r7,1
 4013b64:	21400117 	ldw	r5,4(r4)
 4013b68:	10c00044 	addi	r3,r2,1
 4013b6c:	18c7883a 	add	r3,r3,r3
 4013b70:	1005d0ba 	srai	r2,r2,2
 4013b74:	18c7883a 	add	r3,r3,r3
 4013b78:	18c7883a 	add	r3,r3,r3
 4013b7c:	1907883a 	add	r3,r3,r4
 4013b80:	3884983a 	sll	r2,r7,r2
 4013b84:	19c00017 	ldw	r7,0(r3)
 4013b88:	1a3ffe04 	addi	r8,r3,-8
 4013b8c:	1144b03a 	or	r2,r2,r5
 4013b90:	32000315 	stw	r8,12(r6)
 4013b94:	31c00215 	stw	r7,8(r6)
 4013b98:	20800115 	stw	r2,4(r4)
 4013b9c:	19800015 	stw	r6,0(r3)
 4013ba0:	39800315 	stw	r6,12(r7)
 4013ba4:	8809883a 	mov	r4,r17
 4013ba8:	dfc00217 	ldw	ra,8(sp)
 4013bac:	dc400117 	ldw	r17,4(sp)
 4013bb0:	dc000017 	ldw	r16,0(sp)
 4013bb4:	dec00304 	addi	sp,sp,12
 4013bb8:	401bde41 	jmpi	401bde4 <__malloc_unlock>
 4013bbc:	f800283a 	ret
 4013bc0:	100ad27a 	srli	r5,r2,9
 4013bc4:	00c00104 	movi	r3,4
 4013bc8:	19404a36 	bltu	r3,r5,4013cf4 <_free_r+0x240>
 4013bcc:	100ad1ba 	srli	r5,r2,6
 4013bd0:	28c00e44 	addi	r3,r5,57
 4013bd4:	18c7883a 	add	r3,r3,r3
 4013bd8:	29400e04 	addi	r5,r5,56
 4013bdc:	18c7883a 	add	r3,r3,r3
 4013be0:	18c7883a 	add	r3,r3,r3
 4013be4:	1909883a 	add	r4,r3,r4
 4013be8:	20c00017 	ldw	r3,0(r4)
 4013bec:	01c100b4 	movhi	r7,1026
 4013bf0:	213ffe04 	addi	r4,r4,-8
 4013bf4:	39de2b04 	addi	r7,r7,30892
 4013bf8:	20c04426 	beq	r4,r3,4013d0c <_free_r+0x258>
 4013bfc:	01ffff04 	movi	r7,-4
 4013c00:	19400117 	ldw	r5,4(r3)
 4013c04:	29ca703a 	and	r5,r5,r7
 4013c08:	1140022e 	bgeu	r2,r5,4013c14 <_free_r+0x160>
 4013c0c:	18c00217 	ldw	r3,8(r3)
 4013c10:	20fffb1e 	bne	r4,r3,4013c00 <__alt_data_end+0xfc013c00>
 4013c14:	19000317 	ldw	r4,12(r3)
 4013c18:	31000315 	stw	r4,12(r6)
 4013c1c:	30c00215 	stw	r3,8(r6)
 4013c20:	21800215 	stw	r6,8(r4)
 4013c24:	19800315 	stw	r6,12(r3)
 4013c28:	003fde06 	br	4013ba4 <__alt_data_end+0xfc013ba4>
 4013c2c:	29c00217 	ldw	r7,8(r5)
 4013c30:	10c5883a 	add	r2,r2,r3
 4013c34:	00c100b4 	movhi	r3,1026
 4013c38:	18de2d04 	addi	r3,r3,30900
 4013c3c:	38c03b26 	beq	r7,r3,4013d2c <_free_r+0x278>
 4013c40:	2a000317 	ldw	r8,12(r5)
 4013c44:	11400054 	ori	r5,r2,1
 4013c48:	3087883a 	add	r3,r6,r2
 4013c4c:	3a000315 	stw	r8,12(r7)
 4013c50:	41c00215 	stw	r7,8(r8)
 4013c54:	31400115 	stw	r5,4(r6)
 4013c58:	18800015 	stw	r2,0(r3)
 4013c5c:	003fbd06 	br	4013b54 <__alt_data_end+0xfc013b54>
 4013c60:	39c0004c 	andi	r7,r7,1
 4013c64:	10c5883a 	add	r2,r2,r3
 4013c68:	3800071e 	bne	r7,zero,4013c88 <_free_r+0x1d4>
 4013c6c:	81fffe17 	ldw	r7,-8(r16)
 4013c70:	31cdc83a 	sub	r6,r6,r7
 4013c74:	30c00317 	ldw	r3,12(r6)
 4013c78:	31400217 	ldw	r5,8(r6)
 4013c7c:	11c5883a 	add	r2,r2,r7
 4013c80:	28c00315 	stw	r3,12(r5)
 4013c84:	19400215 	stw	r5,8(r3)
 4013c88:	10c00054 	ori	r3,r2,1
 4013c8c:	30c00115 	stw	r3,4(r6)
 4013c90:	00c100f4 	movhi	r3,1027
 4013c94:	18e98a04 	addi	r3,r3,-23000
 4013c98:	18c00017 	ldw	r3,0(r3)
 4013c9c:	21800215 	stw	r6,8(r4)
 4013ca0:	10ffc036 	bltu	r2,r3,4013ba4 <__alt_data_end+0xfc013ba4>
 4013ca4:	008100f4 	movhi	r2,1027
 4013ca8:	10b61904 	addi	r2,r2,-10140
 4013cac:	11400017 	ldw	r5,0(r2)
 4013cb0:	8809883a 	mov	r4,r17
 4013cb4:	40139900 	call	4013990 <_malloc_trim_r>
 4013cb8:	003fba06 	br	4013ba4 <__alt_data_end+0xfc013ba4>
 4013cbc:	28c9883a 	add	r4,r5,r3
 4013cc0:	21000117 	ldw	r4,4(r4)
 4013cc4:	2100004c 	andi	r4,r4,1
 4013cc8:	2000391e 	bne	r4,zero,4013db0 <_free_r+0x2fc>
 4013ccc:	29c00217 	ldw	r7,8(r5)
 4013cd0:	29000317 	ldw	r4,12(r5)
 4013cd4:	1885883a 	add	r2,r3,r2
 4013cd8:	10c00054 	ori	r3,r2,1
 4013cdc:	39000315 	stw	r4,12(r7)
 4013ce0:	21c00215 	stw	r7,8(r4)
 4013ce4:	30c00115 	stw	r3,4(r6)
 4013ce8:	308d883a 	add	r6,r6,r2
 4013cec:	30800015 	stw	r2,0(r6)
 4013cf0:	003fac06 	br	4013ba4 <__alt_data_end+0xfc013ba4>
 4013cf4:	00c00504 	movi	r3,20
 4013cf8:	19401536 	bltu	r3,r5,4013d50 <_free_r+0x29c>
 4013cfc:	28c01704 	addi	r3,r5,92
 4013d00:	18c7883a 	add	r3,r3,r3
 4013d04:	294016c4 	addi	r5,r5,91
 4013d08:	003fb406 	br	4013bdc <__alt_data_end+0xfc013bdc>
 4013d0c:	280bd0ba 	srai	r5,r5,2
 4013d10:	00c00044 	movi	r3,1
 4013d14:	38800117 	ldw	r2,4(r7)
 4013d18:	194a983a 	sll	r5,r3,r5
 4013d1c:	2007883a 	mov	r3,r4
 4013d20:	2884b03a 	or	r2,r5,r2
 4013d24:	38800115 	stw	r2,4(r7)
 4013d28:	003fbb06 	br	4013c18 <__alt_data_end+0xfc013c18>
 4013d2c:	21800515 	stw	r6,20(r4)
 4013d30:	21800415 	stw	r6,16(r4)
 4013d34:	10c00054 	ori	r3,r2,1
 4013d38:	31c00315 	stw	r7,12(r6)
 4013d3c:	31c00215 	stw	r7,8(r6)
 4013d40:	30c00115 	stw	r3,4(r6)
 4013d44:	308d883a 	add	r6,r6,r2
 4013d48:	30800015 	stw	r2,0(r6)
 4013d4c:	003f9506 	br	4013ba4 <__alt_data_end+0xfc013ba4>
 4013d50:	00c01504 	movi	r3,84
 4013d54:	19400536 	bltu	r3,r5,4013d6c <_free_r+0x2b8>
 4013d58:	100ad33a 	srli	r5,r2,12
 4013d5c:	28c01bc4 	addi	r3,r5,111
 4013d60:	18c7883a 	add	r3,r3,r3
 4013d64:	29401b84 	addi	r5,r5,110
 4013d68:	003f9c06 	br	4013bdc <__alt_data_end+0xfc013bdc>
 4013d6c:	00c05504 	movi	r3,340
 4013d70:	19400536 	bltu	r3,r5,4013d88 <_free_r+0x2d4>
 4013d74:	100ad3fa 	srli	r5,r2,15
 4013d78:	28c01e04 	addi	r3,r5,120
 4013d7c:	18c7883a 	add	r3,r3,r3
 4013d80:	29401dc4 	addi	r5,r5,119
 4013d84:	003f9506 	br	4013bdc <__alt_data_end+0xfc013bdc>
 4013d88:	00c15504 	movi	r3,1364
 4013d8c:	19400536 	bltu	r3,r5,4013da4 <_free_r+0x2f0>
 4013d90:	100ad4ba 	srli	r5,r2,18
 4013d94:	28c01f44 	addi	r3,r5,125
 4013d98:	18c7883a 	add	r3,r3,r3
 4013d9c:	29401f04 	addi	r5,r5,124
 4013da0:	003f8e06 	br	4013bdc <__alt_data_end+0xfc013bdc>
 4013da4:	00c03f84 	movi	r3,254
 4013da8:	01401f84 	movi	r5,126
 4013dac:	003f8b06 	br	4013bdc <__alt_data_end+0xfc013bdc>
 4013db0:	10c00054 	ori	r3,r2,1
 4013db4:	30c00115 	stw	r3,4(r6)
 4013db8:	308d883a 	add	r6,r6,r2
 4013dbc:	30800015 	stw	r2,0(r6)
 4013dc0:	003f7806 	br	4013ba4 <__alt_data_end+0xfc013ba4>

04013dc4 <__sfvwrite_r>:
 4013dc4:	30800217 	ldw	r2,8(r6)
 4013dc8:	10006726 	beq	r2,zero,4013f68 <__sfvwrite_r+0x1a4>
 4013dcc:	28c0030b 	ldhu	r3,12(r5)
 4013dd0:	defff404 	addi	sp,sp,-48
 4013dd4:	dd400715 	stw	r21,28(sp)
 4013dd8:	dd000615 	stw	r20,24(sp)
 4013ddc:	dc000215 	stw	r16,8(sp)
 4013de0:	dfc00b15 	stw	ra,44(sp)
 4013de4:	df000a15 	stw	fp,40(sp)
 4013de8:	ddc00915 	stw	r23,36(sp)
 4013dec:	dd800815 	stw	r22,32(sp)
 4013df0:	dcc00515 	stw	r19,20(sp)
 4013df4:	dc800415 	stw	r18,16(sp)
 4013df8:	dc400315 	stw	r17,12(sp)
 4013dfc:	1880020c 	andi	r2,r3,8
 4013e00:	2821883a 	mov	r16,r5
 4013e04:	202b883a 	mov	r21,r4
 4013e08:	3029883a 	mov	r20,r6
 4013e0c:	10002726 	beq	r2,zero,4013eac <__sfvwrite_r+0xe8>
 4013e10:	28800417 	ldw	r2,16(r5)
 4013e14:	10002526 	beq	r2,zero,4013eac <__sfvwrite_r+0xe8>
 4013e18:	1880008c 	andi	r2,r3,2
 4013e1c:	a4400017 	ldw	r17,0(r20)
 4013e20:	10002a26 	beq	r2,zero,4013ecc <__sfvwrite_r+0x108>
 4013e24:	05a00034 	movhi	r22,32768
 4013e28:	0027883a 	mov	r19,zero
 4013e2c:	0025883a 	mov	r18,zero
 4013e30:	b5bf0004 	addi	r22,r22,-1024
 4013e34:	980d883a 	mov	r6,r19
 4013e38:	a809883a 	mov	r4,r21
 4013e3c:	90004626 	beq	r18,zero,4013f58 <__sfvwrite_r+0x194>
 4013e40:	900f883a 	mov	r7,r18
 4013e44:	b480022e 	bgeu	r22,r18,4013e50 <__sfvwrite_r+0x8c>
 4013e48:	01e00034 	movhi	r7,32768
 4013e4c:	39ff0004 	addi	r7,r7,-1024
 4013e50:	80800917 	ldw	r2,36(r16)
 4013e54:	81400717 	ldw	r5,28(r16)
 4013e58:	103ee83a 	callr	r2
 4013e5c:	00805a0e 	bge	zero,r2,4013fc8 <__sfvwrite_r+0x204>
 4013e60:	a0c00217 	ldw	r3,8(r20)
 4013e64:	98a7883a 	add	r19,r19,r2
 4013e68:	90a5c83a 	sub	r18,r18,r2
 4013e6c:	1885c83a 	sub	r2,r3,r2
 4013e70:	a0800215 	stw	r2,8(r20)
 4013e74:	103fef1e 	bne	r2,zero,4013e34 <__alt_data_end+0xfc013e34>
 4013e78:	0005883a 	mov	r2,zero
 4013e7c:	dfc00b17 	ldw	ra,44(sp)
 4013e80:	df000a17 	ldw	fp,40(sp)
 4013e84:	ddc00917 	ldw	r23,36(sp)
 4013e88:	dd800817 	ldw	r22,32(sp)
 4013e8c:	dd400717 	ldw	r21,28(sp)
 4013e90:	dd000617 	ldw	r20,24(sp)
 4013e94:	dcc00517 	ldw	r19,20(sp)
 4013e98:	dc800417 	ldw	r18,16(sp)
 4013e9c:	dc400317 	ldw	r17,12(sp)
 4013ea0:	dc000217 	ldw	r16,8(sp)
 4013ea4:	dec00c04 	addi	sp,sp,48
 4013ea8:	f800283a 	ret
 4013eac:	800b883a 	mov	r5,r16
 4013eb0:	a809883a 	mov	r4,r21
 4013eb4:	40119340 	call	4011934 <__swsetup_r>
 4013eb8:	1000ee1e 	bne	r2,zero,4014274 <__sfvwrite_r+0x4b0>
 4013ebc:	80c0030b 	ldhu	r3,12(r16)
 4013ec0:	a4400017 	ldw	r17,0(r20)
 4013ec4:	1880008c 	andi	r2,r3,2
 4013ec8:	103fd61e 	bne	r2,zero,4013e24 <__alt_data_end+0xfc013e24>
 4013ecc:	1880004c 	andi	r2,r3,1
 4013ed0:	1000421e 	bne	r2,zero,4013fdc <__sfvwrite_r+0x218>
 4013ed4:	0039883a 	mov	fp,zero
 4013ed8:	0025883a 	mov	r18,zero
 4013edc:	90001a26 	beq	r18,zero,4013f48 <__sfvwrite_r+0x184>
 4013ee0:	1880800c 	andi	r2,r3,512
 4013ee4:	84c00217 	ldw	r19,8(r16)
 4013ee8:	10002126 	beq	r2,zero,4013f70 <__sfvwrite_r+0x1ac>
 4013eec:	982f883a 	mov	r23,r19
 4013ef0:	94c09636 	bltu	r18,r19,401414c <__sfvwrite_r+0x388>
 4013ef4:	1881200c 	andi	r2,r3,1152
 4013ef8:	1000a11e 	bne	r2,zero,4014180 <__sfvwrite_r+0x3bc>
 4013efc:	81000017 	ldw	r4,0(r16)
 4013f00:	b80d883a 	mov	r6,r23
 4013f04:	e00b883a 	mov	r5,fp
 4013f08:	40147900 	call	4014790 <memmove>
 4013f0c:	80c00217 	ldw	r3,8(r16)
 4013f10:	81000017 	ldw	r4,0(r16)
 4013f14:	9005883a 	mov	r2,r18
 4013f18:	1ce7c83a 	sub	r19,r3,r19
 4013f1c:	25cf883a 	add	r7,r4,r23
 4013f20:	84c00215 	stw	r19,8(r16)
 4013f24:	81c00015 	stw	r7,0(r16)
 4013f28:	a0c00217 	ldw	r3,8(r20)
 4013f2c:	e0b9883a 	add	fp,fp,r2
 4013f30:	90a5c83a 	sub	r18,r18,r2
 4013f34:	18a7c83a 	sub	r19,r3,r2
 4013f38:	a4c00215 	stw	r19,8(r20)
 4013f3c:	983fce26 	beq	r19,zero,4013e78 <__alt_data_end+0xfc013e78>
 4013f40:	80c0030b 	ldhu	r3,12(r16)
 4013f44:	903fe61e 	bne	r18,zero,4013ee0 <__alt_data_end+0xfc013ee0>
 4013f48:	8f000017 	ldw	fp,0(r17)
 4013f4c:	8c800117 	ldw	r18,4(r17)
 4013f50:	8c400204 	addi	r17,r17,8
 4013f54:	003fe106 	br	4013edc <__alt_data_end+0xfc013edc>
 4013f58:	8cc00017 	ldw	r19,0(r17)
 4013f5c:	8c800117 	ldw	r18,4(r17)
 4013f60:	8c400204 	addi	r17,r17,8
 4013f64:	003fb306 	br	4013e34 <__alt_data_end+0xfc013e34>
 4013f68:	0005883a 	mov	r2,zero
 4013f6c:	f800283a 	ret
 4013f70:	81000017 	ldw	r4,0(r16)
 4013f74:	80800417 	ldw	r2,16(r16)
 4013f78:	11005a36 	bltu	r2,r4,40140e4 <__sfvwrite_r+0x320>
 4013f7c:	85c00517 	ldw	r23,20(r16)
 4013f80:	95c05836 	bltu	r18,r23,40140e4 <__sfvwrite_r+0x320>
 4013f84:	00a00034 	movhi	r2,32768
 4013f88:	10bfffc4 	addi	r2,r2,-1
 4013f8c:	9009883a 	mov	r4,r18
 4013f90:	1480012e 	bgeu	r2,r18,4013f98 <__sfvwrite_r+0x1d4>
 4013f94:	1009883a 	mov	r4,r2
 4013f98:	b80b883a 	mov	r5,r23
 4013f9c:	400d1b40 	call	400d1b4 <__divsi3>
 4013fa0:	b80b883a 	mov	r5,r23
 4013fa4:	1009883a 	mov	r4,r2
 4013fa8:	400d3680 	call	400d368 <__mulsi3>
 4013fac:	81400717 	ldw	r5,28(r16)
 4013fb0:	80c00917 	ldw	r3,36(r16)
 4013fb4:	100f883a 	mov	r7,r2
 4013fb8:	e00d883a 	mov	r6,fp
 4013fbc:	a809883a 	mov	r4,r21
 4013fc0:	183ee83a 	callr	r3
 4013fc4:	00bfd816 	blt	zero,r2,4013f28 <__alt_data_end+0xfc013f28>
 4013fc8:	8080030b 	ldhu	r2,12(r16)
 4013fcc:	10801014 	ori	r2,r2,64
 4013fd0:	8080030d 	sth	r2,12(r16)
 4013fd4:	00bfffc4 	movi	r2,-1
 4013fd8:	003fa806 	br	4013e7c <__alt_data_end+0xfc013e7c>
 4013fdc:	0027883a 	mov	r19,zero
 4013fe0:	0011883a 	mov	r8,zero
 4013fe4:	0039883a 	mov	fp,zero
 4013fe8:	0025883a 	mov	r18,zero
 4013fec:	90001f26 	beq	r18,zero,401406c <__sfvwrite_r+0x2a8>
 4013ff0:	40005a26 	beq	r8,zero,401415c <__sfvwrite_r+0x398>
 4013ff4:	982d883a 	mov	r22,r19
 4013ff8:	94c0012e 	bgeu	r18,r19,4014000 <__sfvwrite_r+0x23c>
 4013ffc:	902d883a 	mov	r22,r18
 4014000:	81000017 	ldw	r4,0(r16)
 4014004:	80800417 	ldw	r2,16(r16)
 4014008:	b02f883a 	mov	r23,r22
 401400c:	81c00517 	ldw	r7,20(r16)
 4014010:	1100032e 	bgeu	r2,r4,4014020 <__sfvwrite_r+0x25c>
 4014014:	80c00217 	ldw	r3,8(r16)
 4014018:	38c7883a 	add	r3,r7,r3
 401401c:	1d801816 	blt	r3,r22,4014080 <__sfvwrite_r+0x2bc>
 4014020:	b1c03e16 	blt	r22,r7,401411c <__sfvwrite_r+0x358>
 4014024:	80800917 	ldw	r2,36(r16)
 4014028:	81400717 	ldw	r5,28(r16)
 401402c:	e00d883a 	mov	r6,fp
 4014030:	da000115 	stw	r8,4(sp)
 4014034:	a809883a 	mov	r4,r21
 4014038:	103ee83a 	callr	r2
 401403c:	102f883a 	mov	r23,r2
 4014040:	da000117 	ldw	r8,4(sp)
 4014044:	00bfe00e 	bge	zero,r2,4013fc8 <__alt_data_end+0xfc013fc8>
 4014048:	9de7c83a 	sub	r19,r19,r23
 401404c:	98001f26 	beq	r19,zero,40140cc <__sfvwrite_r+0x308>
 4014050:	a0800217 	ldw	r2,8(r20)
 4014054:	e5f9883a 	add	fp,fp,r23
 4014058:	95e5c83a 	sub	r18,r18,r23
 401405c:	15efc83a 	sub	r23,r2,r23
 4014060:	a5c00215 	stw	r23,8(r20)
 4014064:	b83f8426 	beq	r23,zero,4013e78 <__alt_data_end+0xfc013e78>
 4014068:	903fe11e 	bne	r18,zero,4013ff0 <__alt_data_end+0xfc013ff0>
 401406c:	8f000017 	ldw	fp,0(r17)
 4014070:	8c800117 	ldw	r18,4(r17)
 4014074:	0011883a 	mov	r8,zero
 4014078:	8c400204 	addi	r17,r17,8
 401407c:	003fdb06 	br	4013fec <__alt_data_end+0xfc013fec>
 4014080:	180d883a 	mov	r6,r3
 4014084:	e00b883a 	mov	r5,fp
 4014088:	da000115 	stw	r8,4(sp)
 401408c:	d8c00015 	stw	r3,0(sp)
 4014090:	40147900 	call	4014790 <memmove>
 4014094:	d8c00017 	ldw	r3,0(sp)
 4014098:	80800017 	ldw	r2,0(r16)
 401409c:	800b883a 	mov	r5,r16
 40140a0:	a809883a 	mov	r4,r21
 40140a4:	10c5883a 	add	r2,r2,r3
 40140a8:	80800015 	stw	r2,0(r16)
 40140ac:	d8c00015 	stw	r3,0(sp)
 40140b0:	40135540 	call	4013554 <_fflush_r>
 40140b4:	d8c00017 	ldw	r3,0(sp)
 40140b8:	da000117 	ldw	r8,4(sp)
 40140bc:	103fc21e 	bne	r2,zero,4013fc8 <__alt_data_end+0xfc013fc8>
 40140c0:	182f883a 	mov	r23,r3
 40140c4:	9de7c83a 	sub	r19,r19,r23
 40140c8:	983fe11e 	bne	r19,zero,4014050 <__alt_data_end+0xfc014050>
 40140cc:	800b883a 	mov	r5,r16
 40140d0:	a809883a 	mov	r4,r21
 40140d4:	40135540 	call	4013554 <_fflush_r>
 40140d8:	103fbb1e 	bne	r2,zero,4013fc8 <__alt_data_end+0xfc013fc8>
 40140dc:	0011883a 	mov	r8,zero
 40140e0:	003fdb06 	br	4014050 <__alt_data_end+0xfc014050>
 40140e4:	94c0012e 	bgeu	r18,r19,40140ec <__sfvwrite_r+0x328>
 40140e8:	9027883a 	mov	r19,r18
 40140ec:	980d883a 	mov	r6,r19
 40140f0:	e00b883a 	mov	r5,fp
 40140f4:	40147900 	call	4014790 <memmove>
 40140f8:	80800217 	ldw	r2,8(r16)
 40140fc:	80c00017 	ldw	r3,0(r16)
 4014100:	14c5c83a 	sub	r2,r2,r19
 4014104:	1cc7883a 	add	r3,r3,r19
 4014108:	80800215 	stw	r2,8(r16)
 401410c:	80c00015 	stw	r3,0(r16)
 4014110:	10004326 	beq	r2,zero,4014220 <__sfvwrite_r+0x45c>
 4014114:	9805883a 	mov	r2,r19
 4014118:	003f8306 	br	4013f28 <__alt_data_end+0xfc013f28>
 401411c:	b00d883a 	mov	r6,r22
 4014120:	e00b883a 	mov	r5,fp
 4014124:	da000115 	stw	r8,4(sp)
 4014128:	40147900 	call	4014790 <memmove>
 401412c:	80800217 	ldw	r2,8(r16)
 4014130:	80c00017 	ldw	r3,0(r16)
 4014134:	da000117 	ldw	r8,4(sp)
 4014138:	1585c83a 	sub	r2,r2,r22
 401413c:	1dad883a 	add	r22,r3,r22
 4014140:	80800215 	stw	r2,8(r16)
 4014144:	85800015 	stw	r22,0(r16)
 4014148:	003fbf06 	br	4014048 <__alt_data_end+0xfc014048>
 401414c:	81000017 	ldw	r4,0(r16)
 4014150:	9027883a 	mov	r19,r18
 4014154:	902f883a 	mov	r23,r18
 4014158:	003f6906 	br	4013f00 <__alt_data_end+0xfc013f00>
 401415c:	900d883a 	mov	r6,r18
 4014160:	01400284 	movi	r5,10
 4014164:	e009883a 	mov	r4,fp
 4014168:	40146ac0 	call	40146ac <memchr>
 401416c:	10003e26 	beq	r2,zero,4014268 <__sfvwrite_r+0x4a4>
 4014170:	10800044 	addi	r2,r2,1
 4014174:	1727c83a 	sub	r19,r2,fp
 4014178:	02000044 	movi	r8,1
 401417c:	003f9d06 	br	4013ff4 <__alt_data_end+0xfc013ff4>
 4014180:	80800517 	ldw	r2,20(r16)
 4014184:	81400417 	ldw	r5,16(r16)
 4014188:	81c00017 	ldw	r7,0(r16)
 401418c:	10a7883a 	add	r19,r2,r2
 4014190:	9885883a 	add	r2,r19,r2
 4014194:	1026d7fa 	srli	r19,r2,31
 4014198:	396dc83a 	sub	r22,r7,r5
 401419c:	b1000044 	addi	r4,r22,1
 40141a0:	9885883a 	add	r2,r19,r2
 40141a4:	1027d07a 	srai	r19,r2,1
 40141a8:	2485883a 	add	r2,r4,r18
 40141ac:	980d883a 	mov	r6,r19
 40141b0:	9880022e 	bgeu	r19,r2,40141bc <__sfvwrite_r+0x3f8>
 40141b4:	1027883a 	mov	r19,r2
 40141b8:	100d883a 	mov	r6,r2
 40141bc:	18c1000c 	andi	r3,r3,1024
 40141c0:	18001c26 	beq	r3,zero,4014234 <__sfvwrite_r+0x470>
 40141c4:	300b883a 	mov	r5,r6
 40141c8:	a809883a 	mov	r4,r21
 40141cc:	400e4d00 	call	400e4d0 <_malloc_r>
 40141d0:	102f883a 	mov	r23,r2
 40141d4:	10002926 	beq	r2,zero,401427c <__sfvwrite_r+0x4b8>
 40141d8:	81400417 	ldw	r5,16(r16)
 40141dc:	b00d883a 	mov	r6,r22
 40141e0:	1009883a 	mov	r4,r2
 40141e4:	400ecdc0 	call	400ecdc <memcpy>
 40141e8:	8080030b 	ldhu	r2,12(r16)
 40141ec:	00fedfc4 	movi	r3,-1153
 40141f0:	10c4703a 	and	r2,r2,r3
 40141f4:	10802014 	ori	r2,r2,128
 40141f8:	8080030d 	sth	r2,12(r16)
 40141fc:	bd89883a 	add	r4,r23,r22
 4014200:	9d8fc83a 	sub	r7,r19,r22
 4014204:	85c00415 	stw	r23,16(r16)
 4014208:	84c00515 	stw	r19,20(r16)
 401420c:	81000015 	stw	r4,0(r16)
 4014210:	9027883a 	mov	r19,r18
 4014214:	81c00215 	stw	r7,8(r16)
 4014218:	902f883a 	mov	r23,r18
 401421c:	003f3806 	br	4013f00 <__alt_data_end+0xfc013f00>
 4014220:	800b883a 	mov	r5,r16
 4014224:	a809883a 	mov	r4,r21
 4014228:	40135540 	call	4013554 <_fflush_r>
 401422c:	103fb926 	beq	r2,zero,4014114 <__alt_data_end+0xfc014114>
 4014230:	003f6506 	br	4013fc8 <__alt_data_end+0xfc013fc8>
 4014234:	a809883a 	mov	r4,r21
 4014238:	4015b0c0 	call	4015b0c <_realloc_r>
 401423c:	102f883a 	mov	r23,r2
 4014240:	103fee1e 	bne	r2,zero,40141fc <__alt_data_end+0xfc0141fc>
 4014244:	81400417 	ldw	r5,16(r16)
 4014248:	a809883a 	mov	r4,r21
 401424c:	4013ab40 	call	4013ab4 <_free_r>
 4014250:	8080030b 	ldhu	r2,12(r16)
 4014254:	00ffdfc4 	movi	r3,-129
 4014258:	1884703a 	and	r2,r3,r2
 401425c:	00c00304 	movi	r3,12
 4014260:	a8c00015 	stw	r3,0(r21)
 4014264:	003f5906 	br	4013fcc <__alt_data_end+0xfc013fcc>
 4014268:	94c00044 	addi	r19,r18,1
 401426c:	02000044 	movi	r8,1
 4014270:	003f6006 	br	4013ff4 <__alt_data_end+0xfc013ff4>
 4014274:	00bfffc4 	movi	r2,-1
 4014278:	003f0006 	br	4013e7c <__alt_data_end+0xfc013e7c>
 401427c:	00800304 	movi	r2,12
 4014280:	a8800015 	stw	r2,0(r21)
 4014284:	8080030b 	ldhu	r2,12(r16)
 4014288:	003f5006 	br	4013fcc <__alt_data_end+0xfc013fcc>

0401428c <_fwalk>:
 401428c:	defff704 	addi	sp,sp,-36
 4014290:	dd000415 	stw	r20,16(sp)
 4014294:	dfc00815 	stw	ra,32(sp)
 4014298:	ddc00715 	stw	r23,28(sp)
 401429c:	dd800615 	stw	r22,24(sp)
 40142a0:	dd400515 	stw	r21,20(sp)
 40142a4:	dcc00315 	stw	r19,12(sp)
 40142a8:	dc800215 	stw	r18,8(sp)
 40142ac:	dc400115 	stw	r17,4(sp)
 40142b0:	dc000015 	stw	r16,0(sp)
 40142b4:	2500b804 	addi	r20,r4,736
 40142b8:	a0002326 	beq	r20,zero,4014348 <_fwalk+0xbc>
 40142bc:	282b883a 	mov	r21,r5
 40142c0:	002f883a 	mov	r23,zero
 40142c4:	05800044 	movi	r22,1
 40142c8:	04ffffc4 	movi	r19,-1
 40142cc:	a4400117 	ldw	r17,4(r20)
 40142d0:	a4800217 	ldw	r18,8(r20)
 40142d4:	8c7fffc4 	addi	r17,r17,-1
 40142d8:	88000d16 	blt	r17,zero,4014310 <_fwalk+0x84>
 40142dc:	94000304 	addi	r16,r18,12
 40142e0:	94800384 	addi	r18,r18,14
 40142e4:	8080000b 	ldhu	r2,0(r16)
 40142e8:	8c7fffc4 	addi	r17,r17,-1
 40142ec:	813ffd04 	addi	r4,r16,-12
 40142f0:	b080042e 	bgeu	r22,r2,4014304 <_fwalk+0x78>
 40142f4:	9080000f 	ldh	r2,0(r18)
 40142f8:	14c00226 	beq	r2,r19,4014304 <_fwalk+0x78>
 40142fc:	a83ee83a 	callr	r21
 4014300:	b8aeb03a 	or	r23,r23,r2
 4014304:	84001a04 	addi	r16,r16,104
 4014308:	94801a04 	addi	r18,r18,104
 401430c:	8cfff51e 	bne	r17,r19,40142e4 <__alt_data_end+0xfc0142e4>
 4014310:	a5000017 	ldw	r20,0(r20)
 4014314:	a03fed1e 	bne	r20,zero,40142cc <__alt_data_end+0xfc0142cc>
 4014318:	b805883a 	mov	r2,r23
 401431c:	dfc00817 	ldw	ra,32(sp)
 4014320:	ddc00717 	ldw	r23,28(sp)
 4014324:	dd800617 	ldw	r22,24(sp)
 4014328:	dd400517 	ldw	r21,20(sp)
 401432c:	dd000417 	ldw	r20,16(sp)
 4014330:	dcc00317 	ldw	r19,12(sp)
 4014334:	dc800217 	ldw	r18,8(sp)
 4014338:	dc400117 	ldw	r17,4(sp)
 401433c:	dc000017 	ldw	r16,0(sp)
 4014340:	dec00904 	addi	sp,sp,36
 4014344:	f800283a 	ret
 4014348:	002f883a 	mov	r23,zero
 401434c:	003ff206 	br	4014318 <__alt_data_end+0xfc014318>

04014350 <_fwalk_reent>:
 4014350:	defff704 	addi	sp,sp,-36
 4014354:	dd000415 	stw	r20,16(sp)
 4014358:	dfc00815 	stw	ra,32(sp)
 401435c:	ddc00715 	stw	r23,28(sp)
 4014360:	dd800615 	stw	r22,24(sp)
 4014364:	dd400515 	stw	r21,20(sp)
 4014368:	dcc00315 	stw	r19,12(sp)
 401436c:	dc800215 	stw	r18,8(sp)
 4014370:	dc400115 	stw	r17,4(sp)
 4014374:	dc000015 	stw	r16,0(sp)
 4014378:	2500b804 	addi	r20,r4,736
 401437c:	a0002326 	beq	r20,zero,401440c <_fwalk_reent+0xbc>
 4014380:	282b883a 	mov	r21,r5
 4014384:	2027883a 	mov	r19,r4
 4014388:	002f883a 	mov	r23,zero
 401438c:	05800044 	movi	r22,1
 4014390:	04bfffc4 	movi	r18,-1
 4014394:	a4400117 	ldw	r17,4(r20)
 4014398:	a4000217 	ldw	r16,8(r20)
 401439c:	8c7fffc4 	addi	r17,r17,-1
 40143a0:	88000c16 	blt	r17,zero,40143d4 <_fwalk_reent+0x84>
 40143a4:	84000304 	addi	r16,r16,12
 40143a8:	8080000b 	ldhu	r2,0(r16)
 40143ac:	8c7fffc4 	addi	r17,r17,-1
 40143b0:	817ffd04 	addi	r5,r16,-12
 40143b4:	b080052e 	bgeu	r22,r2,40143cc <_fwalk_reent+0x7c>
 40143b8:	8080008f 	ldh	r2,2(r16)
 40143bc:	9809883a 	mov	r4,r19
 40143c0:	14800226 	beq	r2,r18,40143cc <_fwalk_reent+0x7c>
 40143c4:	a83ee83a 	callr	r21
 40143c8:	b8aeb03a 	or	r23,r23,r2
 40143cc:	84001a04 	addi	r16,r16,104
 40143d0:	8cbff51e 	bne	r17,r18,40143a8 <__alt_data_end+0xfc0143a8>
 40143d4:	a5000017 	ldw	r20,0(r20)
 40143d8:	a03fee1e 	bne	r20,zero,4014394 <__alt_data_end+0xfc014394>
 40143dc:	b805883a 	mov	r2,r23
 40143e0:	dfc00817 	ldw	ra,32(sp)
 40143e4:	ddc00717 	ldw	r23,28(sp)
 40143e8:	dd800617 	ldw	r22,24(sp)
 40143ec:	dd400517 	ldw	r21,20(sp)
 40143f0:	dd000417 	ldw	r20,16(sp)
 40143f4:	dcc00317 	ldw	r19,12(sp)
 40143f8:	dc800217 	ldw	r18,8(sp)
 40143fc:	dc400117 	ldw	r17,4(sp)
 4014400:	dc000017 	ldw	r16,0(sp)
 4014404:	dec00904 	addi	sp,sp,36
 4014408:	f800283a 	ret
 401440c:	002f883a 	mov	r23,zero
 4014410:	003ff206 	br	40143dc <__alt_data_end+0xfc0143dc>

04014414 <_setlocale_r>:
 4014414:	30001b26 	beq	r6,zero,4014484 <_setlocale_r+0x70>
 4014418:	014100b4 	movhi	r5,1026
 401441c:	defffe04 	addi	sp,sp,-8
 4014420:	295cb604 	addi	r5,r5,29400
 4014424:	3009883a 	mov	r4,r6
 4014428:	dc000015 	stw	r16,0(sp)
 401442c:	dfc00115 	stw	ra,4(sp)
 4014430:	3021883a 	mov	r16,r6
 4014434:	400f4040 	call	400f404 <strcmp>
 4014438:	1000061e 	bne	r2,zero,4014454 <_setlocale_r+0x40>
 401443c:	008100b4 	movhi	r2,1026
 4014440:	109c9704 	addi	r2,r2,29276
 4014444:	dfc00117 	ldw	ra,4(sp)
 4014448:	dc000017 	ldw	r16,0(sp)
 401444c:	dec00204 	addi	sp,sp,8
 4014450:	f800283a 	ret
 4014454:	014100b4 	movhi	r5,1026
 4014458:	295c9704 	addi	r5,r5,29276
 401445c:	8009883a 	mov	r4,r16
 4014460:	400f4040 	call	400f404 <strcmp>
 4014464:	103ff526 	beq	r2,zero,401443c <__alt_data_end+0xfc01443c>
 4014468:	014100b4 	movhi	r5,1026
 401446c:	295ca104 	addi	r5,r5,29316
 4014470:	8009883a 	mov	r4,r16
 4014474:	400f4040 	call	400f404 <strcmp>
 4014478:	103ff026 	beq	r2,zero,401443c <__alt_data_end+0xfc01443c>
 401447c:	0005883a 	mov	r2,zero
 4014480:	003ff006 	br	4014444 <__alt_data_end+0xfc014444>
 4014484:	008100b4 	movhi	r2,1026
 4014488:	109c9704 	addi	r2,r2,29276
 401448c:	f800283a 	ret

04014490 <__locale_charset>:
 4014490:	008100b4 	movhi	r2,1026
 4014494:	109f3504 	addi	r2,r2,31956
 4014498:	f800283a 	ret

0401449c <__locale_mb_cur_max>:
 401449c:	008100f4 	movhi	r2,1027
 40144a0:	10a98b04 	addi	r2,r2,-22996
 40144a4:	10800017 	ldw	r2,0(r2)
 40144a8:	f800283a 	ret

040144ac <__locale_msgcharset>:
 40144ac:	008100b4 	movhi	r2,1026
 40144b0:	109f2d04 	addi	r2,r2,31924
 40144b4:	f800283a 	ret

040144b8 <__locale_cjk_lang>:
 40144b8:	0005883a 	mov	r2,zero
 40144bc:	f800283a 	ret

040144c0 <_localeconv_r>:
 40144c0:	008100b4 	movhi	r2,1026
 40144c4:	109f3d04 	addi	r2,r2,31988
 40144c8:	f800283a 	ret

040144cc <setlocale>:
 40144cc:	008100f4 	movhi	r2,1027
 40144d0:	10a98804 	addi	r2,r2,-23008
 40144d4:	280d883a 	mov	r6,r5
 40144d8:	200b883a 	mov	r5,r4
 40144dc:	11000017 	ldw	r4,0(r2)
 40144e0:	40144141 	jmpi	4014414 <_setlocale_r>

040144e4 <localeconv>:
 40144e4:	008100b4 	movhi	r2,1026
 40144e8:	109f3d04 	addi	r2,r2,31988
 40144ec:	f800283a 	ret

040144f0 <__smakebuf_r>:
 40144f0:	2880030b 	ldhu	r2,12(r5)
 40144f4:	10c0008c 	andi	r3,r2,2
 40144f8:	1800411e 	bne	r3,zero,4014600 <__smakebuf_r+0x110>
 40144fc:	deffec04 	addi	sp,sp,-80
 4014500:	dc000f15 	stw	r16,60(sp)
 4014504:	2821883a 	mov	r16,r5
 4014508:	2940038f 	ldh	r5,14(r5)
 401450c:	dc401015 	stw	r17,64(sp)
 4014510:	dfc01315 	stw	ra,76(sp)
 4014514:	dcc01215 	stw	r19,72(sp)
 4014518:	dc801115 	stw	r18,68(sp)
 401451c:	2023883a 	mov	r17,r4
 4014520:	28001c16 	blt	r5,zero,4014594 <__smakebuf_r+0xa4>
 4014524:	d80d883a 	mov	r6,sp
 4014528:	4017f0c0 	call	4017f0c <_fstat_r>
 401452c:	10001816 	blt	r2,zero,4014590 <__smakebuf_r+0xa0>
 4014530:	d8800117 	ldw	r2,4(sp)
 4014534:	00e00014 	movui	r3,32768
 4014538:	10bc000c 	andi	r2,r2,61440
 401453c:	14c80020 	cmpeqi	r19,r2,8192
 4014540:	10c03726 	beq	r2,r3,4014620 <__smakebuf_r+0x130>
 4014544:	80c0030b 	ldhu	r3,12(r16)
 4014548:	18c20014 	ori	r3,r3,2048
 401454c:	80c0030d 	sth	r3,12(r16)
 4014550:	00c80004 	movi	r3,8192
 4014554:	10c0521e 	bne	r2,r3,40146a0 <__smakebuf_r+0x1b0>
 4014558:	8140038f 	ldh	r5,14(r16)
 401455c:	8809883a 	mov	r4,r17
 4014560:	4017f680 	call	4017f68 <_isatty_r>
 4014564:	10004c26 	beq	r2,zero,4014698 <__smakebuf_r+0x1a8>
 4014568:	8080030b 	ldhu	r2,12(r16)
 401456c:	80c010c4 	addi	r3,r16,67
 4014570:	80c00015 	stw	r3,0(r16)
 4014574:	10800054 	ori	r2,r2,1
 4014578:	8080030d 	sth	r2,12(r16)
 401457c:	00800044 	movi	r2,1
 4014580:	80c00415 	stw	r3,16(r16)
 4014584:	80800515 	stw	r2,20(r16)
 4014588:	04810004 	movi	r18,1024
 401458c:	00000706 	br	40145ac <__smakebuf_r+0xbc>
 4014590:	8080030b 	ldhu	r2,12(r16)
 4014594:	10c0200c 	andi	r3,r2,128
 4014598:	18001f1e 	bne	r3,zero,4014618 <__smakebuf_r+0x128>
 401459c:	04810004 	movi	r18,1024
 40145a0:	10820014 	ori	r2,r2,2048
 40145a4:	8080030d 	sth	r2,12(r16)
 40145a8:	0027883a 	mov	r19,zero
 40145ac:	900b883a 	mov	r5,r18
 40145b0:	8809883a 	mov	r4,r17
 40145b4:	400e4d00 	call	400e4d0 <_malloc_r>
 40145b8:	10002c26 	beq	r2,zero,401466c <__smakebuf_r+0x17c>
 40145bc:	80c0030b 	ldhu	r3,12(r16)
 40145c0:	01010074 	movhi	r4,1025
 40145c4:	210d7a04 	addi	r4,r4,13800
 40145c8:	89000f15 	stw	r4,60(r17)
 40145cc:	18c02014 	ori	r3,r3,128
 40145d0:	80c0030d 	sth	r3,12(r16)
 40145d4:	80800015 	stw	r2,0(r16)
 40145d8:	80800415 	stw	r2,16(r16)
 40145dc:	84800515 	stw	r18,20(r16)
 40145e0:	98001a1e 	bne	r19,zero,401464c <__smakebuf_r+0x15c>
 40145e4:	dfc01317 	ldw	ra,76(sp)
 40145e8:	dcc01217 	ldw	r19,72(sp)
 40145ec:	dc801117 	ldw	r18,68(sp)
 40145f0:	dc401017 	ldw	r17,64(sp)
 40145f4:	dc000f17 	ldw	r16,60(sp)
 40145f8:	dec01404 	addi	sp,sp,80
 40145fc:	f800283a 	ret
 4014600:	288010c4 	addi	r2,r5,67
 4014604:	28800015 	stw	r2,0(r5)
 4014608:	28800415 	stw	r2,16(r5)
 401460c:	00800044 	movi	r2,1
 4014610:	28800515 	stw	r2,20(r5)
 4014614:	f800283a 	ret
 4014618:	04801004 	movi	r18,64
 401461c:	003fe006 	br	40145a0 <__alt_data_end+0xfc0145a0>
 4014620:	81000a17 	ldw	r4,40(r16)
 4014624:	00c10074 	movhi	r3,1025
 4014628:	18d86f04 	addi	r3,r3,25020
 401462c:	20ffc51e 	bne	r4,r3,4014544 <__alt_data_end+0xfc014544>
 4014630:	8080030b 	ldhu	r2,12(r16)
 4014634:	04810004 	movi	r18,1024
 4014638:	84801315 	stw	r18,76(r16)
 401463c:	1484b03a 	or	r2,r2,r18
 4014640:	8080030d 	sth	r2,12(r16)
 4014644:	0027883a 	mov	r19,zero
 4014648:	003fd806 	br	40145ac <__alt_data_end+0xfc0145ac>
 401464c:	8140038f 	ldh	r5,14(r16)
 4014650:	8809883a 	mov	r4,r17
 4014654:	4017f680 	call	4017f68 <_isatty_r>
 4014658:	103fe226 	beq	r2,zero,40145e4 <__alt_data_end+0xfc0145e4>
 401465c:	8080030b 	ldhu	r2,12(r16)
 4014660:	10800054 	ori	r2,r2,1
 4014664:	8080030d 	sth	r2,12(r16)
 4014668:	003fde06 	br	40145e4 <__alt_data_end+0xfc0145e4>
 401466c:	8080030b 	ldhu	r2,12(r16)
 4014670:	10c0800c 	andi	r3,r2,512
 4014674:	183fdb1e 	bne	r3,zero,40145e4 <__alt_data_end+0xfc0145e4>
 4014678:	10800094 	ori	r2,r2,2
 401467c:	80c010c4 	addi	r3,r16,67
 4014680:	8080030d 	sth	r2,12(r16)
 4014684:	00800044 	movi	r2,1
 4014688:	80c00015 	stw	r3,0(r16)
 401468c:	80c00415 	stw	r3,16(r16)
 4014690:	80800515 	stw	r2,20(r16)
 4014694:	003fd306 	br	40145e4 <__alt_data_end+0xfc0145e4>
 4014698:	04810004 	movi	r18,1024
 401469c:	003fc306 	br	40145ac <__alt_data_end+0xfc0145ac>
 40146a0:	0027883a 	mov	r19,zero
 40146a4:	04810004 	movi	r18,1024
 40146a8:	003fc006 	br	40145ac <__alt_data_end+0xfc0145ac>

040146ac <memchr>:
 40146ac:	208000cc 	andi	r2,r4,3
 40146b0:	280f883a 	mov	r7,r5
 40146b4:	10003426 	beq	r2,zero,4014788 <memchr+0xdc>
 40146b8:	30bfffc4 	addi	r2,r6,-1
 40146bc:	30001a26 	beq	r6,zero,4014728 <memchr+0x7c>
 40146c0:	20c00003 	ldbu	r3,0(r4)
 40146c4:	29803fcc 	andi	r6,r5,255
 40146c8:	30c0051e 	bne	r6,r3,40146e0 <memchr+0x34>
 40146cc:	00001806 	br	4014730 <memchr+0x84>
 40146d0:	10001526 	beq	r2,zero,4014728 <memchr+0x7c>
 40146d4:	20c00003 	ldbu	r3,0(r4)
 40146d8:	10bfffc4 	addi	r2,r2,-1
 40146dc:	30c01426 	beq	r6,r3,4014730 <memchr+0x84>
 40146e0:	21000044 	addi	r4,r4,1
 40146e4:	20c000cc 	andi	r3,r4,3
 40146e8:	183ff91e 	bne	r3,zero,40146d0 <__alt_data_end+0xfc0146d0>
 40146ec:	020000c4 	movi	r8,3
 40146f0:	40801136 	bltu	r8,r2,4014738 <memchr+0x8c>
 40146f4:	10000c26 	beq	r2,zero,4014728 <memchr+0x7c>
 40146f8:	20c00003 	ldbu	r3,0(r4)
 40146fc:	29403fcc 	andi	r5,r5,255
 4014700:	28c00b26 	beq	r5,r3,4014730 <memchr+0x84>
 4014704:	20c00044 	addi	r3,r4,1
 4014708:	39803fcc 	andi	r6,r7,255
 401470c:	2089883a 	add	r4,r4,r2
 4014710:	00000306 	br	4014720 <memchr+0x74>
 4014714:	18c00044 	addi	r3,r3,1
 4014718:	197fffc3 	ldbu	r5,-1(r3)
 401471c:	31400526 	beq	r6,r5,4014734 <memchr+0x88>
 4014720:	1805883a 	mov	r2,r3
 4014724:	20fffb1e 	bne	r4,r3,4014714 <__alt_data_end+0xfc014714>
 4014728:	0005883a 	mov	r2,zero
 401472c:	f800283a 	ret
 4014730:	2005883a 	mov	r2,r4
 4014734:	f800283a 	ret
 4014738:	28c03fcc 	andi	r3,r5,255
 401473c:	1812923a 	slli	r9,r3,8
 4014740:	02ffbff4 	movhi	r11,65279
 4014744:	02a02074 	movhi	r10,32897
 4014748:	48d2b03a 	or	r9,r9,r3
 401474c:	4806943a 	slli	r3,r9,16
 4014750:	5affbfc4 	addi	r11,r11,-257
 4014754:	52a02004 	addi	r10,r10,-32640
 4014758:	48d2b03a 	or	r9,r9,r3
 401475c:	20c00017 	ldw	r3,0(r4)
 4014760:	48c6f03a 	xor	r3,r9,r3
 4014764:	1acd883a 	add	r6,r3,r11
 4014768:	00c6303a 	nor	r3,zero,r3
 401476c:	30c6703a 	and	r3,r6,r3
 4014770:	1a86703a 	and	r3,r3,r10
 4014774:	183fe01e 	bne	r3,zero,40146f8 <__alt_data_end+0xfc0146f8>
 4014778:	10bfff04 	addi	r2,r2,-4
 401477c:	21000104 	addi	r4,r4,4
 4014780:	40bff636 	bltu	r8,r2,401475c <__alt_data_end+0xfc01475c>
 4014784:	003fdb06 	br	40146f4 <__alt_data_end+0xfc0146f4>
 4014788:	3005883a 	mov	r2,r6
 401478c:	003fd706 	br	40146ec <__alt_data_end+0xfc0146ec>

04014790 <memmove>:
 4014790:	2005883a 	mov	r2,r4
 4014794:	29000b2e 	bgeu	r5,r4,40147c4 <memmove+0x34>
 4014798:	298f883a 	add	r7,r5,r6
 401479c:	21c0092e 	bgeu	r4,r7,40147c4 <memmove+0x34>
 40147a0:	2187883a 	add	r3,r4,r6
 40147a4:	198bc83a 	sub	r5,r3,r6
 40147a8:	30004826 	beq	r6,zero,40148cc <memmove+0x13c>
 40147ac:	39ffffc4 	addi	r7,r7,-1
 40147b0:	39000003 	ldbu	r4,0(r7)
 40147b4:	18ffffc4 	addi	r3,r3,-1
 40147b8:	19000005 	stb	r4,0(r3)
 40147bc:	28fffb1e 	bne	r5,r3,40147ac <__alt_data_end+0xfc0147ac>
 40147c0:	f800283a 	ret
 40147c4:	00c003c4 	movi	r3,15
 40147c8:	1980412e 	bgeu	r3,r6,40148d0 <memmove+0x140>
 40147cc:	2886b03a 	or	r3,r5,r2
 40147d0:	18c000cc 	andi	r3,r3,3
 40147d4:	1800401e 	bne	r3,zero,40148d8 <memmove+0x148>
 40147d8:	33fffc04 	addi	r15,r6,-16
 40147dc:	781ed13a 	srli	r15,r15,4
 40147e0:	28c00104 	addi	r3,r5,4
 40147e4:	13400104 	addi	r13,r2,4
 40147e8:	781c913a 	slli	r14,r15,4
 40147ec:	2b000204 	addi	r12,r5,8
 40147f0:	12c00204 	addi	r11,r2,8
 40147f4:	73800504 	addi	r14,r14,20
 40147f8:	2a800304 	addi	r10,r5,12
 40147fc:	12400304 	addi	r9,r2,12
 4014800:	2b9d883a 	add	r14,r5,r14
 4014804:	2811883a 	mov	r8,r5
 4014808:	100f883a 	mov	r7,r2
 401480c:	41000017 	ldw	r4,0(r8)
 4014810:	39c00404 	addi	r7,r7,16
 4014814:	18c00404 	addi	r3,r3,16
 4014818:	393ffc15 	stw	r4,-16(r7)
 401481c:	193ffc17 	ldw	r4,-16(r3)
 4014820:	6b400404 	addi	r13,r13,16
 4014824:	5ac00404 	addi	r11,r11,16
 4014828:	693ffc15 	stw	r4,-16(r13)
 401482c:	61000017 	ldw	r4,0(r12)
 4014830:	4a400404 	addi	r9,r9,16
 4014834:	42000404 	addi	r8,r8,16
 4014838:	593ffc15 	stw	r4,-16(r11)
 401483c:	51000017 	ldw	r4,0(r10)
 4014840:	63000404 	addi	r12,r12,16
 4014844:	52800404 	addi	r10,r10,16
 4014848:	493ffc15 	stw	r4,-16(r9)
 401484c:	1bbfef1e 	bne	r3,r14,401480c <__alt_data_end+0xfc01480c>
 4014850:	79000044 	addi	r4,r15,1
 4014854:	2008913a 	slli	r4,r4,4
 4014858:	328003cc 	andi	r10,r6,15
 401485c:	02c000c4 	movi	r11,3
 4014860:	1107883a 	add	r3,r2,r4
 4014864:	290b883a 	add	r5,r5,r4
 4014868:	5a801e2e 	bgeu	r11,r10,40148e4 <memmove+0x154>
 401486c:	1813883a 	mov	r9,r3
 4014870:	2811883a 	mov	r8,r5
 4014874:	500f883a 	mov	r7,r10
 4014878:	41000017 	ldw	r4,0(r8)
 401487c:	4a400104 	addi	r9,r9,4
 4014880:	39ffff04 	addi	r7,r7,-4
 4014884:	493fff15 	stw	r4,-4(r9)
 4014888:	42000104 	addi	r8,r8,4
 401488c:	59fffa36 	bltu	r11,r7,4014878 <__alt_data_end+0xfc014878>
 4014890:	513fff04 	addi	r4,r10,-4
 4014894:	2008d0ba 	srli	r4,r4,2
 4014898:	318000cc 	andi	r6,r6,3
 401489c:	21000044 	addi	r4,r4,1
 40148a0:	2109883a 	add	r4,r4,r4
 40148a4:	2109883a 	add	r4,r4,r4
 40148a8:	1907883a 	add	r3,r3,r4
 40148ac:	290b883a 	add	r5,r5,r4
 40148b0:	30000b26 	beq	r6,zero,40148e0 <memmove+0x150>
 40148b4:	198d883a 	add	r6,r3,r6
 40148b8:	29c00003 	ldbu	r7,0(r5)
 40148bc:	18c00044 	addi	r3,r3,1
 40148c0:	29400044 	addi	r5,r5,1
 40148c4:	19ffffc5 	stb	r7,-1(r3)
 40148c8:	19bffb1e 	bne	r3,r6,40148b8 <__alt_data_end+0xfc0148b8>
 40148cc:	f800283a 	ret
 40148d0:	1007883a 	mov	r3,r2
 40148d4:	003ff606 	br	40148b0 <__alt_data_end+0xfc0148b0>
 40148d8:	1007883a 	mov	r3,r2
 40148dc:	003ff506 	br	40148b4 <__alt_data_end+0xfc0148b4>
 40148e0:	f800283a 	ret
 40148e4:	500d883a 	mov	r6,r10
 40148e8:	003ff106 	br	40148b0 <__alt_data_end+0xfc0148b0>

040148ec <_Balloc>:
 40148ec:	20801317 	ldw	r2,76(r4)
 40148f0:	defffc04 	addi	sp,sp,-16
 40148f4:	dc400115 	stw	r17,4(sp)
 40148f8:	dc000015 	stw	r16,0(sp)
 40148fc:	dfc00315 	stw	ra,12(sp)
 4014900:	dc800215 	stw	r18,8(sp)
 4014904:	2023883a 	mov	r17,r4
 4014908:	2821883a 	mov	r16,r5
 401490c:	10000f26 	beq	r2,zero,401494c <_Balloc+0x60>
 4014910:	8407883a 	add	r3,r16,r16
 4014914:	18c7883a 	add	r3,r3,r3
 4014918:	10c7883a 	add	r3,r2,r3
 401491c:	18800017 	ldw	r2,0(r3)
 4014920:	10001126 	beq	r2,zero,4014968 <_Balloc+0x7c>
 4014924:	11000017 	ldw	r4,0(r2)
 4014928:	19000015 	stw	r4,0(r3)
 401492c:	10000415 	stw	zero,16(r2)
 4014930:	10000315 	stw	zero,12(r2)
 4014934:	dfc00317 	ldw	ra,12(sp)
 4014938:	dc800217 	ldw	r18,8(sp)
 401493c:	dc400117 	ldw	r17,4(sp)
 4014940:	dc000017 	ldw	r16,0(sp)
 4014944:	dec00404 	addi	sp,sp,16
 4014948:	f800283a 	ret
 401494c:	01800844 	movi	r6,33
 4014950:	01400104 	movi	r5,4
 4014954:	4017b240 	call	4017b24 <_calloc_r>
 4014958:	88801315 	stw	r2,76(r17)
 401495c:	103fec1e 	bne	r2,zero,4014910 <__alt_data_end+0xfc014910>
 4014960:	0005883a 	mov	r2,zero
 4014964:	003ff306 	br	4014934 <__alt_data_end+0xfc014934>
 4014968:	01400044 	movi	r5,1
 401496c:	2c24983a 	sll	r18,r5,r16
 4014970:	8809883a 	mov	r4,r17
 4014974:	91800144 	addi	r6,r18,5
 4014978:	318d883a 	add	r6,r6,r6
 401497c:	318d883a 	add	r6,r6,r6
 4014980:	4017b240 	call	4017b24 <_calloc_r>
 4014984:	103ff626 	beq	r2,zero,4014960 <__alt_data_end+0xfc014960>
 4014988:	14000115 	stw	r16,4(r2)
 401498c:	14800215 	stw	r18,8(r2)
 4014990:	003fe606 	br	401492c <__alt_data_end+0xfc01492c>

04014994 <_Bfree>:
 4014994:	28000826 	beq	r5,zero,40149b8 <_Bfree+0x24>
 4014998:	28c00117 	ldw	r3,4(r5)
 401499c:	20801317 	ldw	r2,76(r4)
 40149a0:	18c7883a 	add	r3,r3,r3
 40149a4:	18c7883a 	add	r3,r3,r3
 40149a8:	10c5883a 	add	r2,r2,r3
 40149ac:	10c00017 	ldw	r3,0(r2)
 40149b0:	28c00015 	stw	r3,0(r5)
 40149b4:	11400015 	stw	r5,0(r2)
 40149b8:	f800283a 	ret

040149bc <__multadd>:
 40149bc:	defff704 	addi	sp,sp,-36
 40149c0:	dc800215 	stw	r18,8(sp)
 40149c4:	2c800417 	ldw	r18,16(r5)
 40149c8:	dd800615 	stw	r22,24(sp)
 40149cc:	dd400515 	stw	r21,20(sp)
 40149d0:	dd000415 	stw	r20,16(sp)
 40149d4:	dcc00315 	stw	r19,12(sp)
 40149d8:	dc400115 	stw	r17,4(sp)
 40149dc:	dc000015 	stw	r16,0(sp)
 40149e0:	dfc00815 	stw	ra,32(sp)
 40149e4:	ddc00715 	stw	r23,28(sp)
 40149e8:	2827883a 	mov	r19,r5
 40149ec:	2029883a 	mov	r20,r4
 40149f0:	3023883a 	mov	r17,r6
 40149f4:	3821883a 	mov	r16,r7
 40149f8:	2d400504 	addi	r21,r5,20
 40149fc:	002d883a 	mov	r22,zero
 4014a00:	adc00017 	ldw	r23,0(r21)
 4014a04:	880b883a 	mov	r5,r17
 4014a08:	ad400104 	addi	r21,r21,4
 4014a0c:	b93fffcc 	andi	r4,r23,65535
 4014a10:	400d3680 	call	400d368 <__mulsi3>
 4014a14:	b808d43a 	srli	r4,r23,16
 4014a18:	880b883a 	mov	r5,r17
 4014a1c:	1421883a 	add	r16,r2,r16
 4014a20:	400d3680 	call	400d368 <__mulsi3>
 4014a24:	800ed43a 	srli	r7,r16,16
 4014a28:	80ffffcc 	andi	r3,r16,65535
 4014a2c:	b5800044 	addi	r22,r22,1
 4014a30:	11c5883a 	add	r2,r2,r7
 4014a34:	100e943a 	slli	r7,r2,16
 4014a38:	1020d43a 	srli	r16,r2,16
 4014a3c:	38c7883a 	add	r3,r7,r3
 4014a40:	a8ffff15 	stw	r3,-4(r21)
 4014a44:	b4bfee16 	blt	r22,r18,4014a00 <__alt_data_end+0xfc014a00>
 4014a48:	80000926 	beq	r16,zero,4014a70 <__multadd+0xb4>
 4014a4c:	98800217 	ldw	r2,8(r19)
 4014a50:	9080130e 	bge	r18,r2,4014aa0 <__multadd+0xe4>
 4014a54:	90800144 	addi	r2,r18,5
 4014a58:	1085883a 	add	r2,r2,r2
 4014a5c:	1085883a 	add	r2,r2,r2
 4014a60:	9885883a 	add	r2,r19,r2
 4014a64:	14000015 	stw	r16,0(r2)
 4014a68:	94800044 	addi	r18,r18,1
 4014a6c:	9c800415 	stw	r18,16(r19)
 4014a70:	9805883a 	mov	r2,r19
 4014a74:	dfc00817 	ldw	ra,32(sp)
 4014a78:	ddc00717 	ldw	r23,28(sp)
 4014a7c:	dd800617 	ldw	r22,24(sp)
 4014a80:	dd400517 	ldw	r21,20(sp)
 4014a84:	dd000417 	ldw	r20,16(sp)
 4014a88:	dcc00317 	ldw	r19,12(sp)
 4014a8c:	dc800217 	ldw	r18,8(sp)
 4014a90:	dc400117 	ldw	r17,4(sp)
 4014a94:	dc000017 	ldw	r16,0(sp)
 4014a98:	dec00904 	addi	sp,sp,36
 4014a9c:	f800283a 	ret
 4014aa0:	99400117 	ldw	r5,4(r19)
 4014aa4:	a009883a 	mov	r4,r20
 4014aa8:	29400044 	addi	r5,r5,1
 4014aac:	40148ec0 	call	40148ec <_Balloc>
 4014ab0:	99800417 	ldw	r6,16(r19)
 4014ab4:	99400304 	addi	r5,r19,12
 4014ab8:	11000304 	addi	r4,r2,12
 4014abc:	31800084 	addi	r6,r6,2
 4014ac0:	318d883a 	add	r6,r6,r6
 4014ac4:	318d883a 	add	r6,r6,r6
 4014ac8:	1023883a 	mov	r17,r2
 4014acc:	400ecdc0 	call	400ecdc <memcpy>
 4014ad0:	98000a26 	beq	r19,zero,4014afc <__multadd+0x140>
 4014ad4:	98c00117 	ldw	r3,4(r19)
 4014ad8:	a0801317 	ldw	r2,76(r20)
 4014adc:	18c7883a 	add	r3,r3,r3
 4014ae0:	18c7883a 	add	r3,r3,r3
 4014ae4:	10c5883a 	add	r2,r2,r3
 4014ae8:	10c00017 	ldw	r3,0(r2)
 4014aec:	98c00015 	stw	r3,0(r19)
 4014af0:	14c00015 	stw	r19,0(r2)
 4014af4:	8827883a 	mov	r19,r17
 4014af8:	003fd606 	br	4014a54 <__alt_data_end+0xfc014a54>
 4014afc:	8827883a 	mov	r19,r17
 4014b00:	003fd406 	br	4014a54 <__alt_data_end+0xfc014a54>

04014b04 <__s2b>:
 4014b04:	defff904 	addi	sp,sp,-28
 4014b08:	dc400115 	stw	r17,4(sp)
 4014b0c:	dc000015 	stw	r16,0(sp)
 4014b10:	2023883a 	mov	r17,r4
 4014b14:	2821883a 	mov	r16,r5
 4014b18:	39000204 	addi	r4,r7,8
 4014b1c:	01400244 	movi	r5,9
 4014b20:	dcc00315 	stw	r19,12(sp)
 4014b24:	dc800215 	stw	r18,8(sp)
 4014b28:	dfc00615 	stw	ra,24(sp)
 4014b2c:	dd400515 	stw	r21,20(sp)
 4014b30:	dd000415 	stw	r20,16(sp)
 4014b34:	3825883a 	mov	r18,r7
 4014b38:	3027883a 	mov	r19,r6
 4014b3c:	400d1b40 	call	400d1b4 <__divsi3>
 4014b40:	00c00044 	movi	r3,1
 4014b44:	000b883a 	mov	r5,zero
 4014b48:	1880030e 	bge	r3,r2,4014b58 <__s2b+0x54>
 4014b4c:	18c7883a 	add	r3,r3,r3
 4014b50:	29400044 	addi	r5,r5,1
 4014b54:	18bffd16 	blt	r3,r2,4014b4c <__alt_data_end+0xfc014b4c>
 4014b58:	8809883a 	mov	r4,r17
 4014b5c:	40148ec0 	call	40148ec <_Balloc>
 4014b60:	d8c00717 	ldw	r3,28(sp)
 4014b64:	10c00515 	stw	r3,20(r2)
 4014b68:	00c00044 	movi	r3,1
 4014b6c:	10c00415 	stw	r3,16(r2)
 4014b70:	00c00244 	movi	r3,9
 4014b74:	1cc0210e 	bge	r3,r19,4014bfc <__s2b+0xf8>
 4014b78:	80eb883a 	add	r21,r16,r3
 4014b7c:	a829883a 	mov	r20,r21
 4014b80:	84e1883a 	add	r16,r16,r19
 4014b84:	a1c00007 	ldb	r7,0(r20)
 4014b88:	01800284 	movi	r6,10
 4014b8c:	a5000044 	addi	r20,r20,1
 4014b90:	100b883a 	mov	r5,r2
 4014b94:	39fff404 	addi	r7,r7,-48
 4014b98:	8809883a 	mov	r4,r17
 4014b9c:	40149bc0 	call	40149bc <__multadd>
 4014ba0:	a43ff81e 	bne	r20,r16,4014b84 <__alt_data_end+0xfc014b84>
 4014ba4:	ace1883a 	add	r16,r21,r19
 4014ba8:	843ffe04 	addi	r16,r16,-8
 4014bac:	9c800a0e 	bge	r19,r18,4014bd8 <__s2b+0xd4>
 4014bb0:	94e5c83a 	sub	r18,r18,r19
 4014bb4:	84a5883a 	add	r18,r16,r18
 4014bb8:	81c00007 	ldb	r7,0(r16)
 4014bbc:	01800284 	movi	r6,10
 4014bc0:	84000044 	addi	r16,r16,1
 4014bc4:	100b883a 	mov	r5,r2
 4014bc8:	39fff404 	addi	r7,r7,-48
 4014bcc:	8809883a 	mov	r4,r17
 4014bd0:	40149bc0 	call	40149bc <__multadd>
 4014bd4:	84bff81e 	bne	r16,r18,4014bb8 <__alt_data_end+0xfc014bb8>
 4014bd8:	dfc00617 	ldw	ra,24(sp)
 4014bdc:	dd400517 	ldw	r21,20(sp)
 4014be0:	dd000417 	ldw	r20,16(sp)
 4014be4:	dcc00317 	ldw	r19,12(sp)
 4014be8:	dc800217 	ldw	r18,8(sp)
 4014bec:	dc400117 	ldw	r17,4(sp)
 4014bf0:	dc000017 	ldw	r16,0(sp)
 4014bf4:	dec00704 	addi	sp,sp,28
 4014bf8:	f800283a 	ret
 4014bfc:	84000284 	addi	r16,r16,10
 4014c00:	1827883a 	mov	r19,r3
 4014c04:	003fe906 	br	4014bac <__alt_data_end+0xfc014bac>

04014c08 <__hi0bits>:
 4014c08:	20bfffec 	andhi	r2,r4,65535
 4014c0c:	1000141e 	bne	r2,zero,4014c60 <__hi0bits+0x58>
 4014c10:	2008943a 	slli	r4,r4,16
 4014c14:	00800404 	movi	r2,16
 4014c18:	20ffc02c 	andhi	r3,r4,65280
 4014c1c:	1800021e 	bne	r3,zero,4014c28 <__hi0bits+0x20>
 4014c20:	2008923a 	slli	r4,r4,8
 4014c24:	10800204 	addi	r2,r2,8
 4014c28:	20fc002c 	andhi	r3,r4,61440
 4014c2c:	1800021e 	bne	r3,zero,4014c38 <__hi0bits+0x30>
 4014c30:	2008913a 	slli	r4,r4,4
 4014c34:	10800104 	addi	r2,r2,4
 4014c38:	20f0002c 	andhi	r3,r4,49152
 4014c3c:	1800031e 	bne	r3,zero,4014c4c <__hi0bits+0x44>
 4014c40:	2109883a 	add	r4,r4,r4
 4014c44:	10800084 	addi	r2,r2,2
 4014c48:	2109883a 	add	r4,r4,r4
 4014c4c:	20000316 	blt	r4,zero,4014c5c <__hi0bits+0x54>
 4014c50:	2110002c 	andhi	r4,r4,16384
 4014c54:	2000041e 	bne	r4,zero,4014c68 <__hi0bits+0x60>
 4014c58:	00800804 	movi	r2,32
 4014c5c:	f800283a 	ret
 4014c60:	0005883a 	mov	r2,zero
 4014c64:	003fec06 	br	4014c18 <__alt_data_end+0xfc014c18>
 4014c68:	10800044 	addi	r2,r2,1
 4014c6c:	f800283a 	ret

04014c70 <__lo0bits>:
 4014c70:	20c00017 	ldw	r3,0(r4)
 4014c74:	188001cc 	andi	r2,r3,7
 4014c78:	10000826 	beq	r2,zero,4014c9c <__lo0bits+0x2c>
 4014c7c:	1880004c 	andi	r2,r3,1
 4014c80:	1000211e 	bne	r2,zero,4014d08 <__lo0bits+0x98>
 4014c84:	1880008c 	andi	r2,r3,2
 4014c88:	1000211e 	bne	r2,zero,4014d10 <__lo0bits+0xa0>
 4014c8c:	1806d0ba 	srli	r3,r3,2
 4014c90:	00800084 	movi	r2,2
 4014c94:	20c00015 	stw	r3,0(r4)
 4014c98:	f800283a 	ret
 4014c9c:	18bfffcc 	andi	r2,r3,65535
 4014ca0:	10001326 	beq	r2,zero,4014cf0 <__lo0bits+0x80>
 4014ca4:	0005883a 	mov	r2,zero
 4014ca8:	19403fcc 	andi	r5,r3,255
 4014cac:	2800021e 	bne	r5,zero,4014cb8 <__lo0bits+0x48>
 4014cb0:	1806d23a 	srli	r3,r3,8
 4014cb4:	10800204 	addi	r2,r2,8
 4014cb8:	194003cc 	andi	r5,r3,15
 4014cbc:	2800021e 	bne	r5,zero,4014cc8 <__lo0bits+0x58>
 4014cc0:	1806d13a 	srli	r3,r3,4
 4014cc4:	10800104 	addi	r2,r2,4
 4014cc8:	194000cc 	andi	r5,r3,3
 4014ccc:	2800021e 	bne	r5,zero,4014cd8 <__lo0bits+0x68>
 4014cd0:	1806d0ba 	srli	r3,r3,2
 4014cd4:	10800084 	addi	r2,r2,2
 4014cd8:	1940004c 	andi	r5,r3,1
 4014cdc:	2800081e 	bne	r5,zero,4014d00 <__lo0bits+0x90>
 4014ce0:	1806d07a 	srli	r3,r3,1
 4014ce4:	1800051e 	bne	r3,zero,4014cfc <__lo0bits+0x8c>
 4014ce8:	00800804 	movi	r2,32
 4014cec:	f800283a 	ret
 4014cf0:	1806d43a 	srli	r3,r3,16
 4014cf4:	00800404 	movi	r2,16
 4014cf8:	003feb06 	br	4014ca8 <__alt_data_end+0xfc014ca8>
 4014cfc:	10800044 	addi	r2,r2,1
 4014d00:	20c00015 	stw	r3,0(r4)
 4014d04:	f800283a 	ret
 4014d08:	0005883a 	mov	r2,zero
 4014d0c:	f800283a 	ret
 4014d10:	1806d07a 	srli	r3,r3,1
 4014d14:	00800044 	movi	r2,1
 4014d18:	20c00015 	stw	r3,0(r4)
 4014d1c:	f800283a 	ret

04014d20 <__i2b>:
 4014d20:	defffd04 	addi	sp,sp,-12
 4014d24:	dc000015 	stw	r16,0(sp)
 4014d28:	04000044 	movi	r16,1
 4014d2c:	dc400115 	stw	r17,4(sp)
 4014d30:	2823883a 	mov	r17,r5
 4014d34:	800b883a 	mov	r5,r16
 4014d38:	dfc00215 	stw	ra,8(sp)
 4014d3c:	40148ec0 	call	40148ec <_Balloc>
 4014d40:	14400515 	stw	r17,20(r2)
 4014d44:	14000415 	stw	r16,16(r2)
 4014d48:	dfc00217 	ldw	ra,8(sp)
 4014d4c:	dc400117 	ldw	r17,4(sp)
 4014d50:	dc000017 	ldw	r16,0(sp)
 4014d54:	dec00304 	addi	sp,sp,12
 4014d58:	f800283a 	ret

04014d5c <__multiply>:
 4014d5c:	deffef04 	addi	sp,sp,-68
 4014d60:	dc400815 	stw	r17,32(sp)
 4014d64:	dc000715 	stw	r16,28(sp)
 4014d68:	34400417 	ldw	r17,16(r6)
 4014d6c:	2c000417 	ldw	r16,16(r5)
 4014d70:	dd800d15 	stw	r22,52(sp)
 4014d74:	dc800915 	stw	r18,36(sp)
 4014d78:	dfc01015 	stw	ra,64(sp)
 4014d7c:	df000f15 	stw	fp,60(sp)
 4014d80:	ddc00e15 	stw	r23,56(sp)
 4014d84:	dd400c15 	stw	r21,48(sp)
 4014d88:	dd000b15 	stw	r20,44(sp)
 4014d8c:	dcc00a15 	stw	r19,40(sp)
 4014d90:	2825883a 	mov	r18,r5
 4014d94:	302d883a 	mov	r22,r6
 4014d98:	8440050e 	bge	r16,r17,4014db0 <__multiply+0x54>
 4014d9c:	8007883a 	mov	r3,r16
 4014da0:	3025883a 	mov	r18,r6
 4014da4:	8821883a 	mov	r16,r17
 4014da8:	282d883a 	mov	r22,r5
 4014dac:	1823883a 	mov	r17,r3
 4014db0:	90800217 	ldw	r2,8(r18)
 4014db4:	8447883a 	add	r3,r16,r17
 4014db8:	d8c00215 	stw	r3,8(sp)
 4014dbc:	91400117 	ldw	r5,4(r18)
 4014dc0:	10c0010e 	bge	r2,r3,4014dc8 <__multiply+0x6c>
 4014dc4:	29400044 	addi	r5,r5,1
 4014dc8:	40148ec0 	call	40148ec <_Balloc>
 4014dcc:	d8c00217 	ldw	r3,8(sp)
 4014dd0:	d8800615 	stw	r2,24(sp)
 4014dd4:	18eb883a 	add	r21,r3,r3
 4014dd8:	ad6b883a 	add	r21,r21,r21
 4014ddc:	10c00504 	addi	r3,r2,20
 4014de0:	1d6b883a 	add	r21,r3,r21
 4014de4:	d8c00115 	stw	r3,4(sp)
 4014de8:	dd400315 	stw	r21,12(sp)
 4014dec:	1805883a 	mov	r2,r3
 4014df0:	1d40042e 	bgeu	r3,r21,4014e04 <__multiply+0xa8>
 4014df4:	d8c00317 	ldw	r3,12(sp)
 4014df8:	10000015 	stw	zero,0(r2)
 4014dfc:	10800104 	addi	r2,r2,4
 4014e00:	10fffc36 	bltu	r2,r3,4014df4 <__alt_data_end+0xfc014df4>
 4014e04:	8c63883a 	add	r17,r17,r17
 4014e08:	b5800504 	addi	r22,r22,20
 4014e0c:	8c63883a 	add	r17,r17,r17
 4014e10:	94800504 	addi	r18,r18,20
 4014e14:	8421883a 	add	r16,r16,r16
 4014e18:	b463883a 	add	r17,r22,r17
 4014e1c:	8421883a 	add	r16,r16,r16
 4014e20:	dd800015 	stw	r22,0(sp)
 4014e24:	dc800415 	stw	r18,16(sp)
 4014e28:	dc400515 	stw	r17,20(sp)
 4014e2c:	9429883a 	add	r20,r18,r16
 4014e30:	b4404f2e 	bgeu	r22,r17,4014f70 <__multiply+0x214>
 4014e34:	d8c00017 	ldw	r3,0(sp)
 4014e38:	1c800017 	ldw	r18,0(r3)
 4014e3c:	947fffcc 	andi	r17,r18,65535
 4014e40:	88001e26 	beq	r17,zero,4014ebc <__multiply+0x160>
 4014e44:	dd800117 	ldw	r22,4(sp)
 4014e48:	dd400417 	ldw	r21,16(sp)
 4014e4c:	0027883a 	mov	r19,zero
 4014e50:	ac800017 	ldw	r18,0(r21)
 4014e54:	b4000017 	ldw	r16,0(r22)
 4014e58:	880b883a 	mov	r5,r17
 4014e5c:	913fffcc 	andi	r4,r18,65535
 4014e60:	400d3680 	call	400d368 <__mulsi3>
 4014e64:	9008d43a 	srli	r4,r18,16
 4014e68:	84bfffcc 	andi	r18,r16,65535
 4014e6c:	1485883a 	add	r2,r2,r18
 4014e70:	14e5883a 	add	r18,r2,r19
 4014e74:	8020d43a 	srli	r16,r16,16
 4014e78:	9026d43a 	srli	r19,r18,16
 4014e7c:	880b883a 	mov	r5,r17
 4014e80:	400d3680 	call	400d368 <__mulsi3>
 4014e84:	1405883a 	add	r2,r2,r16
 4014e88:	14e1883a 	add	r16,r2,r19
 4014e8c:	90ffffcc 	andi	r3,r18,65535
 4014e90:	8024943a 	slli	r18,r16,16
 4014e94:	ad400104 	addi	r21,r21,4
 4014e98:	b005883a 	mov	r2,r22
 4014e9c:	90c6b03a 	or	r3,r18,r3
 4014ea0:	b0c00015 	stw	r3,0(r22)
 4014ea4:	8026d43a 	srli	r19,r16,16
 4014ea8:	b5800104 	addi	r22,r22,4
 4014eac:	ad3fe836 	bltu	r21,r20,4014e50 <__alt_data_end+0xfc014e50>
 4014eb0:	d8c00017 	ldw	r3,0(sp)
 4014eb4:	14c00115 	stw	r19,4(r2)
 4014eb8:	1c800017 	ldw	r18,0(r3)
 4014ebc:	9024d43a 	srli	r18,r18,16
 4014ec0:	90002226 	beq	r18,zero,4014f4c <__multiply+0x1f0>
 4014ec4:	d8c00117 	ldw	r3,4(sp)
 4014ec8:	dd800417 	ldw	r22,16(sp)
 4014ecc:	002f883a 	mov	r23,zero
 4014ed0:	1f000017 	ldw	fp,0(r3)
 4014ed4:	1823883a 	mov	r17,r3
 4014ed8:	182b883a 	mov	r21,r3
 4014edc:	e021883a 	mov	r16,fp
 4014ee0:	00000106 	br	4014ee8 <__multiply+0x18c>
 4014ee4:	982b883a 	mov	r21,r19
 4014ee8:	b100000b 	ldhu	r4,0(r22)
 4014eec:	8020d43a 	srli	r16,r16,16
 4014ef0:	900b883a 	mov	r5,r18
 4014ef4:	400d3680 	call	400d368 <__mulsi3>
 4014ef8:	1405883a 	add	r2,r2,r16
 4014efc:	15ef883a 	add	r23,r2,r23
 4014f00:	b804943a 	slli	r2,r23,16
 4014f04:	e0ffffcc 	andi	r3,fp,65535
 4014f08:	8c400104 	addi	r17,r17,4
 4014f0c:	10c6b03a 	or	r3,r2,r3
 4014f10:	88ffff15 	stw	r3,-4(r17)
 4014f14:	b5800104 	addi	r22,r22,4
 4014f18:	b13fff17 	ldw	r4,-4(r22)
 4014f1c:	acc00104 	addi	r19,r21,4
 4014f20:	900b883a 	mov	r5,r18
 4014f24:	2008d43a 	srli	r4,r4,16
 4014f28:	9c000017 	ldw	r16,0(r19)
 4014f2c:	400d3680 	call	400d368 <__mulsi3>
 4014f30:	b806d43a 	srli	r3,r23,16
 4014f34:	813fffcc 	andi	r4,r16,65535
 4014f38:	1105883a 	add	r2,r2,r4
 4014f3c:	10f9883a 	add	fp,r2,r3
 4014f40:	e02ed43a 	srli	r23,fp,16
 4014f44:	b53fe736 	bltu	r22,r20,4014ee4 <__alt_data_end+0xfc014ee4>
 4014f48:	af000115 	stw	fp,4(r21)
 4014f4c:	d8c00017 	ldw	r3,0(sp)
 4014f50:	d9000517 	ldw	r4,20(sp)
 4014f54:	18c00104 	addi	r3,r3,4
 4014f58:	d8c00015 	stw	r3,0(sp)
 4014f5c:	d8c00117 	ldw	r3,4(sp)
 4014f60:	18c00104 	addi	r3,r3,4
 4014f64:	d8c00115 	stw	r3,4(sp)
 4014f68:	d8c00017 	ldw	r3,0(sp)
 4014f6c:	193fb136 	bltu	r3,r4,4014e34 <__alt_data_end+0xfc014e34>
 4014f70:	d8c00217 	ldw	r3,8(sp)
 4014f74:	00c00c0e 	bge	zero,r3,4014fa8 <__multiply+0x24c>
 4014f78:	d8c00317 	ldw	r3,12(sp)
 4014f7c:	18bfff17 	ldw	r2,-4(r3)
 4014f80:	1d7fff04 	addi	r21,r3,-4
 4014f84:	10000326 	beq	r2,zero,4014f94 <__multiply+0x238>
 4014f88:	00000706 	br	4014fa8 <__multiply+0x24c>
 4014f8c:	a8800017 	ldw	r2,0(r21)
 4014f90:	1000051e 	bne	r2,zero,4014fa8 <__multiply+0x24c>
 4014f94:	d8c00217 	ldw	r3,8(sp)
 4014f98:	ad7fff04 	addi	r21,r21,-4
 4014f9c:	18ffffc4 	addi	r3,r3,-1
 4014fa0:	d8c00215 	stw	r3,8(sp)
 4014fa4:	183ff91e 	bne	r3,zero,4014f8c <__alt_data_end+0xfc014f8c>
 4014fa8:	d8c00617 	ldw	r3,24(sp)
 4014fac:	d9000217 	ldw	r4,8(sp)
 4014fb0:	1805883a 	mov	r2,r3
 4014fb4:	19000415 	stw	r4,16(r3)
 4014fb8:	dfc01017 	ldw	ra,64(sp)
 4014fbc:	df000f17 	ldw	fp,60(sp)
 4014fc0:	ddc00e17 	ldw	r23,56(sp)
 4014fc4:	dd800d17 	ldw	r22,52(sp)
 4014fc8:	dd400c17 	ldw	r21,48(sp)
 4014fcc:	dd000b17 	ldw	r20,44(sp)
 4014fd0:	dcc00a17 	ldw	r19,40(sp)
 4014fd4:	dc800917 	ldw	r18,36(sp)
 4014fd8:	dc400817 	ldw	r17,32(sp)
 4014fdc:	dc000717 	ldw	r16,28(sp)
 4014fe0:	dec01104 	addi	sp,sp,68
 4014fe4:	f800283a 	ret

04014fe8 <__pow5mult>:
 4014fe8:	defffa04 	addi	sp,sp,-24
 4014fec:	dcc00315 	stw	r19,12(sp)
 4014ff0:	dc000015 	stw	r16,0(sp)
 4014ff4:	dfc00515 	stw	ra,20(sp)
 4014ff8:	dd000415 	stw	r20,16(sp)
 4014ffc:	dc800215 	stw	r18,8(sp)
 4015000:	dc400115 	stw	r17,4(sp)
 4015004:	308000cc 	andi	r2,r6,3
 4015008:	3021883a 	mov	r16,r6
 401500c:	2027883a 	mov	r19,r4
 4015010:	10002f1e 	bne	r2,zero,40150d0 <__pow5mult+0xe8>
 4015014:	2825883a 	mov	r18,r5
 4015018:	8021d0ba 	srai	r16,r16,2
 401501c:	80001a26 	beq	r16,zero,4015088 <__pow5mult+0xa0>
 4015020:	9c401217 	ldw	r17,72(r19)
 4015024:	8800061e 	bne	r17,zero,4015040 <__pow5mult+0x58>
 4015028:	00003406 	br	40150fc <__pow5mult+0x114>
 401502c:	8021d07a 	srai	r16,r16,1
 4015030:	80001526 	beq	r16,zero,4015088 <__pow5mult+0xa0>
 4015034:	88800017 	ldw	r2,0(r17)
 4015038:	10001c26 	beq	r2,zero,40150ac <__pow5mult+0xc4>
 401503c:	1023883a 	mov	r17,r2
 4015040:	8080004c 	andi	r2,r16,1
 4015044:	103ff926 	beq	r2,zero,401502c <__alt_data_end+0xfc01502c>
 4015048:	880d883a 	mov	r6,r17
 401504c:	900b883a 	mov	r5,r18
 4015050:	9809883a 	mov	r4,r19
 4015054:	4014d5c0 	call	4014d5c <__multiply>
 4015058:	90001b26 	beq	r18,zero,40150c8 <__pow5mult+0xe0>
 401505c:	91000117 	ldw	r4,4(r18)
 4015060:	98c01317 	ldw	r3,76(r19)
 4015064:	8021d07a 	srai	r16,r16,1
 4015068:	2109883a 	add	r4,r4,r4
 401506c:	2109883a 	add	r4,r4,r4
 4015070:	1907883a 	add	r3,r3,r4
 4015074:	19000017 	ldw	r4,0(r3)
 4015078:	91000015 	stw	r4,0(r18)
 401507c:	1c800015 	stw	r18,0(r3)
 4015080:	1025883a 	mov	r18,r2
 4015084:	803feb1e 	bne	r16,zero,4015034 <__alt_data_end+0xfc015034>
 4015088:	9005883a 	mov	r2,r18
 401508c:	dfc00517 	ldw	ra,20(sp)
 4015090:	dd000417 	ldw	r20,16(sp)
 4015094:	dcc00317 	ldw	r19,12(sp)
 4015098:	dc800217 	ldw	r18,8(sp)
 401509c:	dc400117 	ldw	r17,4(sp)
 40150a0:	dc000017 	ldw	r16,0(sp)
 40150a4:	dec00604 	addi	sp,sp,24
 40150a8:	f800283a 	ret
 40150ac:	880d883a 	mov	r6,r17
 40150b0:	880b883a 	mov	r5,r17
 40150b4:	9809883a 	mov	r4,r19
 40150b8:	4014d5c0 	call	4014d5c <__multiply>
 40150bc:	88800015 	stw	r2,0(r17)
 40150c0:	10000015 	stw	zero,0(r2)
 40150c4:	003fdd06 	br	401503c <__alt_data_end+0xfc01503c>
 40150c8:	1025883a 	mov	r18,r2
 40150cc:	003fd706 	br	401502c <__alt_data_end+0xfc01502c>
 40150d0:	10bfffc4 	addi	r2,r2,-1
 40150d4:	1085883a 	add	r2,r2,r2
 40150d8:	00c100b4 	movhi	r3,1026
 40150dc:	18dcb904 	addi	r3,r3,29412
 40150e0:	1085883a 	add	r2,r2,r2
 40150e4:	1885883a 	add	r2,r3,r2
 40150e8:	11800017 	ldw	r6,0(r2)
 40150ec:	000f883a 	mov	r7,zero
 40150f0:	40149bc0 	call	40149bc <__multadd>
 40150f4:	1025883a 	mov	r18,r2
 40150f8:	003fc706 	br	4015018 <__alt_data_end+0xfc015018>
 40150fc:	05000044 	movi	r20,1
 4015100:	a00b883a 	mov	r5,r20
 4015104:	9809883a 	mov	r4,r19
 4015108:	40148ec0 	call	40148ec <_Balloc>
 401510c:	1023883a 	mov	r17,r2
 4015110:	00809c44 	movi	r2,625
 4015114:	88800515 	stw	r2,20(r17)
 4015118:	8d000415 	stw	r20,16(r17)
 401511c:	9c401215 	stw	r17,72(r19)
 4015120:	88000015 	stw	zero,0(r17)
 4015124:	003fc606 	br	4015040 <__alt_data_end+0xfc015040>

04015128 <__lshift>:
 4015128:	defff904 	addi	sp,sp,-28
 401512c:	dd400515 	stw	r21,20(sp)
 4015130:	dcc00315 	stw	r19,12(sp)
 4015134:	302bd17a 	srai	r21,r6,5
 4015138:	2cc00417 	ldw	r19,16(r5)
 401513c:	28800217 	ldw	r2,8(r5)
 4015140:	dd000415 	stw	r20,16(sp)
 4015144:	ace7883a 	add	r19,r21,r19
 4015148:	dc800215 	stw	r18,8(sp)
 401514c:	dc400115 	stw	r17,4(sp)
 4015150:	dc000015 	stw	r16,0(sp)
 4015154:	dfc00615 	stw	ra,24(sp)
 4015158:	9c000044 	addi	r16,r19,1
 401515c:	2823883a 	mov	r17,r5
 4015160:	3029883a 	mov	r20,r6
 4015164:	2025883a 	mov	r18,r4
 4015168:	29400117 	ldw	r5,4(r5)
 401516c:	1400030e 	bge	r2,r16,401517c <__lshift+0x54>
 4015170:	1085883a 	add	r2,r2,r2
 4015174:	29400044 	addi	r5,r5,1
 4015178:	143ffd16 	blt	r2,r16,4015170 <__alt_data_end+0xfc015170>
 401517c:	9009883a 	mov	r4,r18
 4015180:	40148ec0 	call	40148ec <_Balloc>
 4015184:	10c00504 	addi	r3,r2,20
 4015188:	0540070e 	bge	zero,r21,40151a8 <__lshift+0x80>
 401518c:	ad6b883a 	add	r21,r21,r21
 4015190:	ad6b883a 	add	r21,r21,r21
 4015194:	1809883a 	mov	r4,r3
 4015198:	1d47883a 	add	r3,r3,r21
 401519c:	20000015 	stw	zero,0(r4)
 40151a0:	21000104 	addi	r4,r4,4
 40151a4:	193ffd1e 	bne	r3,r4,401519c <__alt_data_end+0xfc01519c>
 40151a8:	8a000417 	ldw	r8,16(r17)
 40151ac:	89000504 	addi	r4,r17,20
 40151b0:	a18007cc 	andi	r6,r20,31
 40151b4:	4211883a 	add	r8,r8,r8
 40151b8:	4211883a 	add	r8,r8,r8
 40151bc:	2211883a 	add	r8,r4,r8
 40151c0:	30002326 	beq	r6,zero,4015250 <__lshift+0x128>
 40151c4:	02400804 	movi	r9,32
 40151c8:	4993c83a 	sub	r9,r9,r6
 40151cc:	000b883a 	mov	r5,zero
 40151d0:	21c00017 	ldw	r7,0(r4)
 40151d4:	1815883a 	mov	r10,r3
 40151d8:	18c00104 	addi	r3,r3,4
 40151dc:	398e983a 	sll	r7,r7,r6
 40151e0:	21000104 	addi	r4,r4,4
 40151e4:	394ab03a 	or	r5,r7,r5
 40151e8:	197fff15 	stw	r5,-4(r3)
 40151ec:	217fff17 	ldw	r5,-4(r4)
 40151f0:	2a4ad83a 	srl	r5,r5,r9
 40151f4:	223ff636 	bltu	r4,r8,40151d0 <__alt_data_end+0xfc0151d0>
 40151f8:	51400115 	stw	r5,4(r10)
 40151fc:	28001a1e 	bne	r5,zero,4015268 <__lshift+0x140>
 4015200:	843fffc4 	addi	r16,r16,-1
 4015204:	14000415 	stw	r16,16(r2)
 4015208:	88000826 	beq	r17,zero,401522c <__lshift+0x104>
 401520c:	89000117 	ldw	r4,4(r17)
 4015210:	90c01317 	ldw	r3,76(r18)
 4015214:	2109883a 	add	r4,r4,r4
 4015218:	2109883a 	add	r4,r4,r4
 401521c:	1907883a 	add	r3,r3,r4
 4015220:	19000017 	ldw	r4,0(r3)
 4015224:	89000015 	stw	r4,0(r17)
 4015228:	1c400015 	stw	r17,0(r3)
 401522c:	dfc00617 	ldw	ra,24(sp)
 4015230:	dd400517 	ldw	r21,20(sp)
 4015234:	dd000417 	ldw	r20,16(sp)
 4015238:	dcc00317 	ldw	r19,12(sp)
 401523c:	dc800217 	ldw	r18,8(sp)
 4015240:	dc400117 	ldw	r17,4(sp)
 4015244:	dc000017 	ldw	r16,0(sp)
 4015248:	dec00704 	addi	sp,sp,28
 401524c:	f800283a 	ret
 4015250:	21400017 	ldw	r5,0(r4)
 4015254:	18c00104 	addi	r3,r3,4
 4015258:	21000104 	addi	r4,r4,4
 401525c:	197fff15 	stw	r5,-4(r3)
 4015260:	223ffb36 	bltu	r4,r8,4015250 <__alt_data_end+0xfc015250>
 4015264:	003fe606 	br	4015200 <__alt_data_end+0xfc015200>
 4015268:	9c000084 	addi	r16,r19,2
 401526c:	003fe406 	br	4015200 <__alt_data_end+0xfc015200>

04015270 <__mcmp>:
 4015270:	20800417 	ldw	r2,16(r4)
 4015274:	28c00417 	ldw	r3,16(r5)
 4015278:	10c5c83a 	sub	r2,r2,r3
 401527c:	1000111e 	bne	r2,zero,40152c4 <__mcmp+0x54>
 4015280:	18c7883a 	add	r3,r3,r3
 4015284:	18c7883a 	add	r3,r3,r3
 4015288:	21000504 	addi	r4,r4,20
 401528c:	29400504 	addi	r5,r5,20
 4015290:	20c5883a 	add	r2,r4,r3
 4015294:	28cb883a 	add	r5,r5,r3
 4015298:	00000106 	br	40152a0 <__mcmp+0x30>
 401529c:	20800a2e 	bgeu	r4,r2,40152c8 <__mcmp+0x58>
 40152a0:	10bfff04 	addi	r2,r2,-4
 40152a4:	297fff04 	addi	r5,r5,-4
 40152a8:	11800017 	ldw	r6,0(r2)
 40152ac:	28c00017 	ldw	r3,0(r5)
 40152b0:	30fffa26 	beq	r6,r3,401529c <__alt_data_end+0xfc01529c>
 40152b4:	30c00236 	bltu	r6,r3,40152c0 <__mcmp+0x50>
 40152b8:	00800044 	movi	r2,1
 40152bc:	f800283a 	ret
 40152c0:	00bfffc4 	movi	r2,-1
 40152c4:	f800283a 	ret
 40152c8:	0005883a 	mov	r2,zero
 40152cc:	f800283a 	ret

040152d0 <__mdiff>:
 40152d0:	28c00417 	ldw	r3,16(r5)
 40152d4:	30800417 	ldw	r2,16(r6)
 40152d8:	defffa04 	addi	sp,sp,-24
 40152dc:	dcc00315 	stw	r19,12(sp)
 40152e0:	dc800215 	stw	r18,8(sp)
 40152e4:	dfc00515 	stw	ra,20(sp)
 40152e8:	dd000415 	stw	r20,16(sp)
 40152ec:	dc400115 	stw	r17,4(sp)
 40152f0:	dc000015 	stw	r16,0(sp)
 40152f4:	1887c83a 	sub	r3,r3,r2
 40152f8:	2825883a 	mov	r18,r5
 40152fc:	3027883a 	mov	r19,r6
 4015300:	1800141e 	bne	r3,zero,4015354 <__mdiff+0x84>
 4015304:	1085883a 	add	r2,r2,r2
 4015308:	1085883a 	add	r2,r2,r2
 401530c:	2a000504 	addi	r8,r5,20
 4015310:	34000504 	addi	r16,r6,20
 4015314:	4087883a 	add	r3,r8,r2
 4015318:	8085883a 	add	r2,r16,r2
 401531c:	00000106 	br	4015324 <__mdiff+0x54>
 4015320:	40c0592e 	bgeu	r8,r3,4015488 <__mdiff+0x1b8>
 4015324:	18ffff04 	addi	r3,r3,-4
 4015328:	10bfff04 	addi	r2,r2,-4
 401532c:	19c00017 	ldw	r7,0(r3)
 4015330:	11400017 	ldw	r5,0(r2)
 4015334:	397ffa26 	beq	r7,r5,4015320 <__alt_data_end+0xfc015320>
 4015338:	3940592e 	bgeu	r7,r5,40154a0 <__mdiff+0x1d0>
 401533c:	9005883a 	mov	r2,r18
 4015340:	4023883a 	mov	r17,r8
 4015344:	9825883a 	mov	r18,r19
 4015348:	05000044 	movi	r20,1
 401534c:	1027883a 	mov	r19,r2
 4015350:	00000406 	br	4015364 <__mdiff+0x94>
 4015354:	18005616 	blt	r3,zero,40154b0 <__mdiff+0x1e0>
 4015358:	34400504 	addi	r17,r6,20
 401535c:	2c000504 	addi	r16,r5,20
 4015360:	0029883a 	mov	r20,zero
 4015364:	91400117 	ldw	r5,4(r18)
 4015368:	40148ec0 	call	40148ec <_Balloc>
 401536c:	92400417 	ldw	r9,16(r18)
 4015370:	9b000417 	ldw	r12,16(r19)
 4015374:	12c00504 	addi	r11,r2,20
 4015378:	4a51883a 	add	r8,r9,r9
 401537c:	6319883a 	add	r12,r12,r12
 4015380:	4211883a 	add	r8,r8,r8
 4015384:	6319883a 	add	r12,r12,r12
 4015388:	15000315 	stw	r20,12(r2)
 401538c:	8211883a 	add	r8,r16,r8
 4015390:	8b19883a 	add	r12,r17,r12
 4015394:	0007883a 	mov	r3,zero
 4015398:	81400017 	ldw	r5,0(r16)
 401539c:	89c00017 	ldw	r7,0(r17)
 40153a0:	59800104 	addi	r6,r11,4
 40153a4:	293fffcc 	andi	r4,r5,65535
 40153a8:	20c7883a 	add	r3,r4,r3
 40153ac:	393fffcc 	andi	r4,r7,65535
 40153b0:	1909c83a 	sub	r4,r3,r4
 40153b4:	280ad43a 	srli	r5,r5,16
 40153b8:	380ed43a 	srli	r7,r7,16
 40153bc:	2007d43a 	srai	r3,r4,16
 40153c0:	213fffcc 	andi	r4,r4,65535
 40153c4:	29cbc83a 	sub	r5,r5,r7
 40153c8:	28c7883a 	add	r3,r5,r3
 40153cc:	180a943a 	slli	r5,r3,16
 40153d0:	8c400104 	addi	r17,r17,4
 40153d4:	84000104 	addi	r16,r16,4
 40153d8:	2908b03a 	or	r4,r5,r4
 40153dc:	59000015 	stw	r4,0(r11)
 40153e0:	1807d43a 	srai	r3,r3,16
 40153e4:	3015883a 	mov	r10,r6
 40153e8:	3017883a 	mov	r11,r6
 40153ec:	8b3fea36 	bltu	r17,r12,4015398 <__alt_data_end+0xfc015398>
 40153f0:	8200162e 	bgeu	r16,r8,401544c <__mdiff+0x17c>
 40153f4:	8017883a 	mov	r11,r16
 40153f8:	59400017 	ldw	r5,0(r11)
 40153fc:	31800104 	addi	r6,r6,4
 4015400:	5ac00104 	addi	r11,r11,4
 4015404:	293fffcc 	andi	r4,r5,65535
 4015408:	20c7883a 	add	r3,r4,r3
 401540c:	280ed43a 	srli	r7,r5,16
 4015410:	180bd43a 	srai	r5,r3,16
 4015414:	193fffcc 	andi	r4,r3,65535
 4015418:	3947883a 	add	r3,r7,r5
 401541c:	180a943a 	slli	r5,r3,16
 4015420:	1807d43a 	srai	r3,r3,16
 4015424:	2908b03a 	or	r4,r5,r4
 4015428:	313fff15 	stw	r4,-4(r6)
 401542c:	5a3ff236 	bltu	r11,r8,40153f8 <__alt_data_end+0xfc0153f8>
 4015430:	0406303a 	nor	r3,zero,r16
 4015434:	1a07883a 	add	r3,r3,r8
 4015438:	1806d0ba 	srli	r3,r3,2
 401543c:	18c00044 	addi	r3,r3,1
 4015440:	18c7883a 	add	r3,r3,r3
 4015444:	18c7883a 	add	r3,r3,r3
 4015448:	50d5883a 	add	r10,r10,r3
 401544c:	50ffff04 	addi	r3,r10,-4
 4015450:	2000041e 	bne	r4,zero,4015464 <__mdiff+0x194>
 4015454:	18ffff04 	addi	r3,r3,-4
 4015458:	19000017 	ldw	r4,0(r3)
 401545c:	4a7fffc4 	addi	r9,r9,-1
 4015460:	203ffc26 	beq	r4,zero,4015454 <__alt_data_end+0xfc015454>
 4015464:	12400415 	stw	r9,16(r2)
 4015468:	dfc00517 	ldw	ra,20(sp)
 401546c:	dd000417 	ldw	r20,16(sp)
 4015470:	dcc00317 	ldw	r19,12(sp)
 4015474:	dc800217 	ldw	r18,8(sp)
 4015478:	dc400117 	ldw	r17,4(sp)
 401547c:	dc000017 	ldw	r16,0(sp)
 4015480:	dec00604 	addi	sp,sp,24
 4015484:	f800283a 	ret
 4015488:	000b883a 	mov	r5,zero
 401548c:	40148ec0 	call	40148ec <_Balloc>
 4015490:	00c00044 	movi	r3,1
 4015494:	10c00415 	stw	r3,16(r2)
 4015498:	10000515 	stw	zero,20(r2)
 401549c:	003ff206 	br	4015468 <__alt_data_end+0xfc015468>
 40154a0:	8023883a 	mov	r17,r16
 40154a4:	0029883a 	mov	r20,zero
 40154a8:	4021883a 	mov	r16,r8
 40154ac:	003fad06 	br	4015364 <__alt_data_end+0xfc015364>
 40154b0:	9005883a 	mov	r2,r18
 40154b4:	94400504 	addi	r17,r18,20
 40154b8:	9c000504 	addi	r16,r19,20
 40154bc:	9825883a 	mov	r18,r19
 40154c0:	05000044 	movi	r20,1
 40154c4:	1027883a 	mov	r19,r2
 40154c8:	003fa606 	br	4015364 <__alt_data_end+0xfc015364>

040154cc <__ulp>:
 40154cc:	295ffc2c 	andhi	r5,r5,32752
 40154d0:	00bf3034 	movhi	r2,64704
 40154d4:	2887883a 	add	r3,r5,r2
 40154d8:	00c0020e 	bge	zero,r3,40154e4 <__ulp+0x18>
 40154dc:	0005883a 	mov	r2,zero
 40154e0:	f800283a 	ret
 40154e4:	00c7c83a 	sub	r3,zero,r3
 40154e8:	1807d53a 	srai	r3,r3,20
 40154ec:	008004c4 	movi	r2,19
 40154f0:	10c00b0e 	bge	r2,r3,4015520 <__ulp+0x54>
 40154f4:	18bffb04 	addi	r2,r3,-20
 40154f8:	01000784 	movi	r4,30
 40154fc:	0007883a 	mov	r3,zero
 4015500:	20800516 	blt	r4,r2,4015518 <__ulp+0x4c>
 4015504:	010007c4 	movi	r4,31
 4015508:	2089c83a 	sub	r4,r4,r2
 401550c:	00800044 	movi	r2,1
 4015510:	1104983a 	sll	r2,r2,r4
 4015514:	f800283a 	ret
 4015518:	00800044 	movi	r2,1
 401551c:	f800283a 	ret
 4015520:	01400234 	movhi	r5,8
 4015524:	28c7d83a 	sra	r3,r5,r3
 4015528:	0005883a 	mov	r2,zero
 401552c:	f800283a 	ret

04015530 <__b2d>:
 4015530:	defffa04 	addi	sp,sp,-24
 4015534:	dc000015 	stw	r16,0(sp)
 4015538:	24000417 	ldw	r16,16(r4)
 401553c:	dc400115 	stw	r17,4(sp)
 4015540:	24400504 	addi	r17,r4,20
 4015544:	8421883a 	add	r16,r16,r16
 4015548:	8421883a 	add	r16,r16,r16
 401554c:	8c21883a 	add	r16,r17,r16
 4015550:	dc800215 	stw	r18,8(sp)
 4015554:	84bfff17 	ldw	r18,-4(r16)
 4015558:	dd000415 	stw	r20,16(sp)
 401555c:	dcc00315 	stw	r19,12(sp)
 4015560:	9009883a 	mov	r4,r18
 4015564:	2829883a 	mov	r20,r5
 4015568:	dfc00515 	stw	ra,20(sp)
 401556c:	4014c080 	call	4014c08 <__hi0bits>
 4015570:	00c00804 	movi	r3,32
 4015574:	1889c83a 	sub	r4,r3,r2
 4015578:	a1000015 	stw	r4,0(r20)
 401557c:	01000284 	movi	r4,10
 4015580:	84ffff04 	addi	r19,r16,-4
 4015584:	20801216 	blt	r4,r2,40155d0 <__b2d+0xa0>
 4015588:	018002c4 	movi	r6,11
 401558c:	308dc83a 	sub	r6,r6,r2
 4015590:	9186d83a 	srl	r3,r18,r6
 4015594:	18cffc34 	orhi	r3,r3,16368
 4015598:	8cc0212e 	bgeu	r17,r19,4015620 <__b2d+0xf0>
 401559c:	813ffe17 	ldw	r4,-8(r16)
 40155a0:	218cd83a 	srl	r6,r4,r6
 40155a4:	10800544 	addi	r2,r2,21
 40155a8:	9084983a 	sll	r2,r18,r2
 40155ac:	1184b03a 	or	r2,r2,r6
 40155b0:	dfc00517 	ldw	ra,20(sp)
 40155b4:	dd000417 	ldw	r20,16(sp)
 40155b8:	dcc00317 	ldw	r19,12(sp)
 40155bc:	dc800217 	ldw	r18,8(sp)
 40155c0:	dc400117 	ldw	r17,4(sp)
 40155c4:	dc000017 	ldw	r16,0(sp)
 40155c8:	dec00604 	addi	sp,sp,24
 40155cc:	f800283a 	ret
 40155d0:	8cc00f2e 	bgeu	r17,r19,4015610 <__b2d+0xe0>
 40155d4:	117ffd44 	addi	r5,r2,-11
 40155d8:	80bffe17 	ldw	r2,-8(r16)
 40155dc:	28000e26 	beq	r5,zero,4015618 <__b2d+0xe8>
 40155e0:	1949c83a 	sub	r4,r3,r5
 40155e4:	9164983a 	sll	r18,r18,r5
 40155e8:	1106d83a 	srl	r3,r2,r4
 40155ec:	81bffe04 	addi	r6,r16,-8
 40155f0:	948ffc34 	orhi	r18,r18,16368
 40155f4:	90c6b03a 	or	r3,r18,r3
 40155f8:	89800e2e 	bgeu	r17,r6,4015634 <__b2d+0x104>
 40155fc:	81bffd17 	ldw	r6,-12(r16)
 4015600:	1144983a 	sll	r2,r2,r5
 4015604:	310ad83a 	srl	r5,r6,r4
 4015608:	2884b03a 	or	r2,r5,r2
 401560c:	003fe806 	br	40155b0 <__alt_data_end+0xfc0155b0>
 4015610:	10bffd44 	addi	r2,r2,-11
 4015614:	1000041e 	bne	r2,zero,4015628 <__b2d+0xf8>
 4015618:	90cffc34 	orhi	r3,r18,16368
 401561c:	003fe406 	br	40155b0 <__alt_data_end+0xfc0155b0>
 4015620:	000d883a 	mov	r6,zero
 4015624:	003fdf06 	br	40155a4 <__alt_data_end+0xfc0155a4>
 4015628:	90a4983a 	sll	r18,r18,r2
 401562c:	0005883a 	mov	r2,zero
 4015630:	003ff906 	br	4015618 <__alt_data_end+0xfc015618>
 4015634:	1144983a 	sll	r2,r2,r5
 4015638:	003fdd06 	br	40155b0 <__alt_data_end+0xfc0155b0>

0401563c <__d2b>:
 401563c:	defff804 	addi	sp,sp,-32
 4015640:	dc000215 	stw	r16,8(sp)
 4015644:	3021883a 	mov	r16,r6
 4015648:	dc400315 	stw	r17,12(sp)
 401564c:	8022907a 	slli	r17,r16,1
 4015650:	dd000615 	stw	r20,24(sp)
 4015654:	2829883a 	mov	r20,r5
 4015658:	01400044 	movi	r5,1
 401565c:	dcc00515 	stw	r19,20(sp)
 4015660:	dc800415 	stw	r18,16(sp)
 4015664:	dfc00715 	stw	ra,28(sp)
 4015668:	3825883a 	mov	r18,r7
 401566c:	8822d57a 	srli	r17,r17,21
 4015670:	40148ec0 	call	40148ec <_Balloc>
 4015674:	1027883a 	mov	r19,r2
 4015678:	00800434 	movhi	r2,16
 401567c:	10bfffc4 	addi	r2,r2,-1
 4015680:	808c703a 	and	r6,r16,r2
 4015684:	88000126 	beq	r17,zero,401568c <__d2b+0x50>
 4015688:	31800434 	orhi	r6,r6,16
 401568c:	d9800015 	stw	r6,0(sp)
 4015690:	a0002426 	beq	r20,zero,4015724 <__d2b+0xe8>
 4015694:	d9000104 	addi	r4,sp,4
 4015698:	dd000115 	stw	r20,4(sp)
 401569c:	4014c700 	call	4014c70 <__lo0bits>
 40156a0:	d8c00017 	ldw	r3,0(sp)
 40156a4:	10002f1e 	bne	r2,zero,4015764 <__d2b+0x128>
 40156a8:	d9000117 	ldw	r4,4(sp)
 40156ac:	99000515 	stw	r4,20(r19)
 40156b0:	1821003a 	cmpeq	r16,r3,zero
 40156b4:	01000084 	movi	r4,2
 40156b8:	2421c83a 	sub	r16,r4,r16
 40156bc:	98c00615 	stw	r3,24(r19)
 40156c0:	9c000415 	stw	r16,16(r19)
 40156c4:	88001f1e 	bne	r17,zero,4015744 <__d2b+0x108>
 40156c8:	10bef384 	addi	r2,r2,-1074
 40156cc:	90800015 	stw	r2,0(r18)
 40156d0:	00900034 	movhi	r2,16384
 40156d4:	10bfffc4 	addi	r2,r2,-1
 40156d8:	8085883a 	add	r2,r16,r2
 40156dc:	1085883a 	add	r2,r2,r2
 40156e0:	1085883a 	add	r2,r2,r2
 40156e4:	9885883a 	add	r2,r19,r2
 40156e8:	11000517 	ldw	r4,20(r2)
 40156ec:	8020917a 	slli	r16,r16,5
 40156f0:	4014c080 	call	4014c08 <__hi0bits>
 40156f4:	d8c00817 	ldw	r3,32(sp)
 40156f8:	8085c83a 	sub	r2,r16,r2
 40156fc:	18800015 	stw	r2,0(r3)
 4015700:	9805883a 	mov	r2,r19
 4015704:	dfc00717 	ldw	ra,28(sp)
 4015708:	dd000617 	ldw	r20,24(sp)
 401570c:	dcc00517 	ldw	r19,20(sp)
 4015710:	dc800417 	ldw	r18,16(sp)
 4015714:	dc400317 	ldw	r17,12(sp)
 4015718:	dc000217 	ldw	r16,8(sp)
 401571c:	dec00804 	addi	sp,sp,32
 4015720:	f800283a 	ret
 4015724:	d809883a 	mov	r4,sp
 4015728:	4014c700 	call	4014c70 <__lo0bits>
 401572c:	d8c00017 	ldw	r3,0(sp)
 4015730:	04000044 	movi	r16,1
 4015734:	9c000415 	stw	r16,16(r19)
 4015738:	98c00515 	stw	r3,20(r19)
 401573c:	10800804 	addi	r2,r2,32
 4015740:	883fe126 	beq	r17,zero,40156c8 <__alt_data_end+0xfc0156c8>
 4015744:	00c00d44 	movi	r3,53
 4015748:	8c7ef344 	addi	r17,r17,-1075
 401574c:	88a3883a 	add	r17,r17,r2
 4015750:	1885c83a 	sub	r2,r3,r2
 4015754:	d8c00817 	ldw	r3,32(sp)
 4015758:	94400015 	stw	r17,0(r18)
 401575c:	18800015 	stw	r2,0(r3)
 4015760:	003fe706 	br	4015700 <__alt_data_end+0xfc015700>
 4015764:	01000804 	movi	r4,32
 4015768:	2089c83a 	sub	r4,r4,r2
 401576c:	1908983a 	sll	r4,r3,r4
 4015770:	d9400117 	ldw	r5,4(sp)
 4015774:	1886d83a 	srl	r3,r3,r2
 4015778:	2148b03a 	or	r4,r4,r5
 401577c:	99000515 	stw	r4,20(r19)
 4015780:	d8c00015 	stw	r3,0(sp)
 4015784:	003fca06 	br	40156b0 <__alt_data_end+0xfc0156b0>

04015788 <__ratio>:
 4015788:	defff904 	addi	sp,sp,-28
 401578c:	dc400315 	stw	r17,12(sp)
 4015790:	2823883a 	mov	r17,r5
 4015794:	d9400104 	addi	r5,sp,4
 4015798:	dfc00615 	stw	ra,24(sp)
 401579c:	dcc00515 	stw	r19,20(sp)
 40157a0:	dc800415 	stw	r18,16(sp)
 40157a4:	2027883a 	mov	r19,r4
 40157a8:	dc000215 	stw	r16,8(sp)
 40157ac:	40155300 	call	4015530 <__b2d>
 40157b0:	d80b883a 	mov	r5,sp
 40157b4:	8809883a 	mov	r4,r17
 40157b8:	1025883a 	mov	r18,r2
 40157bc:	1821883a 	mov	r16,r3
 40157c0:	40155300 	call	4015530 <__b2d>
 40157c4:	8a000417 	ldw	r8,16(r17)
 40157c8:	99000417 	ldw	r4,16(r19)
 40157cc:	d9400117 	ldw	r5,4(sp)
 40157d0:	2209c83a 	sub	r4,r4,r8
 40157d4:	2010917a 	slli	r8,r4,5
 40157d8:	d9000017 	ldw	r4,0(sp)
 40157dc:	2909c83a 	sub	r4,r5,r4
 40157e0:	4109883a 	add	r4,r8,r4
 40157e4:	01000e0e 	bge	zero,r4,4015820 <__ratio+0x98>
 40157e8:	2008953a 	slli	r4,r4,20
 40157ec:	2421883a 	add	r16,r4,r16
 40157f0:	100d883a 	mov	r6,r2
 40157f4:	180f883a 	mov	r7,r3
 40157f8:	9009883a 	mov	r4,r18
 40157fc:	800b883a 	mov	r5,r16
 4015800:	40196d00 	call	40196d0 <__divdf3>
 4015804:	dfc00617 	ldw	ra,24(sp)
 4015808:	dcc00517 	ldw	r19,20(sp)
 401580c:	dc800417 	ldw	r18,16(sp)
 4015810:	dc400317 	ldw	r17,12(sp)
 4015814:	dc000217 	ldw	r16,8(sp)
 4015818:	dec00704 	addi	sp,sp,28
 401581c:	f800283a 	ret
 4015820:	2008953a 	slli	r4,r4,20
 4015824:	1907c83a 	sub	r3,r3,r4
 4015828:	003ff106 	br	40157f0 <__alt_data_end+0xfc0157f0>

0401582c <_mprec_log10>:
 401582c:	defffe04 	addi	sp,sp,-8
 4015830:	dc000015 	stw	r16,0(sp)
 4015834:	dfc00115 	stw	ra,4(sp)
 4015838:	008005c4 	movi	r2,23
 401583c:	2021883a 	mov	r16,r4
 4015840:	11000d0e 	bge	r2,r4,4015878 <_mprec_log10+0x4c>
 4015844:	0005883a 	mov	r2,zero
 4015848:	00cffc34 	movhi	r3,16368
 401584c:	843fffc4 	addi	r16,r16,-1
 4015850:	000d883a 	mov	r6,zero
 4015854:	01d00934 	movhi	r7,16420
 4015858:	1009883a 	mov	r4,r2
 401585c:	180b883a 	mov	r5,r3
 4015860:	401a2f80 	call	401a2f8 <__muldf3>
 4015864:	803ff91e 	bne	r16,zero,401584c <__alt_data_end+0xfc01584c>
 4015868:	dfc00117 	ldw	ra,4(sp)
 401586c:	dc000017 	ldw	r16,0(sp)
 4015870:	dec00204 	addi	sp,sp,8
 4015874:	f800283a 	ret
 4015878:	202090fa 	slli	r16,r4,3
 401587c:	008100b4 	movhi	r2,1026
 4015880:	109cd004 	addi	r2,r2,29504
 4015884:	1421883a 	add	r16,r2,r16
 4015888:	80800017 	ldw	r2,0(r16)
 401588c:	80c00117 	ldw	r3,4(r16)
 4015890:	dfc00117 	ldw	ra,4(sp)
 4015894:	dc000017 	ldw	r16,0(sp)
 4015898:	dec00204 	addi	sp,sp,8
 401589c:	f800283a 	ret

040158a0 <__copybits>:
 40158a0:	297fffc4 	addi	r5,r5,-1
 40158a4:	280fd17a 	srai	r7,r5,5
 40158a8:	30c00417 	ldw	r3,16(r6)
 40158ac:	30800504 	addi	r2,r6,20
 40158b0:	39c00044 	addi	r7,r7,1
 40158b4:	18c7883a 	add	r3,r3,r3
 40158b8:	39cf883a 	add	r7,r7,r7
 40158bc:	18c7883a 	add	r3,r3,r3
 40158c0:	39cf883a 	add	r7,r7,r7
 40158c4:	10c7883a 	add	r3,r2,r3
 40158c8:	21cf883a 	add	r7,r4,r7
 40158cc:	10c00d2e 	bgeu	r2,r3,4015904 <__copybits+0x64>
 40158d0:	200b883a 	mov	r5,r4
 40158d4:	12000017 	ldw	r8,0(r2)
 40158d8:	29400104 	addi	r5,r5,4
 40158dc:	10800104 	addi	r2,r2,4
 40158e0:	2a3fff15 	stw	r8,-4(r5)
 40158e4:	10fffb36 	bltu	r2,r3,40158d4 <__alt_data_end+0xfc0158d4>
 40158e8:	1985c83a 	sub	r2,r3,r6
 40158ec:	10bffac4 	addi	r2,r2,-21
 40158f0:	1004d0ba 	srli	r2,r2,2
 40158f4:	10800044 	addi	r2,r2,1
 40158f8:	1085883a 	add	r2,r2,r2
 40158fc:	1085883a 	add	r2,r2,r2
 4015900:	2089883a 	add	r4,r4,r2
 4015904:	21c0032e 	bgeu	r4,r7,4015914 <__copybits+0x74>
 4015908:	20000015 	stw	zero,0(r4)
 401590c:	21000104 	addi	r4,r4,4
 4015910:	21fffd36 	bltu	r4,r7,4015908 <__alt_data_end+0xfc015908>
 4015914:	f800283a 	ret

04015918 <__any_on>:
 4015918:	20c00417 	ldw	r3,16(r4)
 401591c:	2805d17a 	srai	r2,r5,5
 4015920:	21000504 	addi	r4,r4,20
 4015924:	18800d0e 	bge	r3,r2,401595c <__any_on+0x44>
 4015928:	18c7883a 	add	r3,r3,r3
 401592c:	18c7883a 	add	r3,r3,r3
 4015930:	20c7883a 	add	r3,r4,r3
 4015934:	20c0192e 	bgeu	r4,r3,401599c <__any_on+0x84>
 4015938:	18bfff17 	ldw	r2,-4(r3)
 401593c:	18ffff04 	addi	r3,r3,-4
 4015940:	1000041e 	bne	r2,zero,4015954 <__any_on+0x3c>
 4015944:	20c0142e 	bgeu	r4,r3,4015998 <__any_on+0x80>
 4015948:	18ffff04 	addi	r3,r3,-4
 401594c:	19400017 	ldw	r5,0(r3)
 4015950:	283ffc26 	beq	r5,zero,4015944 <__alt_data_end+0xfc015944>
 4015954:	00800044 	movi	r2,1
 4015958:	f800283a 	ret
 401595c:	10c00a0e 	bge	r2,r3,4015988 <__any_on+0x70>
 4015960:	1085883a 	add	r2,r2,r2
 4015964:	1085883a 	add	r2,r2,r2
 4015968:	294007cc 	andi	r5,r5,31
 401596c:	2087883a 	add	r3,r4,r2
 4015970:	283ff026 	beq	r5,zero,4015934 <__alt_data_end+0xfc015934>
 4015974:	19800017 	ldw	r6,0(r3)
 4015978:	3144d83a 	srl	r2,r6,r5
 401597c:	114a983a 	sll	r5,r2,r5
 4015980:	317ff41e 	bne	r6,r5,4015954 <__alt_data_end+0xfc015954>
 4015984:	003feb06 	br	4015934 <__alt_data_end+0xfc015934>
 4015988:	1085883a 	add	r2,r2,r2
 401598c:	1085883a 	add	r2,r2,r2
 4015990:	2087883a 	add	r3,r4,r2
 4015994:	003fe706 	br	4015934 <__alt_data_end+0xfc015934>
 4015998:	f800283a 	ret
 401599c:	0005883a 	mov	r2,zero
 40159a0:	f800283a 	ret

040159a4 <_putc_r>:
 40159a4:	defffc04 	addi	sp,sp,-16
 40159a8:	dc000215 	stw	r16,8(sp)
 40159ac:	dfc00315 	stw	ra,12(sp)
 40159b0:	2021883a 	mov	r16,r4
 40159b4:	20000226 	beq	r4,zero,40159c0 <_putc_r+0x1c>
 40159b8:	20800e17 	ldw	r2,56(r4)
 40159bc:	10001b26 	beq	r2,zero,4015a2c <_putc_r+0x88>
 40159c0:	30800217 	ldw	r2,8(r6)
 40159c4:	10bfffc4 	addi	r2,r2,-1
 40159c8:	30800215 	stw	r2,8(r6)
 40159cc:	10000a16 	blt	r2,zero,40159f8 <_putc_r+0x54>
 40159d0:	30800017 	ldw	r2,0(r6)
 40159d4:	11400005 	stb	r5,0(r2)
 40159d8:	30800017 	ldw	r2,0(r6)
 40159dc:	10c00044 	addi	r3,r2,1
 40159e0:	30c00015 	stw	r3,0(r6)
 40159e4:	10800003 	ldbu	r2,0(r2)
 40159e8:	dfc00317 	ldw	ra,12(sp)
 40159ec:	dc000217 	ldw	r16,8(sp)
 40159f0:	dec00404 	addi	sp,sp,16
 40159f4:	f800283a 	ret
 40159f8:	30c00617 	ldw	r3,24(r6)
 40159fc:	10c00616 	blt	r2,r3,4015a18 <_putc_r+0x74>
 4015a00:	30800017 	ldw	r2,0(r6)
 4015a04:	00c00284 	movi	r3,10
 4015a08:	11400005 	stb	r5,0(r2)
 4015a0c:	30800017 	ldw	r2,0(r6)
 4015a10:	11400003 	ldbu	r5,0(r2)
 4015a14:	28fff11e 	bne	r5,r3,40159dc <__alt_data_end+0xfc0159dc>
 4015a18:	8009883a 	mov	r4,r16
 4015a1c:	dfc00317 	ldw	ra,12(sp)
 4015a20:	dc000217 	ldw	r16,8(sp)
 4015a24:	dec00404 	addi	sp,sp,16
 4015a28:	40179181 	jmpi	4017918 <__swbuf_r>
 4015a2c:	d9400015 	stw	r5,0(sp)
 4015a30:	d9800115 	stw	r6,4(sp)
 4015a34:	40139400 	call	4013940 <__sinit>
 4015a38:	d9800117 	ldw	r6,4(sp)
 4015a3c:	d9400017 	ldw	r5,0(sp)
 4015a40:	003fdf06 	br	40159c0 <__alt_data_end+0xfc0159c0>

04015a44 <putc>:
 4015a44:	008100f4 	movhi	r2,1027
 4015a48:	defffc04 	addi	sp,sp,-16
 4015a4c:	10a98804 	addi	r2,r2,-23008
 4015a50:	dc000115 	stw	r16,4(sp)
 4015a54:	14000017 	ldw	r16,0(r2)
 4015a58:	dc400215 	stw	r17,8(sp)
 4015a5c:	dfc00315 	stw	ra,12(sp)
 4015a60:	2023883a 	mov	r17,r4
 4015a64:	80000226 	beq	r16,zero,4015a70 <putc+0x2c>
 4015a68:	80800e17 	ldw	r2,56(r16)
 4015a6c:	10001a26 	beq	r2,zero,4015ad8 <putc+0x94>
 4015a70:	28800217 	ldw	r2,8(r5)
 4015a74:	10bfffc4 	addi	r2,r2,-1
 4015a78:	28800215 	stw	r2,8(r5)
 4015a7c:	10000b16 	blt	r2,zero,4015aac <putc+0x68>
 4015a80:	28800017 	ldw	r2,0(r5)
 4015a84:	14400005 	stb	r17,0(r2)
 4015a88:	28800017 	ldw	r2,0(r5)
 4015a8c:	10c00044 	addi	r3,r2,1
 4015a90:	28c00015 	stw	r3,0(r5)
 4015a94:	10800003 	ldbu	r2,0(r2)
 4015a98:	dfc00317 	ldw	ra,12(sp)
 4015a9c:	dc400217 	ldw	r17,8(sp)
 4015aa0:	dc000117 	ldw	r16,4(sp)
 4015aa4:	dec00404 	addi	sp,sp,16
 4015aa8:	f800283a 	ret
 4015aac:	28c00617 	ldw	r3,24(r5)
 4015ab0:	10c00e16 	blt	r2,r3,4015aec <putc+0xa8>
 4015ab4:	28800017 	ldw	r2,0(r5)
 4015ab8:	01000284 	movi	r4,10
 4015abc:	14400005 	stb	r17,0(r2)
 4015ac0:	28800017 	ldw	r2,0(r5)
 4015ac4:	10c00003 	ldbu	r3,0(r2)
 4015ac8:	193ff01e 	bne	r3,r4,4015a8c <__alt_data_end+0xfc015a8c>
 4015acc:	280d883a 	mov	r6,r5
 4015ad0:	180b883a 	mov	r5,r3
 4015ad4:	00000706 	br	4015af4 <putc+0xb0>
 4015ad8:	8009883a 	mov	r4,r16
 4015adc:	d9400015 	stw	r5,0(sp)
 4015ae0:	40139400 	call	4013940 <__sinit>
 4015ae4:	d9400017 	ldw	r5,0(sp)
 4015ae8:	003fe106 	br	4015a70 <__alt_data_end+0xfc015a70>
 4015aec:	280d883a 	mov	r6,r5
 4015af0:	880b883a 	mov	r5,r17
 4015af4:	8009883a 	mov	r4,r16
 4015af8:	dfc00317 	ldw	ra,12(sp)
 4015afc:	dc400217 	ldw	r17,8(sp)
 4015b00:	dc000117 	ldw	r16,4(sp)
 4015b04:	dec00404 	addi	sp,sp,16
 4015b08:	40179181 	jmpi	4017918 <__swbuf_r>

04015b0c <_realloc_r>:
 4015b0c:	defff604 	addi	sp,sp,-40
 4015b10:	dc800215 	stw	r18,8(sp)
 4015b14:	dfc00915 	stw	ra,36(sp)
 4015b18:	df000815 	stw	fp,32(sp)
 4015b1c:	ddc00715 	stw	r23,28(sp)
 4015b20:	dd800615 	stw	r22,24(sp)
 4015b24:	dd400515 	stw	r21,20(sp)
 4015b28:	dd000415 	stw	r20,16(sp)
 4015b2c:	dcc00315 	stw	r19,12(sp)
 4015b30:	dc400115 	stw	r17,4(sp)
 4015b34:	dc000015 	stw	r16,0(sp)
 4015b38:	3025883a 	mov	r18,r6
 4015b3c:	2800b726 	beq	r5,zero,4015e1c <_realloc_r+0x310>
 4015b40:	282b883a 	mov	r21,r5
 4015b44:	2029883a 	mov	r20,r4
 4015b48:	401bdc00 	call	401bdc0 <__malloc_lock>
 4015b4c:	a8bfff17 	ldw	r2,-4(r21)
 4015b50:	043fff04 	movi	r16,-4
 4015b54:	90c002c4 	addi	r3,r18,11
 4015b58:	01000584 	movi	r4,22
 4015b5c:	acfffe04 	addi	r19,r21,-8
 4015b60:	1420703a 	and	r16,r2,r16
 4015b64:	20c0332e 	bgeu	r4,r3,4015c34 <_realloc_r+0x128>
 4015b68:	047ffe04 	movi	r17,-8
 4015b6c:	1c62703a 	and	r17,r3,r17
 4015b70:	8807883a 	mov	r3,r17
 4015b74:	88005816 	blt	r17,zero,4015cd8 <_realloc_r+0x1cc>
 4015b78:	8c805736 	bltu	r17,r18,4015cd8 <_realloc_r+0x1cc>
 4015b7c:	80c0300e 	bge	r16,r3,4015c40 <_realloc_r+0x134>
 4015b80:	070100b4 	movhi	fp,1026
 4015b84:	e71e2b04 	addi	fp,fp,30892
 4015b88:	e1c00217 	ldw	r7,8(fp)
 4015b8c:	9c09883a 	add	r4,r19,r16
 4015b90:	22000117 	ldw	r8,4(r4)
 4015b94:	21c06326 	beq	r4,r7,4015d24 <_realloc_r+0x218>
 4015b98:	017fff84 	movi	r5,-2
 4015b9c:	414a703a 	and	r5,r8,r5
 4015ba0:	214b883a 	add	r5,r4,r5
 4015ba4:	29800117 	ldw	r6,4(r5)
 4015ba8:	3180004c 	andi	r6,r6,1
 4015bac:	30003f26 	beq	r6,zero,4015cac <_realloc_r+0x1a0>
 4015bb0:	1080004c 	andi	r2,r2,1
 4015bb4:	10008326 	beq	r2,zero,4015dc4 <_realloc_r+0x2b8>
 4015bb8:	900b883a 	mov	r5,r18
 4015bbc:	a009883a 	mov	r4,r20
 4015bc0:	400e4d00 	call	400e4d0 <_malloc_r>
 4015bc4:	1025883a 	mov	r18,r2
 4015bc8:	10011e26 	beq	r2,zero,4016044 <_realloc_r+0x538>
 4015bcc:	a93fff17 	ldw	r4,-4(r21)
 4015bd0:	10fffe04 	addi	r3,r2,-8
 4015bd4:	00bfff84 	movi	r2,-2
 4015bd8:	2084703a 	and	r2,r4,r2
 4015bdc:	9885883a 	add	r2,r19,r2
 4015be0:	1880ee26 	beq	r3,r2,4015f9c <_realloc_r+0x490>
 4015be4:	81bfff04 	addi	r6,r16,-4
 4015be8:	00800904 	movi	r2,36
 4015bec:	1180b836 	bltu	r2,r6,4015ed0 <_realloc_r+0x3c4>
 4015bf0:	00c004c4 	movi	r3,19
 4015bf4:	19809636 	bltu	r3,r6,4015e50 <_realloc_r+0x344>
 4015bf8:	9005883a 	mov	r2,r18
 4015bfc:	a807883a 	mov	r3,r21
 4015c00:	19000017 	ldw	r4,0(r3)
 4015c04:	11000015 	stw	r4,0(r2)
 4015c08:	19000117 	ldw	r4,4(r3)
 4015c0c:	11000115 	stw	r4,4(r2)
 4015c10:	18c00217 	ldw	r3,8(r3)
 4015c14:	10c00215 	stw	r3,8(r2)
 4015c18:	a80b883a 	mov	r5,r21
 4015c1c:	a009883a 	mov	r4,r20
 4015c20:	4013ab40 	call	4013ab4 <_free_r>
 4015c24:	a009883a 	mov	r4,r20
 4015c28:	401bde40 	call	401bde4 <__malloc_unlock>
 4015c2c:	9005883a 	mov	r2,r18
 4015c30:	00001206 	br	4015c7c <_realloc_r+0x170>
 4015c34:	00c00404 	movi	r3,16
 4015c38:	1823883a 	mov	r17,r3
 4015c3c:	003fce06 	br	4015b78 <__alt_data_end+0xfc015b78>
 4015c40:	a825883a 	mov	r18,r21
 4015c44:	8445c83a 	sub	r2,r16,r17
 4015c48:	00c003c4 	movi	r3,15
 4015c4c:	18802636 	bltu	r3,r2,4015ce8 <_realloc_r+0x1dc>
 4015c50:	99800117 	ldw	r6,4(r19)
 4015c54:	9c07883a 	add	r3,r19,r16
 4015c58:	3180004c 	andi	r6,r6,1
 4015c5c:	3420b03a 	or	r16,r6,r16
 4015c60:	9c000115 	stw	r16,4(r19)
 4015c64:	18800117 	ldw	r2,4(r3)
 4015c68:	10800054 	ori	r2,r2,1
 4015c6c:	18800115 	stw	r2,4(r3)
 4015c70:	a009883a 	mov	r4,r20
 4015c74:	401bde40 	call	401bde4 <__malloc_unlock>
 4015c78:	9005883a 	mov	r2,r18
 4015c7c:	dfc00917 	ldw	ra,36(sp)
 4015c80:	df000817 	ldw	fp,32(sp)
 4015c84:	ddc00717 	ldw	r23,28(sp)
 4015c88:	dd800617 	ldw	r22,24(sp)
 4015c8c:	dd400517 	ldw	r21,20(sp)
 4015c90:	dd000417 	ldw	r20,16(sp)
 4015c94:	dcc00317 	ldw	r19,12(sp)
 4015c98:	dc800217 	ldw	r18,8(sp)
 4015c9c:	dc400117 	ldw	r17,4(sp)
 4015ca0:	dc000017 	ldw	r16,0(sp)
 4015ca4:	dec00a04 	addi	sp,sp,40
 4015ca8:	f800283a 	ret
 4015cac:	017fff04 	movi	r5,-4
 4015cb0:	414a703a 	and	r5,r8,r5
 4015cb4:	814d883a 	add	r6,r16,r5
 4015cb8:	30c01f16 	blt	r6,r3,4015d38 <_realloc_r+0x22c>
 4015cbc:	20800317 	ldw	r2,12(r4)
 4015cc0:	20c00217 	ldw	r3,8(r4)
 4015cc4:	a825883a 	mov	r18,r21
 4015cc8:	3021883a 	mov	r16,r6
 4015ccc:	18800315 	stw	r2,12(r3)
 4015cd0:	10c00215 	stw	r3,8(r2)
 4015cd4:	003fdb06 	br	4015c44 <__alt_data_end+0xfc015c44>
 4015cd8:	00800304 	movi	r2,12
 4015cdc:	a0800015 	stw	r2,0(r20)
 4015ce0:	0005883a 	mov	r2,zero
 4015ce4:	003fe506 	br	4015c7c <__alt_data_end+0xfc015c7c>
 4015ce8:	98c00117 	ldw	r3,4(r19)
 4015cec:	9c4b883a 	add	r5,r19,r17
 4015cf0:	11000054 	ori	r4,r2,1
 4015cf4:	18c0004c 	andi	r3,r3,1
 4015cf8:	1c62b03a 	or	r17,r3,r17
 4015cfc:	9c400115 	stw	r17,4(r19)
 4015d00:	29000115 	stw	r4,4(r5)
 4015d04:	2885883a 	add	r2,r5,r2
 4015d08:	10c00117 	ldw	r3,4(r2)
 4015d0c:	29400204 	addi	r5,r5,8
 4015d10:	a009883a 	mov	r4,r20
 4015d14:	18c00054 	ori	r3,r3,1
 4015d18:	10c00115 	stw	r3,4(r2)
 4015d1c:	4013ab40 	call	4013ab4 <_free_r>
 4015d20:	003fd306 	br	4015c70 <__alt_data_end+0xfc015c70>
 4015d24:	017fff04 	movi	r5,-4
 4015d28:	414a703a 	and	r5,r8,r5
 4015d2c:	89800404 	addi	r6,r17,16
 4015d30:	8151883a 	add	r8,r16,r5
 4015d34:	4180590e 	bge	r8,r6,4015e9c <_realloc_r+0x390>
 4015d38:	1080004c 	andi	r2,r2,1
 4015d3c:	103f9e1e 	bne	r2,zero,4015bb8 <__alt_data_end+0xfc015bb8>
 4015d40:	adbffe17 	ldw	r22,-8(r21)
 4015d44:	00bfff04 	movi	r2,-4
 4015d48:	9dadc83a 	sub	r22,r19,r22
 4015d4c:	b1800117 	ldw	r6,4(r22)
 4015d50:	3084703a 	and	r2,r6,r2
 4015d54:	20002026 	beq	r4,zero,4015dd8 <_realloc_r+0x2cc>
 4015d58:	80af883a 	add	r23,r16,r2
 4015d5c:	b96f883a 	add	r23,r23,r5
 4015d60:	21c05f26 	beq	r4,r7,4015ee0 <_realloc_r+0x3d4>
 4015d64:	b8c01c16 	blt	r23,r3,4015dd8 <_realloc_r+0x2cc>
 4015d68:	20800317 	ldw	r2,12(r4)
 4015d6c:	20c00217 	ldw	r3,8(r4)
 4015d70:	81bfff04 	addi	r6,r16,-4
 4015d74:	01000904 	movi	r4,36
 4015d78:	18800315 	stw	r2,12(r3)
 4015d7c:	10c00215 	stw	r3,8(r2)
 4015d80:	b0c00217 	ldw	r3,8(r22)
 4015d84:	b0800317 	ldw	r2,12(r22)
 4015d88:	b4800204 	addi	r18,r22,8
 4015d8c:	18800315 	stw	r2,12(r3)
 4015d90:	10c00215 	stw	r3,8(r2)
 4015d94:	21801b36 	bltu	r4,r6,4015e04 <_realloc_r+0x2f8>
 4015d98:	008004c4 	movi	r2,19
 4015d9c:	1180352e 	bgeu	r2,r6,4015e74 <_realloc_r+0x368>
 4015da0:	a8800017 	ldw	r2,0(r21)
 4015da4:	b0800215 	stw	r2,8(r22)
 4015da8:	a8800117 	ldw	r2,4(r21)
 4015dac:	b0800315 	stw	r2,12(r22)
 4015db0:	008006c4 	movi	r2,27
 4015db4:	11807f36 	bltu	r2,r6,4015fb4 <_realloc_r+0x4a8>
 4015db8:	b0800404 	addi	r2,r22,16
 4015dbc:	ad400204 	addi	r21,r21,8
 4015dc0:	00002d06 	br	4015e78 <_realloc_r+0x36c>
 4015dc4:	adbffe17 	ldw	r22,-8(r21)
 4015dc8:	00bfff04 	movi	r2,-4
 4015dcc:	9dadc83a 	sub	r22,r19,r22
 4015dd0:	b1000117 	ldw	r4,4(r22)
 4015dd4:	2084703a 	and	r2,r4,r2
 4015dd8:	b03f7726 	beq	r22,zero,4015bb8 <__alt_data_end+0xfc015bb8>
 4015ddc:	80af883a 	add	r23,r16,r2
 4015de0:	b8ff7516 	blt	r23,r3,4015bb8 <__alt_data_end+0xfc015bb8>
 4015de4:	b0800317 	ldw	r2,12(r22)
 4015de8:	b0c00217 	ldw	r3,8(r22)
 4015dec:	81bfff04 	addi	r6,r16,-4
 4015df0:	01000904 	movi	r4,36
 4015df4:	18800315 	stw	r2,12(r3)
 4015df8:	10c00215 	stw	r3,8(r2)
 4015dfc:	b4800204 	addi	r18,r22,8
 4015e00:	21bfe52e 	bgeu	r4,r6,4015d98 <__alt_data_end+0xfc015d98>
 4015e04:	a80b883a 	mov	r5,r21
 4015e08:	9009883a 	mov	r4,r18
 4015e0c:	40147900 	call	4014790 <memmove>
 4015e10:	b821883a 	mov	r16,r23
 4015e14:	b027883a 	mov	r19,r22
 4015e18:	003f8a06 	br	4015c44 <__alt_data_end+0xfc015c44>
 4015e1c:	300b883a 	mov	r5,r6
 4015e20:	dfc00917 	ldw	ra,36(sp)
 4015e24:	df000817 	ldw	fp,32(sp)
 4015e28:	ddc00717 	ldw	r23,28(sp)
 4015e2c:	dd800617 	ldw	r22,24(sp)
 4015e30:	dd400517 	ldw	r21,20(sp)
 4015e34:	dd000417 	ldw	r20,16(sp)
 4015e38:	dcc00317 	ldw	r19,12(sp)
 4015e3c:	dc800217 	ldw	r18,8(sp)
 4015e40:	dc400117 	ldw	r17,4(sp)
 4015e44:	dc000017 	ldw	r16,0(sp)
 4015e48:	dec00a04 	addi	sp,sp,40
 4015e4c:	400e4d01 	jmpi	400e4d0 <_malloc_r>
 4015e50:	a8c00017 	ldw	r3,0(r21)
 4015e54:	90c00015 	stw	r3,0(r18)
 4015e58:	a8c00117 	ldw	r3,4(r21)
 4015e5c:	90c00115 	stw	r3,4(r18)
 4015e60:	00c006c4 	movi	r3,27
 4015e64:	19804536 	bltu	r3,r6,4015f7c <_realloc_r+0x470>
 4015e68:	90800204 	addi	r2,r18,8
 4015e6c:	a8c00204 	addi	r3,r21,8
 4015e70:	003f6306 	br	4015c00 <__alt_data_end+0xfc015c00>
 4015e74:	9005883a 	mov	r2,r18
 4015e78:	a8c00017 	ldw	r3,0(r21)
 4015e7c:	b821883a 	mov	r16,r23
 4015e80:	b027883a 	mov	r19,r22
 4015e84:	10c00015 	stw	r3,0(r2)
 4015e88:	a8c00117 	ldw	r3,4(r21)
 4015e8c:	10c00115 	stw	r3,4(r2)
 4015e90:	a8c00217 	ldw	r3,8(r21)
 4015e94:	10c00215 	stw	r3,8(r2)
 4015e98:	003f6a06 	br	4015c44 <__alt_data_end+0xfc015c44>
 4015e9c:	9c67883a 	add	r19,r19,r17
 4015ea0:	4445c83a 	sub	r2,r8,r17
 4015ea4:	e4c00215 	stw	r19,8(fp)
 4015ea8:	10800054 	ori	r2,r2,1
 4015eac:	98800115 	stw	r2,4(r19)
 4015eb0:	a8bfff17 	ldw	r2,-4(r21)
 4015eb4:	a009883a 	mov	r4,r20
 4015eb8:	1080004c 	andi	r2,r2,1
 4015ebc:	1462b03a 	or	r17,r2,r17
 4015ec0:	ac7fff15 	stw	r17,-4(r21)
 4015ec4:	401bde40 	call	401bde4 <__malloc_unlock>
 4015ec8:	a805883a 	mov	r2,r21
 4015ecc:	003f6b06 	br	4015c7c <__alt_data_end+0xfc015c7c>
 4015ed0:	a80b883a 	mov	r5,r21
 4015ed4:	9009883a 	mov	r4,r18
 4015ed8:	40147900 	call	4014790 <memmove>
 4015edc:	003f4e06 	br	4015c18 <__alt_data_end+0xfc015c18>
 4015ee0:	89000404 	addi	r4,r17,16
 4015ee4:	b93fbc16 	blt	r23,r4,4015dd8 <__alt_data_end+0xfc015dd8>
 4015ee8:	b0800317 	ldw	r2,12(r22)
 4015eec:	b0c00217 	ldw	r3,8(r22)
 4015ef0:	81bfff04 	addi	r6,r16,-4
 4015ef4:	01000904 	movi	r4,36
 4015ef8:	18800315 	stw	r2,12(r3)
 4015efc:	10c00215 	stw	r3,8(r2)
 4015f00:	b4800204 	addi	r18,r22,8
 4015f04:	21804336 	bltu	r4,r6,4016014 <_realloc_r+0x508>
 4015f08:	008004c4 	movi	r2,19
 4015f0c:	11803f2e 	bgeu	r2,r6,401600c <_realloc_r+0x500>
 4015f10:	a8800017 	ldw	r2,0(r21)
 4015f14:	b0800215 	stw	r2,8(r22)
 4015f18:	a8800117 	ldw	r2,4(r21)
 4015f1c:	b0800315 	stw	r2,12(r22)
 4015f20:	008006c4 	movi	r2,27
 4015f24:	11803f36 	bltu	r2,r6,4016024 <_realloc_r+0x518>
 4015f28:	b0800404 	addi	r2,r22,16
 4015f2c:	ad400204 	addi	r21,r21,8
 4015f30:	a8c00017 	ldw	r3,0(r21)
 4015f34:	10c00015 	stw	r3,0(r2)
 4015f38:	a8c00117 	ldw	r3,4(r21)
 4015f3c:	10c00115 	stw	r3,4(r2)
 4015f40:	a8c00217 	ldw	r3,8(r21)
 4015f44:	10c00215 	stw	r3,8(r2)
 4015f48:	b447883a 	add	r3,r22,r17
 4015f4c:	bc45c83a 	sub	r2,r23,r17
 4015f50:	e0c00215 	stw	r3,8(fp)
 4015f54:	10800054 	ori	r2,r2,1
 4015f58:	18800115 	stw	r2,4(r3)
 4015f5c:	b0800117 	ldw	r2,4(r22)
 4015f60:	a009883a 	mov	r4,r20
 4015f64:	1080004c 	andi	r2,r2,1
 4015f68:	1462b03a 	or	r17,r2,r17
 4015f6c:	b4400115 	stw	r17,4(r22)
 4015f70:	401bde40 	call	401bde4 <__malloc_unlock>
 4015f74:	9005883a 	mov	r2,r18
 4015f78:	003f4006 	br	4015c7c <__alt_data_end+0xfc015c7c>
 4015f7c:	a8c00217 	ldw	r3,8(r21)
 4015f80:	90c00215 	stw	r3,8(r18)
 4015f84:	a8c00317 	ldw	r3,12(r21)
 4015f88:	90c00315 	stw	r3,12(r18)
 4015f8c:	30801126 	beq	r6,r2,4015fd4 <_realloc_r+0x4c8>
 4015f90:	90800404 	addi	r2,r18,16
 4015f94:	a8c00404 	addi	r3,r21,16
 4015f98:	003f1906 	br	4015c00 <__alt_data_end+0xfc015c00>
 4015f9c:	90ffff17 	ldw	r3,-4(r18)
 4015fa0:	00bfff04 	movi	r2,-4
 4015fa4:	a825883a 	mov	r18,r21
 4015fa8:	1884703a 	and	r2,r3,r2
 4015fac:	80a1883a 	add	r16,r16,r2
 4015fb0:	003f2406 	br	4015c44 <__alt_data_end+0xfc015c44>
 4015fb4:	a8800217 	ldw	r2,8(r21)
 4015fb8:	b0800415 	stw	r2,16(r22)
 4015fbc:	a8800317 	ldw	r2,12(r21)
 4015fc0:	b0800515 	stw	r2,20(r22)
 4015fc4:	31000a26 	beq	r6,r4,4015ff0 <_realloc_r+0x4e4>
 4015fc8:	b0800604 	addi	r2,r22,24
 4015fcc:	ad400404 	addi	r21,r21,16
 4015fd0:	003fa906 	br	4015e78 <__alt_data_end+0xfc015e78>
 4015fd4:	a9000417 	ldw	r4,16(r21)
 4015fd8:	90800604 	addi	r2,r18,24
 4015fdc:	a8c00604 	addi	r3,r21,24
 4015fe0:	91000415 	stw	r4,16(r18)
 4015fe4:	a9000517 	ldw	r4,20(r21)
 4015fe8:	91000515 	stw	r4,20(r18)
 4015fec:	003f0406 	br	4015c00 <__alt_data_end+0xfc015c00>
 4015ff0:	a8c00417 	ldw	r3,16(r21)
 4015ff4:	ad400604 	addi	r21,r21,24
 4015ff8:	b0800804 	addi	r2,r22,32
 4015ffc:	b0c00615 	stw	r3,24(r22)
 4016000:	a8ffff17 	ldw	r3,-4(r21)
 4016004:	b0c00715 	stw	r3,28(r22)
 4016008:	003f9b06 	br	4015e78 <__alt_data_end+0xfc015e78>
 401600c:	9005883a 	mov	r2,r18
 4016010:	003fc706 	br	4015f30 <__alt_data_end+0xfc015f30>
 4016014:	a80b883a 	mov	r5,r21
 4016018:	9009883a 	mov	r4,r18
 401601c:	40147900 	call	4014790 <memmove>
 4016020:	003fc906 	br	4015f48 <__alt_data_end+0xfc015f48>
 4016024:	a8800217 	ldw	r2,8(r21)
 4016028:	b0800415 	stw	r2,16(r22)
 401602c:	a8800317 	ldw	r2,12(r21)
 4016030:	b0800515 	stw	r2,20(r22)
 4016034:	31000726 	beq	r6,r4,4016054 <_realloc_r+0x548>
 4016038:	b0800604 	addi	r2,r22,24
 401603c:	ad400404 	addi	r21,r21,16
 4016040:	003fbb06 	br	4015f30 <__alt_data_end+0xfc015f30>
 4016044:	a009883a 	mov	r4,r20
 4016048:	401bde40 	call	401bde4 <__malloc_unlock>
 401604c:	0005883a 	mov	r2,zero
 4016050:	003f0a06 	br	4015c7c <__alt_data_end+0xfc015c7c>
 4016054:	a8c00417 	ldw	r3,16(r21)
 4016058:	ad400604 	addi	r21,r21,24
 401605c:	b0800804 	addi	r2,r22,32
 4016060:	b0c00615 	stw	r3,24(r22)
 4016064:	a8ffff17 	ldw	r3,-4(r21)
 4016068:	b0c00715 	stw	r3,28(r22)
 401606c:	003fb006 	br	4015f30 <__alt_data_end+0xfc015f30>

04016070 <__fpclassifyd>:
 4016070:	00a00034 	movhi	r2,32768
 4016074:	10bfffc4 	addi	r2,r2,-1
 4016078:	2884703a 	and	r2,r5,r2
 401607c:	10000726 	beq	r2,zero,401609c <__fpclassifyd+0x2c>
 4016080:	00fffc34 	movhi	r3,65520
 4016084:	019ff834 	movhi	r6,32736
 4016088:	28c7883a 	add	r3,r5,r3
 401608c:	31bfffc4 	addi	r6,r6,-1
 4016090:	30c00536 	bltu	r6,r3,40160a8 <__fpclassifyd+0x38>
 4016094:	00800104 	movi	r2,4
 4016098:	f800283a 	ret
 401609c:	2000021e 	bne	r4,zero,40160a8 <__fpclassifyd+0x38>
 40160a0:	00800084 	movi	r2,2
 40160a4:	f800283a 	ret
 40160a8:	00dffc34 	movhi	r3,32752
 40160ac:	019ff834 	movhi	r6,32736
 40160b0:	28cb883a 	add	r5,r5,r3
 40160b4:	31bfffc4 	addi	r6,r6,-1
 40160b8:	317ff62e 	bgeu	r6,r5,4016094 <__alt_data_end+0xfc016094>
 40160bc:	01400434 	movhi	r5,16
 40160c0:	297fffc4 	addi	r5,r5,-1
 40160c4:	28800236 	bltu	r5,r2,40160d0 <__fpclassifyd+0x60>
 40160c8:	008000c4 	movi	r2,3
 40160cc:	f800283a 	ret
 40160d0:	10c00226 	beq	r2,r3,40160dc <__fpclassifyd+0x6c>
 40160d4:	0005883a 	mov	r2,zero
 40160d8:	f800283a 	ret
 40160dc:	2005003a 	cmpeq	r2,r4,zero
 40160e0:	f800283a 	ret

040160e4 <__sread>:
 40160e4:	defffe04 	addi	sp,sp,-8
 40160e8:	dc000015 	stw	r16,0(sp)
 40160ec:	2821883a 	mov	r16,r5
 40160f0:	2940038f 	ldh	r5,14(r5)
 40160f4:	dfc00115 	stw	ra,4(sp)
 40160f8:	401801c0 	call	401801c <_read_r>
 40160fc:	10000716 	blt	r2,zero,401611c <__sread+0x38>
 4016100:	80c01417 	ldw	r3,80(r16)
 4016104:	1887883a 	add	r3,r3,r2
 4016108:	80c01415 	stw	r3,80(r16)
 401610c:	dfc00117 	ldw	ra,4(sp)
 4016110:	dc000017 	ldw	r16,0(sp)
 4016114:	dec00204 	addi	sp,sp,8
 4016118:	f800283a 	ret
 401611c:	80c0030b 	ldhu	r3,12(r16)
 4016120:	18fbffcc 	andi	r3,r3,61439
 4016124:	80c0030d 	sth	r3,12(r16)
 4016128:	dfc00117 	ldw	ra,4(sp)
 401612c:	dc000017 	ldw	r16,0(sp)
 4016130:	dec00204 	addi	sp,sp,8
 4016134:	f800283a 	ret

04016138 <__seofread>:
 4016138:	0005883a 	mov	r2,zero
 401613c:	f800283a 	ret

04016140 <__swrite>:
 4016140:	2880030b 	ldhu	r2,12(r5)
 4016144:	defffb04 	addi	sp,sp,-20
 4016148:	dcc00315 	stw	r19,12(sp)
 401614c:	dc800215 	stw	r18,8(sp)
 4016150:	dc400115 	stw	r17,4(sp)
 4016154:	dc000015 	stw	r16,0(sp)
 4016158:	dfc00415 	stw	ra,16(sp)
 401615c:	10c0400c 	andi	r3,r2,256
 4016160:	2821883a 	mov	r16,r5
 4016164:	2023883a 	mov	r17,r4
 4016168:	3025883a 	mov	r18,r6
 401616c:	3827883a 	mov	r19,r7
 4016170:	18000526 	beq	r3,zero,4016188 <__swrite+0x48>
 4016174:	2940038f 	ldh	r5,14(r5)
 4016178:	01c00084 	movi	r7,2
 401617c:	000d883a 	mov	r6,zero
 4016180:	4017fbc0 	call	4017fbc <_lseek_r>
 4016184:	8080030b 	ldhu	r2,12(r16)
 4016188:	8140038f 	ldh	r5,14(r16)
 401618c:	10bbffcc 	andi	r2,r2,61439
 4016190:	980f883a 	mov	r7,r19
 4016194:	900d883a 	mov	r6,r18
 4016198:	8809883a 	mov	r4,r17
 401619c:	8080030d 	sth	r2,12(r16)
 40161a0:	dfc00417 	ldw	ra,16(sp)
 40161a4:	dcc00317 	ldw	r19,12(sp)
 40161a8:	dc800217 	ldw	r18,8(sp)
 40161ac:	dc400117 	ldw	r17,4(sp)
 40161b0:	dc000017 	ldw	r16,0(sp)
 40161b4:	dec00504 	addi	sp,sp,20
 40161b8:	4017a701 	jmpi	4017a70 <_write_r>

040161bc <__sseek>:
 40161bc:	defffe04 	addi	sp,sp,-8
 40161c0:	dc000015 	stw	r16,0(sp)
 40161c4:	2821883a 	mov	r16,r5
 40161c8:	2940038f 	ldh	r5,14(r5)
 40161cc:	dfc00115 	stw	ra,4(sp)
 40161d0:	4017fbc0 	call	4017fbc <_lseek_r>
 40161d4:	00ffffc4 	movi	r3,-1
 40161d8:	10c00826 	beq	r2,r3,40161fc <__sseek+0x40>
 40161dc:	80c0030b 	ldhu	r3,12(r16)
 40161e0:	80801415 	stw	r2,80(r16)
 40161e4:	18c40014 	ori	r3,r3,4096
 40161e8:	80c0030d 	sth	r3,12(r16)
 40161ec:	dfc00117 	ldw	ra,4(sp)
 40161f0:	dc000017 	ldw	r16,0(sp)
 40161f4:	dec00204 	addi	sp,sp,8
 40161f8:	f800283a 	ret
 40161fc:	80c0030b 	ldhu	r3,12(r16)
 4016200:	18fbffcc 	andi	r3,r3,61439
 4016204:	80c0030d 	sth	r3,12(r16)
 4016208:	dfc00117 	ldw	ra,4(sp)
 401620c:	dc000017 	ldw	r16,0(sp)
 4016210:	dec00204 	addi	sp,sp,8
 4016214:	f800283a 	ret

04016218 <__sclose>:
 4016218:	2940038f 	ldh	r5,14(r5)
 401621c:	4017ad01 	jmpi	4017ad0 <_close_r>

04016220 <__sprint_r.part.0>:
 4016220:	28801917 	ldw	r2,100(r5)
 4016224:	defff604 	addi	sp,sp,-40
 4016228:	dd400515 	stw	r21,20(sp)
 401622c:	dfc00915 	stw	ra,36(sp)
 4016230:	df000815 	stw	fp,32(sp)
 4016234:	ddc00715 	stw	r23,28(sp)
 4016238:	dd800615 	stw	r22,24(sp)
 401623c:	dd000415 	stw	r20,16(sp)
 4016240:	dcc00315 	stw	r19,12(sp)
 4016244:	dc800215 	stw	r18,8(sp)
 4016248:	dc400115 	stw	r17,4(sp)
 401624c:	dc000015 	stw	r16,0(sp)
 4016250:	1088000c 	andi	r2,r2,8192
 4016254:	302b883a 	mov	r21,r6
 4016258:	10002e26 	beq	r2,zero,4016314 <__sprint_r.part.0+0xf4>
 401625c:	30800217 	ldw	r2,8(r6)
 4016260:	35800017 	ldw	r22,0(r6)
 4016264:	10002926 	beq	r2,zero,401630c <__sprint_r.part.0+0xec>
 4016268:	2827883a 	mov	r19,r5
 401626c:	2029883a 	mov	r20,r4
 4016270:	b5c00104 	addi	r23,r22,4
 4016274:	04bfffc4 	movi	r18,-1
 4016278:	bc400017 	ldw	r17,0(r23)
 401627c:	b4000017 	ldw	r16,0(r22)
 4016280:	0039883a 	mov	fp,zero
 4016284:	8822d0ba 	srli	r17,r17,2
 4016288:	8800031e 	bne	r17,zero,4016298 <__sprint_r.part.0+0x78>
 401628c:	00001806 	br	40162f0 <__sprint_r.part.0+0xd0>
 4016290:	84000104 	addi	r16,r16,4
 4016294:	8f001526 	beq	r17,fp,40162ec <__sprint_r.part.0+0xcc>
 4016298:	81400017 	ldw	r5,0(r16)
 401629c:	980d883a 	mov	r6,r19
 40162a0:	a009883a 	mov	r4,r20
 40162a4:	4017e680 	call	4017e68 <_fputwc_r>
 40162a8:	e7000044 	addi	fp,fp,1
 40162ac:	14bff81e 	bne	r2,r18,4016290 <__alt_data_end+0xfc016290>
 40162b0:	9005883a 	mov	r2,r18
 40162b4:	a8000215 	stw	zero,8(r21)
 40162b8:	a8000115 	stw	zero,4(r21)
 40162bc:	dfc00917 	ldw	ra,36(sp)
 40162c0:	df000817 	ldw	fp,32(sp)
 40162c4:	ddc00717 	ldw	r23,28(sp)
 40162c8:	dd800617 	ldw	r22,24(sp)
 40162cc:	dd400517 	ldw	r21,20(sp)
 40162d0:	dd000417 	ldw	r20,16(sp)
 40162d4:	dcc00317 	ldw	r19,12(sp)
 40162d8:	dc800217 	ldw	r18,8(sp)
 40162dc:	dc400117 	ldw	r17,4(sp)
 40162e0:	dc000017 	ldw	r16,0(sp)
 40162e4:	dec00a04 	addi	sp,sp,40
 40162e8:	f800283a 	ret
 40162ec:	a8800217 	ldw	r2,8(r21)
 40162f0:	8c63883a 	add	r17,r17,r17
 40162f4:	8c63883a 	add	r17,r17,r17
 40162f8:	1445c83a 	sub	r2,r2,r17
 40162fc:	a8800215 	stw	r2,8(r21)
 4016300:	b5800204 	addi	r22,r22,8
 4016304:	bdc00204 	addi	r23,r23,8
 4016308:	103fdb1e 	bne	r2,zero,4016278 <__alt_data_end+0xfc016278>
 401630c:	0005883a 	mov	r2,zero
 4016310:	003fe806 	br	40162b4 <__alt_data_end+0xfc0162b4>
 4016314:	4013dc40 	call	4013dc4 <__sfvwrite_r>
 4016318:	003fe606 	br	40162b4 <__alt_data_end+0xfc0162b4>

0401631c <__sprint_r>:
 401631c:	30c00217 	ldw	r3,8(r6)
 4016320:	18000126 	beq	r3,zero,4016328 <__sprint_r+0xc>
 4016324:	40162201 	jmpi	4016220 <__sprint_r.part.0>
 4016328:	30000115 	stw	zero,4(r6)
 401632c:	0005883a 	mov	r2,zero
 4016330:	f800283a 	ret

04016334 <___vfiprintf_internal_r>:
 4016334:	deffca04 	addi	sp,sp,-216
 4016338:	dd403115 	stw	r21,196(sp)
 401633c:	dfc03515 	stw	ra,212(sp)
 4016340:	df003415 	stw	fp,208(sp)
 4016344:	ddc03315 	stw	r23,204(sp)
 4016348:	dd803215 	stw	r22,200(sp)
 401634c:	dd003015 	stw	r20,192(sp)
 4016350:	dcc02f15 	stw	r19,188(sp)
 4016354:	dc802e15 	stw	r18,184(sp)
 4016358:	dc402d15 	stw	r17,180(sp)
 401635c:	dc002c15 	stw	r16,176(sp)
 4016360:	d9002115 	stw	r4,132(sp)
 4016364:	d9402015 	stw	r5,128(sp)
 4016368:	d9c02215 	stw	r7,136(sp)
 401636c:	302b883a 	mov	r21,r6
 4016370:	20000226 	beq	r4,zero,401637c <___vfiprintf_internal_r+0x48>
 4016374:	20800e17 	ldw	r2,56(r4)
 4016378:	1000cf26 	beq	r2,zero,40166b8 <___vfiprintf_internal_r+0x384>
 401637c:	d8c02017 	ldw	r3,128(sp)
 4016380:	1880030b 	ldhu	r2,12(r3)
 4016384:	10c8000c 	andi	r3,r2,8192
 4016388:	1800071e 	bne	r3,zero,40163a8 <___vfiprintf_internal_r+0x74>
 401638c:	d9402017 	ldw	r5,128(sp)
 4016390:	00f7ffc4 	movi	r3,-8193
 4016394:	10880014 	ori	r2,r2,8192
 4016398:	29001917 	ldw	r4,100(r5)
 401639c:	2880030d 	sth	r2,12(r5)
 40163a0:	20c6703a 	and	r3,r4,r3
 40163a4:	28c01915 	stw	r3,100(r5)
 40163a8:	10c0020c 	andi	r3,r2,8
 40163ac:	1800a526 	beq	r3,zero,4016644 <___vfiprintf_internal_r+0x310>
 40163b0:	d9002017 	ldw	r4,128(sp)
 40163b4:	20c00417 	ldw	r3,16(r4)
 40163b8:	1800a226 	beq	r3,zero,4016644 <___vfiprintf_internal_r+0x310>
 40163bc:	1080068c 	andi	r2,r2,26
 40163c0:	00c00284 	movi	r3,10
 40163c4:	10c0a826 	beq	r2,r3,4016668 <___vfiprintf_internal_r+0x334>
 40163c8:	d9001a04 	addi	r4,sp,104
 40163cc:	d94019c4 	addi	r5,sp,103
 40163d0:	048100b4 	movhi	r18,1026
 40163d4:	2145c83a 	sub	r2,r4,r5
 40163d8:	949d0204 	addi	r18,r18,29704
 40163dc:	d9001e15 	stw	r4,120(sp)
 40163e0:	d9401f15 	stw	r5,124(sp)
 40163e4:	dec01a15 	stw	sp,104(sp)
 40163e8:	d8001c15 	stw	zero,112(sp)
 40163ec:	d8001b15 	stw	zero,108(sp)
 40163f0:	d811883a 	mov	r8,sp
 40163f4:	d8002615 	stw	zero,152(sp)
 40163f8:	d8002415 	stw	zero,144(sp)
 40163fc:	d8802815 	stw	r2,160(sp)
 4016400:	a82d883a 	mov	r22,r21
 4016404:	b0800007 	ldb	r2,0(r22)
 4016408:	10040d26 	beq	r2,zero,4017440 <___vfiprintf_internal_r+0x110c>
 401640c:	00c00944 	movi	r3,37
 4016410:	b029883a 	mov	r20,r22
 4016414:	10c0021e 	bne	r2,r3,4016420 <___vfiprintf_internal_r+0xec>
 4016418:	00001606 	br	4016474 <___vfiprintf_internal_r+0x140>
 401641c:	10c00326 	beq	r2,r3,401642c <___vfiprintf_internal_r+0xf8>
 4016420:	a5000044 	addi	r20,r20,1
 4016424:	a0800007 	ldb	r2,0(r20)
 4016428:	103ffc1e 	bne	r2,zero,401641c <__alt_data_end+0xfc01641c>
 401642c:	a5a1c83a 	sub	r16,r20,r22
 4016430:	80001026 	beq	r16,zero,4016474 <___vfiprintf_internal_r+0x140>
 4016434:	d8c01c17 	ldw	r3,112(sp)
 4016438:	d8801b17 	ldw	r2,108(sp)
 401643c:	45800015 	stw	r22,0(r8)
 4016440:	80c7883a 	add	r3,r16,r3
 4016444:	10800044 	addi	r2,r2,1
 4016448:	44000115 	stw	r16,4(r8)
 401644c:	d8c01c15 	stw	r3,112(sp)
 4016450:	d8801b15 	stw	r2,108(sp)
 4016454:	010001c4 	movi	r4,7
 4016458:	2080750e 	bge	r4,r2,4016630 <___vfiprintf_internal_r+0x2fc>
 401645c:	1803951e 	bne	r3,zero,40172b4 <___vfiprintf_internal_r+0xf80>
 4016460:	d8c02417 	ldw	r3,144(sp)
 4016464:	d8001b15 	stw	zero,108(sp)
 4016468:	d811883a 	mov	r8,sp
 401646c:	1c07883a 	add	r3,r3,r16
 4016470:	d8c02415 	stw	r3,144(sp)
 4016474:	a0800007 	ldb	r2,0(r20)
 4016478:	1002e026 	beq	r2,zero,4016ffc <___vfiprintf_internal_r+0xcc8>
 401647c:	a5800044 	addi	r22,r20,1
 4016480:	a0c00047 	ldb	r3,1(r20)
 4016484:	d8001d85 	stb	zero,118(sp)
 4016488:	0027883a 	mov	r19,zero
 401648c:	d8002305 	stb	zero,140(sp)
 4016490:	043fffc4 	movi	r16,-1
 4016494:	d8002515 	stw	zero,148(sp)
 4016498:	0023883a 	mov	r17,zero
 401649c:	05001604 	movi	r20,88
 40164a0:	05400244 	movi	r21,9
 40164a4:	402f883a 	mov	r23,r8
 40164a8:	b5800044 	addi	r22,r22,1
 40164ac:	18bff804 	addi	r2,r3,-32
 40164b0:	a0827736 	bltu	r20,r2,4016e90 <___vfiprintf_internal_r+0xb5c>
 40164b4:	100490ba 	slli	r2,r2,2
 40164b8:	01010074 	movhi	r4,1025
 40164bc:	21193304 	addi	r4,r4,25804
 40164c0:	1105883a 	add	r2,r2,r4
 40164c4:	10800017 	ldw	r2,0(r2)
 40164c8:	1000683a 	jmp	r2
 40164cc:	04016b90 	cmplti	r16,zero,1454
 40164d0:	04016e90 	cmplti	r16,zero,1466
 40164d4:	04016e90 	cmplti	r16,zero,1466
 40164d8:	04016bac 	andhi	r16,zero,1454
 40164dc:	04016e90 	cmplti	r16,zero,1466
 40164e0:	04016e90 	cmplti	r16,zero,1466
 40164e4:	04016e90 	cmplti	r16,zero,1466
 40164e8:	04016e90 	cmplti	r16,zero,1466
 40164ec:	04016e90 	cmplti	r16,zero,1466
 40164f0:	04016e90 	cmplti	r16,zero,1466
 40164f4:	04016db4 	movhi	r16,1462
 40164f8:	04016dd8 	cmpnei	r16,zero,1463
 40164fc:	04016e90 	cmplti	r16,zero,1466
 4016500:	040166d0 	cmplti	r16,zero,1435
 4016504:	04016dec 	andhi	r16,zero,1463
 4016508:	04016e90 	cmplti	r16,zero,1466
 401650c:	04016bb8 	rdprs	r16,zero,1454
 4016510:	04016bc4 	movi	r16,1455
 4016514:	04016bc4 	movi	r16,1455
 4016518:	04016bc4 	movi	r16,1455
 401651c:	04016bc4 	movi	r16,1455
 4016520:	04016bc4 	movi	r16,1455
 4016524:	04016bc4 	movi	r16,1455
 4016528:	04016bc4 	movi	r16,1455
 401652c:	04016bc4 	movi	r16,1455
 4016530:	04016bc4 	movi	r16,1455
 4016534:	04016e90 	cmplti	r16,zero,1466
 4016538:	04016e90 	cmplti	r16,zero,1466
 401653c:	04016e90 	cmplti	r16,zero,1466
 4016540:	04016e90 	cmplti	r16,zero,1466
 4016544:	04016e90 	cmplti	r16,zero,1466
 4016548:	04016e90 	cmplti	r16,zero,1466
 401654c:	04016e90 	cmplti	r16,zero,1466
 4016550:	04016e90 	cmplti	r16,zero,1466
 4016554:	04016e90 	cmplti	r16,zero,1466
 4016558:	04016e90 	cmplti	r16,zero,1466
 401655c:	04016c04 	movi	r16,1456
 4016560:	04016e90 	cmplti	r16,zero,1466
 4016564:	04016e90 	cmplti	r16,zero,1466
 4016568:	04016e90 	cmplti	r16,zero,1466
 401656c:	04016e90 	cmplti	r16,zero,1466
 4016570:	04016e90 	cmplti	r16,zero,1466
 4016574:	04016e90 	cmplti	r16,zero,1466
 4016578:	04016e90 	cmplti	r16,zero,1466
 401657c:	04016e90 	cmplti	r16,zero,1466
 4016580:	04016e90 	cmplti	r16,zero,1466
 4016584:	04016e90 	cmplti	r16,zero,1466
 4016588:	04016c40 	call	4016c4 <__alt_mem_sdram-0x3bfe93c>
 401658c:	04016e90 	cmplti	r16,zero,1466
 4016590:	04016e90 	cmplti	r16,zero,1466
 4016594:	04016e90 	cmplti	r16,zero,1466
 4016598:	04016e90 	cmplti	r16,zero,1466
 401659c:	04016e90 	cmplti	r16,zero,1466
 40165a0:	04016c9c 	xori	r16,zero,1458
 40165a4:	04016e90 	cmplti	r16,zero,1466
 40165a8:	04016e90 	cmplti	r16,zero,1466
 40165ac:	04016d10 	cmplti	r16,zero,1460
 40165b0:	04016e90 	cmplti	r16,zero,1466
 40165b4:	04016e90 	cmplti	r16,zero,1466
 40165b8:	04016e90 	cmplti	r16,zero,1466
 40165bc:	04016e90 	cmplti	r16,zero,1466
 40165c0:	04016e90 	cmplti	r16,zero,1466
 40165c4:	04016e90 	cmplti	r16,zero,1466
 40165c8:	04016e90 	cmplti	r16,zero,1466
 40165cc:	04016e90 	cmplti	r16,zero,1466
 40165d0:	04016e90 	cmplti	r16,zero,1466
 40165d4:	04016e90 	cmplti	r16,zero,1466
 40165d8:	04016ab8 	rdprs	r16,zero,1450
 40165dc:	04016ae8 	cmpgeui	r16,zero,1451
 40165e0:	04016e90 	cmplti	r16,zero,1466
 40165e4:	04016e90 	cmplti	r16,zero,1466
 40165e8:	04016e90 	cmplti	r16,zero,1466
 40165ec:	04016e38 	rdprs	r16,zero,1464
 40165f0:	04016ae8 	cmpgeui	r16,zero,1451
 40165f4:	04016e90 	cmplti	r16,zero,1466
 40165f8:	04016e90 	cmplti	r16,zero,1466
 40165fc:	04016990 	cmplti	r16,zero,1446
 4016600:	04016e90 	cmplti	r16,zero,1466
 4016604:	040169a4 	muli	r16,zero,1446
 4016608:	040169dc 	xori	r16,zero,1447
 401660c:	040166dc 	xori	r16,zero,1435
 4016610:	04016984 	movi	r16,1446
 4016614:	04016e90 	cmplti	r16,zero,1466
 4016618:	04016d50 	cmplti	r16,zero,1461
 401661c:	04016e90 	cmplti	r16,zero,1466
 4016620:	04016d9c 	xori	r16,zero,1462
 4016624:	04016e90 	cmplti	r16,zero,1466
 4016628:	04016e90 	cmplti	r16,zero,1466
 401662c:	04016a60 	cmpeqi	r16,zero,1449
 4016630:	42000204 	addi	r8,r8,8
 4016634:	d8c02417 	ldw	r3,144(sp)
 4016638:	1c07883a 	add	r3,r3,r16
 401663c:	d8c02415 	stw	r3,144(sp)
 4016640:	003f8c06 	br	4016474 <__alt_data_end+0xfc016474>
 4016644:	d9402017 	ldw	r5,128(sp)
 4016648:	d9002117 	ldw	r4,132(sp)
 401664c:	40119340 	call	4011934 <__swsetup_r>
 4016650:	1003c11e 	bne	r2,zero,4017558 <___vfiprintf_internal_r+0x1224>
 4016654:	d9402017 	ldw	r5,128(sp)
 4016658:	00c00284 	movi	r3,10
 401665c:	2880030b 	ldhu	r2,12(r5)
 4016660:	1080068c 	andi	r2,r2,26
 4016664:	10ff581e 	bne	r2,r3,40163c8 <__alt_data_end+0xfc0163c8>
 4016668:	d8c02017 	ldw	r3,128(sp)
 401666c:	1880038f 	ldh	r2,14(r3)
 4016670:	103f5516 	blt	r2,zero,40163c8 <__alt_data_end+0xfc0163c8>
 4016674:	d9c02217 	ldw	r7,136(sp)
 4016678:	d9002117 	ldw	r4,132(sp)
 401667c:	a80d883a 	mov	r6,r21
 4016680:	180b883a 	mov	r5,r3
 4016684:	401785c0 	call	401785c <__sbprintf>
 4016688:	dfc03517 	ldw	ra,212(sp)
 401668c:	df003417 	ldw	fp,208(sp)
 4016690:	ddc03317 	ldw	r23,204(sp)
 4016694:	dd803217 	ldw	r22,200(sp)
 4016698:	dd403117 	ldw	r21,196(sp)
 401669c:	dd003017 	ldw	r20,192(sp)
 40166a0:	dcc02f17 	ldw	r19,188(sp)
 40166a4:	dc802e17 	ldw	r18,184(sp)
 40166a8:	dc402d17 	ldw	r17,180(sp)
 40166ac:	dc002c17 	ldw	r16,176(sp)
 40166b0:	dec03604 	addi	sp,sp,216
 40166b4:	f800283a 	ret
 40166b8:	40139400 	call	4013940 <__sinit>
 40166bc:	003f2f06 	br	401637c <__alt_data_end+0xfc01637c>
 40166c0:	d8c02517 	ldw	r3,148(sp)
 40166c4:	d8802215 	stw	r2,136(sp)
 40166c8:	00c7c83a 	sub	r3,zero,r3
 40166cc:	d8c02515 	stw	r3,148(sp)
 40166d0:	8c400114 	ori	r17,r17,4
 40166d4:	b0c00007 	ldb	r3,0(r22)
 40166d8:	003f7306 	br	40164a8 <__alt_data_end+0xfc0164a8>
 40166dc:	00800c04 	movi	r2,48
 40166e0:	d9402217 	ldw	r5,136(sp)
 40166e4:	d8801d05 	stb	r2,116(sp)
 40166e8:	00801e04 	movi	r2,120
 40166ec:	d8801d45 	stb	r2,117(sp)
 40166f0:	d8001d85 	stb	zero,118(sp)
 40166f4:	b811883a 	mov	r8,r23
 40166f8:	28c00104 	addi	r3,r5,4
 40166fc:	2cc00017 	ldw	r19,0(r5)
 4016700:	0029883a 	mov	r20,zero
 4016704:	88800094 	ori	r2,r17,2
 4016708:	80032516 	blt	r16,zero,40173a0 <___vfiprintf_internal_r+0x106c>
 401670c:	00bfdfc4 	movi	r2,-129
 4016710:	88a2703a 	and	r17,r17,r2
 4016714:	d8c02215 	stw	r3,136(sp)
 4016718:	8c400094 	ori	r17,r17,2
 401671c:	98032a1e 	bne	r19,zero,40173c8 <___vfiprintf_internal_r+0x1094>
 4016720:	008100b4 	movhi	r2,1026
 4016724:	109ca204 	addi	r2,r2,29320
 4016728:	d8802615 	stw	r2,152(sp)
 401672c:	002b883a 	mov	r21,zero
 4016730:	8001741e 	bne	r16,zero,4016d04 <___vfiprintf_internal_r+0x9d0>
 4016734:	0021883a 	mov	r16,zero
 4016738:	0029883a 	mov	r20,zero
 401673c:	ddc01a04 	addi	r23,sp,104
 4016740:	8027883a 	mov	r19,r16
 4016744:	8500010e 	bge	r16,r20,401674c <___vfiprintf_internal_r+0x418>
 4016748:	a027883a 	mov	r19,r20
 401674c:	ad403fcc 	andi	r21,r21,255
 4016750:	ad40201c 	xori	r21,r21,128
 4016754:	ad7fe004 	addi	r21,r21,-128
 4016758:	a8000126 	beq	r21,zero,4016760 <___vfiprintf_internal_r+0x42c>
 401675c:	9cc00044 	addi	r19,r19,1
 4016760:	89c0008c 	andi	r7,r17,2
 4016764:	38000126 	beq	r7,zero,401676c <___vfiprintf_internal_r+0x438>
 4016768:	9cc00084 	addi	r19,r19,2
 401676c:	88c0210c 	andi	r3,r17,132
 4016770:	1801dd1e 	bne	r3,zero,4016ee8 <___vfiprintf_internal_r+0xbb4>
 4016774:	d9402517 	ldw	r5,148(sp)
 4016778:	2cebc83a 	sub	r21,r5,r19
 401677c:	0541da0e 	bge	zero,r21,4016ee8 <___vfiprintf_internal_r+0xbb4>
 4016780:	07000404 	movi	fp,16
 4016784:	d8801c17 	ldw	r2,112(sp)
 4016788:	e543be0e 	bge	fp,r21,4017684 <___vfiprintf_internal_r+0x1350>
 401678c:	014100b4 	movhi	r5,1026
 4016790:	295d0604 	addi	r5,r5,29720
 4016794:	dc002715 	stw	r16,156(sp)
 4016798:	d9801b17 	ldw	r6,108(sp)
 401679c:	a821883a 	mov	r16,r21
 40167a0:	d9402315 	stw	r5,140(sp)
 40167a4:	028001c4 	movi	r10,7
 40167a8:	d9c02915 	stw	r7,164(sp)
 40167ac:	182b883a 	mov	r21,r3
 40167b0:	00000506 	br	40167c8 <___vfiprintf_internal_r+0x494>
 40167b4:	31000084 	addi	r4,r6,2
 40167b8:	42000204 	addi	r8,r8,8
 40167bc:	180d883a 	mov	r6,r3
 40167c0:	843ffc04 	addi	r16,r16,-16
 40167c4:	e4000f0e 	bge	fp,r16,4016804 <___vfiprintf_internal_r+0x4d0>
 40167c8:	010100b4 	movhi	r4,1026
 40167cc:	10800404 	addi	r2,r2,16
 40167d0:	30c00044 	addi	r3,r6,1
 40167d4:	211d0604 	addi	r4,r4,29720
 40167d8:	41000015 	stw	r4,0(r8)
 40167dc:	47000115 	stw	fp,4(r8)
 40167e0:	d8801c15 	stw	r2,112(sp)
 40167e4:	d8c01b15 	stw	r3,108(sp)
 40167e8:	50fff20e 	bge	r10,r3,40167b4 <__alt_data_end+0xfc0167b4>
 40167ec:	1001b21e 	bne	r2,zero,4016eb8 <___vfiprintf_internal_r+0xb84>
 40167f0:	843ffc04 	addi	r16,r16,-16
 40167f4:	000d883a 	mov	r6,zero
 40167f8:	01000044 	movi	r4,1
 40167fc:	d811883a 	mov	r8,sp
 4016800:	e43ff116 	blt	fp,r16,40167c8 <__alt_data_end+0xfc0167c8>
 4016804:	a807883a 	mov	r3,r21
 4016808:	d9c02917 	ldw	r7,164(sp)
 401680c:	802b883a 	mov	r21,r16
 4016810:	dc002717 	ldw	r16,156(sp)
 4016814:	d9402317 	ldw	r5,140(sp)
 4016818:	a885883a 	add	r2,r21,r2
 401681c:	45400115 	stw	r21,4(r8)
 4016820:	41400015 	stw	r5,0(r8)
 4016824:	d8801c15 	stw	r2,112(sp)
 4016828:	d9001b15 	stw	r4,108(sp)
 401682c:	014001c4 	movi	r5,7
 4016830:	29026216 	blt	r5,r4,40171bc <___vfiprintf_internal_r+0xe88>
 4016834:	d9801d87 	ldb	r6,118(sp)
 4016838:	42000204 	addi	r8,r8,8
 401683c:	21400044 	addi	r5,r4,1
 4016840:	3001ae1e 	bne	r6,zero,4016efc <___vfiprintf_internal_r+0xbc8>
 4016844:	3801bb26 	beq	r7,zero,4016f34 <___vfiprintf_internal_r+0xc00>
 4016848:	d9001d04 	addi	r4,sp,116
 401684c:	10800084 	addi	r2,r2,2
 4016850:	41000015 	stw	r4,0(r8)
 4016854:	01000084 	movi	r4,2
 4016858:	41000115 	stw	r4,4(r8)
 401685c:	d8801c15 	stw	r2,112(sp)
 4016860:	d9401b15 	stw	r5,108(sp)
 4016864:	010001c4 	movi	r4,7
 4016868:	2142680e 	bge	r4,r5,401720c <___vfiprintf_internal_r+0xed8>
 401686c:	1002b11e 	bne	r2,zero,4017334 <___vfiprintf_internal_r+0x1000>
 4016870:	01802004 	movi	r6,128
 4016874:	01400044 	movi	r5,1
 4016878:	0009883a 	mov	r4,zero
 401687c:	d811883a 	mov	r8,sp
 4016880:	1981ae1e 	bne	r3,r6,4016f3c <___vfiprintf_internal_r+0xc08>
 4016884:	d8c02517 	ldw	r3,148(sp)
 4016888:	1cf9c83a 	sub	fp,r3,r19
 401688c:	0701ab0e 	bge	zero,fp,4016f3c <___vfiprintf_internal_r+0xc08>
 4016890:	05400404 	movi	r21,16
 4016894:	af03a90e 	bge	r21,fp,401773c <___vfiprintf_internal_r+0x1408>
 4016898:	014100b4 	movhi	r5,1026
 401689c:	295d0204 	addi	r5,r5,29704
 40168a0:	d9402315 	stw	r5,140(sp)
 40168a4:	01c001c4 	movi	r7,7
 40168a8:	00000506 	br	40168c0 <___vfiprintf_internal_r+0x58c>
 40168ac:	21800084 	addi	r6,r4,2
 40168b0:	42000204 	addi	r8,r8,8
 40168b4:	1809883a 	mov	r4,r3
 40168b8:	e73ffc04 	addi	fp,fp,-16
 40168bc:	af000d0e 	bge	r21,fp,40168f4 <___vfiprintf_internal_r+0x5c0>
 40168c0:	10800404 	addi	r2,r2,16
 40168c4:	20c00044 	addi	r3,r4,1
 40168c8:	44800015 	stw	r18,0(r8)
 40168cc:	45400115 	stw	r21,4(r8)
 40168d0:	d8801c15 	stw	r2,112(sp)
 40168d4:	d8c01b15 	stw	r3,108(sp)
 40168d8:	38fff40e 	bge	r7,r3,40168ac <__alt_data_end+0xfc0168ac>
 40168dc:	10022b1e 	bne	r2,zero,401718c <___vfiprintf_internal_r+0xe58>
 40168e0:	e73ffc04 	addi	fp,fp,-16
 40168e4:	01800044 	movi	r6,1
 40168e8:	0009883a 	mov	r4,zero
 40168ec:	d811883a 	mov	r8,sp
 40168f0:	af3ff316 	blt	r21,fp,40168c0 <__alt_data_end+0xfc0168c0>
 40168f4:	d8c02317 	ldw	r3,140(sp)
 40168f8:	1705883a 	add	r2,r2,fp
 40168fc:	47000115 	stw	fp,4(r8)
 4016900:	40c00015 	stw	r3,0(r8)
 4016904:	d8801c15 	stw	r2,112(sp)
 4016908:	d9801b15 	stw	r6,108(sp)
 401690c:	00c001c4 	movi	r3,7
 4016910:	19829416 	blt	r3,r6,4017364 <___vfiprintf_internal_r+0x1030>
 4016914:	8521c83a 	sub	r16,r16,r20
 4016918:	42000204 	addi	r8,r8,8
 401691c:	31400044 	addi	r5,r6,1
 4016920:	3009883a 	mov	r4,r6
 4016924:	04018716 	blt	zero,r16,4016f44 <___vfiprintf_internal_r+0xc10>
 4016928:	a085883a 	add	r2,r20,r2
 401692c:	45c00015 	stw	r23,0(r8)
 4016930:	45000115 	stw	r20,4(r8)
 4016934:	d8801c15 	stw	r2,112(sp)
 4016938:	d9401b15 	stw	r5,108(sp)
 401693c:	00c001c4 	movi	r3,7
 4016940:	1941c20e 	bge	r3,r5,401704c <___vfiprintf_internal_r+0xd18>
 4016944:	1002531e 	bne	r2,zero,4017294 <___vfiprintf_internal_r+0xf60>
 4016948:	d8001b15 	stw	zero,108(sp)
 401694c:	8c40010c 	andi	r17,r17,4
 4016950:	88023226 	beq	r17,zero,401721c <___vfiprintf_internal_r+0xee8>
 4016954:	d9002517 	ldw	r4,148(sp)
 4016958:	24e3c83a 	sub	r17,r4,r19
 401695c:	04432916 	blt	zero,r17,4017604 <___vfiprintf_internal_r+0x12d0>
 4016960:	d8802517 	ldw	r2,148(sp)
 4016964:	14c0010e 	bge	r2,r19,401696c <___vfiprintf_internal_r+0x638>
 4016968:	9805883a 	mov	r2,r19
 401696c:	d8c02417 	ldw	r3,144(sp)
 4016970:	1887883a 	add	r3,r3,r2
 4016974:	d8c02415 	stw	r3,144(sp)
 4016978:	d8001b15 	stw	zero,108(sp)
 401697c:	d811883a 	mov	r8,sp
 4016980:	003ea006 	br	4016404 <__alt_data_end+0xfc016404>
 4016984:	8c400814 	ori	r17,r17,32
 4016988:	b0c00007 	ldb	r3,0(r22)
 401698c:	003ec606 	br	40164a8 <__alt_data_end+0xfc0164a8>
 4016990:	b0c00007 	ldb	r3,0(r22)
 4016994:	00801b04 	movi	r2,108
 4016998:	18832026 	beq	r3,r2,401761c <___vfiprintf_internal_r+0x12e8>
 401699c:	8c400414 	ori	r17,r17,16
 40169a0:	003ec106 	br	40164a8 <__alt_data_end+0xfc0164a8>
 40169a4:	9cc03fcc 	andi	r19,r19,255
 40169a8:	b811883a 	mov	r8,r23
 40169ac:	9803981e 	bne	r19,zero,4017810 <___vfiprintf_internal_r+0x14dc>
 40169b0:	8880080c 	andi	r2,r17,32
 40169b4:	1002be26 	beq	r2,zero,40174b0 <___vfiprintf_internal_r+0x117c>
 40169b8:	d9002217 	ldw	r4,136(sp)
 40169bc:	d9402417 	ldw	r5,144(sp)
 40169c0:	20800017 	ldw	r2,0(r4)
 40169c4:	2807d7fa 	srai	r3,r5,31
 40169c8:	21000104 	addi	r4,r4,4
 40169cc:	d9002215 	stw	r4,136(sp)
 40169d0:	11400015 	stw	r5,0(r2)
 40169d4:	10c00115 	stw	r3,4(r2)
 40169d8:	003e8a06 	br	4016404 <__alt_data_end+0xfc016404>
 40169dc:	9cc03fcc 	andi	r19,r19,255
 40169e0:	b811883a 	mov	r8,r23
 40169e4:	9803871e 	bne	r19,zero,4017804 <___vfiprintf_internal_r+0x14d0>
 40169e8:	8880080c 	andi	r2,r17,32
 40169ec:	10009a26 	beq	r2,zero,4016c58 <___vfiprintf_internal_r+0x924>
 40169f0:	d9002217 	ldw	r4,136(sp)
 40169f4:	d8001d85 	stb	zero,118(sp)
 40169f8:	20800204 	addi	r2,r4,8
 40169fc:	24c00017 	ldw	r19,0(r4)
 4016a00:	25000117 	ldw	r20,4(r4)
 4016a04:	8002a416 	blt	r16,zero,4017498 <___vfiprintf_internal_r+0x1164>
 4016a08:	013fdfc4 	movi	r4,-129
 4016a0c:	9d06b03a 	or	r3,r19,r20
 4016a10:	d8802215 	stw	r2,136(sp)
 4016a14:	8922703a 	and	r17,r17,r4
 4016a18:	18009b26 	beq	r3,zero,4016c88 <___vfiprintf_internal_r+0x954>
 4016a1c:	002b883a 	mov	r21,zero
 4016a20:	ddc01a04 	addi	r23,sp,104
 4016a24:	9806d0fa 	srli	r3,r19,3
 4016a28:	a008977a 	slli	r4,r20,29
 4016a2c:	a028d0fa 	srli	r20,r20,3
 4016a30:	9cc001cc 	andi	r19,r19,7
 4016a34:	98800c04 	addi	r2,r19,48
 4016a38:	bdffffc4 	addi	r23,r23,-1
 4016a3c:	20e6b03a 	or	r19,r4,r3
 4016a40:	b8800005 	stb	r2,0(r23)
 4016a44:	9d06b03a 	or	r3,r19,r20
 4016a48:	183ff61e 	bne	r3,zero,4016a24 <__alt_data_end+0xfc016a24>
 4016a4c:	88c0004c 	andi	r3,r17,1
 4016a50:	18021f1e 	bne	r3,zero,40172d0 <___vfiprintf_internal_r+0xf9c>
 4016a54:	d9401e17 	ldw	r5,120(sp)
 4016a58:	2de9c83a 	sub	r20,r5,r23
 4016a5c:	003f3806 	br	4016740 <__alt_data_end+0xfc016740>
 4016a60:	9cc03fcc 	andi	r19,r19,255
 4016a64:	b811883a 	mov	r8,r23
 4016a68:	98034f1e 	bne	r19,zero,40177a8 <___vfiprintf_internal_r+0x1474>
 4016a6c:	008100b4 	movhi	r2,1026
 4016a70:	109ca204 	addi	r2,r2,29320
 4016a74:	d8802615 	stw	r2,152(sp)
 4016a78:	8880080c 	andi	r2,r17,32
 4016a7c:	1000ac26 	beq	r2,zero,4016d30 <___vfiprintf_internal_r+0x9fc>
 4016a80:	d9002217 	ldw	r4,136(sp)
 4016a84:	24c00017 	ldw	r19,0(r4)
 4016a88:	25000117 	ldw	r20,4(r4)
 4016a8c:	21000204 	addi	r4,r4,8
 4016a90:	d9002215 	stw	r4,136(sp)
 4016a94:	8880004c 	andi	r2,r17,1
 4016a98:	1001e726 	beq	r2,zero,4017238 <___vfiprintf_internal_r+0xf04>
 4016a9c:	9d04b03a 	or	r2,r19,r20
 4016aa0:	10025c1e 	bne	r2,zero,4017414 <___vfiprintf_internal_r+0x10e0>
 4016aa4:	d8001d85 	stb	zero,118(sp)
 4016aa8:	80024416 	blt	r16,zero,40173bc <___vfiprintf_internal_r+0x1088>
 4016aac:	00bfdfc4 	movi	r2,-129
 4016ab0:	88a2703a 	and	r17,r17,r2
 4016ab4:	003f1d06 	br	401672c <__alt_data_end+0xfc01672c>
 4016ab8:	d8c02217 	ldw	r3,136(sp)
 4016abc:	04c00044 	movi	r19,1
 4016ac0:	b811883a 	mov	r8,r23
 4016ac4:	18800017 	ldw	r2,0(r3)
 4016ac8:	18c00104 	addi	r3,r3,4
 4016acc:	d8001d85 	stb	zero,118(sp)
 4016ad0:	d8801005 	stb	r2,64(sp)
 4016ad4:	d8c02215 	stw	r3,136(sp)
 4016ad8:	9829883a 	mov	r20,r19
 4016adc:	ddc01004 	addi	r23,sp,64
 4016ae0:	0021883a 	mov	r16,zero
 4016ae4:	003f1e06 	br	4016760 <__alt_data_end+0xfc016760>
 4016ae8:	9cc03fcc 	andi	r19,r19,255
 4016aec:	b811883a 	mov	r8,r23
 4016af0:	9803331e 	bne	r19,zero,40177c0 <___vfiprintf_internal_r+0x148c>
 4016af4:	8880080c 	andi	r2,r17,32
 4016af8:	10004826 	beq	r2,zero,4016c1c <___vfiprintf_internal_r+0x8e8>
 4016afc:	d9002217 	ldw	r4,136(sp)
 4016b00:	20800117 	ldw	r2,4(r4)
 4016b04:	24c00017 	ldw	r19,0(r4)
 4016b08:	21000204 	addi	r4,r4,8
 4016b0c:	d9002215 	stw	r4,136(sp)
 4016b10:	1029883a 	mov	r20,r2
 4016b14:	10024c16 	blt	r2,zero,4017448 <___vfiprintf_internal_r+0x1114>
 4016b18:	dd401d83 	ldbu	r21,118(sp)
 4016b1c:	80007116 	blt	r16,zero,4016ce4 <___vfiprintf_internal_r+0x9b0>
 4016b20:	00ffdfc4 	movi	r3,-129
 4016b24:	9d04b03a 	or	r2,r19,r20
 4016b28:	88e2703a 	and	r17,r17,r3
 4016b2c:	1000d126 	beq	r2,zero,4016e74 <___vfiprintf_internal_r+0xb40>
 4016b30:	a0023526 	beq	r20,zero,4017408 <___vfiprintf_internal_r+0x10d4>
 4016b34:	ddc01a04 	addi	r23,sp,104
 4016b38:	4039883a 	mov	fp,r8
 4016b3c:	9809883a 	mov	r4,r19
 4016b40:	a00b883a 	mov	r5,r20
 4016b44:	01800284 	movi	r6,10
 4016b48:	000f883a 	mov	r7,zero
 4016b4c:	40188600 	call	4018860 <__umoddi3>
 4016b50:	10800c04 	addi	r2,r2,48
 4016b54:	bdffffc4 	addi	r23,r23,-1
 4016b58:	9809883a 	mov	r4,r19
 4016b5c:	a00b883a 	mov	r5,r20
 4016b60:	b8800005 	stb	r2,0(r23)
 4016b64:	01800284 	movi	r6,10
 4016b68:	000f883a 	mov	r7,zero
 4016b6c:	40182640 	call	4018264 <__udivdi3>
 4016b70:	1027883a 	mov	r19,r2
 4016b74:	10c4b03a 	or	r2,r2,r3
 4016b78:	1829883a 	mov	r20,r3
 4016b7c:	103fef1e 	bne	r2,zero,4016b3c <__alt_data_end+0xfc016b3c>
 4016b80:	d9001e17 	ldw	r4,120(sp)
 4016b84:	e011883a 	mov	r8,fp
 4016b88:	25e9c83a 	sub	r20,r4,r23
 4016b8c:	003eec06 	br	4016740 <__alt_data_end+0xfc016740>
 4016b90:	d8802307 	ldb	r2,140(sp)
 4016b94:	1002361e 	bne	r2,zero,4017470 <___vfiprintf_internal_r+0x113c>
 4016b98:	00c00804 	movi	r3,32
 4016b9c:	d8c02305 	stb	r3,140(sp)
 4016ba0:	04c00044 	movi	r19,1
 4016ba4:	b0c00007 	ldb	r3,0(r22)
 4016ba8:	003e3f06 	br	40164a8 <__alt_data_end+0xfc0164a8>
 4016bac:	8c400054 	ori	r17,r17,1
 4016bb0:	b0c00007 	ldb	r3,0(r22)
 4016bb4:	003e3c06 	br	40164a8 <__alt_data_end+0xfc0164a8>
 4016bb8:	8c402014 	ori	r17,r17,128
 4016bbc:	b0c00007 	ldb	r3,0(r22)
 4016bc0:	003e3906 	br	40164a8 <__alt_data_end+0xfc0164a8>
 4016bc4:	dc002715 	stw	r16,156(sp)
 4016bc8:	d8002515 	stw	zero,148(sp)
 4016bcc:	1f3ff404 	addi	fp,r3,-48
 4016bd0:	0009883a 	mov	r4,zero
 4016bd4:	b021883a 	mov	r16,r22
 4016bd8:	01400284 	movi	r5,10
 4016bdc:	400d3680 	call	400d368 <__mulsi3>
 4016be0:	80c00007 	ldb	r3,0(r16)
 4016be4:	e089883a 	add	r4,fp,r2
 4016be8:	b5800044 	addi	r22,r22,1
 4016bec:	1f3ff404 	addi	fp,r3,-48
 4016bf0:	b021883a 	mov	r16,r22
 4016bf4:	af3ff82e 	bgeu	r21,fp,4016bd8 <__alt_data_end+0xfc016bd8>
 4016bf8:	d9002515 	stw	r4,148(sp)
 4016bfc:	dc002717 	ldw	r16,156(sp)
 4016c00:	003e2a06 	br	40164ac <__alt_data_end+0xfc0164ac>
 4016c04:	9cc03fcc 	andi	r19,r19,255
 4016c08:	b811883a 	mov	r8,r23
 4016c0c:	9802e91e 	bne	r19,zero,40177b4 <___vfiprintf_internal_r+0x1480>
 4016c10:	8c400414 	ori	r17,r17,16
 4016c14:	8880080c 	andi	r2,r17,32
 4016c18:	103fb81e 	bne	r2,zero,4016afc <__alt_data_end+0xfc016afc>
 4016c1c:	8880040c 	andi	r2,r17,16
 4016c20:	10022e26 	beq	r2,zero,40174dc <___vfiprintf_internal_r+0x11a8>
 4016c24:	d9402217 	ldw	r5,136(sp)
 4016c28:	2cc00017 	ldw	r19,0(r5)
 4016c2c:	29400104 	addi	r5,r5,4
 4016c30:	d9402215 	stw	r5,136(sp)
 4016c34:	9829d7fa 	srai	r20,r19,31
 4016c38:	a005883a 	mov	r2,r20
 4016c3c:	003fb506 	br	4016b14 <__alt_data_end+0xfc016b14>
 4016c40:	9cc03fcc 	andi	r19,r19,255
 4016c44:	b811883a 	mov	r8,r23
 4016c48:	9802fa1e 	bne	r19,zero,4017834 <___vfiprintf_internal_r+0x1500>
 4016c4c:	8c400414 	ori	r17,r17,16
 4016c50:	8880080c 	andi	r2,r17,32
 4016c54:	103f661e 	bne	r2,zero,40169f0 <__alt_data_end+0xfc0169f0>
 4016c58:	8880040c 	andi	r2,r17,16
 4016c5c:	10020626 	beq	r2,zero,4017478 <___vfiprintf_internal_r+0x1144>
 4016c60:	d9402217 	ldw	r5,136(sp)
 4016c64:	d8001d85 	stb	zero,118(sp)
 4016c68:	0029883a 	mov	r20,zero
 4016c6c:	28800104 	addi	r2,r5,4
 4016c70:	2cc00017 	ldw	r19,0(r5)
 4016c74:	80020816 	blt	r16,zero,4017498 <___vfiprintf_internal_r+0x1164>
 4016c78:	00ffdfc4 	movi	r3,-129
 4016c7c:	d8802215 	stw	r2,136(sp)
 4016c80:	88e2703a 	and	r17,r17,r3
 4016c84:	983f651e 	bne	r19,zero,4016a1c <__alt_data_end+0xfc016a1c>
 4016c88:	002b883a 	mov	r21,zero
 4016c8c:	8002cf26 	beq	r16,zero,40177cc <___vfiprintf_internal_r+0x1498>
 4016c90:	0027883a 	mov	r19,zero
 4016c94:	0029883a 	mov	r20,zero
 4016c98:	003f6106 	br	4016a20 <__alt_data_end+0xfc016a20>
 4016c9c:	9cc03fcc 	andi	r19,r19,255
 4016ca0:	b811883a 	mov	r8,r23
 4016ca4:	9802e01e 	bne	r19,zero,4017828 <___vfiprintf_internal_r+0x14f4>
 4016ca8:	8c400414 	ori	r17,r17,16
 4016cac:	8880080c 	andi	r2,r17,32
 4016cb0:	1000641e 	bne	r2,zero,4016e44 <___vfiprintf_internal_r+0xb10>
 4016cb4:	8880040c 	andi	r2,r17,16
 4016cb8:	1001c81e 	bne	r2,zero,40173dc <___vfiprintf_internal_r+0x10a8>
 4016cbc:	8880100c 	andi	r2,r17,64
 4016cc0:	d8001d85 	stb	zero,118(sp)
 4016cc4:	1002281e 	bne	r2,zero,4017568 <___vfiprintf_internal_r+0x1234>
 4016cc8:	d9002217 	ldw	r4,136(sp)
 4016ccc:	0029883a 	mov	r20,zero
 4016cd0:	20800104 	addi	r2,r4,4
 4016cd4:	24c00017 	ldw	r19,0(r4)
 4016cd8:	8001c60e 	bge	r16,zero,40173f4 <___vfiprintf_internal_r+0x10c0>
 4016cdc:	d8802215 	stw	r2,136(sp)
 4016ce0:	002b883a 	mov	r21,zero
 4016ce4:	9d04b03a 	or	r2,r19,r20
 4016ce8:	103f911e 	bne	r2,zero,4016b30 <__alt_data_end+0xfc016b30>
 4016cec:	00800044 	movi	r2,1
 4016cf0:	10803fcc 	andi	r2,r2,255
 4016cf4:	00c00044 	movi	r3,1
 4016cf8:	10c05f26 	beq	r2,r3,4016e78 <___vfiprintf_internal_r+0xb44>
 4016cfc:	00c00084 	movi	r3,2
 4016d00:	10ffe31e 	bne	r2,r3,4016c90 <__alt_data_end+0xfc016c90>
 4016d04:	0027883a 	mov	r19,zero
 4016d08:	0029883a 	mov	r20,zero
 4016d0c:	00015106 	br	4017254 <___vfiprintf_internal_r+0xf20>
 4016d10:	9cc03fcc 	andi	r19,r19,255
 4016d14:	b811883a 	mov	r8,r23
 4016d18:	9802c01e 	bne	r19,zero,401781c <___vfiprintf_internal_r+0x14e8>
 4016d1c:	014100b4 	movhi	r5,1026
 4016d20:	295c9d04 	addi	r5,r5,29300
 4016d24:	d9402615 	stw	r5,152(sp)
 4016d28:	8880080c 	andi	r2,r17,32
 4016d2c:	103f541e 	bne	r2,zero,4016a80 <__alt_data_end+0xfc016a80>
 4016d30:	8880040c 	andi	r2,r17,16
 4016d34:	1001f226 	beq	r2,zero,4017500 <___vfiprintf_internal_r+0x11cc>
 4016d38:	d9402217 	ldw	r5,136(sp)
 4016d3c:	0029883a 	mov	r20,zero
 4016d40:	2cc00017 	ldw	r19,0(r5)
 4016d44:	29400104 	addi	r5,r5,4
 4016d48:	d9402215 	stw	r5,136(sp)
 4016d4c:	003f5106 	br	4016a94 <__alt_data_end+0xfc016a94>
 4016d50:	d8c02217 	ldw	r3,136(sp)
 4016d54:	b811883a 	mov	r8,r23
 4016d58:	d8001d85 	stb	zero,118(sp)
 4016d5c:	1dc00017 	ldw	r23,0(r3)
 4016d60:	1f000104 	addi	fp,r3,4
 4016d64:	b8025926 	beq	r23,zero,40176cc <___vfiprintf_internal_r+0x1398>
 4016d68:	80023316 	blt	r16,zero,4017638 <___vfiprintf_internal_r+0x1304>
 4016d6c:	800d883a 	mov	r6,r16
 4016d70:	000b883a 	mov	r5,zero
 4016d74:	b809883a 	mov	r4,r23
 4016d78:	da002a15 	stw	r8,168(sp)
 4016d7c:	40146ac0 	call	40146ac <memchr>
 4016d80:	da002a17 	ldw	r8,168(sp)
 4016d84:	10026826 	beq	r2,zero,4017728 <___vfiprintf_internal_r+0x13f4>
 4016d88:	15e9c83a 	sub	r20,r2,r23
 4016d8c:	dd401d83 	ldbu	r21,118(sp)
 4016d90:	df002215 	stw	fp,136(sp)
 4016d94:	0021883a 	mov	r16,zero
 4016d98:	003e6906 	br	4016740 <__alt_data_end+0xfc016740>
 4016d9c:	9cc03fcc 	andi	r19,r19,255
 4016da0:	b811883a 	mov	r8,r23
 4016da4:	983fc126 	beq	r19,zero,4016cac <__alt_data_end+0xfc016cac>
 4016da8:	d8c02303 	ldbu	r3,140(sp)
 4016dac:	d8c01d85 	stb	r3,118(sp)
 4016db0:	003fbe06 	br	4016cac <__alt_data_end+0xfc016cac>
 4016db4:	d9002217 	ldw	r4,136(sp)
 4016db8:	d9402217 	ldw	r5,136(sp)
 4016dbc:	21000017 	ldw	r4,0(r4)
 4016dc0:	28800104 	addi	r2,r5,4
 4016dc4:	d9002515 	stw	r4,148(sp)
 4016dc8:	203e3d16 	blt	r4,zero,40166c0 <__alt_data_end+0xfc0166c0>
 4016dcc:	d8802215 	stw	r2,136(sp)
 4016dd0:	b0c00007 	ldb	r3,0(r22)
 4016dd4:	003db406 	br	40164a8 <__alt_data_end+0xfc0164a8>
 4016dd8:	00c00ac4 	movi	r3,43
 4016ddc:	d8c02305 	stb	r3,140(sp)
 4016de0:	04c00044 	movi	r19,1
 4016de4:	b0c00007 	ldb	r3,0(r22)
 4016de8:	003daf06 	br	40164a8 <__alt_data_end+0xfc0164a8>
 4016dec:	b0c00007 	ldb	r3,0(r22)
 4016df0:	01000a84 	movi	r4,42
 4016df4:	b4000044 	addi	r16,r22,1
 4016df8:	19025e26 	beq	r3,r4,4017774 <___vfiprintf_internal_r+0x1440>
 4016dfc:	1f3ff404 	addi	fp,r3,-48
 4016e00:	0009883a 	mov	r4,zero
 4016e04:	af025236 	bltu	r21,fp,4017750 <___vfiprintf_internal_r+0x141c>
 4016e08:	01400284 	movi	r5,10
 4016e0c:	400d3680 	call	400d368 <__mulsi3>
 4016e10:	80c00007 	ldb	r3,0(r16)
 4016e14:	1709883a 	add	r4,r2,fp
 4016e18:	85800044 	addi	r22,r16,1
 4016e1c:	1f3ff404 	addi	fp,r3,-48
 4016e20:	b021883a 	mov	r16,r22
 4016e24:	af3ff82e 	bgeu	r21,fp,4016e08 <__alt_data_end+0xfc016e08>
 4016e28:	2021883a 	mov	r16,r4
 4016e2c:	203d9f0e 	bge	r4,zero,40164ac <__alt_data_end+0xfc0164ac>
 4016e30:	043fffc4 	movi	r16,-1
 4016e34:	003d9d06 	br	40164ac <__alt_data_end+0xfc0164ac>
 4016e38:	8c401014 	ori	r17,r17,64
 4016e3c:	b0c00007 	ldb	r3,0(r22)
 4016e40:	003d9906 	br	40164a8 <__alt_data_end+0xfc0164a8>
 4016e44:	d9002217 	ldw	r4,136(sp)
 4016e48:	d8001d85 	stb	zero,118(sp)
 4016e4c:	20c00204 	addi	r3,r4,8
 4016e50:	24c00017 	ldw	r19,0(r4)
 4016e54:	25000117 	ldw	r20,4(r4)
 4016e58:	8001e716 	blt	r16,zero,40175f8 <___vfiprintf_internal_r+0x12c4>
 4016e5c:	013fdfc4 	movi	r4,-129
 4016e60:	9d04b03a 	or	r2,r19,r20
 4016e64:	d8c02215 	stw	r3,136(sp)
 4016e68:	8922703a 	and	r17,r17,r4
 4016e6c:	002b883a 	mov	r21,zero
 4016e70:	103f2f1e 	bne	r2,zero,4016b30 <__alt_data_end+0xfc016b30>
 4016e74:	803e2f26 	beq	r16,zero,4016734 <__alt_data_end+0xfc016734>
 4016e78:	0027883a 	mov	r19,zero
 4016e7c:	9cc00c04 	addi	r19,r19,48
 4016e80:	dcc019c5 	stb	r19,103(sp)
 4016e84:	dd002817 	ldw	r20,160(sp)
 4016e88:	ddc019c4 	addi	r23,sp,103
 4016e8c:	003e2c06 	br	4016740 <__alt_data_end+0xfc016740>
 4016e90:	9cc03fcc 	andi	r19,r19,255
 4016e94:	b811883a 	mov	r8,r23
 4016e98:	9802571e 	bne	r19,zero,40177f8 <___vfiprintf_internal_r+0x14c4>
 4016e9c:	18005726 	beq	r3,zero,4016ffc <___vfiprintf_internal_r+0xcc8>
 4016ea0:	04c00044 	movi	r19,1
 4016ea4:	d8c01005 	stb	r3,64(sp)
 4016ea8:	d8001d85 	stb	zero,118(sp)
 4016eac:	9829883a 	mov	r20,r19
 4016eb0:	ddc01004 	addi	r23,sp,64
 4016eb4:	003f0a06 	br	4016ae0 <__alt_data_end+0xfc016ae0>
 4016eb8:	d9402017 	ldw	r5,128(sp)
 4016ebc:	d9002117 	ldw	r4,132(sp)
 4016ec0:	d9801a04 	addi	r6,sp,104
 4016ec4:	da802a15 	stw	r10,168(sp)
 4016ec8:	40162200 	call	4016220 <__sprint_r.part.0>
 4016ecc:	da802a17 	ldw	r10,168(sp)
 4016ed0:	1000501e 	bne	r2,zero,4017014 <___vfiprintf_internal_r+0xce0>
 4016ed4:	d9801b17 	ldw	r6,108(sp)
 4016ed8:	d8801c17 	ldw	r2,112(sp)
 4016edc:	d811883a 	mov	r8,sp
 4016ee0:	31000044 	addi	r4,r6,1
 4016ee4:	003e3606 	br	40167c0 <__alt_data_end+0xfc0167c0>
 4016ee8:	d9001b17 	ldw	r4,108(sp)
 4016eec:	d8801c17 	ldw	r2,112(sp)
 4016ef0:	21400044 	addi	r5,r4,1
 4016ef4:	d9801d87 	ldb	r6,118(sp)
 4016ef8:	303e5226 	beq	r6,zero,4016844 <__alt_data_end+0xfc016844>
 4016efc:	01800044 	movi	r6,1
 4016f00:	d9001d84 	addi	r4,sp,118
 4016f04:	1185883a 	add	r2,r2,r6
 4016f08:	41000015 	stw	r4,0(r8)
 4016f0c:	41800115 	stw	r6,4(r8)
 4016f10:	d8801c15 	stw	r2,112(sp)
 4016f14:	d9401b15 	stw	r5,108(sp)
 4016f18:	010001c4 	movi	r4,7
 4016f1c:	2140b00e 	bge	r4,r5,40171e0 <___vfiprintf_internal_r+0xeac>
 4016f20:	1000f61e 	bne	r2,zero,40172fc <___vfiprintf_internal_r+0xfc8>
 4016f24:	3800b31e 	bne	r7,zero,40171f4 <___vfiprintf_internal_r+0xec0>
 4016f28:	0009883a 	mov	r4,zero
 4016f2c:	300b883a 	mov	r5,r6
 4016f30:	d811883a 	mov	r8,sp
 4016f34:	01802004 	movi	r6,128
 4016f38:	19be5226 	beq	r3,r6,4016884 <__alt_data_end+0xfc016884>
 4016f3c:	8521c83a 	sub	r16,r16,r20
 4016f40:	043e790e 	bge	zero,r16,4016928 <__alt_data_end+0xfc016928>
 4016f44:	05400404 	movi	r21,16
 4016f48:	ac01b00e 	bge	r21,r16,401760c <___vfiprintf_internal_r+0x12d8>
 4016f4c:	014100b4 	movhi	r5,1026
 4016f50:	295d0204 	addi	r5,r5,29704
 4016f54:	d9402315 	stw	r5,140(sp)
 4016f58:	070001c4 	movi	fp,7
 4016f5c:	00000506 	br	4016f74 <___vfiprintf_internal_r+0xc40>
 4016f60:	21400084 	addi	r5,r4,2
 4016f64:	42000204 	addi	r8,r8,8
 4016f68:	1809883a 	mov	r4,r3
 4016f6c:	843ffc04 	addi	r16,r16,-16
 4016f70:	ac000d0e 	bge	r21,r16,4016fa8 <___vfiprintf_internal_r+0xc74>
 4016f74:	10800404 	addi	r2,r2,16
 4016f78:	20c00044 	addi	r3,r4,1
 4016f7c:	44800015 	stw	r18,0(r8)
 4016f80:	45400115 	stw	r21,4(r8)
 4016f84:	d8801c15 	stw	r2,112(sp)
 4016f88:	d8c01b15 	stw	r3,108(sp)
 4016f8c:	e0fff40e 	bge	fp,r3,4016f60 <__alt_data_end+0xfc016f60>
 4016f90:	1000101e 	bne	r2,zero,4016fd4 <___vfiprintf_internal_r+0xca0>
 4016f94:	843ffc04 	addi	r16,r16,-16
 4016f98:	01400044 	movi	r5,1
 4016f9c:	0009883a 	mov	r4,zero
 4016fa0:	d811883a 	mov	r8,sp
 4016fa4:	ac3ff316 	blt	r21,r16,4016f74 <__alt_data_end+0xfc016f74>
 4016fa8:	d8c02317 	ldw	r3,140(sp)
 4016fac:	1405883a 	add	r2,r2,r16
 4016fb0:	44000115 	stw	r16,4(r8)
 4016fb4:	40c00015 	stw	r3,0(r8)
 4016fb8:	d8801c15 	stw	r2,112(sp)
 4016fbc:	d9401b15 	stw	r5,108(sp)
 4016fc0:	00c001c4 	movi	r3,7
 4016fc4:	19401916 	blt	r3,r5,401702c <___vfiprintf_internal_r+0xcf8>
 4016fc8:	42000204 	addi	r8,r8,8
 4016fcc:	29400044 	addi	r5,r5,1
 4016fd0:	003e5506 	br	4016928 <__alt_data_end+0xfc016928>
 4016fd4:	d9402017 	ldw	r5,128(sp)
 4016fd8:	d9002117 	ldw	r4,132(sp)
 4016fdc:	d9801a04 	addi	r6,sp,104
 4016fe0:	40162200 	call	4016220 <__sprint_r.part.0>
 4016fe4:	10000b1e 	bne	r2,zero,4017014 <___vfiprintf_internal_r+0xce0>
 4016fe8:	d9001b17 	ldw	r4,108(sp)
 4016fec:	d8801c17 	ldw	r2,112(sp)
 4016ff0:	d811883a 	mov	r8,sp
 4016ff4:	21400044 	addi	r5,r4,1
 4016ff8:	003fdc06 	br	4016f6c <__alt_data_end+0xfc016f6c>
 4016ffc:	d8801c17 	ldw	r2,112(sp)
 4017000:	10000426 	beq	r2,zero,4017014 <___vfiprintf_internal_r+0xce0>
 4017004:	d9402017 	ldw	r5,128(sp)
 4017008:	d9002117 	ldw	r4,132(sp)
 401700c:	d9801a04 	addi	r6,sp,104
 4017010:	40162200 	call	4016220 <__sprint_r.part.0>
 4017014:	d9402017 	ldw	r5,128(sp)
 4017018:	2880030b 	ldhu	r2,12(r5)
 401701c:	1080100c 	andi	r2,r2,64
 4017020:	10014d1e 	bne	r2,zero,4017558 <___vfiprintf_internal_r+0x1224>
 4017024:	d8802417 	ldw	r2,144(sp)
 4017028:	003d9706 	br	4016688 <__alt_data_end+0xfc016688>
 401702c:	1000d21e 	bne	r2,zero,4017378 <___vfiprintf_internal_r+0x1044>
 4017030:	00c00044 	movi	r3,1
 4017034:	a005883a 	mov	r2,r20
 4017038:	ddc00015 	stw	r23,0(sp)
 401703c:	dd000115 	stw	r20,4(sp)
 4017040:	dd001c15 	stw	r20,112(sp)
 4017044:	d8c01b15 	stw	r3,108(sp)
 4017048:	d811883a 	mov	r8,sp
 401704c:	42000204 	addi	r8,r8,8
 4017050:	8c40010c 	andi	r17,r17,4
 4017054:	88004026 	beq	r17,zero,4017158 <___vfiprintf_internal_r+0xe24>
 4017058:	d9002517 	ldw	r4,148(sp)
 401705c:	24e3c83a 	sub	r17,r4,r19
 4017060:	04403d0e 	bge	zero,r17,4017158 <___vfiprintf_internal_r+0xe24>
 4017064:	04000404 	movi	r16,16
 4017068:	8441a90e 	bge	r16,r17,4017710 <___vfiprintf_internal_r+0x13dc>
 401706c:	00c100b4 	movhi	r3,1026
 4017070:	18dd0604 	addi	r3,r3,29720
 4017074:	d9001b17 	ldw	r4,108(sp)
 4017078:	d8c02315 	stw	r3,140(sp)
 401707c:	050001c4 	movi	r20,7
 4017080:	dd402117 	ldw	r21,132(sp)
 4017084:	ddc02017 	ldw	r23,128(sp)
 4017088:	00000506 	br	40170a0 <___vfiprintf_internal_r+0xd6c>
 401708c:	21400084 	addi	r5,r4,2
 4017090:	42000204 	addi	r8,r8,8
 4017094:	1809883a 	mov	r4,r3
 4017098:	8c7ffc04 	addi	r17,r17,-16
 401709c:	84400f0e 	bge	r16,r17,40170dc <___vfiprintf_internal_r+0xda8>
 40170a0:	014100b4 	movhi	r5,1026
 40170a4:	10800404 	addi	r2,r2,16
 40170a8:	20c00044 	addi	r3,r4,1
 40170ac:	295d0604 	addi	r5,r5,29720
 40170b0:	41400015 	stw	r5,0(r8)
 40170b4:	44000115 	stw	r16,4(r8)
 40170b8:	d8801c15 	stw	r2,112(sp)
 40170bc:	d8c01b15 	stw	r3,108(sp)
 40170c0:	a0fff20e 	bge	r20,r3,401708c <__alt_data_end+0xfc01708c>
 40170c4:	1000141e 	bne	r2,zero,4017118 <___vfiprintf_internal_r+0xde4>
 40170c8:	8c7ffc04 	addi	r17,r17,-16
 40170cc:	01400044 	movi	r5,1
 40170d0:	0009883a 	mov	r4,zero
 40170d4:	d811883a 	mov	r8,sp
 40170d8:	847ff116 	blt	r16,r17,40170a0 <__alt_data_end+0xfc0170a0>
 40170dc:	d8c02317 	ldw	r3,140(sp)
 40170e0:	1445883a 	add	r2,r2,r17
 40170e4:	44400115 	stw	r17,4(r8)
 40170e8:	40c00015 	stw	r3,0(r8)
 40170ec:	d8801c15 	stw	r2,112(sp)
 40170f0:	d9401b15 	stw	r5,108(sp)
 40170f4:	00c001c4 	movi	r3,7
 40170f8:	1940170e 	bge	r3,r5,4017158 <___vfiprintf_internal_r+0xe24>
 40170fc:	1000101e 	bne	r2,zero,4017140 <___vfiprintf_internal_r+0xe0c>
 4017100:	d8802517 	ldw	r2,148(sp)
 4017104:	14c11616 	blt	r2,r19,4017560 <___vfiprintf_internal_r+0x122c>
 4017108:	d9002417 	ldw	r4,144(sp)
 401710c:	2089883a 	add	r4,r4,r2
 4017110:	d9002415 	stw	r4,144(sp)
 4017114:	003e1806 	br	4016978 <__alt_data_end+0xfc016978>
 4017118:	d9801a04 	addi	r6,sp,104
 401711c:	b80b883a 	mov	r5,r23
 4017120:	a809883a 	mov	r4,r21
 4017124:	40162200 	call	4016220 <__sprint_r.part.0>
 4017128:	103fba1e 	bne	r2,zero,4017014 <__alt_data_end+0xfc017014>
 401712c:	d9001b17 	ldw	r4,108(sp)
 4017130:	d8801c17 	ldw	r2,112(sp)
 4017134:	d811883a 	mov	r8,sp
 4017138:	21400044 	addi	r5,r4,1
 401713c:	003fd606 	br	4017098 <__alt_data_end+0xfc017098>
 4017140:	d9402017 	ldw	r5,128(sp)
 4017144:	d9002117 	ldw	r4,132(sp)
 4017148:	d9801a04 	addi	r6,sp,104
 401714c:	40162200 	call	4016220 <__sprint_r.part.0>
 4017150:	103fb01e 	bne	r2,zero,4017014 <__alt_data_end+0xfc017014>
 4017154:	d8801c17 	ldw	r2,112(sp)
 4017158:	d8c02517 	ldw	r3,148(sp)
 401715c:	1cc0010e 	bge	r3,r19,4017164 <___vfiprintf_internal_r+0xe30>
 4017160:	9807883a 	mov	r3,r19
 4017164:	d9002417 	ldw	r4,144(sp)
 4017168:	20c9883a 	add	r4,r4,r3
 401716c:	d9002415 	stw	r4,144(sp)
 4017170:	103e0126 	beq	r2,zero,4016978 <__alt_data_end+0xfc016978>
 4017174:	d9402017 	ldw	r5,128(sp)
 4017178:	d9002117 	ldw	r4,132(sp)
 401717c:	d9801a04 	addi	r6,sp,104
 4017180:	40162200 	call	4016220 <__sprint_r.part.0>
 4017184:	103dfc26 	beq	r2,zero,4016978 <__alt_data_end+0xfc016978>
 4017188:	003fa206 	br	4017014 <__alt_data_end+0xfc017014>
 401718c:	d9402017 	ldw	r5,128(sp)
 4017190:	d9002117 	ldw	r4,132(sp)
 4017194:	d9801a04 	addi	r6,sp,104
 4017198:	d9c02b15 	stw	r7,172(sp)
 401719c:	40162200 	call	4016220 <__sprint_r.part.0>
 40171a0:	d9c02b17 	ldw	r7,172(sp)
 40171a4:	103f9b1e 	bne	r2,zero,4017014 <__alt_data_end+0xfc017014>
 40171a8:	d9001b17 	ldw	r4,108(sp)
 40171ac:	d8801c17 	ldw	r2,112(sp)
 40171b0:	d811883a 	mov	r8,sp
 40171b4:	21800044 	addi	r6,r4,1
 40171b8:	003dbf06 	br	40168b8 <__alt_data_end+0xfc0168b8>
 40171bc:	1000d81e 	bne	r2,zero,4017520 <___vfiprintf_internal_r+0x11ec>
 40171c0:	d9001d87 	ldb	r4,118(sp)
 40171c4:	20000a26 	beq	r4,zero,40171f0 <___vfiprintf_internal_r+0xebc>
 40171c8:	00800044 	movi	r2,1
 40171cc:	d9001d84 	addi	r4,sp,118
 40171d0:	100b883a 	mov	r5,r2
 40171d4:	d9000015 	stw	r4,0(sp)
 40171d8:	d8800115 	stw	r2,4(sp)
 40171dc:	d811883a 	mov	r8,sp
 40171e0:	2809883a 	mov	r4,r5
 40171e4:	42000204 	addi	r8,r8,8
 40171e8:	29400044 	addi	r5,r5,1
 40171ec:	003d9506 	br	4016844 <__alt_data_end+0xfc016844>
 40171f0:	3800fd26 	beq	r7,zero,40175e8 <___vfiprintf_internal_r+0x12b4>
 40171f4:	00800084 	movi	r2,2
 40171f8:	d9001d04 	addi	r4,sp,116
 40171fc:	d9000015 	stw	r4,0(sp)
 4017200:	d8800115 	stw	r2,4(sp)
 4017204:	01400044 	movi	r5,1
 4017208:	d811883a 	mov	r8,sp
 401720c:	2809883a 	mov	r4,r5
 4017210:	42000204 	addi	r8,r8,8
 4017214:	29400044 	addi	r5,r5,1
 4017218:	003f4606 	br	4016f34 <__alt_data_end+0xfc016f34>
 401721c:	d8802517 	ldw	r2,148(sp)
 4017220:	14c0010e 	bge	r2,r19,4017228 <___vfiprintf_internal_r+0xef4>
 4017224:	9805883a 	mov	r2,r19
 4017228:	d9402417 	ldw	r5,144(sp)
 401722c:	288b883a 	add	r5,r5,r2
 4017230:	d9402415 	stw	r5,144(sp)
 4017234:	003dd006 	br	4016978 <__alt_data_end+0xfc016978>
 4017238:	d8001d85 	stb	zero,118(sp)
 401723c:	80005d16 	blt	r16,zero,40173b4 <___vfiprintf_internal_r+0x1080>
 4017240:	00ffdfc4 	movi	r3,-129
 4017244:	9d04b03a 	or	r2,r19,r20
 4017248:	88e2703a 	and	r17,r17,r3
 401724c:	103d3726 	beq	r2,zero,401672c <__alt_data_end+0xfc01672c>
 4017250:	002b883a 	mov	r21,zero
 4017254:	d9002617 	ldw	r4,152(sp)
 4017258:	ddc01a04 	addi	r23,sp,104
 401725c:	988003cc 	andi	r2,r19,15
 4017260:	a006973a 	slli	r3,r20,28
 4017264:	2085883a 	add	r2,r4,r2
 4017268:	9826d13a 	srli	r19,r19,4
 401726c:	10800003 	ldbu	r2,0(r2)
 4017270:	a028d13a 	srli	r20,r20,4
 4017274:	bdffffc4 	addi	r23,r23,-1
 4017278:	1ce6b03a 	or	r19,r3,r19
 401727c:	b8800005 	stb	r2,0(r23)
 4017280:	9d04b03a 	or	r2,r19,r20
 4017284:	103ff51e 	bne	r2,zero,401725c <__alt_data_end+0xfc01725c>
 4017288:	d8801e17 	ldw	r2,120(sp)
 401728c:	15e9c83a 	sub	r20,r2,r23
 4017290:	003d2b06 	br	4016740 <__alt_data_end+0xfc016740>
 4017294:	d9402017 	ldw	r5,128(sp)
 4017298:	d9002117 	ldw	r4,132(sp)
 401729c:	d9801a04 	addi	r6,sp,104
 40172a0:	40162200 	call	4016220 <__sprint_r.part.0>
 40172a4:	103f5b1e 	bne	r2,zero,4017014 <__alt_data_end+0xfc017014>
 40172a8:	d8801c17 	ldw	r2,112(sp)
 40172ac:	d811883a 	mov	r8,sp
 40172b0:	003f6706 	br	4017050 <__alt_data_end+0xfc017050>
 40172b4:	d9402017 	ldw	r5,128(sp)
 40172b8:	d9002117 	ldw	r4,132(sp)
 40172bc:	d9801a04 	addi	r6,sp,104
 40172c0:	40162200 	call	4016220 <__sprint_r.part.0>
 40172c4:	103f531e 	bne	r2,zero,4017014 <__alt_data_end+0xfc017014>
 40172c8:	d811883a 	mov	r8,sp
 40172cc:	003cd906 	br	4016634 <__alt_data_end+0xfc016634>
 40172d0:	10803fcc 	andi	r2,r2,255
 40172d4:	1080201c 	xori	r2,r2,128
 40172d8:	10bfe004 	addi	r2,r2,-128
 40172dc:	00c00c04 	movi	r3,48
 40172e0:	10ffe926 	beq	r2,r3,4017288 <__alt_data_end+0xfc017288>
 40172e4:	b8ffffc5 	stb	r3,-1(r23)
 40172e8:	d8c01e17 	ldw	r3,120(sp)
 40172ec:	b8bfffc4 	addi	r2,r23,-1
 40172f0:	102f883a 	mov	r23,r2
 40172f4:	18a9c83a 	sub	r20,r3,r2
 40172f8:	003d1106 	br	4016740 <__alt_data_end+0xfc016740>
 40172fc:	d9402017 	ldw	r5,128(sp)
 4017300:	d9002117 	ldw	r4,132(sp)
 4017304:	d9801a04 	addi	r6,sp,104
 4017308:	d8c02a15 	stw	r3,168(sp)
 401730c:	d9c02b15 	stw	r7,172(sp)
 4017310:	40162200 	call	4016220 <__sprint_r.part.0>
 4017314:	d8c02a17 	ldw	r3,168(sp)
 4017318:	d9c02b17 	ldw	r7,172(sp)
 401731c:	103f3d1e 	bne	r2,zero,4017014 <__alt_data_end+0xfc017014>
 4017320:	d9001b17 	ldw	r4,108(sp)
 4017324:	d8801c17 	ldw	r2,112(sp)
 4017328:	d811883a 	mov	r8,sp
 401732c:	21400044 	addi	r5,r4,1
 4017330:	003d4406 	br	4016844 <__alt_data_end+0xfc016844>
 4017334:	d9402017 	ldw	r5,128(sp)
 4017338:	d9002117 	ldw	r4,132(sp)
 401733c:	d9801a04 	addi	r6,sp,104
 4017340:	d8c02a15 	stw	r3,168(sp)
 4017344:	40162200 	call	4016220 <__sprint_r.part.0>
 4017348:	d8c02a17 	ldw	r3,168(sp)
 401734c:	103f311e 	bne	r2,zero,4017014 <__alt_data_end+0xfc017014>
 4017350:	d9001b17 	ldw	r4,108(sp)
 4017354:	d8801c17 	ldw	r2,112(sp)
 4017358:	d811883a 	mov	r8,sp
 401735c:	21400044 	addi	r5,r4,1
 4017360:	003ef406 	br	4016f34 <__alt_data_end+0xfc016f34>
 4017364:	1000bd1e 	bne	r2,zero,401765c <___vfiprintf_internal_r+0x1328>
 4017368:	01400044 	movi	r5,1
 401736c:	0009883a 	mov	r4,zero
 4017370:	d811883a 	mov	r8,sp
 4017374:	003ef106 	br	4016f3c <__alt_data_end+0xfc016f3c>
 4017378:	d9402017 	ldw	r5,128(sp)
 401737c:	d9002117 	ldw	r4,132(sp)
 4017380:	d9801a04 	addi	r6,sp,104
 4017384:	40162200 	call	4016220 <__sprint_r.part.0>
 4017388:	103f221e 	bne	r2,zero,4017014 <__alt_data_end+0xfc017014>
 401738c:	d9401b17 	ldw	r5,108(sp)
 4017390:	d8801c17 	ldw	r2,112(sp)
 4017394:	d811883a 	mov	r8,sp
 4017398:	29400044 	addi	r5,r5,1
 401739c:	003d6206 	br	4016928 <__alt_data_end+0xfc016928>
 40173a0:	014100b4 	movhi	r5,1026
 40173a4:	295ca204 	addi	r5,r5,29320
 40173a8:	d9402615 	stw	r5,152(sp)
 40173ac:	d8c02215 	stw	r3,136(sp)
 40173b0:	1023883a 	mov	r17,r2
 40173b4:	9d04b03a 	or	r2,r19,r20
 40173b8:	103fa51e 	bne	r2,zero,4017250 <__alt_data_end+0xfc017250>
 40173bc:	002b883a 	mov	r21,zero
 40173c0:	00800084 	movi	r2,2
 40173c4:	003e4a06 	br	4016cf0 <__alt_data_end+0xfc016cf0>
 40173c8:	014100b4 	movhi	r5,1026
 40173cc:	295ca204 	addi	r5,r5,29320
 40173d0:	002b883a 	mov	r21,zero
 40173d4:	d9402615 	stw	r5,152(sp)
 40173d8:	003f9e06 	br	4017254 <__alt_data_end+0xfc017254>
 40173dc:	d9402217 	ldw	r5,136(sp)
 40173e0:	d8001d85 	stb	zero,118(sp)
 40173e4:	0029883a 	mov	r20,zero
 40173e8:	28800104 	addi	r2,r5,4
 40173ec:	2cc00017 	ldw	r19,0(r5)
 40173f0:	803e3a16 	blt	r16,zero,4016cdc <__alt_data_end+0xfc016cdc>
 40173f4:	00ffdfc4 	movi	r3,-129
 40173f8:	d8802215 	stw	r2,136(sp)
 40173fc:	88e2703a 	and	r17,r17,r3
 4017400:	002b883a 	mov	r21,zero
 4017404:	983e9b26 	beq	r19,zero,4016e74 <__alt_data_end+0xfc016e74>
 4017408:	00800244 	movi	r2,9
 401740c:	14fdc936 	bltu	r2,r19,4016b34 <__alt_data_end+0xfc016b34>
 4017410:	003e9a06 	br	4016e7c <__alt_data_end+0xfc016e7c>
 4017414:	00800c04 	movi	r2,48
 4017418:	d8c01d45 	stb	r3,117(sp)
 401741c:	d8801d05 	stb	r2,116(sp)
 4017420:	d8001d85 	stb	zero,118(sp)
 4017424:	88c00094 	ori	r3,r17,2
 4017428:	80009c16 	blt	r16,zero,401769c <___vfiprintf_internal_r+0x1368>
 401742c:	00bfdfc4 	movi	r2,-129
 4017430:	88a2703a 	and	r17,r17,r2
 4017434:	8c400094 	ori	r17,r17,2
 4017438:	002b883a 	mov	r21,zero
 401743c:	003f8506 	br	4017254 <__alt_data_end+0xfc017254>
 4017440:	b029883a 	mov	r20,r22
 4017444:	003c0b06 	br	4016474 <__alt_data_end+0xfc016474>
 4017448:	04e7c83a 	sub	r19,zero,r19
 401744c:	05400b44 	movi	r21,45
 4017450:	9804c03a 	cmpne	r2,r19,zero
 4017454:	0529c83a 	sub	r20,zero,r20
 4017458:	dd401d85 	stb	r21,118(sp)
 401745c:	a0a9c83a 	sub	r20,r20,r2
 4017460:	80009716 	blt	r16,zero,40176c0 <___vfiprintf_internal_r+0x138c>
 4017464:	00bfdfc4 	movi	r2,-129
 4017468:	88a2703a 	and	r17,r17,r2
 401746c:	003db006 	br	4016b30 <__alt_data_end+0xfc016b30>
 4017470:	b0c00007 	ldb	r3,0(r22)
 4017474:	003c0c06 	br	40164a8 <__alt_data_end+0xfc0164a8>
 4017478:	8880100c 	andi	r2,r17,64
 401747c:	d8001d85 	stb	zero,118(sp)
 4017480:	1000461e 	bne	r2,zero,401759c <___vfiprintf_internal_r+0x1268>
 4017484:	d9002217 	ldw	r4,136(sp)
 4017488:	0029883a 	mov	r20,zero
 401748c:	20800104 	addi	r2,r4,4
 4017490:	24c00017 	ldw	r19,0(r4)
 4017494:	803df80e 	bge	r16,zero,4016c78 <__alt_data_end+0xfc016c78>
 4017498:	9d06b03a 	or	r3,r19,r20
 401749c:	d8802215 	stw	r2,136(sp)
 40174a0:	183d5e1e 	bne	r3,zero,4016a1c <__alt_data_end+0xfc016a1c>
 40174a4:	002b883a 	mov	r21,zero
 40174a8:	0005883a 	mov	r2,zero
 40174ac:	003e1006 	br	4016cf0 <__alt_data_end+0xfc016cf0>
 40174b0:	8880040c 	andi	r2,r17,16
 40174b4:	1000321e 	bne	r2,zero,4017580 <___vfiprintf_internal_r+0x124c>
 40174b8:	8c40100c 	andi	r17,r17,64
 40174bc:	88008d26 	beq	r17,zero,40176f4 <___vfiprintf_internal_r+0x13c0>
 40174c0:	d9402217 	ldw	r5,136(sp)
 40174c4:	d8c02417 	ldw	r3,144(sp)
 40174c8:	28800017 	ldw	r2,0(r5)
 40174cc:	29400104 	addi	r5,r5,4
 40174d0:	d9402215 	stw	r5,136(sp)
 40174d4:	10c0000d 	sth	r3,0(r2)
 40174d8:	003bca06 	br	4016404 <__alt_data_end+0xfc016404>
 40174dc:	8880100c 	andi	r2,r17,64
 40174e0:	10003a26 	beq	r2,zero,40175cc <___vfiprintf_internal_r+0x1298>
 40174e4:	d8802217 	ldw	r2,136(sp)
 40174e8:	14c0000f 	ldh	r19,0(r2)
 40174ec:	10800104 	addi	r2,r2,4
 40174f0:	d8802215 	stw	r2,136(sp)
 40174f4:	9829d7fa 	srai	r20,r19,31
 40174f8:	a005883a 	mov	r2,r20
 40174fc:	003d8506 	br	4016b14 <__alt_data_end+0xfc016b14>
 4017500:	8880100c 	andi	r2,r17,64
 4017504:	10002b26 	beq	r2,zero,40175b4 <___vfiprintf_internal_r+0x1280>
 4017508:	d8802217 	ldw	r2,136(sp)
 401750c:	0029883a 	mov	r20,zero
 4017510:	14c0000b 	ldhu	r19,0(r2)
 4017514:	10800104 	addi	r2,r2,4
 4017518:	d8802215 	stw	r2,136(sp)
 401751c:	003d5d06 	br	4016a94 <__alt_data_end+0xfc016a94>
 4017520:	d9402017 	ldw	r5,128(sp)
 4017524:	d9002117 	ldw	r4,132(sp)
 4017528:	d9801a04 	addi	r6,sp,104
 401752c:	d8c02a15 	stw	r3,168(sp)
 4017530:	d9c02b15 	stw	r7,172(sp)
 4017534:	40162200 	call	4016220 <__sprint_r.part.0>
 4017538:	d8c02a17 	ldw	r3,168(sp)
 401753c:	d9c02b17 	ldw	r7,172(sp)
 4017540:	103eb41e 	bne	r2,zero,4017014 <__alt_data_end+0xfc017014>
 4017544:	d9001b17 	ldw	r4,108(sp)
 4017548:	d8801c17 	ldw	r2,112(sp)
 401754c:	d811883a 	mov	r8,sp
 4017550:	21400044 	addi	r5,r4,1
 4017554:	003e6706 	br	4016ef4 <__alt_data_end+0xfc016ef4>
 4017558:	00bfffc4 	movi	r2,-1
 401755c:	003c4a06 	br	4016688 <__alt_data_end+0xfc016688>
 4017560:	9805883a 	mov	r2,r19
 4017564:	003ee806 	br	4017108 <__alt_data_end+0xfc017108>
 4017568:	d8c02217 	ldw	r3,136(sp)
 401756c:	0029883a 	mov	r20,zero
 4017570:	18800104 	addi	r2,r3,4
 4017574:	1cc0000b 	ldhu	r19,0(r3)
 4017578:	803f9e0e 	bge	r16,zero,40173f4 <__alt_data_end+0xfc0173f4>
 401757c:	003dd706 	br	4016cdc <__alt_data_end+0xfc016cdc>
 4017580:	d8c02217 	ldw	r3,136(sp)
 4017584:	d9002417 	ldw	r4,144(sp)
 4017588:	18800017 	ldw	r2,0(r3)
 401758c:	18c00104 	addi	r3,r3,4
 4017590:	d8c02215 	stw	r3,136(sp)
 4017594:	11000015 	stw	r4,0(r2)
 4017598:	003b9a06 	br	4016404 <__alt_data_end+0xfc016404>
 401759c:	d8c02217 	ldw	r3,136(sp)
 40175a0:	0029883a 	mov	r20,zero
 40175a4:	18800104 	addi	r2,r3,4
 40175a8:	1cc0000b 	ldhu	r19,0(r3)
 40175ac:	803db20e 	bge	r16,zero,4016c78 <__alt_data_end+0xfc016c78>
 40175b0:	003fb906 	br	4017498 <__alt_data_end+0xfc017498>
 40175b4:	d9002217 	ldw	r4,136(sp)
 40175b8:	0029883a 	mov	r20,zero
 40175bc:	24c00017 	ldw	r19,0(r4)
 40175c0:	21000104 	addi	r4,r4,4
 40175c4:	d9002215 	stw	r4,136(sp)
 40175c8:	003d3206 	br	4016a94 <__alt_data_end+0xfc016a94>
 40175cc:	d8c02217 	ldw	r3,136(sp)
 40175d0:	1cc00017 	ldw	r19,0(r3)
 40175d4:	18c00104 	addi	r3,r3,4
 40175d8:	d8c02215 	stw	r3,136(sp)
 40175dc:	9829d7fa 	srai	r20,r19,31
 40175e0:	a005883a 	mov	r2,r20
 40175e4:	003d4b06 	br	4016b14 <__alt_data_end+0xfc016b14>
 40175e8:	0009883a 	mov	r4,zero
 40175ec:	01400044 	movi	r5,1
 40175f0:	d811883a 	mov	r8,sp
 40175f4:	003e4f06 	br	4016f34 <__alt_data_end+0xfc016f34>
 40175f8:	d8c02215 	stw	r3,136(sp)
 40175fc:	002b883a 	mov	r21,zero
 4017600:	003db806 	br	4016ce4 <__alt_data_end+0xfc016ce4>
 4017604:	d811883a 	mov	r8,sp
 4017608:	003e9606 	br	4017064 <__alt_data_end+0xfc017064>
 401760c:	010100b4 	movhi	r4,1026
 4017610:	211d0204 	addi	r4,r4,29704
 4017614:	d9002315 	stw	r4,140(sp)
 4017618:	003e6306 	br	4016fa8 <__alt_data_end+0xfc016fa8>
 401761c:	b0c00043 	ldbu	r3,1(r22)
 4017620:	8c400814 	ori	r17,r17,32
 4017624:	b5800044 	addi	r22,r22,1
 4017628:	18c03fcc 	andi	r3,r3,255
 401762c:	18c0201c 	xori	r3,r3,128
 4017630:	18ffe004 	addi	r3,r3,-128
 4017634:	003b9c06 	br	40164a8 <__alt_data_end+0xfc0164a8>
 4017638:	b809883a 	mov	r4,r23
 401763c:	da002a15 	stw	r8,168(sp)
 4017640:	400f4e00 	call	400f4e0 <strlen>
 4017644:	1029883a 	mov	r20,r2
 4017648:	dd401d83 	ldbu	r21,118(sp)
 401764c:	df002215 	stw	fp,136(sp)
 4017650:	0021883a 	mov	r16,zero
 4017654:	da002a17 	ldw	r8,168(sp)
 4017658:	003c3906 	br	4016740 <__alt_data_end+0xfc016740>
 401765c:	d9402017 	ldw	r5,128(sp)
 4017660:	d9002117 	ldw	r4,132(sp)
 4017664:	d9801a04 	addi	r6,sp,104
 4017668:	40162200 	call	4016220 <__sprint_r.part.0>
 401766c:	103e691e 	bne	r2,zero,4017014 <__alt_data_end+0xfc017014>
 4017670:	d9001b17 	ldw	r4,108(sp)
 4017674:	d8801c17 	ldw	r2,112(sp)
 4017678:	d811883a 	mov	r8,sp
 401767c:	21400044 	addi	r5,r4,1
 4017680:	003e2e06 	br	4016f3c <__alt_data_end+0xfc016f3c>
 4017684:	010100b4 	movhi	r4,1026
 4017688:	211d0604 	addi	r4,r4,29720
 401768c:	d9002315 	stw	r4,140(sp)
 4017690:	d9001b17 	ldw	r4,108(sp)
 4017694:	21000044 	addi	r4,r4,1
 4017698:	003c5e06 	br	4016814 <__alt_data_end+0xfc016814>
 401769c:	002b883a 	mov	r21,zero
 40176a0:	00800084 	movi	r2,2
 40176a4:	10803fcc 	andi	r2,r2,255
 40176a8:	01000044 	movi	r4,1
 40176ac:	11002b26 	beq	r2,r4,401775c <___vfiprintf_internal_r+0x1428>
 40176b0:	01000084 	movi	r4,2
 40176b4:	11002b1e 	bne	r2,r4,4017764 <___vfiprintf_internal_r+0x1430>
 40176b8:	1823883a 	mov	r17,r3
 40176bc:	003ee506 	br	4017254 <__alt_data_end+0xfc017254>
 40176c0:	8807883a 	mov	r3,r17
 40176c4:	00800044 	movi	r2,1
 40176c8:	003ff606 	br	40176a4 <__alt_data_end+0xfc0176a4>
 40176cc:	00800184 	movi	r2,6
 40176d0:	1400012e 	bgeu	r2,r16,40176d8 <___vfiprintf_internal_r+0x13a4>
 40176d4:	1021883a 	mov	r16,r2
 40176d8:	8029883a 	mov	r20,r16
 40176dc:	8027883a 	mov	r19,r16
 40176e0:	80002216 	blt	r16,zero,401776c <___vfiprintf_internal_r+0x1438>
 40176e4:	05c100b4 	movhi	r23,1026
 40176e8:	df002215 	stw	fp,136(sp)
 40176ec:	bddca704 	addi	r23,r23,29340
 40176f0:	003cfb06 	br	4016ae0 <__alt_data_end+0xfc016ae0>
 40176f4:	d9002217 	ldw	r4,136(sp)
 40176f8:	d9402417 	ldw	r5,144(sp)
 40176fc:	20800017 	ldw	r2,0(r4)
 4017700:	21000104 	addi	r4,r4,4
 4017704:	d9002215 	stw	r4,136(sp)
 4017708:	11400015 	stw	r5,0(r2)
 401770c:	003b3d06 	br	4016404 <__alt_data_end+0xfc016404>
 4017710:	014100b4 	movhi	r5,1026
 4017714:	295d0604 	addi	r5,r5,29720
 4017718:	d9402315 	stw	r5,140(sp)
 401771c:	d9401b17 	ldw	r5,108(sp)
 4017720:	29400044 	addi	r5,r5,1
 4017724:	003e6d06 	br	40170dc <__alt_data_end+0xfc0170dc>
 4017728:	8029883a 	mov	r20,r16
 401772c:	dd401d83 	ldbu	r21,118(sp)
 4017730:	df002215 	stw	fp,136(sp)
 4017734:	0021883a 	mov	r16,zero
 4017738:	003c0106 	br	4016740 <__alt_data_end+0xfc016740>
 401773c:	00c100b4 	movhi	r3,1026
 4017740:	18dd0204 	addi	r3,r3,29704
 4017744:	d8c02315 	stw	r3,140(sp)
 4017748:	280d883a 	mov	r6,r5
 401774c:	003c6906 	br	40168f4 <__alt_data_end+0xfc0168f4>
 4017750:	802d883a 	mov	r22,r16
 4017754:	0021883a 	mov	r16,zero
 4017758:	003b5406 	br	40164ac <__alt_data_end+0xfc0164ac>
 401775c:	1823883a 	mov	r17,r3
 4017760:	003cf306 	br	4016b30 <__alt_data_end+0xfc016b30>
 4017764:	1823883a 	mov	r17,r3
 4017768:	003cad06 	br	4016a20 <__alt_data_end+0xfc016a20>
 401776c:	0027883a 	mov	r19,zero
 4017770:	003fdc06 	br	40176e4 <__alt_data_end+0xfc0176e4>
 4017774:	d9402217 	ldw	r5,136(sp)
 4017778:	8005883a 	mov	r2,r16
 401777c:	b0c00043 	ldbu	r3,1(r22)
 4017780:	2c000017 	ldw	r16,0(r5)
 4017784:	29000104 	addi	r4,r5,4
 4017788:	d9002215 	stw	r4,136(sp)
 401778c:	102d883a 	mov	r22,r2
 4017790:	803fa50e 	bge	r16,zero,4017628 <__alt_data_end+0xfc017628>
 4017794:	18c03fcc 	andi	r3,r3,255
 4017798:	18c0201c 	xori	r3,r3,128
 401779c:	043fffc4 	movi	r16,-1
 40177a0:	18ffe004 	addi	r3,r3,-128
 40177a4:	003b4006 	br	40164a8 <__alt_data_end+0xfc0164a8>
 40177a8:	d9402303 	ldbu	r5,140(sp)
 40177ac:	d9401d85 	stb	r5,118(sp)
 40177b0:	003cae06 	br	4016a6c <__alt_data_end+0xfc016a6c>
 40177b4:	d8c02303 	ldbu	r3,140(sp)
 40177b8:	d8c01d85 	stb	r3,118(sp)
 40177bc:	003d1406 	br	4016c10 <__alt_data_end+0xfc016c10>
 40177c0:	d8c02303 	ldbu	r3,140(sp)
 40177c4:	d8c01d85 	stb	r3,118(sp)
 40177c8:	003cca06 	br	4016af4 <__alt_data_end+0xfc016af4>
 40177cc:	8880004c 	andi	r2,r17,1
 40177d0:	002b883a 	mov	r21,zero
 40177d4:	10000526 	beq	r2,zero,40177ec <___vfiprintf_internal_r+0x14b8>
 40177d8:	00800c04 	movi	r2,48
 40177dc:	d88019c5 	stb	r2,103(sp)
 40177e0:	dd002817 	ldw	r20,160(sp)
 40177e4:	ddc019c4 	addi	r23,sp,103
 40177e8:	003bd506 	br	4016740 <__alt_data_end+0xfc016740>
 40177ec:	0029883a 	mov	r20,zero
 40177f0:	ddc01a04 	addi	r23,sp,104
 40177f4:	003bd206 	br	4016740 <__alt_data_end+0xfc016740>
 40177f8:	d9002303 	ldbu	r4,140(sp)
 40177fc:	d9001d85 	stb	r4,118(sp)
 4017800:	003da606 	br	4016e9c <__alt_data_end+0xfc016e9c>
 4017804:	d8c02303 	ldbu	r3,140(sp)
 4017808:	d8c01d85 	stb	r3,118(sp)
 401780c:	003c7606 	br	40169e8 <__alt_data_end+0xfc0169e8>
 4017810:	d8c02303 	ldbu	r3,140(sp)
 4017814:	d8c01d85 	stb	r3,118(sp)
 4017818:	003c6506 	br	40169b0 <__alt_data_end+0xfc0169b0>
 401781c:	d9002303 	ldbu	r4,140(sp)
 4017820:	d9001d85 	stb	r4,118(sp)
 4017824:	003d3d06 	br	4016d1c <__alt_data_end+0xfc016d1c>
 4017828:	d8c02303 	ldbu	r3,140(sp)
 401782c:	d8c01d85 	stb	r3,118(sp)
 4017830:	003d1d06 	br	4016ca8 <__alt_data_end+0xfc016ca8>
 4017834:	d8c02303 	ldbu	r3,140(sp)
 4017838:	d8c01d85 	stb	r3,118(sp)
 401783c:	003d0306 	br	4016c4c <__alt_data_end+0xfc016c4c>

04017840 <__vfiprintf_internal>:
 4017840:	008100f4 	movhi	r2,1027
 4017844:	10a98804 	addi	r2,r2,-23008
 4017848:	300f883a 	mov	r7,r6
 401784c:	280d883a 	mov	r6,r5
 4017850:	200b883a 	mov	r5,r4
 4017854:	11000017 	ldw	r4,0(r2)
 4017858:	40163341 	jmpi	4016334 <___vfiprintf_internal_r>

0401785c <__sbprintf>:
 401785c:	2880030b 	ldhu	r2,12(r5)
 4017860:	2ac01917 	ldw	r11,100(r5)
 4017864:	2a80038b 	ldhu	r10,14(r5)
 4017868:	2a400717 	ldw	r9,28(r5)
 401786c:	2a000917 	ldw	r8,36(r5)
 4017870:	defee204 	addi	sp,sp,-1144
 4017874:	00c10004 	movi	r3,1024
 4017878:	dc011a15 	stw	r16,1128(sp)
 401787c:	10bfff4c 	andi	r2,r2,65533
 4017880:	2821883a 	mov	r16,r5
 4017884:	d8cb883a 	add	r5,sp,r3
 4017888:	dc811c15 	stw	r18,1136(sp)
 401788c:	dc411b15 	stw	r17,1132(sp)
 4017890:	dfc11d15 	stw	ra,1140(sp)
 4017894:	2025883a 	mov	r18,r4
 4017898:	d881030d 	sth	r2,1036(sp)
 401789c:	dac11915 	stw	r11,1124(sp)
 40178a0:	da81038d 	sth	r10,1038(sp)
 40178a4:	da410715 	stw	r9,1052(sp)
 40178a8:	da010915 	stw	r8,1060(sp)
 40178ac:	dec10015 	stw	sp,1024(sp)
 40178b0:	dec10415 	stw	sp,1040(sp)
 40178b4:	d8c10215 	stw	r3,1032(sp)
 40178b8:	d8c10515 	stw	r3,1044(sp)
 40178bc:	d8010615 	stw	zero,1048(sp)
 40178c0:	40163340 	call	4016334 <___vfiprintf_internal_r>
 40178c4:	1023883a 	mov	r17,r2
 40178c8:	10000416 	blt	r2,zero,40178dc <__sbprintf+0x80>
 40178cc:	d9410004 	addi	r5,sp,1024
 40178d0:	9009883a 	mov	r4,r18
 40178d4:	40135540 	call	4013554 <_fflush_r>
 40178d8:	10000d1e 	bne	r2,zero,4017910 <__sbprintf+0xb4>
 40178dc:	d881030b 	ldhu	r2,1036(sp)
 40178e0:	1080100c 	andi	r2,r2,64
 40178e4:	10000326 	beq	r2,zero,40178f4 <__sbprintf+0x98>
 40178e8:	8080030b 	ldhu	r2,12(r16)
 40178ec:	10801014 	ori	r2,r2,64
 40178f0:	8080030d 	sth	r2,12(r16)
 40178f4:	8805883a 	mov	r2,r17
 40178f8:	dfc11d17 	ldw	ra,1140(sp)
 40178fc:	dc811c17 	ldw	r18,1136(sp)
 4017900:	dc411b17 	ldw	r17,1132(sp)
 4017904:	dc011a17 	ldw	r16,1128(sp)
 4017908:	dec11e04 	addi	sp,sp,1144
 401790c:	f800283a 	ret
 4017910:	047fffc4 	movi	r17,-1
 4017914:	003ff106 	br	40178dc <__alt_data_end+0xfc0178dc>

04017918 <__swbuf_r>:
 4017918:	defffb04 	addi	sp,sp,-20
 401791c:	dcc00315 	stw	r19,12(sp)
 4017920:	dc800215 	stw	r18,8(sp)
 4017924:	dc000015 	stw	r16,0(sp)
 4017928:	dfc00415 	stw	ra,16(sp)
 401792c:	dc400115 	stw	r17,4(sp)
 4017930:	2025883a 	mov	r18,r4
 4017934:	2827883a 	mov	r19,r5
 4017938:	3021883a 	mov	r16,r6
 401793c:	20000226 	beq	r4,zero,4017948 <__swbuf_r+0x30>
 4017940:	20800e17 	ldw	r2,56(r4)
 4017944:	10004226 	beq	r2,zero,4017a50 <__swbuf_r+0x138>
 4017948:	80800617 	ldw	r2,24(r16)
 401794c:	8100030b 	ldhu	r4,12(r16)
 4017950:	80800215 	stw	r2,8(r16)
 4017954:	2080020c 	andi	r2,r4,8
 4017958:	10003626 	beq	r2,zero,4017a34 <__swbuf_r+0x11c>
 401795c:	80c00417 	ldw	r3,16(r16)
 4017960:	18003426 	beq	r3,zero,4017a34 <__swbuf_r+0x11c>
 4017964:	2088000c 	andi	r2,r4,8192
 4017968:	9c403fcc 	andi	r17,r19,255
 401796c:	10001a26 	beq	r2,zero,40179d8 <__swbuf_r+0xc0>
 4017970:	80800017 	ldw	r2,0(r16)
 4017974:	81000517 	ldw	r4,20(r16)
 4017978:	10c7c83a 	sub	r3,r2,r3
 401797c:	1900200e 	bge	r3,r4,4017a00 <__swbuf_r+0xe8>
 4017980:	18c00044 	addi	r3,r3,1
 4017984:	81000217 	ldw	r4,8(r16)
 4017988:	11400044 	addi	r5,r2,1
 401798c:	81400015 	stw	r5,0(r16)
 4017990:	213fffc4 	addi	r4,r4,-1
 4017994:	81000215 	stw	r4,8(r16)
 4017998:	14c00005 	stb	r19,0(r2)
 401799c:	80800517 	ldw	r2,20(r16)
 40179a0:	10c01e26 	beq	r2,r3,4017a1c <__swbuf_r+0x104>
 40179a4:	8080030b 	ldhu	r2,12(r16)
 40179a8:	1080004c 	andi	r2,r2,1
 40179ac:	10000226 	beq	r2,zero,40179b8 <__swbuf_r+0xa0>
 40179b0:	00800284 	movi	r2,10
 40179b4:	88801926 	beq	r17,r2,4017a1c <__swbuf_r+0x104>
 40179b8:	8805883a 	mov	r2,r17
 40179bc:	dfc00417 	ldw	ra,16(sp)
 40179c0:	dcc00317 	ldw	r19,12(sp)
 40179c4:	dc800217 	ldw	r18,8(sp)
 40179c8:	dc400117 	ldw	r17,4(sp)
 40179cc:	dc000017 	ldw	r16,0(sp)
 40179d0:	dec00504 	addi	sp,sp,20
 40179d4:	f800283a 	ret
 40179d8:	81401917 	ldw	r5,100(r16)
 40179dc:	00b7ffc4 	movi	r2,-8193
 40179e0:	21080014 	ori	r4,r4,8192
 40179e4:	2884703a 	and	r2,r5,r2
 40179e8:	80801915 	stw	r2,100(r16)
 40179ec:	80800017 	ldw	r2,0(r16)
 40179f0:	8100030d 	sth	r4,12(r16)
 40179f4:	81000517 	ldw	r4,20(r16)
 40179f8:	10c7c83a 	sub	r3,r2,r3
 40179fc:	193fe016 	blt	r3,r4,4017980 <__alt_data_end+0xfc017980>
 4017a00:	800b883a 	mov	r5,r16
 4017a04:	9009883a 	mov	r4,r18
 4017a08:	40135540 	call	4013554 <_fflush_r>
 4017a0c:	1000071e 	bne	r2,zero,4017a2c <__swbuf_r+0x114>
 4017a10:	80800017 	ldw	r2,0(r16)
 4017a14:	00c00044 	movi	r3,1
 4017a18:	003fda06 	br	4017984 <__alt_data_end+0xfc017984>
 4017a1c:	800b883a 	mov	r5,r16
 4017a20:	9009883a 	mov	r4,r18
 4017a24:	40135540 	call	4013554 <_fflush_r>
 4017a28:	103fe326 	beq	r2,zero,40179b8 <__alt_data_end+0xfc0179b8>
 4017a2c:	00bfffc4 	movi	r2,-1
 4017a30:	003fe206 	br	40179bc <__alt_data_end+0xfc0179bc>
 4017a34:	800b883a 	mov	r5,r16
 4017a38:	9009883a 	mov	r4,r18
 4017a3c:	40119340 	call	4011934 <__swsetup_r>
 4017a40:	103ffa1e 	bne	r2,zero,4017a2c <__alt_data_end+0xfc017a2c>
 4017a44:	8100030b 	ldhu	r4,12(r16)
 4017a48:	80c00417 	ldw	r3,16(r16)
 4017a4c:	003fc506 	br	4017964 <__alt_data_end+0xfc017964>
 4017a50:	40139400 	call	4013940 <__sinit>
 4017a54:	003fbc06 	br	4017948 <__alt_data_end+0xfc017948>

04017a58 <__swbuf>:
 4017a58:	008100f4 	movhi	r2,1027
 4017a5c:	10a98804 	addi	r2,r2,-23008
 4017a60:	280d883a 	mov	r6,r5
 4017a64:	200b883a 	mov	r5,r4
 4017a68:	11000017 	ldw	r4,0(r2)
 4017a6c:	40179181 	jmpi	4017918 <__swbuf_r>

04017a70 <_write_r>:
 4017a70:	defffd04 	addi	sp,sp,-12
 4017a74:	2805883a 	mov	r2,r5
 4017a78:	dc000015 	stw	r16,0(sp)
 4017a7c:	040100f4 	movhi	r16,1027
 4017a80:	dc400115 	stw	r17,4(sp)
 4017a84:	300b883a 	mov	r5,r6
 4017a88:	84361a04 	addi	r16,r16,-10136
 4017a8c:	2023883a 	mov	r17,r4
 4017a90:	380d883a 	mov	r6,r7
 4017a94:	1009883a 	mov	r4,r2
 4017a98:	dfc00215 	stw	ra,8(sp)
 4017a9c:	80000015 	stw	zero,0(r16)
 4017aa0:	401c19c0 	call	401c19c <write>
 4017aa4:	00ffffc4 	movi	r3,-1
 4017aa8:	10c00526 	beq	r2,r3,4017ac0 <_write_r+0x50>
 4017aac:	dfc00217 	ldw	ra,8(sp)
 4017ab0:	dc400117 	ldw	r17,4(sp)
 4017ab4:	dc000017 	ldw	r16,0(sp)
 4017ab8:	dec00304 	addi	sp,sp,12
 4017abc:	f800283a 	ret
 4017ac0:	80c00017 	ldw	r3,0(r16)
 4017ac4:	183ff926 	beq	r3,zero,4017aac <__alt_data_end+0xfc017aac>
 4017ac8:	88c00015 	stw	r3,0(r17)
 4017acc:	003ff706 	br	4017aac <__alt_data_end+0xfc017aac>

04017ad0 <_close_r>:
 4017ad0:	defffd04 	addi	sp,sp,-12
 4017ad4:	dc000015 	stw	r16,0(sp)
 4017ad8:	040100f4 	movhi	r16,1027
 4017adc:	dc400115 	stw	r17,4(sp)
 4017ae0:	84361a04 	addi	r16,r16,-10136
 4017ae4:	2023883a 	mov	r17,r4
 4017ae8:	2809883a 	mov	r4,r5
 4017aec:	dfc00215 	stw	ra,8(sp)
 4017af0:	80000015 	stw	zero,0(r16)
 4017af4:	401b6a00 	call	401b6a0 <close>
 4017af8:	00ffffc4 	movi	r3,-1
 4017afc:	10c00526 	beq	r2,r3,4017b14 <_close_r+0x44>
 4017b00:	dfc00217 	ldw	ra,8(sp)
 4017b04:	dc400117 	ldw	r17,4(sp)
 4017b08:	dc000017 	ldw	r16,0(sp)
 4017b0c:	dec00304 	addi	sp,sp,12
 4017b10:	f800283a 	ret
 4017b14:	80c00017 	ldw	r3,0(r16)
 4017b18:	183ff926 	beq	r3,zero,4017b00 <__alt_data_end+0xfc017b00>
 4017b1c:	88c00015 	stw	r3,0(r17)
 4017b20:	003ff706 	br	4017b00 <__alt_data_end+0xfc017b00>

04017b24 <_calloc_r>:
 4017b24:	defffe04 	addi	sp,sp,-8
 4017b28:	2805883a 	mov	r2,r5
 4017b2c:	dc000015 	stw	r16,0(sp)
 4017b30:	300b883a 	mov	r5,r6
 4017b34:	2021883a 	mov	r16,r4
 4017b38:	1009883a 	mov	r4,r2
 4017b3c:	dfc00115 	stw	ra,4(sp)
 4017b40:	400d3680 	call	400d368 <__mulsi3>
 4017b44:	100b883a 	mov	r5,r2
 4017b48:	8009883a 	mov	r4,r16
 4017b4c:	400e4d00 	call	400e4d0 <_malloc_r>
 4017b50:	10002926 	beq	r2,zero,4017bf8 <_calloc_r+0xd4>
 4017b54:	11bfff17 	ldw	r6,-4(r2)
 4017b58:	1021883a 	mov	r16,r2
 4017b5c:	00bfff04 	movi	r2,-4
 4017b60:	308c703a 	and	r6,r6,r2
 4017b64:	00c00904 	movi	r3,36
 4017b68:	308d883a 	add	r6,r6,r2
 4017b6c:	19801636 	bltu	r3,r6,4017bc8 <_calloc_r+0xa4>
 4017b70:	008004c4 	movi	r2,19
 4017b74:	11800b2e 	bgeu	r2,r6,4017ba4 <_calloc_r+0x80>
 4017b78:	80000015 	stw	zero,0(r16)
 4017b7c:	80000115 	stw	zero,4(r16)
 4017b80:	008006c4 	movi	r2,27
 4017b84:	11801a2e 	bgeu	r2,r6,4017bf0 <_calloc_r+0xcc>
 4017b88:	80000215 	stw	zero,8(r16)
 4017b8c:	80000315 	stw	zero,12(r16)
 4017b90:	30c0151e 	bne	r6,r3,4017be8 <_calloc_r+0xc4>
 4017b94:	80000415 	stw	zero,16(r16)
 4017b98:	80800604 	addi	r2,r16,24
 4017b9c:	80000515 	stw	zero,20(r16)
 4017ba0:	00000106 	br	4017ba8 <_calloc_r+0x84>
 4017ba4:	8005883a 	mov	r2,r16
 4017ba8:	10000015 	stw	zero,0(r2)
 4017bac:	10000115 	stw	zero,4(r2)
 4017bb0:	10000215 	stw	zero,8(r2)
 4017bb4:	8005883a 	mov	r2,r16
 4017bb8:	dfc00117 	ldw	ra,4(sp)
 4017bbc:	dc000017 	ldw	r16,0(sp)
 4017bc0:	dec00204 	addi	sp,sp,8
 4017bc4:	f800283a 	ret
 4017bc8:	000b883a 	mov	r5,zero
 4017bcc:	8009883a 	mov	r4,r16
 4017bd0:	400ee240 	call	400ee24 <memset>
 4017bd4:	8005883a 	mov	r2,r16
 4017bd8:	dfc00117 	ldw	ra,4(sp)
 4017bdc:	dc000017 	ldw	r16,0(sp)
 4017be0:	dec00204 	addi	sp,sp,8
 4017be4:	f800283a 	ret
 4017be8:	80800404 	addi	r2,r16,16
 4017bec:	003fee06 	br	4017ba8 <__alt_data_end+0xfc017ba8>
 4017bf0:	80800204 	addi	r2,r16,8
 4017bf4:	003fec06 	br	4017ba8 <__alt_data_end+0xfc017ba8>
 4017bf8:	0005883a 	mov	r2,zero
 4017bfc:	003fee06 	br	4017bb8 <__alt_data_end+0xfc017bb8>

04017c00 <_fclose_r>:
 4017c00:	28003926 	beq	r5,zero,4017ce8 <_fclose_r+0xe8>
 4017c04:	defffc04 	addi	sp,sp,-16
 4017c08:	dc400115 	stw	r17,4(sp)
 4017c0c:	dc000015 	stw	r16,0(sp)
 4017c10:	dfc00315 	stw	ra,12(sp)
 4017c14:	dc800215 	stw	r18,8(sp)
 4017c18:	2023883a 	mov	r17,r4
 4017c1c:	2821883a 	mov	r16,r5
 4017c20:	20000226 	beq	r4,zero,4017c2c <_fclose_r+0x2c>
 4017c24:	20800e17 	ldw	r2,56(r4)
 4017c28:	10002726 	beq	r2,zero,4017cc8 <_fclose_r+0xc8>
 4017c2c:	8080030f 	ldh	r2,12(r16)
 4017c30:	1000071e 	bne	r2,zero,4017c50 <_fclose_r+0x50>
 4017c34:	0005883a 	mov	r2,zero
 4017c38:	dfc00317 	ldw	ra,12(sp)
 4017c3c:	dc800217 	ldw	r18,8(sp)
 4017c40:	dc400117 	ldw	r17,4(sp)
 4017c44:	dc000017 	ldw	r16,0(sp)
 4017c48:	dec00404 	addi	sp,sp,16
 4017c4c:	f800283a 	ret
 4017c50:	800b883a 	mov	r5,r16
 4017c54:	8809883a 	mov	r4,r17
 4017c58:	40133380 	call	4013338 <__sflush_r>
 4017c5c:	1025883a 	mov	r18,r2
 4017c60:	80800b17 	ldw	r2,44(r16)
 4017c64:	10000426 	beq	r2,zero,4017c78 <_fclose_r+0x78>
 4017c68:	81400717 	ldw	r5,28(r16)
 4017c6c:	8809883a 	mov	r4,r17
 4017c70:	103ee83a 	callr	r2
 4017c74:	10001616 	blt	r2,zero,4017cd0 <_fclose_r+0xd0>
 4017c78:	8080030b 	ldhu	r2,12(r16)
 4017c7c:	1080200c 	andi	r2,r2,128
 4017c80:	1000151e 	bne	r2,zero,4017cd8 <_fclose_r+0xd8>
 4017c84:	81400c17 	ldw	r5,48(r16)
 4017c88:	28000526 	beq	r5,zero,4017ca0 <_fclose_r+0xa0>
 4017c8c:	80801004 	addi	r2,r16,64
 4017c90:	28800226 	beq	r5,r2,4017c9c <_fclose_r+0x9c>
 4017c94:	8809883a 	mov	r4,r17
 4017c98:	4013ab40 	call	4013ab4 <_free_r>
 4017c9c:	80000c15 	stw	zero,48(r16)
 4017ca0:	81401117 	ldw	r5,68(r16)
 4017ca4:	28000326 	beq	r5,zero,4017cb4 <_fclose_r+0xb4>
 4017ca8:	8809883a 	mov	r4,r17
 4017cac:	4013ab40 	call	4013ab4 <_free_r>
 4017cb0:	80001115 	stw	zero,68(r16)
 4017cb4:	40139500 	call	4013950 <__sfp_lock_acquire>
 4017cb8:	8000030d 	sth	zero,12(r16)
 4017cbc:	40139540 	call	4013954 <__sfp_lock_release>
 4017cc0:	9005883a 	mov	r2,r18
 4017cc4:	003fdc06 	br	4017c38 <__alt_data_end+0xfc017c38>
 4017cc8:	40139400 	call	4013940 <__sinit>
 4017ccc:	003fd706 	br	4017c2c <__alt_data_end+0xfc017c2c>
 4017cd0:	04bfffc4 	movi	r18,-1
 4017cd4:	003fe806 	br	4017c78 <__alt_data_end+0xfc017c78>
 4017cd8:	81400417 	ldw	r5,16(r16)
 4017cdc:	8809883a 	mov	r4,r17
 4017ce0:	4013ab40 	call	4013ab4 <_free_r>
 4017ce4:	003fe706 	br	4017c84 <__alt_data_end+0xfc017c84>
 4017ce8:	0005883a 	mov	r2,zero
 4017cec:	f800283a 	ret

04017cf0 <fclose>:
 4017cf0:	008100f4 	movhi	r2,1027
 4017cf4:	10a98804 	addi	r2,r2,-23008
 4017cf8:	200b883a 	mov	r5,r4
 4017cfc:	11000017 	ldw	r4,0(r2)
 4017d00:	4017c001 	jmpi	4017c00 <_fclose_r>

04017d04 <__fputwc>:
 4017d04:	defff804 	addi	sp,sp,-32
 4017d08:	dcc00415 	stw	r19,16(sp)
 4017d0c:	dc800315 	stw	r18,12(sp)
 4017d10:	dc000115 	stw	r16,4(sp)
 4017d14:	dfc00715 	stw	ra,28(sp)
 4017d18:	dd400615 	stw	r21,24(sp)
 4017d1c:	dd000515 	stw	r20,20(sp)
 4017d20:	dc400215 	stw	r17,8(sp)
 4017d24:	2027883a 	mov	r19,r4
 4017d28:	2825883a 	mov	r18,r5
 4017d2c:	3021883a 	mov	r16,r6
 4017d30:	401449c0 	call	401449c <__locale_mb_cur_max>
 4017d34:	00c00044 	movi	r3,1
 4017d38:	10c03e26 	beq	r2,r3,4017e34 <__fputwc+0x130>
 4017d3c:	81c01704 	addi	r7,r16,92
 4017d40:	900d883a 	mov	r6,r18
 4017d44:	d80b883a 	mov	r5,sp
 4017d48:	9809883a 	mov	r4,r19
 4017d4c:	401807c0 	call	401807c <_wcrtomb_r>
 4017d50:	1029883a 	mov	r20,r2
 4017d54:	00bfffc4 	movi	r2,-1
 4017d58:	a0802026 	beq	r20,r2,4017ddc <__fputwc+0xd8>
 4017d5c:	d9400003 	ldbu	r5,0(sp)
 4017d60:	a0001c26 	beq	r20,zero,4017dd4 <__fputwc+0xd0>
 4017d64:	0023883a 	mov	r17,zero
 4017d68:	05400284 	movi	r21,10
 4017d6c:	00000906 	br	4017d94 <__fputwc+0x90>
 4017d70:	80800017 	ldw	r2,0(r16)
 4017d74:	11400005 	stb	r5,0(r2)
 4017d78:	80c00017 	ldw	r3,0(r16)
 4017d7c:	18c00044 	addi	r3,r3,1
 4017d80:	80c00015 	stw	r3,0(r16)
 4017d84:	8c400044 	addi	r17,r17,1
 4017d88:	dc45883a 	add	r2,sp,r17
 4017d8c:	8d00112e 	bgeu	r17,r20,4017dd4 <__fputwc+0xd0>
 4017d90:	11400003 	ldbu	r5,0(r2)
 4017d94:	80c00217 	ldw	r3,8(r16)
 4017d98:	18ffffc4 	addi	r3,r3,-1
 4017d9c:	80c00215 	stw	r3,8(r16)
 4017da0:	183ff30e 	bge	r3,zero,4017d70 <__alt_data_end+0xfc017d70>
 4017da4:	80800617 	ldw	r2,24(r16)
 4017da8:	18801916 	blt	r3,r2,4017e10 <__fputwc+0x10c>
 4017dac:	80800017 	ldw	r2,0(r16)
 4017db0:	11400005 	stb	r5,0(r2)
 4017db4:	80800017 	ldw	r2,0(r16)
 4017db8:	10c00003 	ldbu	r3,0(r2)
 4017dbc:	10800044 	addi	r2,r2,1
 4017dc0:	1d402326 	beq	r3,r21,4017e50 <__fputwc+0x14c>
 4017dc4:	80800015 	stw	r2,0(r16)
 4017dc8:	8c400044 	addi	r17,r17,1
 4017dcc:	dc45883a 	add	r2,sp,r17
 4017dd0:	8d3fef36 	bltu	r17,r20,4017d90 <__alt_data_end+0xfc017d90>
 4017dd4:	9005883a 	mov	r2,r18
 4017dd8:	00000406 	br	4017dec <__fputwc+0xe8>
 4017ddc:	80c0030b 	ldhu	r3,12(r16)
 4017de0:	a005883a 	mov	r2,r20
 4017de4:	18c01014 	ori	r3,r3,64
 4017de8:	80c0030d 	sth	r3,12(r16)
 4017dec:	dfc00717 	ldw	ra,28(sp)
 4017df0:	dd400617 	ldw	r21,24(sp)
 4017df4:	dd000517 	ldw	r20,20(sp)
 4017df8:	dcc00417 	ldw	r19,16(sp)
 4017dfc:	dc800317 	ldw	r18,12(sp)
 4017e00:	dc400217 	ldw	r17,8(sp)
 4017e04:	dc000117 	ldw	r16,4(sp)
 4017e08:	dec00804 	addi	sp,sp,32
 4017e0c:	f800283a 	ret
 4017e10:	800d883a 	mov	r6,r16
 4017e14:	29403fcc 	andi	r5,r5,255
 4017e18:	9809883a 	mov	r4,r19
 4017e1c:	40179180 	call	4017918 <__swbuf_r>
 4017e20:	10bfffe0 	cmpeqi	r2,r2,-1
 4017e24:	10803fcc 	andi	r2,r2,255
 4017e28:	103fd626 	beq	r2,zero,4017d84 <__alt_data_end+0xfc017d84>
 4017e2c:	00bfffc4 	movi	r2,-1
 4017e30:	003fee06 	br	4017dec <__alt_data_end+0xfc017dec>
 4017e34:	90ffffc4 	addi	r3,r18,-1
 4017e38:	01003f84 	movi	r4,254
 4017e3c:	20ffbf36 	bltu	r4,r3,4017d3c <__alt_data_end+0xfc017d3c>
 4017e40:	900b883a 	mov	r5,r18
 4017e44:	dc800005 	stb	r18,0(sp)
 4017e48:	1029883a 	mov	r20,r2
 4017e4c:	003fc506 	br	4017d64 <__alt_data_end+0xfc017d64>
 4017e50:	800d883a 	mov	r6,r16
 4017e54:	a80b883a 	mov	r5,r21
 4017e58:	9809883a 	mov	r4,r19
 4017e5c:	40179180 	call	4017918 <__swbuf_r>
 4017e60:	10bfffe0 	cmpeqi	r2,r2,-1
 4017e64:	003fef06 	br	4017e24 <__alt_data_end+0xfc017e24>

04017e68 <_fputwc_r>:
 4017e68:	3080030b 	ldhu	r2,12(r6)
 4017e6c:	10c8000c 	andi	r3,r2,8192
 4017e70:	1800051e 	bne	r3,zero,4017e88 <_fputwc_r+0x20>
 4017e74:	30c01917 	ldw	r3,100(r6)
 4017e78:	10880014 	ori	r2,r2,8192
 4017e7c:	3080030d 	sth	r2,12(r6)
 4017e80:	18880014 	ori	r2,r3,8192
 4017e84:	30801915 	stw	r2,100(r6)
 4017e88:	4017d041 	jmpi	4017d04 <__fputwc>

04017e8c <fputwc>:
 4017e8c:	008100f4 	movhi	r2,1027
 4017e90:	defffc04 	addi	sp,sp,-16
 4017e94:	10a98804 	addi	r2,r2,-23008
 4017e98:	dc000115 	stw	r16,4(sp)
 4017e9c:	14000017 	ldw	r16,0(r2)
 4017ea0:	dc400215 	stw	r17,8(sp)
 4017ea4:	dfc00315 	stw	ra,12(sp)
 4017ea8:	2023883a 	mov	r17,r4
 4017eac:	80000226 	beq	r16,zero,4017eb8 <fputwc+0x2c>
 4017eb0:	80800e17 	ldw	r2,56(r16)
 4017eb4:	10001026 	beq	r2,zero,4017ef8 <fputwc+0x6c>
 4017eb8:	2880030b 	ldhu	r2,12(r5)
 4017ebc:	10c8000c 	andi	r3,r2,8192
 4017ec0:	1800051e 	bne	r3,zero,4017ed8 <fputwc+0x4c>
 4017ec4:	28c01917 	ldw	r3,100(r5)
 4017ec8:	10880014 	ori	r2,r2,8192
 4017ecc:	2880030d 	sth	r2,12(r5)
 4017ed0:	18880014 	ori	r2,r3,8192
 4017ed4:	28801915 	stw	r2,100(r5)
 4017ed8:	280d883a 	mov	r6,r5
 4017edc:	8009883a 	mov	r4,r16
 4017ee0:	880b883a 	mov	r5,r17
 4017ee4:	dfc00317 	ldw	ra,12(sp)
 4017ee8:	dc400217 	ldw	r17,8(sp)
 4017eec:	dc000117 	ldw	r16,4(sp)
 4017ef0:	dec00404 	addi	sp,sp,16
 4017ef4:	4017d041 	jmpi	4017d04 <__fputwc>
 4017ef8:	8009883a 	mov	r4,r16
 4017efc:	d9400015 	stw	r5,0(sp)
 4017f00:	40139400 	call	4013940 <__sinit>
 4017f04:	d9400017 	ldw	r5,0(sp)
 4017f08:	003feb06 	br	4017eb8 <__alt_data_end+0xfc017eb8>

04017f0c <_fstat_r>:
 4017f0c:	defffd04 	addi	sp,sp,-12
 4017f10:	2805883a 	mov	r2,r5
 4017f14:	dc000015 	stw	r16,0(sp)
 4017f18:	040100f4 	movhi	r16,1027
 4017f1c:	dc400115 	stw	r17,4(sp)
 4017f20:	84361a04 	addi	r16,r16,-10136
 4017f24:	2023883a 	mov	r17,r4
 4017f28:	300b883a 	mov	r5,r6
 4017f2c:	1009883a 	mov	r4,r2
 4017f30:	dfc00215 	stw	ra,8(sp)
 4017f34:	80000015 	stw	zero,0(r16)
 4017f38:	401b8140 	call	401b814 <fstat>
 4017f3c:	00ffffc4 	movi	r3,-1
 4017f40:	10c00526 	beq	r2,r3,4017f58 <_fstat_r+0x4c>
 4017f44:	dfc00217 	ldw	ra,8(sp)
 4017f48:	dc400117 	ldw	r17,4(sp)
 4017f4c:	dc000017 	ldw	r16,0(sp)
 4017f50:	dec00304 	addi	sp,sp,12
 4017f54:	f800283a 	ret
 4017f58:	80c00017 	ldw	r3,0(r16)
 4017f5c:	183ff926 	beq	r3,zero,4017f44 <__alt_data_end+0xfc017f44>
 4017f60:	88c00015 	stw	r3,0(r17)
 4017f64:	003ff706 	br	4017f44 <__alt_data_end+0xfc017f44>

04017f68 <_isatty_r>:
 4017f68:	defffd04 	addi	sp,sp,-12
 4017f6c:	dc000015 	stw	r16,0(sp)
 4017f70:	040100f4 	movhi	r16,1027
 4017f74:	dc400115 	stw	r17,4(sp)
 4017f78:	84361a04 	addi	r16,r16,-10136
 4017f7c:	2023883a 	mov	r17,r4
 4017f80:	2809883a 	mov	r4,r5
 4017f84:	dfc00215 	stw	ra,8(sp)
 4017f88:	80000015 	stw	zero,0(r16)
 4017f8c:	401b9280 	call	401b928 <isatty>
 4017f90:	00ffffc4 	movi	r3,-1
 4017f94:	10c00526 	beq	r2,r3,4017fac <_isatty_r+0x44>
 4017f98:	dfc00217 	ldw	ra,8(sp)
 4017f9c:	dc400117 	ldw	r17,4(sp)
 4017fa0:	dc000017 	ldw	r16,0(sp)
 4017fa4:	dec00304 	addi	sp,sp,12
 4017fa8:	f800283a 	ret
 4017fac:	80c00017 	ldw	r3,0(r16)
 4017fb0:	183ff926 	beq	r3,zero,4017f98 <__alt_data_end+0xfc017f98>
 4017fb4:	88c00015 	stw	r3,0(r17)
 4017fb8:	003ff706 	br	4017f98 <__alt_data_end+0xfc017f98>

04017fbc <_lseek_r>:
 4017fbc:	defffd04 	addi	sp,sp,-12
 4017fc0:	2805883a 	mov	r2,r5
 4017fc4:	dc000015 	stw	r16,0(sp)
 4017fc8:	040100f4 	movhi	r16,1027
 4017fcc:	dc400115 	stw	r17,4(sp)
 4017fd0:	300b883a 	mov	r5,r6
 4017fd4:	84361a04 	addi	r16,r16,-10136
 4017fd8:	2023883a 	mov	r17,r4
 4017fdc:	380d883a 	mov	r6,r7
 4017fe0:	1009883a 	mov	r4,r2
 4017fe4:	dfc00215 	stw	ra,8(sp)
 4017fe8:	80000015 	stw	zero,0(r16)
 4017fec:	401bc680 	call	401bc68 <lseek>
 4017ff0:	00ffffc4 	movi	r3,-1
 4017ff4:	10c00526 	beq	r2,r3,401800c <_lseek_r+0x50>
 4017ff8:	dfc00217 	ldw	ra,8(sp)
 4017ffc:	dc400117 	ldw	r17,4(sp)
 4018000:	dc000017 	ldw	r16,0(sp)
 4018004:	dec00304 	addi	sp,sp,12
 4018008:	f800283a 	ret
 401800c:	80c00017 	ldw	r3,0(r16)
 4018010:	183ff926 	beq	r3,zero,4017ff8 <__alt_data_end+0xfc017ff8>
 4018014:	88c00015 	stw	r3,0(r17)
 4018018:	003ff706 	br	4017ff8 <__alt_data_end+0xfc017ff8>

0401801c <_read_r>:
 401801c:	defffd04 	addi	sp,sp,-12
 4018020:	2805883a 	mov	r2,r5
 4018024:	dc000015 	stw	r16,0(sp)
 4018028:	040100f4 	movhi	r16,1027
 401802c:	dc400115 	stw	r17,4(sp)
 4018030:	300b883a 	mov	r5,r6
 4018034:	84361a04 	addi	r16,r16,-10136
 4018038:	2023883a 	mov	r17,r4
 401803c:	380d883a 	mov	r6,r7
 4018040:	1009883a 	mov	r4,r2
 4018044:	dfc00215 	stw	ra,8(sp)
 4018048:	80000015 	stw	zero,0(r16)
 401804c:	401be440 	call	401be44 <read>
 4018050:	00ffffc4 	movi	r3,-1
 4018054:	10c00526 	beq	r2,r3,401806c <_read_r+0x50>
 4018058:	dfc00217 	ldw	ra,8(sp)
 401805c:	dc400117 	ldw	r17,4(sp)
 4018060:	dc000017 	ldw	r16,0(sp)
 4018064:	dec00304 	addi	sp,sp,12
 4018068:	f800283a 	ret
 401806c:	80c00017 	ldw	r3,0(r16)
 4018070:	183ff926 	beq	r3,zero,4018058 <__alt_data_end+0xfc018058>
 4018074:	88c00015 	stw	r3,0(r17)
 4018078:	003ff706 	br	4018058 <__alt_data_end+0xfc018058>

0401807c <_wcrtomb_r>:
 401807c:	defff604 	addi	sp,sp,-40
 4018080:	008100f4 	movhi	r2,1027
 4018084:	dc800815 	stw	r18,32(sp)
 4018088:	dc400715 	stw	r17,28(sp)
 401808c:	dc000615 	stw	r16,24(sp)
 4018090:	10a98c04 	addi	r2,r2,-22992
 4018094:	dfc00915 	stw	ra,36(sp)
 4018098:	2021883a 	mov	r16,r4
 401809c:	3823883a 	mov	r17,r7
 40180a0:	14800017 	ldw	r18,0(r2)
 40180a4:	28001426 	beq	r5,zero,40180f8 <_wcrtomb_r+0x7c>
 40180a8:	d9400415 	stw	r5,16(sp)
 40180ac:	d9800515 	stw	r6,20(sp)
 40180b0:	40144900 	call	4014490 <__locale_charset>
 40180b4:	d9800517 	ldw	r6,20(sp)
 40180b8:	d9400417 	ldw	r5,16(sp)
 40180bc:	100f883a 	mov	r7,r2
 40180c0:	dc400015 	stw	r17,0(sp)
 40180c4:	8009883a 	mov	r4,r16
 40180c8:	903ee83a 	callr	r18
 40180cc:	00ffffc4 	movi	r3,-1
 40180d0:	10c0031e 	bne	r2,r3,40180e0 <_wcrtomb_r+0x64>
 40180d4:	88000015 	stw	zero,0(r17)
 40180d8:	00c02284 	movi	r3,138
 40180dc:	80c00015 	stw	r3,0(r16)
 40180e0:	dfc00917 	ldw	ra,36(sp)
 40180e4:	dc800817 	ldw	r18,32(sp)
 40180e8:	dc400717 	ldw	r17,28(sp)
 40180ec:	dc000617 	ldw	r16,24(sp)
 40180f0:	dec00a04 	addi	sp,sp,40
 40180f4:	f800283a 	ret
 40180f8:	40144900 	call	4014490 <__locale_charset>
 40180fc:	100f883a 	mov	r7,r2
 4018100:	dc400015 	stw	r17,0(sp)
 4018104:	000d883a 	mov	r6,zero
 4018108:	d9400104 	addi	r5,sp,4
 401810c:	8009883a 	mov	r4,r16
 4018110:	903ee83a 	callr	r18
 4018114:	003fed06 	br	40180cc <__alt_data_end+0xfc0180cc>

04018118 <wcrtomb>:
 4018118:	defff604 	addi	sp,sp,-40
 401811c:	008100f4 	movhi	r2,1027
 4018120:	dc800615 	stw	r18,24(sp)
 4018124:	dc400515 	stw	r17,20(sp)
 4018128:	10a98804 	addi	r2,r2,-23008
 401812c:	dfc00915 	stw	ra,36(sp)
 4018130:	dd000815 	stw	r20,32(sp)
 4018134:	dcc00715 	stw	r19,28(sp)
 4018138:	dc000415 	stw	r16,16(sp)
 401813c:	3025883a 	mov	r18,r6
 4018140:	14400017 	ldw	r17,0(r2)
 4018144:	20001926 	beq	r4,zero,40181ac <wcrtomb+0x94>
 4018148:	008100f4 	movhi	r2,1027
 401814c:	10a98c04 	addi	r2,r2,-22992
 4018150:	15000017 	ldw	r20,0(r2)
 4018154:	2021883a 	mov	r16,r4
 4018158:	2827883a 	mov	r19,r5
 401815c:	40144900 	call	4014490 <__locale_charset>
 4018160:	100f883a 	mov	r7,r2
 4018164:	dc800015 	stw	r18,0(sp)
 4018168:	980d883a 	mov	r6,r19
 401816c:	800b883a 	mov	r5,r16
 4018170:	8809883a 	mov	r4,r17
 4018174:	a03ee83a 	callr	r20
 4018178:	00ffffc4 	movi	r3,-1
 401817c:	10c0031e 	bne	r2,r3,401818c <wcrtomb+0x74>
 4018180:	90000015 	stw	zero,0(r18)
 4018184:	00c02284 	movi	r3,138
 4018188:	88c00015 	stw	r3,0(r17)
 401818c:	dfc00917 	ldw	ra,36(sp)
 4018190:	dd000817 	ldw	r20,32(sp)
 4018194:	dcc00717 	ldw	r19,28(sp)
 4018198:	dc800617 	ldw	r18,24(sp)
 401819c:	dc400517 	ldw	r17,20(sp)
 40181a0:	dc000417 	ldw	r16,16(sp)
 40181a4:	dec00a04 	addi	sp,sp,40
 40181a8:	f800283a 	ret
 40181ac:	008100f4 	movhi	r2,1027
 40181b0:	10a98c04 	addi	r2,r2,-22992
 40181b4:	14000017 	ldw	r16,0(r2)
 40181b8:	40144900 	call	4014490 <__locale_charset>
 40181bc:	100f883a 	mov	r7,r2
 40181c0:	dc800015 	stw	r18,0(sp)
 40181c4:	000d883a 	mov	r6,zero
 40181c8:	d9400104 	addi	r5,sp,4
 40181cc:	8809883a 	mov	r4,r17
 40181d0:	803ee83a 	callr	r16
 40181d4:	003fe806 	br	4018178 <__alt_data_end+0xfc018178>

040181d8 <__ascii_wctomb>:
 40181d8:	28000526 	beq	r5,zero,40181f0 <__ascii_wctomb+0x18>
 40181dc:	00803fc4 	movi	r2,255
 40181e0:	11800536 	bltu	r2,r6,40181f8 <__ascii_wctomb+0x20>
 40181e4:	29800005 	stb	r6,0(r5)
 40181e8:	00800044 	movi	r2,1
 40181ec:	f800283a 	ret
 40181f0:	0005883a 	mov	r2,zero
 40181f4:	f800283a 	ret
 40181f8:	00802284 	movi	r2,138
 40181fc:	20800015 	stw	r2,0(r4)
 4018200:	00bfffc4 	movi	r2,-1
 4018204:	f800283a 	ret

04018208 <_wctomb_r>:
 4018208:	008100f4 	movhi	r2,1027
 401820c:	defff904 	addi	sp,sp,-28
 4018210:	10a98c04 	addi	r2,r2,-22992
 4018214:	dfc00615 	stw	ra,24(sp)
 4018218:	dc400515 	stw	r17,20(sp)
 401821c:	dc000415 	stw	r16,16(sp)
 4018220:	3823883a 	mov	r17,r7
 4018224:	14000017 	ldw	r16,0(r2)
 4018228:	d9000115 	stw	r4,4(sp)
 401822c:	d9400215 	stw	r5,8(sp)
 4018230:	d9800315 	stw	r6,12(sp)
 4018234:	40144900 	call	4014490 <__locale_charset>
 4018238:	d9800317 	ldw	r6,12(sp)
 401823c:	d9400217 	ldw	r5,8(sp)
 4018240:	d9000117 	ldw	r4,4(sp)
 4018244:	100f883a 	mov	r7,r2
 4018248:	dc400015 	stw	r17,0(sp)
 401824c:	803ee83a 	callr	r16
 4018250:	dfc00617 	ldw	ra,24(sp)
 4018254:	dc400517 	ldw	r17,20(sp)
 4018258:	dc000417 	ldw	r16,16(sp)
 401825c:	dec00704 	addi	sp,sp,28
 4018260:	f800283a 	ret

04018264 <__udivdi3>:
 4018264:	defff404 	addi	sp,sp,-48
 4018268:	dcc00515 	stw	r19,20(sp)
 401826c:	dc000215 	stw	r16,8(sp)
 4018270:	dfc00b15 	stw	ra,44(sp)
 4018274:	df000a15 	stw	fp,40(sp)
 4018278:	ddc00915 	stw	r23,36(sp)
 401827c:	dd800815 	stw	r22,32(sp)
 4018280:	dd400715 	stw	r21,28(sp)
 4018284:	dd000615 	stw	r20,24(sp)
 4018288:	dc800415 	stw	r18,16(sp)
 401828c:	dc400315 	stw	r17,12(sp)
 4018290:	2027883a 	mov	r19,r4
 4018294:	2821883a 	mov	r16,r5
 4018298:	3800461e 	bne	r7,zero,40183b4 <__udivdi3+0x150>
 401829c:	3023883a 	mov	r17,r6
 40182a0:	2025883a 	mov	r18,r4
 40182a4:	2980572e 	bgeu	r5,r6,4018404 <__udivdi3+0x1a0>
 40182a8:	00bfffd4 	movui	r2,65535
 40182ac:	282d883a 	mov	r22,r5
 40182b0:	1180b236 	bltu	r2,r6,401857c <__udivdi3+0x318>
 40182b4:	00803fc4 	movi	r2,255
 40182b8:	1185803a 	cmpltu	r2,r2,r6
 40182bc:	100490fa 	slli	r2,r2,3
 40182c0:	3086d83a 	srl	r3,r6,r2
 40182c4:	010100b4 	movhi	r4,1026
 40182c8:	211c5704 	addi	r4,r4,29020
 40182cc:	20c7883a 	add	r3,r4,r3
 40182d0:	18c00003 	ldbu	r3,0(r3)
 40182d4:	1885883a 	add	r2,r3,r2
 40182d8:	00c00804 	movi	r3,32
 40182dc:	1887c83a 	sub	r3,r3,r2
 40182e0:	18000526 	beq	r3,zero,40182f8 <__udivdi3+0x94>
 40182e4:	80e0983a 	sll	r16,r16,r3
 40182e8:	9884d83a 	srl	r2,r19,r2
 40182ec:	30e2983a 	sll	r17,r6,r3
 40182f0:	98e4983a 	sll	r18,r19,r3
 40182f4:	142cb03a 	or	r22,r2,r16
 40182f8:	882ad43a 	srli	r21,r17,16
 40182fc:	b009883a 	mov	r4,r22
 4018300:	8d3fffcc 	andi	r20,r17,65535
 4018304:	a80b883a 	mov	r5,r21
 4018308:	400d3100 	call	400d310 <__umodsi3>
 401830c:	b009883a 	mov	r4,r22
 4018310:	a80b883a 	mov	r5,r21
 4018314:	1027883a 	mov	r19,r2
 4018318:	400d2ac0 	call	400d2ac <__udivsi3>
 401831c:	100b883a 	mov	r5,r2
 4018320:	a009883a 	mov	r4,r20
 4018324:	102d883a 	mov	r22,r2
 4018328:	400d3680 	call	400d368 <__mulsi3>
 401832c:	9826943a 	slli	r19,r19,16
 4018330:	9006d43a 	srli	r3,r18,16
 4018334:	1cc6b03a 	or	r3,r3,r19
 4018338:	1880052e 	bgeu	r3,r2,4018350 <__udivdi3+0xec>
 401833c:	1c47883a 	add	r3,r3,r17
 4018340:	b13fffc4 	addi	r4,r22,-1
 4018344:	1c400136 	bltu	r3,r17,401834c <__udivdi3+0xe8>
 4018348:	18814236 	bltu	r3,r2,4018854 <__udivdi3+0x5f0>
 401834c:	202d883a 	mov	r22,r4
 4018350:	18a1c83a 	sub	r16,r3,r2
 4018354:	8009883a 	mov	r4,r16
 4018358:	a80b883a 	mov	r5,r21
 401835c:	400d3100 	call	400d310 <__umodsi3>
 4018360:	1027883a 	mov	r19,r2
 4018364:	8009883a 	mov	r4,r16
 4018368:	a80b883a 	mov	r5,r21
 401836c:	9826943a 	slli	r19,r19,16
 4018370:	400d2ac0 	call	400d2ac <__udivsi3>
 4018374:	100b883a 	mov	r5,r2
 4018378:	a009883a 	mov	r4,r20
 401837c:	94bfffcc 	andi	r18,r18,65535
 4018380:	1021883a 	mov	r16,r2
 4018384:	94e4b03a 	or	r18,r18,r19
 4018388:	400d3680 	call	400d368 <__mulsi3>
 401838c:	9080052e 	bgeu	r18,r2,40183a4 <__udivdi3+0x140>
 4018390:	8ca5883a 	add	r18,r17,r18
 4018394:	80ffffc4 	addi	r3,r16,-1
 4018398:	94410c36 	bltu	r18,r17,40187cc <__udivdi3+0x568>
 401839c:	90810b2e 	bgeu	r18,r2,40187cc <__udivdi3+0x568>
 40183a0:	843fff84 	addi	r16,r16,-2
 40183a4:	b004943a 	slli	r2,r22,16
 40183a8:	0007883a 	mov	r3,zero
 40183ac:	1404b03a 	or	r2,r2,r16
 40183b0:	00005e06 	br	401852c <__udivdi3+0x2c8>
 40183b4:	29c05b36 	bltu	r5,r7,4018524 <__udivdi3+0x2c0>
 40183b8:	00bfffd4 	movui	r2,65535
 40183bc:	11c0672e 	bgeu	r2,r7,401855c <__udivdi3+0x2f8>
 40183c0:	00804034 	movhi	r2,256
 40183c4:	10bfffc4 	addi	r2,r2,-1
 40183c8:	11c10a36 	bltu	r2,r7,40187f4 <__udivdi3+0x590>
 40183cc:	00800404 	movi	r2,16
 40183d0:	3886d83a 	srl	r3,r7,r2
 40183d4:	010100b4 	movhi	r4,1026
 40183d8:	211c5704 	addi	r4,r4,29020
 40183dc:	20c7883a 	add	r3,r4,r3
 40183e0:	18c00003 	ldbu	r3,0(r3)
 40183e4:	05c00804 	movi	r23,32
 40183e8:	1885883a 	add	r2,r3,r2
 40183ec:	b8afc83a 	sub	r23,r23,r2
 40183f0:	b800671e 	bne	r23,zero,4018590 <__udivdi3+0x32c>
 40183f4:	3c010536 	bltu	r7,r16,401880c <__udivdi3+0x5a8>
 40183f8:	9985403a 	cmpgeu	r2,r19,r6
 40183fc:	0007883a 	mov	r3,zero
 4018400:	00004a06 	br	401852c <__udivdi3+0x2c8>
 4018404:	3000041e 	bne	r6,zero,4018418 <__udivdi3+0x1b4>
 4018408:	000b883a 	mov	r5,zero
 401840c:	01000044 	movi	r4,1
 4018410:	400d2ac0 	call	400d2ac <__udivsi3>
 4018414:	1023883a 	mov	r17,r2
 4018418:	00bfffd4 	movui	r2,65535
 401841c:	1440532e 	bgeu	r2,r17,401856c <__udivdi3+0x308>
 4018420:	00804034 	movhi	r2,256
 4018424:	10bfffc4 	addi	r2,r2,-1
 4018428:	1440f436 	bltu	r2,r17,40187fc <__udivdi3+0x598>
 401842c:	00800404 	movi	r2,16
 4018430:	8886d83a 	srl	r3,r17,r2
 4018434:	010100b4 	movhi	r4,1026
 4018438:	211c5704 	addi	r4,r4,29020
 401843c:	20c7883a 	add	r3,r4,r3
 4018440:	18c00003 	ldbu	r3,0(r3)
 4018444:	1885883a 	add	r2,r3,r2
 4018448:	00c00804 	movi	r3,32
 401844c:	1887c83a 	sub	r3,r3,r2
 4018450:	1800a51e 	bne	r3,zero,40186e8 <__udivdi3+0x484>
 4018454:	882ad43a 	srli	r21,r17,16
 4018458:	8461c83a 	sub	r16,r16,r17
 401845c:	8d3fffcc 	andi	r20,r17,65535
 4018460:	00c00044 	movi	r3,1
 4018464:	a80b883a 	mov	r5,r21
 4018468:	8009883a 	mov	r4,r16
 401846c:	d8c00115 	stw	r3,4(sp)
 4018470:	400d3100 	call	400d310 <__umodsi3>
 4018474:	a80b883a 	mov	r5,r21
 4018478:	8009883a 	mov	r4,r16
 401847c:	1027883a 	mov	r19,r2
 4018480:	400d2ac0 	call	400d2ac <__udivsi3>
 4018484:	a00b883a 	mov	r5,r20
 4018488:	1009883a 	mov	r4,r2
 401848c:	102d883a 	mov	r22,r2
 4018490:	400d3680 	call	400d368 <__mulsi3>
 4018494:	9826943a 	slli	r19,r19,16
 4018498:	900ed43a 	srli	r7,r18,16
 401849c:	d8c00117 	ldw	r3,4(sp)
 40184a0:	3cceb03a 	or	r7,r7,r19
 40184a4:	3880052e 	bgeu	r7,r2,40184bc <__udivdi3+0x258>
 40184a8:	3c4f883a 	add	r7,r7,r17
 40184ac:	b13fffc4 	addi	r4,r22,-1
 40184b0:	3c400136 	bltu	r7,r17,40184b8 <__udivdi3+0x254>
 40184b4:	3880e436 	bltu	r7,r2,4018848 <__udivdi3+0x5e4>
 40184b8:	202d883a 	mov	r22,r4
 40184bc:	38a1c83a 	sub	r16,r7,r2
 40184c0:	8009883a 	mov	r4,r16
 40184c4:	a80b883a 	mov	r5,r21
 40184c8:	d8c00115 	stw	r3,4(sp)
 40184cc:	400d3100 	call	400d310 <__umodsi3>
 40184d0:	1027883a 	mov	r19,r2
 40184d4:	8009883a 	mov	r4,r16
 40184d8:	a80b883a 	mov	r5,r21
 40184dc:	9826943a 	slli	r19,r19,16
 40184e0:	400d2ac0 	call	400d2ac <__udivsi3>
 40184e4:	a00b883a 	mov	r5,r20
 40184e8:	1009883a 	mov	r4,r2
 40184ec:	94bfffcc 	andi	r18,r18,65535
 40184f0:	1021883a 	mov	r16,r2
 40184f4:	94e4b03a 	or	r18,r18,r19
 40184f8:	400d3680 	call	400d368 <__mulsi3>
 40184fc:	d8c00117 	ldw	r3,4(sp)
 4018500:	9080052e 	bgeu	r18,r2,4018518 <__udivdi3+0x2b4>
 4018504:	8ca5883a 	add	r18,r17,r18
 4018508:	813fffc4 	addi	r4,r16,-1
 401850c:	9440ad36 	bltu	r18,r17,40187c4 <__udivdi3+0x560>
 4018510:	9080ac2e 	bgeu	r18,r2,40187c4 <__udivdi3+0x560>
 4018514:	843fff84 	addi	r16,r16,-2
 4018518:	b004943a 	slli	r2,r22,16
 401851c:	1404b03a 	or	r2,r2,r16
 4018520:	00000206 	br	401852c <__udivdi3+0x2c8>
 4018524:	0007883a 	mov	r3,zero
 4018528:	0005883a 	mov	r2,zero
 401852c:	dfc00b17 	ldw	ra,44(sp)
 4018530:	df000a17 	ldw	fp,40(sp)
 4018534:	ddc00917 	ldw	r23,36(sp)
 4018538:	dd800817 	ldw	r22,32(sp)
 401853c:	dd400717 	ldw	r21,28(sp)
 4018540:	dd000617 	ldw	r20,24(sp)
 4018544:	dcc00517 	ldw	r19,20(sp)
 4018548:	dc800417 	ldw	r18,16(sp)
 401854c:	dc400317 	ldw	r17,12(sp)
 4018550:	dc000217 	ldw	r16,8(sp)
 4018554:	dec00c04 	addi	sp,sp,48
 4018558:	f800283a 	ret
 401855c:	00803fc4 	movi	r2,255
 4018560:	11c5803a 	cmpltu	r2,r2,r7
 4018564:	100490fa 	slli	r2,r2,3
 4018568:	003f9906 	br	40183d0 <__alt_data_end+0xfc0183d0>
 401856c:	00803fc4 	movi	r2,255
 4018570:	1445803a 	cmpltu	r2,r2,r17
 4018574:	100490fa 	slli	r2,r2,3
 4018578:	003fad06 	br	4018430 <__alt_data_end+0xfc018430>
 401857c:	00804034 	movhi	r2,256
 4018580:	10bfffc4 	addi	r2,r2,-1
 4018584:	11809f36 	bltu	r2,r6,4018804 <__udivdi3+0x5a0>
 4018588:	00800404 	movi	r2,16
 401858c:	003f4c06 	br	40182c0 <__alt_data_end+0xfc0182c0>
 4018590:	3dce983a 	sll	r7,r7,r23
 4018594:	30b8d83a 	srl	fp,r6,r2
 4018598:	80a2d83a 	srl	r17,r16,r2
 401859c:	35cc983a 	sll	r6,r6,r23
 40185a0:	3f38b03a 	or	fp,r7,fp
 40185a4:	e024d43a 	srli	r18,fp,16
 40185a8:	9884d83a 	srl	r2,r19,r2
 40185ac:	85e0983a 	sll	r16,r16,r23
 40185b0:	8809883a 	mov	r4,r17
 40185b4:	900b883a 	mov	r5,r18
 40185b8:	d9800015 	stw	r6,0(sp)
 40185bc:	1420b03a 	or	r16,r2,r16
 40185c0:	400d3100 	call	400d310 <__umodsi3>
 40185c4:	900b883a 	mov	r5,r18
 40185c8:	8809883a 	mov	r4,r17
 40185cc:	1029883a 	mov	r20,r2
 40185d0:	e5bfffcc 	andi	r22,fp,65535
 40185d4:	400d2ac0 	call	400d2ac <__udivsi3>
 40185d8:	100b883a 	mov	r5,r2
 40185dc:	b009883a 	mov	r4,r22
 40185e0:	102b883a 	mov	r21,r2
 40185e4:	400d3680 	call	400d368 <__mulsi3>
 40185e8:	a028943a 	slli	r20,r20,16
 40185ec:	8006d43a 	srli	r3,r16,16
 40185f0:	1d06b03a 	or	r3,r3,r20
 40185f4:	1880042e 	bgeu	r3,r2,4018608 <__udivdi3+0x3a4>
 40185f8:	1f07883a 	add	r3,r3,fp
 40185fc:	a93fffc4 	addi	r4,r21,-1
 4018600:	1f00892e 	bgeu	r3,fp,4018828 <__udivdi3+0x5c4>
 4018604:	202b883a 	mov	r21,r4
 4018608:	18a3c83a 	sub	r17,r3,r2
 401860c:	8809883a 	mov	r4,r17
 4018610:	900b883a 	mov	r5,r18
 4018614:	400d3100 	call	400d310 <__umodsi3>
 4018618:	1029883a 	mov	r20,r2
 401861c:	8809883a 	mov	r4,r17
 4018620:	900b883a 	mov	r5,r18
 4018624:	a028943a 	slli	r20,r20,16
 4018628:	400d2ac0 	call	400d2ac <__udivsi3>
 401862c:	100b883a 	mov	r5,r2
 4018630:	b009883a 	mov	r4,r22
 4018634:	843fffcc 	andi	r16,r16,65535
 4018638:	1023883a 	mov	r17,r2
 401863c:	8520b03a 	or	r16,r16,r20
 4018640:	400d3680 	call	400d368 <__mulsi3>
 4018644:	8080042e 	bgeu	r16,r2,4018658 <__udivdi3+0x3f4>
 4018648:	8721883a 	add	r16,r16,fp
 401864c:	88ffffc4 	addi	r3,r17,-1
 4018650:	8700712e 	bgeu	r16,fp,4018818 <__udivdi3+0x5b4>
 4018654:	1823883a 	mov	r17,r3
 4018658:	a80e943a 	slli	r7,r21,16
 401865c:	d8c00017 	ldw	r3,0(sp)
 4018660:	80a1c83a 	sub	r16,r16,r2
 4018664:	3c64b03a 	or	r18,r7,r17
 4018668:	1d3fffcc 	andi	r20,r3,65535
 401866c:	9022d43a 	srli	r17,r18,16
 4018670:	95bfffcc 	andi	r22,r18,65535
 4018674:	a00b883a 	mov	r5,r20
 4018678:	b009883a 	mov	r4,r22
 401867c:	182ad43a 	srli	r21,r3,16
 4018680:	400d3680 	call	400d368 <__mulsi3>
 4018684:	a00b883a 	mov	r5,r20
 4018688:	8809883a 	mov	r4,r17
 401868c:	1039883a 	mov	fp,r2
 4018690:	400d3680 	call	400d368 <__mulsi3>
 4018694:	8809883a 	mov	r4,r17
 4018698:	a80b883a 	mov	r5,r21
 401869c:	1029883a 	mov	r20,r2
 40186a0:	400d3680 	call	400d368 <__mulsi3>
 40186a4:	a80b883a 	mov	r5,r21
 40186a8:	b009883a 	mov	r4,r22
 40186ac:	1023883a 	mov	r17,r2
 40186b0:	400d3680 	call	400d368 <__mulsi3>
 40186b4:	e006d43a 	srli	r3,fp,16
 40186b8:	1505883a 	add	r2,r2,r20
 40186bc:	1887883a 	add	r3,r3,r2
 40186c0:	1d00022e 	bgeu	r3,r20,40186cc <__udivdi3+0x468>
 40186c4:	00800074 	movhi	r2,1
 40186c8:	88a3883a 	add	r17,r17,r2
 40186cc:	1804d43a 	srli	r2,r3,16
 40186d0:	1463883a 	add	r17,r2,r17
 40186d4:	84404436 	bltu	r16,r17,40187e8 <__udivdi3+0x584>
 40186d8:	84403e26 	beq	r16,r17,40187d4 <__udivdi3+0x570>
 40186dc:	9005883a 	mov	r2,r18
 40186e0:	0007883a 	mov	r3,zero
 40186e4:	003f9106 	br	401852c <__alt_data_end+0xfc01852c>
 40186e8:	88e2983a 	sll	r17,r17,r3
 40186ec:	80aed83a 	srl	r23,r16,r2
 40186f0:	80e0983a 	sll	r16,r16,r3
 40186f4:	882ad43a 	srli	r21,r17,16
 40186f8:	9884d83a 	srl	r2,r19,r2
 40186fc:	b809883a 	mov	r4,r23
 4018700:	a80b883a 	mov	r5,r21
 4018704:	98e4983a 	sll	r18,r19,r3
 4018708:	142cb03a 	or	r22,r2,r16
 401870c:	400d3100 	call	400d310 <__umodsi3>
 4018710:	b809883a 	mov	r4,r23
 4018714:	a80b883a 	mov	r5,r21
 4018718:	1027883a 	mov	r19,r2
 401871c:	8d3fffcc 	andi	r20,r17,65535
 4018720:	400d2ac0 	call	400d2ac <__udivsi3>
 4018724:	a009883a 	mov	r4,r20
 4018728:	100b883a 	mov	r5,r2
 401872c:	102f883a 	mov	r23,r2
 4018730:	400d3680 	call	400d368 <__mulsi3>
 4018734:	9826943a 	slli	r19,r19,16
 4018738:	b008d43a 	srli	r4,r22,16
 401873c:	24c8b03a 	or	r4,r4,r19
 4018740:	2080062e 	bgeu	r4,r2,401875c <__udivdi3+0x4f8>
 4018744:	2449883a 	add	r4,r4,r17
 4018748:	b8ffffc4 	addi	r3,r23,-1
 401874c:	24403c36 	bltu	r4,r17,4018840 <__udivdi3+0x5dc>
 4018750:	20803b2e 	bgeu	r4,r2,4018840 <__udivdi3+0x5dc>
 4018754:	bdffff84 	addi	r23,r23,-2
 4018758:	2449883a 	add	r4,r4,r17
 401875c:	20a1c83a 	sub	r16,r4,r2
 4018760:	a80b883a 	mov	r5,r21
 4018764:	8009883a 	mov	r4,r16
 4018768:	400d3100 	call	400d310 <__umodsi3>
 401876c:	a80b883a 	mov	r5,r21
 4018770:	8009883a 	mov	r4,r16
 4018774:	1027883a 	mov	r19,r2
 4018778:	400d2ac0 	call	400d2ac <__udivsi3>
 401877c:	a009883a 	mov	r4,r20
 4018780:	100b883a 	mov	r5,r2
 4018784:	9826943a 	slli	r19,r19,16
 4018788:	1039883a 	mov	fp,r2
 401878c:	400d3680 	call	400d368 <__mulsi3>
 4018790:	b13fffcc 	andi	r4,r22,65535
 4018794:	24c8b03a 	or	r4,r4,r19
 4018798:	2080062e 	bgeu	r4,r2,40187b4 <__udivdi3+0x550>
 401879c:	2449883a 	add	r4,r4,r17
 40187a0:	e0ffffc4 	addi	r3,fp,-1
 40187a4:	24402436 	bltu	r4,r17,4018838 <__udivdi3+0x5d4>
 40187a8:	2080232e 	bgeu	r4,r2,4018838 <__udivdi3+0x5d4>
 40187ac:	e73fff84 	addi	fp,fp,-2
 40187b0:	2449883a 	add	r4,r4,r17
 40187b4:	b82e943a 	slli	r23,r23,16
 40187b8:	20a1c83a 	sub	r16,r4,r2
 40187bc:	bf06b03a 	or	r3,r23,fp
 40187c0:	003f2806 	br	4018464 <__alt_data_end+0xfc018464>
 40187c4:	2021883a 	mov	r16,r4
 40187c8:	003f5306 	br	4018518 <__alt_data_end+0xfc018518>
 40187cc:	1821883a 	mov	r16,r3
 40187d0:	003ef406 	br	40183a4 <__alt_data_end+0xfc0183a4>
 40187d4:	1806943a 	slli	r3,r3,16
 40187d8:	9de6983a 	sll	r19,r19,r23
 40187dc:	e73fffcc 	andi	fp,fp,65535
 40187e0:	1f07883a 	add	r3,r3,fp
 40187e4:	98ffbd2e 	bgeu	r19,r3,40186dc <__alt_data_end+0xfc0186dc>
 40187e8:	90bfffc4 	addi	r2,r18,-1
 40187ec:	0007883a 	mov	r3,zero
 40187f0:	003f4e06 	br	401852c <__alt_data_end+0xfc01852c>
 40187f4:	00800604 	movi	r2,24
 40187f8:	003ef506 	br	40183d0 <__alt_data_end+0xfc0183d0>
 40187fc:	00800604 	movi	r2,24
 4018800:	003f0b06 	br	4018430 <__alt_data_end+0xfc018430>
 4018804:	00800604 	movi	r2,24
 4018808:	003ead06 	br	40182c0 <__alt_data_end+0xfc0182c0>
 401880c:	0007883a 	mov	r3,zero
 4018810:	00800044 	movi	r2,1
 4018814:	003f4506 	br	401852c <__alt_data_end+0xfc01852c>
 4018818:	80bf8e2e 	bgeu	r16,r2,4018654 <__alt_data_end+0xfc018654>
 401881c:	8c7fff84 	addi	r17,r17,-2
 4018820:	8721883a 	add	r16,r16,fp
 4018824:	003f8c06 	br	4018658 <__alt_data_end+0xfc018658>
 4018828:	18bf762e 	bgeu	r3,r2,4018604 <__alt_data_end+0xfc018604>
 401882c:	ad7fff84 	addi	r21,r21,-2
 4018830:	1f07883a 	add	r3,r3,fp
 4018834:	003f7406 	br	4018608 <__alt_data_end+0xfc018608>
 4018838:	1839883a 	mov	fp,r3
 401883c:	003fdd06 	br	40187b4 <__alt_data_end+0xfc0187b4>
 4018840:	182f883a 	mov	r23,r3
 4018844:	003fc506 	br	401875c <__alt_data_end+0xfc01875c>
 4018848:	b5bfff84 	addi	r22,r22,-2
 401884c:	3c4f883a 	add	r7,r7,r17
 4018850:	003f1a06 	br	40184bc <__alt_data_end+0xfc0184bc>
 4018854:	b5bfff84 	addi	r22,r22,-2
 4018858:	1c47883a 	add	r3,r3,r17
 401885c:	003ebc06 	br	4018350 <__alt_data_end+0xfc018350>

04018860 <__umoddi3>:
 4018860:	defff304 	addi	sp,sp,-52
 4018864:	df000b15 	stw	fp,44(sp)
 4018868:	dc400415 	stw	r17,16(sp)
 401886c:	dc000315 	stw	r16,12(sp)
 4018870:	dfc00c15 	stw	ra,48(sp)
 4018874:	ddc00a15 	stw	r23,40(sp)
 4018878:	dd800915 	stw	r22,36(sp)
 401887c:	dd400815 	stw	r21,32(sp)
 4018880:	dd000715 	stw	r20,28(sp)
 4018884:	dcc00615 	stw	r19,24(sp)
 4018888:	dc800515 	stw	r18,20(sp)
 401888c:	2021883a 	mov	r16,r4
 4018890:	2823883a 	mov	r17,r5
 4018894:	2839883a 	mov	fp,r5
 4018898:	3800401e 	bne	r7,zero,401899c <__umoddi3+0x13c>
 401889c:	3027883a 	mov	r19,r6
 40188a0:	2029883a 	mov	r20,r4
 40188a4:	2980552e 	bgeu	r5,r6,40189fc <__umoddi3+0x19c>
 40188a8:	00bfffd4 	movui	r2,65535
 40188ac:	1180a236 	bltu	r2,r6,4018b38 <__umoddi3+0x2d8>
 40188b0:	01003fc4 	movi	r4,255
 40188b4:	2189803a 	cmpltu	r4,r4,r6
 40188b8:	200890fa 	slli	r4,r4,3
 40188bc:	3104d83a 	srl	r2,r6,r4
 40188c0:	00c100b4 	movhi	r3,1026
 40188c4:	18dc5704 	addi	r3,r3,29020
 40188c8:	1885883a 	add	r2,r3,r2
 40188cc:	10c00003 	ldbu	r3,0(r2)
 40188d0:	00800804 	movi	r2,32
 40188d4:	1909883a 	add	r4,r3,r4
 40188d8:	1125c83a 	sub	r18,r2,r4
 40188dc:	90000526 	beq	r18,zero,40188f4 <__umoddi3+0x94>
 40188e0:	8ca2983a 	sll	r17,r17,r18
 40188e4:	8108d83a 	srl	r4,r16,r4
 40188e8:	34a6983a 	sll	r19,r6,r18
 40188ec:	84a8983a 	sll	r20,r16,r18
 40188f0:	2478b03a 	or	fp,r4,r17
 40188f4:	982cd43a 	srli	r22,r19,16
 40188f8:	e009883a 	mov	r4,fp
 40188fc:	9dffffcc 	andi	r23,r19,65535
 4018900:	b00b883a 	mov	r5,r22
 4018904:	400d3100 	call	400d310 <__umodsi3>
 4018908:	b00b883a 	mov	r5,r22
 401890c:	e009883a 	mov	r4,fp
 4018910:	102b883a 	mov	r21,r2
 4018914:	400d2ac0 	call	400d2ac <__udivsi3>
 4018918:	100b883a 	mov	r5,r2
 401891c:	b809883a 	mov	r4,r23
 4018920:	400d3680 	call	400d368 <__mulsi3>
 4018924:	a82a943a 	slli	r21,r21,16
 4018928:	a006d43a 	srli	r3,r20,16
 401892c:	1d46b03a 	or	r3,r3,r21
 4018930:	1880032e 	bgeu	r3,r2,4018940 <__umoddi3+0xe0>
 4018934:	1cc7883a 	add	r3,r3,r19
 4018938:	1cc00136 	bltu	r3,r19,4018940 <__umoddi3+0xe0>
 401893c:	18813136 	bltu	r3,r2,4018e04 <__umoddi3+0x5a4>
 4018940:	18a1c83a 	sub	r16,r3,r2
 4018944:	b00b883a 	mov	r5,r22
 4018948:	8009883a 	mov	r4,r16
 401894c:	400d3100 	call	400d310 <__umodsi3>
 4018950:	b00b883a 	mov	r5,r22
 4018954:	8009883a 	mov	r4,r16
 4018958:	1023883a 	mov	r17,r2
 401895c:	400d2ac0 	call	400d2ac <__udivsi3>
 4018960:	100b883a 	mov	r5,r2
 4018964:	b809883a 	mov	r4,r23
 4018968:	8822943a 	slli	r17,r17,16
 401896c:	400d3680 	call	400d368 <__mulsi3>
 4018970:	a0ffffcc 	andi	r3,r20,65535
 4018974:	1c46b03a 	or	r3,r3,r17
 4018978:	1880042e 	bgeu	r3,r2,401898c <__umoddi3+0x12c>
 401897c:	1cc7883a 	add	r3,r3,r19
 4018980:	1cc00236 	bltu	r3,r19,401898c <__umoddi3+0x12c>
 4018984:	1880012e 	bgeu	r3,r2,401898c <__umoddi3+0x12c>
 4018988:	1cc7883a 	add	r3,r3,r19
 401898c:	1885c83a 	sub	r2,r3,r2
 4018990:	1484d83a 	srl	r2,r2,r18
 4018994:	0007883a 	mov	r3,zero
 4018998:	00005306 	br	4018ae8 <__umoddi3+0x288>
 401899c:	29c05036 	bltu	r5,r7,4018ae0 <__umoddi3+0x280>
 40189a0:	00bfffd4 	movui	r2,65535
 40189a4:	11c05c2e 	bgeu	r2,r7,4018b18 <__umoddi3+0x2b8>
 40189a8:	00804034 	movhi	r2,256
 40189ac:	10bfffc4 	addi	r2,r2,-1
 40189b0:	11c10636 	bltu	r2,r7,4018dcc <__umoddi3+0x56c>
 40189b4:	01000404 	movi	r4,16
 40189b8:	3904d83a 	srl	r2,r7,r4
 40189bc:	00c100b4 	movhi	r3,1026
 40189c0:	18dc5704 	addi	r3,r3,29020
 40189c4:	1885883a 	add	r2,r3,r2
 40189c8:	14c00003 	ldbu	r19,0(r2)
 40189cc:	00c00804 	movi	r3,32
 40189d0:	9927883a 	add	r19,r19,r4
 40189d4:	1ce9c83a 	sub	r20,r3,r19
 40189d8:	a0005c1e 	bne	r20,zero,4018b4c <__umoddi3+0x2ec>
 40189dc:	3c400136 	bltu	r7,r17,40189e4 <__umoddi3+0x184>
 40189e0:	81810a36 	bltu	r16,r6,4018e0c <__umoddi3+0x5ac>
 40189e4:	8185c83a 	sub	r2,r16,r6
 40189e8:	89e3c83a 	sub	r17,r17,r7
 40189ec:	8089803a 	cmpltu	r4,r16,r2
 40189f0:	8939c83a 	sub	fp,r17,r4
 40189f4:	e007883a 	mov	r3,fp
 40189f8:	00003b06 	br	4018ae8 <__umoddi3+0x288>
 40189fc:	3000041e 	bne	r6,zero,4018a10 <__umoddi3+0x1b0>
 4018a00:	000b883a 	mov	r5,zero
 4018a04:	01000044 	movi	r4,1
 4018a08:	400d2ac0 	call	400d2ac <__udivsi3>
 4018a0c:	1027883a 	mov	r19,r2
 4018a10:	00bfffd4 	movui	r2,65535
 4018a14:	14c0442e 	bgeu	r2,r19,4018b28 <__umoddi3+0x2c8>
 4018a18:	00804034 	movhi	r2,256
 4018a1c:	10bfffc4 	addi	r2,r2,-1
 4018a20:	14c0ec36 	bltu	r2,r19,4018dd4 <__umoddi3+0x574>
 4018a24:	00800404 	movi	r2,16
 4018a28:	9886d83a 	srl	r3,r19,r2
 4018a2c:	010100b4 	movhi	r4,1026
 4018a30:	211c5704 	addi	r4,r4,29020
 4018a34:	20c7883a 	add	r3,r4,r3
 4018a38:	18c00003 	ldbu	r3,0(r3)
 4018a3c:	1887883a 	add	r3,r3,r2
 4018a40:	00800804 	movi	r2,32
 4018a44:	10e5c83a 	sub	r18,r2,r3
 4018a48:	9000ab1e 	bne	r18,zero,4018cf8 <__umoddi3+0x498>
 4018a4c:	982cd43a 	srli	r22,r19,16
 4018a50:	8ce3c83a 	sub	r17,r17,r19
 4018a54:	9dffffcc 	andi	r23,r19,65535
 4018a58:	b00b883a 	mov	r5,r22
 4018a5c:	8809883a 	mov	r4,r17
 4018a60:	400d3100 	call	400d310 <__umodsi3>
 4018a64:	b00b883a 	mov	r5,r22
 4018a68:	8809883a 	mov	r4,r17
 4018a6c:	102b883a 	mov	r21,r2
 4018a70:	400d2ac0 	call	400d2ac <__udivsi3>
 4018a74:	b80b883a 	mov	r5,r23
 4018a78:	1009883a 	mov	r4,r2
 4018a7c:	400d3680 	call	400d368 <__mulsi3>
 4018a80:	a82a943a 	slli	r21,r21,16
 4018a84:	a006d43a 	srli	r3,r20,16
 4018a88:	1d46b03a 	or	r3,r3,r21
 4018a8c:	1880042e 	bgeu	r3,r2,4018aa0 <__umoddi3+0x240>
 4018a90:	1cc7883a 	add	r3,r3,r19
 4018a94:	1cc00236 	bltu	r3,r19,4018aa0 <__umoddi3+0x240>
 4018a98:	1880012e 	bgeu	r3,r2,4018aa0 <__umoddi3+0x240>
 4018a9c:	1cc7883a 	add	r3,r3,r19
 4018aa0:	18a1c83a 	sub	r16,r3,r2
 4018aa4:	b00b883a 	mov	r5,r22
 4018aa8:	8009883a 	mov	r4,r16
 4018aac:	400d3100 	call	400d310 <__umodsi3>
 4018ab0:	1023883a 	mov	r17,r2
 4018ab4:	b00b883a 	mov	r5,r22
 4018ab8:	8009883a 	mov	r4,r16
 4018abc:	400d2ac0 	call	400d2ac <__udivsi3>
 4018ac0:	8822943a 	slli	r17,r17,16
 4018ac4:	b80b883a 	mov	r5,r23
 4018ac8:	1009883a 	mov	r4,r2
 4018acc:	400d3680 	call	400d368 <__mulsi3>
 4018ad0:	a53fffcc 	andi	r20,r20,65535
 4018ad4:	a446b03a 	or	r3,r20,r17
 4018ad8:	18bfac2e 	bgeu	r3,r2,401898c <__alt_data_end+0xfc01898c>
 4018adc:	003fa706 	br	401897c <__alt_data_end+0xfc01897c>
 4018ae0:	2005883a 	mov	r2,r4
 4018ae4:	2807883a 	mov	r3,r5
 4018ae8:	dfc00c17 	ldw	ra,48(sp)
 4018aec:	df000b17 	ldw	fp,44(sp)
 4018af0:	ddc00a17 	ldw	r23,40(sp)
 4018af4:	dd800917 	ldw	r22,36(sp)
 4018af8:	dd400817 	ldw	r21,32(sp)
 4018afc:	dd000717 	ldw	r20,28(sp)
 4018b00:	dcc00617 	ldw	r19,24(sp)
 4018b04:	dc800517 	ldw	r18,20(sp)
 4018b08:	dc400417 	ldw	r17,16(sp)
 4018b0c:	dc000317 	ldw	r16,12(sp)
 4018b10:	dec00d04 	addi	sp,sp,52
 4018b14:	f800283a 	ret
 4018b18:	04c03fc4 	movi	r19,255
 4018b1c:	99c9803a 	cmpltu	r4,r19,r7
 4018b20:	200890fa 	slli	r4,r4,3
 4018b24:	003fa406 	br	40189b8 <__alt_data_end+0xfc0189b8>
 4018b28:	00803fc4 	movi	r2,255
 4018b2c:	14c5803a 	cmpltu	r2,r2,r19
 4018b30:	100490fa 	slli	r2,r2,3
 4018b34:	003fbc06 	br	4018a28 <__alt_data_end+0xfc018a28>
 4018b38:	00804034 	movhi	r2,256
 4018b3c:	10bfffc4 	addi	r2,r2,-1
 4018b40:	1180a636 	bltu	r2,r6,4018ddc <__umoddi3+0x57c>
 4018b44:	01000404 	movi	r4,16
 4018b48:	003f5c06 	br	40188bc <__alt_data_end+0xfc0188bc>
 4018b4c:	3d0e983a 	sll	r7,r7,r20
 4018b50:	34ead83a 	srl	r21,r6,r19
 4018b54:	8cc6d83a 	srl	r3,r17,r19
 4018b58:	8d10983a 	sll	r8,r17,r20
 4018b5c:	3d6ab03a 	or	r21,r7,r21
 4018b60:	a82cd43a 	srli	r22,r21,16
 4018b64:	84e2d83a 	srl	r17,r16,r19
 4018b68:	1809883a 	mov	r4,r3
 4018b6c:	b00b883a 	mov	r5,r22
 4018b70:	8a22b03a 	or	r17,r17,r8
 4018b74:	3524983a 	sll	r18,r6,r20
 4018b78:	dc400015 	stw	r17,0(sp)
 4018b7c:	d8c00115 	stw	r3,4(sp)
 4018b80:	400d3100 	call	400d310 <__umodsi3>
 4018b84:	d8c00117 	ldw	r3,4(sp)
 4018b88:	b00b883a 	mov	r5,r22
 4018b8c:	1039883a 	mov	fp,r2
 4018b90:	1809883a 	mov	r4,r3
 4018b94:	400d2ac0 	call	400d2ac <__udivsi3>
 4018b98:	adffffcc 	andi	r23,r21,65535
 4018b9c:	100b883a 	mov	r5,r2
 4018ba0:	b809883a 	mov	r4,r23
 4018ba4:	1023883a 	mov	r17,r2
 4018ba8:	400d3680 	call	400d368 <__mulsi3>
 4018bac:	d9400017 	ldw	r5,0(sp)
 4018bb0:	e008943a 	slli	r4,fp,16
 4018bb4:	8520983a 	sll	r16,r16,r20
 4018bb8:	2806d43a 	srli	r3,r5,16
 4018bbc:	1906b03a 	or	r3,r3,r4
 4018bc0:	1880042e 	bgeu	r3,r2,4018bd4 <__umoddi3+0x374>
 4018bc4:	1d47883a 	add	r3,r3,r21
 4018bc8:	893fffc4 	addi	r4,r17,-1
 4018bcc:	1d40892e 	bgeu	r3,r21,4018df4 <__umoddi3+0x594>
 4018bd0:	2023883a 	mov	r17,r4
 4018bd4:	18b9c83a 	sub	fp,r3,r2
 4018bd8:	b00b883a 	mov	r5,r22
 4018bdc:	e009883a 	mov	r4,fp
 4018be0:	400d3100 	call	400d310 <__umodsi3>
 4018be4:	b00b883a 	mov	r5,r22
 4018be8:	e009883a 	mov	r4,fp
 4018bec:	d8800215 	stw	r2,8(sp)
 4018bf0:	400d2ac0 	call	400d2ac <__udivsi3>
 4018bf4:	100b883a 	mov	r5,r2
 4018bf8:	b809883a 	mov	r4,r23
 4018bfc:	102d883a 	mov	r22,r2
 4018c00:	400d3680 	call	400d368 <__mulsi3>
 4018c04:	d9800217 	ldw	r6,8(sp)
 4018c08:	d8c00017 	ldw	r3,0(sp)
 4018c0c:	300c943a 	slli	r6,r6,16
 4018c10:	1a3fffcc 	andi	r8,r3,65535
 4018c14:	4190b03a 	or	r8,r8,r6
 4018c18:	4080042e 	bgeu	r8,r2,4018c2c <__umoddi3+0x3cc>
 4018c1c:	4551883a 	add	r8,r8,r21
 4018c20:	b0ffffc4 	addi	r3,r22,-1
 4018c24:	45406f2e 	bgeu	r8,r21,4018de4 <__umoddi3+0x584>
 4018c28:	182d883a 	mov	r22,r3
 4018c2c:	880e943a 	slli	r7,r17,16
 4018c30:	9006d43a 	srli	r3,r18,16
 4018c34:	91bfffcc 	andi	r6,r18,65535
 4018c38:	3dacb03a 	or	r22,r7,r22
 4018c3c:	b02ed43a 	srli	r23,r22,16
 4018c40:	b5bfffcc 	andi	r22,r22,65535
 4018c44:	300b883a 	mov	r5,r6
 4018c48:	b009883a 	mov	r4,r22
 4018c4c:	40a3c83a 	sub	r17,r8,r2
 4018c50:	d8c00115 	stw	r3,4(sp)
 4018c54:	d9800215 	stw	r6,8(sp)
 4018c58:	400d3680 	call	400d368 <__mulsi3>
 4018c5c:	d9800217 	ldw	r6,8(sp)
 4018c60:	b809883a 	mov	r4,r23
 4018c64:	1039883a 	mov	fp,r2
 4018c68:	300b883a 	mov	r5,r6
 4018c6c:	400d3680 	call	400d368 <__mulsi3>
 4018c70:	d8c00117 	ldw	r3,4(sp)
 4018c74:	b809883a 	mov	r4,r23
 4018c78:	d8800215 	stw	r2,8(sp)
 4018c7c:	180b883a 	mov	r5,r3
 4018c80:	400d3680 	call	400d368 <__mulsi3>
 4018c84:	d8c00117 	ldw	r3,4(sp)
 4018c88:	b009883a 	mov	r4,r22
 4018c8c:	102f883a 	mov	r23,r2
 4018c90:	180b883a 	mov	r5,r3
 4018c94:	400d3680 	call	400d368 <__mulsi3>
 4018c98:	d9800217 	ldw	r6,8(sp)
 4018c9c:	e006d43a 	srli	r3,fp,16
 4018ca0:	1185883a 	add	r2,r2,r6
 4018ca4:	1885883a 	add	r2,r3,r2
 4018ca8:	1180022e 	bgeu	r2,r6,4018cb4 <__umoddi3+0x454>
 4018cac:	00c00074 	movhi	r3,1
 4018cb0:	b8ef883a 	add	r23,r23,r3
 4018cb4:	1006d43a 	srli	r3,r2,16
 4018cb8:	1004943a 	slli	r2,r2,16
 4018cbc:	e73fffcc 	andi	fp,fp,65535
 4018cc0:	1dc7883a 	add	r3,r3,r23
 4018cc4:	1739883a 	add	fp,r2,fp
 4018cc8:	88c03a36 	bltu	r17,r3,4018db4 <__umoddi3+0x554>
 4018ccc:	88c05126 	beq	r17,r3,4018e14 <__umoddi3+0x5b4>
 4018cd0:	88c9c83a 	sub	r4,r17,r3
 4018cd4:	e00f883a 	mov	r7,fp
 4018cd8:	81cfc83a 	sub	r7,r16,r7
 4018cdc:	81c7803a 	cmpltu	r3,r16,r7
 4018ce0:	20c7c83a 	sub	r3,r4,r3
 4018ce4:	1cc4983a 	sll	r2,r3,r19
 4018ce8:	3d0ed83a 	srl	r7,r7,r20
 4018cec:	1d06d83a 	srl	r3,r3,r20
 4018cf0:	11c4b03a 	or	r2,r2,r7
 4018cf4:	003f7c06 	br	4018ae8 <__alt_data_end+0xfc018ae8>
 4018cf8:	9ca6983a 	sll	r19,r19,r18
 4018cfc:	88f8d83a 	srl	fp,r17,r3
 4018d00:	80c4d83a 	srl	r2,r16,r3
 4018d04:	982cd43a 	srli	r22,r19,16
 4018d08:	8ca2983a 	sll	r17,r17,r18
 4018d0c:	e009883a 	mov	r4,fp
 4018d10:	b00b883a 	mov	r5,r22
 4018d14:	146ab03a 	or	r21,r2,r17
 4018d18:	400d3100 	call	400d310 <__umodsi3>
 4018d1c:	b00b883a 	mov	r5,r22
 4018d20:	e009883a 	mov	r4,fp
 4018d24:	1029883a 	mov	r20,r2
 4018d28:	9dffffcc 	andi	r23,r19,65535
 4018d2c:	400d2ac0 	call	400d2ac <__udivsi3>
 4018d30:	b809883a 	mov	r4,r23
 4018d34:	100b883a 	mov	r5,r2
 4018d38:	400d3680 	call	400d368 <__mulsi3>
 4018d3c:	a008943a 	slli	r4,r20,16
 4018d40:	a806d43a 	srli	r3,r21,16
 4018d44:	84a8983a 	sll	r20,r16,r18
 4018d48:	1906b03a 	or	r3,r3,r4
 4018d4c:	1880042e 	bgeu	r3,r2,4018d60 <__umoddi3+0x500>
 4018d50:	1cc7883a 	add	r3,r3,r19
 4018d54:	1cc00236 	bltu	r3,r19,4018d60 <__umoddi3+0x500>
 4018d58:	1880012e 	bgeu	r3,r2,4018d60 <__umoddi3+0x500>
 4018d5c:	1cc7883a 	add	r3,r3,r19
 4018d60:	18a3c83a 	sub	r17,r3,r2
 4018d64:	b00b883a 	mov	r5,r22
 4018d68:	8809883a 	mov	r4,r17
 4018d6c:	400d3100 	call	400d310 <__umodsi3>
 4018d70:	b00b883a 	mov	r5,r22
 4018d74:	8809883a 	mov	r4,r17
 4018d78:	1021883a 	mov	r16,r2
 4018d7c:	400d2ac0 	call	400d2ac <__udivsi3>
 4018d80:	100b883a 	mov	r5,r2
 4018d84:	b809883a 	mov	r4,r23
 4018d88:	8020943a 	slli	r16,r16,16
 4018d8c:	400d3680 	call	400d368 <__mulsi3>
 4018d90:	a8ffffcc 	andi	r3,r21,65535
 4018d94:	1c06b03a 	or	r3,r3,r16
 4018d98:	1880042e 	bgeu	r3,r2,4018dac <__umoddi3+0x54c>
 4018d9c:	1cc7883a 	add	r3,r3,r19
 4018da0:	1cc00236 	bltu	r3,r19,4018dac <__umoddi3+0x54c>
 4018da4:	1880012e 	bgeu	r3,r2,4018dac <__umoddi3+0x54c>
 4018da8:	1cc7883a 	add	r3,r3,r19
 4018dac:	18a3c83a 	sub	r17,r3,r2
 4018db0:	003f2906 	br	4018a58 <__alt_data_end+0xfc018a58>
 4018db4:	e48fc83a 	sub	r7,fp,r18
 4018db8:	1d49c83a 	sub	r4,r3,r21
 4018dbc:	e1f9803a 	cmpltu	fp,fp,r7
 4018dc0:	2739c83a 	sub	fp,r4,fp
 4018dc4:	8f09c83a 	sub	r4,r17,fp
 4018dc8:	003fc306 	br	4018cd8 <__alt_data_end+0xfc018cd8>
 4018dcc:	01000604 	movi	r4,24
 4018dd0:	003ef906 	br	40189b8 <__alt_data_end+0xfc0189b8>
 4018dd4:	00800604 	movi	r2,24
 4018dd8:	003f1306 	br	4018a28 <__alt_data_end+0xfc018a28>
 4018ddc:	01000604 	movi	r4,24
 4018de0:	003eb606 	br	40188bc <__alt_data_end+0xfc0188bc>
 4018de4:	40bf902e 	bgeu	r8,r2,4018c28 <__alt_data_end+0xfc018c28>
 4018de8:	b5bfff84 	addi	r22,r22,-2
 4018dec:	4551883a 	add	r8,r8,r21
 4018df0:	003f8e06 	br	4018c2c <__alt_data_end+0xfc018c2c>
 4018df4:	18bf762e 	bgeu	r3,r2,4018bd0 <__alt_data_end+0xfc018bd0>
 4018df8:	8c7fff84 	addi	r17,r17,-2
 4018dfc:	1d47883a 	add	r3,r3,r21
 4018e00:	003f7406 	br	4018bd4 <__alt_data_end+0xfc018bd4>
 4018e04:	1cc7883a 	add	r3,r3,r19
 4018e08:	003ecd06 	br	4018940 <__alt_data_end+0xfc018940>
 4018e0c:	8005883a 	mov	r2,r16
 4018e10:	003ef806 	br	40189f4 <__alt_data_end+0xfc0189f4>
 4018e14:	873fe736 	bltu	r16,fp,4018db4 <__alt_data_end+0xfc018db4>
 4018e18:	e00f883a 	mov	r7,fp
 4018e1c:	0009883a 	mov	r4,zero
 4018e20:	003fad06 	br	4018cd8 <__alt_data_end+0xfc018cd8>

04018e24 <__adddf3>:
 4018e24:	02c00434 	movhi	r11,16
 4018e28:	5affffc4 	addi	r11,r11,-1
 4018e2c:	2806d7fa 	srli	r3,r5,31
 4018e30:	2ad4703a 	and	r10,r5,r11
 4018e34:	3ad2703a 	and	r9,r7,r11
 4018e38:	3804d53a 	srli	r2,r7,20
 4018e3c:	3018d77a 	srli	r12,r6,29
 4018e40:	280ad53a 	srli	r5,r5,20
 4018e44:	501490fa 	slli	r10,r10,3
 4018e48:	2010d77a 	srli	r8,r4,29
 4018e4c:	481290fa 	slli	r9,r9,3
 4018e50:	380ed7fa 	srli	r7,r7,31
 4018e54:	defffb04 	addi	sp,sp,-20
 4018e58:	dc800215 	stw	r18,8(sp)
 4018e5c:	dc400115 	stw	r17,4(sp)
 4018e60:	dc000015 	stw	r16,0(sp)
 4018e64:	dfc00415 	stw	ra,16(sp)
 4018e68:	dcc00315 	stw	r19,12(sp)
 4018e6c:	1c803fcc 	andi	r18,r3,255
 4018e70:	2c01ffcc 	andi	r16,r5,2047
 4018e74:	5210b03a 	or	r8,r10,r8
 4018e78:	202290fa 	slli	r17,r4,3
 4018e7c:	1081ffcc 	andi	r2,r2,2047
 4018e80:	4b12b03a 	or	r9,r9,r12
 4018e84:	300c90fa 	slli	r6,r6,3
 4018e88:	91c07526 	beq	r18,r7,4019060 <__adddf3+0x23c>
 4018e8c:	8087c83a 	sub	r3,r16,r2
 4018e90:	00c0ab0e 	bge	zero,r3,4019140 <__adddf3+0x31c>
 4018e94:	10002a1e 	bne	r2,zero,4018f40 <__adddf3+0x11c>
 4018e98:	4984b03a 	or	r2,r9,r6
 4018e9c:	1000961e 	bne	r2,zero,40190f8 <__adddf3+0x2d4>
 4018ea0:	888001cc 	andi	r2,r17,7
 4018ea4:	10000726 	beq	r2,zero,4018ec4 <__adddf3+0xa0>
 4018ea8:	888003cc 	andi	r2,r17,15
 4018eac:	00c00104 	movi	r3,4
 4018eb0:	10c00426 	beq	r2,r3,4018ec4 <__adddf3+0xa0>
 4018eb4:	88c7883a 	add	r3,r17,r3
 4018eb8:	1c63803a 	cmpltu	r17,r3,r17
 4018ebc:	4451883a 	add	r8,r8,r17
 4018ec0:	1823883a 	mov	r17,r3
 4018ec4:	4080202c 	andhi	r2,r8,128
 4018ec8:	10005926 	beq	r2,zero,4019030 <__adddf3+0x20c>
 4018ecc:	84000044 	addi	r16,r16,1
 4018ed0:	0081ffc4 	movi	r2,2047
 4018ed4:	8080ba26 	beq	r16,r2,40191c0 <__adddf3+0x39c>
 4018ed8:	00bfe034 	movhi	r2,65408
 4018edc:	10bfffc4 	addi	r2,r2,-1
 4018ee0:	4090703a 	and	r8,r8,r2
 4018ee4:	4004977a 	slli	r2,r8,29
 4018ee8:	4010927a 	slli	r8,r8,9
 4018eec:	8822d0fa 	srli	r17,r17,3
 4018ef0:	8401ffcc 	andi	r16,r16,2047
 4018ef4:	4010d33a 	srli	r8,r8,12
 4018ef8:	9007883a 	mov	r3,r18
 4018efc:	1444b03a 	or	r2,r2,r17
 4018f00:	8401ffcc 	andi	r16,r16,2047
 4018f04:	8020953a 	slli	r16,r16,20
 4018f08:	18c03fcc 	andi	r3,r3,255
 4018f0c:	01000434 	movhi	r4,16
 4018f10:	213fffc4 	addi	r4,r4,-1
 4018f14:	180697fa 	slli	r3,r3,31
 4018f18:	4110703a 	and	r8,r8,r4
 4018f1c:	4410b03a 	or	r8,r8,r16
 4018f20:	40c6b03a 	or	r3,r8,r3
 4018f24:	dfc00417 	ldw	ra,16(sp)
 4018f28:	dcc00317 	ldw	r19,12(sp)
 4018f2c:	dc800217 	ldw	r18,8(sp)
 4018f30:	dc400117 	ldw	r17,4(sp)
 4018f34:	dc000017 	ldw	r16,0(sp)
 4018f38:	dec00504 	addi	sp,sp,20
 4018f3c:	f800283a 	ret
 4018f40:	0081ffc4 	movi	r2,2047
 4018f44:	80bfd626 	beq	r16,r2,4018ea0 <__alt_data_end+0xfc018ea0>
 4018f48:	4a402034 	orhi	r9,r9,128
 4018f4c:	00800e04 	movi	r2,56
 4018f50:	10c09f16 	blt	r2,r3,40191d0 <__adddf3+0x3ac>
 4018f54:	008007c4 	movi	r2,31
 4018f58:	10c0c216 	blt	r2,r3,4019264 <__adddf3+0x440>
 4018f5c:	00800804 	movi	r2,32
 4018f60:	10c5c83a 	sub	r2,r2,r3
 4018f64:	488a983a 	sll	r5,r9,r2
 4018f68:	30c8d83a 	srl	r4,r6,r3
 4018f6c:	3084983a 	sll	r2,r6,r2
 4018f70:	48c6d83a 	srl	r3,r9,r3
 4018f74:	290cb03a 	or	r6,r5,r4
 4018f78:	1004c03a 	cmpne	r2,r2,zero
 4018f7c:	308cb03a 	or	r6,r6,r2
 4018f80:	898dc83a 	sub	r6,r17,r6
 4018f84:	89a3803a 	cmpltu	r17,r17,r6
 4018f88:	40d1c83a 	sub	r8,r8,r3
 4018f8c:	4451c83a 	sub	r8,r8,r17
 4018f90:	3023883a 	mov	r17,r6
 4018f94:	4080202c 	andhi	r2,r8,128
 4018f98:	10002326 	beq	r2,zero,4019028 <__adddf3+0x204>
 4018f9c:	04c02034 	movhi	r19,128
 4018fa0:	9cffffc4 	addi	r19,r19,-1
 4018fa4:	44e6703a 	and	r19,r8,r19
 4018fa8:	98007626 	beq	r19,zero,4019184 <__adddf3+0x360>
 4018fac:	9809883a 	mov	r4,r19
 4018fb0:	400e3e00 	call	400e3e0 <__clzsi2>
 4018fb4:	10fffe04 	addi	r3,r2,-8
 4018fb8:	010007c4 	movi	r4,31
 4018fbc:	20c07716 	blt	r4,r3,401919c <__adddf3+0x378>
 4018fc0:	00800804 	movi	r2,32
 4018fc4:	10c5c83a 	sub	r2,r2,r3
 4018fc8:	8884d83a 	srl	r2,r17,r2
 4018fcc:	98d0983a 	sll	r8,r19,r3
 4018fd0:	88e2983a 	sll	r17,r17,r3
 4018fd4:	1204b03a 	or	r2,r2,r8
 4018fd8:	1c007416 	blt	r3,r16,40191ac <__adddf3+0x388>
 4018fdc:	1c21c83a 	sub	r16,r3,r16
 4018fe0:	82000044 	addi	r8,r16,1
 4018fe4:	00c007c4 	movi	r3,31
 4018fe8:	1a009116 	blt	r3,r8,4019230 <__adddf3+0x40c>
 4018fec:	00c00804 	movi	r3,32
 4018ff0:	1a07c83a 	sub	r3,r3,r8
 4018ff4:	8a08d83a 	srl	r4,r17,r8
 4018ff8:	88e2983a 	sll	r17,r17,r3
 4018ffc:	10c6983a 	sll	r3,r2,r3
 4019000:	1210d83a 	srl	r8,r2,r8
 4019004:	8804c03a 	cmpne	r2,r17,zero
 4019008:	1906b03a 	or	r3,r3,r4
 401900c:	18a2b03a 	or	r17,r3,r2
 4019010:	0021883a 	mov	r16,zero
 4019014:	003fa206 	br	4018ea0 <__alt_data_end+0xfc018ea0>
 4019018:	1890b03a 	or	r8,r3,r2
 401901c:	40017d26 	beq	r8,zero,4019614 <__adddf3+0x7f0>
 4019020:	1011883a 	mov	r8,r2
 4019024:	1823883a 	mov	r17,r3
 4019028:	888001cc 	andi	r2,r17,7
 401902c:	103f9e1e 	bne	r2,zero,4018ea8 <__alt_data_end+0xfc018ea8>
 4019030:	4004977a 	slli	r2,r8,29
 4019034:	8822d0fa 	srli	r17,r17,3
 4019038:	4010d0fa 	srli	r8,r8,3
 401903c:	9007883a 	mov	r3,r18
 4019040:	1444b03a 	or	r2,r2,r17
 4019044:	0101ffc4 	movi	r4,2047
 4019048:	81002426 	beq	r16,r4,40190dc <__adddf3+0x2b8>
 401904c:	8120703a 	and	r16,r16,r4
 4019050:	01000434 	movhi	r4,16
 4019054:	213fffc4 	addi	r4,r4,-1
 4019058:	4110703a 	and	r8,r8,r4
 401905c:	003fa806 	br	4018f00 <__alt_data_end+0xfc018f00>
 4019060:	8089c83a 	sub	r4,r16,r2
 4019064:	01005e0e 	bge	zero,r4,40191e0 <__adddf3+0x3bc>
 4019068:	10002b26 	beq	r2,zero,4019118 <__adddf3+0x2f4>
 401906c:	0081ffc4 	movi	r2,2047
 4019070:	80bf8b26 	beq	r16,r2,4018ea0 <__alt_data_end+0xfc018ea0>
 4019074:	4a402034 	orhi	r9,r9,128
 4019078:	00800e04 	movi	r2,56
 401907c:	1100a40e 	bge	r2,r4,4019310 <__adddf3+0x4ec>
 4019080:	498cb03a 	or	r6,r9,r6
 4019084:	300ac03a 	cmpne	r5,r6,zero
 4019088:	0013883a 	mov	r9,zero
 401908c:	2c4b883a 	add	r5,r5,r17
 4019090:	2c63803a 	cmpltu	r17,r5,r17
 4019094:	4a11883a 	add	r8,r9,r8
 4019098:	8a11883a 	add	r8,r17,r8
 401909c:	2823883a 	mov	r17,r5
 40190a0:	4080202c 	andhi	r2,r8,128
 40190a4:	103fe026 	beq	r2,zero,4019028 <__alt_data_end+0xfc019028>
 40190a8:	84000044 	addi	r16,r16,1
 40190ac:	0081ffc4 	movi	r2,2047
 40190b0:	8080d226 	beq	r16,r2,40193fc <__adddf3+0x5d8>
 40190b4:	00bfe034 	movhi	r2,65408
 40190b8:	10bfffc4 	addi	r2,r2,-1
 40190bc:	4090703a 	and	r8,r8,r2
 40190c0:	880ad07a 	srli	r5,r17,1
 40190c4:	400897fa 	slli	r4,r8,31
 40190c8:	88c0004c 	andi	r3,r17,1
 40190cc:	28e2b03a 	or	r17,r5,r3
 40190d0:	4010d07a 	srli	r8,r8,1
 40190d4:	2462b03a 	or	r17,r4,r17
 40190d8:	003f7106 	br	4018ea0 <__alt_data_end+0xfc018ea0>
 40190dc:	4088b03a 	or	r4,r8,r2
 40190e0:	20014526 	beq	r4,zero,40195f8 <__adddf3+0x7d4>
 40190e4:	01000434 	movhi	r4,16
 40190e8:	42000234 	orhi	r8,r8,8
 40190ec:	213fffc4 	addi	r4,r4,-1
 40190f0:	4110703a 	and	r8,r8,r4
 40190f4:	003f8206 	br	4018f00 <__alt_data_end+0xfc018f00>
 40190f8:	18ffffc4 	addi	r3,r3,-1
 40190fc:	1800491e 	bne	r3,zero,4019224 <__adddf3+0x400>
 4019100:	898bc83a 	sub	r5,r17,r6
 4019104:	8963803a 	cmpltu	r17,r17,r5
 4019108:	4251c83a 	sub	r8,r8,r9
 401910c:	4451c83a 	sub	r8,r8,r17
 4019110:	2823883a 	mov	r17,r5
 4019114:	003f9f06 	br	4018f94 <__alt_data_end+0xfc018f94>
 4019118:	4984b03a 	or	r2,r9,r6
 401911c:	103f6026 	beq	r2,zero,4018ea0 <__alt_data_end+0xfc018ea0>
 4019120:	213fffc4 	addi	r4,r4,-1
 4019124:	2000931e 	bne	r4,zero,4019374 <__adddf3+0x550>
 4019128:	898d883a 	add	r6,r17,r6
 401912c:	3463803a 	cmpltu	r17,r6,r17
 4019130:	4251883a 	add	r8,r8,r9
 4019134:	8a11883a 	add	r8,r17,r8
 4019138:	3023883a 	mov	r17,r6
 401913c:	003fd806 	br	40190a0 <__alt_data_end+0xfc0190a0>
 4019140:	1800541e 	bne	r3,zero,4019294 <__adddf3+0x470>
 4019144:	80800044 	addi	r2,r16,1
 4019148:	1081ffcc 	andi	r2,r2,2047
 401914c:	00c00044 	movi	r3,1
 4019150:	1880a00e 	bge	r3,r2,40193d4 <__adddf3+0x5b0>
 4019154:	8989c83a 	sub	r4,r17,r6
 4019158:	8905803a 	cmpltu	r2,r17,r4
 401915c:	4267c83a 	sub	r19,r8,r9
 4019160:	98a7c83a 	sub	r19,r19,r2
 4019164:	9880202c 	andhi	r2,r19,128
 4019168:	10006326 	beq	r2,zero,40192f8 <__adddf3+0x4d4>
 401916c:	3463c83a 	sub	r17,r6,r17
 4019170:	4a07c83a 	sub	r3,r9,r8
 4019174:	344d803a 	cmpltu	r6,r6,r17
 4019178:	19a7c83a 	sub	r19,r3,r6
 401917c:	3825883a 	mov	r18,r7
 4019180:	983f8a1e 	bne	r19,zero,4018fac <__alt_data_end+0xfc018fac>
 4019184:	8809883a 	mov	r4,r17
 4019188:	400e3e00 	call	400e3e0 <__clzsi2>
 401918c:	10800804 	addi	r2,r2,32
 4019190:	10fffe04 	addi	r3,r2,-8
 4019194:	010007c4 	movi	r4,31
 4019198:	20ff890e 	bge	r4,r3,4018fc0 <__alt_data_end+0xfc018fc0>
 401919c:	10bff604 	addi	r2,r2,-40
 40191a0:	8884983a 	sll	r2,r17,r2
 40191a4:	0023883a 	mov	r17,zero
 40191a8:	1c3f8c0e 	bge	r3,r16,4018fdc <__alt_data_end+0xfc018fdc>
 40191ac:	023fe034 	movhi	r8,65408
 40191b0:	423fffc4 	addi	r8,r8,-1
 40191b4:	80e1c83a 	sub	r16,r16,r3
 40191b8:	1210703a 	and	r8,r2,r8
 40191bc:	003f3806 	br	4018ea0 <__alt_data_end+0xfc018ea0>
 40191c0:	9007883a 	mov	r3,r18
 40191c4:	0011883a 	mov	r8,zero
 40191c8:	0005883a 	mov	r2,zero
 40191cc:	003f4c06 	br	4018f00 <__alt_data_end+0xfc018f00>
 40191d0:	498cb03a 	or	r6,r9,r6
 40191d4:	300cc03a 	cmpne	r6,r6,zero
 40191d8:	0007883a 	mov	r3,zero
 40191dc:	003f6806 	br	4018f80 <__alt_data_end+0xfc018f80>
 40191e0:	20009c1e 	bne	r4,zero,4019454 <__adddf3+0x630>
 40191e4:	80800044 	addi	r2,r16,1
 40191e8:	1141ffcc 	andi	r5,r2,2047
 40191ec:	01000044 	movi	r4,1
 40191f0:	2140670e 	bge	r4,r5,4019390 <__adddf3+0x56c>
 40191f4:	0101ffc4 	movi	r4,2047
 40191f8:	11007f26 	beq	r2,r4,40193f8 <__adddf3+0x5d4>
 40191fc:	898d883a 	add	r6,r17,r6
 4019200:	4247883a 	add	r3,r8,r9
 4019204:	3451803a 	cmpltu	r8,r6,r17
 4019208:	40d1883a 	add	r8,r8,r3
 401920c:	402297fa 	slli	r17,r8,31
 4019210:	300cd07a 	srli	r6,r6,1
 4019214:	4010d07a 	srli	r8,r8,1
 4019218:	1021883a 	mov	r16,r2
 401921c:	89a2b03a 	or	r17,r17,r6
 4019220:	003f1f06 	br	4018ea0 <__alt_data_end+0xfc018ea0>
 4019224:	0081ffc4 	movi	r2,2047
 4019228:	80bf481e 	bne	r16,r2,4018f4c <__alt_data_end+0xfc018f4c>
 401922c:	003f1c06 	br	4018ea0 <__alt_data_end+0xfc018ea0>
 4019230:	843ff844 	addi	r16,r16,-31
 4019234:	01000804 	movi	r4,32
 4019238:	1406d83a 	srl	r3,r2,r16
 401923c:	41005026 	beq	r8,r4,4019380 <__adddf3+0x55c>
 4019240:	01001004 	movi	r4,64
 4019244:	2211c83a 	sub	r8,r4,r8
 4019248:	1204983a 	sll	r2,r2,r8
 401924c:	88a2b03a 	or	r17,r17,r2
 4019250:	8822c03a 	cmpne	r17,r17,zero
 4019254:	1c62b03a 	or	r17,r3,r17
 4019258:	0011883a 	mov	r8,zero
 401925c:	0021883a 	mov	r16,zero
 4019260:	003f7106 	br	4019028 <__alt_data_end+0xfc019028>
 4019264:	193ff804 	addi	r4,r3,-32
 4019268:	00800804 	movi	r2,32
 401926c:	4908d83a 	srl	r4,r9,r4
 4019270:	18804526 	beq	r3,r2,4019388 <__adddf3+0x564>
 4019274:	00801004 	movi	r2,64
 4019278:	10c5c83a 	sub	r2,r2,r3
 401927c:	4886983a 	sll	r3,r9,r2
 4019280:	198cb03a 	or	r6,r3,r6
 4019284:	300cc03a 	cmpne	r6,r6,zero
 4019288:	218cb03a 	or	r6,r4,r6
 401928c:	0007883a 	mov	r3,zero
 4019290:	003f3b06 	br	4018f80 <__alt_data_end+0xfc018f80>
 4019294:	80002a26 	beq	r16,zero,4019340 <__adddf3+0x51c>
 4019298:	0101ffc4 	movi	r4,2047
 401929c:	11006826 	beq	r2,r4,4019440 <__adddf3+0x61c>
 40192a0:	00c7c83a 	sub	r3,zero,r3
 40192a4:	42002034 	orhi	r8,r8,128
 40192a8:	01000e04 	movi	r4,56
 40192ac:	20c07c16 	blt	r4,r3,40194a0 <__adddf3+0x67c>
 40192b0:	010007c4 	movi	r4,31
 40192b4:	20c0da16 	blt	r4,r3,4019620 <__adddf3+0x7fc>
 40192b8:	01000804 	movi	r4,32
 40192bc:	20c9c83a 	sub	r4,r4,r3
 40192c0:	4114983a 	sll	r10,r8,r4
 40192c4:	88cad83a 	srl	r5,r17,r3
 40192c8:	8908983a 	sll	r4,r17,r4
 40192cc:	40c6d83a 	srl	r3,r8,r3
 40192d0:	5162b03a 	or	r17,r10,r5
 40192d4:	2008c03a 	cmpne	r4,r4,zero
 40192d8:	8922b03a 	or	r17,r17,r4
 40192dc:	3463c83a 	sub	r17,r6,r17
 40192e0:	48c7c83a 	sub	r3,r9,r3
 40192e4:	344d803a 	cmpltu	r6,r6,r17
 40192e8:	1991c83a 	sub	r8,r3,r6
 40192ec:	1021883a 	mov	r16,r2
 40192f0:	3825883a 	mov	r18,r7
 40192f4:	003f2706 	br	4018f94 <__alt_data_end+0xfc018f94>
 40192f8:	24d0b03a 	or	r8,r4,r19
 40192fc:	40001b1e 	bne	r8,zero,401936c <__adddf3+0x548>
 4019300:	0005883a 	mov	r2,zero
 4019304:	0007883a 	mov	r3,zero
 4019308:	0021883a 	mov	r16,zero
 401930c:	003f4d06 	br	4019044 <__alt_data_end+0xfc019044>
 4019310:	008007c4 	movi	r2,31
 4019314:	11003c16 	blt	r2,r4,4019408 <__adddf3+0x5e4>
 4019318:	00800804 	movi	r2,32
 401931c:	1105c83a 	sub	r2,r2,r4
 4019320:	488e983a 	sll	r7,r9,r2
 4019324:	310ad83a 	srl	r5,r6,r4
 4019328:	3084983a 	sll	r2,r6,r2
 401932c:	4912d83a 	srl	r9,r9,r4
 4019330:	394ab03a 	or	r5,r7,r5
 4019334:	1004c03a 	cmpne	r2,r2,zero
 4019338:	288ab03a 	or	r5,r5,r2
 401933c:	003f5306 	br	401908c <__alt_data_end+0xfc01908c>
 4019340:	4448b03a 	or	r4,r8,r17
 4019344:	20003e26 	beq	r4,zero,4019440 <__adddf3+0x61c>
 4019348:	00c6303a 	nor	r3,zero,r3
 401934c:	18003a1e 	bne	r3,zero,4019438 <__adddf3+0x614>
 4019350:	3463c83a 	sub	r17,r6,r17
 4019354:	4a07c83a 	sub	r3,r9,r8
 4019358:	344d803a 	cmpltu	r6,r6,r17
 401935c:	1991c83a 	sub	r8,r3,r6
 4019360:	1021883a 	mov	r16,r2
 4019364:	3825883a 	mov	r18,r7
 4019368:	003f0a06 	br	4018f94 <__alt_data_end+0xfc018f94>
 401936c:	2023883a 	mov	r17,r4
 4019370:	003f0d06 	br	4018fa8 <__alt_data_end+0xfc018fa8>
 4019374:	0081ffc4 	movi	r2,2047
 4019378:	80bf3f1e 	bne	r16,r2,4019078 <__alt_data_end+0xfc019078>
 401937c:	003ec806 	br	4018ea0 <__alt_data_end+0xfc018ea0>
 4019380:	0005883a 	mov	r2,zero
 4019384:	003fb106 	br	401924c <__alt_data_end+0xfc01924c>
 4019388:	0007883a 	mov	r3,zero
 401938c:	003fbc06 	br	4019280 <__alt_data_end+0xfc019280>
 4019390:	4444b03a 	or	r2,r8,r17
 4019394:	8000871e 	bne	r16,zero,40195b4 <__adddf3+0x790>
 4019398:	1000ba26 	beq	r2,zero,4019684 <__adddf3+0x860>
 401939c:	4984b03a 	or	r2,r9,r6
 40193a0:	103ebf26 	beq	r2,zero,4018ea0 <__alt_data_end+0xfc018ea0>
 40193a4:	8985883a 	add	r2,r17,r6
 40193a8:	4247883a 	add	r3,r8,r9
 40193ac:	1451803a 	cmpltu	r8,r2,r17
 40193b0:	40d1883a 	add	r8,r8,r3
 40193b4:	40c0202c 	andhi	r3,r8,128
 40193b8:	1023883a 	mov	r17,r2
 40193bc:	183f1a26 	beq	r3,zero,4019028 <__alt_data_end+0xfc019028>
 40193c0:	00bfe034 	movhi	r2,65408
 40193c4:	10bfffc4 	addi	r2,r2,-1
 40193c8:	2021883a 	mov	r16,r4
 40193cc:	4090703a 	and	r8,r8,r2
 40193d0:	003eb306 	br	4018ea0 <__alt_data_end+0xfc018ea0>
 40193d4:	4444b03a 	or	r2,r8,r17
 40193d8:	8000291e 	bne	r16,zero,4019480 <__adddf3+0x65c>
 40193dc:	10004b1e 	bne	r2,zero,401950c <__adddf3+0x6e8>
 40193e0:	4990b03a 	or	r8,r9,r6
 40193e4:	40008b26 	beq	r8,zero,4019614 <__adddf3+0x7f0>
 40193e8:	4811883a 	mov	r8,r9
 40193ec:	3023883a 	mov	r17,r6
 40193f0:	3825883a 	mov	r18,r7
 40193f4:	003eaa06 	br	4018ea0 <__alt_data_end+0xfc018ea0>
 40193f8:	1021883a 	mov	r16,r2
 40193fc:	0011883a 	mov	r8,zero
 4019400:	0005883a 	mov	r2,zero
 4019404:	003f0f06 	br	4019044 <__alt_data_end+0xfc019044>
 4019408:	217ff804 	addi	r5,r4,-32
 401940c:	00800804 	movi	r2,32
 4019410:	494ad83a 	srl	r5,r9,r5
 4019414:	20807d26 	beq	r4,r2,401960c <__adddf3+0x7e8>
 4019418:	00801004 	movi	r2,64
 401941c:	1109c83a 	sub	r4,r2,r4
 4019420:	4912983a 	sll	r9,r9,r4
 4019424:	498cb03a 	or	r6,r9,r6
 4019428:	300cc03a 	cmpne	r6,r6,zero
 401942c:	298ab03a 	or	r5,r5,r6
 4019430:	0013883a 	mov	r9,zero
 4019434:	003f1506 	br	401908c <__alt_data_end+0xfc01908c>
 4019438:	0101ffc4 	movi	r4,2047
 401943c:	113f9a1e 	bne	r2,r4,40192a8 <__alt_data_end+0xfc0192a8>
 4019440:	4811883a 	mov	r8,r9
 4019444:	3023883a 	mov	r17,r6
 4019448:	1021883a 	mov	r16,r2
 401944c:	3825883a 	mov	r18,r7
 4019450:	003e9306 	br	4018ea0 <__alt_data_end+0xfc018ea0>
 4019454:	8000161e 	bne	r16,zero,40194b0 <__adddf3+0x68c>
 4019458:	444ab03a 	or	r5,r8,r17
 401945c:	28005126 	beq	r5,zero,40195a4 <__adddf3+0x780>
 4019460:	0108303a 	nor	r4,zero,r4
 4019464:	20004d1e 	bne	r4,zero,401959c <__adddf3+0x778>
 4019468:	89a3883a 	add	r17,r17,r6
 401946c:	4253883a 	add	r9,r8,r9
 4019470:	898d803a 	cmpltu	r6,r17,r6
 4019474:	3251883a 	add	r8,r6,r9
 4019478:	1021883a 	mov	r16,r2
 401947c:	003f0806 	br	40190a0 <__alt_data_end+0xfc0190a0>
 4019480:	1000301e 	bne	r2,zero,4019544 <__adddf3+0x720>
 4019484:	4984b03a 	or	r2,r9,r6
 4019488:	10007126 	beq	r2,zero,4019650 <__adddf3+0x82c>
 401948c:	4811883a 	mov	r8,r9
 4019490:	3023883a 	mov	r17,r6
 4019494:	3825883a 	mov	r18,r7
 4019498:	0401ffc4 	movi	r16,2047
 401949c:	003e8006 	br	4018ea0 <__alt_data_end+0xfc018ea0>
 40194a0:	4462b03a 	or	r17,r8,r17
 40194a4:	8822c03a 	cmpne	r17,r17,zero
 40194a8:	0007883a 	mov	r3,zero
 40194ac:	003f8b06 	br	40192dc <__alt_data_end+0xfc0192dc>
 40194b0:	0141ffc4 	movi	r5,2047
 40194b4:	11403b26 	beq	r2,r5,40195a4 <__adddf3+0x780>
 40194b8:	0109c83a 	sub	r4,zero,r4
 40194bc:	42002034 	orhi	r8,r8,128
 40194c0:	01400e04 	movi	r5,56
 40194c4:	29006716 	blt	r5,r4,4019664 <__adddf3+0x840>
 40194c8:	014007c4 	movi	r5,31
 40194cc:	29007016 	blt	r5,r4,4019690 <__adddf3+0x86c>
 40194d0:	01400804 	movi	r5,32
 40194d4:	290bc83a 	sub	r5,r5,r4
 40194d8:	4154983a 	sll	r10,r8,r5
 40194dc:	890ed83a 	srl	r7,r17,r4
 40194e0:	894a983a 	sll	r5,r17,r5
 40194e4:	4108d83a 	srl	r4,r8,r4
 40194e8:	51e2b03a 	or	r17,r10,r7
 40194ec:	280ac03a 	cmpne	r5,r5,zero
 40194f0:	8962b03a 	or	r17,r17,r5
 40194f4:	89a3883a 	add	r17,r17,r6
 40194f8:	2253883a 	add	r9,r4,r9
 40194fc:	898d803a 	cmpltu	r6,r17,r6
 4019500:	3251883a 	add	r8,r6,r9
 4019504:	1021883a 	mov	r16,r2
 4019508:	003ee506 	br	40190a0 <__alt_data_end+0xfc0190a0>
 401950c:	4984b03a 	or	r2,r9,r6
 4019510:	103e6326 	beq	r2,zero,4018ea0 <__alt_data_end+0xfc018ea0>
 4019514:	8987c83a 	sub	r3,r17,r6
 4019518:	88c9803a 	cmpltu	r4,r17,r3
 401951c:	4245c83a 	sub	r2,r8,r9
 4019520:	1105c83a 	sub	r2,r2,r4
 4019524:	1100202c 	andhi	r4,r2,128
 4019528:	203ebb26 	beq	r4,zero,4019018 <__alt_data_end+0xfc019018>
 401952c:	3463c83a 	sub	r17,r6,r17
 4019530:	4a07c83a 	sub	r3,r9,r8
 4019534:	344d803a 	cmpltu	r6,r6,r17
 4019538:	1991c83a 	sub	r8,r3,r6
 401953c:	3825883a 	mov	r18,r7
 4019540:	003e5706 	br	4018ea0 <__alt_data_end+0xfc018ea0>
 4019544:	4984b03a 	or	r2,r9,r6
 4019548:	10002e26 	beq	r2,zero,4019604 <__adddf3+0x7e0>
 401954c:	4004d0fa 	srli	r2,r8,3
 4019550:	8822d0fa 	srli	r17,r17,3
 4019554:	4010977a 	slli	r8,r8,29
 4019558:	10c0022c 	andhi	r3,r2,8
 401955c:	4462b03a 	or	r17,r8,r17
 4019560:	18000826 	beq	r3,zero,4019584 <__adddf3+0x760>
 4019564:	4808d0fa 	srli	r4,r9,3
 4019568:	20c0022c 	andhi	r3,r4,8
 401956c:	1800051e 	bne	r3,zero,4019584 <__adddf3+0x760>
 4019570:	300cd0fa 	srli	r6,r6,3
 4019574:	4806977a 	slli	r3,r9,29
 4019578:	2005883a 	mov	r2,r4
 401957c:	3825883a 	mov	r18,r7
 4019580:	19a2b03a 	or	r17,r3,r6
 4019584:	8810d77a 	srli	r8,r17,29
 4019588:	100490fa 	slli	r2,r2,3
 401958c:	882290fa 	slli	r17,r17,3
 4019590:	0401ffc4 	movi	r16,2047
 4019594:	4090b03a 	or	r8,r8,r2
 4019598:	003e4106 	br	4018ea0 <__alt_data_end+0xfc018ea0>
 401959c:	0141ffc4 	movi	r5,2047
 40195a0:	117fc71e 	bne	r2,r5,40194c0 <__alt_data_end+0xfc0194c0>
 40195a4:	4811883a 	mov	r8,r9
 40195a8:	3023883a 	mov	r17,r6
 40195ac:	1021883a 	mov	r16,r2
 40195b0:	003e3b06 	br	4018ea0 <__alt_data_end+0xfc018ea0>
 40195b4:	10002f26 	beq	r2,zero,4019674 <__adddf3+0x850>
 40195b8:	4984b03a 	or	r2,r9,r6
 40195bc:	10001126 	beq	r2,zero,4019604 <__adddf3+0x7e0>
 40195c0:	4004d0fa 	srli	r2,r8,3
 40195c4:	8822d0fa 	srli	r17,r17,3
 40195c8:	4010977a 	slli	r8,r8,29
 40195cc:	10c0022c 	andhi	r3,r2,8
 40195d0:	4462b03a 	or	r17,r8,r17
 40195d4:	183feb26 	beq	r3,zero,4019584 <__alt_data_end+0xfc019584>
 40195d8:	4808d0fa 	srli	r4,r9,3
 40195dc:	20c0022c 	andhi	r3,r4,8
 40195e0:	183fe81e 	bne	r3,zero,4019584 <__alt_data_end+0xfc019584>
 40195e4:	300cd0fa 	srli	r6,r6,3
 40195e8:	4806977a 	slli	r3,r9,29
 40195ec:	2005883a 	mov	r2,r4
 40195f0:	19a2b03a 	or	r17,r3,r6
 40195f4:	003fe306 	br	4019584 <__alt_data_end+0xfc019584>
 40195f8:	0011883a 	mov	r8,zero
 40195fc:	0005883a 	mov	r2,zero
 4019600:	003e3f06 	br	4018f00 <__alt_data_end+0xfc018f00>
 4019604:	0401ffc4 	movi	r16,2047
 4019608:	003e2506 	br	4018ea0 <__alt_data_end+0xfc018ea0>
 401960c:	0013883a 	mov	r9,zero
 4019610:	003f8406 	br	4019424 <__alt_data_end+0xfc019424>
 4019614:	0005883a 	mov	r2,zero
 4019618:	0007883a 	mov	r3,zero
 401961c:	003e8906 	br	4019044 <__alt_data_end+0xfc019044>
 4019620:	197ff804 	addi	r5,r3,-32
 4019624:	01000804 	movi	r4,32
 4019628:	414ad83a 	srl	r5,r8,r5
 401962c:	19002426 	beq	r3,r4,40196c0 <__adddf3+0x89c>
 4019630:	01001004 	movi	r4,64
 4019634:	20c7c83a 	sub	r3,r4,r3
 4019638:	40c6983a 	sll	r3,r8,r3
 401963c:	1c46b03a 	or	r3,r3,r17
 4019640:	1806c03a 	cmpne	r3,r3,zero
 4019644:	28e2b03a 	or	r17,r5,r3
 4019648:	0007883a 	mov	r3,zero
 401964c:	003f2306 	br	40192dc <__alt_data_end+0xfc0192dc>
 4019650:	0007883a 	mov	r3,zero
 4019654:	5811883a 	mov	r8,r11
 4019658:	00bfffc4 	movi	r2,-1
 401965c:	0401ffc4 	movi	r16,2047
 4019660:	003e7806 	br	4019044 <__alt_data_end+0xfc019044>
 4019664:	4462b03a 	or	r17,r8,r17
 4019668:	8822c03a 	cmpne	r17,r17,zero
 401966c:	0009883a 	mov	r4,zero
 4019670:	003fa006 	br	40194f4 <__alt_data_end+0xfc0194f4>
 4019674:	4811883a 	mov	r8,r9
 4019678:	3023883a 	mov	r17,r6
 401967c:	0401ffc4 	movi	r16,2047
 4019680:	003e0706 	br	4018ea0 <__alt_data_end+0xfc018ea0>
 4019684:	4811883a 	mov	r8,r9
 4019688:	3023883a 	mov	r17,r6
 401968c:	003e0406 	br	4018ea0 <__alt_data_end+0xfc018ea0>
 4019690:	21fff804 	addi	r7,r4,-32
 4019694:	01400804 	movi	r5,32
 4019698:	41ced83a 	srl	r7,r8,r7
 401969c:	21400a26 	beq	r4,r5,40196c8 <__adddf3+0x8a4>
 40196a0:	01401004 	movi	r5,64
 40196a4:	2909c83a 	sub	r4,r5,r4
 40196a8:	4108983a 	sll	r4,r8,r4
 40196ac:	2448b03a 	or	r4,r4,r17
 40196b0:	2008c03a 	cmpne	r4,r4,zero
 40196b4:	3922b03a 	or	r17,r7,r4
 40196b8:	0009883a 	mov	r4,zero
 40196bc:	003f8d06 	br	40194f4 <__alt_data_end+0xfc0194f4>
 40196c0:	0007883a 	mov	r3,zero
 40196c4:	003fdd06 	br	401963c <__alt_data_end+0xfc01963c>
 40196c8:	0009883a 	mov	r4,zero
 40196cc:	003ff706 	br	40196ac <__alt_data_end+0xfc0196ac>

040196d0 <__divdf3>:
 40196d0:	defff004 	addi	sp,sp,-64
 40196d4:	dc800815 	stw	r18,32(sp)
 40196d8:	2824d53a 	srli	r18,r5,20
 40196dc:	dd800c15 	stw	r22,48(sp)
 40196e0:	282cd7fa 	srli	r22,r5,31
 40196e4:	dc000615 	stw	r16,24(sp)
 40196e8:	04000434 	movhi	r16,16
 40196ec:	843fffc4 	addi	r16,r16,-1
 40196f0:	dfc00f15 	stw	ra,60(sp)
 40196f4:	df000e15 	stw	fp,56(sp)
 40196f8:	ddc00d15 	stw	r23,52(sp)
 40196fc:	dd400b15 	stw	r21,44(sp)
 4019700:	dd000a15 	stw	r20,40(sp)
 4019704:	dcc00915 	stw	r19,36(sp)
 4019708:	dc400715 	stw	r17,28(sp)
 401970c:	9481ffcc 	andi	r18,r18,2047
 4019710:	2c20703a 	and	r16,r5,r16
 4019714:	b2003fcc 	andi	r8,r22,255
 4019718:	90006126 	beq	r18,zero,40198a0 <__divdf3+0x1d0>
 401971c:	0081ffc4 	movi	r2,2047
 4019720:	202b883a 	mov	r21,r4
 4019724:	90803726 	beq	r18,r2,4019804 <__divdf3+0x134>
 4019728:	80800434 	orhi	r2,r16,16
 401972c:	100490fa 	slli	r2,r2,3
 4019730:	2020d77a 	srli	r16,r4,29
 4019734:	202a90fa 	slli	r21,r4,3
 4019738:	94bf0044 	addi	r18,r18,-1023
 401973c:	80a0b03a 	or	r16,r16,r2
 4019740:	0013883a 	mov	r9,zero
 4019744:	000b883a 	mov	r5,zero
 4019748:	3806d53a 	srli	r3,r7,20
 401974c:	382ed7fa 	srli	r23,r7,31
 4019750:	04400434 	movhi	r17,16
 4019754:	8c7fffc4 	addi	r17,r17,-1
 4019758:	18c1ffcc 	andi	r3,r3,2047
 401975c:	3029883a 	mov	r20,r6
 4019760:	3c62703a 	and	r17,r7,r17
 4019764:	bf003fcc 	andi	fp,r23,255
 4019768:	18006e26 	beq	r3,zero,4019924 <__divdf3+0x254>
 401976c:	0081ffc4 	movi	r2,2047
 4019770:	18806626 	beq	r3,r2,401990c <__divdf3+0x23c>
 4019774:	88800434 	orhi	r2,r17,16
 4019778:	100490fa 	slli	r2,r2,3
 401977c:	3022d77a 	srli	r17,r6,29
 4019780:	302890fa 	slli	r20,r6,3
 4019784:	18ff0044 	addi	r3,r3,-1023
 4019788:	88a2b03a 	or	r17,r17,r2
 401978c:	000f883a 	mov	r7,zero
 4019790:	b5e6f03a 	xor	r19,r22,r23
 4019794:	3a4cb03a 	or	r6,r7,r9
 4019798:	008003c4 	movi	r2,15
 401979c:	9809883a 	mov	r4,r19
 40197a0:	90c7c83a 	sub	r3,r18,r3
 40197a4:	9cc03fcc 	andi	r19,r19,255
 40197a8:	11809636 	bltu	r2,r6,4019a04 <__divdf3+0x334>
 40197ac:	300c90ba 	slli	r6,r6,2
 40197b0:	008100b4 	movhi	r2,1026
 40197b4:	10a5f104 	addi	r2,r2,-26684
 40197b8:	308d883a 	add	r6,r6,r2
 40197bc:	30800017 	ldw	r2,0(r6)
 40197c0:	1000683a 	jmp	r2
 40197c4:	04019a04 	movi	r16,1640
 40197c8:	0401983c 	xorhi	r16,zero,1632
 40197cc:	040199f4 	movhi	r16,1639
 40197d0:	04019830 	cmpltui	r16,zero,1632
 40197d4:	040199f4 	movhi	r16,1639
 40197d8:	040199c8 	cmpgei	r16,zero,1639
 40197dc:	040199f4 	movhi	r16,1639
 40197e0:	04019830 	cmpltui	r16,zero,1632
 40197e4:	0401983c 	xorhi	r16,zero,1632
 40197e8:	0401983c 	xorhi	r16,zero,1632
 40197ec:	040199c8 	cmpgei	r16,zero,1639
 40197f0:	04019830 	cmpltui	r16,zero,1632
 40197f4:	04019820 	cmpeqi	r16,zero,1632
 40197f8:	04019820 	cmpeqi	r16,zero,1632
 40197fc:	04019820 	cmpeqi	r16,zero,1632
 4019800:	04019d8c 	andi	r16,zero,1654
 4019804:	2404b03a 	or	r2,r4,r16
 4019808:	10006c1e 	bne	r2,zero,40199bc <__divdf3+0x2ec>
 401980c:	02400204 	movi	r9,8
 4019810:	0021883a 	mov	r16,zero
 4019814:	002b883a 	mov	r21,zero
 4019818:	01400084 	movi	r5,2
 401981c:	003fca06 	br	4019748 <__alt_data_end+0xfc019748>
 4019820:	8023883a 	mov	r17,r16
 4019824:	a829883a 	mov	r20,r21
 4019828:	4039883a 	mov	fp,r8
 401982c:	280f883a 	mov	r7,r5
 4019830:	00800084 	movi	r2,2
 4019834:	3881601e 	bne	r7,r2,4019db8 <__divdf3+0x6e8>
 4019838:	e027883a 	mov	r19,fp
 401983c:	9900004c 	andi	r4,r19,1
 4019840:	0081ffc4 	movi	r2,2047
 4019844:	0021883a 	mov	r16,zero
 4019848:	002b883a 	mov	r21,zero
 401984c:	1004953a 	slli	r2,r2,20
 4019850:	20c03fcc 	andi	r3,r4,255
 4019854:	01400434 	movhi	r5,16
 4019858:	297fffc4 	addi	r5,r5,-1
 401985c:	180697fa 	slli	r3,r3,31
 4019860:	8160703a 	and	r16,r16,r5
 4019864:	80a0b03a 	or	r16,r16,r2
 4019868:	80c6b03a 	or	r3,r16,r3
 401986c:	a805883a 	mov	r2,r21
 4019870:	dfc00f17 	ldw	ra,60(sp)
 4019874:	df000e17 	ldw	fp,56(sp)
 4019878:	ddc00d17 	ldw	r23,52(sp)
 401987c:	dd800c17 	ldw	r22,48(sp)
 4019880:	dd400b17 	ldw	r21,44(sp)
 4019884:	dd000a17 	ldw	r20,40(sp)
 4019888:	dcc00917 	ldw	r19,36(sp)
 401988c:	dc800817 	ldw	r18,32(sp)
 4019890:	dc400717 	ldw	r17,28(sp)
 4019894:	dc000617 	ldw	r16,24(sp)
 4019898:	dec01004 	addi	sp,sp,64
 401989c:	f800283a 	ret
 40198a0:	2404b03a 	or	r2,r4,r16
 40198a4:	2023883a 	mov	r17,r4
 40198a8:	10003f26 	beq	r2,zero,40199a8 <__divdf3+0x2d8>
 40198ac:	80015e26 	beq	r16,zero,4019e28 <__divdf3+0x758>
 40198b0:	8009883a 	mov	r4,r16
 40198b4:	d9800215 	stw	r6,8(sp)
 40198b8:	d9c00515 	stw	r7,20(sp)
 40198bc:	da000415 	stw	r8,16(sp)
 40198c0:	400e3e00 	call	400e3e0 <__clzsi2>
 40198c4:	d9800217 	ldw	r6,8(sp)
 40198c8:	d9c00517 	ldw	r7,20(sp)
 40198cc:	da000417 	ldw	r8,16(sp)
 40198d0:	113ffd44 	addi	r4,r2,-11
 40198d4:	00c00704 	movi	r3,28
 40198d8:	19014f16 	blt	r3,r4,4019e18 <__divdf3+0x748>
 40198dc:	00c00744 	movi	r3,29
 40198e0:	157ffe04 	addi	r21,r2,-8
 40198e4:	1907c83a 	sub	r3,r3,r4
 40198e8:	8560983a 	sll	r16,r16,r21
 40198ec:	88c6d83a 	srl	r3,r17,r3
 40198f0:	8d6a983a 	sll	r21,r17,r21
 40198f4:	1c20b03a 	or	r16,r3,r16
 40198f8:	1080fcc4 	addi	r2,r2,1011
 40198fc:	00a5c83a 	sub	r18,zero,r2
 4019900:	0013883a 	mov	r9,zero
 4019904:	000b883a 	mov	r5,zero
 4019908:	003f8f06 	br	4019748 <__alt_data_end+0xfc019748>
 401990c:	3444b03a 	or	r2,r6,r17
 4019910:	1000231e 	bne	r2,zero,40199a0 <__divdf3+0x2d0>
 4019914:	0023883a 	mov	r17,zero
 4019918:	0029883a 	mov	r20,zero
 401991c:	01c00084 	movi	r7,2
 4019920:	003f9b06 	br	4019790 <__alt_data_end+0xfc019790>
 4019924:	3444b03a 	or	r2,r6,r17
 4019928:	10001926 	beq	r2,zero,4019990 <__divdf3+0x2c0>
 401992c:	88014b26 	beq	r17,zero,4019e5c <__divdf3+0x78c>
 4019930:	8809883a 	mov	r4,r17
 4019934:	d9400115 	stw	r5,4(sp)
 4019938:	d9800215 	stw	r6,8(sp)
 401993c:	da000415 	stw	r8,16(sp)
 4019940:	da400315 	stw	r9,12(sp)
 4019944:	400e3e00 	call	400e3e0 <__clzsi2>
 4019948:	d9400117 	ldw	r5,4(sp)
 401994c:	d9800217 	ldw	r6,8(sp)
 4019950:	da000417 	ldw	r8,16(sp)
 4019954:	da400317 	ldw	r9,12(sp)
 4019958:	113ffd44 	addi	r4,r2,-11
 401995c:	00c00704 	movi	r3,28
 4019960:	19013a16 	blt	r3,r4,4019e4c <__divdf3+0x77c>
 4019964:	00c00744 	movi	r3,29
 4019968:	153ffe04 	addi	r20,r2,-8
 401996c:	1907c83a 	sub	r3,r3,r4
 4019970:	8d22983a 	sll	r17,r17,r20
 4019974:	30c6d83a 	srl	r3,r6,r3
 4019978:	3528983a 	sll	r20,r6,r20
 401997c:	1c62b03a 	or	r17,r3,r17
 4019980:	1080fcc4 	addi	r2,r2,1011
 4019984:	0087c83a 	sub	r3,zero,r2
 4019988:	000f883a 	mov	r7,zero
 401998c:	003f8006 	br	4019790 <__alt_data_end+0xfc019790>
 4019990:	0023883a 	mov	r17,zero
 4019994:	0029883a 	mov	r20,zero
 4019998:	01c00044 	movi	r7,1
 401999c:	003f7c06 	br	4019790 <__alt_data_end+0xfc019790>
 40199a0:	01c000c4 	movi	r7,3
 40199a4:	003f7a06 	br	4019790 <__alt_data_end+0xfc019790>
 40199a8:	02400104 	movi	r9,4
 40199ac:	0021883a 	mov	r16,zero
 40199b0:	002b883a 	mov	r21,zero
 40199b4:	01400044 	movi	r5,1
 40199b8:	003f6306 	br	4019748 <__alt_data_end+0xfc019748>
 40199bc:	02400304 	movi	r9,12
 40199c0:	014000c4 	movi	r5,3
 40199c4:	003f6006 	br	4019748 <__alt_data_end+0xfc019748>
 40199c8:	04000434 	movhi	r16,16
 40199cc:	0009883a 	mov	r4,zero
 40199d0:	843fffc4 	addi	r16,r16,-1
 40199d4:	057fffc4 	movi	r21,-1
 40199d8:	0081ffc4 	movi	r2,2047
 40199dc:	003f9b06 	br	401984c <__alt_data_end+0xfc01984c>
 40199e0:	00c00044 	movi	r3,1
 40199e4:	1887c83a 	sub	r3,r3,r2
 40199e8:	01000e04 	movi	r4,56
 40199ec:	20c1530e 	bge	r4,r3,4019f3c <__divdf3+0x86c>
 40199f0:	9900004c 	andi	r4,r19,1
 40199f4:	0005883a 	mov	r2,zero
 40199f8:	0021883a 	mov	r16,zero
 40199fc:	002b883a 	mov	r21,zero
 4019a00:	003f9206 	br	401984c <__alt_data_end+0xfc01984c>
 4019a04:	8c012e36 	bltu	r17,r16,4019ec0 <__divdf3+0x7f0>
 4019a08:	84412c26 	beq	r16,r17,4019ebc <__divdf3+0x7ec>
 4019a0c:	a82f883a 	mov	r23,r21
 4019a10:	18ffffc4 	addi	r3,r3,-1
 4019a14:	002b883a 	mov	r21,zero
 4019a18:	a004d63a 	srli	r2,r20,24
 4019a1c:	8822923a 	slli	r17,r17,8
 4019a20:	a028923a 	slli	r20,r20,8
 4019a24:	8009883a 	mov	r4,r16
 4019a28:	88acb03a 	or	r22,r17,r2
 4019a2c:	dd000015 	stw	r20,0(sp)
 4019a30:	b028d43a 	srli	r20,r22,16
 4019a34:	d8c00215 	stw	r3,8(sp)
 4019a38:	b4bfffcc 	andi	r18,r22,65535
 4019a3c:	a00b883a 	mov	r5,r20
 4019a40:	400d2ac0 	call	400d2ac <__udivsi3>
 4019a44:	100b883a 	mov	r5,r2
 4019a48:	9009883a 	mov	r4,r18
 4019a4c:	1023883a 	mov	r17,r2
 4019a50:	400d3680 	call	400d368 <__mulsi3>
 4019a54:	8009883a 	mov	r4,r16
 4019a58:	a00b883a 	mov	r5,r20
 4019a5c:	1039883a 	mov	fp,r2
 4019a60:	400d3100 	call	400d310 <__umodsi3>
 4019a64:	1004943a 	slli	r2,r2,16
 4019a68:	b808d43a 	srli	r4,r23,16
 4019a6c:	d8c00217 	ldw	r3,8(sp)
 4019a70:	2084b03a 	or	r2,r4,r2
 4019a74:	1700062e 	bgeu	r2,fp,4019a90 <__divdf3+0x3c0>
 4019a78:	1585883a 	add	r2,r2,r22
 4019a7c:	893fffc4 	addi	r4,r17,-1
 4019a80:	15811d36 	bltu	r2,r22,4019ef8 <__divdf3+0x828>
 4019a84:	17011c2e 	bgeu	r2,fp,4019ef8 <__divdf3+0x828>
 4019a88:	8c7fff84 	addi	r17,r17,-2
 4019a8c:	1585883a 	add	r2,r2,r22
 4019a90:	1739c83a 	sub	fp,r2,fp
 4019a94:	a00b883a 	mov	r5,r20
 4019a98:	e009883a 	mov	r4,fp
 4019a9c:	d8c00215 	stw	r3,8(sp)
 4019aa0:	400d2ac0 	call	400d2ac <__udivsi3>
 4019aa4:	100b883a 	mov	r5,r2
 4019aa8:	9009883a 	mov	r4,r18
 4019aac:	1021883a 	mov	r16,r2
 4019ab0:	400d3680 	call	400d368 <__mulsi3>
 4019ab4:	a00b883a 	mov	r5,r20
 4019ab8:	e009883a 	mov	r4,fp
 4019abc:	d8800415 	stw	r2,16(sp)
 4019ac0:	400d3100 	call	400d310 <__umodsi3>
 4019ac4:	1004943a 	slli	r2,r2,16
 4019ac8:	da000417 	ldw	r8,16(sp)
 4019acc:	bdffffcc 	andi	r23,r23,65535
 4019ad0:	b884b03a 	or	r2,r23,r2
 4019ad4:	d8c00217 	ldw	r3,8(sp)
 4019ad8:	1200062e 	bgeu	r2,r8,4019af4 <__divdf3+0x424>
 4019adc:	1585883a 	add	r2,r2,r22
 4019ae0:	813fffc4 	addi	r4,r16,-1
 4019ae4:	15810236 	bltu	r2,r22,4019ef0 <__divdf3+0x820>
 4019ae8:	1201012e 	bgeu	r2,r8,4019ef0 <__divdf3+0x820>
 4019aec:	843fff84 	addi	r16,r16,-2
 4019af0:	1585883a 	add	r2,r2,r22
 4019af4:	8822943a 	slli	r17,r17,16
 4019af8:	d9800017 	ldw	r6,0(sp)
 4019afc:	1211c83a 	sub	r8,r2,r8
 4019b00:	8c22b03a 	or	r17,r17,r16
 4019b04:	373fffcc 	andi	fp,r6,65535
 4019b08:	8abfffcc 	andi	r10,r17,65535
 4019b0c:	8820d43a 	srli	r16,r17,16
 4019b10:	5009883a 	mov	r4,r10
 4019b14:	e00b883a 	mov	r5,fp
 4019b18:	302ed43a 	srli	r23,r6,16
 4019b1c:	d8c00215 	stw	r3,8(sp)
 4019b20:	da000415 	stw	r8,16(sp)
 4019b24:	da800115 	stw	r10,4(sp)
 4019b28:	400d3680 	call	400d368 <__mulsi3>
 4019b2c:	800b883a 	mov	r5,r16
 4019b30:	e009883a 	mov	r4,fp
 4019b34:	d8800515 	stw	r2,20(sp)
 4019b38:	400d3680 	call	400d368 <__mulsi3>
 4019b3c:	8009883a 	mov	r4,r16
 4019b40:	b80b883a 	mov	r5,r23
 4019b44:	d8800315 	stw	r2,12(sp)
 4019b48:	400d3680 	call	400d368 <__mulsi3>
 4019b4c:	da800117 	ldw	r10,4(sp)
 4019b50:	b80b883a 	mov	r5,r23
 4019b54:	1021883a 	mov	r16,r2
 4019b58:	5009883a 	mov	r4,r10
 4019b5c:	400d3680 	call	400d368 <__mulsi3>
 4019b60:	d9c00517 	ldw	r7,20(sp)
 4019b64:	da400317 	ldw	r9,12(sp)
 4019b68:	d8c00217 	ldw	r3,8(sp)
 4019b6c:	3808d43a 	srli	r4,r7,16
 4019b70:	1245883a 	add	r2,r2,r9
 4019b74:	da000417 	ldw	r8,16(sp)
 4019b78:	2085883a 	add	r2,r4,r2
 4019b7c:	1240022e 	bgeu	r2,r9,4019b88 <__divdf3+0x4b8>
 4019b80:	01000074 	movhi	r4,1
 4019b84:	8121883a 	add	r16,r16,r4
 4019b88:	1008d43a 	srli	r4,r2,16
 4019b8c:	1004943a 	slli	r2,r2,16
 4019b90:	39ffffcc 	andi	r7,r7,65535
 4019b94:	2409883a 	add	r4,r4,r16
 4019b98:	11c5883a 	add	r2,r2,r7
 4019b9c:	4100bb36 	bltu	r8,r4,4019e8c <__divdf3+0x7bc>
 4019ba0:	4100d726 	beq	r8,r4,4019f00 <__divdf3+0x830>
 4019ba4:	4109c83a 	sub	r4,r8,r4
 4019ba8:	a8a1c83a 	sub	r16,r21,r2
 4019bac:	ac2b803a 	cmpltu	r21,r21,r16
 4019bb0:	256bc83a 	sub	r21,r4,r21
 4019bb4:	b540d926 	beq	r22,r21,4019f1c <__divdf3+0x84c>
 4019bb8:	a00b883a 	mov	r5,r20
 4019bbc:	a809883a 	mov	r4,r21
 4019bc0:	d8c00215 	stw	r3,8(sp)
 4019bc4:	400d2ac0 	call	400d2ac <__udivsi3>
 4019bc8:	100b883a 	mov	r5,r2
 4019bcc:	9009883a 	mov	r4,r18
 4019bd0:	d8800515 	stw	r2,20(sp)
 4019bd4:	400d3680 	call	400d368 <__mulsi3>
 4019bd8:	a809883a 	mov	r4,r21
 4019bdc:	a00b883a 	mov	r5,r20
 4019be0:	d8800415 	stw	r2,16(sp)
 4019be4:	400d3100 	call	400d310 <__umodsi3>
 4019be8:	1004943a 	slli	r2,r2,16
 4019bec:	8008d43a 	srli	r4,r16,16
 4019bf0:	da000417 	ldw	r8,16(sp)
 4019bf4:	d8c00217 	ldw	r3,8(sp)
 4019bf8:	2084b03a 	or	r2,r4,r2
 4019bfc:	d9c00517 	ldw	r7,20(sp)
 4019c00:	1200062e 	bgeu	r2,r8,4019c1c <__divdf3+0x54c>
 4019c04:	1585883a 	add	r2,r2,r22
 4019c08:	393fffc4 	addi	r4,r7,-1
 4019c0c:	1580c536 	bltu	r2,r22,4019f24 <__divdf3+0x854>
 4019c10:	1200c42e 	bgeu	r2,r8,4019f24 <__divdf3+0x854>
 4019c14:	39ffff84 	addi	r7,r7,-2
 4019c18:	1585883a 	add	r2,r2,r22
 4019c1c:	122bc83a 	sub	r21,r2,r8
 4019c20:	a00b883a 	mov	r5,r20
 4019c24:	a809883a 	mov	r4,r21
 4019c28:	d8c00215 	stw	r3,8(sp)
 4019c2c:	d9c00515 	stw	r7,20(sp)
 4019c30:	400d2ac0 	call	400d2ac <__udivsi3>
 4019c34:	9009883a 	mov	r4,r18
 4019c38:	100b883a 	mov	r5,r2
 4019c3c:	d8800415 	stw	r2,16(sp)
 4019c40:	400d3680 	call	400d368 <__mulsi3>
 4019c44:	a809883a 	mov	r4,r21
 4019c48:	a00b883a 	mov	r5,r20
 4019c4c:	1025883a 	mov	r18,r2
 4019c50:	400d3100 	call	400d310 <__umodsi3>
 4019c54:	1004943a 	slli	r2,r2,16
 4019c58:	813fffcc 	andi	r4,r16,65535
 4019c5c:	d8c00217 	ldw	r3,8(sp)
 4019c60:	20a0b03a 	or	r16,r4,r2
 4019c64:	d9c00517 	ldw	r7,20(sp)
 4019c68:	da000417 	ldw	r8,16(sp)
 4019c6c:	8480062e 	bgeu	r16,r18,4019c88 <__divdf3+0x5b8>
 4019c70:	85a1883a 	add	r16,r16,r22
 4019c74:	40bfffc4 	addi	r2,r8,-1
 4019c78:	8580ac36 	bltu	r16,r22,4019f2c <__divdf3+0x85c>
 4019c7c:	8480ab2e 	bgeu	r16,r18,4019f2c <__divdf3+0x85c>
 4019c80:	423fff84 	addi	r8,r8,-2
 4019c84:	85a1883a 	add	r16,r16,r22
 4019c88:	3804943a 	slli	r2,r7,16
 4019c8c:	84a1c83a 	sub	r16,r16,r18
 4019c90:	e009883a 	mov	r4,fp
 4019c94:	1228b03a 	or	r20,r2,r8
 4019c98:	a1ffffcc 	andi	r7,r20,65535
 4019c9c:	a024d43a 	srli	r18,r20,16
 4019ca0:	380b883a 	mov	r5,r7
 4019ca4:	d8c00215 	stw	r3,8(sp)
 4019ca8:	d9c00515 	stw	r7,20(sp)
 4019cac:	400d3680 	call	400d368 <__mulsi3>
 4019cb0:	900b883a 	mov	r5,r18
 4019cb4:	e009883a 	mov	r4,fp
 4019cb8:	102b883a 	mov	r21,r2
 4019cbc:	400d3680 	call	400d368 <__mulsi3>
 4019cc0:	900b883a 	mov	r5,r18
 4019cc4:	b809883a 	mov	r4,r23
 4019cc8:	1039883a 	mov	fp,r2
 4019ccc:	400d3680 	call	400d368 <__mulsi3>
 4019cd0:	d9c00517 	ldw	r7,20(sp)
 4019cd4:	b80b883a 	mov	r5,r23
 4019cd8:	1025883a 	mov	r18,r2
 4019cdc:	3809883a 	mov	r4,r7
 4019ce0:	400d3680 	call	400d368 <__mulsi3>
 4019ce4:	a808d43a 	srli	r4,r21,16
 4019ce8:	1705883a 	add	r2,r2,fp
 4019cec:	d8c00217 	ldw	r3,8(sp)
 4019cf0:	2085883a 	add	r2,r4,r2
 4019cf4:	1700022e 	bgeu	r2,fp,4019d00 <__divdf3+0x630>
 4019cf8:	01000074 	movhi	r4,1
 4019cfc:	9125883a 	add	r18,r18,r4
 4019d00:	1008d43a 	srli	r4,r2,16
 4019d04:	1004943a 	slli	r2,r2,16
 4019d08:	ad7fffcc 	andi	r21,r21,65535
 4019d0c:	2489883a 	add	r4,r4,r18
 4019d10:	1545883a 	add	r2,r2,r21
 4019d14:	81003836 	bltu	r16,r4,4019df8 <__divdf3+0x728>
 4019d18:	81003626 	beq	r16,r4,4019df4 <__divdf3+0x724>
 4019d1c:	a5000054 	ori	r20,r20,1
 4019d20:	1880ffc4 	addi	r2,r3,1023
 4019d24:	00bf2e0e 	bge	zero,r2,40199e0 <__alt_data_end+0xfc0199e0>
 4019d28:	a10001cc 	andi	r4,r20,7
 4019d2c:	20000726 	beq	r4,zero,4019d4c <__divdf3+0x67c>
 4019d30:	a10003cc 	andi	r4,r20,15
 4019d34:	01400104 	movi	r5,4
 4019d38:	21400426 	beq	r4,r5,4019d4c <__divdf3+0x67c>
 4019d3c:	a149883a 	add	r4,r20,r5
 4019d40:	2529803a 	cmpltu	r20,r4,r20
 4019d44:	8d23883a 	add	r17,r17,r20
 4019d48:	2029883a 	mov	r20,r4
 4019d4c:	8900402c 	andhi	r4,r17,256
 4019d50:	20000426 	beq	r4,zero,4019d64 <__divdf3+0x694>
 4019d54:	18810004 	addi	r2,r3,1024
 4019d58:	00ffc034 	movhi	r3,65280
 4019d5c:	18ffffc4 	addi	r3,r3,-1
 4019d60:	88e2703a 	and	r17,r17,r3
 4019d64:	00c1ff84 	movi	r3,2046
 4019d68:	18beb416 	blt	r3,r2,401983c <__alt_data_end+0xfc01983c>
 4019d6c:	a028d0fa 	srli	r20,r20,3
 4019d70:	882a977a 	slli	r21,r17,29
 4019d74:	8820927a 	slli	r16,r17,9
 4019d78:	1081ffcc 	andi	r2,r2,2047
 4019d7c:	ad2ab03a 	or	r21,r21,r20
 4019d80:	8020d33a 	srli	r16,r16,12
 4019d84:	9900004c 	andi	r4,r19,1
 4019d88:	003eb006 	br	401984c <__alt_data_end+0xfc01984c>
 4019d8c:	8080022c 	andhi	r2,r16,8
 4019d90:	10001226 	beq	r2,zero,4019ddc <__divdf3+0x70c>
 4019d94:	8880022c 	andhi	r2,r17,8
 4019d98:	1000101e 	bne	r2,zero,4019ddc <__divdf3+0x70c>
 4019d9c:	00800434 	movhi	r2,16
 4019da0:	8c000234 	orhi	r16,r17,8
 4019da4:	10bfffc4 	addi	r2,r2,-1
 4019da8:	b809883a 	mov	r4,r23
 4019dac:	80a0703a 	and	r16,r16,r2
 4019db0:	a02b883a 	mov	r21,r20
 4019db4:	003f0806 	br	40199d8 <__alt_data_end+0xfc0199d8>
 4019db8:	008000c4 	movi	r2,3
 4019dbc:	3880b126 	beq	r7,r2,401a084 <__divdf3+0x9b4>
 4019dc0:	00800044 	movi	r2,1
 4019dc4:	38805b1e 	bne	r7,r2,4019f34 <__divdf3+0x864>
 4019dc8:	e009883a 	mov	r4,fp
 4019dcc:	0005883a 	mov	r2,zero
 4019dd0:	0021883a 	mov	r16,zero
 4019dd4:	002b883a 	mov	r21,zero
 4019dd8:	003e9c06 	br	401984c <__alt_data_end+0xfc01984c>
 4019ddc:	00800434 	movhi	r2,16
 4019de0:	84000234 	orhi	r16,r16,8
 4019de4:	10bfffc4 	addi	r2,r2,-1
 4019de8:	b009883a 	mov	r4,r22
 4019dec:	80a0703a 	and	r16,r16,r2
 4019df0:	003ef906 	br	40199d8 <__alt_data_end+0xfc0199d8>
 4019df4:	103fca26 	beq	r2,zero,4019d20 <__alt_data_end+0xfc019d20>
 4019df8:	b421883a 	add	r16,r22,r16
 4019dfc:	a17fffc4 	addi	r5,r20,-1
 4019e00:	8580422e 	bgeu	r16,r22,4019f0c <__divdf3+0x83c>
 4019e04:	2829883a 	mov	r20,r5
 4019e08:	813fc41e 	bne	r16,r4,4019d1c <__alt_data_end+0xfc019d1c>
 4019e0c:	d9800017 	ldw	r6,0(sp)
 4019e10:	30bfc21e 	bne	r6,r2,4019d1c <__alt_data_end+0xfc019d1c>
 4019e14:	003fc206 	br	4019d20 <__alt_data_end+0xfc019d20>
 4019e18:	143ff604 	addi	r16,r2,-40
 4019e1c:	8c20983a 	sll	r16,r17,r16
 4019e20:	002b883a 	mov	r21,zero
 4019e24:	003eb406 	br	40198f8 <__alt_data_end+0xfc0198f8>
 4019e28:	d9800215 	stw	r6,8(sp)
 4019e2c:	d9c00515 	stw	r7,20(sp)
 4019e30:	da000415 	stw	r8,16(sp)
 4019e34:	400e3e00 	call	400e3e0 <__clzsi2>
 4019e38:	10800804 	addi	r2,r2,32
 4019e3c:	da000417 	ldw	r8,16(sp)
 4019e40:	d9c00517 	ldw	r7,20(sp)
 4019e44:	d9800217 	ldw	r6,8(sp)
 4019e48:	003ea106 	br	40198d0 <__alt_data_end+0xfc0198d0>
 4019e4c:	147ff604 	addi	r17,r2,-40
 4019e50:	3462983a 	sll	r17,r6,r17
 4019e54:	0029883a 	mov	r20,zero
 4019e58:	003ec906 	br	4019980 <__alt_data_end+0xfc019980>
 4019e5c:	3009883a 	mov	r4,r6
 4019e60:	d9400115 	stw	r5,4(sp)
 4019e64:	d9800215 	stw	r6,8(sp)
 4019e68:	da000415 	stw	r8,16(sp)
 4019e6c:	da400315 	stw	r9,12(sp)
 4019e70:	400e3e00 	call	400e3e0 <__clzsi2>
 4019e74:	10800804 	addi	r2,r2,32
 4019e78:	da400317 	ldw	r9,12(sp)
 4019e7c:	da000417 	ldw	r8,16(sp)
 4019e80:	d9800217 	ldw	r6,8(sp)
 4019e84:	d9400117 	ldw	r5,4(sp)
 4019e88:	003eb306 	br	4019958 <__alt_data_end+0xfc019958>
 4019e8c:	d9800017 	ldw	r6,0(sp)
 4019e90:	a9ab883a 	add	r21,r21,r6
 4019e94:	a98b803a 	cmpltu	r5,r21,r6
 4019e98:	2d8b883a 	add	r5,r5,r22
 4019e9c:	2a11883a 	add	r8,r5,r8
 4019ea0:	897fffc4 	addi	r5,r17,-1
 4019ea4:	b2000c2e 	bgeu	r22,r8,4019ed8 <__divdf3+0x808>
 4019ea8:	41003f36 	bltu	r8,r4,4019fa8 <__divdf3+0x8d8>
 4019eac:	22006c26 	beq	r4,r8,401a060 <__divdf3+0x990>
 4019eb0:	4109c83a 	sub	r4,r8,r4
 4019eb4:	2823883a 	mov	r17,r5
 4019eb8:	003f3b06 	br	4019ba8 <__alt_data_end+0xfc019ba8>
 4019ebc:	ad3ed336 	bltu	r21,r20,4019a0c <__alt_data_end+0xfc019a0c>
 4019ec0:	a804d07a 	srli	r2,r21,1
 4019ec4:	802e97fa 	slli	r23,r16,31
 4019ec8:	a82a97fa 	slli	r21,r21,31
 4019ecc:	8020d07a 	srli	r16,r16,1
 4019ed0:	b8aeb03a 	or	r23,r23,r2
 4019ed4:	003ed006 	br	4019a18 <__alt_data_end+0xfc019a18>
 4019ed8:	b23ff51e 	bne	r22,r8,4019eb0 <__alt_data_end+0xfc019eb0>
 4019edc:	d9800017 	ldw	r6,0(sp)
 4019ee0:	a9bff12e 	bgeu	r21,r6,4019ea8 <__alt_data_end+0xfc019ea8>
 4019ee4:	b109c83a 	sub	r4,r22,r4
 4019ee8:	2823883a 	mov	r17,r5
 4019eec:	003f2e06 	br	4019ba8 <__alt_data_end+0xfc019ba8>
 4019ef0:	2021883a 	mov	r16,r4
 4019ef4:	003eff06 	br	4019af4 <__alt_data_end+0xfc019af4>
 4019ef8:	2023883a 	mov	r17,r4
 4019efc:	003ee406 	br	4019a90 <__alt_data_end+0xfc019a90>
 4019f00:	a8bfe236 	bltu	r21,r2,4019e8c <__alt_data_end+0xfc019e8c>
 4019f04:	0009883a 	mov	r4,zero
 4019f08:	003f2706 	br	4019ba8 <__alt_data_end+0xfc019ba8>
 4019f0c:	81002d36 	bltu	r16,r4,4019fc4 <__divdf3+0x8f4>
 4019f10:	24005626 	beq	r4,r16,401a06c <__divdf3+0x99c>
 4019f14:	2829883a 	mov	r20,r5
 4019f18:	003f8006 	br	4019d1c <__alt_data_end+0xfc019d1c>
 4019f1c:	053fffc4 	movi	r20,-1
 4019f20:	003f7f06 	br	4019d20 <__alt_data_end+0xfc019d20>
 4019f24:	200f883a 	mov	r7,r4
 4019f28:	003f3c06 	br	4019c1c <__alt_data_end+0xfc019c1c>
 4019f2c:	1011883a 	mov	r8,r2
 4019f30:	003f5506 	br	4019c88 <__alt_data_end+0xfc019c88>
 4019f34:	e027883a 	mov	r19,fp
 4019f38:	003f7906 	br	4019d20 <__alt_data_end+0xfc019d20>
 4019f3c:	010007c4 	movi	r4,31
 4019f40:	20c02816 	blt	r4,r3,4019fe4 <__divdf3+0x914>
 4019f44:	00800804 	movi	r2,32
 4019f48:	10c5c83a 	sub	r2,r2,r3
 4019f4c:	888a983a 	sll	r5,r17,r2
 4019f50:	a0c8d83a 	srl	r4,r20,r3
 4019f54:	a084983a 	sll	r2,r20,r2
 4019f58:	88e2d83a 	srl	r17,r17,r3
 4019f5c:	2906b03a 	or	r3,r5,r4
 4019f60:	1004c03a 	cmpne	r2,r2,zero
 4019f64:	1886b03a 	or	r3,r3,r2
 4019f68:	188001cc 	andi	r2,r3,7
 4019f6c:	10000726 	beq	r2,zero,4019f8c <__divdf3+0x8bc>
 4019f70:	188003cc 	andi	r2,r3,15
 4019f74:	01000104 	movi	r4,4
 4019f78:	11000426 	beq	r2,r4,4019f8c <__divdf3+0x8bc>
 4019f7c:	1805883a 	mov	r2,r3
 4019f80:	10c00104 	addi	r3,r2,4
 4019f84:	1885803a 	cmpltu	r2,r3,r2
 4019f88:	88a3883a 	add	r17,r17,r2
 4019f8c:	8880202c 	andhi	r2,r17,128
 4019f90:	10002926 	beq	r2,zero,401a038 <__divdf3+0x968>
 4019f94:	9900004c 	andi	r4,r19,1
 4019f98:	00800044 	movi	r2,1
 4019f9c:	0021883a 	mov	r16,zero
 4019fa0:	002b883a 	mov	r21,zero
 4019fa4:	003e2906 	br	401984c <__alt_data_end+0xfc01984c>
 4019fa8:	d9800017 	ldw	r6,0(sp)
 4019fac:	8c7fff84 	addi	r17,r17,-2
 4019fb0:	a9ab883a 	add	r21,r21,r6
 4019fb4:	a98b803a 	cmpltu	r5,r21,r6
 4019fb8:	2d8b883a 	add	r5,r5,r22
 4019fbc:	2a11883a 	add	r8,r5,r8
 4019fc0:	003ef806 	br	4019ba4 <__alt_data_end+0xfc019ba4>
 4019fc4:	d9800017 	ldw	r6,0(sp)
 4019fc8:	318f883a 	add	r7,r6,r6
 4019fcc:	398b803a 	cmpltu	r5,r7,r6
 4019fd0:	2d8d883a 	add	r6,r5,r22
 4019fd4:	81a1883a 	add	r16,r16,r6
 4019fd8:	a17fff84 	addi	r5,r20,-2
 4019fdc:	d9c00015 	stw	r7,0(sp)
 4019fe0:	003f8806 	br	4019e04 <__alt_data_end+0xfc019e04>
 4019fe4:	013ff844 	movi	r4,-31
 4019fe8:	2085c83a 	sub	r2,r4,r2
 4019fec:	8888d83a 	srl	r4,r17,r2
 4019ff0:	00800804 	movi	r2,32
 4019ff4:	18802126 	beq	r3,r2,401a07c <__divdf3+0x9ac>
 4019ff8:	04001004 	movi	r16,64
 4019ffc:	80c7c83a 	sub	r3,r16,r3
 401a000:	88e0983a 	sll	r16,r17,r3
 401a004:	8504b03a 	or	r2,r16,r20
 401a008:	1004c03a 	cmpne	r2,r2,zero
 401a00c:	2084b03a 	or	r2,r4,r2
 401a010:	144001cc 	andi	r17,r2,7
 401a014:	88000d1e 	bne	r17,zero,401a04c <__divdf3+0x97c>
 401a018:	0021883a 	mov	r16,zero
 401a01c:	102ad0fa 	srli	r21,r2,3
 401a020:	9900004c 	andi	r4,r19,1
 401a024:	0005883a 	mov	r2,zero
 401a028:	ac6ab03a 	or	r21,r21,r17
 401a02c:	003e0706 	br	401984c <__alt_data_end+0xfc01984c>
 401a030:	1007883a 	mov	r3,r2
 401a034:	0023883a 	mov	r17,zero
 401a038:	8820927a 	slli	r16,r17,9
 401a03c:	1805883a 	mov	r2,r3
 401a040:	8822977a 	slli	r17,r17,29
 401a044:	8020d33a 	srli	r16,r16,12
 401a048:	003ff406 	br	401a01c <__alt_data_end+0xfc01a01c>
 401a04c:	10c003cc 	andi	r3,r2,15
 401a050:	01000104 	movi	r4,4
 401a054:	193ff626 	beq	r3,r4,401a030 <__alt_data_end+0xfc01a030>
 401a058:	0023883a 	mov	r17,zero
 401a05c:	003fc806 	br	4019f80 <__alt_data_end+0xfc019f80>
 401a060:	a8bfd136 	bltu	r21,r2,4019fa8 <__alt_data_end+0xfc019fa8>
 401a064:	2823883a 	mov	r17,r5
 401a068:	003fa606 	br	4019f04 <__alt_data_end+0xfc019f04>
 401a06c:	d9800017 	ldw	r6,0(sp)
 401a070:	30bfd436 	bltu	r6,r2,4019fc4 <__alt_data_end+0xfc019fc4>
 401a074:	2829883a 	mov	r20,r5
 401a078:	003f6406 	br	4019e0c <__alt_data_end+0xfc019e0c>
 401a07c:	0021883a 	mov	r16,zero
 401a080:	003fe006 	br	401a004 <__alt_data_end+0xfc01a004>
 401a084:	00800434 	movhi	r2,16
 401a088:	8c000234 	orhi	r16,r17,8
 401a08c:	10bfffc4 	addi	r2,r2,-1
 401a090:	e009883a 	mov	r4,fp
 401a094:	80a0703a 	and	r16,r16,r2
 401a098:	a02b883a 	mov	r21,r20
 401a09c:	003e4e06 	br	40199d8 <__alt_data_end+0xfc0199d8>

0401a0a0 <__eqdf2>:
 401a0a0:	2804d53a 	srli	r2,r5,20
 401a0a4:	3806d53a 	srli	r3,r7,20
 401a0a8:	02000434 	movhi	r8,16
 401a0ac:	423fffc4 	addi	r8,r8,-1
 401a0b0:	1081ffcc 	andi	r2,r2,2047
 401a0b4:	0281ffc4 	movi	r10,2047
 401a0b8:	2a12703a 	and	r9,r5,r8
 401a0bc:	18c1ffcc 	andi	r3,r3,2047
 401a0c0:	3a10703a 	and	r8,r7,r8
 401a0c4:	280ad7fa 	srli	r5,r5,31
 401a0c8:	380ed7fa 	srli	r7,r7,31
 401a0cc:	12801026 	beq	r2,r10,401a110 <__eqdf2+0x70>
 401a0d0:	0281ffc4 	movi	r10,2047
 401a0d4:	1a800a26 	beq	r3,r10,401a100 <__eqdf2+0x60>
 401a0d8:	10c00226 	beq	r2,r3,401a0e4 <__eqdf2+0x44>
 401a0dc:	00800044 	movi	r2,1
 401a0e0:	f800283a 	ret
 401a0e4:	4a3ffd1e 	bne	r9,r8,401a0dc <__alt_data_end+0xfc01a0dc>
 401a0e8:	21bffc1e 	bne	r4,r6,401a0dc <__alt_data_end+0xfc01a0dc>
 401a0ec:	29c00c26 	beq	r5,r7,401a120 <__eqdf2+0x80>
 401a0f0:	103ffa1e 	bne	r2,zero,401a0dc <__alt_data_end+0xfc01a0dc>
 401a0f4:	2244b03a 	or	r2,r4,r9
 401a0f8:	1004c03a 	cmpne	r2,r2,zero
 401a0fc:	f800283a 	ret
 401a100:	3214b03a 	or	r10,r6,r8
 401a104:	503ff426 	beq	r10,zero,401a0d8 <__alt_data_end+0xfc01a0d8>
 401a108:	00800044 	movi	r2,1
 401a10c:	f800283a 	ret
 401a110:	2254b03a 	or	r10,r4,r9
 401a114:	503fee26 	beq	r10,zero,401a0d0 <__alt_data_end+0xfc01a0d0>
 401a118:	00800044 	movi	r2,1
 401a11c:	f800283a 	ret
 401a120:	0005883a 	mov	r2,zero
 401a124:	f800283a 	ret

0401a128 <__gedf2>:
 401a128:	2804d53a 	srli	r2,r5,20
 401a12c:	3806d53a 	srli	r3,r7,20
 401a130:	02000434 	movhi	r8,16
 401a134:	423fffc4 	addi	r8,r8,-1
 401a138:	1081ffcc 	andi	r2,r2,2047
 401a13c:	0241ffc4 	movi	r9,2047
 401a140:	2a14703a 	and	r10,r5,r8
 401a144:	18c1ffcc 	andi	r3,r3,2047
 401a148:	3a10703a 	and	r8,r7,r8
 401a14c:	280ad7fa 	srli	r5,r5,31
 401a150:	380ed7fa 	srli	r7,r7,31
 401a154:	12401d26 	beq	r2,r9,401a1cc <__gedf2+0xa4>
 401a158:	0241ffc4 	movi	r9,2047
 401a15c:	1a401226 	beq	r3,r9,401a1a8 <__gedf2+0x80>
 401a160:	1000081e 	bne	r2,zero,401a184 <__gedf2+0x5c>
 401a164:	2296b03a 	or	r11,r4,r10
 401a168:	5813003a 	cmpeq	r9,r11,zero
 401a16c:	1800091e 	bne	r3,zero,401a194 <__gedf2+0x6c>
 401a170:	3218b03a 	or	r12,r6,r8
 401a174:	6000071e 	bne	r12,zero,401a194 <__gedf2+0x6c>
 401a178:	0005883a 	mov	r2,zero
 401a17c:	5800101e 	bne	r11,zero,401a1c0 <__gedf2+0x98>
 401a180:	f800283a 	ret
 401a184:	18000c1e 	bne	r3,zero,401a1b8 <__gedf2+0x90>
 401a188:	3212b03a 	or	r9,r6,r8
 401a18c:	48000c26 	beq	r9,zero,401a1c0 <__gedf2+0x98>
 401a190:	0013883a 	mov	r9,zero
 401a194:	39c03fcc 	andi	r7,r7,255
 401a198:	48000826 	beq	r9,zero,401a1bc <__gedf2+0x94>
 401a19c:	38000926 	beq	r7,zero,401a1c4 <__gedf2+0x9c>
 401a1a0:	00800044 	movi	r2,1
 401a1a4:	f800283a 	ret
 401a1a8:	3212b03a 	or	r9,r6,r8
 401a1ac:	483fec26 	beq	r9,zero,401a160 <__alt_data_end+0xfc01a160>
 401a1b0:	00bfff84 	movi	r2,-2
 401a1b4:	f800283a 	ret
 401a1b8:	39c03fcc 	andi	r7,r7,255
 401a1bc:	29c00626 	beq	r5,r7,401a1d8 <__gedf2+0xb0>
 401a1c0:	283ff726 	beq	r5,zero,401a1a0 <__alt_data_end+0xfc01a1a0>
 401a1c4:	00bfffc4 	movi	r2,-1
 401a1c8:	f800283a 	ret
 401a1cc:	2292b03a 	or	r9,r4,r10
 401a1d0:	483fe126 	beq	r9,zero,401a158 <__alt_data_end+0xfc01a158>
 401a1d4:	003ff606 	br	401a1b0 <__alt_data_end+0xfc01a1b0>
 401a1d8:	18bff916 	blt	r3,r2,401a1c0 <__alt_data_end+0xfc01a1c0>
 401a1dc:	10c00316 	blt	r2,r3,401a1ec <__gedf2+0xc4>
 401a1e0:	42bff736 	bltu	r8,r10,401a1c0 <__alt_data_end+0xfc01a1c0>
 401a1e4:	52000326 	beq	r10,r8,401a1f4 <__gedf2+0xcc>
 401a1e8:	5200042e 	bgeu	r10,r8,401a1fc <__gedf2+0xd4>
 401a1ec:	283fec1e 	bne	r5,zero,401a1a0 <__alt_data_end+0xfc01a1a0>
 401a1f0:	003ff406 	br	401a1c4 <__alt_data_end+0xfc01a1c4>
 401a1f4:	313ff236 	bltu	r6,r4,401a1c0 <__alt_data_end+0xfc01a1c0>
 401a1f8:	21bffc36 	bltu	r4,r6,401a1ec <__alt_data_end+0xfc01a1ec>
 401a1fc:	0005883a 	mov	r2,zero
 401a200:	f800283a 	ret

0401a204 <__ledf2>:
 401a204:	2804d53a 	srli	r2,r5,20
 401a208:	3810d53a 	srli	r8,r7,20
 401a20c:	00c00434 	movhi	r3,16
 401a210:	18ffffc4 	addi	r3,r3,-1
 401a214:	1081ffcc 	andi	r2,r2,2047
 401a218:	0241ffc4 	movi	r9,2047
 401a21c:	28d4703a 	and	r10,r5,r3
 401a220:	4201ffcc 	andi	r8,r8,2047
 401a224:	38c6703a 	and	r3,r7,r3
 401a228:	280ad7fa 	srli	r5,r5,31
 401a22c:	380ed7fa 	srli	r7,r7,31
 401a230:	12401f26 	beq	r2,r9,401a2b0 <__ledf2+0xac>
 401a234:	0241ffc4 	movi	r9,2047
 401a238:	42401426 	beq	r8,r9,401a28c <__ledf2+0x88>
 401a23c:	1000091e 	bne	r2,zero,401a264 <__ledf2+0x60>
 401a240:	2296b03a 	or	r11,r4,r10
 401a244:	5813003a 	cmpeq	r9,r11,zero
 401a248:	29403fcc 	andi	r5,r5,255
 401a24c:	40000a1e 	bne	r8,zero,401a278 <__ledf2+0x74>
 401a250:	30d8b03a 	or	r12,r6,r3
 401a254:	6000081e 	bne	r12,zero,401a278 <__ledf2+0x74>
 401a258:	0005883a 	mov	r2,zero
 401a25c:	5800111e 	bne	r11,zero,401a2a4 <__ledf2+0xa0>
 401a260:	f800283a 	ret
 401a264:	29403fcc 	andi	r5,r5,255
 401a268:	40000c1e 	bne	r8,zero,401a29c <__ledf2+0x98>
 401a26c:	30d2b03a 	or	r9,r6,r3
 401a270:	48000c26 	beq	r9,zero,401a2a4 <__ledf2+0xa0>
 401a274:	0013883a 	mov	r9,zero
 401a278:	39c03fcc 	andi	r7,r7,255
 401a27c:	48000826 	beq	r9,zero,401a2a0 <__ledf2+0x9c>
 401a280:	38001126 	beq	r7,zero,401a2c8 <__ledf2+0xc4>
 401a284:	00800044 	movi	r2,1
 401a288:	f800283a 	ret
 401a28c:	30d2b03a 	or	r9,r6,r3
 401a290:	483fea26 	beq	r9,zero,401a23c <__alt_data_end+0xfc01a23c>
 401a294:	00800084 	movi	r2,2
 401a298:	f800283a 	ret
 401a29c:	39c03fcc 	andi	r7,r7,255
 401a2a0:	39400726 	beq	r7,r5,401a2c0 <__ledf2+0xbc>
 401a2a4:	2800081e 	bne	r5,zero,401a2c8 <__ledf2+0xc4>
 401a2a8:	00800044 	movi	r2,1
 401a2ac:	f800283a 	ret
 401a2b0:	2292b03a 	or	r9,r4,r10
 401a2b4:	483fdf26 	beq	r9,zero,401a234 <__alt_data_end+0xfc01a234>
 401a2b8:	00800084 	movi	r2,2
 401a2bc:	f800283a 	ret
 401a2c0:	4080030e 	bge	r8,r2,401a2d0 <__ledf2+0xcc>
 401a2c4:	383fef26 	beq	r7,zero,401a284 <__alt_data_end+0xfc01a284>
 401a2c8:	00bfffc4 	movi	r2,-1
 401a2cc:	f800283a 	ret
 401a2d0:	123feb16 	blt	r2,r8,401a280 <__alt_data_end+0xfc01a280>
 401a2d4:	1abff336 	bltu	r3,r10,401a2a4 <__alt_data_end+0xfc01a2a4>
 401a2d8:	50c00326 	beq	r10,r3,401a2e8 <__ledf2+0xe4>
 401a2dc:	50c0042e 	bgeu	r10,r3,401a2f0 <__ledf2+0xec>
 401a2e0:	283fe81e 	bne	r5,zero,401a284 <__alt_data_end+0xfc01a284>
 401a2e4:	003ff806 	br	401a2c8 <__alt_data_end+0xfc01a2c8>
 401a2e8:	313fee36 	bltu	r6,r4,401a2a4 <__alt_data_end+0xfc01a2a4>
 401a2ec:	21bffc36 	bltu	r4,r6,401a2e0 <__alt_data_end+0xfc01a2e0>
 401a2f0:	0005883a 	mov	r2,zero
 401a2f4:	f800283a 	ret

0401a2f8 <__muldf3>:
 401a2f8:	deffee04 	addi	sp,sp,-72
 401a2fc:	dd000c15 	stw	r20,48(sp)
 401a300:	2828d53a 	srli	r20,r5,20
 401a304:	ddc00f15 	stw	r23,60(sp)
 401a308:	282ed7fa 	srli	r23,r5,31
 401a30c:	dc000815 	stw	r16,32(sp)
 401a310:	04000434 	movhi	r16,16
 401a314:	dcc00b15 	stw	r19,44(sp)
 401a318:	843fffc4 	addi	r16,r16,-1
 401a31c:	dfc01115 	stw	ra,68(sp)
 401a320:	df001015 	stw	fp,64(sp)
 401a324:	dd800e15 	stw	r22,56(sp)
 401a328:	dd400d15 	stw	r21,52(sp)
 401a32c:	dc800a15 	stw	r18,40(sp)
 401a330:	dc400915 	stw	r17,36(sp)
 401a334:	a501ffcc 	andi	r20,r20,2047
 401a338:	2c20703a 	and	r16,r5,r16
 401a33c:	b827883a 	mov	r19,r23
 401a340:	ba403fcc 	andi	r9,r23,255
 401a344:	a0006026 	beq	r20,zero,401a4c8 <__muldf3+0x1d0>
 401a348:	0081ffc4 	movi	r2,2047
 401a34c:	202d883a 	mov	r22,r4
 401a350:	a0803626 	beq	r20,r2,401a42c <__muldf3+0x134>
 401a354:	84000434 	orhi	r16,r16,16
 401a358:	200ad77a 	srli	r5,r4,29
 401a35c:	800490fa 	slli	r2,r16,3
 401a360:	202c90fa 	slli	r22,r4,3
 401a364:	a53f0044 	addi	r20,r20,-1023
 401a368:	28a0b03a 	or	r16,r5,r2
 401a36c:	002b883a 	mov	r21,zero
 401a370:	000b883a 	mov	r5,zero
 401a374:	3804d53a 	srli	r2,r7,20
 401a378:	3838d7fa 	srli	fp,r7,31
 401a37c:	04400434 	movhi	r17,16
 401a380:	8c7fffc4 	addi	r17,r17,-1
 401a384:	1081ffcc 	andi	r2,r2,2047
 401a388:	3025883a 	mov	r18,r6
 401a38c:	3c62703a 	and	r17,r7,r17
 401a390:	e2803fcc 	andi	r10,fp,255
 401a394:	10006d26 	beq	r2,zero,401a54c <__muldf3+0x254>
 401a398:	00c1ffc4 	movi	r3,2047
 401a39c:	10c06526 	beq	r2,r3,401a534 <__muldf3+0x23c>
 401a3a0:	8c400434 	orhi	r17,r17,16
 401a3a4:	300ed77a 	srli	r7,r6,29
 401a3a8:	880690fa 	slli	r3,r17,3
 401a3ac:	302490fa 	slli	r18,r6,3
 401a3b0:	10bf0044 	addi	r2,r2,-1023
 401a3b4:	38e2b03a 	or	r17,r7,r3
 401a3b8:	000f883a 	mov	r7,zero
 401a3bc:	a087883a 	add	r3,r20,r2
 401a3c0:	010003c4 	movi	r4,15
 401a3c4:	3d44b03a 	or	r2,r7,r21
 401a3c8:	e5ccf03a 	xor	r6,fp,r23
 401a3cc:	1a000044 	addi	r8,r3,1
 401a3d0:	20809b36 	bltu	r4,r2,401a640 <__muldf3+0x348>
 401a3d4:	100490ba 	slli	r2,r2,2
 401a3d8:	010100b4 	movhi	r4,1026
 401a3dc:	2128fb04 	addi	r4,r4,-23572
 401a3e0:	1105883a 	add	r2,r2,r4
 401a3e4:	10800017 	ldw	r2,0(r2)
 401a3e8:	1000683a 	jmp	r2
 401a3ec:	0401a640 	call	401a64 <__alt_mem_sdram-0x3bfe59c>
 401a3f0:	0401a44c 	andi	r16,zero,1681
 401a3f4:	0401a44c 	andi	r16,zero,1681
 401a3f8:	0401a448 	cmpgei	r16,zero,1681
 401a3fc:	0401a61c 	xori	r16,zero,1688
 401a400:	0401a61c 	xori	r16,zero,1688
 401a404:	0401a604 	movi	r16,1688
 401a408:	0401a448 	cmpgei	r16,zero,1681
 401a40c:	0401a61c 	xori	r16,zero,1688
 401a410:	0401a604 	movi	r16,1688
 401a414:	0401a61c 	xori	r16,zero,1688
 401a418:	0401a448 	cmpgei	r16,zero,1681
 401a41c:	0401a62c 	andhi	r16,zero,1688
 401a420:	0401a62c 	andhi	r16,zero,1688
 401a424:	0401a62c 	andhi	r16,zero,1688
 401a428:	0401a98c 	andi	r16,zero,1702
 401a42c:	2404b03a 	or	r2,r4,r16
 401a430:	1000711e 	bne	r2,zero,401a5f8 <__muldf3+0x300>
 401a434:	05400204 	movi	r21,8
 401a438:	0021883a 	mov	r16,zero
 401a43c:	002d883a 	mov	r22,zero
 401a440:	01400084 	movi	r5,2
 401a444:	003fcb06 	br	401a374 <__alt_data_end+0xfc01a374>
 401a448:	500d883a 	mov	r6,r10
 401a44c:	00800084 	movi	r2,2
 401a450:	38805926 	beq	r7,r2,401a5b8 <__muldf3+0x2c0>
 401a454:	008000c4 	movi	r2,3
 401a458:	3881bb26 	beq	r7,r2,401ab48 <__muldf3+0x850>
 401a45c:	00800044 	movi	r2,1
 401a460:	3881961e 	bne	r7,r2,401aabc <__muldf3+0x7c4>
 401a464:	3027883a 	mov	r19,r6
 401a468:	0005883a 	mov	r2,zero
 401a46c:	0021883a 	mov	r16,zero
 401a470:	002d883a 	mov	r22,zero
 401a474:	1004953a 	slli	r2,r2,20
 401a478:	98c03fcc 	andi	r3,r19,255
 401a47c:	04400434 	movhi	r17,16
 401a480:	8c7fffc4 	addi	r17,r17,-1
 401a484:	180697fa 	slli	r3,r3,31
 401a488:	8460703a 	and	r16,r16,r17
 401a48c:	80a0b03a 	or	r16,r16,r2
 401a490:	80c6b03a 	or	r3,r16,r3
 401a494:	b005883a 	mov	r2,r22
 401a498:	dfc01117 	ldw	ra,68(sp)
 401a49c:	df001017 	ldw	fp,64(sp)
 401a4a0:	ddc00f17 	ldw	r23,60(sp)
 401a4a4:	dd800e17 	ldw	r22,56(sp)
 401a4a8:	dd400d17 	ldw	r21,52(sp)
 401a4ac:	dd000c17 	ldw	r20,48(sp)
 401a4b0:	dcc00b17 	ldw	r19,44(sp)
 401a4b4:	dc800a17 	ldw	r18,40(sp)
 401a4b8:	dc400917 	ldw	r17,36(sp)
 401a4bc:	dc000817 	ldw	r16,32(sp)
 401a4c0:	dec01204 	addi	sp,sp,72
 401a4c4:	f800283a 	ret
 401a4c8:	2404b03a 	or	r2,r4,r16
 401a4cc:	202b883a 	mov	r21,r4
 401a4d0:	10004426 	beq	r2,zero,401a5e4 <__muldf3+0x2ec>
 401a4d4:	80015126 	beq	r16,zero,401aa1c <__muldf3+0x724>
 401a4d8:	8009883a 	mov	r4,r16
 401a4dc:	d9800715 	stw	r6,28(sp)
 401a4e0:	d9c00215 	stw	r7,8(sp)
 401a4e4:	da400415 	stw	r9,16(sp)
 401a4e8:	400e3e00 	call	400e3e0 <__clzsi2>
 401a4ec:	d9800717 	ldw	r6,28(sp)
 401a4f0:	d9c00217 	ldw	r7,8(sp)
 401a4f4:	da400417 	ldw	r9,16(sp)
 401a4f8:	113ffd44 	addi	r4,r2,-11
 401a4fc:	00c00704 	movi	r3,28
 401a500:	19014216 	blt	r3,r4,401aa0c <__muldf3+0x714>
 401a504:	00c00744 	movi	r3,29
 401a508:	15bffe04 	addi	r22,r2,-8
 401a50c:	1907c83a 	sub	r3,r3,r4
 401a510:	85a0983a 	sll	r16,r16,r22
 401a514:	a8c6d83a 	srl	r3,r21,r3
 401a518:	adac983a 	sll	r22,r21,r22
 401a51c:	1c20b03a 	or	r16,r3,r16
 401a520:	1080fcc4 	addi	r2,r2,1011
 401a524:	00a9c83a 	sub	r20,zero,r2
 401a528:	002b883a 	mov	r21,zero
 401a52c:	000b883a 	mov	r5,zero
 401a530:	003f9006 	br	401a374 <__alt_data_end+0xfc01a374>
 401a534:	3446b03a 	or	r3,r6,r17
 401a538:	1800281e 	bne	r3,zero,401a5dc <__muldf3+0x2e4>
 401a53c:	0023883a 	mov	r17,zero
 401a540:	0025883a 	mov	r18,zero
 401a544:	01c00084 	movi	r7,2
 401a548:	003f9c06 	br	401a3bc <__alt_data_end+0xfc01a3bc>
 401a54c:	3446b03a 	or	r3,r6,r17
 401a550:	18001e26 	beq	r3,zero,401a5cc <__muldf3+0x2d4>
 401a554:	88012126 	beq	r17,zero,401a9dc <__muldf3+0x6e4>
 401a558:	8809883a 	mov	r4,r17
 401a55c:	d9400215 	stw	r5,8(sp)
 401a560:	d9800715 	stw	r6,28(sp)
 401a564:	da400415 	stw	r9,16(sp)
 401a568:	da800315 	stw	r10,12(sp)
 401a56c:	400e3e00 	call	400e3e0 <__clzsi2>
 401a570:	d9400217 	ldw	r5,8(sp)
 401a574:	d9800717 	ldw	r6,28(sp)
 401a578:	da400417 	ldw	r9,16(sp)
 401a57c:	da800317 	ldw	r10,12(sp)
 401a580:	113ffd44 	addi	r4,r2,-11
 401a584:	00c00704 	movi	r3,28
 401a588:	19011016 	blt	r3,r4,401a9cc <__muldf3+0x6d4>
 401a58c:	00c00744 	movi	r3,29
 401a590:	14bffe04 	addi	r18,r2,-8
 401a594:	1907c83a 	sub	r3,r3,r4
 401a598:	8ca2983a 	sll	r17,r17,r18
 401a59c:	30c6d83a 	srl	r3,r6,r3
 401a5a0:	34a4983a 	sll	r18,r6,r18
 401a5a4:	1c62b03a 	or	r17,r3,r17
 401a5a8:	1080fcc4 	addi	r2,r2,1011
 401a5ac:	0085c83a 	sub	r2,zero,r2
 401a5b0:	000f883a 	mov	r7,zero
 401a5b4:	003f8106 	br	401a3bc <__alt_data_end+0xfc01a3bc>
 401a5b8:	3027883a 	mov	r19,r6
 401a5bc:	0081ffc4 	movi	r2,2047
 401a5c0:	0021883a 	mov	r16,zero
 401a5c4:	002d883a 	mov	r22,zero
 401a5c8:	003faa06 	br	401a474 <__alt_data_end+0xfc01a474>
 401a5cc:	0023883a 	mov	r17,zero
 401a5d0:	0025883a 	mov	r18,zero
 401a5d4:	01c00044 	movi	r7,1
 401a5d8:	003f7806 	br	401a3bc <__alt_data_end+0xfc01a3bc>
 401a5dc:	01c000c4 	movi	r7,3
 401a5e0:	003f7606 	br	401a3bc <__alt_data_end+0xfc01a3bc>
 401a5e4:	05400104 	movi	r21,4
 401a5e8:	0021883a 	mov	r16,zero
 401a5ec:	002d883a 	mov	r22,zero
 401a5f0:	01400044 	movi	r5,1
 401a5f4:	003f5f06 	br	401a374 <__alt_data_end+0xfc01a374>
 401a5f8:	05400304 	movi	r21,12
 401a5fc:	014000c4 	movi	r5,3
 401a600:	003f5c06 	br	401a374 <__alt_data_end+0xfc01a374>
 401a604:	04000434 	movhi	r16,16
 401a608:	0027883a 	mov	r19,zero
 401a60c:	843fffc4 	addi	r16,r16,-1
 401a610:	05bfffc4 	movi	r22,-1
 401a614:	0081ffc4 	movi	r2,2047
 401a618:	003f9606 	br	401a474 <__alt_data_end+0xfc01a474>
 401a61c:	8023883a 	mov	r17,r16
 401a620:	b025883a 	mov	r18,r22
 401a624:	280f883a 	mov	r7,r5
 401a628:	003f8806 	br	401a44c <__alt_data_end+0xfc01a44c>
 401a62c:	8023883a 	mov	r17,r16
 401a630:	b025883a 	mov	r18,r22
 401a634:	480d883a 	mov	r6,r9
 401a638:	280f883a 	mov	r7,r5
 401a63c:	003f8306 	br	401a44c <__alt_data_end+0xfc01a44c>
 401a640:	b026d43a 	srli	r19,r22,16
 401a644:	902ed43a 	srli	r23,r18,16
 401a648:	b5bfffcc 	andi	r22,r22,65535
 401a64c:	94bfffcc 	andi	r18,r18,65535
 401a650:	b00b883a 	mov	r5,r22
 401a654:	9009883a 	mov	r4,r18
 401a658:	d8c00515 	stw	r3,20(sp)
 401a65c:	d9800715 	stw	r6,28(sp)
 401a660:	da000615 	stw	r8,24(sp)
 401a664:	400d3680 	call	400d368 <__mulsi3>
 401a668:	980b883a 	mov	r5,r19
 401a66c:	9009883a 	mov	r4,r18
 401a670:	1029883a 	mov	r20,r2
 401a674:	400d3680 	call	400d368 <__mulsi3>
 401a678:	b80b883a 	mov	r5,r23
 401a67c:	9809883a 	mov	r4,r19
 401a680:	102b883a 	mov	r21,r2
 401a684:	400d3680 	call	400d368 <__mulsi3>
 401a688:	b809883a 	mov	r4,r23
 401a68c:	b00b883a 	mov	r5,r22
 401a690:	1039883a 	mov	fp,r2
 401a694:	400d3680 	call	400d368 <__mulsi3>
 401a698:	a008d43a 	srli	r4,r20,16
 401a69c:	1545883a 	add	r2,r2,r21
 401a6a0:	d8c00517 	ldw	r3,20(sp)
 401a6a4:	2085883a 	add	r2,r4,r2
 401a6a8:	d9800717 	ldw	r6,28(sp)
 401a6ac:	da000617 	ldw	r8,24(sp)
 401a6b0:	1540022e 	bgeu	r2,r21,401a6bc <__muldf3+0x3c4>
 401a6b4:	01000074 	movhi	r4,1
 401a6b8:	e139883a 	add	fp,fp,r4
 401a6bc:	100e943a 	slli	r7,r2,16
 401a6c0:	1004d43a 	srli	r2,r2,16
 401a6c4:	882ad43a 	srli	r21,r17,16
 401a6c8:	a53fffcc 	andi	r20,r20,65535
 401a6cc:	8c7fffcc 	andi	r17,r17,65535
 401a6d0:	3d29883a 	add	r20,r7,r20
 401a6d4:	b00b883a 	mov	r5,r22
 401a6d8:	8809883a 	mov	r4,r17
 401a6dc:	d8c00515 	stw	r3,20(sp)
 401a6e0:	d9800715 	stw	r6,28(sp)
 401a6e4:	da000615 	stw	r8,24(sp)
 401a6e8:	dd000115 	stw	r20,4(sp)
 401a6ec:	d8800015 	stw	r2,0(sp)
 401a6f0:	400d3680 	call	400d368 <__mulsi3>
 401a6f4:	980b883a 	mov	r5,r19
 401a6f8:	8809883a 	mov	r4,r17
 401a6fc:	d8800215 	stw	r2,8(sp)
 401a700:	400d3680 	call	400d368 <__mulsi3>
 401a704:	9809883a 	mov	r4,r19
 401a708:	a80b883a 	mov	r5,r21
 401a70c:	1029883a 	mov	r20,r2
 401a710:	400d3680 	call	400d368 <__mulsi3>
 401a714:	b00b883a 	mov	r5,r22
 401a718:	a809883a 	mov	r4,r21
 401a71c:	d8800415 	stw	r2,16(sp)
 401a720:	400d3680 	call	400d368 <__mulsi3>
 401a724:	d9c00217 	ldw	r7,8(sp)
 401a728:	1505883a 	add	r2,r2,r20
 401a72c:	d8c00517 	ldw	r3,20(sp)
 401a730:	3826d43a 	srli	r19,r7,16
 401a734:	d9800717 	ldw	r6,28(sp)
 401a738:	da000617 	ldw	r8,24(sp)
 401a73c:	9885883a 	add	r2,r19,r2
 401a740:	da400417 	ldw	r9,16(sp)
 401a744:	1500022e 	bgeu	r2,r20,401a750 <__muldf3+0x458>
 401a748:	01000074 	movhi	r4,1
 401a74c:	4913883a 	add	r9,r9,r4
 401a750:	1028d43a 	srli	r20,r2,16
 401a754:	1004943a 	slli	r2,r2,16
 401a758:	802cd43a 	srli	r22,r16,16
 401a75c:	843fffcc 	andi	r16,r16,65535
 401a760:	3cffffcc 	andi	r19,r7,65535
 401a764:	9009883a 	mov	r4,r18
 401a768:	800b883a 	mov	r5,r16
 401a76c:	a269883a 	add	r20,r20,r9
 401a770:	d8c00515 	stw	r3,20(sp)
 401a774:	d9800715 	stw	r6,28(sp)
 401a778:	da000615 	stw	r8,24(sp)
 401a77c:	14e7883a 	add	r19,r2,r19
 401a780:	400d3680 	call	400d368 <__mulsi3>
 401a784:	9009883a 	mov	r4,r18
 401a788:	b00b883a 	mov	r5,r22
 401a78c:	d8800315 	stw	r2,12(sp)
 401a790:	400d3680 	call	400d368 <__mulsi3>
 401a794:	b809883a 	mov	r4,r23
 401a798:	b00b883a 	mov	r5,r22
 401a79c:	d8800215 	stw	r2,8(sp)
 401a7a0:	400d3680 	call	400d368 <__mulsi3>
 401a7a4:	b80b883a 	mov	r5,r23
 401a7a8:	8009883a 	mov	r4,r16
 401a7ac:	d8800415 	stw	r2,16(sp)
 401a7b0:	400d3680 	call	400d368 <__mulsi3>
 401a7b4:	da800317 	ldw	r10,12(sp)
 401a7b8:	d9c00217 	ldw	r7,8(sp)
 401a7bc:	d9000017 	ldw	r4,0(sp)
 401a7c0:	502ed43a 	srli	r23,r10,16
 401a7c4:	11c5883a 	add	r2,r2,r7
 401a7c8:	24e5883a 	add	r18,r4,r19
 401a7cc:	b885883a 	add	r2,r23,r2
 401a7d0:	d8c00517 	ldw	r3,20(sp)
 401a7d4:	d9800717 	ldw	r6,28(sp)
 401a7d8:	da000617 	ldw	r8,24(sp)
 401a7dc:	da400417 	ldw	r9,16(sp)
 401a7e0:	11c0022e 	bgeu	r2,r7,401a7ec <__muldf3+0x4f4>
 401a7e4:	01000074 	movhi	r4,1
 401a7e8:	4913883a 	add	r9,r9,r4
 401a7ec:	100ed43a 	srli	r7,r2,16
 401a7f0:	1004943a 	slli	r2,r2,16
 401a7f4:	55ffffcc 	andi	r23,r10,65535
 401a7f8:	3a53883a 	add	r9,r7,r9
 401a7fc:	8809883a 	mov	r4,r17
 401a800:	800b883a 	mov	r5,r16
 401a804:	d8c00515 	stw	r3,20(sp)
 401a808:	d9800715 	stw	r6,28(sp)
 401a80c:	da000615 	stw	r8,24(sp)
 401a810:	da400415 	stw	r9,16(sp)
 401a814:	15ef883a 	add	r23,r2,r23
 401a818:	400d3680 	call	400d368 <__mulsi3>
 401a81c:	8809883a 	mov	r4,r17
 401a820:	b00b883a 	mov	r5,r22
 401a824:	d8800215 	stw	r2,8(sp)
 401a828:	400d3680 	call	400d368 <__mulsi3>
 401a82c:	b00b883a 	mov	r5,r22
 401a830:	a809883a 	mov	r4,r21
 401a834:	d8800315 	stw	r2,12(sp)
 401a838:	400d3680 	call	400d368 <__mulsi3>
 401a83c:	8009883a 	mov	r4,r16
 401a840:	a80b883a 	mov	r5,r21
 401a844:	1023883a 	mov	r17,r2
 401a848:	400d3680 	call	400d368 <__mulsi3>
 401a84c:	d9c00217 	ldw	r7,8(sp)
 401a850:	da800317 	ldw	r10,12(sp)
 401a854:	d8c00517 	ldw	r3,20(sp)
 401a858:	3808d43a 	srli	r4,r7,16
 401a85c:	1285883a 	add	r2,r2,r10
 401a860:	d9800717 	ldw	r6,28(sp)
 401a864:	2085883a 	add	r2,r4,r2
 401a868:	da000617 	ldw	r8,24(sp)
 401a86c:	da400417 	ldw	r9,16(sp)
 401a870:	1280022e 	bgeu	r2,r10,401a87c <__muldf3+0x584>
 401a874:	01000074 	movhi	r4,1
 401a878:	8923883a 	add	r17,r17,r4
 401a87c:	1008943a 	slli	r4,r2,16
 401a880:	39ffffcc 	andi	r7,r7,65535
 401a884:	e4b9883a 	add	fp,fp,r18
 401a888:	21cf883a 	add	r7,r4,r7
 401a88c:	e4e7803a 	cmpltu	r19,fp,r19
 401a890:	3d0f883a 	add	r7,r7,r20
 401a894:	bf39883a 	add	fp,r23,fp
 401a898:	99c9883a 	add	r4,r19,r7
 401a89c:	e5ef803a 	cmpltu	r23,fp,r23
 401a8a0:	490b883a 	add	r5,r9,r4
 401a8a4:	1004d43a 	srli	r2,r2,16
 401a8a8:	b965883a 	add	r18,r23,r5
 401a8ac:	24c9803a 	cmpltu	r4,r4,r19
 401a8b0:	3d29803a 	cmpltu	r20,r7,r20
 401a8b4:	a128b03a 	or	r20,r20,r4
 401a8b8:	95ef803a 	cmpltu	r23,r18,r23
 401a8bc:	2a53803a 	cmpltu	r9,r5,r9
 401a8c0:	a0a9883a 	add	r20,r20,r2
 401a8c4:	4deeb03a 	or	r23,r9,r23
 401a8c8:	a5ef883a 	add	r23,r20,r23
 401a8cc:	bc63883a 	add	r17,r23,r17
 401a8d0:	e004927a 	slli	r2,fp,9
 401a8d4:	d9000117 	ldw	r4,4(sp)
 401a8d8:	882e927a 	slli	r23,r17,9
 401a8dc:	9022d5fa 	srli	r17,r18,23
 401a8e0:	e038d5fa 	srli	fp,fp,23
 401a8e4:	1104b03a 	or	r2,r2,r4
 401a8e8:	9024927a 	slli	r18,r18,9
 401a8ec:	1004c03a 	cmpne	r2,r2,zero
 401a8f0:	bc62b03a 	or	r17,r23,r17
 401a8f4:	1738b03a 	or	fp,r2,fp
 401a8f8:	8880402c 	andhi	r2,r17,256
 401a8fc:	e4a4b03a 	or	r18,fp,r18
 401a900:	10000726 	beq	r2,zero,401a920 <__muldf3+0x628>
 401a904:	9006d07a 	srli	r3,r18,1
 401a908:	880497fa 	slli	r2,r17,31
 401a90c:	9480004c 	andi	r18,r18,1
 401a910:	8822d07a 	srli	r17,r17,1
 401a914:	1ca4b03a 	or	r18,r3,r18
 401a918:	14a4b03a 	or	r18,r2,r18
 401a91c:	4007883a 	mov	r3,r8
 401a920:	1880ffc4 	addi	r2,r3,1023
 401a924:	0080460e 	bge	zero,r2,401aa40 <__muldf3+0x748>
 401a928:	910001cc 	andi	r4,r18,7
 401a92c:	20000726 	beq	r4,zero,401a94c <__muldf3+0x654>
 401a930:	910003cc 	andi	r4,r18,15
 401a934:	01400104 	movi	r5,4
 401a938:	21400426 	beq	r4,r5,401a94c <__muldf3+0x654>
 401a93c:	9149883a 	add	r4,r18,r5
 401a940:	24a5803a 	cmpltu	r18,r4,r18
 401a944:	8ca3883a 	add	r17,r17,r18
 401a948:	2025883a 	mov	r18,r4
 401a94c:	8900402c 	andhi	r4,r17,256
 401a950:	20000426 	beq	r4,zero,401a964 <__muldf3+0x66c>
 401a954:	18810004 	addi	r2,r3,1024
 401a958:	00ffc034 	movhi	r3,65280
 401a95c:	18ffffc4 	addi	r3,r3,-1
 401a960:	88e2703a 	and	r17,r17,r3
 401a964:	00c1ff84 	movi	r3,2046
 401a968:	18bf1316 	blt	r3,r2,401a5b8 <__alt_data_end+0xfc01a5b8>
 401a96c:	882c977a 	slli	r22,r17,29
 401a970:	9024d0fa 	srli	r18,r18,3
 401a974:	8822927a 	slli	r17,r17,9
 401a978:	1081ffcc 	andi	r2,r2,2047
 401a97c:	b4acb03a 	or	r22,r22,r18
 401a980:	8820d33a 	srli	r16,r17,12
 401a984:	3027883a 	mov	r19,r6
 401a988:	003eba06 	br	401a474 <__alt_data_end+0xfc01a474>
 401a98c:	8080022c 	andhi	r2,r16,8
 401a990:	10000926 	beq	r2,zero,401a9b8 <__muldf3+0x6c0>
 401a994:	8880022c 	andhi	r2,r17,8
 401a998:	1000071e 	bne	r2,zero,401a9b8 <__muldf3+0x6c0>
 401a99c:	00800434 	movhi	r2,16
 401a9a0:	8c000234 	orhi	r16,r17,8
 401a9a4:	10bfffc4 	addi	r2,r2,-1
 401a9a8:	e027883a 	mov	r19,fp
 401a9ac:	80a0703a 	and	r16,r16,r2
 401a9b0:	902d883a 	mov	r22,r18
 401a9b4:	003f1706 	br	401a614 <__alt_data_end+0xfc01a614>
 401a9b8:	00800434 	movhi	r2,16
 401a9bc:	84000234 	orhi	r16,r16,8
 401a9c0:	10bfffc4 	addi	r2,r2,-1
 401a9c4:	80a0703a 	and	r16,r16,r2
 401a9c8:	003f1206 	br	401a614 <__alt_data_end+0xfc01a614>
 401a9cc:	147ff604 	addi	r17,r2,-40
 401a9d0:	3462983a 	sll	r17,r6,r17
 401a9d4:	0025883a 	mov	r18,zero
 401a9d8:	003ef306 	br	401a5a8 <__alt_data_end+0xfc01a5a8>
 401a9dc:	3009883a 	mov	r4,r6
 401a9e0:	d9400215 	stw	r5,8(sp)
 401a9e4:	d9800715 	stw	r6,28(sp)
 401a9e8:	da400415 	stw	r9,16(sp)
 401a9ec:	da800315 	stw	r10,12(sp)
 401a9f0:	400e3e00 	call	400e3e0 <__clzsi2>
 401a9f4:	10800804 	addi	r2,r2,32
 401a9f8:	da800317 	ldw	r10,12(sp)
 401a9fc:	da400417 	ldw	r9,16(sp)
 401aa00:	d9800717 	ldw	r6,28(sp)
 401aa04:	d9400217 	ldw	r5,8(sp)
 401aa08:	003edd06 	br	401a580 <__alt_data_end+0xfc01a580>
 401aa0c:	143ff604 	addi	r16,r2,-40
 401aa10:	ac20983a 	sll	r16,r21,r16
 401aa14:	002d883a 	mov	r22,zero
 401aa18:	003ec106 	br	401a520 <__alt_data_end+0xfc01a520>
 401aa1c:	d9800715 	stw	r6,28(sp)
 401aa20:	d9c00215 	stw	r7,8(sp)
 401aa24:	da400415 	stw	r9,16(sp)
 401aa28:	400e3e00 	call	400e3e0 <__clzsi2>
 401aa2c:	10800804 	addi	r2,r2,32
 401aa30:	da400417 	ldw	r9,16(sp)
 401aa34:	d9c00217 	ldw	r7,8(sp)
 401aa38:	d9800717 	ldw	r6,28(sp)
 401aa3c:	003eae06 	br	401a4f8 <__alt_data_end+0xfc01a4f8>
 401aa40:	00c00044 	movi	r3,1
 401aa44:	1887c83a 	sub	r3,r3,r2
 401aa48:	01000e04 	movi	r4,56
 401aa4c:	20fe8516 	blt	r4,r3,401a464 <__alt_data_end+0xfc01a464>
 401aa50:	010007c4 	movi	r4,31
 401aa54:	20c01b16 	blt	r4,r3,401aac4 <__muldf3+0x7cc>
 401aa58:	00800804 	movi	r2,32
 401aa5c:	10c5c83a 	sub	r2,r2,r3
 401aa60:	888a983a 	sll	r5,r17,r2
 401aa64:	90c8d83a 	srl	r4,r18,r3
 401aa68:	9084983a 	sll	r2,r18,r2
 401aa6c:	88e2d83a 	srl	r17,r17,r3
 401aa70:	2906b03a 	or	r3,r5,r4
 401aa74:	1004c03a 	cmpne	r2,r2,zero
 401aa78:	1886b03a 	or	r3,r3,r2
 401aa7c:	188001cc 	andi	r2,r3,7
 401aa80:	10000726 	beq	r2,zero,401aaa0 <__muldf3+0x7a8>
 401aa84:	188003cc 	andi	r2,r3,15
 401aa88:	01000104 	movi	r4,4
 401aa8c:	11000426 	beq	r2,r4,401aaa0 <__muldf3+0x7a8>
 401aa90:	1805883a 	mov	r2,r3
 401aa94:	10c00104 	addi	r3,r2,4
 401aa98:	1885803a 	cmpltu	r2,r3,r2
 401aa9c:	88a3883a 	add	r17,r17,r2
 401aaa0:	8880202c 	andhi	r2,r17,128
 401aaa4:	10001c26 	beq	r2,zero,401ab18 <__muldf3+0x820>
 401aaa8:	3027883a 	mov	r19,r6
 401aaac:	00800044 	movi	r2,1
 401aab0:	0021883a 	mov	r16,zero
 401aab4:	002d883a 	mov	r22,zero
 401aab8:	003e6e06 	br	401a474 <__alt_data_end+0xfc01a474>
 401aabc:	4007883a 	mov	r3,r8
 401aac0:	003f9706 	br	401a920 <__alt_data_end+0xfc01a920>
 401aac4:	017ff844 	movi	r5,-31
 401aac8:	2885c83a 	sub	r2,r5,r2
 401aacc:	888ad83a 	srl	r5,r17,r2
 401aad0:	00800804 	movi	r2,32
 401aad4:	18801a26 	beq	r3,r2,401ab40 <__muldf3+0x848>
 401aad8:	01001004 	movi	r4,64
 401aadc:	20c7c83a 	sub	r3,r4,r3
 401aae0:	88e2983a 	sll	r17,r17,r3
 401aae4:	8ca4b03a 	or	r18,r17,r18
 401aae8:	9004c03a 	cmpne	r2,r18,zero
 401aaec:	2884b03a 	or	r2,r5,r2
 401aaf0:	144001cc 	andi	r17,r2,7
 401aaf4:	88000d1e 	bne	r17,zero,401ab2c <__muldf3+0x834>
 401aaf8:	0021883a 	mov	r16,zero
 401aafc:	102cd0fa 	srli	r22,r2,3
 401ab00:	3027883a 	mov	r19,r6
 401ab04:	0005883a 	mov	r2,zero
 401ab08:	b46cb03a 	or	r22,r22,r17
 401ab0c:	003e5906 	br	401a474 <__alt_data_end+0xfc01a474>
 401ab10:	1007883a 	mov	r3,r2
 401ab14:	0023883a 	mov	r17,zero
 401ab18:	8820927a 	slli	r16,r17,9
 401ab1c:	1805883a 	mov	r2,r3
 401ab20:	8822977a 	slli	r17,r17,29
 401ab24:	8020d33a 	srli	r16,r16,12
 401ab28:	003ff406 	br	401aafc <__alt_data_end+0xfc01aafc>
 401ab2c:	10c003cc 	andi	r3,r2,15
 401ab30:	01000104 	movi	r4,4
 401ab34:	193ff626 	beq	r3,r4,401ab10 <__alt_data_end+0xfc01ab10>
 401ab38:	0023883a 	mov	r17,zero
 401ab3c:	003fd506 	br	401aa94 <__alt_data_end+0xfc01aa94>
 401ab40:	0023883a 	mov	r17,zero
 401ab44:	003fe706 	br	401aae4 <__alt_data_end+0xfc01aae4>
 401ab48:	00800434 	movhi	r2,16
 401ab4c:	8c000234 	orhi	r16,r17,8
 401ab50:	10bfffc4 	addi	r2,r2,-1
 401ab54:	3027883a 	mov	r19,r6
 401ab58:	80a0703a 	and	r16,r16,r2
 401ab5c:	902d883a 	mov	r22,r18
 401ab60:	003eac06 	br	401a614 <__alt_data_end+0xfc01a614>

0401ab64 <__subdf3>:
 401ab64:	02000434 	movhi	r8,16
 401ab68:	423fffc4 	addi	r8,r8,-1
 401ab6c:	defffb04 	addi	sp,sp,-20
 401ab70:	2a14703a 	and	r10,r5,r8
 401ab74:	3812d53a 	srli	r9,r7,20
 401ab78:	3a10703a 	and	r8,r7,r8
 401ab7c:	2006d77a 	srli	r3,r4,29
 401ab80:	3004d77a 	srli	r2,r6,29
 401ab84:	dc000015 	stw	r16,0(sp)
 401ab88:	501490fa 	slli	r10,r10,3
 401ab8c:	2820d53a 	srli	r16,r5,20
 401ab90:	401090fa 	slli	r8,r8,3
 401ab94:	dc800215 	stw	r18,8(sp)
 401ab98:	dc400115 	stw	r17,4(sp)
 401ab9c:	dfc00415 	stw	ra,16(sp)
 401aba0:	202290fa 	slli	r17,r4,3
 401aba4:	dcc00315 	stw	r19,12(sp)
 401aba8:	4a41ffcc 	andi	r9,r9,2047
 401abac:	0101ffc4 	movi	r4,2047
 401abb0:	2824d7fa 	srli	r18,r5,31
 401abb4:	8401ffcc 	andi	r16,r16,2047
 401abb8:	50c6b03a 	or	r3,r10,r3
 401abbc:	380ed7fa 	srli	r7,r7,31
 401abc0:	408ab03a 	or	r5,r8,r2
 401abc4:	300c90fa 	slli	r6,r6,3
 401abc8:	49009626 	beq	r9,r4,401ae24 <__subdf3+0x2c0>
 401abcc:	39c0005c 	xori	r7,r7,1
 401abd0:	8245c83a 	sub	r2,r16,r9
 401abd4:	3c807426 	beq	r7,r18,401ada8 <__subdf3+0x244>
 401abd8:	0080af0e 	bge	zero,r2,401ae98 <__subdf3+0x334>
 401abdc:	48002a1e 	bne	r9,zero,401ac88 <__subdf3+0x124>
 401abe0:	2988b03a 	or	r4,r5,r6
 401abe4:	20009a1e 	bne	r4,zero,401ae50 <__subdf3+0x2ec>
 401abe8:	888001cc 	andi	r2,r17,7
 401abec:	10000726 	beq	r2,zero,401ac0c <__subdf3+0xa8>
 401abf0:	888003cc 	andi	r2,r17,15
 401abf4:	01000104 	movi	r4,4
 401abf8:	11000426 	beq	r2,r4,401ac0c <__subdf3+0xa8>
 401abfc:	890b883a 	add	r5,r17,r4
 401ac00:	2c63803a 	cmpltu	r17,r5,r17
 401ac04:	1c47883a 	add	r3,r3,r17
 401ac08:	2823883a 	mov	r17,r5
 401ac0c:	1880202c 	andhi	r2,r3,128
 401ac10:	10005926 	beq	r2,zero,401ad78 <__subdf3+0x214>
 401ac14:	84000044 	addi	r16,r16,1
 401ac18:	0081ffc4 	movi	r2,2047
 401ac1c:	8080be26 	beq	r16,r2,401af18 <__subdf3+0x3b4>
 401ac20:	017fe034 	movhi	r5,65408
 401ac24:	297fffc4 	addi	r5,r5,-1
 401ac28:	1946703a 	and	r3,r3,r5
 401ac2c:	1804977a 	slli	r2,r3,29
 401ac30:	1806927a 	slli	r3,r3,9
 401ac34:	8822d0fa 	srli	r17,r17,3
 401ac38:	8401ffcc 	andi	r16,r16,2047
 401ac3c:	180ad33a 	srli	r5,r3,12
 401ac40:	9100004c 	andi	r4,r18,1
 401ac44:	1444b03a 	or	r2,r2,r17
 401ac48:	80c1ffcc 	andi	r3,r16,2047
 401ac4c:	1820953a 	slli	r16,r3,20
 401ac50:	20c03fcc 	andi	r3,r4,255
 401ac54:	180897fa 	slli	r4,r3,31
 401ac58:	00c00434 	movhi	r3,16
 401ac5c:	18ffffc4 	addi	r3,r3,-1
 401ac60:	28c6703a 	and	r3,r5,r3
 401ac64:	1c06b03a 	or	r3,r3,r16
 401ac68:	1906b03a 	or	r3,r3,r4
 401ac6c:	dfc00417 	ldw	ra,16(sp)
 401ac70:	dcc00317 	ldw	r19,12(sp)
 401ac74:	dc800217 	ldw	r18,8(sp)
 401ac78:	dc400117 	ldw	r17,4(sp)
 401ac7c:	dc000017 	ldw	r16,0(sp)
 401ac80:	dec00504 	addi	sp,sp,20
 401ac84:	f800283a 	ret
 401ac88:	0101ffc4 	movi	r4,2047
 401ac8c:	813fd626 	beq	r16,r4,401abe8 <__alt_data_end+0xfc01abe8>
 401ac90:	29402034 	orhi	r5,r5,128
 401ac94:	01000e04 	movi	r4,56
 401ac98:	2080a316 	blt	r4,r2,401af28 <__subdf3+0x3c4>
 401ac9c:	010007c4 	movi	r4,31
 401aca0:	2080c616 	blt	r4,r2,401afbc <__subdf3+0x458>
 401aca4:	01000804 	movi	r4,32
 401aca8:	2089c83a 	sub	r4,r4,r2
 401acac:	2910983a 	sll	r8,r5,r4
 401acb0:	308ed83a 	srl	r7,r6,r2
 401acb4:	3108983a 	sll	r4,r6,r4
 401acb8:	2884d83a 	srl	r2,r5,r2
 401acbc:	41ccb03a 	or	r6,r8,r7
 401acc0:	2008c03a 	cmpne	r4,r4,zero
 401acc4:	310cb03a 	or	r6,r6,r4
 401acc8:	898dc83a 	sub	r6,r17,r6
 401accc:	89a3803a 	cmpltu	r17,r17,r6
 401acd0:	1887c83a 	sub	r3,r3,r2
 401acd4:	1c47c83a 	sub	r3,r3,r17
 401acd8:	3023883a 	mov	r17,r6
 401acdc:	1880202c 	andhi	r2,r3,128
 401ace0:	10002326 	beq	r2,zero,401ad70 <__subdf3+0x20c>
 401ace4:	04c02034 	movhi	r19,128
 401ace8:	9cffffc4 	addi	r19,r19,-1
 401acec:	1ce6703a 	and	r19,r3,r19
 401acf0:	98007a26 	beq	r19,zero,401aedc <__subdf3+0x378>
 401acf4:	9809883a 	mov	r4,r19
 401acf8:	400e3e00 	call	400e3e0 <__clzsi2>
 401acfc:	113ffe04 	addi	r4,r2,-8
 401ad00:	00c007c4 	movi	r3,31
 401ad04:	19007b16 	blt	r3,r4,401aef4 <__subdf3+0x390>
 401ad08:	00800804 	movi	r2,32
 401ad0c:	1105c83a 	sub	r2,r2,r4
 401ad10:	8884d83a 	srl	r2,r17,r2
 401ad14:	9906983a 	sll	r3,r19,r4
 401ad18:	8922983a 	sll	r17,r17,r4
 401ad1c:	10c4b03a 	or	r2,r2,r3
 401ad20:	24007816 	blt	r4,r16,401af04 <__subdf3+0x3a0>
 401ad24:	2421c83a 	sub	r16,r4,r16
 401ad28:	80c00044 	addi	r3,r16,1
 401ad2c:	010007c4 	movi	r4,31
 401ad30:	20c09516 	blt	r4,r3,401af88 <__subdf3+0x424>
 401ad34:	01400804 	movi	r5,32
 401ad38:	28cbc83a 	sub	r5,r5,r3
 401ad3c:	88c8d83a 	srl	r4,r17,r3
 401ad40:	8962983a 	sll	r17,r17,r5
 401ad44:	114a983a 	sll	r5,r2,r5
 401ad48:	10c6d83a 	srl	r3,r2,r3
 401ad4c:	8804c03a 	cmpne	r2,r17,zero
 401ad50:	290ab03a 	or	r5,r5,r4
 401ad54:	28a2b03a 	or	r17,r5,r2
 401ad58:	0021883a 	mov	r16,zero
 401ad5c:	003fa206 	br	401abe8 <__alt_data_end+0xfc01abe8>
 401ad60:	2090b03a 	or	r8,r4,r2
 401ad64:	40018e26 	beq	r8,zero,401b3a0 <__subdf3+0x83c>
 401ad68:	1007883a 	mov	r3,r2
 401ad6c:	2023883a 	mov	r17,r4
 401ad70:	888001cc 	andi	r2,r17,7
 401ad74:	103f9e1e 	bne	r2,zero,401abf0 <__alt_data_end+0xfc01abf0>
 401ad78:	1804977a 	slli	r2,r3,29
 401ad7c:	8822d0fa 	srli	r17,r17,3
 401ad80:	1810d0fa 	srli	r8,r3,3
 401ad84:	9100004c 	andi	r4,r18,1
 401ad88:	1444b03a 	or	r2,r2,r17
 401ad8c:	00c1ffc4 	movi	r3,2047
 401ad90:	80c02826 	beq	r16,r3,401ae34 <__subdf3+0x2d0>
 401ad94:	01400434 	movhi	r5,16
 401ad98:	297fffc4 	addi	r5,r5,-1
 401ad9c:	80e0703a 	and	r16,r16,r3
 401ada0:	414a703a 	and	r5,r8,r5
 401ada4:	003fa806 	br	401ac48 <__alt_data_end+0xfc01ac48>
 401ada8:	0080630e 	bge	zero,r2,401af38 <__subdf3+0x3d4>
 401adac:	48003026 	beq	r9,zero,401ae70 <__subdf3+0x30c>
 401adb0:	0101ffc4 	movi	r4,2047
 401adb4:	813f8c26 	beq	r16,r4,401abe8 <__alt_data_end+0xfc01abe8>
 401adb8:	29402034 	orhi	r5,r5,128
 401adbc:	01000e04 	movi	r4,56
 401adc0:	2080a90e 	bge	r4,r2,401b068 <__subdf3+0x504>
 401adc4:	298cb03a 	or	r6,r5,r6
 401adc8:	3012c03a 	cmpne	r9,r6,zero
 401adcc:	0005883a 	mov	r2,zero
 401add0:	4c53883a 	add	r9,r9,r17
 401add4:	4c63803a 	cmpltu	r17,r9,r17
 401add8:	10c7883a 	add	r3,r2,r3
 401addc:	88c7883a 	add	r3,r17,r3
 401ade0:	4823883a 	mov	r17,r9
 401ade4:	1880202c 	andhi	r2,r3,128
 401ade8:	1000d026 	beq	r2,zero,401b12c <__subdf3+0x5c8>
 401adec:	84000044 	addi	r16,r16,1
 401adf0:	0081ffc4 	movi	r2,2047
 401adf4:	8080fe26 	beq	r16,r2,401b1f0 <__subdf3+0x68c>
 401adf8:	00bfe034 	movhi	r2,65408
 401adfc:	10bfffc4 	addi	r2,r2,-1
 401ae00:	1886703a 	and	r3,r3,r2
 401ae04:	880ad07a 	srli	r5,r17,1
 401ae08:	180497fa 	slli	r2,r3,31
 401ae0c:	8900004c 	andi	r4,r17,1
 401ae10:	2922b03a 	or	r17,r5,r4
 401ae14:	1806d07a 	srli	r3,r3,1
 401ae18:	1462b03a 	or	r17,r2,r17
 401ae1c:	3825883a 	mov	r18,r7
 401ae20:	003f7106 	br	401abe8 <__alt_data_end+0xfc01abe8>
 401ae24:	2984b03a 	or	r2,r5,r6
 401ae28:	103f6826 	beq	r2,zero,401abcc <__alt_data_end+0xfc01abcc>
 401ae2c:	39c03fcc 	andi	r7,r7,255
 401ae30:	003f6706 	br	401abd0 <__alt_data_end+0xfc01abd0>
 401ae34:	4086b03a 	or	r3,r8,r2
 401ae38:	18015226 	beq	r3,zero,401b384 <__subdf3+0x820>
 401ae3c:	00c00434 	movhi	r3,16
 401ae40:	41400234 	orhi	r5,r8,8
 401ae44:	18ffffc4 	addi	r3,r3,-1
 401ae48:	28ca703a 	and	r5,r5,r3
 401ae4c:	003f7e06 	br	401ac48 <__alt_data_end+0xfc01ac48>
 401ae50:	10bfffc4 	addi	r2,r2,-1
 401ae54:	1000491e 	bne	r2,zero,401af7c <__subdf3+0x418>
 401ae58:	898fc83a 	sub	r7,r17,r6
 401ae5c:	89e3803a 	cmpltu	r17,r17,r7
 401ae60:	1947c83a 	sub	r3,r3,r5
 401ae64:	1c47c83a 	sub	r3,r3,r17
 401ae68:	3823883a 	mov	r17,r7
 401ae6c:	003f9b06 	br	401acdc <__alt_data_end+0xfc01acdc>
 401ae70:	2988b03a 	or	r4,r5,r6
 401ae74:	203f5c26 	beq	r4,zero,401abe8 <__alt_data_end+0xfc01abe8>
 401ae78:	10bfffc4 	addi	r2,r2,-1
 401ae7c:	1000931e 	bne	r2,zero,401b0cc <__subdf3+0x568>
 401ae80:	898d883a 	add	r6,r17,r6
 401ae84:	3463803a 	cmpltu	r17,r6,r17
 401ae88:	1947883a 	add	r3,r3,r5
 401ae8c:	88c7883a 	add	r3,r17,r3
 401ae90:	3023883a 	mov	r17,r6
 401ae94:	003fd306 	br	401ade4 <__alt_data_end+0xfc01ade4>
 401ae98:	1000541e 	bne	r2,zero,401afec <__subdf3+0x488>
 401ae9c:	80800044 	addi	r2,r16,1
 401aea0:	1081ffcc 	andi	r2,r2,2047
 401aea4:	01000044 	movi	r4,1
 401aea8:	2080a20e 	bge	r4,r2,401b134 <__subdf3+0x5d0>
 401aeac:	8989c83a 	sub	r4,r17,r6
 401aeb0:	8905803a 	cmpltu	r2,r17,r4
 401aeb4:	1967c83a 	sub	r19,r3,r5
 401aeb8:	98a7c83a 	sub	r19,r19,r2
 401aebc:	9880202c 	andhi	r2,r19,128
 401aec0:	10006326 	beq	r2,zero,401b050 <__subdf3+0x4ec>
 401aec4:	3463c83a 	sub	r17,r6,r17
 401aec8:	28c7c83a 	sub	r3,r5,r3
 401aecc:	344d803a 	cmpltu	r6,r6,r17
 401aed0:	19a7c83a 	sub	r19,r3,r6
 401aed4:	3825883a 	mov	r18,r7
 401aed8:	983f861e 	bne	r19,zero,401acf4 <__alt_data_end+0xfc01acf4>
 401aedc:	8809883a 	mov	r4,r17
 401aee0:	400e3e00 	call	400e3e0 <__clzsi2>
 401aee4:	10800804 	addi	r2,r2,32
 401aee8:	113ffe04 	addi	r4,r2,-8
 401aeec:	00c007c4 	movi	r3,31
 401aef0:	193f850e 	bge	r3,r4,401ad08 <__alt_data_end+0xfc01ad08>
 401aef4:	10bff604 	addi	r2,r2,-40
 401aef8:	8884983a 	sll	r2,r17,r2
 401aefc:	0023883a 	mov	r17,zero
 401af00:	243f880e 	bge	r4,r16,401ad24 <__alt_data_end+0xfc01ad24>
 401af04:	00ffe034 	movhi	r3,65408
 401af08:	18ffffc4 	addi	r3,r3,-1
 401af0c:	8121c83a 	sub	r16,r16,r4
 401af10:	10c6703a 	and	r3,r2,r3
 401af14:	003f3406 	br	401abe8 <__alt_data_end+0xfc01abe8>
 401af18:	9100004c 	andi	r4,r18,1
 401af1c:	000b883a 	mov	r5,zero
 401af20:	0005883a 	mov	r2,zero
 401af24:	003f4806 	br	401ac48 <__alt_data_end+0xfc01ac48>
 401af28:	298cb03a 	or	r6,r5,r6
 401af2c:	300cc03a 	cmpne	r6,r6,zero
 401af30:	0005883a 	mov	r2,zero
 401af34:	003f6406 	br	401acc8 <__alt_data_end+0xfc01acc8>
 401af38:	10009a1e 	bne	r2,zero,401b1a4 <__subdf3+0x640>
 401af3c:	82400044 	addi	r9,r16,1
 401af40:	4881ffcc 	andi	r2,r9,2047
 401af44:	02800044 	movi	r10,1
 401af48:	5080670e 	bge	r10,r2,401b0e8 <__subdf3+0x584>
 401af4c:	0081ffc4 	movi	r2,2047
 401af50:	4880af26 	beq	r9,r2,401b210 <__subdf3+0x6ac>
 401af54:	898d883a 	add	r6,r17,r6
 401af58:	1945883a 	add	r2,r3,r5
 401af5c:	3447803a 	cmpltu	r3,r6,r17
 401af60:	1887883a 	add	r3,r3,r2
 401af64:	182297fa 	slli	r17,r3,31
 401af68:	300cd07a 	srli	r6,r6,1
 401af6c:	1806d07a 	srli	r3,r3,1
 401af70:	4821883a 	mov	r16,r9
 401af74:	89a2b03a 	or	r17,r17,r6
 401af78:	003f1b06 	br	401abe8 <__alt_data_end+0xfc01abe8>
 401af7c:	0101ffc4 	movi	r4,2047
 401af80:	813f441e 	bne	r16,r4,401ac94 <__alt_data_end+0xfc01ac94>
 401af84:	003f1806 	br	401abe8 <__alt_data_end+0xfc01abe8>
 401af88:	843ff844 	addi	r16,r16,-31
 401af8c:	01400804 	movi	r5,32
 401af90:	1408d83a 	srl	r4,r2,r16
 401af94:	19405026 	beq	r3,r5,401b0d8 <__subdf3+0x574>
 401af98:	01401004 	movi	r5,64
 401af9c:	28c7c83a 	sub	r3,r5,r3
 401afa0:	10c4983a 	sll	r2,r2,r3
 401afa4:	88a2b03a 	or	r17,r17,r2
 401afa8:	8822c03a 	cmpne	r17,r17,zero
 401afac:	2462b03a 	or	r17,r4,r17
 401afb0:	0007883a 	mov	r3,zero
 401afb4:	0021883a 	mov	r16,zero
 401afb8:	003f6d06 	br	401ad70 <__alt_data_end+0xfc01ad70>
 401afbc:	11fff804 	addi	r7,r2,-32
 401afc0:	01000804 	movi	r4,32
 401afc4:	29ced83a 	srl	r7,r5,r7
 401afc8:	11004526 	beq	r2,r4,401b0e0 <__subdf3+0x57c>
 401afcc:	01001004 	movi	r4,64
 401afd0:	2089c83a 	sub	r4,r4,r2
 401afd4:	2904983a 	sll	r2,r5,r4
 401afd8:	118cb03a 	or	r6,r2,r6
 401afdc:	300cc03a 	cmpne	r6,r6,zero
 401afe0:	398cb03a 	or	r6,r7,r6
 401afe4:	0005883a 	mov	r2,zero
 401afe8:	003f3706 	br	401acc8 <__alt_data_end+0xfc01acc8>
 401afec:	80002a26 	beq	r16,zero,401b098 <__subdf3+0x534>
 401aff0:	0101ffc4 	movi	r4,2047
 401aff4:	49006626 	beq	r9,r4,401b190 <__subdf3+0x62c>
 401aff8:	0085c83a 	sub	r2,zero,r2
 401affc:	18c02034 	orhi	r3,r3,128
 401b000:	01000e04 	movi	r4,56
 401b004:	20807e16 	blt	r4,r2,401b200 <__subdf3+0x69c>
 401b008:	010007c4 	movi	r4,31
 401b00c:	2080e716 	blt	r4,r2,401b3ac <__subdf3+0x848>
 401b010:	01000804 	movi	r4,32
 401b014:	2089c83a 	sub	r4,r4,r2
 401b018:	1914983a 	sll	r10,r3,r4
 401b01c:	8890d83a 	srl	r8,r17,r2
 401b020:	8908983a 	sll	r4,r17,r4
 401b024:	1884d83a 	srl	r2,r3,r2
 401b028:	5222b03a 	or	r17,r10,r8
 401b02c:	2006c03a 	cmpne	r3,r4,zero
 401b030:	88e2b03a 	or	r17,r17,r3
 401b034:	3463c83a 	sub	r17,r6,r17
 401b038:	2885c83a 	sub	r2,r5,r2
 401b03c:	344d803a 	cmpltu	r6,r6,r17
 401b040:	1187c83a 	sub	r3,r2,r6
 401b044:	4821883a 	mov	r16,r9
 401b048:	3825883a 	mov	r18,r7
 401b04c:	003f2306 	br	401acdc <__alt_data_end+0xfc01acdc>
 401b050:	24d0b03a 	or	r8,r4,r19
 401b054:	40001b1e 	bne	r8,zero,401b0c4 <__subdf3+0x560>
 401b058:	0005883a 	mov	r2,zero
 401b05c:	0009883a 	mov	r4,zero
 401b060:	0021883a 	mov	r16,zero
 401b064:	003f4906 	br	401ad8c <__alt_data_end+0xfc01ad8c>
 401b068:	010007c4 	movi	r4,31
 401b06c:	20803a16 	blt	r4,r2,401b158 <__subdf3+0x5f4>
 401b070:	01000804 	movi	r4,32
 401b074:	2089c83a 	sub	r4,r4,r2
 401b078:	2912983a 	sll	r9,r5,r4
 401b07c:	3090d83a 	srl	r8,r6,r2
 401b080:	3108983a 	sll	r4,r6,r4
 401b084:	2884d83a 	srl	r2,r5,r2
 401b088:	4a12b03a 	or	r9,r9,r8
 401b08c:	2008c03a 	cmpne	r4,r4,zero
 401b090:	4912b03a 	or	r9,r9,r4
 401b094:	003f4e06 	br	401add0 <__alt_data_end+0xfc01add0>
 401b098:	1c48b03a 	or	r4,r3,r17
 401b09c:	20003c26 	beq	r4,zero,401b190 <__subdf3+0x62c>
 401b0a0:	0084303a 	nor	r2,zero,r2
 401b0a4:	1000381e 	bne	r2,zero,401b188 <__subdf3+0x624>
 401b0a8:	3463c83a 	sub	r17,r6,r17
 401b0ac:	28c5c83a 	sub	r2,r5,r3
 401b0b0:	344d803a 	cmpltu	r6,r6,r17
 401b0b4:	1187c83a 	sub	r3,r2,r6
 401b0b8:	4821883a 	mov	r16,r9
 401b0bc:	3825883a 	mov	r18,r7
 401b0c0:	003f0606 	br	401acdc <__alt_data_end+0xfc01acdc>
 401b0c4:	2023883a 	mov	r17,r4
 401b0c8:	003f0906 	br	401acf0 <__alt_data_end+0xfc01acf0>
 401b0cc:	0101ffc4 	movi	r4,2047
 401b0d0:	813f3a1e 	bne	r16,r4,401adbc <__alt_data_end+0xfc01adbc>
 401b0d4:	003ec406 	br	401abe8 <__alt_data_end+0xfc01abe8>
 401b0d8:	0005883a 	mov	r2,zero
 401b0dc:	003fb106 	br	401afa4 <__alt_data_end+0xfc01afa4>
 401b0e0:	0005883a 	mov	r2,zero
 401b0e4:	003fbc06 	br	401afd8 <__alt_data_end+0xfc01afd8>
 401b0e8:	1c44b03a 	or	r2,r3,r17
 401b0ec:	80008e1e 	bne	r16,zero,401b328 <__subdf3+0x7c4>
 401b0f0:	1000c826 	beq	r2,zero,401b414 <__subdf3+0x8b0>
 401b0f4:	2984b03a 	or	r2,r5,r6
 401b0f8:	103ebb26 	beq	r2,zero,401abe8 <__alt_data_end+0xfc01abe8>
 401b0fc:	8989883a 	add	r4,r17,r6
 401b100:	1945883a 	add	r2,r3,r5
 401b104:	2447803a 	cmpltu	r3,r4,r17
 401b108:	1887883a 	add	r3,r3,r2
 401b10c:	1880202c 	andhi	r2,r3,128
 401b110:	2023883a 	mov	r17,r4
 401b114:	103f1626 	beq	r2,zero,401ad70 <__alt_data_end+0xfc01ad70>
 401b118:	00bfe034 	movhi	r2,65408
 401b11c:	10bfffc4 	addi	r2,r2,-1
 401b120:	5021883a 	mov	r16,r10
 401b124:	1886703a 	and	r3,r3,r2
 401b128:	003eaf06 	br	401abe8 <__alt_data_end+0xfc01abe8>
 401b12c:	3825883a 	mov	r18,r7
 401b130:	003f0f06 	br	401ad70 <__alt_data_end+0xfc01ad70>
 401b134:	1c44b03a 	or	r2,r3,r17
 401b138:	8000251e 	bne	r16,zero,401b1d0 <__subdf3+0x66c>
 401b13c:	1000661e 	bne	r2,zero,401b2d8 <__subdf3+0x774>
 401b140:	2990b03a 	or	r8,r5,r6
 401b144:	40009626 	beq	r8,zero,401b3a0 <__subdf3+0x83c>
 401b148:	2807883a 	mov	r3,r5
 401b14c:	3023883a 	mov	r17,r6
 401b150:	3825883a 	mov	r18,r7
 401b154:	003ea406 	br	401abe8 <__alt_data_end+0xfc01abe8>
 401b158:	127ff804 	addi	r9,r2,-32
 401b15c:	01000804 	movi	r4,32
 401b160:	2a52d83a 	srl	r9,r5,r9
 401b164:	11008c26 	beq	r2,r4,401b398 <__subdf3+0x834>
 401b168:	01001004 	movi	r4,64
 401b16c:	2085c83a 	sub	r2,r4,r2
 401b170:	2884983a 	sll	r2,r5,r2
 401b174:	118cb03a 	or	r6,r2,r6
 401b178:	300cc03a 	cmpne	r6,r6,zero
 401b17c:	4992b03a 	or	r9,r9,r6
 401b180:	0005883a 	mov	r2,zero
 401b184:	003f1206 	br	401add0 <__alt_data_end+0xfc01add0>
 401b188:	0101ffc4 	movi	r4,2047
 401b18c:	493f9c1e 	bne	r9,r4,401b000 <__alt_data_end+0xfc01b000>
 401b190:	2807883a 	mov	r3,r5
 401b194:	3023883a 	mov	r17,r6
 401b198:	4821883a 	mov	r16,r9
 401b19c:	3825883a 	mov	r18,r7
 401b1a0:	003e9106 	br	401abe8 <__alt_data_end+0xfc01abe8>
 401b1a4:	80001f1e 	bne	r16,zero,401b224 <__subdf3+0x6c0>
 401b1a8:	1c48b03a 	or	r4,r3,r17
 401b1ac:	20005a26 	beq	r4,zero,401b318 <__subdf3+0x7b4>
 401b1b0:	0084303a 	nor	r2,zero,r2
 401b1b4:	1000561e 	bne	r2,zero,401b310 <__subdf3+0x7ac>
 401b1b8:	89a3883a 	add	r17,r17,r6
 401b1bc:	1945883a 	add	r2,r3,r5
 401b1c0:	898d803a 	cmpltu	r6,r17,r6
 401b1c4:	3087883a 	add	r3,r6,r2
 401b1c8:	4821883a 	mov	r16,r9
 401b1cc:	003f0506 	br	401ade4 <__alt_data_end+0xfc01ade4>
 401b1d0:	10002b1e 	bne	r2,zero,401b280 <__subdf3+0x71c>
 401b1d4:	2984b03a 	or	r2,r5,r6
 401b1d8:	10008026 	beq	r2,zero,401b3dc <__subdf3+0x878>
 401b1dc:	2807883a 	mov	r3,r5
 401b1e0:	3023883a 	mov	r17,r6
 401b1e4:	3825883a 	mov	r18,r7
 401b1e8:	0401ffc4 	movi	r16,2047
 401b1ec:	003e7e06 	br	401abe8 <__alt_data_end+0xfc01abe8>
 401b1f0:	3809883a 	mov	r4,r7
 401b1f4:	0011883a 	mov	r8,zero
 401b1f8:	0005883a 	mov	r2,zero
 401b1fc:	003ee306 	br	401ad8c <__alt_data_end+0xfc01ad8c>
 401b200:	1c62b03a 	or	r17,r3,r17
 401b204:	8822c03a 	cmpne	r17,r17,zero
 401b208:	0005883a 	mov	r2,zero
 401b20c:	003f8906 	br	401b034 <__alt_data_end+0xfc01b034>
 401b210:	3809883a 	mov	r4,r7
 401b214:	4821883a 	mov	r16,r9
 401b218:	0011883a 	mov	r8,zero
 401b21c:	0005883a 	mov	r2,zero
 401b220:	003eda06 	br	401ad8c <__alt_data_end+0xfc01ad8c>
 401b224:	0101ffc4 	movi	r4,2047
 401b228:	49003b26 	beq	r9,r4,401b318 <__subdf3+0x7b4>
 401b22c:	0085c83a 	sub	r2,zero,r2
 401b230:	18c02034 	orhi	r3,r3,128
 401b234:	01000e04 	movi	r4,56
 401b238:	20806e16 	blt	r4,r2,401b3f4 <__subdf3+0x890>
 401b23c:	010007c4 	movi	r4,31
 401b240:	20807716 	blt	r4,r2,401b420 <__subdf3+0x8bc>
 401b244:	01000804 	movi	r4,32
 401b248:	2089c83a 	sub	r4,r4,r2
 401b24c:	1914983a 	sll	r10,r3,r4
 401b250:	8890d83a 	srl	r8,r17,r2
 401b254:	8908983a 	sll	r4,r17,r4
 401b258:	1884d83a 	srl	r2,r3,r2
 401b25c:	5222b03a 	or	r17,r10,r8
 401b260:	2006c03a 	cmpne	r3,r4,zero
 401b264:	88e2b03a 	or	r17,r17,r3
 401b268:	89a3883a 	add	r17,r17,r6
 401b26c:	1145883a 	add	r2,r2,r5
 401b270:	898d803a 	cmpltu	r6,r17,r6
 401b274:	3087883a 	add	r3,r6,r2
 401b278:	4821883a 	mov	r16,r9
 401b27c:	003ed906 	br	401ade4 <__alt_data_end+0xfc01ade4>
 401b280:	2984b03a 	or	r2,r5,r6
 401b284:	10004226 	beq	r2,zero,401b390 <__subdf3+0x82c>
 401b288:	1808d0fa 	srli	r4,r3,3
 401b28c:	8822d0fa 	srli	r17,r17,3
 401b290:	1806977a 	slli	r3,r3,29
 401b294:	2080022c 	andhi	r2,r4,8
 401b298:	1c62b03a 	or	r17,r3,r17
 401b29c:	10000826 	beq	r2,zero,401b2c0 <__subdf3+0x75c>
 401b2a0:	2812d0fa 	srli	r9,r5,3
 401b2a4:	4880022c 	andhi	r2,r9,8
 401b2a8:	1000051e 	bne	r2,zero,401b2c0 <__subdf3+0x75c>
 401b2ac:	300cd0fa 	srli	r6,r6,3
 401b2b0:	2804977a 	slli	r2,r5,29
 401b2b4:	4809883a 	mov	r4,r9
 401b2b8:	3825883a 	mov	r18,r7
 401b2bc:	11a2b03a 	or	r17,r2,r6
 401b2c0:	8806d77a 	srli	r3,r17,29
 401b2c4:	200890fa 	slli	r4,r4,3
 401b2c8:	882290fa 	slli	r17,r17,3
 401b2cc:	0401ffc4 	movi	r16,2047
 401b2d0:	1906b03a 	or	r3,r3,r4
 401b2d4:	003e4406 	br	401abe8 <__alt_data_end+0xfc01abe8>
 401b2d8:	2984b03a 	or	r2,r5,r6
 401b2dc:	103e4226 	beq	r2,zero,401abe8 <__alt_data_end+0xfc01abe8>
 401b2e0:	8989c83a 	sub	r4,r17,r6
 401b2e4:	8911803a 	cmpltu	r8,r17,r4
 401b2e8:	1945c83a 	sub	r2,r3,r5
 401b2ec:	1205c83a 	sub	r2,r2,r8
 401b2f0:	1200202c 	andhi	r8,r2,128
 401b2f4:	403e9a26 	beq	r8,zero,401ad60 <__alt_data_end+0xfc01ad60>
 401b2f8:	3463c83a 	sub	r17,r6,r17
 401b2fc:	28c5c83a 	sub	r2,r5,r3
 401b300:	344d803a 	cmpltu	r6,r6,r17
 401b304:	1187c83a 	sub	r3,r2,r6
 401b308:	3825883a 	mov	r18,r7
 401b30c:	003e3606 	br	401abe8 <__alt_data_end+0xfc01abe8>
 401b310:	0101ffc4 	movi	r4,2047
 401b314:	493fc71e 	bne	r9,r4,401b234 <__alt_data_end+0xfc01b234>
 401b318:	2807883a 	mov	r3,r5
 401b31c:	3023883a 	mov	r17,r6
 401b320:	4821883a 	mov	r16,r9
 401b324:	003e3006 	br	401abe8 <__alt_data_end+0xfc01abe8>
 401b328:	10003626 	beq	r2,zero,401b404 <__subdf3+0x8a0>
 401b32c:	2984b03a 	or	r2,r5,r6
 401b330:	10001726 	beq	r2,zero,401b390 <__subdf3+0x82c>
 401b334:	1808d0fa 	srli	r4,r3,3
 401b338:	8822d0fa 	srli	r17,r17,3
 401b33c:	1806977a 	slli	r3,r3,29
 401b340:	2080022c 	andhi	r2,r4,8
 401b344:	1c62b03a 	or	r17,r3,r17
 401b348:	10000726 	beq	r2,zero,401b368 <__subdf3+0x804>
 401b34c:	2812d0fa 	srli	r9,r5,3
 401b350:	4880022c 	andhi	r2,r9,8
 401b354:	1000041e 	bne	r2,zero,401b368 <__subdf3+0x804>
 401b358:	300cd0fa 	srli	r6,r6,3
 401b35c:	2804977a 	slli	r2,r5,29
 401b360:	4809883a 	mov	r4,r9
 401b364:	11a2b03a 	or	r17,r2,r6
 401b368:	8806d77a 	srli	r3,r17,29
 401b36c:	200890fa 	slli	r4,r4,3
 401b370:	882290fa 	slli	r17,r17,3
 401b374:	3825883a 	mov	r18,r7
 401b378:	1906b03a 	or	r3,r3,r4
 401b37c:	0401ffc4 	movi	r16,2047
 401b380:	003e1906 	br	401abe8 <__alt_data_end+0xfc01abe8>
 401b384:	000b883a 	mov	r5,zero
 401b388:	0005883a 	mov	r2,zero
 401b38c:	003e2e06 	br	401ac48 <__alt_data_end+0xfc01ac48>
 401b390:	0401ffc4 	movi	r16,2047
 401b394:	003e1406 	br	401abe8 <__alt_data_end+0xfc01abe8>
 401b398:	0005883a 	mov	r2,zero
 401b39c:	003f7506 	br	401b174 <__alt_data_end+0xfc01b174>
 401b3a0:	0005883a 	mov	r2,zero
 401b3a4:	0009883a 	mov	r4,zero
 401b3a8:	003e7806 	br	401ad8c <__alt_data_end+0xfc01ad8c>
 401b3ac:	123ff804 	addi	r8,r2,-32
 401b3b0:	01000804 	movi	r4,32
 401b3b4:	1a10d83a 	srl	r8,r3,r8
 401b3b8:	11002526 	beq	r2,r4,401b450 <__subdf3+0x8ec>
 401b3bc:	01001004 	movi	r4,64
 401b3c0:	2085c83a 	sub	r2,r4,r2
 401b3c4:	1884983a 	sll	r2,r3,r2
 401b3c8:	1444b03a 	or	r2,r2,r17
 401b3cc:	1004c03a 	cmpne	r2,r2,zero
 401b3d0:	40a2b03a 	or	r17,r8,r2
 401b3d4:	0005883a 	mov	r2,zero
 401b3d8:	003f1606 	br	401b034 <__alt_data_end+0xfc01b034>
 401b3dc:	02000434 	movhi	r8,16
 401b3e0:	0009883a 	mov	r4,zero
 401b3e4:	423fffc4 	addi	r8,r8,-1
 401b3e8:	00bfffc4 	movi	r2,-1
 401b3ec:	0401ffc4 	movi	r16,2047
 401b3f0:	003e6606 	br	401ad8c <__alt_data_end+0xfc01ad8c>
 401b3f4:	1c62b03a 	or	r17,r3,r17
 401b3f8:	8822c03a 	cmpne	r17,r17,zero
 401b3fc:	0005883a 	mov	r2,zero
 401b400:	003f9906 	br	401b268 <__alt_data_end+0xfc01b268>
 401b404:	2807883a 	mov	r3,r5
 401b408:	3023883a 	mov	r17,r6
 401b40c:	0401ffc4 	movi	r16,2047
 401b410:	003df506 	br	401abe8 <__alt_data_end+0xfc01abe8>
 401b414:	2807883a 	mov	r3,r5
 401b418:	3023883a 	mov	r17,r6
 401b41c:	003df206 	br	401abe8 <__alt_data_end+0xfc01abe8>
 401b420:	123ff804 	addi	r8,r2,-32
 401b424:	01000804 	movi	r4,32
 401b428:	1a10d83a 	srl	r8,r3,r8
 401b42c:	11000a26 	beq	r2,r4,401b458 <__subdf3+0x8f4>
 401b430:	01001004 	movi	r4,64
 401b434:	2085c83a 	sub	r2,r4,r2
 401b438:	1884983a 	sll	r2,r3,r2
 401b43c:	1444b03a 	or	r2,r2,r17
 401b440:	1004c03a 	cmpne	r2,r2,zero
 401b444:	40a2b03a 	or	r17,r8,r2
 401b448:	0005883a 	mov	r2,zero
 401b44c:	003f8606 	br	401b268 <__alt_data_end+0xfc01b268>
 401b450:	0005883a 	mov	r2,zero
 401b454:	003fdc06 	br	401b3c8 <__alt_data_end+0xfc01b3c8>
 401b458:	0005883a 	mov	r2,zero
 401b45c:	003ff706 	br	401b43c <__alt_data_end+0xfc01b43c>

0401b460 <__fixdfsi>:
 401b460:	280cd53a 	srli	r6,r5,20
 401b464:	00c00434 	movhi	r3,16
 401b468:	18ffffc4 	addi	r3,r3,-1
 401b46c:	3181ffcc 	andi	r6,r6,2047
 401b470:	01c0ff84 	movi	r7,1022
 401b474:	28c6703a 	and	r3,r5,r3
 401b478:	280ad7fa 	srli	r5,r5,31
 401b47c:	3980120e 	bge	r7,r6,401b4c8 <__fixdfsi+0x68>
 401b480:	00810744 	movi	r2,1053
 401b484:	11800c16 	blt	r2,r6,401b4b8 <__fixdfsi+0x58>
 401b488:	00810cc4 	movi	r2,1075
 401b48c:	1185c83a 	sub	r2,r2,r6
 401b490:	01c007c4 	movi	r7,31
 401b494:	18c00434 	orhi	r3,r3,16
 401b498:	38800d16 	blt	r7,r2,401b4d0 <__fixdfsi+0x70>
 401b49c:	31befb44 	addi	r6,r6,-1043
 401b4a0:	2084d83a 	srl	r2,r4,r2
 401b4a4:	1986983a 	sll	r3,r3,r6
 401b4a8:	1884b03a 	or	r2,r3,r2
 401b4ac:	28000726 	beq	r5,zero,401b4cc <__fixdfsi+0x6c>
 401b4b0:	0085c83a 	sub	r2,zero,r2
 401b4b4:	f800283a 	ret
 401b4b8:	00a00034 	movhi	r2,32768
 401b4bc:	10bfffc4 	addi	r2,r2,-1
 401b4c0:	2885883a 	add	r2,r5,r2
 401b4c4:	f800283a 	ret
 401b4c8:	0005883a 	mov	r2,zero
 401b4cc:	f800283a 	ret
 401b4d0:	008104c4 	movi	r2,1043
 401b4d4:	1185c83a 	sub	r2,r2,r6
 401b4d8:	1884d83a 	srl	r2,r3,r2
 401b4dc:	003ff306 	br	401b4ac <__alt_data_end+0xfc01b4ac>

0401b4e0 <__floatsidf>:
 401b4e0:	defffd04 	addi	sp,sp,-12
 401b4e4:	dfc00215 	stw	ra,8(sp)
 401b4e8:	dc400115 	stw	r17,4(sp)
 401b4ec:	dc000015 	stw	r16,0(sp)
 401b4f0:	20002b26 	beq	r4,zero,401b5a0 <__floatsidf+0xc0>
 401b4f4:	2023883a 	mov	r17,r4
 401b4f8:	2020d7fa 	srli	r16,r4,31
 401b4fc:	20002d16 	blt	r4,zero,401b5b4 <__floatsidf+0xd4>
 401b500:	8809883a 	mov	r4,r17
 401b504:	400e3e00 	call	400e3e0 <__clzsi2>
 401b508:	01410784 	movi	r5,1054
 401b50c:	288bc83a 	sub	r5,r5,r2
 401b510:	01010cc4 	movi	r4,1075
 401b514:	2149c83a 	sub	r4,r4,r5
 401b518:	00c007c4 	movi	r3,31
 401b51c:	1900160e 	bge	r3,r4,401b578 <__floatsidf+0x98>
 401b520:	00c104c4 	movi	r3,1043
 401b524:	1947c83a 	sub	r3,r3,r5
 401b528:	88c6983a 	sll	r3,r17,r3
 401b52c:	00800434 	movhi	r2,16
 401b530:	10bfffc4 	addi	r2,r2,-1
 401b534:	1886703a 	and	r3,r3,r2
 401b538:	2941ffcc 	andi	r5,r5,2047
 401b53c:	800d883a 	mov	r6,r16
 401b540:	0005883a 	mov	r2,zero
 401b544:	280a953a 	slli	r5,r5,20
 401b548:	31803fcc 	andi	r6,r6,255
 401b54c:	01000434 	movhi	r4,16
 401b550:	300c97fa 	slli	r6,r6,31
 401b554:	213fffc4 	addi	r4,r4,-1
 401b558:	1906703a 	and	r3,r3,r4
 401b55c:	1946b03a 	or	r3,r3,r5
 401b560:	1986b03a 	or	r3,r3,r6
 401b564:	dfc00217 	ldw	ra,8(sp)
 401b568:	dc400117 	ldw	r17,4(sp)
 401b56c:	dc000017 	ldw	r16,0(sp)
 401b570:	dec00304 	addi	sp,sp,12
 401b574:	f800283a 	ret
 401b578:	00c002c4 	movi	r3,11
 401b57c:	1887c83a 	sub	r3,r3,r2
 401b580:	88c6d83a 	srl	r3,r17,r3
 401b584:	8904983a 	sll	r2,r17,r4
 401b588:	01000434 	movhi	r4,16
 401b58c:	213fffc4 	addi	r4,r4,-1
 401b590:	2941ffcc 	andi	r5,r5,2047
 401b594:	1906703a 	and	r3,r3,r4
 401b598:	800d883a 	mov	r6,r16
 401b59c:	003fe906 	br	401b544 <__alt_data_end+0xfc01b544>
 401b5a0:	000d883a 	mov	r6,zero
 401b5a4:	000b883a 	mov	r5,zero
 401b5a8:	0007883a 	mov	r3,zero
 401b5ac:	0005883a 	mov	r2,zero
 401b5b0:	003fe406 	br	401b544 <__alt_data_end+0xfc01b544>
 401b5b4:	0123c83a 	sub	r17,zero,r4
 401b5b8:	003fd106 	br	401b500 <__alt_data_end+0xfc01b500>

0401b5bc <__floatunsidf>:
 401b5bc:	defffe04 	addi	sp,sp,-8
 401b5c0:	dc000015 	stw	r16,0(sp)
 401b5c4:	dfc00115 	stw	ra,4(sp)
 401b5c8:	2021883a 	mov	r16,r4
 401b5cc:	20002226 	beq	r4,zero,401b658 <__floatunsidf+0x9c>
 401b5d0:	400e3e00 	call	400e3e0 <__clzsi2>
 401b5d4:	01010784 	movi	r4,1054
 401b5d8:	2089c83a 	sub	r4,r4,r2
 401b5dc:	01810cc4 	movi	r6,1075
 401b5e0:	310dc83a 	sub	r6,r6,r4
 401b5e4:	00c007c4 	movi	r3,31
 401b5e8:	1980120e 	bge	r3,r6,401b634 <__floatunsidf+0x78>
 401b5ec:	00c104c4 	movi	r3,1043
 401b5f0:	1907c83a 	sub	r3,r3,r4
 401b5f4:	80ca983a 	sll	r5,r16,r3
 401b5f8:	00800434 	movhi	r2,16
 401b5fc:	10bfffc4 	addi	r2,r2,-1
 401b600:	2101ffcc 	andi	r4,r4,2047
 401b604:	0021883a 	mov	r16,zero
 401b608:	288a703a 	and	r5,r5,r2
 401b60c:	2008953a 	slli	r4,r4,20
 401b610:	00c00434 	movhi	r3,16
 401b614:	18ffffc4 	addi	r3,r3,-1
 401b618:	28c6703a 	and	r3,r5,r3
 401b61c:	8005883a 	mov	r2,r16
 401b620:	1906b03a 	or	r3,r3,r4
 401b624:	dfc00117 	ldw	ra,4(sp)
 401b628:	dc000017 	ldw	r16,0(sp)
 401b62c:	dec00204 	addi	sp,sp,8
 401b630:	f800283a 	ret
 401b634:	00c002c4 	movi	r3,11
 401b638:	188bc83a 	sub	r5,r3,r2
 401b63c:	814ad83a 	srl	r5,r16,r5
 401b640:	00c00434 	movhi	r3,16
 401b644:	18ffffc4 	addi	r3,r3,-1
 401b648:	81a0983a 	sll	r16,r16,r6
 401b64c:	2101ffcc 	andi	r4,r4,2047
 401b650:	28ca703a 	and	r5,r5,r3
 401b654:	003fed06 	br	401b60c <__alt_data_end+0xfc01b60c>
 401b658:	0009883a 	mov	r4,zero
 401b65c:	000b883a 	mov	r5,zero
 401b660:	003fea06 	br	401b60c <__alt_data_end+0xfc01b60c>

0401b664 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401b664:	defffe04 	addi	sp,sp,-8
 401b668:	dfc00115 	stw	ra,4(sp)
 401b66c:	df000015 	stw	fp,0(sp)
 401b670:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401b674:	d0a5b717 	ldw	r2,-26916(gp)
 401b678:	10000326 	beq	r2,zero,401b688 <alt_get_errno+0x24>
 401b67c:	d0a5b717 	ldw	r2,-26916(gp)
 401b680:	103ee83a 	callr	r2
 401b684:	00000106 	br	401b68c <alt_get_errno+0x28>
 401b688:	d0b23f04 	addi	r2,gp,-14084
}
 401b68c:	e037883a 	mov	sp,fp
 401b690:	dfc00117 	ldw	ra,4(sp)
 401b694:	df000017 	ldw	fp,0(sp)
 401b698:	dec00204 	addi	sp,sp,8
 401b69c:	f800283a 	ret

0401b6a0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 401b6a0:	defffb04 	addi	sp,sp,-20
 401b6a4:	dfc00415 	stw	ra,16(sp)
 401b6a8:	df000315 	stw	fp,12(sp)
 401b6ac:	df000304 	addi	fp,sp,12
 401b6b0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 401b6b4:	e0bfff17 	ldw	r2,-4(fp)
 401b6b8:	10000816 	blt	r2,zero,401b6dc <close+0x3c>
 401b6bc:	01400304 	movi	r5,12
 401b6c0:	e13fff17 	ldw	r4,-4(fp)
 401b6c4:	400d3680 	call	400d368 <__mulsi3>
 401b6c8:	1007883a 	mov	r3,r2
 401b6cc:	008100b4 	movhi	r2,1026
 401b6d0:	109f5504 	addi	r2,r2,32084
 401b6d4:	1885883a 	add	r2,r3,r2
 401b6d8:	00000106 	br	401b6e0 <close+0x40>
 401b6dc:	0005883a 	mov	r2,zero
 401b6e0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 401b6e4:	e0bffd17 	ldw	r2,-12(fp)
 401b6e8:	10001926 	beq	r2,zero,401b750 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 401b6ec:	e0bffd17 	ldw	r2,-12(fp)
 401b6f0:	10800017 	ldw	r2,0(r2)
 401b6f4:	10800417 	ldw	r2,16(r2)
 401b6f8:	10000626 	beq	r2,zero,401b714 <close+0x74>
 401b6fc:	e0bffd17 	ldw	r2,-12(fp)
 401b700:	10800017 	ldw	r2,0(r2)
 401b704:	10800417 	ldw	r2,16(r2)
 401b708:	e13ffd17 	ldw	r4,-12(fp)
 401b70c:	103ee83a 	callr	r2
 401b710:	00000106 	br	401b718 <close+0x78>
 401b714:	0005883a 	mov	r2,zero
 401b718:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 401b71c:	e13fff17 	ldw	r4,-4(fp)
 401b720:	401bf480 	call	401bf48 <alt_release_fd>
    if (rval < 0)
 401b724:	e0bffe17 	ldw	r2,-8(fp)
 401b728:	1000070e 	bge	r2,zero,401b748 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 401b72c:	401b6640 	call	401b664 <alt_get_errno>
 401b730:	1007883a 	mov	r3,r2
 401b734:	e0bffe17 	ldw	r2,-8(fp)
 401b738:	0085c83a 	sub	r2,zero,r2
 401b73c:	18800015 	stw	r2,0(r3)
      return -1;
 401b740:	00bfffc4 	movi	r2,-1
 401b744:	00000706 	br	401b764 <close+0xc4>
    }
    return 0;
 401b748:	0005883a 	mov	r2,zero
 401b74c:	00000506 	br	401b764 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401b750:	401b6640 	call	401b664 <alt_get_errno>
 401b754:	1007883a 	mov	r3,r2
 401b758:	00801444 	movi	r2,81
 401b75c:	18800015 	stw	r2,0(r3)
    return -1;
 401b760:	00bfffc4 	movi	r2,-1
  }
}
 401b764:	e037883a 	mov	sp,fp
 401b768:	dfc00117 	ldw	ra,4(sp)
 401b76c:	df000017 	ldw	fp,0(sp)
 401b770:	dec00204 	addi	sp,sp,8
 401b774:	f800283a 	ret

0401b778 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 401b778:	defffc04 	addi	sp,sp,-16
 401b77c:	df000315 	stw	fp,12(sp)
 401b780:	df000304 	addi	fp,sp,12
 401b784:	e13ffd15 	stw	r4,-12(fp)
 401b788:	e17ffe15 	stw	r5,-8(fp)
 401b78c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 401b790:	e0bfff17 	ldw	r2,-4(fp)
}
 401b794:	e037883a 	mov	sp,fp
 401b798:	df000017 	ldw	fp,0(sp)
 401b79c:	dec00104 	addi	sp,sp,4
 401b7a0:	f800283a 	ret

0401b7a4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 401b7a4:	defffd04 	addi	sp,sp,-12
 401b7a8:	df000215 	stw	fp,8(sp)
 401b7ac:	df000204 	addi	fp,sp,8
 401b7b0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 401b7b4:	0001883a 	nop
 401b7b8:	e0bfff17 	ldw	r2,-4(fp)
 401b7bc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 401b7c0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 401b7c4:	10000226 	beq	r2,zero,401b7d0 <_exit+0x2c>
    ALT_SIM_FAIL();
 401b7c8:	002af070 	cmpltui	zero,zero,43969
 401b7cc:	00000106 	br	401b7d4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 401b7d0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 401b7d4:	003fff06 	br	401b7d4 <__alt_data_end+0xfc01b7d4>

0401b7d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401b7d8:	defffe04 	addi	sp,sp,-8
 401b7dc:	dfc00115 	stw	ra,4(sp)
 401b7e0:	df000015 	stw	fp,0(sp)
 401b7e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401b7e8:	d0a5b717 	ldw	r2,-26916(gp)
 401b7ec:	10000326 	beq	r2,zero,401b7fc <alt_get_errno+0x24>
 401b7f0:	d0a5b717 	ldw	r2,-26916(gp)
 401b7f4:	103ee83a 	callr	r2
 401b7f8:	00000106 	br	401b800 <alt_get_errno+0x28>
 401b7fc:	d0b23f04 	addi	r2,gp,-14084
}
 401b800:	e037883a 	mov	sp,fp
 401b804:	dfc00117 	ldw	ra,4(sp)
 401b808:	df000017 	ldw	fp,0(sp)
 401b80c:	dec00204 	addi	sp,sp,8
 401b810:	f800283a 	ret

0401b814 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 401b814:	defffb04 	addi	sp,sp,-20
 401b818:	dfc00415 	stw	ra,16(sp)
 401b81c:	df000315 	stw	fp,12(sp)
 401b820:	df000304 	addi	fp,sp,12
 401b824:	e13ffe15 	stw	r4,-8(fp)
 401b828:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401b82c:	e0bffe17 	ldw	r2,-8(fp)
 401b830:	10000816 	blt	r2,zero,401b854 <fstat+0x40>
 401b834:	01400304 	movi	r5,12
 401b838:	e13ffe17 	ldw	r4,-8(fp)
 401b83c:	400d3680 	call	400d368 <__mulsi3>
 401b840:	1007883a 	mov	r3,r2
 401b844:	008100b4 	movhi	r2,1026
 401b848:	109f5504 	addi	r2,r2,32084
 401b84c:	1885883a 	add	r2,r3,r2
 401b850:	00000106 	br	401b858 <fstat+0x44>
 401b854:	0005883a 	mov	r2,zero
 401b858:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 401b85c:	e0bffd17 	ldw	r2,-12(fp)
 401b860:	10001026 	beq	r2,zero,401b8a4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 401b864:	e0bffd17 	ldw	r2,-12(fp)
 401b868:	10800017 	ldw	r2,0(r2)
 401b86c:	10800817 	ldw	r2,32(r2)
 401b870:	10000726 	beq	r2,zero,401b890 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 401b874:	e0bffd17 	ldw	r2,-12(fp)
 401b878:	10800017 	ldw	r2,0(r2)
 401b87c:	10800817 	ldw	r2,32(r2)
 401b880:	e17fff17 	ldw	r5,-4(fp)
 401b884:	e13ffd17 	ldw	r4,-12(fp)
 401b888:	103ee83a 	callr	r2
 401b88c:	00000a06 	br	401b8b8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 401b890:	e0bfff17 	ldw	r2,-4(fp)
 401b894:	00c80004 	movi	r3,8192
 401b898:	10c00115 	stw	r3,4(r2)
      return 0;
 401b89c:	0005883a 	mov	r2,zero
 401b8a0:	00000506 	br	401b8b8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401b8a4:	401b7d80 	call	401b7d8 <alt_get_errno>
 401b8a8:	1007883a 	mov	r3,r2
 401b8ac:	00801444 	movi	r2,81
 401b8b0:	18800015 	stw	r2,0(r3)
    return -1;
 401b8b4:	00bfffc4 	movi	r2,-1
  }
}
 401b8b8:	e037883a 	mov	sp,fp
 401b8bc:	dfc00117 	ldw	ra,4(sp)
 401b8c0:	df000017 	ldw	fp,0(sp)
 401b8c4:	dec00204 	addi	sp,sp,8
 401b8c8:	f800283a 	ret

0401b8cc <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 401b8cc:	deffff04 	addi	sp,sp,-4
 401b8d0:	df000015 	stw	fp,0(sp)
 401b8d4:	d839883a 	mov	fp,sp
  return 0;
 401b8d8:	0005883a 	mov	r2,zero
}
 401b8dc:	e037883a 	mov	sp,fp
 401b8e0:	df000017 	ldw	fp,0(sp)
 401b8e4:	dec00104 	addi	sp,sp,4
 401b8e8:	f800283a 	ret

0401b8ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401b8ec:	defffe04 	addi	sp,sp,-8
 401b8f0:	dfc00115 	stw	ra,4(sp)
 401b8f4:	df000015 	stw	fp,0(sp)
 401b8f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401b8fc:	d0a5b717 	ldw	r2,-26916(gp)
 401b900:	10000326 	beq	r2,zero,401b910 <alt_get_errno+0x24>
 401b904:	d0a5b717 	ldw	r2,-26916(gp)
 401b908:	103ee83a 	callr	r2
 401b90c:	00000106 	br	401b914 <alt_get_errno+0x28>
 401b910:	d0b23f04 	addi	r2,gp,-14084
}
 401b914:	e037883a 	mov	sp,fp
 401b918:	dfc00117 	ldw	ra,4(sp)
 401b91c:	df000017 	ldw	fp,0(sp)
 401b920:	dec00204 	addi	sp,sp,8
 401b924:	f800283a 	ret

0401b928 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 401b928:	deffed04 	addi	sp,sp,-76
 401b92c:	dfc01215 	stw	ra,72(sp)
 401b930:	df001115 	stw	fp,68(sp)
 401b934:	df001104 	addi	fp,sp,68
 401b938:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401b93c:	e0bfff17 	ldw	r2,-4(fp)
 401b940:	10000816 	blt	r2,zero,401b964 <isatty+0x3c>
 401b944:	01400304 	movi	r5,12
 401b948:	e13fff17 	ldw	r4,-4(fp)
 401b94c:	400d3680 	call	400d368 <__mulsi3>
 401b950:	1007883a 	mov	r3,r2
 401b954:	008100b4 	movhi	r2,1026
 401b958:	109f5504 	addi	r2,r2,32084
 401b95c:	1885883a 	add	r2,r3,r2
 401b960:	00000106 	br	401b968 <isatty+0x40>
 401b964:	0005883a 	mov	r2,zero
 401b968:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 401b96c:	e0bfef17 	ldw	r2,-68(fp)
 401b970:	10000e26 	beq	r2,zero,401b9ac <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 401b974:	e0bfef17 	ldw	r2,-68(fp)
 401b978:	10800017 	ldw	r2,0(r2)
 401b97c:	10800817 	ldw	r2,32(r2)
 401b980:	1000021e 	bne	r2,zero,401b98c <isatty+0x64>
    {
      return 1;
 401b984:	00800044 	movi	r2,1
 401b988:	00000d06 	br	401b9c0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 401b98c:	e0bff004 	addi	r2,fp,-64
 401b990:	100b883a 	mov	r5,r2
 401b994:	e13fff17 	ldw	r4,-4(fp)
 401b998:	401b8140 	call	401b814 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 401b99c:	e0bff117 	ldw	r2,-60(fp)
 401b9a0:	10880020 	cmpeqi	r2,r2,8192
 401b9a4:	10803fcc 	andi	r2,r2,255
 401b9a8:	00000506 	br	401b9c0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401b9ac:	401b8ec0 	call	401b8ec <alt_get_errno>
 401b9b0:	1007883a 	mov	r3,r2
 401b9b4:	00801444 	movi	r2,81
 401b9b8:	18800015 	stw	r2,0(r3)
    return 0;
 401b9bc:	0005883a 	mov	r2,zero
  }
}
 401b9c0:	e037883a 	mov	sp,fp
 401b9c4:	dfc00117 	ldw	ra,4(sp)
 401b9c8:	df000017 	ldw	fp,0(sp)
 401b9cc:	dec00204 	addi	sp,sp,8
 401b9d0:	f800283a 	ret

0401b9d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401b9d4:	defffe04 	addi	sp,sp,-8
 401b9d8:	dfc00115 	stw	ra,4(sp)
 401b9dc:	df000015 	stw	fp,0(sp)
 401b9e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401b9e4:	d0a5b717 	ldw	r2,-26916(gp)
 401b9e8:	10000326 	beq	r2,zero,401b9f8 <alt_get_errno+0x24>
 401b9ec:	d0a5b717 	ldw	r2,-26916(gp)
 401b9f0:	103ee83a 	callr	r2
 401b9f4:	00000106 	br	401b9fc <alt_get_errno+0x28>
 401b9f8:	d0b23f04 	addi	r2,gp,-14084
}
 401b9fc:	e037883a 	mov	sp,fp
 401ba00:	dfc00117 	ldw	ra,4(sp)
 401ba04:	df000017 	ldw	fp,0(sp)
 401ba08:	dec00204 	addi	sp,sp,8
 401ba0c:	f800283a 	ret

0401ba10 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 401ba10:	defffb04 	addi	sp,sp,-20
 401ba14:	dfc00415 	stw	ra,16(sp)
 401ba18:	df000315 	stw	fp,12(sp)
 401ba1c:	df000304 	addi	fp,sp,12
 401ba20:	e13ffe15 	stw	r4,-8(fp)
 401ba24:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
 401ba28:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
 401ba2c:	e0bffe17 	ldw	r2,-8(fp)
 401ba30:	00802f16 	blt	zero,r2,401baf0 <kill+0xe0>
  {
    switch (sig)
 401ba34:	e0bfff17 	ldw	r2,-4(fp)
 401ba38:	10800828 	cmpgeui	r2,r2,32
 401ba3c:	1000291e 	bne	r2,zero,401bae4 <kill+0xd4>
 401ba40:	e0bfff17 	ldw	r2,-4(fp)
 401ba44:	100690ba 	slli	r3,r2,2
 401ba48:	008100b4 	movhi	r2,1026
 401ba4c:	10ae9704 	addi	r2,r2,-17828
 401ba50:	1885883a 	add	r2,r3,r2
 401ba54:	10800017 	ldw	r2,0(r2)
 401ba58:	1000683a 	jmp	r2
 401ba5c:	0401bb04 	movi	r16,1772
 401ba60:	0401bae4 	muli	r16,zero,1771
 401ba64:	0401bae4 	muli	r16,zero,1771
 401ba68:	0401badc 	xori	r16,zero,1771
 401ba6c:	0401badc 	xori	r16,zero,1771
 401ba70:	0401badc 	xori	r16,zero,1771
 401ba74:	0401badc 	xori	r16,zero,1771
 401ba78:	0401bae4 	muli	r16,zero,1771
 401ba7c:	0401badc 	xori	r16,zero,1771
 401ba80:	0401badc 	xori	r16,zero,1771
 401ba84:	0401badc 	xori	r16,zero,1771
 401ba88:	0401badc 	xori	r16,zero,1771
 401ba8c:	0401badc 	xori	r16,zero,1771
 401ba90:	0401badc 	xori	r16,zero,1771
 401ba94:	0401badc 	xori	r16,zero,1771
 401ba98:	0401badc 	xori	r16,zero,1771
 401ba9c:	0401bb04 	movi	r16,1772
 401baa0:	0401bae4 	muli	r16,zero,1771
 401baa4:	0401bae4 	muli	r16,zero,1771
 401baa8:	0401bae4 	muli	r16,zero,1771
 401baac:	0401bb04 	movi	r16,1772
 401bab0:	0401bae4 	muli	r16,zero,1771
 401bab4:	0401bae4 	muli	r16,zero,1771
 401bab8:	0401badc 	xori	r16,zero,1771
 401babc:	0401badc 	xori	r16,zero,1771
 401bac0:	0401badc 	xori	r16,zero,1771
 401bac4:	0401badc 	xori	r16,zero,1771
 401bac8:	0401badc 	xori	r16,zero,1771
 401bacc:	0401bae4 	muli	r16,zero,1771
 401bad0:	0401bae4 	muli	r16,zero,1771
 401bad4:	0401badc 	xori	r16,zero,1771
 401bad8:	0401badc 	xori	r16,zero,1771
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 401badc:	0009883a 	mov	r4,zero
 401bae0:	401b7a40 	call	401b7a4 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 401bae4:	00800584 	movi	r2,22
 401bae8:	e0bffd15 	stw	r2,-12(fp)
 401baec:	00000606 	br	401bb08 <kill+0xf8>
    }
  }

  else if (pid > 0)
 401baf0:	e0bffe17 	ldw	r2,-8(fp)
 401baf4:	0080040e 	bge	zero,r2,401bb08 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 401baf8:	008000c4 	movi	r2,3
 401bafc:	e0bffd15 	stw	r2,-12(fp)
 401bb00:	00000106 	br	401bb08 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
 401bb04:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
 401bb08:	e0bffd17 	ldw	r2,-12(fp)
 401bb0c:	10000626 	beq	r2,zero,401bb28 <kill+0x118>
  {
    ALT_ERRNO = status;
 401bb10:	401b9d40 	call	401b9d4 <alt_get_errno>
 401bb14:	1007883a 	mov	r3,r2
 401bb18:	e0bffd17 	ldw	r2,-12(fp)
 401bb1c:	18800015 	stw	r2,0(r3)
    return -1;
 401bb20:	00bfffc4 	movi	r2,-1
 401bb24:	00000106 	br	401bb2c <kill+0x11c>
  }

  return 0;
 401bb28:	0005883a 	mov	r2,zero
}
 401bb2c:	e037883a 	mov	sp,fp
 401bb30:	dfc00117 	ldw	ra,4(sp)
 401bb34:	df000017 	ldw	fp,0(sp)
 401bb38:	dec00204 	addi	sp,sp,8
 401bb3c:	f800283a 	ret

0401bb40 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 401bb40:	defffc04 	addi	sp,sp,-16
 401bb44:	df000315 	stw	fp,12(sp)
 401bb48:	df000304 	addi	fp,sp,12
 401bb4c:	e13ffd15 	stw	r4,-12(fp)
 401bb50:	e17ffe15 	stw	r5,-8(fp)
 401bb54:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 401bb58:	e0fffe17 	ldw	r3,-8(fp)
 401bb5c:	e0bffd17 	ldw	r2,-12(fp)
 401bb60:	18800c26 	beq	r3,r2,401bb94 <alt_load_section+0x54>
  {
    while( to != end )
 401bb64:	00000806 	br	401bb88 <alt_load_section+0x48>
    {
      *to++ = *from++;
 401bb68:	e0bffe17 	ldw	r2,-8(fp)
 401bb6c:	10c00104 	addi	r3,r2,4
 401bb70:	e0fffe15 	stw	r3,-8(fp)
 401bb74:	e0fffd17 	ldw	r3,-12(fp)
 401bb78:	19000104 	addi	r4,r3,4
 401bb7c:	e13ffd15 	stw	r4,-12(fp)
 401bb80:	18c00017 	ldw	r3,0(r3)
 401bb84:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 401bb88:	e0fffe17 	ldw	r3,-8(fp)
 401bb8c:	e0bfff17 	ldw	r2,-4(fp)
 401bb90:	18bff51e 	bne	r3,r2,401bb68 <__alt_data_end+0xfc01bb68>
    {
      *to++ = *from++;
    }
  }
}
 401bb94:	0001883a 	nop
 401bb98:	e037883a 	mov	sp,fp
 401bb9c:	df000017 	ldw	fp,0(sp)
 401bba0:	dec00104 	addi	sp,sp,4
 401bba4:	f800283a 	ret

0401bba8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 401bba8:	defffe04 	addi	sp,sp,-8
 401bbac:	dfc00115 	stw	ra,4(sp)
 401bbb0:	df000015 	stw	fp,0(sp)
 401bbb4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 401bbb8:	018100f4 	movhi	r6,1027
 401bbbc:	31a99904 	addi	r6,r6,-22940
 401bbc0:	014100b4 	movhi	r5,1026
 401bbc4:	295d2204 	addi	r5,r5,29832
 401bbc8:	010100f4 	movhi	r4,1027
 401bbcc:	21299904 	addi	r4,r4,-22940
 401bbd0:	401bb400 	call	401bb40 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 401bbd4:	01810034 	movhi	r6,1024
 401bbd8:	31808c04 	addi	r6,r6,560
 401bbdc:	01410034 	movhi	r5,1024
 401bbe0:	29400804 	addi	r5,r5,32
 401bbe4:	01010034 	movhi	r4,1024
 401bbe8:	21000804 	addi	r4,r4,32
 401bbec:	401bb400 	call	401bb40 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 401bbf0:	018100b4 	movhi	r6,1026
 401bbf4:	319d2204 	addi	r6,r6,29832
 401bbf8:	014100b4 	movhi	r5,1026
 401bbfc:	2940a604 	addi	r5,r5,664
 401bc00:	010100b4 	movhi	r4,1026
 401bc04:	2100a604 	addi	r4,r4,664
 401bc08:	401bb400 	call	401bb40 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 401bc0c:	401ef6c0 	call	401ef6c <alt_dcache_flush_all>
  alt_icache_flush_all();
 401bc10:	401f1bc0 	call	401f1bc <alt_icache_flush_all>
}
 401bc14:	0001883a 	nop
 401bc18:	e037883a 	mov	sp,fp
 401bc1c:	dfc00117 	ldw	ra,4(sp)
 401bc20:	df000017 	ldw	fp,0(sp)
 401bc24:	dec00204 	addi	sp,sp,8
 401bc28:	f800283a 	ret

0401bc2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401bc2c:	defffe04 	addi	sp,sp,-8
 401bc30:	dfc00115 	stw	ra,4(sp)
 401bc34:	df000015 	stw	fp,0(sp)
 401bc38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401bc3c:	d0a5b717 	ldw	r2,-26916(gp)
 401bc40:	10000326 	beq	r2,zero,401bc50 <alt_get_errno+0x24>
 401bc44:	d0a5b717 	ldw	r2,-26916(gp)
 401bc48:	103ee83a 	callr	r2
 401bc4c:	00000106 	br	401bc54 <alt_get_errno+0x28>
 401bc50:	d0b23f04 	addi	r2,gp,-14084
}
 401bc54:	e037883a 	mov	sp,fp
 401bc58:	dfc00117 	ldw	ra,4(sp)
 401bc5c:	df000017 	ldw	fp,0(sp)
 401bc60:	dec00204 	addi	sp,sp,8
 401bc64:	f800283a 	ret

0401bc68 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 401bc68:	defff904 	addi	sp,sp,-28
 401bc6c:	dfc00615 	stw	ra,24(sp)
 401bc70:	df000515 	stw	fp,20(sp)
 401bc74:	df000504 	addi	fp,sp,20
 401bc78:	e13ffd15 	stw	r4,-12(fp)
 401bc7c:	e17ffe15 	stw	r5,-8(fp)
 401bc80:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 401bc84:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401bc88:	e0bffd17 	ldw	r2,-12(fp)
 401bc8c:	10000816 	blt	r2,zero,401bcb0 <lseek+0x48>
 401bc90:	01400304 	movi	r5,12
 401bc94:	e13ffd17 	ldw	r4,-12(fp)
 401bc98:	400d3680 	call	400d368 <__mulsi3>
 401bc9c:	1007883a 	mov	r3,r2
 401bca0:	008100b4 	movhi	r2,1026
 401bca4:	109f5504 	addi	r2,r2,32084
 401bca8:	1885883a 	add	r2,r3,r2
 401bcac:	00000106 	br	401bcb4 <lseek+0x4c>
 401bcb0:	0005883a 	mov	r2,zero
 401bcb4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 401bcb8:	e0bffc17 	ldw	r2,-16(fp)
 401bcbc:	10001026 	beq	r2,zero,401bd00 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 401bcc0:	e0bffc17 	ldw	r2,-16(fp)
 401bcc4:	10800017 	ldw	r2,0(r2)
 401bcc8:	10800717 	ldw	r2,28(r2)
 401bccc:	10000926 	beq	r2,zero,401bcf4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 401bcd0:	e0bffc17 	ldw	r2,-16(fp)
 401bcd4:	10800017 	ldw	r2,0(r2)
 401bcd8:	10800717 	ldw	r2,28(r2)
 401bcdc:	e1bfff17 	ldw	r6,-4(fp)
 401bce0:	e17ffe17 	ldw	r5,-8(fp)
 401bce4:	e13ffc17 	ldw	r4,-16(fp)
 401bce8:	103ee83a 	callr	r2
 401bcec:	e0bffb15 	stw	r2,-20(fp)
 401bcf0:	00000506 	br	401bd08 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 401bcf4:	00bfde84 	movi	r2,-134
 401bcf8:	e0bffb15 	stw	r2,-20(fp)
 401bcfc:	00000206 	br	401bd08 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 401bd00:	00bfebc4 	movi	r2,-81
 401bd04:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 401bd08:	e0bffb17 	ldw	r2,-20(fp)
 401bd0c:	1000070e 	bge	r2,zero,401bd2c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 401bd10:	401bc2c0 	call	401bc2c <alt_get_errno>
 401bd14:	1007883a 	mov	r3,r2
 401bd18:	e0bffb17 	ldw	r2,-20(fp)
 401bd1c:	0085c83a 	sub	r2,zero,r2
 401bd20:	18800015 	stw	r2,0(r3)
    rc = -1;
 401bd24:	00bfffc4 	movi	r2,-1
 401bd28:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 401bd2c:	e0bffb17 	ldw	r2,-20(fp)
}
 401bd30:	e037883a 	mov	sp,fp
 401bd34:	dfc00117 	ldw	ra,4(sp)
 401bd38:	df000017 	ldw	fp,0(sp)
 401bd3c:	dec00204 	addi	sp,sp,8
 401bd40:	f800283a 	ret

0401bd44 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 401bd44:	defffd04 	addi	sp,sp,-12
 401bd48:	dfc00215 	stw	ra,8(sp)
 401bd4c:	df000115 	stw	fp,4(sp)
 401bd50:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 401bd54:	0009883a 	mov	r4,zero
 401bd58:	401c2d00 	call	401c2d0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 401bd5c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 401bd60:	401c3080 	call	401c308 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 401bd64:	018100b4 	movhi	r6,1026
 401bd68:	319d0d04 	addi	r6,r6,29748
 401bd6c:	014100b4 	movhi	r5,1026
 401bd70:	295d0d04 	addi	r5,r5,29748
 401bd74:	010100b4 	movhi	r4,1026
 401bd78:	211d0d04 	addi	r4,r4,29748
 401bd7c:	401f5600 	call	401f560 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 401bd80:	401f06c0 	call	401f06c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 401bd84:	010100b4 	movhi	r4,1026
 401bd88:	213c3304 	addi	r4,r4,-3892
 401bd8c:	401fef80 	call	401fef8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 401bd90:	d0b24317 	ldw	r2,-14068(gp)
 401bd94:	d0f24417 	ldw	r3,-14064(gp)
 401bd98:	d1324517 	ldw	r4,-14060(gp)
 401bd9c:	200d883a 	mov	r6,r4
 401bda0:	180b883a 	mov	r5,r3
 401bda4:	1009883a 	mov	r4,r2
 401bda8:	4009d840 	call	4009d84 <main>
 401bdac:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 401bdb0:	01000044 	movi	r4,1
 401bdb4:	401b6a00 	call	401b6a0 <close>
  exit (result);
 401bdb8:	e13fff17 	ldw	r4,-4(fp)
 401bdbc:	401ff0c0 	call	401ff0c <exit>

0401bdc0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 401bdc0:	defffe04 	addi	sp,sp,-8
 401bdc4:	df000115 	stw	fp,4(sp)
 401bdc8:	df000104 	addi	fp,sp,4
 401bdcc:	e13fff15 	stw	r4,-4(fp)
}
 401bdd0:	0001883a 	nop
 401bdd4:	e037883a 	mov	sp,fp
 401bdd8:	df000017 	ldw	fp,0(sp)
 401bddc:	dec00104 	addi	sp,sp,4
 401bde0:	f800283a 	ret

0401bde4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 401bde4:	defffe04 	addi	sp,sp,-8
 401bde8:	df000115 	stw	fp,4(sp)
 401bdec:	df000104 	addi	fp,sp,4
 401bdf0:	e13fff15 	stw	r4,-4(fp)
}
 401bdf4:	0001883a 	nop
 401bdf8:	e037883a 	mov	sp,fp
 401bdfc:	df000017 	ldw	fp,0(sp)
 401be00:	dec00104 	addi	sp,sp,4
 401be04:	f800283a 	ret

0401be08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401be08:	defffe04 	addi	sp,sp,-8
 401be0c:	dfc00115 	stw	ra,4(sp)
 401be10:	df000015 	stw	fp,0(sp)
 401be14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401be18:	d0a5b717 	ldw	r2,-26916(gp)
 401be1c:	10000326 	beq	r2,zero,401be2c <alt_get_errno+0x24>
 401be20:	d0a5b717 	ldw	r2,-26916(gp)
 401be24:	103ee83a 	callr	r2
 401be28:	00000106 	br	401be30 <alt_get_errno+0x28>
 401be2c:	d0b23f04 	addi	r2,gp,-14084
}
 401be30:	e037883a 	mov	sp,fp
 401be34:	dfc00117 	ldw	ra,4(sp)
 401be38:	df000017 	ldw	fp,0(sp)
 401be3c:	dec00204 	addi	sp,sp,8
 401be40:	f800283a 	ret

0401be44 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 401be44:	defff904 	addi	sp,sp,-28
 401be48:	dfc00615 	stw	ra,24(sp)
 401be4c:	df000515 	stw	fp,20(sp)
 401be50:	df000504 	addi	fp,sp,20
 401be54:	e13ffd15 	stw	r4,-12(fp)
 401be58:	e17ffe15 	stw	r5,-8(fp)
 401be5c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401be60:	e0bffd17 	ldw	r2,-12(fp)
 401be64:	10000816 	blt	r2,zero,401be88 <read+0x44>
 401be68:	01400304 	movi	r5,12
 401be6c:	e13ffd17 	ldw	r4,-12(fp)
 401be70:	400d3680 	call	400d368 <__mulsi3>
 401be74:	1007883a 	mov	r3,r2
 401be78:	008100b4 	movhi	r2,1026
 401be7c:	109f5504 	addi	r2,r2,32084
 401be80:	1885883a 	add	r2,r3,r2
 401be84:	00000106 	br	401be8c <read+0x48>
 401be88:	0005883a 	mov	r2,zero
 401be8c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 401be90:	e0bffb17 	ldw	r2,-20(fp)
 401be94:	10002226 	beq	r2,zero,401bf20 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 401be98:	e0bffb17 	ldw	r2,-20(fp)
 401be9c:	10800217 	ldw	r2,8(r2)
 401bea0:	108000cc 	andi	r2,r2,3
 401bea4:	10800060 	cmpeqi	r2,r2,1
 401bea8:	1000181e 	bne	r2,zero,401bf0c <read+0xc8>
        (fd->dev->read))
 401beac:	e0bffb17 	ldw	r2,-20(fp)
 401beb0:	10800017 	ldw	r2,0(r2)
 401beb4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 401beb8:	10001426 	beq	r2,zero,401bf0c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 401bebc:	e0bffb17 	ldw	r2,-20(fp)
 401bec0:	10800017 	ldw	r2,0(r2)
 401bec4:	10800517 	ldw	r2,20(r2)
 401bec8:	e0ffff17 	ldw	r3,-4(fp)
 401becc:	180d883a 	mov	r6,r3
 401bed0:	e17ffe17 	ldw	r5,-8(fp)
 401bed4:	e13ffb17 	ldw	r4,-20(fp)
 401bed8:	103ee83a 	callr	r2
 401bedc:	e0bffc15 	stw	r2,-16(fp)
 401bee0:	e0bffc17 	ldw	r2,-16(fp)
 401bee4:	1000070e 	bge	r2,zero,401bf04 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 401bee8:	401be080 	call	401be08 <alt_get_errno>
 401beec:	1007883a 	mov	r3,r2
 401bef0:	e0bffc17 	ldw	r2,-16(fp)
 401bef4:	0085c83a 	sub	r2,zero,r2
 401bef8:	18800015 	stw	r2,0(r3)
          return -1;
 401befc:	00bfffc4 	movi	r2,-1
 401bf00:	00000c06 	br	401bf34 <read+0xf0>
        }
        return rval;
 401bf04:	e0bffc17 	ldw	r2,-16(fp)
 401bf08:	00000a06 	br	401bf34 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 401bf0c:	401be080 	call	401be08 <alt_get_errno>
 401bf10:	1007883a 	mov	r3,r2
 401bf14:	00800344 	movi	r2,13
 401bf18:	18800015 	stw	r2,0(r3)
 401bf1c:	00000406 	br	401bf30 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 401bf20:	401be080 	call	401be08 <alt_get_errno>
 401bf24:	1007883a 	mov	r3,r2
 401bf28:	00801444 	movi	r2,81
 401bf2c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 401bf30:	00bfffc4 	movi	r2,-1
}
 401bf34:	e037883a 	mov	sp,fp
 401bf38:	dfc00117 	ldw	ra,4(sp)
 401bf3c:	df000017 	ldw	fp,0(sp)
 401bf40:	dec00204 	addi	sp,sp,8
 401bf44:	f800283a 	ret

0401bf48 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 401bf48:	defffc04 	addi	sp,sp,-16
 401bf4c:	dfc00315 	stw	ra,12(sp)
 401bf50:	df000215 	stw	fp,8(sp)
 401bf54:	dc000115 	stw	r16,4(sp)
 401bf58:	df000204 	addi	fp,sp,8
 401bf5c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 401bf60:	e0bffe17 	ldw	r2,-8(fp)
 401bf64:	108000d0 	cmplti	r2,r2,3
 401bf68:	1000111e 	bne	r2,zero,401bfb0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 401bf6c:	040100b4 	movhi	r16,1026
 401bf70:	841f5504 	addi	r16,r16,32084
 401bf74:	e0bffe17 	ldw	r2,-8(fp)
 401bf78:	01400304 	movi	r5,12
 401bf7c:	1009883a 	mov	r4,r2
 401bf80:	400d3680 	call	400d368 <__mulsi3>
 401bf84:	8085883a 	add	r2,r16,r2
 401bf88:	10800204 	addi	r2,r2,8
 401bf8c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 401bf90:	040100b4 	movhi	r16,1026
 401bf94:	841f5504 	addi	r16,r16,32084
 401bf98:	e0bffe17 	ldw	r2,-8(fp)
 401bf9c:	01400304 	movi	r5,12
 401bfa0:	1009883a 	mov	r4,r2
 401bfa4:	400d3680 	call	400d368 <__mulsi3>
 401bfa8:	8085883a 	add	r2,r16,r2
 401bfac:	10000015 	stw	zero,0(r2)
  }
}
 401bfb0:	0001883a 	nop
 401bfb4:	e6ffff04 	addi	sp,fp,-4
 401bfb8:	dfc00217 	ldw	ra,8(sp)
 401bfbc:	df000117 	ldw	fp,4(sp)
 401bfc0:	dc000017 	ldw	r16,0(sp)
 401bfc4:	dec00304 	addi	sp,sp,12
 401bfc8:	f800283a 	ret

0401bfcc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 401bfcc:	defff904 	addi	sp,sp,-28
 401bfd0:	df000615 	stw	fp,24(sp)
 401bfd4:	df000604 	addi	fp,sp,24
 401bfd8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401bfdc:	0005303a 	rdctl	r2,status
 401bfe0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401bfe4:	e0fffe17 	ldw	r3,-8(fp)
 401bfe8:	00bfff84 	movi	r2,-2
 401bfec:	1884703a 	and	r2,r3,r2
 401bff0:	1001703a 	wrctl	status,r2
  
  return context;
 401bff4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 401bff8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 401bffc:	d0a5b817 	ldw	r2,-26912(gp)
 401c000:	10c000c4 	addi	r3,r2,3
 401c004:	00bfff04 	movi	r2,-4
 401c008:	1884703a 	and	r2,r3,r2
 401c00c:	d0a5b815 	stw	r2,-26912(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 401c010:	d0e5b817 	ldw	r3,-26912(gp)
 401c014:	e0bfff17 	ldw	r2,-4(fp)
 401c018:	1887883a 	add	r3,r3,r2
 401c01c:	00820034 	movhi	r2,2048
 401c020:	10800004 	addi	r2,r2,0
 401c024:	10c0062e 	bgeu	r2,r3,401c040 <sbrk+0x74>
 401c028:	e0bffb17 	ldw	r2,-20(fp)
 401c02c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401c030:	e0bffa17 	ldw	r2,-24(fp)
 401c034:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 401c038:	00bfffc4 	movi	r2,-1
 401c03c:	00000b06 	br	401c06c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 401c040:	d0a5b817 	ldw	r2,-26912(gp)
 401c044:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 401c048:	d0e5b817 	ldw	r3,-26912(gp)
 401c04c:	e0bfff17 	ldw	r2,-4(fp)
 401c050:	1885883a 	add	r2,r3,r2
 401c054:	d0a5b815 	stw	r2,-26912(gp)
 401c058:	e0bffb17 	ldw	r2,-20(fp)
 401c05c:	e0bffc15 	stw	r2,-16(fp)
 401c060:	e0bffc17 	ldw	r2,-16(fp)
 401c064:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 401c068:	e0bffd17 	ldw	r2,-12(fp)
} 
 401c06c:	e037883a 	mov	sp,fp
 401c070:	df000017 	ldw	fp,0(sp)
 401c074:	dec00104 	addi	sp,sp,4
 401c078:	f800283a 	ret

0401c07c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401c07c:	defffe04 	addi	sp,sp,-8
 401c080:	dfc00115 	stw	ra,4(sp)
 401c084:	df000015 	stw	fp,0(sp)
 401c088:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401c08c:	d0a5b717 	ldw	r2,-26916(gp)
 401c090:	10000326 	beq	r2,zero,401c0a0 <alt_get_errno+0x24>
 401c094:	d0a5b717 	ldw	r2,-26916(gp)
 401c098:	103ee83a 	callr	r2
 401c09c:	00000106 	br	401c0a4 <alt_get_errno+0x28>
 401c0a0:	d0b23f04 	addi	r2,gp,-14084
}
 401c0a4:	e037883a 	mov	sp,fp
 401c0a8:	dfc00117 	ldw	ra,4(sp)
 401c0ac:	df000017 	ldw	fp,0(sp)
 401c0b0:	dec00204 	addi	sp,sp,8
 401c0b4:	f800283a 	ret

0401c0b8 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
 401c0b8:	defffc04 	addi	sp,sp,-16
 401c0bc:	dfc00315 	stw	ra,12(sp)
 401c0c0:	df000215 	stw	fp,8(sp)
 401c0c4:	df000204 	addi	fp,sp,8
 401c0c8:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 401c0cc:	d0b24817 	ldw	r2,-14048(gp)
  clock_t ticks = alt_nticks(); 
 401c0d0:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 401c0d4:	d0b24717 	ldw	r2,-14052(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
 401c0d8:	1000061e 	bne	r2,zero,401c0f4 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
 401c0dc:	401c07c0 	call	401c07c <alt_get_errno>
 401c0e0:	1007883a 	mov	r3,r2
 401c0e4:	00801604 	movi	r2,88
 401c0e8:	18800015 	stw	r2,0(r3)
    return 0;
 401c0ec:	0005883a 	mov	r2,zero
 401c0f0:	00000a06 	br	401c11c <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
 401c0f4:	e0bfff17 	ldw	r2,-4(fp)
 401c0f8:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
 401c0fc:	e0bfff17 	ldw	r2,-4(fp)
 401c100:	e0fffe17 	ldw	r3,-8(fp)
 401c104:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
 401c108:	e0bfff17 	ldw	r2,-4(fp)
 401c10c:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
 401c110:	e0bfff17 	ldw	r2,-4(fp)
 401c114:	10000315 	stw	zero,12(r2)

  return ticks;
 401c118:	e0bffe17 	ldw	r2,-8(fp)
}
 401c11c:	e037883a 	mov	sp,fp
 401c120:	dfc00117 	ldw	ra,4(sp)
 401c124:	df000017 	ldw	fp,0(sp)
 401c128:	dec00204 	addi	sp,sp,8
 401c12c:	f800283a 	ret

0401c130 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 401c130:	defffd04 	addi	sp,sp,-12
 401c134:	dfc00215 	stw	ra,8(sp)
 401c138:	df000115 	stw	fp,4(sp)
 401c13c:	df000104 	addi	fp,sp,4
 401c140:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 401c144:	e13fff17 	ldw	r4,-4(fp)
 401c148:	401ee140 	call	401ee14 <alt_busy_sleep>
}
 401c14c:	e037883a 	mov	sp,fp
 401c150:	dfc00117 	ldw	ra,4(sp)
 401c154:	df000017 	ldw	fp,0(sp)
 401c158:	dec00204 	addi	sp,sp,8
 401c15c:	f800283a 	ret

0401c160 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401c160:	defffe04 	addi	sp,sp,-8
 401c164:	dfc00115 	stw	ra,4(sp)
 401c168:	df000015 	stw	fp,0(sp)
 401c16c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401c170:	d0a5b717 	ldw	r2,-26916(gp)
 401c174:	10000326 	beq	r2,zero,401c184 <alt_get_errno+0x24>
 401c178:	d0a5b717 	ldw	r2,-26916(gp)
 401c17c:	103ee83a 	callr	r2
 401c180:	00000106 	br	401c188 <alt_get_errno+0x28>
 401c184:	d0b23f04 	addi	r2,gp,-14084
}
 401c188:	e037883a 	mov	sp,fp
 401c18c:	dfc00117 	ldw	ra,4(sp)
 401c190:	df000017 	ldw	fp,0(sp)
 401c194:	dec00204 	addi	sp,sp,8
 401c198:	f800283a 	ret

0401c19c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 401c19c:	defff904 	addi	sp,sp,-28
 401c1a0:	dfc00615 	stw	ra,24(sp)
 401c1a4:	df000515 	stw	fp,20(sp)
 401c1a8:	df000504 	addi	fp,sp,20
 401c1ac:	e13ffd15 	stw	r4,-12(fp)
 401c1b0:	e17ffe15 	stw	r5,-8(fp)
 401c1b4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401c1b8:	e0bffd17 	ldw	r2,-12(fp)
 401c1bc:	10000816 	blt	r2,zero,401c1e0 <write+0x44>
 401c1c0:	01400304 	movi	r5,12
 401c1c4:	e13ffd17 	ldw	r4,-12(fp)
 401c1c8:	400d3680 	call	400d368 <__mulsi3>
 401c1cc:	1007883a 	mov	r3,r2
 401c1d0:	008100b4 	movhi	r2,1026
 401c1d4:	109f5504 	addi	r2,r2,32084
 401c1d8:	1885883a 	add	r2,r3,r2
 401c1dc:	00000106 	br	401c1e4 <write+0x48>
 401c1e0:	0005883a 	mov	r2,zero
 401c1e4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 401c1e8:	e0bffb17 	ldw	r2,-20(fp)
 401c1ec:	10002126 	beq	r2,zero,401c274 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 401c1f0:	e0bffb17 	ldw	r2,-20(fp)
 401c1f4:	10800217 	ldw	r2,8(r2)
 401c1f8:	108000cc 	andi	r2,r2,3
 401c1fc:	10001826 	beq	r2,zero,401c260 <write+0xc4>
 401c200:	e0bffb17 	ldw	r2,-20(fp)
 401c204:	10800017 	ldw	r2,0(r2)
 401c208:	10800617 	ldw	r2,24(r2)
 401c20c:	10001426 	beq	r2,zero,401c260 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 401c210:	e0bffb17 	ldw	r2,-20(fp)
 401c214:	10800017 	ldw	r2,0(r2)
 401c218:	10800617 	ldw	r2,24(r2)
 401c21c:	e0ffff17 	ldw	r3,-4(fp)
 401c220:	180d883a 	mov	r6,r3
 401c224:	e17ffe17 	ldw	r5,-8(fp)
 401c228:	e13ffb17 	ldw	r4,-20(fp)
 401c22c:	103ee83a 	callr	r2
 401c230:	e0bffc15 	stw	r2,-16(fp)
 401c234:	e0bffc17 	ldw	r2,-16(fp)
 401c238:	1000070e 	bge	r2,zero,401c258 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 401c23c:	401c1600 	call	401c160 <alt_get_errno>
 401c240:	1007883a 	mov	r3,r2
 401c244:	e0bffc17 	ldw	r2,-16(fp)
 401c248:	0085c83a 	sub	r2,zero,r2
 401c24c:	18800015 	stw	r2,0(r3)
        return -1;
 401c250:	00bfffc4 	movi	r2,-1
 401c254:	00000c06 	br	401c288 <write+0xec>
      }
      return rval;
 401c258:	e0bffc17 	ldw	r2,-16(fp)
 401c25c:	00000a06 	br	401c288 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 401c260:	401c1600 	call	401c160 <alt_get_errno>
 401c264:	1007883a 	mov	r3,r2
 401c268:	00800344 	movi	r2,13
 401c26c:	18800015 	stw	r2,0(r3)
 401c270:	00000406 	br	401c284 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 401c274:	401c1600 	call	401c160 <alt_get_errno>
 401c278:	1007883a 	mov	r3,r2
 401c27c:	00801444 	movi	r2,81
 401c280:	18800015 	stw	r2,0(r3)
  }
  return -1;
 401c284:	00bfffc4 	movi	r2,-1
}
 401c288:	e037883a 	mov	sp,fp
 401c28c:	dfc00117 	ldw	ra,4(sp)
 401c290:	df000017 	ldw	fp,0(sp)
 401c294:	dec00204 	addi	sp,sp,8
 401c298:	f800283a 	ret

0401c29c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 401c29c:	defffd04 	addi	sp,sp,-12
 401c2a0:	dfc00215 	stw	ra,8(sp)
 401c2a4:	df000115 	stw	fp,4(sp)
 401c2a8:	df000104 	addi	fp,sp,4
 401c2ac:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 401c2b0:	d165b404 	addi	r5,gp,-26928
 401c2b4:	e13fff17 	ldw	r4,-4(fp)
 401c2b8:	401efc80 	call	401efc8 <alt_dev_llist_insert>
}
 401c2bc:	e037883a 	mov	sp,fp
 401c2c0:	dfc00117 	ldw	ra,4(sp)
 401c2c4:	df000017 	ldw	fp,0(sp)
 401c2c8:	dec00204 	addi	sp,sp,8
 401c2cc:	f800283a 	ret

0401c2d0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 401c2d0:	defffd04 	addi	sp,sp,-12
 401c2d4:	dfc00215 	stw	ra,8(sp)
 401c2d8:	df000115 	stw	fp,4(sp)
 401c2dc:	df000104 	addi	fp,sp,4
 401c2e0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 401c2e4:	401fc6c0 	call	401fc6c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 401c2e8:	00800044 	movi	r2,1
 401c2ec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 401c2f0:	0001883a 	nop
 401c2f4:	e037883a 	mov	sp,fp
 401c2f8:	dfc00117 	ldw	ra,4(sp)
 401c2fc:	df000017 	ldw	fp,0(sp)
 401c300:	dec00204 	addi	sp,sp,8
 401c304:	f800283a 	ret

0401c308 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 401c308:	defffe04 	addi	sp,sp,-8
 401c30c:	dfc00115 	stw	ra,4(sp)
 401c310:	df000015 	stw	fp,0(sp)
 401c314:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 401c318:	01c0fa04 	movi	r7,1000
 401c31c:	01800084 	movi	r6,2
 401c320:	000b883a 	mov	r5,zero
 401c324:	01041004 	movi	r4,4160
 401c328:	401ec6c0 	call	401ec6c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
 401c32c:	010100b4 	movhi	r4,1026
 401c330:	211fb504 	addi	r4,r4,32468
 401c334:	401c5c80 	call	401c5c8 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 401c338:	01800044 	movi	r6,1
 401c33c:	000b883a 	mov	r5,zero
 401c340:	010100b4 	movhi	r4,1026
 401c344:	211fcd04 	addi	r4,r4,32564
 401c348:	401e0f40 	call	401e0f4 <altera_avalon_jtag_uart_init>
 401c34c:	010100b4 	movhi	r4,1026
 401c350:	211fc304 	addi	r4,r4,32524
 401c354:	401c29c0 	call	401c29c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 401c358:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 401c35c:	0001883a 	nop
}
 401c360:	0001883a 	nop
 401c364:	e037883a 	mov	sp,fp
 401c368:	dfc00117 	ldw	ra,4(sp)
 401c36c:	df000017 	ldw	fp,0(sp)
 401c370:	dec00204 	addi	sp,sp,8
 401c374:	f800283a 	ret

0401c378 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
 401c378:	defff904 	addi	sp,sp,-28
 401c37c:	dfc00615 	stw	ra,24(sp)
 401c380:	df000515 	stw	fp,20(sp)
 401c384:	df000504 	addi	fp,sp,20
 401c388:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
 401c38c:	008000b4 	movhi	r2,2
 401c390:	10a1a804 	addi	r2,r2,-31072
 401c394:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
 401c398:	e0bfff17 	ldw	r2,-4(fp)
 401c39c:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
 401c3a0:	e0bffc17 	ldw	r2,-16(fp)
 401c3a4:	10800717 	ldw	r2,28(r2)
 401c3a8:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
 401c3ac:	e0bffd17 	ldw	r2,-12(fp)
 401c3b0:	10800217 	ldw	r2,8(r2)
 401c3b4:	10800098 	cmpnei	r2,r2,2
 401c3b8:	1000251e 	bne	r2,zero,401c450 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
 401c3bc:	e0bffd17 	ldw	r2,-12(fp)
 401c3c0:	10c00017 	ldw	r3,0(r2)
 401c3c4:	e0bffd17 	ldw	r2,-12(fp)
 401c3c8:	10800117 	ldw	r2,4(r2)
 401c3cc:	e13ffe04 	addi	r4,fp,-8
 401c3d0:	200f883a 	mov	r7,r4
 401c3d4:	100d883a 	mov	r6,r2
 401c3d8:	180b883a 	mov	r5,r3
 401c3dc:	e13ffc17 	ldw	r4,-16(fp)
 401c3e0:	401cb280 	call	401cb28 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
 401c3e4:	e0bffd17 	ldw	r2,-12(fp)
 401c3e8:	10c00117 	ldw	r3,4(r2)
 401c3ec:	e0bffe17 	ldw	r2,-8(fp)
 401c3f0:	1887c83a 	sub	r3,r3,r2
 401c3f4:	e0bffd17 	ldw	r2,-12(fp)
 401c3f8:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
 401c3fc:	e0bffd17 	ldw	r2,-12(fp)
 401c400:	10c00017 	ldw	r3,0(r2)
 401c404:	e0bffe17 	ldw	r2,-8(fp)
 401c408:	1887883a 	add	r3,r3,r2
 401c40c:	e0bffd17 	ldw	r2,-12(fp)
 401c410:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
 401c414:	e0bffd17 	ldw	r2,-12(fp)
 401c418:	10800117 	ldw	r2,4(r2)
 401c41c:	10000c26 	beq	r2,zero,401c450 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401c420:	01400704 	movi	r5,28
 401c424:	e13ffc17 	ldw	r4,-16(fp)
 401c428:	401dce00 	call	401dce0 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 401c42c:	01400084 	movi	r5,2
 401c430:	e13ffc17 	ldw	r4,-16(fp)
 401c434:	401dd840 	call	401dd84 <alt_avalon_i2c_int_enable>
 401c438:	00000e06 	br	401c474 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
 401c43c:	e0bffb17 	ldw	r2,-20(fp)
 401c440:	10bfffc4 	addi	r2,r2,-1
 401c444:	e0bffb15 	stw	r2,-20(fp)
 401c448:	e0bffb17 	ldw	r2,-20(fp)
 401c44c:	10000426 	beq	r2,zero,401c460 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
 401c450:	e13ffc17 	ldw	r4,-16(fp)
 401c454:	401cae40 	call	401cae4 <alt_avalon_i2c_is_busy>
 401c458:	103ff81e 	bne	r2,zero,401c43c <__alt_data_end+0xfc01c43c>
 401c45c:	00000106 	br	401c464 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
 401c460:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
 401c464:	e13ffc17 	ldw	r4,-16(fp)
 401c468:	401c78c0 	call	401c78c <alt_avalon_i2c_disable>

    irq->irq_busy=0;
 401c46c:	e0bffd17 	ldw	r2,-12(fp)
 401c470:	10000215 	stw	zero,8(r2)
}
 401c474:	e037883a 	mov	sp,fp
 401c478:	dfc00117 	ldw	ra,4(sp)
 401c47c:	df000017 	ldw	fp,0(sp)
 401c480:	dec00204 	addi	sp,sp,8
 401c484:	f800283a 	ret

0401c488 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
 401c488:	defffc04 	addi	sp,sp,-16
 401c48c:	dfc00315 	stw	ra,12(sp)
 401c490:	df000215 	stw	fp,8(sp)
 401c494:	df000204 	addi	fp,sp,8
 401c498:	e13ffe15 	stw	r4,-8(fp)
 401c49c:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
 401c4a0:	e0bfff17 	ldw	r2,-4(fp)
 401c4a4:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
 401c4a8:	e1ffff17 	ldw	r7,-4(fp)
 401c4ac:	000d883a 	mov	r6,zero
 401c4b0:	014100b4 	movhi	r5,1026
 401c4b4:	2970de04 	addi	r5,r5,-15496
 401c4b8:	e13ffe17 	ldw	r4,-8(fp)
 401c4bc:	401c5740 	call	401c574 <alt_avalon_i2c_register_callback>
}
 401c4c0:	0001883a 	nop
 401c4c4:	e037883a 	mov	sp,fp
 401c4c8:	dfc00117 	ldw	ra,4(sp)
 401c4cc:	df000017 	ldw	fp,0(sp)
 401c4d0:	dec00204 	addi	sp,sp,8
 401c4d4:	f800283a 	ret

0401c4d8 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
 401c4d8:	defff904 	addi	sp,sp,-28
 401c4dc:	dfc00615 	stw	ra,24(sp)
 401c4e0:	df000515 	stw	fp,20(sp)
 401c4e4:	df000504 	addi	fp,sp,20
 401c4e8:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
 401c4ec:	e0bfff17 	ldw	r2,-4(fp)
 401c4f0:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 401c4f4:	014007c4 	movi	r5,31
 401c4f8:	e13ffb17 	ldw	r4,-20(fp)
 401c4fc:	401dd1c0 	call	401dd1c <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401c500:	01400704 	movi	r5,28
 401c504:	e13ffb17 	ldw	r4,-20(fp)
 401c508:	401dce00 	call	401dce0 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
 401c50c:	e0bffb17 	ldw	r2,-20(fp)
 401c510:	10800617 	ldw	r2,24(r2)
 401c514:	10001126 	beq	r2,zero,401c55c <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401c518:	0005303a 	rdctl	r2,status
 401c51c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401c520:	e0fffd17 	ldw	r3,-12(fp)
 401c524:	00bfff84 	movi	r2,-2
 401c528:	1884703a 	and	r2,r3,r2
 401c52c:	1001703a 	wrctl	status,r2
  
  return context;
 401c530:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
 401c534:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
 401c538:	e0bffb17 	ldw	r2,-20(fp)
 401c53c:	10800617 	ldw	r2,24(r2)
 401c540:	e13ffb17 	ldw	r4,-20(fp)
 401c544:	103ee83a 	callr	r2
 401c548:	e0bffc17 	ldw	r2,-16(fp)
 401c54c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401c550:	e0bffe17 	ldw	r2,-8(fp)
 401c554:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
 401c558:	0001883a 	nop
 401c55c:	0001883a 	nop
}
 401c560:	e037883a 	mov	sp,fp
 401c564:	dfc00117 	ldw	ra,4(sp)
 401c568:	df000017 	ldw	fp,0(sp)
 401c56c:	dec00204 	addi	sp,sp,8
 401c570:	f800283a 	ret

0401c574 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
 401c574:	defffb04 	addi	sp,sp,-20
 401c578:	df000415 	stw	fp,16(sp)
 401c57c:	df000404 	addi	fp,sp,16
 401c580:	e13ffc15 	stw	r4,-16(fp)
 401c584:	e17ffd15 	stw	r5,-12(fp)
 401c588:	e1bffe15 	stw	r6,-8(fp)
 401c58c:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
 401c590:	e0bffc17 	ldw	r2,-16(fp)
 401c594:	e0fffd17 	ldw	r3,-12(fp)
 401c598:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
 401c59c:	e0bffc17 	ldw	r2,-16(fp)
 401c5a0:	e0ffff17 	ldw	r3,-4(fp)
 401c5a4:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
 401c5a8:	e0bffc17 	ldw	r2,-16(fp)
 401c5ac:	e0fffe17 	ldw	r3,-8(fp)
 401c5b0:	10c00815 	stw	r3,32(r2)

    return ;
 401c5b4:	0001883a 	nop
}
 401c5b8:	e037883a 	mov	sp,fp
 401c5bc:	df000017 	ldw	fp,0(sp)
 401c5c0:	dec00104 	addi	sp,sp,4
 401c5c4:	f800283a 	ret

0401c5c8 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
 401c5c8:	defff704 	addi	sp,sp,-36
 401c5cc:	dfc00815 	stw	ra,32(sp)
 401c5d0:	df000715 	stw	fp,28(sp)
 401c5d4:	df000704 	addi	fp,sp,28
 401c5d8:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
 401c5dc:	e13fff17 	ldw	r4,-4(fp)
 401c5e0:	401c78c0 	call	401c78c <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 401c5e4:	014007c4 	movi	r5,31
 401c5e8:	e13fff17 	ldw	r4,-4(fp)
 401c5ec:	401dd1c0 	call	401dd1c <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401c5f0:	01400704 	movi	r5,28
 401c5f4:	e13fff17 	ldw	r4,-4(fp)
 401c5f8:	401dce00 	call	401dce0 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
 401c5fc:	014000c4 	movi	r5,3
 401c600:	e13fff17 	ldw	r4,-4(fp)
 401c604:	401df280 	call	401df28 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
 401c608:	014000c4 	movi	r5,3
 401c60c:	e13fff17 	ldw	r4,-4(fp)
 401c610:	401de780 	call	401de78 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
 401c614:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
 401c618:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
 401c61c:	e0bffb04 	addi	r2,fp,-20
 401c620:	018000b4 	movhi	r6,2
 401c624:	31a1a804 	addi	r6,r6,-31072
 401c628:	100b883a 	mov	r5,r2
 401c62c:	e13fff17 	ldw	r4,-4(fp)
 401c630:	401c9e80 	call	401c9e8 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
 401c634:	e0bffb04 	addi	r2,fp,-20
 401c638:	100b883a 	mov	r5,r2
 401c63c:	e13fff17 	ldw	r4,-4(fp)
 401c640:	401c8880 	call	401c888 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
 401c644:	d165b904 	addi	r5,gp,-26908
 401c648:	e13fff17 	ldw	r4,-4(fp)
 401c64c:	401efc80 	call	401efc8 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 401c650:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
 401c654:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
 401c658:	e0bffa17 	ldw	r2,-24(fp)
 401c65c:	10000c1e 	bne	r2,zero,401c690 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
 401c660:	e0bfff17 	ldw	r2,-4(fp)
 401c664:	10c00417 	ldw	r3,16(r2)
 401c668:	e0bfff17 	ldw	r2,-4(fp)
 401c66c:	10800517 	ldw	r2,20(r2)
 401c670:	d8000015 	stw	zero,0(sp)
 401c674:	e1ffff17 	ldw	r7,-4(fp)
 401c678:	018100b4 	movhi	r6,1026
 401c67c:	31b13604 	addi	r6,r6,-15144
 401c680:	100b883a 	mov	r5,r2
 401c684:	1809883a 	mov	r4,r3
 401c688:	401f1dc0 	call	401f1dc <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
 401c68c:	00000406 	br	401c6a0 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
 401c690:	010100b4 	movhi	r4,1026
 401c694:	211d1a04 	addi	r4,r4,29800
 401c698:	401f8600 	call	401f860 <alt_printf>
    }

    return;
 401c69c:	0001883a 	nop

}
 401c6a0:	e037883a 	mov	sp,fp
 401c6a4:	dfc00117 	ldw	ra,4(sp)
 401c6a8:	df000017 	ldw	fp,0(sp)
 401c6ac:	dec00204 	addi	sp,sp,8
 401c6b0:	f800283a 	ret

0401c6b4 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
 401c6b4:	defffc04 	addi	sp,sp,-16
 401c6b8:	dfc00315 	stw	ra,12(sp)
 401c6bc:	df000215 	stw	fp,8(sp)
 401c6c0:	df000204 	addi	fp,sp,8
 401c6c4:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
 401c6c8:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
 401c6cc:	d165b904 	addi	r5,gp,-26908
 401c6d0:	e13fff17 	ldw	r4,-4(fp)
 401c6d4:	401f12c0 	call	401f12c <alt_find_dev>
 401c6d8:	e0bffe15 	stw	r2,-8(fp)

    return dev;
 401c6dc:	e0bffe17 	ldw	r2,-8(fp)
}
 401c6e0:	e037883a 	mov	sp,fp
 401c6e4:	dfc00117 	ldw	ra,4(sp)
 401c6e8:	df000017 	ldw	fp,0(sp)
 401c6ec:	dec00204 	addi	sp,sp,8
 401c6f0:	f800283a 	ret

0401c6f4 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 401c6f4:	defffc04 	addi	sp,sp,-16
 401c6f8:	df000315 	stw	fp,12(sp)
 401c6fc:	df000304 	addi	fp,sp,12
 401c700:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 401c704:	e0bfff17 	ldw	r2,-4(fp)
 401c708:	10800717 	ldw	r2,28(r2)
 401c70c:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
 401c710:	e0bfff17 	ldw	r2,-4(fp)
 401c714:	10800317 	ldw	r2,12(r2)
 401c718:	10800204 	addi	r2,r2,8
 401c71c:	10800037 	ldwio	r2,0(r2)
 401c720:	1080004c 	andi	r2,r2,1
 401c724:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
 401c728:	e0bffe17 	ldw	r2,-8(fp)
 401c72c:	10000226 	beq	r2,zero,401c738 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
 401c730:	00bffe44 	movi	r2,-7
 401c734:	00001106 	br	401c77c <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
 401c738:	e0bfff17 	ldw	r2,-4(fp)
 401c73c:	10c00617 	ldw	r3,24(r2)
 401c740:	008100b4 	movhi	r2,1026
 401c744:	10b0de04 	addi	r2,r2,-15496
 401c748:	1880021e 	bne	r3,r2,401c754 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
 401c74c:	e0bffd17 	ldw	r2,-12(fp)
 401c750:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
 401c754:	e0bfff17 	ldw	r2,-4(fp)
 401c758:	10800317 	ldw	r2,12(r2)
 401c75c:	10800204 	addi	r2,r2,8
 401c760:	e0ffff17 	ldw	r3,-4(fp)
 401c764:	18c00317 	ldw	r3,12(r3)
 401c768:	18c00204 	addi	r3,r3,8
 401c76c:	18c00037 	ldwio	r3,0(r3)
 401c770:	18c00054 	ori	r3,r3,1
 401c774:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 401c778:	0005883a 	mov	r2,zero
}
 401c77c:	e037883a 	mov	sp,fp
 401c780:	df000017 	ldw	fp,0(sp)
 401c784:	dec00104 	addi	sp,sp,4
 401c788:	f800283a 	ret

0401c78c <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 401c78c:	defffe04 	addi	sp,sp,-8
 401c790:	df000115 	stw	fp,4(sp)
 401c794:	df000104 	addi	fp,sp,4
 401c798:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 401c79c:	e0bfff17 	ldw	r2,-4(fp)
 401c7a0:	10800317 	ldw	r2,12(r2)
 401c7a4:	10800204 	addi	r2,r2,8
 401c7a8:	e0ffff17 	ldw	r3,-4(fp)
 401c7ac:	18c00317 	ldw	r3,12(r3)
 401c7b0:	18c00204 	addi	r3,r3,8
 401c7b4:	19000037 	ldwio	r4,0(r3)
 401c7b8:	00ffff84 	movi	r3,-2
 401c7bc:	20c6703a 	and	r3,r4,r3
 401c7c0:	10c00035 	stwio	r3,0(r2)

}
 401c7c4:	0001883a 	nop
 401c7c8:	e037883a 	mov	sp,fp
 401c7cc:	df000017 	ldw	fp,0(sp)
 401c7d0:	dec00104 	addi	sp,sp,4
 401c7d4:	f800283a 	ret

0401c7d8 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 401c7d8:	defffd04 	addi	sp,sp,-12
 401c7dc:	df000215 	stw	fp,8(sp)
 401c7e0:	df000204 	addi	fp,sp,8
 401c7e4:	e13ffe15 	stw	r4,-8(fp)
 401c7e8:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
 401c7ec:	e0bffe17 	ldw	r2,-8(fp)
 401c7f0:	10c00d17 	ldw	r3,52(r2)
 401c7f4:	e0bfff17 	ldw	r2,-4(fp)
 401c7f8:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
 401c7fc:	e0bffe17 	ldw	r2,-8(fp)
 401c800:	10800317 	ldw	r2,12(r2)
 401c804:	10800204 	addi	r2,r2,8
 401c808:	10800037 	ldwio	r2,0(r2)
 401c80c:	1080008c 	andi	r2,r2,2
 401c810:	1005d07a 	srai	r2,r2,1
 401c814:	1007883a 	mov	r3,r2
 401c818:	e0bfff17 	ldw	r2,-4(fp)
 401c81c:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
 401c820:	e0bffe17 	ldw	r2,-8(fp)
 401c824:	10800317 	ldw	r2,12(r2)
 401c828:	10800904 	addi	r2,r2,36
 401c82c:	10800037 	ldwio	r2,0(r2)
 401c830:	1007883a 	mov	r3,r2
 401c834:	e0bfff17 	ldw	r2,-4(fp)
 401c838:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
 401c83c:	e0bffe17 	ldw	r2,-8(fp)
 401c840:	10800317 	ldw	r2,12(r2)
 401c844:	10800804 	addi	r2,r2,32
 401c848:	10800037 	ldwio	r2,0(r2)
 401c84c:	1007883a 	mov	r3,r2
 401c850:	e0bfff17 	ldw	r2,-4(fp)
 401c854:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
 401c858:	e0bffe17 	ldw	r2,-8(fp)
 401c85c:	10800317 	ldw	r2,12(r2)
 401c860:	10800a04 	addi	r2,r2,40
 401c864:	10800037 	ldwio	r2,0(r2)
 401c868:	1007883a 	mov	r3,r2
 401c86c:	e0bfff17 	ldw	r2,-4(fp)
 401c870:	10c0030d 	sth	r3,12(r2)
}
 401c874:	0001883a 	nop
 401c878:	e037883a 	mov	sp,fp
 401c87c:	df000017 	ldw	fp,0(sp)
 401c880:	dec00104 	addi	sp,sp,4
 401c884:	f800283a 	ret

0401c888 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 401c888:	defffd04 	addi	sp,sp,-12
 401c88c:	df000215 	stw	fp,8(sp)
 401c890:	df000204 	addi	fp,sp,8
 401c894:	e13ffe15 	stw	r4,-8(fp)
 401c898:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
 401c89c:	e0bfff17 	ldw	r2,-4(fp)
 401c8a0:	10c00017 	ldw	r3,0(r2)
 401c8a4:	e0bffe17 	ldw	r2,-8(fp)
 401c8a8:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
 401c8ac:	e0bffe17 	ldw	r2,-8(fp)
 401c8b0:	10800317 	ldw	r2,12(r2)
 401c8b4:	10c00204 	addi	r3,r2,8
 401c8b8:	e0bffe17 	ldw	r2,-8(fp)
 401c8bc:	10800317 	ldw	r2,12(r2)
 401c8c0:	10800204 	addi	r2,r2,8
 401c8c4:	10800037 	ldwio	r2,0(r2)
 401c8c8:	1009883a 	mov	r4,r2
 401c8cc:	00bfff44 	movi	r2,-3
 401c8d0:	2088703a 	and	r4,r4,r2
 401c8d4:	e0bfff17 	ldw	r2,-4(fp)
 401c8d8:	10800117 	ldw	r2,4(r2)
 401c8dc:	1085883a 	add	r2,r2,r2
 401c8e0:	1080008c 	andi	r2,r2,2
 401c8e4:	2084b03a 	or	r2,r4,r2
 401c8e8:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
 401c8ec:	e0bffe17 	ldw	r2,-8(fp)
 401c8f0:	10800317 	ldw	r2,12(r2)
 401c8f4:	10800904 	addi	r2,r2,36
 401c8f8:	e0ffff17 	ldw	r3,-4(fp)
 401c8fc:	18c0020b 	ldhu	r3,8(r3)
 401c900:	18ffffcc 	andi	r3,r3,65535
 401c904:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
 401c908:	e0bffe17 	ldw	r2,-8(fp)
 401c90c:	10800317 	ldw	r2,12(r2)
 401c910:	10800804 	addi	r2,r2,32
 401c914:	e0ffff17 	ldw	r3,-4(fp)
 401c918:	18c0028b 	ldhu	r3,10(r3)
 401c91c:	18ffffcc 	andi	r3,r3,65535
 401c920:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
 401c924:	e0bffe17 	ldw	r2,-8(fp)
 401c928:	10800317 	ldw	r2,12(r2)
 401c92c:	10800a04 	addi	r2,r2,40
 401c930:	e0ffff17 	ldw	r3,-4(fp)
 401c934:	18c0030b 	ldhu	r3,12(r3)
 401c938:	18ffffcc 	andi	r3,r3,65535
 401c93c:	10c00035 	stwio	r3,0(r2)
}
 401c940:	0001883a 	nop
 401c944:	e037883a 	mov	sp,fp
 401c948:	df000017 	ldw	fp,0(sp)
 401c94c:	dec00104 	addi	sp,sp,4
 401c950:	f800283a 	ret

0401c954 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
 401c954:	defffb04 	addi	sp,sp,-20
 401c958:	dfc00415 	stw	ra,16(sp)
 401c95c:	df000315 	stw	fp,12(sp)
 401c960:	df000304 	addi	fp,sp,12
 401c964:	e13ffd15 	stw	r4,-12(fp)
 401c968:	e17ffe15 	stw	r5,-8(fp)
 401c96c:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
 401c970:	e0bffe17 	ldw	r2,-8(fp)
 401c974:	1080028b 	ldhu	r2,10(r2)
 401c978:	10bfffcc 	andi	r2,r2,65535
 401c97c:	10000426 	beq	r2,zero,401c990 <alt_avalon_i2c_master_config_speed_get+0x3c>
 401c980:	e0bffe17 	ldw	r2,-8(fp)
 401c984:	1080020b 	ldhu	r2,8(r2)
 401c988:	10bfffcc 	andi	r2,r2,65535
 401c98c:	1000021e 	bne	r2,zero,401c998 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
 401c990:	00bfff44 	movi	r2,-3
 401c994:	00000f06 	br	401c9d4 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
 401c998:	e0bffd17 	ldw	r2,-12(fp)
 401c99c:	11000c17 	ldw	r4,48(r2)
 401c9a0:	e0bffe17 	ldw	r2,-8(fp)
 401c9a4:	1080028b 	ldhu	r2,10(r2)
 401c9a8:	10ffffcc 	andi	r3,r2,65535
 401c9ac:	e0bffe17 	ldw	r2,-8(fp)
 401c9b0:	1080020b 	ldhu	r2,8(r2)
 401c9b4:	10bfffcc 	andi	r2,r2,65535
 401c9b8:	1885883a 	add	r2,r3,r2
 401c9bc:	100b883a 	mov	r5,r2
 401c9c0:	400d2ac0 	call	400d2ac <__udivsi3>
 401c9c4:	1007883a 	mov	r3,r2
 401c9c8:	e0bfff17 	ldw	r2,-4(fp)
 401c9cc:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 401c9d0:	0005883a 	mov	r2,zero
}
 401c9d4:	e037883a 	mov	sp,fp
 401c9d8:	dfc00117 	ldw	ra,4(sp)
 401c9dc:	df000017 	ldw	fp,0(sp)
 401c9e0:	dec00204 	addi	sp,sp,8
 401c9e4:	f800283a 	ret

0401c9e8 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
 401c9e8:	defff904 	addi	sp,sp,-28
 401c9ec:	dfc00615 	stw	ra,24(sp)
 401c9f0:	df000515 	stw	fp,20(sp)
 401c9f4:	df000504 	addi	fp,sp,20
 401c9f8:	e13ffd15 	stw	r4,-12(fp)
 401c9fc:	e17ffe15 	stw	r5,-8(fp)
 401ca00:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
 401ca04:	e0ffff17 	ldw	r3,-4(fp)
 401ca08:	008001b4 	movhi	r2,6
 401ca0c:	1086a004 	addi	r2,r2,6784
 401ca10:	10c00436 	bltu	r2,r3,401ca24 <alt_avalon_i2c_master_config_speed_set+0x3c>
 401ca14:	e0bfff17 	ldw	r2,-4(fp)
 401ca18:	10000226 	beq	r2,zero,401ca24 <alt_avalon_i2c_master_config_speed_set+0x3c>
 401ca1c:	e0bfff17 	ldw	r2,-4(fp)
 401ca20:	1000021e 	bne	r2,zero,401ca2c <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
 401ca24:	00bfff04 	movi	r2,-4
 401ca28:	00002906 	br	401cad0 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
 401ca2c:	e0bffd17 	ldw	r2,-12(fp)
 401ca30:	10c00c17 	ldw	r3,48(r2)
 401ca34:	e0bfff17 	ldw	r2,-4(fp)
 401ca38:	1085883a 	add	r2,r2,r2
 401ca3c:	100b883a 	mov	r5,r2
 401ca40:	1809883a 	mov	r4,r3
 401ca44:	400d2ac0 	call	400d2ac <__udivsi3>
 401ca48:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 401ca4c:	e0bffb17 	ldw	r2,-20(fp)
 401ca50:	10800f04 	addi	r2,r2,60
 401ca54:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 401ca58:	e0bffb17 	ldw	r2,-20(fp)
 401ca5c:	10bff104 	addi	r2,r2,-60
 401ca60:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
 401ca64:	e0ffff17 	ldw	r3,-4(fp)
 401ca68:	008000b4 	movhi	r2,2
 401ca6c:	10a1a804 	addi	r2,r2,-31072
 401ca70:	10c0042e 	bgeu	r2,r3,401ca84 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
 401ca74:	e0bffe17 	ldw	r2,-8(fp)
 401ca78:	00c00044 	movi	r3,1
 401ca7c:	10c00115 	stw	r3,4(r2)
 401ca80:	00000206 	br	401ca8c <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
 401ca84:	e0bffe17 	ldw	r2,-8(fp)
 401ca88:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
 401ca8c:	e0bffb17 	ldw	r2,-20(fp)
 401ca90:	1007883a 	mov	r3,r2
 401ca94:	e0bffe17 	ldw	r2,-8(fp)
 401ca98:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
 401ca9c:	e0bffc17 	ldw	r2,-16(fp)
 401caa0:	1007883a 	mov	r3,r2
 401caa4:	e0bffe17 	ldw	r2,-8(fp)
 401caa8:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
 401caac:	e0bffb17 	ldw	r2,-20(fp)
 401cab0:	1007883a 	mov	r3,r2
 401cab4:	e0bffb17 	ldw	r2,-20(fp)
 401cab8:	1004d07a 	srli	r2,r2,1
 401cabc:	1885c83a 	sub	r2,r3,r2
 401cac0:	1007883a 	mov	r3,r2
 401cac4:	e0bffe17 	ldw	r2,-8(fp)
 401cac8:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
 401cacc:	0005883a 	mov	r2,zero

}
 401cad0:	e037883a 	mov	sp,fp
 401cad4:	dfc00117 	ldw	ra,4(sp)
 401cad8:	df000017 	ldw	fp,0(sp)
 401cadc:	dec00204 	addi	sp,sp,8
 401cae0:	f800283a 	ret

0401cae4 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 401cae4:	defffe04 	addi	sp,sp,-8
 401cae8:	df000115 	stw	fp,4(sp)
 401caec:	df000104 	addi	fp,sp,4
 401caf0:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 401caf4:	e0bfff17 	ldw	r2,-4(fp)
 401caf8:	10800317 	ldw	r2,12(r2)
 401cafc:	10800504 	addi	r2,r2,20
 401cb00:	10800037 	ldwio	r2,0(r2)
 401cb04:	1080004c 	andi	r2,r2,1
 401cb08:	10000226 	beq	r2,zero,401cb14 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
 401cb0c:	00800044 	movi	r2,1
 401cb10:	00000106 	br	401cb18 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
 401cb14:	0005883a 	mov	r2,zero
}
 401cb18:	e037883a 	mov	sp,fp
 401cb1c:	df000017 	ldw	fp,0(sp)
 401cb20:	dec00104 	addi	sp,sp,4
 401cb24:	f800283a 	ret

0401cb28 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
 401cb28:	defffb04 	addi	sp,sp,-20
 401cb2c:	df000415 	stw	fp,16(sp)
 401cb30:	df000404 	addi	fp,sp,16
 401cb34:	e13ffc15 	stw	r4,-16(fp)
 401cb38:	e17ffd15 	stw	r5,-12(fp)
 401cb3c:	e1bffe15 	stw	r6,-8(fp)
 401cb40:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
 401cb44:	e0bfff17 	ldw	r2,-4(fp)
 401cb48:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 401cb4c:	00001406 	br	401cba0 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 401cb50:	e0bfff17 	ldw	r2,-4(fp)
 401cb54:	10800017 	ldw	r2,0(r2)
 401cb58:	e0fffd17 	ldw	r3,-12(fp)
 401cb5c:	1885883a 	add	r2,r3,r2
 401cb60:	e0fffc17 	ldw	r3,-16(fp)
 401cb64:	18c00317 	ldw	r3,12(r3)
 401cb68:	18c00104 	addi	r3,r3,4
 401cb6c:	18c00037 	ldwio	r3,0(r3)
 401cb70:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
 401cb74:	e0bfff17 	ldw	r2,-4(fp)
 401cb78:	10800017 	ldw	r2,0(r2)
 401cb7c:	10c00044 	addi	r3,r2,1
 401cb80:	e0bfff17 	ldw	r2,-4(fp)
 401cb84:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 401cb88:	e0bfff17 	ldw	r2,-4(fp)
 401cb8c:	10c00017 	ldw	r3,0(r2)
 401cb90:	e0bffe17 	ldw	r2,-8(fp)
 401cb94:	1880021e 	bne	r3,r2,401cba0 <alt_avalon_i2c_rx_read_available+0x78>
 401cb98:	e0bffe17 	ldw	r2,-8(fp)
 401cb9c:	1000061e 	bne	r2,zero,401cbb8 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 401cba0:	e0bffc17 	ldw	r2,-16(fp)
 401cba4:	10800317 	ldw	r2,12(r2)
 401cba8:	10800704 	addi	r2,r2,28
 401cbac:	10800037 	ldwio	r2,0(r2)
 401cbb0:	103fe71e 	bne	r2,zero,401cb50 <__alt_data_end+0xfc01cb50>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
 401cbb4:	00000106 	br	401cbbc <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 401cbb8:	0001883a 	nop
    }
}
 401cbbc:	0001883a 	nop
 401cbc0:	e037883a 	mov	sp,fp
 401cbc4:	df000017 	ldw	fp,0(sp)
 401cbc8:	dec00104 	addi	sp,sp,4
 401cbcc:	f800283a 	ret

0401cbd0 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
 401cbd0:	defffa04 	addi	sp,sp,-24
 401cbd4:	dfc00515 	stw	ra,20(sp)
 401cbd8:	df000415 	stw	fp,16(sp)
 401cbdc:	df000404 	addi	fp,sp,16
 401cbe0:	e13ffe15 	stw	r4,-8(fp)
 401cbe4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
 401cbe8:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
 401cbec:	008000b4 	movhi	r2,2
 401cbf0:	10a1a804 	addi	r2,r2,-31072
 401cbf4:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 401cbf8:	00000d06 	br	401cc30 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
 401cbfc:	e0bffd17 	ldw	r2,-12(fp)
 401cc00:	108002a8 	cmpgeui	r2,r2,10
 401cc04:	1000021e 	bne	r2,zero,401cc10 <alt_avalon_i2c_rx_read+0x40>
 401cc08:	0109c404 	movi	r4,10000
 401cc0c:	401ee140 	call	401ee14 <alt_busy_sleep>
      if (--timeout == 0)
 401cc10:	e0bffd17 	ldw	r2,-12(fp)
 401cc14:	10bfffc4 	addi	r2,r2,-1
 401cc18:	e0bffd15 	stw	r2,-12(fp)
 401cc1c:	e0bffd17 	ldw	r2,-12(fp)
 401cc20:	1000031e 	bne	r2,zero,401cc30 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
 401cc24:	00bfff84 	movi	r2,-2
 401cc28:	e0bffc15 	stw	r2,-16(fp)
        break;
 401cc2c:	00000506 	br	401cc44 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 401cc30:	e0bffe17 	ldw	r2,-8(fp)
 401cc34:	10800317 	ldw	r2,12(r2)
 401cc38:	10800704 	addi	r2,r2,28
 401cc3c:	10800037 	ldwio	r2,0(r2)
 401cc40:	103fee26 	beq	r2,zero,401cbfc <__alt_data_end+0xfc01cbfc>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 401cc44:	e0bffe17 	ldw	r2,-8(fp)
 401cc48:	10800317 	ldw	r2,12(r2)
 401cc4c:	10800104 	addi	r2,r2,4
 401cc50:	10800037 	ldwio	r2,0(r2)
 401cc54:	1007883a 	mov	r3,r2
 401cc58:	e0bfff17 	ldw	r2,-4(fp)
 401cc5c:	10c00005 	stb	r3,0(r2)
        
    return status;
 401cc60:	e0bffc17 	ldw	r2,-16(fp)
}
 401cc64:	e037883a 	mov	sp,fp
 401cc68:	dfc00117 	ldw	ra,4(sp)
 401cc6c:	df000017 	ldw	fp,0(sp)
 401cc70:	dec00204 	addi	sp,sp,8
 401cc74:	f800283a 	ret

0401cc78 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
 401cc78:	defff804 	addi	sp,sp,-32
 401cc7c:	dfc00715 	stw	ra,28(sp)
 401cc80:	df000615 	stw	fp,24(sp)
 401cc84:	df000604 	addi	fp,sp,24
 401cc88:	e13ffc15 	stw	r4,-16(fp)
 401cc8c:	2809883a 	mov	r4,r5
 401cc90:	3007883a 	mov	r3,r6
 401cc94:	3805883a 	mov	r2,r7
 401cc98:	e13ffd05 	stb	r4,-12(fp)
 401cc9c:	e0fffe05 	stb	r3,-8(fp)
 401cca0:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
 401cca4:	0089c404 	movi	r2,10000
 401cca8:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401ccac:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 401ccb0:	00000c06 	br	401cce4 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
 401ccb4:	e0bffa17 	ldw	r2,-24(fp)
 401ccb8:	108002a8 	cmpgeui	r2,r2,10
 401ccbc:	1000021e 	bne	r2,zero,401ccc8 <alt_avalon_i2c_cmd_write+0x50>
 401ccc0:	0109c404 	movi	r4,10000
 401ccc4:	401ee140 	call	401ee14 <alt_busy_sleep>
      if (--timeout == 0)
 401ccc8:	e0bffa17 	ldw	r2,-24(fp)
 401cccc:	10bfffc4 	addi	r2,r2,-1
 401ccd0:	e0bffa15 	stw	r2,-24(fp)
 401ccd4:	e0bffa17 	ldw	r2,-24(fp)
 401ccd8:	1000021e 	bne	r2,zero,401cce4 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
 401ccdc:	00bfff84 	movi	r2,-2
 401cce0:	00001906 	br	401cd48 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 401cce4:	e0bffc17 	ldw	r2,-16(fp)
 401cce8:	10800317 	ldw	r2,12(r2)
 401ccec:	10800404 	addi	r2,r2,16
 401ccf0:	10800037 	ldwio	r2,0(r2)
 401ccf4:	1080004c 	andi	r2,r2,1
 401ccf8:	103fee26 	beq	r2,zero,401ccb4 <__alt_data_end+0xfc01ccb4>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
 401ccfc:	e0bffc17 	ldw	r2,-16(fp)
 401cd00:	10800317 	ldw	r2,12(r2)
 401cd04:	e13ffd03 	ldbu	r4,-12(fp)
 401cd08:	e0fffe03 	ldbu	r3,-8(fp)
 401cd0c:	1806927a 	slli	r3,r3,9
 401cd10:	20c8b03a 	or	r4,r4,r3
 401cd14:	e0ffff03 	ldbu	r3,-4(fp)
 401cd18:	1806923a 	slli	r3,r3,8
 401cd1c:	20c6b03a 	or	r3,r4,r3
 401cd20:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 401cd24:	e0bffb04 	addi	r2,fp,-20
 401cd28:	100b883a 	mov	r5,r2
 401cd2c:	e13ffc17 	ldw	r4,-16(fp)
 401cd30:	401ceb80 	call	401ceb8 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
 401cd34:	e0bffb04 	addi	r2,fp,-20
 401cd38:	100b883a 	mov	r5,r2
 401cd3c:	e13ffc17 	ldw	r4,-16(fp)
 401cd40:	401cf040 	call	401cf04 <alt_avalon_i2c_check_arblost>
    
    return status;
 401cd44:	e0bffb17 	ldw	r2,-20(fp)
}
 401cd48:	e037883a 	mov	sp,fp
 401cd4c:	dfc00117 	ldw	ra,4(sp)
 401cd50:	df000017 	ldw	fp,0(sp)
 401cd54:	dec00204 	addi	sp,sp,8
 401cd58:	f800283a 	ret

0401cd5c <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
 401cd5c:	defffa04 	addi	sp,sp,-24
 401cd60:	dfc00515 	stw	ra,20(sp)
 401cd64:	df000415 	stw	fp,16(sp)
 401cd68:	df000404 	addi	fp,sp,16
 401cd6c:	e13ffd15 	stw	r4,-12(fp)
 401cd70:	e17ffe15 	stw	r5,-8(fp)
 401cd74:	3005883a 	mov	r2,r6
 401cd78:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
 401cd7c:	e0bffd17 	ldw	r2,-12(fp)
 401cd80:	10800d17 	ldw	r2,52(r2)
 401cd84:	10800058 	cmpnei	r2,r2,1
 401cd88:	10001c1e 	bne	r2,zero,401cdfc <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 401cd8c:	e0bffd17 	ldw	r2,-12(fp)
 401cd90:	10800917 	ldw	r2,36(r2)
 401cd94:	109e0014 	ori	r2,r2,30720
 401cd98:	1004d1fa 	srli	r2,r2,7
 401cd9c:	1007883a 	mov	r3,r2
 401cda0:	00bfff84 	movi	r2,-2
 401cda4:	1884703a 	and	r2,r3,r2
 401cda8:	1007883a 	mov	r3,r2
 401cdac:	e0bffe17 	ldw	r2,-8(fp)
 401cdb0:	1884b03a 	or	r2,r3,r2
 401cdb4:	10803fcc 	andi	r2,r2,255
 401cdb8:	e0ffff03 	ldbu	r3,-4(fp)
 401cdbc:	000f883a 	mov	r7,zero
 401cdc0:	180d883a 	mov	r6,r3
 401cdc4:	100b883a 	mov	r5,r2
 401cdc8:	e13ffd17 	ldw	r4,-12(fp)
 401cdcc:	401cc780 	call	401cc78 <alt_avalon_i2c_cmd_write>
 401cdd0:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
 401cdd4:	e0bffd17 	ldw	r2,-12(fp)
 401cdd8:	10800917 	ldw	r2,36(r2)
 401cddc:	10803fcc 	andi	r2,r2,255
 401cde0:	000f883a 	mov	r7,zero
 401cde4:	000d883a 	mov	r6,zero
 401cde8:	100b883a 	mov	r5,r2
 401cdec:	e13ffd17 	ldw	r4,-12(fp)
 401cdf0:	401cc780 	call	401cc78 <alt_avalon_i2c_cmd_write>
 401cdf4:	e0bffc15 	stw	r2,-16(fp)
 401cdf8:	00000e06 	br	401ce34 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 401cdfc:	e0bffd17 	ldw	r2,-12(fp)
 401ce00:	10800917 	ldw	r2,36(r2)
 401ce04:	1085883a 	add	r2,r2,r2
 401ce08:	1007883a 	mov	r3,r2
 401ce0c:	e0bffe17 	ldw	r2,-8(fp)
 401ce10:	1884b03a 	or	r2,r3,r2
 401ce14:	10803fcc 	andi	r2,r2,255
 401ce18:	e0ffff03 	ldbu	r3,-4(fp)
 401ce1c:	000f883a 	mov	r7,zero
 401ce20:	180d883a 	mov	r6,r3
 401ce24:	100b883a 	mov	r5,r2
 401ce28:	e13ffd17 	ldw	r4,-12(fp)
 401ce2c:	401cc780 	call	401cc78 <alt_avalon_i2c_cmd_write>
 401ce30:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
 401ce34:	e0bffc17 	ldw	r2,-16(fp)
}
 401ce38:	e037883a 	mov	sp,fp
 401ce3c:	dfc00117 	ldw	ra,4(sp)
 401ce40:	df000017 	ldw	fp,0(sp)
 401ce44:	dec00204 	addi	sp,sp,8
 401ce48:	f800283a 	ret

0401ce4c <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
 401ce4c:	defffd04 	addi	sp,sp,-12
 401ce50:	df000215 	stw	fp,8(sp)
 401ce54:	df000204 	addi	fp,sp,8
 401ce58:	e13ffe15 	stw	r4,-8(fp)
 401ce5c:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
 401ce60:	e0bffe17 	ldw	r2,-8(fp)
 401ce64:	10c00917 	ldw	r3,36(r2)
 401ce68:	e0bfff17 	ldw	r2,-4(fp)
 401ce6c:	10c00015 	stw	r3,0(r2)
}
 401ce70:	0001883a 	nop
 401ce74:	e037883a 	mov	sp,fp
 401ce78:	df000017 	ldw	fp,0(sp)
 401ce7c:	dec00104 	addi	sp,sp,4
 401ce80:	f800283a 	ret

0401ce84 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
 401ce84:	defffd04 	addi	sp,sp,-12
 401ce88:	df000215 	stw	fp,8(sp)
 401ce8c:	df000204 	addi	fp,sp,8
 401ce90:	e13ffe15 	stw	r4,-8(fp)
 401ce94:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
 401ce98:	e0bffe17 	ldw	r2,-8(fp)
 401ce9c:	e0ffff17 	ldw	r3,-4(fp)
 401cea0:	10c00915 	stw	r3,36(r2)
}
 401cea4:	0001883a 	nop
 401cea8:	e037883a 	mov	sp,fp
 401ceac:	df000017 	ldw	fp,0(sp)
 401ceb0:	dec00104 	addi	sp,sp,4
 401ceb4:	f800283a 	ret

0401ceb8 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
 401ceb8:	defffd04 	addi	sp,sp,-12
 401cebc:	df000215 	stw	fp,8(sp)
 401cec0:	df000204 	addi	fp,sp,8
 401cec4:	e13ffe15 	stw	r4,-8(fp)
 401cec8:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
 401cecc:	e0bffe17 	ldw	r2,-8(fp)
 401ced0:	10800317 	ldw	r2,12(r2)
 401ced4:	10800404 	addi	r2,r2,16
 401ced8:	10800037 	ldwio	r2,0(r2)
 401cedc:	1080010c 	andi	r2,r2,4
 401cee0:	10000326 	beq	r2,zero,401cef0 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 401cee4:	e0bfff17 	ldw	r2,-4(fp)
 401cee8:	00fffec4 	movi	r3,-5
 401ceec:	10c00015 	stw	r3,0(r2)
    }
}
 401cef0:	0001883a 	nop
 401cef4:	e037883a 	mov	sp,fp
 401cef8:	df000017 	ldw	fp,0(sp)
 401cefc:	dec00104 	addi	sp,sp,4
 401cf00:	f800283a 	ret

0401cf04 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
 401cf04:	defffd04 	addi	sp,sp,-12
 401cf08:	df000215 	stw	fp,8(sp)
 401cf0c:	df000204 	addi	fp,sp,8
 401cf10:	e13ffe15 	stw	r4,-8(fp)
 401cf14:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
 401cf18:	e0bffe17 	ldw	r2,-8(fp)
 401cf1c:	10800317 	ldw	r2,12(r2)
 401cf20:	10800404 	addi	r2,r2,16
 401cf24:	10800037 	ldwio	r2,0(r2)
 401cf28:	1080020c 	andi	r2,r2,8
 401cf2c:	10000326 	beq	r2,zero,401cf3c <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
 401cf30:	e0bfff17 	ldw	r2,-4(fp)
 401cf34:	00fffe84 	movi	r3,-6
 401cf38:	10c00015 	stw	r3,0(r2)
    }
}
 401cf3c:	0001883a 	nop
 401cf40:	e037883a 	mov	sp,fp
 401cf44:	df000017 	ldw	fp,0(sp)
 401cf48:	dec00104 	addi	sp,sp,4
 401cf4c:	f800283a 	ret

0401cf50 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 401cf50:	defff804 	addi	sp,sp,-32
 401cf54:	dfc00715 	stw	ra,28(sp)
 401cf58:	df000615 	stw	fp,24(sp)
 401cf5c:	df000604 	addi	fp,sp,24
 401cf60:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401cf64:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 401cf68:	e0bfff17 	ldw	r2,-4(fp)
 401cf6c:	10800717 	ldw	r2,28(r2)
 401cf70:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
 401cf74:	e0bffb17 	ldw	r2,-20(fp)
 401cf78:	10800117 	ldw	r2,4(r2)
 401cf7c:	10800044 	addi	r2,r2,1
 401cf80:	0149c404 	movi	r5,10000
 401cf84:	1009883a 	mov	r4,r2
 401cf88:	400d3680 	call	400d368 <__mulsi3>
 401cf8c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
 401cf90:	e0bffd04 	addi	r2,fp,-12
 401cf94:	100b883a 	mov	r5,r2
 401cf98:	e13fff17 	ldw	r4,-4(fp)
 401cf9c:	401dde80 	call	401dde8 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
 401cfa0:	e0bffd17 	ldw	r2,-12(fp)
 401cfa4:	100b883a 	mov	r5,r2
 401cfa8:	e13fff17 	ldw	r4,-4(fp)
 401cfac:	401dd1c0 	call	401dd1c <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 401cfb0:	e0bffc04 	addi	r2,fp,-16
 401cfb4:	100b883a 	mov	r5,r2
 401cfb8:	e13fff17 	ldw	r4,-4(fp)
 401cfbc:	401ceb80 	call	401ceb8 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
 401cfc0:	e0bffc17 	ldw	r2,-16(fp)
 401cfc4:	10002226 	beq	r2,zero,401d050 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
 401cfc8:	e0bffb17 	ldw	r2,-20(fp)
 401cfcc:	10800217 	ldw	r2,8(r2)
 401cfd0:	10001d26 	beq	r2,zero,401d048 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401cfd4:	00000d06 	br	401d00c <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
 401cfd8:	e0bffa17 	ldw	r2,-24(fp)
 401cfdc:	108002a8 	cmpgeui	r2,r2,10
 401cfe0:	1000021e 	bne	r2,zero,401cfec <alt_avalon_i2c_interrupt_transaction_status+0x9c>
 401cfe4:	0109c404 	movi	r4,10000
 401cfe8:	401ee140 	call	401ee14 <alt_busy_sleep>
              if (--timeout == 0)
 401cfec:	e0bffa17 	ldw	r2,-24(fp)
 401cff0:	10bfffc4 	addi	r2,r2,-1
 401cff4:	e0bffa15 	stw	r2,-24(fp)
 401cff8:	e0bffa17 	ldw	r2,-24(fp)
 401cffc:	1000031e 	bne	r2,zero,401d00c <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
 401d000:	00bfff84 	movi	r2,-2
 401d004:	e0bffc15 	stw	r2,-16(fp)
                 break;
 401d008:	00000306 	br	401d018 <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401d00c:	e13fff17 	ldw	r4,-4(fp)
 401d010:	401cae40 	call	401cae4 <alt_avalon_i2c_is_busy>
 401d014:	103ff01e 	bne	r2,zero,401cfd8 <__alt_data_end+0xfc01cfd8>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
 401d018:	e0bffb17 	ldw	r2,-20(fp)
 401d01c:	10800017 	ldw	r2,0(r2)
 401d020:	e0fffe04 	addi	r3,fp,-8
 401d024:	180f883a 	mov	r7,r3
 401d028:	000d883a 	mov	r6,zero
 401d02c:	100b883a 	mov	r5,r2
 401d030:	e13fff17 	ldw	r4,-4(fp)
 401d034:	401cb280 	call	401cb28 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
 401d038:	e13fff17 	ldw	r4,-4(fp)
 401d03c:	401c78c0 	call	401c78c <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
 401d040:	e0bffb17 	ldw	r2,-20(fp)
 401d044:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
 401d048:	e0bffc17 	ldw	r2,-16(fp)
 401d04c:	00000a06 	br	401d078 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
 401d050:	e0bffb17 	ldw	r2,-20(fp)
 401d054:	10800217 	ldw	r2,8(r2)
 401d058:	10000626 	beq	r2,zero,401d074 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
 401d05c:	e0bffd17 	ldw	r2,-12(fp)
 401d060:	100b883a 	mov	r5,r2
 401d064:	e13fff17 	ldw	r4,-4(fp)
 401d068:	401dd840 	call	401dd84 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
 401d06c:	00bffe44 	movi	r2,-7
 401d070:	00000106 	br	401d078 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
 401d074:	0005883a 	mov	r2,zero
}
 401d078:	e037883a 	mov	sp,fp
 401d07c:	dfc00117 	ldw	ra,4(sp)
 401d080:	df000017 	ldw	fp,0(sp)
 401d084:	dec00204 	addi	sp,sp,8
 401d088:	f800283a 	ret

0401d08c <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 401d08c:	defff704 	addi	sp,sp,-36
 401d090:	dfc00815 	stw	ra,32(sp)
 401d094:	df000715 	stw	fp,28(sp)
 401d098:	df000704 	addi	fp,sp,28
 401d09c:	e13ffc15 	stw	r4,-16(fp)
 401d0a0:	e17ffd15 	stw	r5,-12(fp)
 401d0a4:	e1bffe15 	stw	r6,-8(fp)
 401d0a8:	3805883a 	mov	r2,r7
 401d0ac:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 401d0b0:	0089c404 	movi	r2,10000
 401d0b4:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
 401d0b8:	00002206 	br	401d144 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
 401d0bc:	e0bffb17 	ldw	r2,-20(fp)
 401d0c0:	108002a8 	cmpgeui	r2,r2,10
 401d0c4:	1000021e 	bne	r2,zero,401d0d0 <alt_avalon_i2c_master_tx+0x44>
 401d0c8:	0109c404 	movi	r4,10000
 401d0cc:	401ee140 	call	401ee14 <alt_busy_sleep>
      if (use_interrupts)
 401d0d0:	e0bfff03 	ldbu	r2,-4(fp)
 401d0d4:	10000926 	beq	r2,zero,401d0fc <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
 401d0d8:	00800044 	movi	r2,1
 401d0dc:	d8800015 	stw	r2,0(sp)
 401d0e0:	000f883a 	mov	r7,zero
 401d0e4:	e1bffe17 	ldw	r6,-8(fp)
 401d0e8:	e17ffd17 	ldw	r5,-12(fp)
 401d0ec:	e13ffc17 	ldw	r4,-16(fp)
 401d0f0:	401d6380 	call	401d638 <alt_avalon_i2c_master_transmit_using_interrupts>
 401d0f4:	e0bffa15 	stw	r2,-24(fp)
 401d0f8:	00000806 	br	401d11c <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
 401d0fc:	00800044 	movi	r2,1
 401d100:	d8800015 	stw	r2,0(sp)
 401d104:	000f883a 	mov	r7,zero
 401d108:	e1bffe17 	ldw	r6,-8(fp)
 401d10c:	e17ffd17 	ldw	r5,-12(fp)
 401d110:	e13ffc17 	ldw	r4,-16(fp)
 401d114:	401d4780 	call	401d478 <alt_avalon_i2c_master_transmit>
 401d118:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401d11c:	e0bffa17 	ldw	r2,-24(fp)
 401d120:	10bffea0 	cmpeqi	r2,r2,-6
 401d124:	1000061e 	bne	r2,zero,401d140 <alt_avalon_i2c_master_tx+0xb4>
 401d128:	e0bffa17 	ldw	r2,-24(fp)
 401d12c:	10bffee0 	cmpeqi	r2,r2,-5
 401d130:	1000031e 	bne	r2,zero,401d140 <alt_avalon_i2c_master_tx+0xb4>
 401d134:	e0bffa17 	ldw	r2,-24(fp)
 401d138:	10bffe58 	cmpnei	r2,r2,-7
 401d13c:	1000061e 	bne	r2,zero,401d158 <alt_avalon_i2c_master_tx+0xcc>
 401d140:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
 401d144:	e0bffb17 	ldw	r2,-20(fp)
 401d148:	10ffffc4 	addi	r3,r2,-1
 401d14c:	e0fffb15 	stw	r3,-20(fp)
 401d150:	103fda1e 	bne	r2,zero,401d0bc <__alt_data_end+0xfc01d0bc>
 401d154:	00000106 	br	401d15c <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
 401d158:	0001883a 	nop
    }

    return status;
 401d15c:	e0bffa17 	ldw	r2,-24(fp)
}        
 401d160:	e037883a 	mov	sp,fp
 401d164:	dfc00117 	ldw	ra,4(sp)
 401d168:	df000017 	ldw	fp,0(sp)
 401d16c:	dec00204 	addi	sp,sp,8
 401d170:	f800283a 	ret

0401d174 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 401d174:	defff704 	addi	sp,sp,-36
 401d178:	dfc00815 	stw	ra,32(sp)
 401d17c:	df000715 	stw	fp,28(sp)
 401d180:	df000704 	addi	fp,sp,28
 401d184:	e13ffc15 	stw	r4,-16(fp)
 401d188:	e17ffd15 	stw	r5,-12(fp)
 401d18c:	e1bffe15 	stw	r6,-8(fp)
 401d190:	3805883a 	mov	r2,r7
 401d194:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 401d198:	0089c404 	movi	r2,10000
 401d19c:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
 401d1a0:	e0bfff03 	ldbu	r2,-4(fp)
 401d1a4:	10003426 	beq	r2,zero,401d278 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
 401d1a8:	00001706 	br	401d208 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
 401d1ac:	e0bffb17 	ldw	r2,-20(fp)
 401d1b0:	108002a8 	cmpgeui	r2,r2,10
 401d1b4:	1000021e 	bne	r2,zero,401d1c0 <alt_avalon_i2c_master_rx+0x4c>
 401d1b8:	0109c404 	movi	r4,10000
 401d1bc:	401ee140 	call	401ee14 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 401d1c0:	00800044 	movi	r2,1
 401d1c4:	d8800015 	stw	r2,0(sp)
 401d1c8:	000f883a 	mov	r7,zero
 401d1cc:	e1bffe17 	ldw	r6,-8(fp)
 401d1d0:	e17ffd17 	ldw	r5,-12(fp)
 401d1d4:	e13ffc17 	ldw	r4,-16(fp)
 401d1d8:	401da540 	call	401da54 <alt_avalon_i2c_master_receive_using_interrupts>
 401d1dc:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401d1e0:	e0bffa17 	ldw	r2,-24(fp)
 401d1e4:	10bffea0 	cmpeqi	r2,r2,-6
 401d1e8:	1000061e 	bne	r2,zero,401d204 <alt_avalon_i2c_master_rx+0x90>
 401d1ec:	e0bffa17 	ldw	r2,-24(fp)
 401d1f0:	10bffee0 	cmpeqi	r2,r2,-5
 401d1f4:	1000031e 	bne	r2,zero,401d204 <alt_avalon_i2c_master_rx+0x90>
 401d1f8:	e0bffa17 	ldw	r2,-24(fp)
 401d1fc:	10bffe58 	cmpnei	r2,r2,-7
 401d200:	1000221e 	bne	r2,zero,401d28c <alt_avalon_i2c_master_rx+0x118>
 401d204:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
 401d208:	e0bffb17 	ldw	r2,-20(fp)
 401d20c:	10ffffc4 	addi	r3,r2,-1
 401d210:	e0fffb15 	stw	r3,-20(fp)
 401d214:	103fe51e 	bne	r2,zero,401d1ac <__alt_data_end+0xfc01d1ac>
 401d218:	00001f06 	br	401d298 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 401d21c:	e0bffb17 	ldw	r2,-20(fp)
 401d220:	108002a8 	cmpgeui	r2,r2,10
 401d224:	1000021e 	bne	r2,zero,401d230 <alt_avalon_i2c_master_rx+0xbc>
 401d228:	0109c404 	movi	r4,10000
 401d22c:	401ee140 	call	401ee14 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 401d230:	00800044 	movi	r2,1
 401d234:	d8800015 	stw	r2,0(sp)
 401d238:	000f883a 	mov	r7,zero
 401d23c:	e1bffe17 	ldw	r6,-8(fp)
 401d240:	e17ffd17 	ldw	r5,-12(fp)
 401d244:	e13ffc17 	ldw	r4,-16(fp)
 401d248:	401d8440 	call	401d844 <alt_avalon_i2c_master_receive>
 401d24c:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401d250:	e0bffa17 	ldw	r2,-24(fp)
 401d254:	10bffea0 	cmpeqi	r2,r2,-6
 401d258:	1000061e 	bne	r2,zero,401d274 <alt_avalon_i2c_master_rx+0x100>
 401d25c:	e0bffa17 	ldw	r2,-24(fp)
 401d260:	10bffee0 	cmpeqi	r2,r2,-5
 401d264:	1000031e 	bne	r2,zero,401d274 <alt_avalon_i2c_master_rx+0x100>
 401d268:	e0bffa17 	ldw	r2,-24(fp)
 401d26c:	10bffe58 	cmpnei	r2,r2,-7
 401d270:	1000081e 	bne	r2,zero,401d294 <alt_avalon_i2c_master_rx+0x120>
 401d274:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
 401d278:	e0bffb17 	ldw	r2,-20(fp)
 401d27c:	10ffffc4 	addi	r3,r2,-1
 401d280:	e0fffb15 	stw	r3,-20(fp)
 401d284:	103fe51e 	bne	r2,zero,401d21c <__alt_data_end+0xfc01d21c>
 401d288:	00000306 	br	401d298 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 401d28c:	0001883a 	nop
 401d290:	00000106 	br	401d298 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 401d294:	0001883a 	nop
      }
    }
    
    return status;
 401d298:	e0bffa17 	ldw	r2,-24(fp)
}        
 401d29c:	e037883a 	mov	sp,fp
 401d2a0:	dfc00117 	ldw	ra,4(sp)
 401d2a4:	df000017 	ldw	fp,0(sp)
 401d2a8:	dec00204 	addi	sp,sp,8
 401d2ac:	f800283a 	ret

0401d2b0 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
 401d2b0:	defff604 	addi	sp,sp,-40
 401d2b4:	dfc00915 	stw	ra,36(sp)
 401d2b8:	df000815 	stw	fp,32(sp)
 401d2bc:	df000804 	addi	fp,sp,32
 401d2c0:	e13ffb15 	stw	r4,-20(fp)
 401d2c4:	e17ffc15 	stw	r5,-16(fp)
 401d2c8:	e1bffd15 	stw	r6,-12(fp)
 401d2cc:	e1fffe15 	stw	r7,-8(fp)
 401d2d0:	e0800317 	ldw	r2,12(fp)
 401d2d4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 401d2d8:	0089c404 	movi	r2,10000
 401d2dc:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
 401d2e0:	e0bfff03 	ldbu	r2,-4(fp)
 401d2e4:	10005626 	beq	r2,zero,401d440 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
 401d2e8:	00002806 	br	401d38c <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
 401d2ec:	e0bffa17 	ldw	r2,-24(fp)
 401d2f0:	108002a8 	cmpgeui	r2,r2,10
 401d2f4:	1000021e 	bne	r2,zero,401d300 <alt_avalon_i2c_master_tx_rx+0x50>
 401d2f8:	0109c404 	movi	r4,10000
 401d2fc:	401ee140 	call	401ee14 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 401d300:	d8000015 	stw	zero,0(sp)
 401d304:	000f883a 	mov	r7,zero
 401d308:	e1bffd17 	ldw	r6,-12(fp)
 401d30c:	e17ffc17 	ldw	r5,-16(fp)
 401d310:	e13ffb17 	ldw	r4,-20(fp)
 401d314:	401d6380 	call	401d638 <alt_avalon_i2c_master_transmit_using_interrupts>
 401d318:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401d31c:	e0bff917 	ldw	r2,-28(fp)
 401d320:	10bffea0 	cmpeqi	r2,r2,-6
 401d324:	1000191e 	bne	r2,zero,401d38c <alt_avalon_i2c_master_tx_rx+0xdc>
 401d328:	e0bff917 	ldw	r2,-28(fp)
 401d32c:	10bffee0 	cmpeqi	r2,r2,-5
 401d330:	1000161e 	bne	r2,zero,401d38c <alt_avalon_i2c_master_tx_rx+0xdc>
 401d334:	e0bff917 	ldw	r2,-28(fp)
 401d338:	10bffe58 	cmpnei	r2,r2,-7
 401d33c:	1000011e 	bne	r2,zero,401d344 <alt_avalon_i2c_master_tx_rx+0x94>
 401d340:	00001206 	br	401d38c <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 401d344:	00800044 	movi	r2,1
 401d348:	d8800015 	stw	r2,0(sp)
 401d34c:	01c00044 	movi	r7,1
 401d350:	e1800217 	ldw	r6,8(fp)
 401d354:	e17ffe17 	ldw	r5,-8(fp)
 401d358:	e13ffb17 	ldw	r4,-20(fp)
 401d35c:	401da540 	call	401da54 <alt_avalon_i2c_master_receive_using_interrupts>
 401d360:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401d364:	e0bff917 	ldw	r2,-28(fp)
 401d368:	10bffea0 	cmpeqi	r2,r2,-6
 401d36c:	1000061e 	bne	r2,zero,401d388 <alt_avalon_i2c_master_tx_rx+0xd8>
 401d370:	e0bff917 	ldw	r2,-28(fp)
 401d374:	10bffee0 	cmpeqi	r2,r2,-5
 401d378:	1000031e 	bne	r2,zero,401d388 <alt_avalon_i2c_master_tx_rx+0xd8>
 401d37c:	e0bff917 	ldw	r2,-28(fp)
 401d380:	10bffe58 	cmpnei	r2,r2,-7
 401d384:	1000331e 	bne	r2,zero,401d454 <alt_avalon_i2c_master_tx_rx+0x1a4>
 401d388:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
 401d38c:	e0bffa17 	ldw	r2,-24(fp)
 401d390:	10ffffc4 	addi	r3,r2,-1
 401d394:	e0fffa15 	stw	r3,-24(fp)
 401d398:	103fd41e 	bne	r2,zero,401d2ec <__alt_data_end+0xfc01d2ec>
 401d39c:	00003006 	br	401d460 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 401d3a0:	e0bffa17 	ldw	r2,-24(fp)
 401d3a4:	108002a8 	cmpgeui	r2,r2,10
 401d3a8:	1000021e 	bne	r2,zero,401d3b4 <alt_avalon_i2c_master_tx_rx+0x104>
 401d3ac:	0109c404 	movi	r4,10000
 401d3b0:	401ee140 	call	401ee14 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 401d3b4:	d8000015 	stw	zero,0(sp)
 401d3b8:	000f883a 	mov	r7,zero
 401d3bc:	e1bffd17 	ldw	r6,-12(fp)
 401d3c0:	e17ffc17 	ldw	r5,-16(fp)
 401d3c4:	e13ffb17 	ldw	r4,-20(fp)
 401d3c8:	401d4780 	call	401d478 <alt_avalon_i2c_master_transmit>
 401d3cc:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401d3d0:	e0bff917 	ldw	r2,-28(fp)
 401d3d4:	10bffea0 	cmpeqi	r2,r2,-6
 401d3d8:	1000191e 	bne	r2,zero,401d440 <alt_avalon_i2c_master_tx_rx+0x190>
 401d3dc:	e0bff917 	ldw	r2,-28(fp)
 401d3e0:	10bffee0 	cmpeqi	r2,r2,-5
 401d3e4:	1000161e 	bne	r2,zero,401d440 <alt_avalon_i2c_master_tx_rx+0x190>
 401d3e8:	e0bff917 	ldw	r2,-28(fp)
 401d3ec:	10bffe58 	cmpnei	r2,r2,-7
 401d3f0:	1000011e 	bne	r2,zero,401d3f8 <alt_avalon_i2c_master_tx_rx+0x148>
 401d3f4:	00001206 	br	401d440 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 401d3f8:	00800044 	movi	r2,1
 401d3fc:	d8800015 	stw	r2,0(sp)
 401d400:	01c00044 	movi	r7,1
 401d404:	e1800217 	ldw	r6,8(fp)
 401d408:	e17ffe17 	ldw	r5,-8(fp)
 401d40c:	e13ffb17 	ldw	r4,-20(fp)
 401d410:	401d8440 	call	401d844 <alt_avalon_i2c_master_receive>
 401d414:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 401d418:	e0bff917 	ldw	r2,-28(fp)
 401d41c:	10bffea0 	cmpeqi	r2,r2,-6
 401d420:	1000061e 	bne	r2,zero,401d43c <alt_avalon_i2c_master_tx_rx+0x18c>
 401d424:	e0bff917 	ldw	r2,-28(fp)
 401d428:	10bffee0 	cmpeqi	r2,r2,-5
 401d42c:	1000031e 	bne	r2,zero,401d43c <alt_avalon_i2c_master_tx_rx+0x18c>
 401d430:	e0bff917 	ldw	r2,-28(fp)
 401d434:	10bffe58 	cmpnei	r2,r2,-7
 401d438:	1000081e 	bne	r2,zero,401d45c <alt_avalon_i2c_master_tx_rx+0x1ac>
 401d43c:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
 401d440:	e0bffa17 	ldw	r2,-24(fp)
 401d444:	10ffffc4 	addi	r3,r2,-1
 401d448:	e0fffa15 	stw	r3,-24(fp)
 401d44c:	103fd41e 	bne	r2,zero,401d3a0 <__alt_data_end+0xfc01d3a0>
 401d450:	00000306 	br	401d460 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 401d454:	0001883a 	nop
 401d458:	00000106 	br	401d460 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 401d45c:	0001883a 	nop
      }
    }
    
    return status;
 401d460:	e0bff917 	ldw	r2,-28(fp)
}                                       
 401d464:	e037883a 	mov	sp,fp
 401d468:	dfc00117 	ldw	ra,4(sp)
 401d46c:	df000017 	ldw	fp,0(sp)
 401d470:	dec00204 	addi	sp,sp,8
 401d474:	f800283a 	ret

0401d478 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 401d478:	defff704 	addi	sp,sp,-36
 401d47c:	dfc00815 	stw	ra,32(sp)
 401d480:	df000715 	stw	fp,28(sp)
 401d484:	df000704 	addi	fp,sp,28
 401d488:	e13ffb15 	stw	r4,-20(fp)
 401d48c:	e17ffc15 	stw	r5,-16(fp)
 401d490:	e1bffd15 	stw	r6,-12(fp)
 401d494:	3807883a 	mov	r3,r7
 401d498:	e0800217 	ldw	r2,8(fp)
 401d49c:	e0fffe05 	stb	r3,-8(fp)
 401d4a0:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401d4a4:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
 401d4a8:	0149c404 	movi	r5,10000
 401d4ac:	e13ffd17 	ldw	r4,-12(fp)
 401d4b0:	400d3680 	call	400d368 <__mulsi3>
 401d4b4:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
 401d4b8:	e0bffd17 	ldw	r2,-12(fp)
 401d4bc:	1000021e 	bne	r2,zero,401d4c8 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 401d4c0:	0005883a 	mov	r2,zero
 401d4c4:	00005706 	br	401d624 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 401d4c8:	e0bffe03 	ldbu	r2,-8(fp)
 401d4cc:	10000a1e 	bne	r2,zero,401d4f8 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 401d4d0:	e13ffb17 	ldw	r4,-20(fp)
 401d4d4:	401c6f40 	call	401c6f4 <alt_avalon_i2c_enable>
 401d4d8:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 401d4dc:	e0bffa17 	ldw	r2,-24(fp)
 401d4e0:	10000226 	beq	r2,zero,401d4ec <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
 401d4e4:	e0bffa17 	ldw	r2,-24(fp)
 401d4e8:	00004e06 	br	401d624 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401d4ec:	01400704 	movi	r5,28
 401d4f0:	e13ffb17 	ldw	r4,-20(fp)
 401d4f4:	401dce00 	call	401dce0 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 401d4f8:	e0bffe03 	ldbu	r2,-8(fp)
 401d4fc:	100d883a 	mov	r6,r2
 401d500:	000b883a 	mov	r5,zero
 401d504:	e13ffb17 	ldw	r4,-20(fp)
 401d508:	401cd5c0 	call	401cd5c <alt_avalon_i2c_send_address>
 401d50c:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
 401d510:	e0bffa17 	ldw	r2,-24(fp)
 401d514:	1000271e 	bne	r2,zero,401d5b4 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 401d518:	00000f06 	br	401d558 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 401d51c:	e0bffc17 	ldw	r2,-16(fp)
 401d520:	10800003 	ldbu	r2,0(r2)
 401d524:	10803fcc 	andi	r2,r2,255
 401d528:	000f883a 	mov	r7,zero
 401d52c:	000d883a 	mov	r6,zero
 401d530:	100b883a 	mov	r5,r2
 401d534:	e13ffb17 	ldw	r4,-20(fp)
 401d538:	401cc780 	call	401cc78 <alt_avalon_i2c_cmd_write>
 401d53c:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
 401d540:	e0bffc17 	ldw	r2,-16(fp)
 401d544:	10800044 	addi	r2,r2,1
 401d548:	e0bffc15 	stw	r2,-16(fp)
            --size;
 401d54c:	e0bffd17 	ldw	r2,-12(fp)
 401d550:	10bfffc4 	addi	r2,r2,-1
 401d554:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 401d558:	e0bffd17 	ldw	r2,-12(fp)
 401d55c:	108000b0 	cmpltui	r2,r2,2
 401d560:	1000021e 	bne	r2,zero,401d56c <alt_avalon_i2c_master_transmit+0xf4>
 401d564:	e0bffa17 	ldw	r2,-24(fp)
 401d568:	103fec26 	beq	r2,zero,401d51c <__alt_data_end+0xfc01d51c>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 401d56c:	e0bffa17 	ldw	r2,-24(fp)
 401d570:	1000101e 	bne	r2,zero,401d5b4 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 401d574:	e0bffc17 	ldw	r2,-16(fp)
 401d578:	10800003 	ldbu	r2,0(r2)
 401d57c:	10803fcc 	andi	r2,r2,255
 401d580:	e0ffff03 	ldbu	r3,-4(fp)
 401d584:	180f883a 	mov	r7,r3
 401d588:	000d883a 	mov	r6,zero
 401d58c:	100b883a 	mov	r5,r2
 401d590:	e13ffb17 	ldw	r4,-20(fp)
 401d594:	401cc780 	call	401cc78 <alt_avalon_i2c_cmd_write>
 401d598:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
 401d59c:	e0bffc17 	ldw	r2,-16(fp)
 401d5a0:	10800044 	addi	r2,r2,1
 401d5a4:	e0bffc15 	stw	r2,-16(fp)
            --size;
 401d5a8:	e0bffd17 	ldw	r2,-12(fp)
 401d5ac:	10bfffc4 	addi	r2,r2,-1
 401d5b0:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 401d5b4:	e0bfff03 	ldbu	r2,-4(fp)
 401d5b8:	1000101e 	bne	r2,zero,401d5fc <alt_avalon_i2c_master_transmit+0x184>
 401d5bc:	e0bffa17 	ldw	r2,-24(fp)
 401d5c0:	10001726 	beq	r2,zero,401d620 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 401d5c4:	00000d06 	br	401d5fc <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
 401d5c8:	e0bff917 	ldw	r2,-28(fp)
 401d5cc:	108002a8 	cmpgeui	r2,r2,10
 401d5d0:	1000021e 	bne	r2,zero,401d5dc <alt_avalon_i2c_master_transmit+0x164>
 401d5d4:	0109c404 	movi	r4,10000
 401d5d8:	401ee140 	call	401ee14 <alt_busy_sleep>
            if (--timeout == 0)
 401d5dc:	e0bff917 	ldw	r2,-28(fp)
 401d5e0:	10bfffc4 	addi	r2,r2,-1
 401d5e4:	e0bff915 	stw	r2,-28(fp)
 401d5e8:	e0bff917 	ldw	r2,-28(fp)
 401d5ec:	1000031e 	bne	r2,zero,401d5fc <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 401d5f0:	00bfff84 	movi	r2,-2
 401d5f4:	e0bffa15 	stw	r2,-24(fp)
               break;
 401d5f8:	00000306 	br	401d608 <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 401d5fc:	e13ffb17 	ldw	r4,-20(fp)
 401d600:	401cae40 	call	401cae4 <alt_avalon_i2c_is_busy>
 401d604:	103ff01e 	bne	r2,zero,401d5c8 <__alt_data_end+0xfc01d5c8>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
 401d608:	e0bffa04 	addi	r2,fp,-24
 401d60c:	100b883a 	mov	r5,r2
 401d610:	e13ffb17 	ldw	r4,-20(fp)
 401d614:	401ceb80 	call	401ceb8 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 401d618:	e13ffb17 	ldw	r4,-20(fp)
 401d61c:	401c78c0 	call	401c78c <alt_avalon_i2c_disable>
    }


    return status;
 401d620:	e0bffa17 	ldw	r2,-24(fp)
}
 401d624:	e037883a 	mov	sp,fp
 401d628:	dfc00117 	ldw	ra,4(sp)
 401d62c:	df000017 	ldw	fp,0(sp)
 401d630:	dec00204 	addi	sp,sp,8
 401d634:	f800283a 	ret

0401d638 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 401d638:	defff604 	addi	sp,sp,-40
 401d63c:	dfc00915 	stw	ra,36(sp)
 401d640:	df000815 	stw	fp,32(sp)
 401d644:	df000804 	addi	fp,sp,32
 401d648:	e13ffb15 	stw	r4,-20(fp)
 401d64c:	e17ffc15 	stw	r5,-16(fp)
 401d650:	e1bffd15 	stw	r6,-12(fp)
 401d654:	3807883a 	mov	r3,r7
 401d658:	e0800217 	ldw	r2,8(fp)
 401d65c:	e0fffe05 	stb	r3,-8(fp)
 401d660:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401d664:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
 401d668:	0149c404 	movi	r5,10000
 401d66c:	e13ffd17 	ldw	r4,-12(fp)
 401d670:	400d3680 	call	400d368 <__mulsi3>
 401d674:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 401d678:	e0bffb17 	ldw	r2,-20(fp)
 401d67c:	10800717 	ldw	r2,28(r2)
 401d680:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
 401d684:	e0bffd17 	ldw	r2,-12(fp)
 401d688:	1000021e 	bne	r2,zero,401d694 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
 401d68c:	0005883a 	mov	r2,zero
 401d690:	00006706 	br	401d830 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 401d694:	e0bffb17 	ldw	r2,-20(fp)
 401d698:	10c00617 	ldw	r3,24(r2)
 401d69c:	008100b4 	movhi	r2,1026
 401d6a0:	10b0de04 	addi	r2,r2,-15496
 401d6a4:	18800226 	beq	r3,r2,401d6b0 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 401d6a8:	00bfff44 	movi	r2,-3
 401d6ac:	00006006 	br	401d830 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 401d6b0:	e0bffe03 	ldbu	r2,-8(fp)
 401d6b4:	10000a1e 	bne	r2,zero,401d6e0 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 401d6b8:	e13ffb17 	ldw	r4,-20(fp)
 401d6bc:	401c6f40 	call	401c6f4 <alt_avalon_i2c_enable>
 401d6c0:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 401d6c4:	e0bff817 	ldw	r2,-32(fp)
 401d6c8:	10000226 	beq	r2,zero,401d6d4 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
 401d6cc:	e0bff817 	ldw	r2,-32(fp)
 401d6d0:	00005706 	br	401d830 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401d6d4:	01400704 	movi	r5,28
 401d6d8:	e13ffb17 	ldw	r4,-20(fp)
 401d6dc:	401dce00 	call	401dce0 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 401d6e0:	e0bffe03 	ldbu	r2,-8(fp)
 401d6e4:	100d883a 	mov	r6,r2
 401d6e8:	000b883a 	mov	r5,zero
 401d6ec:	e13ffb17 	ldw	r4,-20(fp)
 401d6f0:	401cd5c0 	call	401cd5c <alt_avalon_i2c_send_address>
 401d6f4:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
 401d6f8:	e0bff817 	ldw	r2,-32(fp)
 401d6fc:	1000271e 	bne	r2,zero,401d79c <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 401d700:	00000f06 	br	401d740 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 401d704:	e0bffc17 	ldw	r2,-16(fp)
 401d708:	10800003 	ldbu	r2,0(r2)
 401d70c:	10803fcc 	andi	r2,r2,255
 401d710:	000f883a 	mov	r7,zero
 401d714:	000d883a 	mov	r6,zero
 401d718:	100b883a 	mov	r5,r2
 401d71c:	e13ffb17 	ldw	r4,-20(fp)
 401d720:	401cc780 	call	401cc78 <alt_avalon_i2c_cmd_write>
 401d724:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
 401d728:	e0bffc17 	ldw	r2,-16(fp)
 401d72c:	10800044 	addi	r2,r2,1
 401d730:	e0bffc15 	stw	r2,-16(fp)
            --size;
 401d734:	e0bffd17 	ldw	r2,-12(fp)
 401d738:	10bfffc4 	addi	r2,r2,-1
 401d73c:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 401d740:	e0bffd17 	ldw	r2,-12(fp)
 401d744:	108000b0 	cmpltui	r2,r2,2
 401d748:	1000021e 	bne	r2,zero,401d754 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
 401d74c:	e0bff817 	ldw	r2,-32(fp)
 401d750:	103fec26 	beq	r2,zero,401d704 <__alt_data_end+0xfc01d704>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 401d754:	e0bff817 	ldw	r2,-32(fp)
 401d758:	1000101e 	bne	r2,zero,401d79c <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 401d75c:	e0bffc17 	ldw	r2,-16(fp)
 401d760:	10800003 	ldbu	r2,0(r2)
 401d764:	10803fcc 	andi	r2,r2,255
 401d768:	e0ffff03 	ldbu	r3,-4(fp)
 401d76c:	180f883a 	mov	r7,r3
 401d770:	000d883a 	mov	r6,zero
 401d774:	100b883a 	mov	r5,r2
 401d778:	e13ffb17 	ldw	r4,-20(fp)
 401d77c:	401cc780 	call	401cc78 <alt_avalon_i2c_cmd_write>
 401d780:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
 401d784:	e0bffc17 	ldw	r2,-16(fp)
 401d788:	10800044 	addi	r2,r2,1
 401d78c:	e0bffc15 	stw	r2,-16(fp)
            --size;
 401d790:	e0bffd17 	ldw	r2,-12(fp)
 401d794:	10bfffc4 	addi	r2,r2,-1
 401d798:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 401d79c:	e0bff817 	ldw	r2,-32(fp)
 401d7a0:	10001426 	beq	r2,zero,401d7f4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 401d7a4:	00000d06 	br	401d7dc <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
 401d7a8:	e0bff917 	ldw	r2,-28(fp)
 401d7ac:	108002a8 	cmpgeui	r2,r2,10
 401d7b0:	1000021e 	bne	r2,zero,401d7bc <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
 401d7b4:	0109c404 	movi	r4,10000
 401d7b8:	401ee140 	call	401ee14 <alt_busy_sleep>
            if (--timeout == 0)
 401d7bc:	e0bff917 	ldw	r2,-28(fp)
 401d7c0:	10bfffc4 	addi	r2,r2,-1
 401d7c4:	e0bff915 	stw	r2,-28(fp)
 401d7c8:	e0bff917 	ldw	r2,-28(fp)
 401d7cc:	1000031e 	bne	r2,zero,401d7dc <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 401d7d0:	00bfff84 	movi	r2,-2
 401d7d4:	e0bff815 	stw	r2,-32(fp)
               break;
 401d7d8:	00000306 	br	401d7e8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 401d7dc:	e13ffb17 	ldw	r4,-20(fp)
 401d7e0:	401cae40 	call	401cae4 <alt_avalon_i2c_is_busy>
 401d7e4:	103ff01e 	bne	r2,zero,401d7a8 <__alt_data_end+0xfc01d7a8>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 401d7e8:	e13ffb17 	ldw	r4,-20(fp)
 401d7ec:	401c78c0 	call	401c78c <alt_avalon_i2c_disable>
 401d7f0:	00000e06 	br	401d82c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
 401d7f4:	e0bfff03 	ldbu	r2,-4(fp)
 401d7f8:	10000c26 	beq	r2,zero,401d82c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401d7fc:	01400704 	movi	r5,28
 401d800:	e13ffb17 	ldw	r4,-20(fp)
 401d804:	401dce00 	call	401dce0 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
 401d808:	000b883a 	mov	r5,zero
 401d80c:	e13ffb17 	ldw	r4,-20(fp)
 401d810:	401df280 	call	401df28 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
 401d814:	e0bffa17 	ldw	r2,-24(fp)
 401d818:	00c00044 	movi	r3,1
 401d81c:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
 401d820:	01400044 	movi	r5,1
 401d824:	e13ffb17 	ldw	r4,-20(fp)
 401d828:	401dd840 	call	401dd84 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
 401d82c:	e0bff817 	ldw	r2,-32(fp)
}
 401d830:	e037883a 	mov	sp,fp
 401d834:	dfc00117 	ldw	ra,4(sp)
 401d838:	df000017 	ldw	fp,0(sp)
 401d83c:	dec00204 	addi	sp,sp,8
 401d840:	f800283a 	ret

0401d844 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 401d844:	defff404 	addi	sp,sp,-48
 401d848:	dfc00b15 	stw	ra,44(sp)
 401d84c:	df000a15 	stw	fp,40(sp)
 401d850:	df000a04 	addi	fp,sp,40
 401d854:	e13ffb15 	stw	r4,-20(fp)
 401d858:	e17ffc15 	stw	r5,-16(fp)
 401d85c:	e1bffd15 	stw	r6,-12(fp)
 401d860:	3807883a 	mov	r3,r7
 401d864:	e0800217 	ldw	r2,8(fp)
 401d868:	e0fffe05 	stb	r3,-8(fp)
 401d86c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401d870:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
 401d874:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
 401d878:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
 401d87c:	e0bffd17 	ldw	r2,-12(fp)
 401d880:	1000021e 	bne	r2,zero,401d88c <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
 401d884:	0005883a 	mov	r2,zero
 401d888:	00006d06 	br	401da40 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 401d88c:	e0bffe03 	ldbu	r2,-8(fp)
 401d890:	10000a1e 	bne	r2,zero,401d8bc <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 401d894:	e13ffb17 	ldw	r4,-20(fp)
 401d898:	401c6f40 	call	401c6f4 <alt_avalon_i2c_enable>
 401d89c:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 401d8a0:	e0bff917 	ldw	r2,-28(fp)
 401d8a4:	10000226 	beq	r2,zero,401d8b0 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
 401d8a8:	e0bff917 	ldw	r2,-28(fp)
 401d8ac:	00006406 	br	401da40 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401d8b0:	01400704 	movi	r5,28
 401d8b4:	e13ffb17 	ldw	r4,-20(fp)
 401d8b8:	401dce00 	call	401dce0 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 401d8bc:	e0bffe03 	ldbu	r2,-8(fp)
 401d8c0:	100d883a 	mov	r6,r2
 401d8c4:	01400044 	movi	r5,1
 401d8c8:	e13ffb17 	ldw	r4,-20(fp)
 401d8cc:	401cd5c0 	call	401cd5c <alt_avalon_i2c_send_address>
 401d8d0:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 401d8d4:	e0bff917 	ldw	r2,-28(fp)
 401d8d8:	1000341e 	bne	r2,zero,401d9ac <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 401d8dc:	00001906 	br	401d944 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 401d8e0:	000f883a 	mov	r7,zero
 401d8e4:	000d883a 	mov	r6,zero
 401d8e8:	000b883a 	mov	r5,zero
 401d8ec:	e13ffb17 	ldw	r4,-20(fp)
 401d8f0:	401cc780 	call	401cc78 <alt_avalon_i2c_cmd_write>
 401d8f4:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
 401d8f8:	e0bff817 	ldw	r2,-32(fp)
 401d8fc:	10800044 	addi	r2,r2,1
 401d900:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
 401d904:	e0bff917 	ldw	r2,-28(fp)
 401d908:	10000e1e 	bne	r2,zero,401d944 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
 401d90c:	e0bffa04 	addi	r2,fp,-24
 401d910:	100f883a 	mov	r7,r2
 401d914:	000d883a 	mov	r6,zero
 401d918:	e17ffc17 	ldw	r5,-16(fp)
 401d91c:	e13ffb17 	ldw	r4,-20(fp)
 401d920:	401cb280 	call	401cb28 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
 401d924:	e0bffa17 	ldw	r2,-24(fp)
 401d928:	e0fffc17 	ldw	r3,-16(fp)
 401d92c:	1885883a 	add	r2,r3,r2
 401d930:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
 401d934:	e0bffa17 	ldw	r2,-24(fp)
 401d938:	e0fff717 	ldw	r3,-36(fp)
 401d93c:	1885883a 	add	r2,r3,r2
 401d940:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 401d944:	e0bffd17 	ldw	r2,-12(fp)
 401d948:	10bfffc4 	addi	r2,r2,-1
 401d94c:	e0fff817 	ldw	r3,-32(fp)
 401d950:	1880022e 	bgeu	r3,r2,401d95c <alt_avalon_i2c_master_receive+0x118>
 401d954:	e0bff917 	ldw	r2,-28(fp)
 401d958:	103fe126 	beq	r2,zero,401d8e0 <__alt_data_end+0xfc01d8e0>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 401d95c:	e0bff917 	ldw	r2,-28(fp)
 401d960:	1000121e 	bne	r2,zero,401d9ac <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 401d964:	e0bfff03 	ldbu	r2,-4(fp)
 401d968:	100f883a 	mov	r7,r2
 401d96c:	000d883a 	mov	r6,zero
 401d970:	000b883a 	mov	r5,zero
 401d974:	e13ffb17 	ldw	r4,-20(fp)
 401d978:	401cc780 	call	401cc78 <alt_avalon_i2c_cmd_write>
 401d97c:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 401d980:	00000a06 	br	401d9ac <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
 401d984:	e17ffc17 	ldw	r5,-16(fp)
 401d988:	e13ffb17 	ldw	r4,-20(fp)
 401d98c:	401cbd00 	call	401cbd0 <alt_avalon_i2c_rx_read>
 401d990:	e0bff915 	stw	r2,-28(fp)
        buffer++;
 401d994:	e0bffc17 	ldw	r2,-16(fp)
 401d998:	10800044 	addi	r2,r2,1
 401d99c:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
 401d9a0:	e0bff717 	ldw	r2,-36(fp)
 401d9a4:	10800044 	addi	r2,r2,1
 401d9a8:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 401d9ac:	e0fff717 	ldw	r3,-36(fp)
 401d9b0:	e0bffd17 	ldw	r2,-12(fp)
 401d9b4:	1880022e 	bgeu	r3,r2,401d9c0 <alt_avalon_i2c_master_receive+0x17c>
 401d9b8:	e0bff917 	ldw	r2,-28(fp)
 401d9bc:	103ff126 	beq	r2,zero,401d984 <__alt_data_end+0xfc01d984>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 401d9c0:	e0bfff03 	ldbu	r2,-4(fp)
 401d9c4:	1000021e 	bne	r2,zero,401d9d0 <alt_avalon_i2c_master_receive+0x18c>
 401d9c8:	e0bff917 	ldw	r2,-28(fp)
 401d9cc:	10001b26 	beq	r2,zero,401da3c <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
 401d9d0:	0149c404 	movi	r5,10000
 401d9d4:	e13ffd17 	ldw	r4,-12(fp)
 401d9d8:	400d3680 	call	400d368 <__mulsi3>
 401d9dc:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401d9e0:	00000d06 	br	401da18 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
 401d9e4:	e0bff617 	ldw	r2,-40(fp)
 401d9e8:	108002a8 	cmpgeui	r2,r2,10
 401d9ec:	1000021e 	bne	r2,zero,401d9f8 <alt_avalon_i2c_master_receive+0x1b4>
 401d9f0:	0109c404 	movi	r4,10000
 401d9f4:	401ee140 	call	401ee14 <alt_busy_sleep>
            if (--timeout == 0)
 401d9f8:	e0bff617 	ldw	r2,-40(fp)
 401d9fc:	10bfffc4 	addi	r2,r2,-1
 401da00:	e0bff615 	stw	r2,-40(fp)
 401da04:	e0bff617 	ldw	r2,-40(fp)
 401da08:	1000031e 	bne	r2,zero,401da18 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 401da0c:	00bfff84 	movi	r2,-2
 401da10:	e0bff915 	stw	r2,-28(fp)
               break;
 401da14:	00000306 	br	401da24 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401da18:	e13ffb17 	ldw	r4,-20(fp)
 401da1c:	401cae40 	call	401cae4 <alt_avalon_i2c_is_busy>
 401da20:	103ff01e 	bne	r2,zero,401d9e4 <__alt_data_end+0xfc01d9e4>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
 401da24:	e0bff904 	addi	r2,fp,-28
 401da28:	100b883a 	mov	r5,r2
 401da2c:	e13ffb17 	ldw	r4,-20(fp)
 401da30:	401ceb80 	call	401ceb8 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 401da34:	e13ffb17 	ldw	r4,-20(fp)
 401da38:	401c78c0 	call	401c78c <alt_avalon_i2c_disable>
    }

    return status;
 401da3c:	e0bff917 	ldw	r2,-28(fp)
}
 401da40:	e037883a 	mov	sp,fp
 401da44:	dfc00117 	ldw	ra,4(sp)
 401da48:	df000017 	ldw	fp,0(sp)
 401da4c:	dec00204 	addi	sp,sp,8
 401da50:	f800283a 	ret

0401da54 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 401da54:	defff504 	addi	sp,sp,-44
 401da58:	dfc00a15 	stw	ra,40(sp)
 401da5c:	df000915 	stw	fp,36(sp)
 401da60:	df000904 	addi	fp,sp,36
 401da64:	e13ffb15 	stw	r4,-20(fp)
 401da68:	e17ffc15 	stw	r5,-16(fp)
 401da6c:	e1bffd15 	stw	r6,-12(fp)
 401da70:	3807883a 	mov	r3,r7
 401da74:	e0800217 	ldw	r2,8(fp)
 401da78:	e0fffe05 	stb	r3,-8(fp)
 401da7c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 401da80:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 401da84:	e0bffb17 	ldw	r2,-20(fp)
 401da88:	10800717 	ldw	r2,28(r2)
 401da8c:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
 401da90:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
 401da94:	e0bffd17 	ldw	r2,-12(fp)
 401da98:	1000021e 	bne	r2,zero,401daa4 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 401da9c:	0005883a 	mov	r2,zero
 401daa0:	00006306 	br	401dc30 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 401daa4:	e0bffb17 	ldw	r2,-20(fp)
 401daa8:	10c00617 	ldw	r3,24(r2)
 401daac:	008100b4 	movhi	r2,1026
 401dab0:	10b0de04 	addi	r2,r2,-15496
 401dab4:	18800226 	beq	r3,r2,401dac0 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 401dab8:	00bfff44 	movi	r2,-3
 401dabc:	00005c06 	br	401dc30 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 401dac0:	e0bffe03 	ldbu	r2,-8(fp)
 401dac4:	10000a1e 	bne	r2,zero,401daf0 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 401dac8:	e13ffb17 	ldw	r4,-20(fp)
 401dacc:	401c6f40 	call	401c6f4 <alt_avalon_i2c_enable>
 401dad0:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 401dad4:	e0bff717 	ldw	r2,-36(fp)
 401dad8:	10000226 	beq	r2,zero,401dae4 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
 401dadc:	e0bff717 	ldw	r2,-36(fp)
 401dae0:	00005306 	br	401dc30 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401dae4:	01400704 	movi	r5,28
 401dae8:	e13ffb17 	ldw	r4,-20(fp)
 401daec:	401dce00 	call	401dce0 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 401daf0:	e0bffe03 	ldbu	r2,-8(fp)
 401daf4:	100d883a 	mov	r6,r2
 401daf8:	01400044 	movi	r5,1
 401dafc:	e13ffb17 	ldw	r4,-20(fp)
 401db00:	401cd5c0 	call	401cd5c <alt_avalon_i2c_send_address>
 401db04:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 401db08:	e0bff717 	ldw	r2,-36(fp)
 401db0c:	1000191e 	bne	r2,zero,401db74 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 401db10:	00000906 	br	401db38 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 401db14:	000f883a 	mov	r7,zero
 401db18:	000d883a 	mov	r6,zero
 401db1c:	000b883a 	mov	r5,zero
 401db20:	e13ffb17 	ldw	r4,-20(fp)
 401db24:	401cc780 	call	401cc78 <alt_avalon_i2c_cmd_write>
 401db28:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
 401db2c:	e0bff917 	ldw	r2,-28(fp)
 401db30:	10800044 	addi	r2,r2,1
 401db34:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 401db38:	e0bffd17 	ldw	r2,-12(fp)
 401db3c:	10bfffc4 	addi	r2,r2,-1
 401db40:	e0fff917 	ldw	r3,-28(fp)
 401db44:	1880022e 	bgeu	r3,r2,401db50 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
 401db48:	e0bff717 	ldw	r2,-36(fp)
 401db4c:	103ff126 	beq	r2,zero,401db14 <__alt_data_end+0xfc01db14>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 401db50:	e0bff717 	ldw	r2,-36(fp)
 401db54:	1000071e 	bne	r2,zero,401db74 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 401db58:	e0bfff03 	ldbu	r2,-4(fp)
 401db5c:	100f883a 	mov	r7,r2
 401db60:	000d883a 	mov	r6,zero
 401db64:	000b883a 	mov	r5,zero
 401db68:	e13ffb17 	ldw	r4,-20(fp)
 401db6c:	401cc780 	call	401cc78 <alt_avalon_i2c_cmd_write>
 401db70:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 401db74:	e0bff717 	ldw	r2,-36(fp)
 401db78:	10001826 	beq	r2,zero,401dbdc <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
 401db7c:	0149c404 	movi	r5,10000
 401db80:	e13ffd17 	ldw	r4,-12(fp)
 401db84:	400d3680 	call	400d368 <__mulsi3>
 401db88:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401db8c:	00000d06 	br	401dbc4 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
 401db90:	e0bff817 	ldw	r2,-32(fp)
 401db94:	108002a8 	cmpgeui	r2,r2,10
 401db98:	1000021e 	bne	r2,zero,401dba4 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
 401db9c:	0109c404 	movi	r4,10000
 401dba0:	401ee140 	call	401ee14 <alt_busy_sleep>
            if (--timeout == 0)
 401dba4:	e0bff817 	ldw	r2,-32(fp)
 401dba8:	10bfffc4 	addi	r2,r2,-1
 401dbac:	e0bff815 	stw	r2,-32(fp)
 401dbb0:	e0bff817 	ldw	r2,-32(fp)
 401dbb4:	1000031e 	bne	r2,zero,401dbc4 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 401dbb8:	00bfff84 	movi	r2,-2
 401dbbc:	e0bff715 	stw	r2,-36(fp)
               break;
 401dbc0:	00000306 	br	401dbd0 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 401dbc4:	e13ffb17 	ldw	r4,-20(fp)
 401dbc8:	401cae40 	call	401cae4 <alt_avalon_i2c_is_busy>
 401dbcc:	103ff01e 	bne	r2,zero,401db90 <__alt_data_end+0xfc01db90>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 401dbd0:	e13ffb17 	ldw	r4,-20(fp)
 401dbd4:	401c78c0 	call	401c78c <alt_avalon_i2c_disable>
 401dbd8:	00001406 	br	401dc2c <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
 401dbdc:	e0bfff03 	ldbu	r2,-4(fp)
 401dbe0:	10001226 	beq	r2,zero,401dc2c <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 401dbe4:	01400704 	movi	r5,28
 401dbe8:	e13ffb17 	ldw	r4,-20(fp)
 401dbec:	401dce00 	call	401dce0 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
 401dbf0:	000b883a 	mov	r5,zero
 401dbf4:	e13ffb17 	ldw	r4,-20(fp)
 401dbf8:	401de780 	call	401de78 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
 401dbfc:	e0bffa17 	ldw	r2,-24(fp)
 401dc00:	00c00084 	movi	r3,2
 401dc04:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
 401dc08:	e0bffa17 	ldw	r2,-24(fp)
 401dc0c:	e0fffc17 	ldw	r3,-16(fp)
 401dc10:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
 401dc14:	e0bffa17 	ldw	r2,-24(fp)
 401dc18:	e0fffd17 	ldw	r3,-12(fp)
 401dc1c:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 401dc20:	01400084 	movi	r5,2
 401dc24:	e13ffb17 	ldw	r4,-20(fp)
 401dc28:	401dd840 	call	401dd84 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
 401dc2c:	e0bff717 	ldw	r2,-36(fp)
}
 401dc30:	e037883a 	mov	sp,fp
 401dc34:	dfc00117 	ldw	ra,4(sp)
 401dc38:	df000017 	ldw	fp,0(sp)
 401dc3c:	dec00204 	addi	sp,sp,8
 401dc40:	f800283a 	ret

0401dc44 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
 401dc44:	defffd04 	addi	sp,sp,-12
 401dc48:	df000215 	stw	fp,8(sp)
 401dc4c:	df000204 	addi	fp,sp,8
 401dc50:	e13ffe15 	stw	r4,-8(fp)
 401dc54:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
 401dc58:	e0bffe17 	ldw	r2,-8(fp)
 401dc5c:	10800317 	ldw	r2,12(r2)
 401dc60:	10800404 	addi	r2,r2,16
 401dc64:	10c00037 	ldwio	r3,0(r2)
 401dc68:	e0bffe17 	ldw	r2,-8(fp)
 401dc6c:	10800317 	ldw	r2,12(r2)
 401dc70:	10800304 	addi	r2,r2,12
 401dc74:	10800037 	ldwio	r2,0(r2)
 401dc78:	1884703a 	and	r2,r3,r2
 401dc7c:	1007883a 	mov	r3,r2
 401dc80:	e0bfff17 	ldw	r2,-4(fp)
 401dc84:	10c00015 	stw	r3,0(r2)
}
 401dc88:	0001883a 	nop
 401dc8c:	e037883a 	mov	sp,fp
 401dc90:	df000017 	ldw	fp,0(sp)
 401dc94:	dec00104 	addi	sp,sp,4
 401dc98:	f800283a 	ret

0401dc9c <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
 401dc9c:	defffd04 	addi	sp,sp,-12
 401dca0:	df000215 	stw	fp,8(sp)
 401dca4:	df000204 	addi	fp,sp,8
 401dca8:	e13ffe15 	stw	r4,-8(fp)
 401dcac:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
 401dcb0:	e0bffe17 	ldw	r2,-8(fp)
 401dcb4:	10800317 	ldw	r2,12(r2)
 401dcb8:	10800404 	addi	r2,r2,16
 401dcbc:	10800037 	ldwio	r2,0(r2)
 401dcc0:	1007883a 	mov	r3,r2
 401dcc4:	e0bfff17 	ldw	r2,-4(fp)
 401dcc8:	10c00015 	stw	r3,0(r2)
}
 401dccc:	0001883a 	nop
 401dcd0:	e037883a 	mov	sp,fp
 401dcd4:	df000017 	ldw	fp,0(sp)
 401dcd8:	dec00104 	addi	sp,sp,4
 401dcdc:	f800283a 	ret

0401dce0 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 401dce0:	defffd04 	addi	sp,sp,-12
 401dce4:	df000215 	stw	fp,8(sp)
 401dce8:	df000204 	addi	fp,sp,8
 401dcec:	e13ffe15 	stw	r4,-8(fp)
 401dcf0:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 401dcf4:	e0bffe17 	ldw	r2,-8(fp)
 401dcf8:	10800317 	ldw	r2,12(r2)
 401dcfc:	10800404 	addi	r2,r2,16
 401dd00:	e0ffff17 	ldw	r3,-4(fp)
 401dd04:	10c00035 	stwio	r3,0(r2)
}
 401dd08:	0001883a 	nop
 401dd0c:	e037883a 	mov	sp,fp
 401dd10:	df000017 	ldw	fp,0(sp)
 401dd14:	dec00104 	addi	sp,sp,4
 401dd18:	f800283a 	ret

0401dd1c <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 401dd1c:	defffb04 	addi	sp,sp,-20
 401dd20:	dfc00415 	stw	ra,16(sp)
 401dd24:	df000315 	stw	fp,12(sp)
 401dd28:	df000304 	addi	fp,sp,12
 401dd2c:	e13ffe15 	stw	r4,-8(fp)
 401dd30:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 401dd34:	e17ffd04 	addi	r5,fp,-12
 401dd38:	e13ffe17 	ldw	r4,-8(fp)
 401dd3c:	401dde80 	call	401dde8 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
 401dd40:	e0bfff17 	ldw	r2,-4(fp)
 401dd44:	0086303a 	nor	r3,zero,r2
 401dd48:	e0bffd17 	ldw	r2,-12(fp)
 401dd4c:	1884703a 	and	r2,r3,r2
 401dd50:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 401dd54:	e0bffe17 	ldw	r2,-8(fp)
 401dd58:	10800317 	ldw	r2,12(r2)
 401dd5c:	10800304 	addi	r2,r2,12
 401dd60:	e0fffd17 	ldw	r3,-12(fp)
 401dd64:	18c007cc 	andi	r3,r3,31
 401dd68:	10c00035 	stwio	r3,0(r2)
}
 401dd6c:	0001883a 	nop
 401dd70:	e037883a 	mov	sp,fp
 401dd74:	dfc00117 	ldw	ra,4(sp)
 401dd78:	df000017 	ldw	fp,0(sp)
 401dd7c:	dec00204 	addi	sp,sp,8
 401dd80:	f800283a 	ret

0401dd84 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 401dd84:	defffb04 	addi	sp,sp,-20
 401dd88:	dfc00415 	stw	ra,16(sp)
 401dd8c:	df000315 	stw	fp,12(sp)
 401dd90:	df000304 	addi	fp,sp,12
 401dd94:	e13ffe15 	stw	r4,-8(fp)
 401dd98:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 401dd9c:	e17ffd04 	addi	r5,fp,-12
 401dda0:	e13ffe17 	ldw	r4,-8(fp)
 401dda4:	401dde80 	call	401dde8 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
 401dda8:	e0fffd17 	ldw	r3,-12(fp)
 401ddac:	e0bfff17 	ldw	r2,-4(fp)
 401ddb0:	1884b03a 	or	r2,r3,r2
 401ddb4:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 401ddb8:	e0bffe17 	ldw	r2,-8(fp)
 401ddbc:	10800317 	ldw	r2,12(r2)
 401ddc0:	10800304 	addi	r2,r2,12
 401ddc4:	e0fffd17 	ldw	r3,-12(fp)
 401ddc8:	18c007cc 	andi	r3,r3,31
 401ddcc:	10c00035 	stwio	r3,0(r2)
}
 401ddd0:	0001883a 	nop
 401ddd4:	e037883a 	mov	sp,fp
 401ddd8:	dfc00117 	ldw	ra,4(sp)
 401dddc:	df000017 	ldw	fp,0(sp)
 401dde0:	dec00204 	addi	sp,sp,8
 401dde4:	f800283a 	ret

0401dde8 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
 401dde8:	defffd04 	addi	sp,sp,-12
 401ddec:	df000215 	stw	fp,8(sp)
 401ddf0:	df000204 	addi	fp,sp,8
 401ddf4:	e13ffe15 	stw	r4,-8(fp)
 401ddf8:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 401ddfc:	e0bffe17 	ldw	r2,-8(fp)
 401de00:	10800317 	ldw	r2,12(r2)
 401de04:	10800304 	addi	r2,r2,12
 401de08:	10800037 	ldwio	r2,0(r2)
 401de0c:	10c007cc 	andi	r3,r2,31
 401de10:	e0bfff17 	ldw	r2,-4(fp)
 401de14:	10c00015 	stw	r3,0(r2)
}
 401de18:	0001883a 	nop
 401de1c:	e037883a 	mov	sp,fp
 401de20:	df000017 	ldw	fp,0(sp)
 401de24:	dec00104 	addi	sp,sp,4
 401de28:	f800283a 	ret

0401de2c <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
 401de2c:	defffd04 	addi	sp,sp,-12
 401de30:	df000215 	stw	fp,8(sp)
 401de34:	df000204 	addi	fp,sp,8
 401de38:	e13ffe15 	stw	r4,-8(fp)
 401de3c:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
 401de40:	e0bffe17 	ldw	r2,-8(fp)
 401de44:	10800317 	ldw	r2,12(r2)
 401de48:	10800204 	addi	r2,r2,8
 401de4c:	10800037 	ldwio	r2,0(r2)
 401de50:	10800c0c 	andi	r2,r2,48
 401de54:	1005d13a 	srai	r2,r2,4
 401de58:	1007883a 	mov	r3,r2
 401de5c:	e0bfff17 	ldw	r2,-4(fp)
 401de60:	10c00015 	stw	r3,0(r2)
}
 401de64:	0001883a 	nop
 401de68:	e037883a 	mov	sp,fp
 401de6c:	df000017 	ldw	fp,0(sp)
 401de70:	dec00104 	addi	sp,sp,4
 401de74:	f800283a 	ret

0401de78 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
 401de78:	defffd04 	addi	sp,sp,-12
 401de7c:	df000215 	stw	fp,8(sp)
 401de80:	df000204 	addi	fp,sp,8
 401de84:	e13ffe15 	stw	r4,-8(fp)
 401de88:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
 401de8c:	e0bffe17 	ldw	r2,-8(fp)
 401de90:	10800317 	ldw	r2,12(r2)
 401de94:	10800204 	addi	r2,r2,8
 401de98:	e0fffe17 	ldw	r3,-8(fp)
 401de9c:	18c00317 	ldw	r3,12(r3)
 401dea0:	18c00204 	addi	r3,r3,8
 401dea4:	18c00037 	ldwio	r3,0(r3)
 401dea8:	1809883a 	mov	r4,r3
 401deac:	00fff3c4 	movi	r3,-49
 401deb0:	20c8703a 	and	r4,r4,r3
 401deb4:	e0ffff17 	ldw	r3,-4(fp)
 401deb8:	1806913a 	slli	r3,r3,4
 401debc:	18c00c0c 	andi	r3,r3,48
 401dec0:	20c6b03a 	or	r3,r4,r3
 401dec4:	10c00035 	stwio	r3,0(r2)
}
 401dec8:	0001883a 	nop
 401decc:	e037883a 	mov	sp,fp
 401ded0:	df000017 	ldw	fp,0(sp)
 401ded4:	dec00104 	addi	sp,sp,4
 401ded8:	f800283a 	ret

0401dedc <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
 401dedc:	defffd04 	addi	sp,sp,-12
 401dee0:	df000215 	stw	fp,8(sp)
 401dee4:	df000204 	addi	fp,sp,8
 401dee8:	e13ffe15 	stw	r4,-8(fp)
 401deec:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
 401def0:	e0bffe17 	ldw	r2,-8(fp)
 401def4:	10800317 	ldw	r2,12(r2)
 401def8:	10800204 	addi	r2,r2,8
 401defc:	10800037 	ldwio	r2,0(r2)
 401df00:	1080030c 	andi	r2,r2,12
 401df04:	1005d0ba 	srai	r2,r2,2
 401df08:	1007883a 	mov	r3,r2
 401df0c:	e0bfff17 	ldw	r2,-4(fp)
 401df10:	10c00015 	stw	r3,0(r2)
}
 401df14:	0001883a 	nop
 401df18:	e037883a 	mov	sp,fp
 401df1c:	df000017 	ldw	fp,0(sp)
 401df20:	dec00104 	addi	sp,sp,4
 401df24:	f800283a 	ret

0401df28 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
 401df28:	defffd04 	addi	sp,sp,-12
 401df2c:	df000215 	stw	fp,8(sp)
 401df30:	df000204 	addi	fp,sp,8
 401df34:	e13ffe15 	stw	r4,-8(fp)
 401df38:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
 401df3c:	e0bffe17 	ldw	r2,-8(fp)
 401df40:	10800317 	ldw	r2,12(r2)
 401df44:	10c00204 	addi	r3,r2,8
 401df48:	e0bffe17 	ldw	r2,-8(fp)
 401df4c:	10800317 	ldw	r2,12(r2)
 401df50:	10800204 	addi	r2,r2,8
 401df54:	10800037 	ldwio	r2,0(r2)
 401df58:	1009883a 	mov	r4,r2
 401df5c:	00bffcc4 	movi	r2,-13
 401df60:	2088703a 	and	r4,r4,r2
 401df64:	e0bfff17 	ldw	r2,-4(fp)
 401df68:	1085883a 	add	r2,r2,r2
 401df6c:	1085883a 	add	r2,r2,r2
 401df70:	1080030c 	andi	r2,r2,12
 401df74:	2084b03a 	or	r2,r4,r2
 401df78:	18800035 	stwio	r2,0(r3)
}
 401df7c:	0001883a 	nop
 401df80:	e037883a 	mov	sp,fp
 401df84:	df000017 	ldw	fp,0(sp)
 401df88:	dec00104 	addi	sp,sp,4
 401df8c:	f800283a 	ret

0401df90 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 401df90:	defffa04 	addi	sp,sp,-24
 401df94:	dfc00515 	stw	ra,20(sp)
 401df98:	df000415 	stw	fp,16(sp)
 401df9c:	df000404 	addi	fp,sp,16
 401dfa0:	e13ffd15 	stw	r4,-12(fp)
 401dfa4:	e17ffe15 	stw	r5,-8(fp)
 401dfa8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401dfac:	e0bffd17 	ldw	r2,-12(fp)
 401dfb0:	10800017 	ldw	r2,0(r2)
 401dfb4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 401dfb8:	e0bffc17 	ldw	r2,-16(fp)
 401dfbc:	10c00a04 	addi	r3,r2,40
 401dfc0:	e0bffd17 	ldw	r2,-12(fp)
 401dfc4:	10800217 	ldw	r2,8(r2)
 401dfc8:	100f883a 	mov	r7,r2
 401dfcc:	e1bfff17 	ldw	r6,-4(fp)
 401dfd0:	e17ffe17 	ldw	r5,-8(fp)
 401dfd4:	1809883a 	mov	r4,r3
 401dfd8:	401e5b80 	call	401e5b8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 401dfdc:	e037883a 	mov	sp,fp
 401dfe0:	dfc00117 	ldw	ra,4(sp)
 401dfe4:	df000017 	ldw	fp,0(sp)
 401dfe8:	dec00204 	addi	sp,sp,8
 401dfec:	f800283a 	ret

0401dff0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 401dff0:	defffa04 	addi	sp,sp,-24
 401dff4:	dfc00515 	stw	ra,20(sp)
 401dff8:	df000415 	stw	fp,16(sp)
 401dffc:	df000404 	addi	fp,sp,16
 401e000:	e13ffd15 	stw	r4,-12(fp)
 401e004:	e17ffe15 	stw	r5,-8(fp)
 401e008:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401e00c:	e0bffd17 	ldw	r2,-12(fp)
 401e010:	10800017 	ldw	r2,0(r2)
 401e014:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 401e018:	e0bffc17 	ldw	r2,-16(fp)
 401e01c:	10c00a04 	addi	r3,r2,40
 401e020:	e0bffd17 	ldw	r2,-12(fp)
 401e024:	10800217 	ldw	r2,8(r2)
 401e028:	100f883a 	mov	r7,r2
 401e02c:	e1bfff17 	ldw	r6,-4(fp)
 401e030:	e17ffe17 	ldw	r5,-8(fp)
 401e034:	1809883a 	mov	r4,r3
 401e038:	401e7d40 	call	401e7d4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 401e03c:	e037883a 	mov	sp,fp
 401e040:	dfc00117 	ldw	ra,4(sp)
 401e044:	df000017 	ldw	fp,0(sp)
 401e048:	dec00204 	addi	sp,sp,8
 401e04c:	f800283a 	ret

0401e050 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 401e050:	defffc04 	addi	sp,sp,-16
 401e054:	dfc00315 	stw	ra,12(sp)
 401e058:	df000215 	stw	fp,8(sp)
 401e05c:	df000204 	addi	fp,sp,8
 401e060:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401e064:	e0bfff17 	ldw	r2,-4(fp)
 401e068:	10800017 	ldw	r2,0(r2)
 401e06c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 401e070:	e0bffe17 	ldw	r2,-8(fp)
 401e074:	10c00a04 	addi	r3,r2,40
 401e078:	e0bfff17 	ldw	r2,-4(fp)
 401e07c:	10800217 	ldw	r2,8(r2)
 401e080:	100b883a 	mov	r5,r2
 401e084:	1809883a 	mov	r4,r3
 401e088:	401e4600 	call	401e460 <altera_avalon_jtag_uart_close>
}
 401e08c:	e037883a 	mov	sp,fp
 401e090:	dfc00117 	ldw	ra,4(sp)
 401e094:	df000017 	ldw	fp,0(sp)
 401e098:	dec00204 	addi	sp,sp,8
 401e09c:	f800283a 	ret

0401e0a0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 401e0a0:	defffa04 	addi	sp,sp,-24
 401e0a4:	dfc00515 	stw	ra,20(sp)
 401e0a8:	df000415 	stw	fp,16(sp)
 401e0ac:	df000404 	addi	fp,sp,16
 401e0b0:	e13ffd15 	stw	r4,-12(fp)
 401e0b4:	e17ffe15 	stw	r5,-8(fp)
 401e0b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 401e0bc:	e0bffd17 	ldw	r2,-12(fp)
 401e0c0:	10800017 	ldw	r2,0(r2)
 401e0c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 401e0c8:	e0bffc17 	ldw	r2,-16(fp)
 401e0cc:	10800a04 	addi	r2,r2,40
 401e0d0:	e1bfff17 	ldw	r6,-4(fp)
 401e0d4:	e17ffe17 	ldw	r5,-8(fp)
 401e0d8:	1009883a 	mov	r4,r2
 401e0dc:	401e4c80 	call	401e4c8 <altera_avalon_jtag_uart_ioctl>
}
 401e0e0:	e037883a 	mov	sp,fp
 401e0e4:	dfc00117 	ldw	ra,4(sp)
 401e0e8:	df000017 	ldw	fp,0(sp)
 401e0ec:	dec00204 	addi	sp,sp,8
 401e0f0:	f800283a 	ret

0401e0f4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 401e0f4:	defffa04 	addi	sp,sp,-24
 401e0f8:	dfc00515 	stw	ra,20(sp)
 401e0fc:	df000415 	stw	fp,16(sp)
 401e100:	df000404 	addi	fp,sp,16
 401e104:	e13ffd15 	stw	r4,-12(fp)
 401e108:	e17ffe15 	stw	r5,-8(fp)
 401e10c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401e110:	e0bffd17 	ldw	r2,-12(fp)
 401e114:	00c00044 	movi	r3,1
 401e118:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 401e11c:	e0bffd17 	ldw	r2,-12(fp)
 401e120:	10800017 	ldw	r2,0(r2)
 401e124:	10800104 	addi	r2,r2,4
 401e128:	1007883a 	mov	r3,r2
 401e12c:	e0bffd17 	ldw	r2,-12(fp)
 401e130:	10800817 	ldw	r2,32(r2)
 401e134:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 401e138:	e0bffe17 	ldw	r2,-8(fp)
 401e13c:	e0ffff17 	ldw	r3,-4(fp)
 401e140:	d8000015 	stw	zero,0(sp)
 401e144:	e1fffd17 	ldw	r7,-12(fp)
 401e148:	018100b4 	movhi	r6,1026
 401e14c:	31b86d04 	addi	r6,r6,-7756
 401e150:	180b883a 	mov	r5,r3
 401e154:	1009883a 	mov	r4,r2
 401e158:	401f1dc0 	call	401f1dc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 401e15c:	e0bffd17 	ldw	r2,-12(fp)
 401e160:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 401e164:	e0bffd17 	ldw	r2,-12(fp)
 401e168:	10800204 	addi	r2,r2,8
 401e16c:	d0f24717 	ldw	r3,-14052(gp)
 401e170:	e1fffd17 	ldw	r7,-12(fp)
 401e174:	018100b4 	movhi	r6,1026
 401e178:	31b8f004 	addi	r6,r6,-7232
 401e17c:	180b883a 	mov	r5,r3
 401e180:	1009883a 	mov	r4,r2
 401e184:	401ece80 	call	401ece8 <alt_alarm_start>
 401e188:	1000040e 	bge	r2,zero,401e19c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 401e18c:	e0fffd17 	ldw	r3,-12(fp)
 401e190:	00a00034 	movhi	r2,32768
 401e194:	10bfffc4 	addi	r2,r2,-1
 401e198:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 401e19c:	0001883a 	nop
 401e1a0:	e037883a 	mov	sp,fp
 401e1a4:	dfc00117 	ldw	ra,4(sp)
 401e1a8:	df000017 	ldw	fp,0(sp)
 401e1ac:	dec00204 	addi	sp,sp,8
 401e1b0:	f800283a 	ret

0401e1b4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 401e1b4:	defff804 	addi	sp,sp,-32
 401e1b8:	df000715 	stw	fp,28(sp)
 401e1bc:	df000704 	addi	fp,sp,28
 401e1c0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 401e1c4:	e0bfff17 	ldw	r2,-4(fp)
 401e1c8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 401e1cc:	e0bffb17 	ldw	r2,-20(fp)
 401e1d0:	10800017 	ldw	r2,0(r2)
 401e1d4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401e1d8:	e0bffc17 	ldw	r2,-16(fp)
 401e1dc:	10800104 	addi	r2,r2,4
 401e1e0:	10800037 	ldwio	r2,0(r2)
 401e1e4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 401e1e8:	e0bffd17 	ldw	r2,-12(fp)
 401e1ec:	1080c00c 	andi	r2,r2,768
 401e1f0:	10006d26 	beq	r2,zero,401e3a8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 401e1f4:	e0bffd17 	ldw	r2,-12(fp)
 401e1f8:	1080400c 	andi	r2,r2,256
 401e1fc:	10003526 	beq	r2,zero,401e2d4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 401e200:	00800074 	movhi	r2,1
 401e204:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401e208:	e0bffb17 	ldw	r2,-20(fp)
 401e20c:	10800a17 	ldw	r2,40(r2)
 401e210:	10800044 	addi	r2,r2,1
 401e214:	1081ffcc 	andi	r2,r2,2047
 401e218:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 401e21c:	e0bffb17 	ldw	r2,-20(fp)
 401e220:	10c00b17 	ldw	r3,44(r2)
 401e224:	e0bffe17 	ldw	r2,-8(fp)
 401e228:	18801526 	beq	r3,r2,401e280 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 401e22c:	e0bffc17 	ldw	r2,-16(fp)
 401e230:	10800037 	ldwio	r2,0(r2)
 401e234:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 401e238:	e0bff917 	ldw	r2,-28(fp)
 401e23c:	10a0000c 	andi	r2,r2,32768
 401e240:	10001126 	beq	r2,zero,401e288 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 401e244:	e0bffb17 	ldw	r2,-20(fp)
 401e248:	10800a17 	ldw	r2,40(r2)
 401e24c:	e0fff917 	ldw	r3,-28(fp)
 401e250:	1809883a 	mov	r4,r3
 401e254:	e0fffb17 	ldw	r3,-20(fp)
 401e258:	1885883a 	add	r2,r3,r2
 401e25c:	10800e04 	addi	r2,r2,56
 401e260:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401e264:	e0bffb17 	ldw	r2,-20(fp)
 401e268:	10800a17 	ldw	r2,40(r2)
 401e26c:	10800044 	addi	r2,r2,1
 401e270:	10c1ffcc 	andi	r3,r2,2047
 401e274:	e0bffb17 	ldw	r2,-20(fp)
 401e278:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 401e27c:	003fe206 	br	401e208 <__alt_data_end+0xfc01e208>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 401e280:	0001883a 	nop
 401e284:	00000106 	br	401e28c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 401e288:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 401e28c:	e0bff917 	ldw	r2,-28(fp)
 401e290:	10bfffec 	andhi	r2,r2,65535
 401e294:	10000f26 	beq	r2,zero,401e2d4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401e298:	e0bffb17 	ldw	r2,-20(fp)
 401e29c:	10c00817 	ldw	r3,32(r2)
 401e2a0:	00bfff84 	movi	r2,-2
 401e2a4:	1886703a 	and	r3,r3,r2
 401e2a8:	e0bffb17 	ldw	r2,-20(fp)
 401e2ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 401e2b0:	e0bffc17 	ldw	r2,-16(fp)
 401e2b4:	10800104 	addi	r2,r2,4
 401e2b8:	1007883a 	mov	r3,r2
 401e2bc:	e0bffb17 	ldw	r2,-20(fp)
 401e2c0:	10800817 	ldw	r2,32(r2)
 401e2c4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401e2c8:	e0bffc17 	ldw	r2,-16(fp)
 401e2cc:	10800104 	addi	r2,r2,4
 401e2d0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 401e2d4:	e0bffd17 	ldw	r2,-12(fp)
 401e2d8:	1080800c 	andi	r2,r2,512
 401e2dc:	103fbe26 	beq	r2,zero,401e1d8 <__alt_data_end+0xfc01e1d8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 401e2e0:	e0bffd17 	ldw	r2,-12(fp)
 401e2e4:	1004d43a 	srli	r2,r2,16
 401e2e8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 401e2ec:	00001406 	br	401e340 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 401e2f0:	e0bffc17 	ldw	r2,-16(fp)
 401e2f4:	e0fffb17 	ldw	r3,-20(fp)
 401e2f8:	18c00d17 	ldw	r3,52(r3)
 401e2fc:	e13ffb17 	ldw	r4,-20(fp)
 401e300:	20c7883a 	add	r3,r4,r3
 401e304:	18c20e04 	addi	r3,r3,2104
 401e308:	18c00003 	ldbu	r3,0(r3)
 401e30c:	18c03fcc 	andi	r3,r3,255
 401e310:	18c0201c 	xori	r3,r3,128
 401e314:	18ffe004 	addi	r3,r3,-128
 401e318:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401e31c:	e0bffb17 	ldw	r2,-20(fp)
 401e320:	10800d17 	ldw	r2,52(r2)
 401e324:	10800044 	addi	r2,r2,1
 401e328:	10c1ffcc 	andi	r3,r2,2047
 401e32c:	e0bffb17 	ldw	r2,-20(fp)
 401e330:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 401e334:	e0bffa17 	ldw	r2,-24(fp)
 401e338:	10bfffc4 	addi	r2,r2,-1
 401e33c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 401e340:	e0bffa17 	ldw	r2,-24(fp)
 401e344:	10000526 	beq	r2,zero,401e35c <altera_avalon_jtag_uart_irq+0x1a8>
 401e348:	e0bffb17 	ldw	r2,-20(fp)
 401e34c:	10c00d17 	ldw	r3,52(r2)
 401e350:	e0bffb17 	ldw	r2,-20(fp)
 401e354:	10800c17 	ldw	r2,48(r2)
 401e358:	18bfe51e 	bne	r3,r2,401e2f0 <__alt_data_end+0xfc01e2f0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 401e35c:	e0bffa17 	ldw	r2,-24(fp)
 401e360:	103f9d26 	beq	r2,zero,401e1d8 <__alt_data_end+0xfc01e1d8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401e364:	e0bffb17 	ldw	r2,-20(fp)
 401e368:	10c00817 	ldw	r3,32(r2)
 401e36c:	00bfff44 	movi	r2,-3
 401e370:	1886703a 	and	r3,r3,r2
 401e374:	e0bffb17 	ldw	r2,-20(fp)
 401e378:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401e37c:	e0bffb17 	ldw	r2,-20(fp)
 401e380:	10800017 	ldw	r2,0(r2)
 401e384:	10800104 	addi	r2,r2,4
 401e388:	1007883a 	mov	r3,r2
 401e38c:	e0bffb17 	ldw	r2,-20(fp)
 401e390:	10800817 	ldw	r2,32(r2)
 401e394:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401e398:	e0bffc17 	ldw	r2,-16(fp)
 401e39c:	10800104 	addi	r2,r2,4
 401e3a0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 401e3a4:	003f8c06 	br	401e1d8 <__alt_data_end+0xfc01e1d8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 401e3a8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 401e3ac:	0001883a 	nop
 401e3b0:	e037883a 	mov	sp,fp
 401e3b4:	df000017 	ldw	fp,0(sp)
 401e3b8:	dec00104 	addi	sp,sp,4
 401e3bc:	f800283a 	ret

0401e3c0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 401e3c0:	defff804 	addi	sp,sp,-32
 401e3c4:	df000715 	stw	fp,28(sp)
 401e3c8:	df000704 	addi	fp,sp,28
 401e3cc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 401e3d0:	e0bffb17 	ldw	r2,-20(fp)
 401e3d4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 401e3d8:	e0bff917 	ldw	r2,-28(fp)
 401e3dc:	10800017 	ldw	r2,0(r2)
 401e3e0:	10800104 	addi	r2,r2,4
 401e3e4:	10800037 	ldwio	r2,0(r2)
 401e3e8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 401e3ec:	e0bffa17 	ldw	r2,-24(fp)
 401e3f0:	1081000c 	andi	r2,r2,1024
 401e3f4:	10000b26 	beq	r2,zero,401e424 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 401e3f8:	e0bff917 	ldw	r2,-28(fp)
 401e3fc:	10800017 	ldw	r2,0(r2)
 401e400:	10800104 	addi	r2,r2,4
 401e404:	1007883a 	mov	r3,r2
 401e408:	e0bff917 	ldw	r2,-28(fp)
 401e40c:	10800817 	ldw	r2,32(r2)
 401e410:	10810014 	ori	r2,r2,1024
 401e414:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 401e418:	e0bff917 	ldw	r2,-28(fp)
 401e41c:	10000915 	stw	zero,36(r2)
 401e420:	00000a06 	br	401e44c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 401e424:	e0bff917 	ldw	r2,-28(fp)
 401e428:	10c00917 	ldw	r3,36(r2)
 401e42c:	00a00034 	movhi	r2,32768
 401e430:	10bfff04 	addi	r2,r2,-4
 401e434:	10c00536 	bltu	r2,r3,401e44c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 401e438:	e0bff917 	ldw	r2,-28(fp)
 401e43c:	10800917 	ldw	r2,36(r2)
 401e440:	10c00044 	addi	r3,r2,1
 401e444:	e0bff917 	ldw	r2,-28(fp)
 401e448:	10c00915 	stw	r3,36(r2)
 401e44c:	d0b24717 	ldw	r2,-14052(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 401e450:	e037883a 	mov	sp,fp
 401e454:	df000017 	ldw	fp,0(sp)
 401e458:	dec00104 	addi	sp,sp,4
 401e45c:	f800283a 	ret

0401e460 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 401e460:	defffd04 	addi	sp,sp,-12
 401e464:	df000215 	stw	fp,8(sp)
 401e468:	df000204 	addi	fp,sp,8
 401e46c:	e13ffe15 	stw	r4,-8(fp)
 401e470:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 401e474:	00000506 	br	401e48c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 401e478:	e0bfff17 	ldw	r2,-4(fp)
 401e47c:	1090000c 	andi	r2,r2,16384
 401e480:	10000226 	beq	r2,zero,401e48c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 401e484:	00bffd44 	movi	r2,-11
 401e488:	00000b06 	br	401e4b8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 401e48c:	e0bffe17 	ldw	r2,-8(fp)
 401e490:	10c00d17 	ldw	r3,52(r2)
 401e494:	e0bffe17 	ldw	r2,-8(fp)
 401e498:	10800c17 	ldw	r2,48(r2)
 401e49c:	18800526 	beq	r3,r2,401e4b4 <altera_avalon_jtag_uart_close+0x54>
 401e4a0:	e0bffe17 	ldw	r2,-8(fp)
 401e4a4:	10c00917 	ldw	r3,36(r2)
 401e4a8:	e0bffe17 	ldw	r2,-8(fp)
 401e4ac:	10800117 	ldw	r2,4(r2)
 401e4b0:	18bff136 	bltu	r3,r2,401e478 <__alt_data_end+0xfc01e478>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 401e4b4:	0005883a 	mov	r2,zero
}
 401e4b8:	e037883a 	mov	sp,fp
 401e4bc:	df000017 	ldw	fp,0(sp)
 401e4c0:	dec00104 	addi	sp,sp,4
 401e4c4:	f800283a 	ret

0401e4c8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 401e4c8:	defffa04 	addi	sp,sp,-24
 401e4cc:	df000515 	stw	fp,20(sp)
 401e4d0:	df000504 	addi	fp,sp,20
 401e4d4:	e13ffd15 	stw	r4,-12(fp)
 401e4d8:	e17ffe15 	stw	r5,-8(fp)
 401e4dc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 401e4e0:	00bff9c4 	movi	r2,-25
 401e4e4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 401e4e8:	e0bffe17 	ldw	r2,-8(fp)
 401e4ec:	10da8060 	cmpeqi	r3,r2,27137
 401e4f0:	1800031e 	bne	r3,zero,401e500 <altera_avalon_jtag_uart_ioctl+0x38>
 401e4f4:	109a80a0 	cmpeqi	r2,r2,27138
 401e4f8:	1000181e 	bne	r2,zero,401e55c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 401e4fc:	00002906 	br	401e5a4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 401e500:	e0bffd17 	ldw	r2,-12(fp)
 401e504:	10c00117 	ldw	r3,4(r2)
 401e508:	00a00034 	movhi	r2,32768
 401e50c:	10bfffc4 	addi	r2,r2,-1
 401e510:	18802126 	beq	r3,r2,401e598 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 401e514:	e0bfff17 	ldw	r2,-4(fp)
 401e518:	10800017 	ldw	r2,0(r2)
 401e51c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 401e520:	e0bffc17 	ldw	r2,-16(fp)
 401e524:	10800090 	cmplti	r2,r2,2
 401e528:	1000061e 	bne	r2,zero,401e544 <altera_avalon_jtag_uart_ioctl+0x7c>
 401e52c:	e0fffc17 	ldw	r3,-16(fp)
 401e530:	00a00034 	movhi	r2,32768
 401e534:	10bfffc4 	addi	r2,r2,-1
 401e538:	18800226 	beq	r3,r2,401e544 <altera_avalon_jtag_uart_ioctl+0x7c>
 401e53c:	e0bffc17 	ldw	r2,-16(fp)
 401e540:	00000206 	br	401e54c <altera_avalon_jtag_uart_ioctl+0x84>
 401e544:	00a00034 	movhi	r2,32768
 401e548:	10bfff84 	addi	r2,r2,-2
 401e54c:	e0fffd17 	ldw	r3,-12(fp)
 401e550:	18800115 	stw	r2,4(r3)
      rc = 0;
 401e554:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 401e558:	00000f06 	br	401e598 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 401e55c:	e0bffd17 	ldw	r2,-12(fp)
 401e560:	10c00117 	ldw	r3,4(r2)
 401e564:	00a00034 	movhi	r2,32768
 401e568:	10bfffc4 	addi	r2,r2,-1
 401e56c:	18800c26 	beq	r3,r2,401e5a0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 401e570:	e0bffd17 	ldw	r2,-12(fp)
 401e574:	10c00917 	ldw	r3,36(r2)
 401e578:	e0bffd17 	ldw	r2,-12(fp)
 401e57c:	10800117 	ldw	r2,4(r2)
 401e580:	1885803a 	cmpltu	r2,r3,r2
 401e584:	10c03fcc 	andi	r3,r2,255
 401e588:	e0bfff17 	ldw	r2,-4(fp)
 401e58c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 401e590:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 401e594:	00000206 	br	401e5a0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 401e598:	0001883a 	nop
 401e59c:	00000106 	br	401e5a4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 401e5a0:	0001883a 	nop

  default:
    break;
  }

  return rc;
 401e5a4:	e0bffb17 	ldw	r2,-20(fp)
}
 401e5a8:	e037883a 	mov	sp,fp
 401e5ac:	df000017 	ldw	fp,0(sp)
 401e5b0:	dec00104 	addi	sp,sp,4
 401e5b4:	f800283a 	ret

0401e5b8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 401e5b8:	defff304 	addi	sp,sp,-52
 401e5bc:	dfc00c15 	stw	ra,48(sp)
 401e5c0:	df000b15 	stw	fp,44(sp)
 401e5c4:	df000b04 	addi	fp,sp,44
 401e5c8:	e13ffc15 	stw	r4,-16(fp)
 401e5cc:	e17ffd15 	stw	r5,-12(fp)
 401e5d0:	e1bffe15 	stw	r6,-8(fp)
 401e5d4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 401e5d8:	e0bffd17 	ldw	r2,-12(fp)
 401e5dc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 401e5e0:	00004706 	br	401e700 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 401e5e4:	e0bffc17 	ldw	r2,-16(fp)
 401e5e8:	10800a17 	ldw	r2,40(r2)
 401e5ec:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 401e5f0:	e0bffc17 	ldw	r2,-16(fp)
 401e5f4:	10800b17 	ldw	r2,44(r2)
 401e5f8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 401e5fc:	e0fff717 	ldw	r3,-36(fp)
 401e600:	e0bff817 	ldw	r2,-32(fp)
 401e604:	18800536 	bltu	r3,r2,401e61c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 401e608:	e0fff717 	ldw	r3,-36(fp)
 401e60c:	e0bff817 	ldw	r2,-32(fp)
 401e610:	1885c83a 	sub	r2,r3,r2
 401e614:	e0bff615 	stw	r2,-40(fp)
 401e618:	00000406 	br	401e62c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 401e61c:	00c20004 	movi	r3,2048
 401e620:	e0bff817 	ldw	r2,-32(fp)
 401e624:	1885c83a 	sub	r2,r3,r2
 401e628:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401e62c:	e0bff617 	ldw	r2,-40(fp)
 401e630:	10001e26 	beq	r2,zero,401e6ac <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 401e634:	e0fffe17 	ldw	r3,-8(fp)
 401e638:	e0bff617 	ldw	r2,-40(fp)
 401e63c:	1880022e 	bgeu	r3,r2,401e648 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 401e640:	e0bffe17 	ldw	r2,-8(fp)
 401e644:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 401e648:	e0bffc17 	ldw	r2,-16(fp)
 401e64c:	10c00e04 	addi	r3,r2,56
 401e650:	e0bff817 	ldw	r2,-32(fp)
 401e654:	1885883a 	add	r2,r3,r2
 401e658:	e1bff617 	ldw	r6,-40(fp)
 401e65c:	100b883a 	mov	r5,r2
 401e660:	e13ff517 	ldw	r4,-44(fp)
 401e664:	400ecdc0 	call	400ecdc <memcpy>
      ptr   += n;
 401e668:	e0fff517 	ldw	r3,-44(fp)
 401e66c:	e0bff617 	ldw	r2,-40(fp)
 401e670:	1885883a 	add	r2,r3,r2
 401e674:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 401e678:	e0fffe17 	ldw	r3,-8(fp)
 401e67c:	e0bff617 	ldw	r2,-40(fp)
 401e680:	1885c83a 	sub	r2,r3,r2
 401e684:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401e688:	e0fff817 	ldw	r3,-32(fp)
 401e68c:	e0bff617 	ldw	r2,-40(fp)
 401e690:	1885883a 	add	r2,r3,r2
 401e694:	10c1ffcc 	andi	r3,r2,2047
 401e698:	e0bffc17 	ldw	r2,-16(fp)
 401e69c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 401e6a0:	e0bffe17 	ldw	r2,-8(fp)
 401e6a4:	00bfcf16 	blt	zero,r2,401e5e4 <__alt_data_end+0xfc01e5e4>
 401e6a8:	00000106 	br	401e6b0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 401e6ac:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 401e6b0:	e0fff517 	ldw	r3,-44(fp)
 401e6b4:	e0bffd17 	ldw	r2,-12(fp)
 401e6b8:	1880141e 	bne	r3,r2,401e70c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 401e6bc:	e0bfff17 	ldw	r2,-4(fp)
 401e6c0:	1090000c 	andi	r2,r2,16384
 401e6c4:	1000131e 	bne	r2,zero,401e714 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 401e6c8:	0001883a 	nop
 401e6cc:	e0bffc17 	ldw	r2,-16(fp)
 401e6d0:	10c00a17 	ldw	r3,40(r2)
 401e6d4:	e0bff717 	ldw	r2,-36(fp)
 401e6d8:	1880051e 	bne	r3,r2,401e6f0 <altera_avalon_jtag_uart_read+0x138>
 401e6dc:	e0bffc17 	ldw	r2,-16(fp)
 401e6e0:	10c00917 	ldw	r3,36(r2)
 401e6e4:	e0bffc17 	ldw	r2,-16(fp)
 401e6e8:	10800117 	ldw	r2,4(r2)
 401e6ec:	18bff736 	bltu	r3,r2,401e6cc <__alt_data_end+0xfc01e6cc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 401e6f0:	e0bffc17 	ldw	r2,-16(fp)
 401e6f4:	10c00a17 	ldw	r3,40(r2)
 401e6f8:	e0bff717 	ldw	r2,-36(fp)
 401e6fc:	18800726 	beq	r3,r2,401e71c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 401e700:	e0bffe17 	ldw	r2,-8(fp)
 401e704:	00bfb716 	blt	zero,r2,401e5e4 <__alt_data_end+0xfc01e5e4>
 401e708:	00000506 	br	401e720 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 401e70c:	0001883a 	nop
 401e710:	00000306 	br	401e720 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 401e714:	0001883a 	nop
 401e718:	00000106 	br	401e720 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 401e71c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 401e720:	e0fff517 	ldw	r3,-44(fp)
 401e724:	e0bffd17 	ldw	r2,-12(fp)
 401e728:	18801826 	beq	r3,r2,401e78c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401e72c:	0005303a 	rdctl	r2,status
 401e730:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401e734:	e0fffb17 	ldw	r3,-20(fp)
 401e738:	00bfff84 	movi	r2,-2
 401e73c:	1884703a 	and	r2,r3,r2
 401e740:	1001703a 	wrctl	status,r2
  
  return context;
 401e744:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 401e748:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401e74c:	e0bffc17 	ldw	r2,-16(fp)
 401e750:	10800817 	ldw	r2,32(r2)
 401e754:	10c00054 	ori	r3,r2,1
 401e758:	e0bffc17 	ldw	r2,-16(fp)
 401e75c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401e760:	e0bffc17 	ldw	r2,-16(fp)
 401e764:	10800017 	ldw	r2,0(r2)
 401e768:	10800104 	addi	r2,r2,4
 401e76c:	1007883a 	mov	r3,r2
 401e770:	e0bffc17 	ldw	r2,-16(fp)
 401e774:	10800817 	ldw	r2,32(r2)
 401e778:	18800035 	stwio	r2,0(r3)
 401e77c:	e0bffa17 	ldw	r2,-24(fp)
 401e780:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401e784:	e0bff917 	ldw	r2,-28(fp)
 401e788:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 401e78c:	e0fff517 	ldw	r3,-44(fp)
 401e790:	e0bffd17 	ldw	r2,-12(fp)
 401e794:	18800426 	beq	r3,r2,401e7a8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 401e798:	e0fff517 	ldw	r3,-44(fp)
 401e79c:	e0bffd17 	ldw	r2,-12(fp)
 401e7a0:	1885c83a 	sub	r2,r3,r2
 401e7a4:	00000606 	br	401e7c0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 401e7a8:	e0bfff17 	ldw	r2,-4(fp)
 401e7ac:	1090000c 	andi	r2,r2,16384
 401e7b0:	10000226 	beq	r2,zero,401e7bc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 401e7b4:	00bffd44 	movi	r2,-11
 401e7b8:	00000106 	br	401e7c0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 401e7bc:	00bffec4 	movi	r2,-5
}
 401e7c0:	e037883a 	mov	sp,fp
 401e7c4:	dfc00117 	ldw	ra,4(sp)
 401e7c8:	df000017 	ldw	fp,0(sp)
 401e7cc:	dec00204 	addi	sp,sp,8
 401e7d0:	f800283a 	ret

0401e7d4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 401e7d4:	defff304 	addi	sp,sp,-52
 401e7d8:	dfc00c15 	stw	ra,48(sp)
 401e7dc:	df000b15 	stw	fp,44(sp)
 401e7e0:	df000b04 	addi	fp,sp,44
 401e7e4:	e13ffc15 	stw	r4,-16(fp)
 401e7e8:	e17ffd15 	stw	r5,-12(fp)
 401e7ec:	e1bffe15 	stw	r6,-8(fp)
 401e7f0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 401e7f4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 401e7f8:	e0bffd17 	ldw	r2,-12(fp)
 401e7fc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 401e800:	00003706 	br	401e8e0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 401e804:	e0bffc17 	ldw	r2,-16(fp)
 401e808:	10800c17 	ldw	r2,48(r2)
 401e80c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 401e810:	e0bffc17 	ldw	r2,-16(fp)
 401e814:	10800d17 	ldw	r2,52(r2)
 401e818:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 401e81c:	e0fff917 	ldw	r3,-28(fp)
 401e820:	e0bff517 	ldw	r2,-44(fp)
 401e824:	1880062e 	bgeu	r3,r2,401e840 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 401e828:	e0fff517 	ldw	r3,-44(fp)
 401e82c:	e0bff917 	ldw	r2,-28(fp)
 401e830:	1885c83a 	sub	r2,r3,r2
 401e834:	10bfffc4 	addi	r2,r2,-1
 401e838:	e0bff615 	stw	r2,-40(fp)
 401e83c:	00000b06 	br	401e86c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 401e840:	e0bff517 	ldw	r2,-44(fp)
 401e844:	10000526 	beq	r2,zero,401e85c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 401e848:	00c20004 	movi	r3,2048
 401e84c:	e0bff917 	ldw	r2,-28(fp)
 401e850:	1885c83a 	sub	r2,r3,r2
 401e854:	e0bff615 	stw	r2,-40(fp)
 401e858:	00000406 	br	401e86c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 401e85c:	00c1ffc4 	movi	r3,2047
 401e860:	e0bff917 	ldw	r2,-28(fp)
 401e864:	1885c83a 	sub	r2,r3,r2
 401e868:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401e86c:	e0bff617 	ldw	r2,-40(fp)
 401e870:	10001e26 	beq	r2,zero,401e8ec <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 401e874:	e0fffe17 	ldw	r3,-8(fp)
 401e878:	e0bff617 	ldw	r2,-40(fp)
 401e87c:	1880022e 	bgeu	r3,r2,401e888 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 401e880:	e0bffe17 	ldw	r2,-8(fp)
 401e884:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 401e888:	e0bffc17 	ldw	r2,-16(fp)
 401e88c:	10c20e04 	addi	r3,r2,2104
 401e890:	e0bff917 	ldw	r2,-28(fp)
 401e894:	1885883a 	add	r2,r3,r2
 401e898:	e1bff617 	ldw	r6,-40(fp)
 401e89c:	e17ffd17 	ldw	r5,-12(fp)
 401e8a0:	1009883a 	mov	r4,r2
 401e8a4:	400ecdc0 	call	400ecdc <memcpy>
      ptr   += n;
 401e8a8:	e0fffd17 	ldw	r3,-12(fp)
 401e8ac:	e0bff617 	ldw	r2,-40(fp)
 401e8b0:	1885883a 	add	r2,r3,r2
 401e8b4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 401e8b8:	e0fffe17 	ldw	r3,-8(fp)
 401e8bc:	e0bff617 	ldw	r2,-40(fp)
 401e8c0:	1885c83a 	sub	r2,r3,r2
 401e8c4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401e8c8:	e0fff917 	ldw	r3,-28(fp)
 401e8cc:	e0bff617 	ldw	r2,-40(fp)
 401e8d0:	1885883a 	add	r2,r3,r2
 401e8d4:	10c1ffcc 	andi	r3,r2,2047
 401e8d8:	e0bffc17 	ldw	r2,-16(fp)
 401e8dc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 401e8e0:	e0bffe17 	ldw	r2,-8(fp)
 401e8e4:	00bfc716 	blt	zero,r2,401e804 <__alt_data_end+0xfc01e804>
 401e8e8:	00000106 	br	401e8f0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 401e8ec:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401e8f0:	0005303a 	rdctl	r2,status
 401e8f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401e8f8:	e0fffb17 	ldw	r3,-20(fp)
 401e8fc:	00bfff84 	movi	r2,-2
 401e900:	1884703a 	and	r2,r3,r2
 401e904:	1001703a 	wrctl	status,r2
  
  return context;
 401e908:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 401e90c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401e910:	e0bffc17 	ldw	r2,-16(fp)
 401e914:	10800817 	ldw	r2,32(r2)
 401e918:	10c00094 	ori	r3,r2,2
 401e91c:	e0bffc17 	ldw	r2,-16(fp)
 401e920:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401e924:	e0bffc17 	ldw	r2,-16(fp)
 401e928:	10800017 	ldw	r2,0(r2)
 401e92c:	10800104 	addi	r2,r2,4
 401e930:	1007883a 	mov	r3,r2
 401e934:	e0bffc17 	ldw	r2,-16(fp)
 401e938:	10800817 	ldw	r2,32(r2)
 401e93c:	18800035 	stwio	r2,0(r3)
 401e940:	e0bffa17 	ldw	r2,-24(fp)
 401e944:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401e948:	e0bff817 	ldw	r2,-32(fp)
 401e94c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 401e950:	e0bffe17 	ldw	r2,-8(fp)
 401e954:	0080100e 	bge	zero,r2,401e998 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 401e958:	e0bfff17 	ldw	r2,-4(fp)
 401e95c:	1090000c 	andi	r2,r2,16384
 401e960:	1000101e 	bne	r2,zero,401e9a4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 401e964:	0001883a 	nop
 401e968:	e0bffc17 	ldw	r2,-16(fp)
 401e96c:	10c00d17 	ldw	r3,52(r2)
 401e970:	e0bff517 	ldw	r2,-44(fp)
 401e974:	1880051e 	bne	r3,r2,401e98c <altera_avalon_jtag_uart_write+0x1b8>
 401e978:	e0bffc17 	ldw	r2,-16(fp)
 401e97c:	10c00917 	ldw	r3,36(r2)
 401e980:	e0bffc17 	ldw	r2,-16(fp)
 401e984:	10800117 	ldw	r2,4(r2)
 401e988:	18bff736 	bltu	r3,r2,401e968 <__alt_data_end+0xfc01e968>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 401e98c:	e0bffc17 	ldw	r2,-16(fp)
 401e990:	10800917 	ldw	r2,36(r2)
 401e994:	1000051e 	bne	r2,zero,401e9ac <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 401e998:	e0bffe17 	ldw	r2,-8(fp)
 401e99c:	00bfd016 	blt	zero,r2,401e8e0 <__alt_data_end+0xfc01e8e0>
 401e9a0:	00000306 	br	401e9b0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 401e9a4:	0001883a 	nop
 401e9a8:	00000106 	br	401e9b0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 401e9ac:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 401e9b0:	e0fffd17 	ldw	r3,-12(fp)
 401e9b4:	e0bff717 	ldw	r2,-36(fp)
 401e9b8:	18800426 	beq	r3,r2,401e9cc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 401e9bc:	e0fffd17 	ldw	r3,-12(fp)
 401e9c0:	e0bff717 	ldw	r2,-36(fp)
 401e9c4:	1885c83a 	sub	r2,r3,r2
 401e9c8:	00000606 	br	401e9e4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 401e9cc:	e0bfff17 	ldw	r2,-4(fp)
 401e9d0:	1090000c 	andi	r2,r2,16384
 401e9d4:	10000226 	beq	r2,zero,401e9e0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 401e9d8:	00bffd44 	movi	r2,-11
 401e9dc:	00000106 	br	401e9e4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 401e9e0:	00bffec4 	movi	r2,-5
}
 401e9e4:	e037883a 	mov	sp,fp
 401e9e8:	dfc00117 	ldw	ra,4(sp)
 401e9ec:	df000017 	ldw	fp,0(sp)
 401e9f0:	dec00204 	addi	sp,sp,8
 401e9f4:	f800283a 	ret

0401e9f8 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 401e9f8:	defff404 	addi	sp,sp,-48
 401e9fc:	df000b15 	stw	fp,44(sp)
 401ea00:	df000b04 	addi	fp,sp,44
 401ea04:	e13ffc15 	stw	r4,-16(fp)
 401ea08:	e17ffd15 	stw	r5,-12(fp)
 401ea0c:	e1bffe15 	stw	r6,-8(fp)
 401ea10:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 401ea14:	e0ffff17 	ldw	r3,-4(fp)
 401ea18:	e0bffe17 	ldw	r2,-8(fp)
 401ea1c:	1885883a 	add	r2,r3,r2
 401ea20:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 401ea24:	e0c00217 	ldw	r3,8(fp)
 401ea28:	e0800117 	ldw	r2,4(fp)
 401ea2c:	1885883a 	add	r2,r3,r2
 401ea30:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 401ea34:	e0800117 	ldw	r2,4(fp)
 401ea38:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 401ea3c:	e0bffe17 	ldw	r2,-8(fp)
 401ea40:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 401ea44:	00800044 	movi	r2,1
 401ea48:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 401ea4c:	e0bffc17 	ldw	r2,-16(fp)
 401ea50:	10800504 	addi	r2,r2,20
 401ea54:	1009883a 	mov	r4,r2
 401ea58:	00c00044 	movi	r3,1
 401ea5c:	e0bffd17 	ldw	r2,-12(fp)
 401ea60:	1884983a 	sll	r2,r3,r2
 401ea64:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 401ea68:	e0800317 	ldw	r2,12(fp)
 401ea6c:	1080008c 	andi	r2,r2,2
 401ea70:	1000051e 	bne	r2,zero,401ea88 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 401ea74:	e0bffc17 	ldw	r2,-16(fp)
 401ea78:	10800304 	addi	r2,r2,12
 401ea7c:	1007883a 	mov	r3,r2
 401ea80:	00810004 	movi	r2,1024
 401ea84:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 401ea88:	e0bffc17 	ldw	r2,-16(fp)
 401ea8c:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 401ea90:	e0bffc17 	ldw	r2,-16(fp)
 401ea94:	10800204 	addi	r2,r2,8
 401ea98:	10800037 	ldwio	r2,0(r2)
 401ea9c:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401eaa0:	e0bffa17 	ldw	r2,-24(fp)
 401eaa4:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 401eaa8:	10000226 	beq	r2,zero,401eab4 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401eaac:	e0bff717 	ldw	r2,-36(fp)
 401eab0:	1000031e 	bne	r2,zero,401eac0 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 401eab4:	e0bffa17 	ldw	r2,-24(fp)
 401eab8:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401eabc:	103ff426 	beq	r2,zero,401ea90 <__alt_data_end+0xfc01ea90>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 401eac0:	e0bffa17 	ldw	r2,-24(fp)
 401eac4:	1080100c 	andi	r2,r2,64
 401eac8:	10001e26 	beq	r2,zero,401eb44 <alt_avalon_spi_command+0x14c>
 401eacc:	e0bff717 	ldw	r2,-36(fp)
 401ead0:	00801c0e 	bge	zero,r2,401eb44 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 401ead4:	e0bff717 	ldw	r2,-36(fp)
 401ead8:	10bfffc4 	addi	r2,r2,-1
 401eadc:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 401eae0:	e0ffff17 	ldw	r3,-4(fp)
 401eae4:	e0bff817 	ldw	r2,-32(fp)
 401eae8:	18800a2e 	bgeu	r3,r2,401eb14 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 401eaec:	e0bffc17 	ldw	r2,-16(fp)
 401eaf0:	10800104 	addi	r2,r2,4
 401eaf4:	1009883a 	mov	r4,r2
 401eaf8:	e0bfff17 	ldw	r2,-4(fp)
 401eafc:	10c00044 	addi	r3,r2,1
 401eb00:	e0ffff15 	stw	r3,-4(fp)
 401eb04:	10800003 	ldbu	r2,0(r2)
 401eb08:	10803fcc 	andi	r2,r2,255
 401eb0c:	20800035 	stwio	r2,0(r4)
 401eb10:	00000c06 	br	401eb44 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 401eb14:	e0bff517 	ldw	r2,-44(fp)
 401eb18:	10000826 	beq	r2,zero,401eb3c <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 401eb1c:	e0bff517 	ldw	r2,-44(fp)
 401eb20:	10bfffc4 	addi	r2,r2,-1
 401eb24:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 401eb28:	e0bffc17 	ldw	r2,-16(fp)
 401eb2c:	10800104 	addi	r2,r2,4
 401eb30:	0007883a 	mov	r3,zero
 401eb34:	10c00035 	stwio	r3,0(r2)
 401eb38:	00000206 	br	401eb44 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 401eb3c:	00bf0004 	movi	r2,-1024
 401eb40:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 401eb44:	e0bffa17 	ldw	r2,-24(fp)
 401eb48:	1080200c 	andi	r2,r2,128
 401eb4c:	103fd026 	beq	r2,zero,401ea90 <__alt_data_end+0xfc01ea90>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 401eb50:	e0bffc17 	ldw	r2,-16(fp)
 401eb54:	10800037 	ldwio	r2,0(r2)
 401eb58:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 401eb5c:	e0bff617 	ldw	r2,-40(fp)
 401eb60:	10000426 	beq	r2,zero,401eb74 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 401eb64:	e0bff617 	ldw	r2,-40(fp)
 401eb68:	10bfffc4 	addi	r2,r2,-1
 401eb6c:	e0bff615 	stw	r2,-40(fp)
 401eb70:	00000506 	br	401eb88 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 401eb74:	e0800217 	ldw	r2,8(fp)
 401eb78:	10c00044 	addi	r3,r2,1
 401eb7c:	e0c00215 	stw	r3,8(fp)
 401eb80:	e0fffb17 	ldw	r3,-20(fp)
 401eb84:	10c00005 	stb	r3,0(r2)
      credits++;
 401eb88:	e0bff717 	ldw	r2,-36(fp)
 401eb8c:	10800044 	addi	r2,r2,1
 401eb90:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 401eb94:	e0bff617 	ldw	r2,-40(fp)
 401eb98:	103fbd1e 	bne	r2,zero,401ea90 <__alt_data_end+0xfc01ea90>
 401eb9c:	e0c00217 	ldw	r3,8(fp)
 401eba0:	e0bff917 	ldw	r2,-28(fp)
 401eba4:	18bfba1e 	bne	r3,r2,401ea90 <__alt_data_end+0xfc01ea90>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 401eba8:	e0bffc17 	ldw	r2,-16(fp)
 401ebac:	10800204 	addi	r2,r2,8
 401ebb0:	10800037 	ldwio	r2,0(r2)
 401ebb4:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 401ebb8:	e0bffa17 	ldw	r2,-24(fp)
 401ebbc:	1080080c 	andi	r2,r2,32
 401ebc0:	103ff926 	beq	r2,zero,401eba8 <__alt_data_end+0xfc01eba8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 401ebc4:	e0800317 	ldw	r2,12(fp)
 401ebc8:	1080004c 	andi	r2,r2,1
 401ebcc:	1000041e 	bne	r2,zero,401ebe0 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 401ebd0:	e0bffc17 	ldw	r2,-16(fp)
 401ebd4:	10800304 	addi	r2,r2,12
 401ebd8:	0007883a 	mov	r3,zero
 401ebdc:	10c00035 	stwio	r3,0(r2)

  return read_length;
 401ebe0:	e0800117 	ldw	r2,4(fp)
}
 401ebe4:	e037883a 	mov	sp,fp
 401ebe8:	df000017 	ldw	fp,0(sp)
 401ebec:	dec00104 	addi	sp,sp,4
 401ebf0:	f800283a 	ret

0401ebf4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 401ebf4:	defffa04 	addi	sp,sp,-24
 401ebf8:	dfc00515 	stw	ra,20(sp)
 401ebfc:	df000415 	stw	fp,16(sp)
 401ec00:	df000404 	addi	fp,sp,16
 401ec04:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 401ec08:	0007883a 	mov	r3,zero
 401ec0c:	e0bfff17 	ldw	r2,-4(fp)
 401ec10:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 401ec14:	e0bfff17 	ldw	r2,-4(fp)
 401ec18:	10800104 	addi	r2,r2,4
 401ec1c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401ec20:	0005303a 	rdctl	r2,status
 401ec24:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401ec28:	e0fffd17 	ldw	r3,-12(fp)
 401ec2c:	00bfff84 	movi	r2,-2
 401ec30:	1884703a 	and	r2,r3,r2
 401ec34:	1001703a 	wrctl	status,r2
  
  return context;
 401ec38:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 401ec3c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 401ec40:	401fb640 	call	401fb64 <alt_tick>
 401ec44:	e0bffc17 	ldw	r2,-16(fp)
 401ec48:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401ec4c:	e0bffe17 	ldw	r2,-8(fp)
 401ec50:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 401ec54:	0001883a 	nop
 401ec58:	e037883a 	mov	sp,fp
 401ec5c:	dfc00117 	ldw	ra,4(sp)
 401ec60:	df000017 	ldw	fp,0(sp)
 401ec64:	dec00204 	addi	sp,sp,8
 401ec68:	f800283a 	ret

0401ec6c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 401ec6c:	defff804 	addi	sp,sp,-32
 401ec70:	dfc00715 	stw	ra,28(sp)
 401ec74:	df000615 	stw	fp,24(sp)
 401ec78:	df000604 	addi	fp,sp,24
 401ec7c:	e13ffc15 	stw	r4,-16(fp)
 401ec80:	e17ffd15 	stw	r5,-12(fp)
 401ec84:	e1bffe15 	stw	r6,-8(fp)
 401ec88:	e1ffff15 	stw	r7,-4(fp)
 401ec8c:	e0bfff17 	ldw	r2,-4(fp)
 401ec90:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 401ec94:	d0b24717 	ldw	r2,-14052(gp)
 401ec98:	1000021e 	bne	r2,zero,401eca4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 401ec9c:	e0bffb17 	ldw	r2,-20(fp)
 401eca0:	d0b24715 	stw	r2,-14052(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 401eca4:	e0bffc17 	ldw	r2,-16(fp)
 401eca8:	10800104 	addi	r2,r2,4
 401ecac:	00c001c4 	movi	r3,7
 401ecb0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 401ecb4:	d8000015 	stw	zero,0(sp)
 401ecb8:	e1fffc17 	ldw	r7,-16(fp)
 401ecbc:	018100b4 	movhi	r6,1026
 401ecc0:	31bafd04 	addi	r6,r6,-5132
 401ecc4:	e17ffe17 	ldw	r5,-8(fp)
 401ecc8:	e13ffd17 	ldw	r4,-12(fp)
 401eccc:	401f1dc0 	call	401f1dc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 401ecd0:	0001883a 	nop
 401ecd4:	e037883a 	mov	sp,fp
 401ecd8:	dfc00117 	ldw	ra,4(sp)
 401ecdc:	df000017 	ldw	fp,0(sp)
 401ece0:	dec00204 	addi	sp,sp,8
 401ece4:	f800283a 	ret

0401ece8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 401ece8:	defff504 	addi	sp,sp,-44
 401ecec:	df000a15 	stw	fp,40(sp)
 401ecf0:	df000a04 	addi	fp,sp,40
 401ecf4:	e13ffc15 	stw	r4,-16(fp)
 401ecf8:	e17ffd15 	stw	r5,-12(fp)
 401ecfc:	e1bffe15 	stw	r6,-8(fp)
 401ed00:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 401ed04:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 401ed08:	d0b24717 	ldw	r2,-14052(gp)
  
  if (alt_ticks_per_second ())
 401ed0c:	10003c26 	beq	r2,zero,401ee00 <alt_alarm_start+0x118>
  {
    if (alarm)
 401ed10:	e0bffc17 	ldw	r2,-16(fp)
 401ed14:	10003826 	beq	r2,zero,401edf8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 401ed18:	e0bffc17 	ldw	r2,-16(fp)
 401ed1c:	e0fffe17 	ldw	r3,-8(fp)
 401ed20:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 401ed24:	e0bffc17 	ldw	r2,-16(fp)
 401ed28:	e0ffff17 	ldw	r3,-4(fp)
 401ed2c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401ed30:	0005303a 	rdctl	r2,status
 401ed34:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401ed38:	e0fff917 	ldw	r3,-28(fp)
 401ed3c:	00bfff84 	movi	r2,-2
 401ed40:	1884703a 	and	r2,r3,r2
 401ed44:	1001703a 	wrctl	status,r2
  
  return context;
 401ed48:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 401ed4c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 401ed50:	d0b24817 	ldw	r2,-14048(gp)
      
      current_nticks = alt_nticks();
 401ed54:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 401ed58:	e0fffd17 	ldw	r3,-12(fp)
 401ed5c:	e0bff617 	ldw	r2,-40(fp)
 401ed60:	1885883a 	add	r2,r3,r2
 401ed64:	10c00044 	addi	r3,r2,1
 401ed68:	e0bffc17 	ldw	r2,-16(fp)
 401ed6c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 401ed70:	e0bffc17 	ldw	r2,-16(fp)
 401ed74:	10c00217 	ldw	r3,8(r2)
 401ed78:	e0bff617 	ldw	r2,-40(fp)
 401ed7c:	1880042e 	bgeu	r3,r2,401ed90 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 401ed80:	e0bffc17 	ldw	r2,-16(fp)
 401ed84:	00c00044 	movi	r3,1
 401ed88:	10c00405 	stb	r3,16(r2)
 401ed8c:	00000206 	br	401ed98 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 401ed90:	e0bffc17 	ldw	r2,-16(fp)
 401ed94:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 401ed98:	e0bffc17 	ldw	r2,-16(fp)
 401ed9c:	d0e5bc04 	addi	r3,gp,-26896
 401eda0:	e0fffa15 	stw	r3,-24(fp)
 401eda4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 401eda8:	e0bffb17 	ldw	r2,-20(fp)
 401edac:	e0fffa17 	ldw	r3,-24(fp)
 401edb0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 401edb4:	e0bffa17 	ldw	r2,-24(fp)
 401edb8:	10c00017 	ldw	r3,0(r2)
 401edbc:	e0bffb17 	ldw	r2,-20(fp)
 401edc0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 401edc4:	e0bffa17 	ldw	r2,-24(fp)
 401edc8:	10800017 	ldw	r2,0(r2)
 401edcc:	e0fffb17 	ldw	r3,-20(fp)
 401edd0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 401edd4:	e0bffa17 	ldw	r2,-24(fp)
 401edd8:	e0fffb17 	ldw	r3,-20(fp)
 401eddc:	10c00015 	stw	r3,0(r2)
 401ede0:	e0bff817 	ldw	r2,-32(fp)
 401ede4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401ede8:	e0bff717 	ldw	r2,-36(fp)
 401edec:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 401edf0:	0005883a 	mov	r2,zero
 401edf4:	00000306 	br	401ee04 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 401edf8:	00bffa84 	movi	r2,-22
 401edfc:	00000106 	br	401ee04 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 401ee00:	00bfde84 	movi	r2,-134
  }
}
 401ee04:	e037883a 	mov	sp,fp
 401ee08:	df000017 	ldw	fp,0(sp)
 401ee0c:	dec00104 	addi	sp,sp,4
 401ee10:	f800283a 	ret

0401ee14 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 401ee14:	defffa04 	addi	sp,sp,-24
 401ee18:	dfc00515 	stw	ra,20(sp)
 401ee1c:	df000415 	stw	fp,16(sp)
 401ee20:	df000404 	addi	fp,sp,16
 401ee24:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 401ee28:	00800244 	movi	r2,9
 401ee2c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 401ee30:	014003f4 	movhi	r5,15
 401ee34:	29509004 	addi	r5,r5,16960
 401ee38:	e13ffd17 	ldw	r4,-12(fp)
 401ee3c:	400d3680 	call	400d368 <__mulsi3>
 401ee40:	100b883a 	mov	r5,r2
 401ee44:	0100bef4 	movhi	r4,763
 401ee48:	213c2004 	addi	r4,r4,-3968
 401ee4c:	400d2ac0 	call	400d2ac <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 401ee50:	100b883a 	mov	r5,r2
 401ee54:	01200034 	movhi	r4,32768
 401ee58:	213fffc4 	addi	r4,r4,-1
 401ee5c:	400d2ac0 	call	400d2ac <__udivsi3>
 401ee60:	100b883a 	mov	r5,r2
 401ee64:	e13fff17 	ldw	r4,-4(fp)
 401ee68:	400d2ac0 	call	400d2ac <__udivsi3>
 401ee6c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 401ee70:	e0bffe17 	ldw	r2,-8(fp)
 401ee74:	10002a26 	beq	r2,zero,401ef20 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 401ee78:	e03ffc15 	stw	zero,-16(fp)
 401ee7c:	00001706 	br	401eedc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 401ee80:	00a00034 	movhi	r2,32768
 401ee84:	10bfffc4 	addi	r2,r2,-1
 401ee88:	10bfffc4 	addi	r2,r2,-1
 401ee8c:	103ffe1e 	bne	r2,zero,401ee88 <__alt_data_end+0xfc01ee88>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 401ee90:	014003f4 	movhi	r5,15
 401ee94:	29509004 	addi	r5,r5,16960
 401ee98:	e13ffd17 	ldw	r4,-12(fp)
 401ee9c:	400d3680 	call	400d368 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 401eea0:	100b883a 	mov	r5,r2
 401eea4:	0100bef4 	movhi	r4,763
 401eea8:	213c2004 	addi	r4,r4,-3968
 401eeac:	400d2ac0 	call	400d2ac <__udivsi3>
 401eeb0:	100b883a 	mov	r5,r2
 401eeb4:	01200034 	movhi	r4,32768
 401eeb8:	213fffc4 	addi	r4,r4,-1
 401eebc:	400d2ac0 	call	400d2ac <__udivsi3>
 401eec0:	1007883a 	mov	r3,r2
 401eec4:	e0bfff17 	ldw	r2,-4(fp)
 401eec8:	10c5c83a 	sub	r2,r2,r3
 401eecc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 401eed0:	e0bffc17 	ldw	r2,-16(fp)
 401eed4:	10800044 	addi	r2,r2,1
 401eed8:	e0bffc15 	stw	r2,-16(fp)
 401eedc:	e0fffc17 	ldw	r3,-16(fp)
 401eee0:	e0bffe17 	ldw	r2,-8(fp)
 401eee4:	18bfe616 	blt	r3,r2,401ee80 <__alt_data_end+0xfc01ee80>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 401eee8:	014003f4 	movhi	r5,15
 401eeec:	29509004 	addi	r5,r5,16960
 401eef0:	e13ffd17 	ldw	r4,-12(fp)
 401eef4:	400d3680 	call	400d368 <__mulsi3>
 401eef8:	100b883a 	mov	r5,r2
 401eefc:	0100bef4 	movhi	r4,763
 401ef00:	213c2004 	addi	r4,r4,-3968
 401ef04:	400d2ac0 	call	400d2ac <__udivsi3>
 401ef08:	e17fff17 	ldw	r5,-4(fp)
 401ef0c:	1009883a 	mov	r4,r2
 401ef10:	400d3680 	call	400d368 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 401ef14:	10bfffc4 	addi	r2,r2,-1
 401ef18:	103ffe1e 	bne	r2,zero,401ef14 <__alt_data_end+0xfc01ef14>
 401ef1c:	00000d06 	br	401ef54 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 401ef20:	014003f4 	movhi	r5,15
 401ef24:	29509004 	addi	r5,r5,16960
 401ef28:	e13ffd17 	ldw	r4,-12(fp)
 401ef2c:	400d3680 	call	400d368 <__mulsi3>
 401ef30:	100b883a 	mov	r5,r2
 401ef34:	0100bef4 	movhi	r4,763
 401ef38:	213c2004 	addi	r4,r4,-3968
 401ef3c:	400d2ac0 	call	400d2ac <__udivsi3>
 401ef40:	e17fff17 	ldw	r5,-4(fp)
 401ef44:	1009883a 	mov	r4,r2
 401ef48:	400d3680 	call	400d368 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 401ef4c:	10bfffc4 	addi	r2,r2,-1
 401ef50:	00bffe16 	blt	zero,r2,401ef4c <__alt_data_end+0xfc01ef4c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 401ef54:	0005883a 	mov	r2,zero
}
 401ef58:	e037883a 	mov	sp,fp
 401ef5c:	dfc00117 	ldw	ra,4(sp)
 401ef60:	df000017 	ldw	fp,0(sp)
 401ef64:	dec00204 	addi	sp,sp,8
 401ef68:	f800283a 	ret

0401ef6c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 401ef6c:	deffff04 	addi	sp,sp,-4
 401ef70:	df000015 	stw	fp,0(sp)
 401ef74:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 401ef78:	0001883a 	nop
 401ef7c:	e037883a 	mov	sp,fp
 401ef80:	df000017 	ldw	fp,0(sp)
 401ef84:	dec00104 	addi	sp,sp,4
 401ef88:	f800283a 	ret

0401ef8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401ef8c:	defffe04 	addi	sp,sp,-8
 401ef90:	dfc00115 	stw	ra,4(sp)
 401ef94:	df000015 	stw	fp,0(sp)
 401ef98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401ef9c:	d0a5b717 	ldw	r2,-26916(gp)
 401efa0:	10000326 	beq	r2,zero,401efb0 <alt_get_errno+0x24>
 401efa4:	d0a5b717 	ldw	r2,-26916(gp)
 401efa8:	103ee83a 	callr	r2
 401efac:	00000106 	br	401efb4 <alt_get_errno+0x28>
 401efb0:	d0b23f04 	addi	r2,gp,-14084
}
 401efb4:	e037883a 	mov	sp,fp
 401efb8:	dfc00117 	ldw	ra,4(sp)
 401efbc:	df000017 	ldw	fp,0(sp)
 401efc0:	dec00204 	addi	sp,sp,8
 401efc4:	f800283a 	ret

0401efc8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 401efc8:	defffa04 	addi	sp,sp,-24
 401efcc:	dfc00515 	stw	ra,20(sp)
 401efd0:	df000415 	stw	fp,16(sp)
 401efd4:	df000404 	addi	fp,sp,16
 401efd8:	e13ffe15 	stw	r4,-8(fp)
 401efdc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 401efe0:	e0bffe17 	ldw	r2,-8(fp)
 401efe4:	10000326 	beq	r2,zero,401eff4 <alt_dev_llist_insert+0x2c>
 401efe8:	e0bffe17 	ldw	r2,-8(fp)
 401efec:	10800217 	ldw	r2,8(r2)
 401eff0:	1000061e 	bne	r2,zero,401f00c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 401eff4:	401ef8c0 	call	401ef8c <alt_get_errno>
 401eff8:	1007883a 	mov	r3,r2
 401effc:	00800584 	movi	r2,22
 401f000:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 401f004:	00bffa84 	movi	r2,-22
 401f008:	00001306 	br	401f058 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 401f00c:	e0bffe17 	ldw	r2,-8(fp)
 401f010:	e0ffff17 	ldw	r3,-4(fp)
 401f014:	e0fffc15 	stw	r3,-16(fp)
 401f018:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 401f01c:	e0bffd17 	ldw	r2,-12(fp)
 401f020:	e0fffc17 	ldw	r3,-16(fp)
 401f024:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 401f028:	e0bffc17 	ldw	r2,-16(fp)
 401f02c:	10c00017 	ldw	r3,0(r2)
 401f030:	e0bffd17 	ldw	r2,-12(fp)
 401f034:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 401f038:	e0bffc17 	ldw	r2,-16(fp)
 401f03c:	10800017 	ldw	r2,0(r2)
 401f040:	e0fffd17 	ldw	r3,-12(fp)
 401f044:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 401f048:	e0bffc17 	ldw	r2,-16(fp)
 401f04c:	e0fffd17 	ldw	r3,-12(fp)
 401f050:	10c00015 	stw	r3,0(r2)

  return 0;  
 401f054:	0005883a 	mov	r2,zero
}
 401f058:	e037883a 	mov	sp,fp
 401f05c:	dfc00117 	ldw	ra,4(sp)
 401f060:	df000017 	ldw	fp,0(sp)
 401f064:	dec00204 	addi	sp,sp,8
 401f068:	f800283a 	ret

0401f06c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 401f06c:	defffd04 	addi	sp,sp,-12
 401f070:	dfc00215 	stw	ra,8(sp)
 401f074:	df000115 	stw	fp,4(sp)
 401f078:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401f07c:	008100b4 	movhi	r2,1026
 401f080:	1080a504 	addi	r2,r2,660
 401f084:	e0bfff15 	stw	r2,-4(fp)
 401f088:	00000606 	br	401f0a4 <_do_ctors+0x38>
        (*ctor) (); 
 401f08c:	e0bfff17 	ldw	r2,-4(fp)
 401f090:	10800017 	ldw	r2,0(r2)
 401f094:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401f098:	e0bfff17 	ldw	r2,-4(fp)
 401f09c:	10bfff04 	addi	r2,r2,-4
 401f0a0:	e0bfff15 	stw	r2,-4(fp)
 401f0a4:	e0ffff17 	ldw	r3,-4(fp)
 401f0a8:	008100b4 	movhi	r2,1026
 401f0ac:	1080a404 	addi	r2,r2,656
 401f0b0:	18bff62e 	bgeu	r3,r2,401f08c <__alt_data_end+0xfc01f08c>
        (*ctor) (); 
}
 401f0b4:	0001883a 	nop
 401f0b8:	e037883a 	mov	sp,fp
 401f0bc:	dfc00117 	ldw	ra,4(sp)
 401f0c0:	df000017 	ldw	fp,0(sp)
 401f0c4:	dec00204 	addi	sp,sp,8
 401f0c8:	f800283a 	ret

0401f0cc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 401f0cc:	defffd04 	addi	sp,sp,-12
 401f0d0:	dfc00215 	stw	ra,8(sp)
 401f0d4:	df000115 	stw	fp,4(sp)
 401f0d8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401f0dc:	008100b4 	movhi	r2,1026
 401f0e0:	1080a504 	addi	r2,r2,660
 401f0e4:	e0bfff15 	stw	r2,-4(fp)
 401f0e8:	00000606 	br	401f104 <_do_dtors+0x38>
        (*dtor) (); 
 401f0ec:	e0bfff17 	ldw	r2,-4(fp)
 401f0f0:	10800017 	ldw	r2,0(r2)
 401f0f4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401f0f8:	e0bfff17 	ldw	r2,-4(fp)
 401f0fc:	10bfff04 	addi	r2,r2,-4
 401f100:	e0bfff15 	stw	r2,-4(fp)
 401f104:	e0ffff17 	ldw	r3,-4(fp)
 401f108:	008100b4 	movhi	r2,1026
 401f10c:	1080a604 	addi	r2,r2,664
 401f110:	18bff62e 	bgeu	r3,r2,401f0ec <__alt_data_end+0xfc01f0ec>
        (*dtor) (); 
}
 401f114:	0001883a 	nop
 401f118:	e037883a 	mov	sp,fp
 401f11c:	dfc00117 	ldw	ra,4(sp)
 401f120:	df000017 	ldw	fp,0(sp)
 401f124:	dec00204 	addi	sp,sp,8
 401f128:	f800283a 	ret

0401f12c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 401f12c:	defffa04 	addi	sp,sp,-24
 401f130:	dfc00515 	stw	ra,20(sp)
 401f134:	df000415 	stw	fp,16(sp)
 401f138:	df000404 	addi	fp,sp,16
 401f13c:	e13ffe15 	stw	r4,-8(fp)
 401f140:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 401f144:	e0bfff17 	ldw	r2,-4(fp)
 401f148:	10800017 	ldw	r2,0(r2)
 401f14c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 401f150:	e13ffe17 	ldw	r4,-8(fp)
 401f154:	400f4e00 	call	400f4e0 <strlen>
 401f158:	10800044 	addi	r2,r2,1
 401f15c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401f160:	00000d06 	br	401f198 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 401f164:	e0bffc17 	ldw	r2,-16(fp)
 401f168:	10800217 	ldw	r2,8(r2)
 401f16c:	e0fffd17 	ldw	r3,-12(fp)
 401f170:	180d883a 	mov	r6,r3
 401f174:	e17ffe17 	ldw	r5,-8(fp)
 401f178:	1009883a 	mov	r4,r2
 401f17c:	401ff440 	call	401ff44 <memcmp>
 401f180:	1000021e 	bne	r2,zero,401f18c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 401f184:	e0bffc17 	ldw	r2,-16(fp)
 401f188:	00000706 	br	401f1a8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 401f18c:	e0bffc17 	ldw	r2,-16(fp)
 401f190:	10800017 	ldw	r2,0(r2)
 401f194:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401f198:	e0fffc17 	ldw	r3,-16(fp)
 401f19c:	e0bfff17 	ldw	r2,-4(fp)
 401f1a0:	18bff01e 	bne	r3,r2,401f164 <__alt_data_end+0xfc01f164>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 401f1a4:	0005883a 	mov	r2,zero
}
 401f1a8:	e037883a 	mov	sp,fp
 401f1ac:	dfc00117 	ldw	ra,4(sp)
 401f1b0:	df000017 	ldw	fp,0(sp)
 401f1b4:	dec00204 	addi	sp,sp,8
 401f1b8:	f800283a 	ret

0401f1bc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 401f1bc:	deffff04 	addi	sp,sp,-4
 401f1c0:	df000015 	stw	fp,0(sp)
 401f1c4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 401f1c8:	0001883a 	nop
 401f1cc:	e037883a 	mov	sp,fp
 401f1d0:	df000017 	ldw	fp,0(sp)
 401f1d4:	dec00104 	addi	sp,sp,4
 401f1d8:	f800283a 	ret

0401f1dc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401f1dc:	defff904 	addi	sp,sp,-28
 401f1e0:	dfc00615 	stw	ra,24(sp)
 401f1e4:	df000515 	stw	fp,20(sp)
 401f1e8:	df000504 	addi	fp,sp,20
 401f1ec:	e13ffc15 	stw	r4,-16(fp)
 401f1f0:	e17ffd15 	stw	r5,-12(fp)
 401f1f4:	e1bffe15 	stw	r6,-8(fp)
 401f1f8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 401f1fc:	e0800217 	ldw	r2,8(fp)
 401f200:	d8800015 	stw	r2,0(sp)
 401f204:	e1ffff17 	ldw	r7,-4(fp)
 401f208:	e1bffe17 	ldw	r6,-8(fp)
 401f20c:	e17ffd17 	ldw	r5,-12(fp)
 401f210:	e13ffc17 	ldw	r4,-16(fp)
 401f214:	401f38c0 	call	401f38c <alt_iic_isr_register>
}  
 401f218:	e037883a 	mov	sp,fp
 401f21c:	dfc00117 	ldw	ra,4(sp)
 401f220:	df000017 	ldw	fp,0(sp)
 401f224:	dec00204 	addi	sp,sp,8
 401f228:	f800283a 	ret

0401f22c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 401f22c:	defff904 	addi	sp,sp,-28
 401f230:	df000615 	stw	fp,24(sp)
 401f234:	df000604 	addi	fp,sp,24
 401f238:	e13ffe15 	stw	r4,-8(fp)
 401f23c:	e17fff15 	stw	r5,-4(fp)
 401f240:	e0bfff17 	ldw	r2,-4(fp)
 401f244:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401f248:	0005303a 	rdctl	r2,status
 401f24c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401f250:	e0fffb17 	ldw	r3,-20(fp)
 401f254:	00bfff84 	movi	r2,-2
 401f258:	1884703a 	and	r2,r3,r2
 401f25c:	1001703a 	wrctl	status,r2
  
  return context;
 401f260:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401f264:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 401f268:	00c00044 	movi	r3,1
 401f26c:	e0bffa17 	ldw	r2,-24(fp)
 401f270:	1884983a 	sll	r2,r3,r2
 401f274:	1007883a 	mov	r3,r2
 401f278:	d0b24617 	ldw	r2,-14056(gp)
 401f27c:	1884b03a 	or	r2,r3,r2
 401f280:	d0b24615 	stw	r2,-14056(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401f284:	d0b24617 	ldw	r2,-14056(gp)
 401f288:	100170fa 	wrctl	ienable,r2
 401f28c:	e0bffc17 	ldw	r2,-16(fp)
 401f290:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401f294:	e0bffd17 	ldw	r2,-12(fp)
 401f298:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401f29c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 401f2a0:	0001883a 	nop
}
 401f2a4:	e037883a 	mov	sp,fp
 401f2a8:	df000017 	ldw	fp,0(sp)
 401f2ac:	dec00104 	addi	sp,sp,4
 401f2b0:	f800283a 	ret

0401f2b4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 401f2b4:	defff904 	addi	sp,sp,-28
 401f2b8:	df000615 	stw	fp,24(sp)
 401f2bc:	df000604 	addi	fp,sp,24
 401f2c0:	e13ffe15 	stw	r4,-8(fp)
 401f2c4:	e17fff15 	stw	r5,-4(fp)
 401f2c8:	e0bfff17 	ldw	r2,-4(fp)
 401f2cc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401f2d0:	0005303a 	rdctl	r2,status
 401f2d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401f2d8:	e0fffb17 	ldw	r3,-20(fp)
 401f2dc:	00bfff84 	movi	r2,-2
 401f2e0:	1884703a 	and	r2,r3,r2
 401f2e4:	1001703a 	wrctl	status,r2
  
  return context;
 401f2e8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401f2ec:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 401f2f0:	00c00044 	movi	r3,1
 401f2f4:	e0bffa17 	ldw	r2,-24(fp)
 401f2f8:	1884983a 	sll	r2,r3,r2
 401f2fc:	0084303a 	nor	r2,zero,r2
 401f300:	1007883a 	mov	r3,r2
 401f304:	d0b24617 	ldw	r2,-14056(gp)
 401f308:	1884703a 	and	r2,r3,r2
 401f30c:	d0b24615 	stw	r2,-14056(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401f310:	d0b24617 	ldw	r2,-14056(gp)
 401f314:	100170fa 	wrctl	ienable,r2
 401f318:	e0bffc17 	ldw	r2,-16(fp)
 401f31c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401f320:	e0bffd17 	ldw	r2,-12(fp)
 401f324:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401f328:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 401f32c:	0001883a 	nop
}
 401f330:	e037883a 	mov	sp,fp
 401f334:	df000017 	ldw	fp,0(sp)
 401f338:	dec00104 	addi	sp,sp,4
 401f33c:	f800283a 	ret

0401f340 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 401f340:	defffc04 	addi	sp,sp,-16
 401f344:	df000315 	stw	fp,12(sp)
 401f348:	df000304 	addi	fp,sp,12
 401f34c:	e13ffe15 	stw	r4,-8(fp)
 401f350:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 401f354:	000530fa 	rdctl	r2,ienable
 401f358:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 401f35c:	00c00044 	movi	r3,1
 401f360:	e0bfff17 	ldw	r2,-4(fp)
 401f364:	1884983a 	sll	r2,r3,r2
 401f368:	1007883a 	mov	r3,r2
 401f36c:	e0bffd17 	ldw	r2,-12(fp)
 401f370:	1884703a 	and	r2,r3,r2
 401f374:	1004c03a 	cmpne	r2,r2,zero
 401f378:	10803fcc 	andi	r2,r2,255
}
 401f37c:	e037883a 	mov	sp,fp
 401f380:	df000017 	ldw	fp,0(sp)
 401f384:	dec00104 	addi	sp,sp,4
 401f388:	f800283a 	ret

0401f38c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401f38c:	defff504 	addi	sp,sp,-44
 401f390:	dfc00a15 	stw	ra,40(sp)
 401f394:	df000915 	stw	fp,36(sp)
 401f398:	df000904 	addi	fp,sp,36
 401f39c:	e13ffc15 	stw	r4,-16(fp)
 401f3a0:	e17ffd15 	stw	r5,-12(fp)
 401f3a4:	e1bffe15 	stw	r6,-8(fp)
 401f3a8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 401f3ac:	00bffa84 	movi	r2,-22
 401f3b0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 401f3b4:	e0bffd17 	ldw	r2,-12(fp)
 401f3b8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 401f3bc:	e0bff817 	ldw	r2,-32(fp)
 401f3c0:	10800808 	cmpgei	r2,r2,32
 401f3c4:	1000271e 	bne	r2,zero,401f464 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401f3c8:	0005303a 	rdctl	r2,status
 401f3cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401f3d0:	e0fffb17 	ldw	r3,-20(fp)
 401f3d4:	00bfff84 	movi	r2,-2
 401f3d8:	1884703a 	and	r2,r3,r2
 401f3dc:	1001703a 	wrctl	status,r2
  
  return context;
 401f3e0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 401f3e4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 401f3e8:	008100f4 	movhi	r2,1027
 401f3ec:	10b66704 	addi	r2,r2,-9828
 401f3f0:	e0fff817 	ldw	r3,-32(fp)
 401f3f4:	180690fa 	slli	r3,r3,3
 401f3f8:	10c5883a 	add	r2,r2,r3
 401f3fc:	e0fffe17 	ldw	r3,-8(fp)
 401f400:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 401f404:	008100f4 	movhi	r2,1027
 401f408:	10b66704 	addi	r2,r2,-9828
 401f40c:	e0fff817 	ldw	r3,-32(fp)
 401f410:	180690fa 	slli	r3,r3,3
 401f414:	10c5883a 	add	r2,r2,r3
 401f418:	10800104 	addi	r2,r2,4
 401f41c:	e0ffff17 	ldw	r3,-4(fp)
 401f420:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 401f424:	e0bffe17 	ldw	r2,-8(fp)
 401f428:	10000526 	beq	r2,zero,401f440 <alt_iic_isr_register+0xb4>
 401f42c:	e0bff817 	ldw	r2,-32(fp)
 401f430:	100b883a 	mov	r5,r2
 401f434:	e13ffc17 	ldw	r4,-16(fp)
 401f438:	401f22c0 	call	401f22c <alt_ic_irq_enable>
 401f43c:	00000406 	br	401f450 <alt_iic_isr_register+0xc4>
 401f440:	e0bff817 	ldw	r2,-32(fp)
 401f444:	100b883a 	mov	r5,r2
 401f448:	e13ffc17 	ldw	r4,-16(fp)
 401f44c:	401f2b40 	call	401f2b4 <alt_ic_irq_disable>
 401f450:	e0bff715 	stw	r2,-36(fp)
 401f454:	e0bffa17 	ldw	r2,-24(fp)
 401f458:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401f45c:	e0bff917 	ldw	r2,-28(fp)
 401f460:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 401f464:	e0bff717 	ldw	r2,-36(fp)
}
 401f468:	e037883a 	mov	sp,fp
 401f46c:	dfc00117 	ldw	ra,4(sp)
 401f470:	df000017 	ldw	fp,0(sp)
 401f474:	dec00204 	addi	sp,sp,8
 401f478:	f800283a 	ret

0401f47c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 401f47c:	defff804 	addi	sp,sp,-32
 401f480:	dfc00715 	stw	ra,28(sp)
 401f484:	df000615 	stw	fp,24(sp)
 401f488:	dc000515 	stw	r16,20(sp)
 401f48c:	df000604 	addi	fp,sp,24
 401f490:	e13ffb15 	stw	r4,-20(fp)
 401f494:	e17ffc15 	stw	r5,-16(fp)
 401f498:	e1bffd15 	stw	r6,-12(fp)
 401f49c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 401f4a0:	e1bffe17 	ldw	r6,-8(fp)
 401f4a4:	e17ffd17 	ldw	r5,-12(fp)
 401f4a8:	e13ffc17 	ldw	r4,-16(fp)
 401f4ac:	401f7040 	call	401f704 <open>
 401f4b0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 401f4b4:	e0bffa17 	ldw	r2,-24(fp)
 401f4b8:	10002216 	blt	r2,zero,401f544 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 401f4bc:	040100b4 	movhi	r16,1026
 401f4c0:	841f5504 	addi	r16,r16,32084
 401f4c4:	e0bffa17 	ldw	r2,-24(fp)
 401f4c8:	01400304 	movi	r5,12
 401f4cc:	1009883a 	mov	r4,r2
 401f4d0:	400d3680 	call	400d368 <__mulsi3>
 401f4d4:	8085883a 	add	r2,r16,r2
 401f4d8:	10c00017 	ldw	r3,0(r2)
 401f4dc:	e0bffb17 	ldw	r2,-20(fp)
 401f4e0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 401f4e4:	040100b4 	movhi	r16,1026
 401f4e8:	841f5504 	addi	r16,r16,32084
 401f4ec:	e0bffa17 	ldw	r2,-24(fp)
 401f4f0:	01400304 	movi	r5,12
 401f4f4:	1009883a 	mov	r4,r2
 401f4f8:	400d3680 	call	400d368 <__mulsi3>
 401f4fc:	8085883a 	add	r2,r16,r2
 401f500:	10800104 	addi	r2,r2,4
 401f504:	10c00017 	ldw	r3,0(r2)
 401f508:	e0bffb17 	ldw	r2,-20(fp)
 401f50c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 401f510:	040100b4 	movhi	r16,1026
 401f514:	841f5504 	addi	r16,r16,32084
 401f518:	e0bffa17 	ldw	r2,-24(fp)
 401f51c:	01400304 	movi	r5,12
 401f520:	1009883a 	mov	r4,r2
 401f524:	400d3680 	call	400d368 <__mulsi3>
 401f528:	8085883a 	add	r2,r16,r2
 401f52c:	10800204 	addi	r2,r2,8
 401f530:	10c00017 	ldw	r3,0(r2)
 401f534:	e0bffb17 	ldw	r2,-20(fp)
 401f538:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 401f53c:	e13ffa17 	ldw	r4,-24(fp)
 401f540:	401bf480 	call	401bf48 <alt_release_fd>
  }
} 
 401f544:	0001883a 	nop
 401f548:	e6ffff04 	addi	sp,fp,-4
 401f54c:	dfc00217 	ldw	ra,8(sp)
 401f550:	df000117 	ldw	fp,4(sp)
 401f554:	dc000017 	ldw	r16,0(sp)
 401f558:	dec00304 	addi	sp,sp,12
 401f55c:	f800283a 	ret

0401f560 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 401f560:	defffb04 	addi	sp,sp,-20
 401f564:	dfc00415 	stw	ra,16(sp)
 401f568:	df000315 	stw	fp,12(sp)
 401f56c:	df000304 	addi	fp,sp,12
 401f570:	e13ffd15 	stw	r4,-12(fp)
 401f574:	e17ffe15 	stw	r5,-8(fp)
 401f578:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 401f57c:	01c07fc4 	movi	r7,511
 401f580:	01800044 	movi	r6,1
 401f584:	e17ffd17 	ldw	r5,-12(fp)
 401f588:	010100b4 	movhi	r4,1026
 401f58c:	211f5804 	addi	r4,r4,32096
 401f590:	401f47c0 	call	401f47c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 401f594:	01c07fc4 	movi	r7,511
 401f598:	000d883a 	mov	r6,zero
 401f59c:	e17ffe17 	ldw	r5,-8(fp)
 401f5a0:	010100b4 	movhi	r4,1026
 401f5a4:	211f5504 	addi	r4,r4,32084
 401f5a8:	401f47c0 	call	401f47c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 401f5ac:	01c07fc4 	movi	r7,511
 401f5b0:	01800044 	movi	r6,1
 401f5b4:	e17fff17 	ldw	r5,-4(fp)
 401f5b8:	010100b4 	movhi	r4,1026
 401f5bc:	211f5b04 	addi	r4,r4,32108
 401f5c0:	401f47c0 	call	401f47c <alt_open_fd>
}  
 401f5c4:	0001883a 	nop
 401f5c8:	e037883a 	mov	sp,fp
 401f5cc:	dfc00117 	ldw	ra,4(sp)
 401f5d0:	df000017 	ldw	fp,0(sp)
 401f5d4:	dec00204 	addi	sp,sp,8
 401f5d8:	f800283a 	ret

0401f5dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401f5dc:	defffe04 	addi	sp,sp,-8
 401f5e0:	dfc00115 	stw	ra,4(sp)
 401f5e4:	df000015 	stw	fp,0(sp)
 401f5e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401f5ec:	d0a5b717 	ldw	r2,-26916(gp)
 401f5f0:	10000326 	beq	r2,zero,401f600 <alt_get_errno+0x24>
 401f5f4:	d0a5b717 	ldw	r2,-26916(gp)
 401f5f8:	103ee83a 	callr	r2
 401f5fc:	00000106 	br	401f604 <alt_get_errno+0x28>
 401f600:	d0b23f04 	addi	r2,gp,-14084
}
 401f604:	e037883a 	mov	sp,fp
 401f608:	dfc00117 	ldw	ra,4(sp)
 401f60c:	df000017 	ldw	fp,0(sp)
 401f610:	dec00204 	addi	sp,sp,8
 401f614:	f800283a 	ret

0401f618 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 401f618:	defffb04 	addi	sp,sp,-20
 401f61c:	dfc00415 	stw	ra,16(sp)
 401f620:	df000315 	stw	fp,12(sp)
 401f624:	dc000215 	stw	r16,8(sp)
 401f628:	df000304 	addi	fp,sp,12
 401f62c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 401f630:	e0bffe17 	ldw	r2,-8(fp)
 401f634:	10800217 	ldw	r2,8(r2)
 401f638:	10d00034 	orhi	r3,r2,16384
 401f63c:	e0bffe17 	ldw	r2,-8(fp)
 401f640:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401f644:	e03ffd15 	stw	zero,-12(fp)
 401f648:	00002306 	br	401f6d8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401f64c:	040100b4 	movhi	r16,1026
 401f650:	841f5504 	addi	r16,r16,32084
 401f654:	e0bffd17 	ldw	r2,-12(fp)
 401f658:	01400304 	movi	r5,12
 401f65c:	1009883a 	mov	r4,r2
 401f660:	400d3680 	call	400d368 <__mulsi3>
 401f664:	8085883a 	add	r2,r16,r2
 401f668:	10c00017 	ldw	r3,0(r2)
 401f66c:	e0bffe17 	ldw	r2,-8(fp)
 401f670:	10800017 	ldw	r2,0(r2)
 401f674:	1880151e 	bne	r3,r2,401f6cc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401f678:	040100b4 	movhi	r16,1026
 401f67c:	841f5504 	addi	r16,r16,32084
 401f680:	e0bffd17 	ldw	r2,-12(fp)
 401f684:	01400304 	movi	r5,12
 401f688:	1009883a 	mov	r4,r2
 401f68c:	400d3680 	call	400d368 <__mulsi3>
 401f690:	8085883a 	add	r2,r16,r2
 401f694:	10800204 	addi	r2,r2,8
 401f698:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401f69c:	10000b0e 	bge	r2,zero,401f6cc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 401f6a0:	01400304 	movi	r5,12
 401f6a4:	e13ffd17 	ldw	r4,-12(fp)
 401f6a8:	400d3680 	call	400d368 <__mulsi3>
 401f6ac:	1007883a 	mov	r3,r2
 401f6b0:	008100b4 	movhi	r2,1026
 401f6b4:	109f5504 	addi	r2,r2,32084
 401f6b8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401f6bc:	e0bffe17 	ldw	r2,-8(fp)
 401f6c0:	18800226 	beq	r3,r2,401f6cc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 401f6c4:	00bffcc4 	movi	r2,-13
 401f6c8:	00000806 	br	401f6ec <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401f6cc:	e0bffd17 	ldw	r2,-12(fp)
 401f6d0:	10800044 	addi	r2,r2,1
 401f6d4:	e0bffd15 	stw	r2,-12(fp)
 401f6d8:	d0a5b617 	ldw	r2,-26920(gp)
 401f6dc:	1007883a 	mov	r3,r2
 401f6e0:	e0bffd17 	ldw	r2,-12(fp)
 401f6e4:	18bfd92e 	bgeu	r3,r2,401f64c <__alt_data_end+0xfc01f64c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 401f6e8:	0005883a 	mov	r2,zero
}
 401f6ec:	e6ffff04 	addi	sp,fp,-4
 401f6f0:	dfc00217 	ldw	ra,8(sp)
 401f6f4:	df000117 	ldw	fp,4(sp)
 401f6f8:	dc000017 	ldw	r16,0(sp)
 401f6fc:	dec00304 	addi	sp,sp,12
 401f700:	f800283a 	ret

0401f704 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 401f704:	defff604 	addi	sp,sp,-40
 401f708:	dfc00915 	stw	ra,36(sp)
 401f70c:	df000815 	stw	fp,32(sp)
 401f710:	df000804 	addi	fp,sp,32
 401f714:	e13ffd15 	stw	r4,-12(fp)
 401f718:	e17ffe15 	stw	r5,-8(fp)
 401f71c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 401f720:	00bfffc4 	movi	r2,-1
 401f724:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 401f728:	00bffb44 	movi	r2,-19
 401f72c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 401f730:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 401f734:	d165b404 	addi	r5,gp,-26928
 401f738:	e13ffd17 	ldw	r4,-12(fp)
 401f73c:	401f12c0 	call	401f12c <alt_find_dev>
 401f740:	e0bff815 	stw	r2,-32(fp)
 401f744:	e0bff817 	ldw	r2,-32(fp)
 401f748:	1000051e 	bne	r2,zero,401f760 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 401f74c:	e13ffd17 	ldw	r4,-12(fp)
 401f750:	401fc900 	call	401fc90 <alt_find_file>
 401f754:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 401f758:	00800044 	movi	r2,1
 401f75c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 401f760:	e0bff817 	ldw	r2,-32(fp)
 401f764:	10002b26 	beq	r2,zero,401f814 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 401f768:	e13ff817 	ldw	r4,-32(fp)
 401f76c:	401fd980 	call	401fd98 <alt_get_fd>
 401f770:	e0bff915 	stw	r2,-28(fp)
 401f774:	e0bff917 	ldw	r2,-28(fp)
 401f778:	1000030e 	bge	r2,zero,401f788 <open+0x84>
    {
      status = index;
 401f77c:	e0bff917 	ldw	r2,-28(fp)
 401f780:	e0bffa15 	stw	r2,-24(fp)
 401f784:	00002506 	br	401f81c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 401f788:	01400304 	movi	r5,12
 401f78c:	e13ff917 	ldw	r4,-28(fp)
 401f790:	400d3680 	call	400d368 <__mulsi3>
 401f794:	1007883a 	mov	r3,r2
 401f798:	008100b4 	movhi	r2,1026
 401f79c:	109f5504 	addi	r2,r2,32084
 401f7a0:	1885883a 	add	r2,r3,r2
 401f7a4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 401f7a8:	e0fffe17 	ldw	r3,-8(fp)
 401f7ac:	00900034 	movhi	r2,16384
 401f7b0:	10bfffc4 	addi	r2,r2,-1
 401f7b4:	1886703a 	and	r3,r3,r2
 401f7b8:	e0bffc17 	ldw	r2,-16(fp)
 401f7bc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 401f7c0:	e0bffb17 	ldw	r2,-20(fp)
 401f7c4:	1000051e 	bne	r2,zero,401f7dc <open+0xd8>
 401f7c8:	e13ffc17 	ldw	r4,-16(fp)
 401f7cc:	401f6180 	call	401f618 <alt_file_locked>
 401f7d0:	e0bffa15 	stw	r2,-24(fp)
 401f7d4:	e0bffa17 	ldw	r2,-24(fp)
 401f7d8:	10001016 	blt	r2,zero,401f81c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 401f7dc:	e0bff817 	ldw	r2,-32(fp)
 401f7e0:	10800317 	ldw	r2,12(r2)
 401f7e4:	10000826 	beq	r2,zero,401f808 <open+0x104>
 401f7e8:	e0bff817 	ldw	r2,-32(fp)
 401f7ec:	10800317 	ldw	r2,12(r2)
 401f7f0:	e1ffff17 	ldw	r7,-4(fp)
 401f7f4:	e1bffe17 	ldw	r6,-8(fp)
 401f7f8:	e17ffd17 	ldw	r5,-12(fp)
 401f7fc:	e13ffc17 	ldw	r4,-16(fp)
 401f800:	103ee83a 	callr	r2
 401f804:	00000106 	br	401f80c <open+0x108>
 401f808:	0005883a 	mov	r2,zero
 401f80c:	e0bffa15 	stw	r2,-24(fp)
 401f810:	00000206 	br	401f81c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 401f814:	00bffb44 	movi	r2,-19
 401f818:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 401f81c:	e0bffa17 	ldw	r2,-24(fp)
 401f820:	1000090e 	bge	r2,zero,401f848 <open+0x144>
  {
    alt_release_fd (index);  
 401f824:	e13ff917 	ldw	r4,-28(fp)
 401f828:	401bf480 	call	401bf48 <alt_release_fd>
    ALT_ERRNO = -status;
 401f82c:	401f5dc0 	call	401f5dc <alt_get_errno>
 401f830:	1007883a 	mov	r3,r2
 401f834:	e0bffa17 	ldw	r2,-24(fp)
 401f838:	0085c83a 	sub	r2,zero,r2
 401f83c:	18800015 	stw	r2,0(r3)
    return -1;
 401f840:	00bfffc4 	movi	r2,-1
 401f844:	00000106 	br	401f84c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 401f848:	e0bff917 	ldw	r2,-28(fp)
}
 401f84c:	e037883a 	mov	sp,fp
 401f850:	dfc00117 	ldw	ra,4(sp)
 401f854:	df000017 	ldw	fp,0(sp)
 401f858:	dec00204 	addi	sp,sp,8
 401f85c:	f800283a 	ret

0401f860 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 401f860:	defff204 	addi	sp,sp,-56
 401f864:	dfc00a15 	stw	ra,40(sp)
 401f868:	df000915 	stw	fp,36(sp)
 401f86c:	df000904 	addi	fp,sp,36
 401f870:	e13fff15 	stw	r4,-4(fp)
 401f874:	e1400215 	stw	r5,8(fp)
 401f878:	e1800315 	stw	r6,12(fp)
 401f87c:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 401f880:	e0800204 	addi	r2,fp,8
 401f884:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 401f888:	e0bfff17 	ldw	r2,-4(fp)
 401f88c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 401f890:	00006f06 	br	401fa50 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 401f894:	e0bff807 	ldb	r2,-32(fp)
 401f898:	10800960 	cmpeqi	r2,r2,37
 401f89c:	1000041e 	bne	r2,zero,401f8b0 <alt_printf+0x50>
        {
            alt_putchar(c);
 401f8a0:	e0bff807 	ldb	r2,-32(fp)
 401f8a4:	1009883a 	mov	r4,r2
 401f8a8:	401fa8c0 	call	401fa8c <alt_putchar>
 401f8ac:	00006806 	br	401fa50 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 401f8b0:	e0bff717 	ldw	r2,-36(fp)
 401f8b4:	10c00044 	addi	r3,r2,1
 401f8b8:	e0fff715 	stw	r3,-36(fp)
 401f8bc:	10800003 	ldbu	r2,0(r2)
 401f8c0:	e0bff805 	stb	r2,-32(fp)
 401f8c4:	e0bff807 	ldb	r2,-32(fp)
 401f8c8:	10006926 	beq	r2,zero,401fa70 <alt_printf+0x210>
            {
                if (c == '%')
 401f8cc:	e0bff807 	ldb	r2,-32(fp)
 401f8d0:	10800958 	cmpnei	r2,r2,37
 401f8d4:	1000041e 	bne	r2,zero,401f8e8 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 401f8d8:	e0bff807 	ldb	r2,-32(fp)
 401f8dc:	1009883a 	mov	r4,r2
 401f8e0:	401fa8c0 	call	401fa8c <alt_putchar>
 401f8e4:	00005a06 	br	401fa50 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 401f8e8:	e0bff807 	ldb	r2,-32(fp)
 401f8ec:	108018d8 	cmpnei	r2,r2,99
 401f8f0:	1000081e 	bne	r2,zero,401f914 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 401f8f4:	e0bffe17 	ldw	r2,-8(fp)
 401f8f8:	10c00104 	addi	r3,r2,4
 401f8fc:	e0fffe15 	stw	r3,-8(fp)
 401f900:	10800017 	ldw	r2,0(r2)
 401f904:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 401f908:	e13ffd17 	ldw	r4,-12(fp)
 401f90c:	401fa8c0 	call	401fa8c <alt_putchar>
 401f910:	00004f06 	br	401fa50 <alt_printf+0x1f0>
                }
                else if (c == 'x')
 401f914:	e0bff807 	ldb	r2,-32(fp)
 401f918:	10801e18 	cmpnei	r2,r2,120
 401f91c:	1000341e 	bne	r2,zero,401f9f0 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 401f920:	e0bffe17 	ldw	r2,-8(fp)
 401f924:	10c00104 	addi	r3,r2,4
 401f928:	e0fffe15 	stw	r3,-8(fp)
 401f92c:	10800017 	ldw	r2,0(r2)
 401f930:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 401f934:	e0bffb17 	ldw	r2,-20(fp)
 401f938:	1000031e 	bne	r2,zero,401f948 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 401f93c:	01000c04 	movi	r4,48
 401f940:	401fa8c0 	call	401fa8c <alt_putchar>
                        continue;
 401f944:	00004206 	br	401fa50 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 401f948:	00800704 	movi	r2,28
 401f94c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 401f950:	00000306 	br	401f960 <alt_printf+0x100>
                        digit_shift -= 4;
 401f954:	e0bff917 	ldw	r2,-28(fp)
 401f958:	10bfff04 	addi	r2,r2,-4
 401f95c:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 401f960:	00c003c4 	movi	r3,15
 401f964:	e0bff917 	ldw	r2,-28(fp)
 401f968:	1884983a 	sll	r2,r3,r2
 401f96c:	1007883a 	mov	r3,r2
 401f970:	e0bffb17 	ldw	r2,-20(fp)
 401f974:	1884703a 	and	r2,r3,r2
 401f978:	103ff626 	beq	r2,zero,401f954 <__alt_data_end+0xfc01f954>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 401f97c:	00001906 	br	401f9e4 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 401f980:	00c003c4 	movi	r3,15
 401f984:	e0bff917 	ldw	r2,-28(fp)
 401f988:	1884983a 	sll	r2,r3,r2
 401f98c:	1007883a 	mov	r3,r2
 401f990:	e0bffb17 	ldw	r2,-20(fp)
 401f994:	1886703a 	and	r3,r3,r2
 401f998:	e0bff917 	ldw	r2,-28(fp)
 401f99c:	1884d83a 	srl	r2,r3,r2
 401f9a0:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 401f9a4:	e0bffc17 	ldw	r2,-16(fp)
 401f9a8:	108002a8 	cmpgeui	r2,r2,10
 401f9ac:	1000041e 	bne	r2,zero,401f9c0 <alt_printf+0x160>
                            c = '0' + digit;
 401f9b0:	e0bffc17 	ldw	r2,-16(fp)
 401f9b4:	10800c04 	addi	r2,r2,48
 401f9b8:	e0bff805 	stb	r2,-32(fp)
 401f9bc:	00000306 	br	401f9cc <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 401f9c0:	e0bffc17 	ldw	r2,-16(fp)
 401f9c4:	108015c4 	addi	r2,r2,87
 401f9c8:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 401f9cc:	e0bff807 	ldb	r2,-32(fp)
 401f9d0:	1009883a 	mov	r4,r2
 401f9d4:	401fa8c0 	call	401fa8c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 401f9d8:	e0bff917 	ldw	r2,-28(fp)
 401f9dc:	10bfff04 	addi	r2,r2,-4
 401f9e0:	e0bff915 	stw	r2,-28(fp)
 401f9e4:	e0bff917 	ldw	r2,-28(fp)
 401f9e8:	103fe50e 	bge	r2,zero,401f980 <__alt_data_end+0xfc01f980>
 401f9ec:	00001806 	br	401fa50 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 401f9f0:	e0bff807 	ldb	r2,-32(fp)
 401f9f4:	10801cd8 	cmpnei	r2,r2,115
 401f9f8:	1000151e 	bne	r2,zero,401fa50 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 401f9fc:	e0bffe17 	ldw	r2,-8(fp)
 401fa00:	10c00104 	addi	r3,r2,4
 401fa04:	e0fffe15 	stw	r3,-8(fp)
 401fa08:	10800017 	ldw	r2,0(r2)
 401fa0c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 401fa10:	00000906 	br	401fa38 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 401fa14:	e0bffa17 	ldw	r2,-24(fp)
 401fa18:	10c00044 	addi	r3,r2,1
 401fa1c:	e0fffa15 	stw	r3,-24(fp)
 401fa20:	10800003 	ldbu	r2,0(r2)
 401fa24:	10803fcc 	andi	r2,r2,255
 401fa28:	1080201c 	xori	r2,r2,128
 401fa2c:	10bfe004 	addi	r2,r2,-128
 401fa30:	1009883a 	mov	r4,r2
 401fa34:	401fa8c0 	call	401fa8c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 401fa38:	e0bffa17 	ldw	r2,-24(fp)
 401fa3c:	10800003 	ldbu	r2,0(r2)
 401fa40:	10803fcc 	andi	r2,r2,255
 401fa44:	1080201c 	xori	r2,r2,128
 401fa48:	10bfe004 	addi	r2,r2,-128
 401fa4c:	103ff11e 	bne	r2,zero,401fa14 <__alt_data_end+0xfc01fa14>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 401fa50:	e0bff717 	ldw	r2,-36(fp)
 401fa54:	10c00044 	addi	r3,r2,1
 401fa58:	e0fff715 	stw	r3,-36(fp)
 401fa5c:	10800003 	ldbu	r2,0(r2)
 401fa60:	e0bff805 	stb	r2,-32(fp)
 401fa64:	e0bff807 	ldb	r2,-32(fp)
 401fa68:	103f8a1e 	bne	r2,zero,401f894 <__alt_data_end+0xfc01f894>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 401fa6c:	00000106 	br	401fa74 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 401fa70:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 401fa74:	0001883a 	nop
 401fa78:	e037883a 	mov	sp,fp
 401fa7c:	dfc00117 	ldw	ra,4(sp)
 401fa80:	df000017 	ldw	fp,0(sp)
 401fa84:	dec00504 	addi	sp,sp,20
 401fa88:	f800283a 	ret

0401fa8c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 401fa8c:	defffd04 	addi	sp,sp,-12
 401fa90:	dfc00215 	stw	ra,8(sp)
 401fa94:	df000115 	stw	fp,4(sp)
 401fa98:	df000104 	addi	fp,sp,4
 401fa9c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 401faa0:	d0a5ad17 	ldw	r2,-26956(gp)
 401faa4:	10800217 	ldw	r2,8(r2)
 401faa8:	100b883a 	mov	r5,r2
 401faac:	e13fff17 	ldw	r4,-4(fp)
 401fab0:	4015a440 	call	4015a44 <putc>
#endif
#endif
}
 401fab4:	e037883a 	mov	sp,fp
 401fab8:	dfc00117 	ldw	ra,4(sp)
 401fabc:	df000017 	ldw	fp,0(sp)
 401fac0:	dec00204 	addi	sp,sp,8
 401fac4:	f800283a 	ret

0401fac8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 401fac8:	defffa04 	addi	sp,sp,-24
 401facc:	df000515 	stw	fp,20(sp)
 401fad0:	df000504 	addi	fp,sp,20
 401fad4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401fad8:	0005303a 	rdctl	r2,status
 401fadc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401fae0:	e0fffc17 	ldw	r3,-16(fp)
 401fae4:	00bfff84 	movi	r2,-2
 401fae8:	1884703a 	and	r2,r3,r2
 401faec:	1001703a 	wrctl	status,r2
  
  return context;
 401faf0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 401faf4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 401faf8:	e0bfff17 	ldw	r2,-4(fp)
 401fafc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 401fb00:	e0bffd17 	ldw	r2,-12(fp)
 401fb04:	10800017 	ldw	r2,0(r2)
 401fb08:	e0fffd17 	ldw	r3,-12(fp)
 401fb0c:	18c00117 	ldw	r3,4(r3)
 401fb10:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 401fb14:	e0bffd17 	ldw	r2,-12(fp)
 401fb18:	10800117 	ldw	r2,4(r2)
 401fb1c:	e0fffd17 	ldw	r3,-12(fp)
 401fb20:	18c00017 	ldw	r3,0(r3)
 401fb24:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 401fb28:	e0bffd17 	ldw	r2,-12(fp)
 401fb2c:	e0fffd17 	ldw	r3,-12(fp)
 401fb30:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 401fb34:	e0bffd17 	ldw	r2,-12(fp)
 401fb38:	e0fffd17 	ldw	r3,-12(fp)
 401fb3c:	10c00015 	stw	r3,0(r2)
 401fb40:	e0bffb17 	ldw	r2,-20(fp)
 401fb44:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401fb48:	e0bffe17 	ldw	r2,-8(fp)
 401fb4c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 401fb50:	0001883a 	nop
 401fb54:	e037883a 	mov	sp,fp
 401fb58:	df000017 	ldw	fp,0(sp)
 401fb5c:	dec00104 	addi	sp,sp,4
 401fb60:	f800283a 	ret

0401fb64 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 401fb64:	defffb04 	addi	sp,sp,-20
 401fb68:	dfc00415 	stw	ra,16(sp)
 401fb6c:	df000315 	stw	fp,12(sp)
 401fb70:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 401fb74:	d0a5bc17 	ldw	r2,-26896(gp)
 401fb78:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 401fb7c:	d0b24817 	ldw	r2,-14048(gp)
 401fb80:	10800044 	addi	r2,r2,1
 401fb84:	d0b24815 	stw	r2,-14048(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401fb88:	00002e06 	br	401fc44 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 401fb8c:	e0bffd17 	ldw	r2,-12(fp)
 401fb90:	10800017 	ldw	r2,0(r2)
 401fb94:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 401fb98:	e0bffd17 	ldw	r2,-12(fp)
 401fb9c:	10800403 	ldbu	r2,16(r2)
 401fba0:	10803fcc 	andi	r2,r2,255
 401fba4:	10000426 	beq	r2,zero,401fbb8 <alt_tick+0x54>
 401fba8:	d0b24817 	ldw	r2,-14048(gp)
 401fbac:	1000021e 	bne	r2,zero,401fbb8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 401fbb0:	e0bffd17 	ldw	r2,-12(fp)
 401fbb4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 401fbb8:	e0bffd17 	ldw	r2,-12(fp)
 401fbbc:	10800217 	ldw	r2,8(r2)
 401fbc0:	d0f24817 	ldw	r3,-14048(gp)
 401fbc4:	18801d36 	bltu	r3,r2,401fc3c <alt_tick+0xd8>
 401fbc8:	e0bffd17 	ldw	r2,-12(fp)
 401fbcc:	10800403 	ldbu	r2,16(r2)
 401fbd0:	10803fcc 	andi	r2,r2,255
 401fbd4:	1000191e 	bne	r2,zero,401fc3c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 401fbd8:	e0bffd17 	ldw	r2,-12(fp)
 401fbdc:	10800317 	ldw	r2,12(r2)
 401fbe0:	e0fffd17 	ldw	r3,-12(fp)
 401fbe4:	18c00517 	ldw	r3,20(r3)
 401fbe8:	1809883a 	mov	r4,r3
 401fbec:	103ee83a 	callr	r2
 401fbf0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 401fbf4:	e0bfff17 	ldw	r2,-4(fp)
 401fbf8:	1000031e 	bne	r2,zero,401fc08 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 401fbfc:	e13ffd17 	ldw	r4,-12(fp)
 401fc00:	401fac80 	call	401fac8 <alt_alarm_stop>
 401fc04:	00000d06 	br	401fc3c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 401fc08:	e0bffd17 	ldw	r2,-12(fp)
 401fc0c:	10c00217 	ldw	r3,8(r2)
 401fc10:	e0bfff17 	ldw	r2,-4(fp)
 401fc14:	1887883a 	add	r3,r3,r2
 401fc18:	e0bffd17 	ldw	r2,-12(fp)
 401fc1c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 401fc20:	e0bffd17 	ldw	r2,-12(fp)
 401fc24:	10c00217 	ldw	r3,8(r2)
 401fc28:	d0b24817 	ldw	r2,-14048(gp)
 401fc2c:	1880032e 	bgeu	r3,r2,401fc3c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 401fc30:	e0bffd17 	ldw	r2,-12(fp)
 401fc34:	00c00044 	movi	r3,1
 401fc38:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 401fc3c:	e0bffe17 	ldw	r2,-8(fp)
 401fc40:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401fc44:	e0fffd17 	ldw	r3,-12(fp)
 401fc48:	d0a5bc04 	addi	r2,gp,-26896
 401fc4c:	18bfcf1e 	bne	r3,r2,401fb8c <__alt_data_end+0xfc01fb8c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 401fc50:	0001883a 	nop
}
 401fc54:	0001883a 	nop
 401fc58:	e037883a 	mov	sp,fp
 401fc5c:	dfc00117 	ldw	ra,4(sp)
 401fc60:	df000017 	ldw	fp,0(sp)
 401fc64:	dec00204 	addi	sp,sp,8
 401fc68:	f800283a 	ret

0401fc6c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 401fc6c:	deffff04 	addi	sp,sp,-4
 401fc70:	df000015 	stw	fp,0(sp)
 401fc74:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 401fc78:	000170fa 	wrctl	ienable,zero
}
 401fc7c:	0001883a 	nop
 401fc80:	e037883a 	mov	sp,fp
 401fc84:	df000017 	ldw	fp,0(sp)
 401fc88:	dec00104 	addi	sp,sp,4
 401fc8c:	f800283a 	ret

0401fc90 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 401fc90:	defffb04 	addi	sp,sp,-20
 401fc94:	dfc00415 	stw	ra,16(sp)
 401fc98:	df000315 	stw	fp,12(sp)
 401fc9c:	df000304 	addi	fp,sp,12
 401fca0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 401fca4:	d0a5b217 	ldw	r2,-26936(gp)
 401fca8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401fcac:	00003106 	br	401fd74 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 401fcb0:	e0bffd17 	ldw	r2,-12(fp)
 401fcb4:	10800217 	ldw	r2,8(r2)
 401fcb8:	1009883a 	mov	r4,r2
 401fcbc:	400f4e00 	call	400f4e0 <strlen>
 401fcc0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 401fcc4:	e0bffd17 	ldw	r2,-12(fp)
 401fcc8:	10c00217 	ldw	r3,8(r2)
 401fccc:	e0bffe17 	ldw	r2,-8(fp)
 401fcd0:	10bfffc4 	addi	r2,r2,-1
 401fcd4:	1885883a 	add	r2,r3,r2
 401fcd8:	10800003 	ldbu	r2,0(r2)
 401fcdc:	10803fcc 	andi	r2,r2,255
 401fce0:	1080201c 	xori	r2,r2,128
 401fce4:	10bfe004 	addi	r2,r2,-128
 401fce8:	10800bd8 	cmpnei	r2,r2,47
 401fcec:	1000031e 	bne	r2,zero,401fcfc <alt_find_file+0x6c>
    {
      len -= 1;
 401fcf0:	e0bffe17 	ldw	r2,-8(fp)
 401fcf4:	10bfffc4 	addi	r2,r2,-1
 401fcf8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401fcfc:	e0bffe17 	ldw	r2,-8(fp)
 401fd00:	e0ffff17 	ldw	r3,-4(fp)
 401fd04:	1885883a 	add	r2,r3,r2
 401fd08:	10800003 	ldbu	r2,0(r2)
 401fd0c:	10803fcc 	andi	r2,r2,255
 401fd10:	1080201c 	xori	r2,r2,128
 401fd14:	10bfe004 	addi	r2,r2,-128
 401fd18:	10800be0 	cmpeqi	r2,r2,47
 401fd1c:	1000081e 	bne	r2,zero,401fd40 <alt_find_file+0xb0>
 401fd20:	e0bffe17 	ldw	r2,-8(fp)
 401fd24:	e0ffff17 	ldw	r3,-4(fp)
 401fd28:	1885883a 	add	r2,r3,r2
 401fd2c:	10800003 	ldbu	r2,0(r2)
 401fd30:	10803fcc 	andi	r2,r2,255
 401fd34:	1080201c 	xori	r2,r2,128
 401fd38:	10bfe004 	addi	r2,r2,-128
 401fd3c:	10000a1e 	bne	r2,zero,401fd68 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 401fd40:	e0bffd17 	ldw	r2,-12(fp)
 401fd44:	10800217 	ldw	r2,8(r2)
 401fd48:	e0fffe17 	ldw	r3,-8(fp)
 401fd4c:	180d883a 	mov	r6,r3
 401fd50:	e17fff17 	ldw	r5,-4(fp)
 401fd54:	1009883a 	mov	r4,r2
 401fd58:	401ff440 	call	401ff44 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401fd5c:	1000021e 	bne	r2,zero,401fd68 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 401fd60:	e0bffd17 	ldw	r2,-12(fp)
 401fd64:	00000706 	br	401fd84 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 401fd68:	e0bffd17 	ldw	r2,-12(fp)
 401fd6c:	10800017 	ldw	r2,0(r2)
 401fd70:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401fd74:	e0fffd17 	ldw	r3,-12(fp)
 401fd78:	d0a5b204 	addi	r2,gp,-26936
 401fd7c:	18bfcc1e 	bne	r3,r2,401fcb0 <__alt_data_end+0xfc01fcb0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 401fd80:	0005883a 	mov	r2,zero
}
 401fd84:	e037883a 	mov	sp,fp
 401fd88:	dfc00117 	ldw	ra,4(sp)
 401fd8c:	df000017 	ldw	fp,0(sp)
 401fd90:	dec00204 	addi	sp,sp,8
 401fd94:	f800283a 	ret

0401fd98 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 401fd98:	defffa04 	addi	sp,sp,-24
 401fd9c:	dfc00515 	stw	ra,20(sp)
 401fda0:	df000415 	stw	fp,16(sp)
 401fda4:	dc000315 	stw	r16,12(sp)
 401fda8:	df000404 	addi	fp,sp,16
 401fdac:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 401fdb0:	00bffa04 	movi	r2,-24
 401fdb4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401fdb8:	e03ffc15 	stw	zero,-16(fp)
 401fdbc:	00001d06 	br	401fe34 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 401fdc0:	040100b4 	movhi	r16,1026
 401fdc4:	841f5504 	addi	r16,r16,32084
 401fdc8:	e0bffc17 	ldw	r2,-16(fp)
 401fdcc:	01400304 	movi	r5,12
 401fdd0:	1009883a 	mov	r4,r2
 401fdd4:	400d3680 	call	400d368 <__mulsi3>
 401fdd8:	8085883a 	add	r2,r16,r2
 401fddc:	10800017 	ldw	r2,0(r2)
 401fde0:	1000111e 	bne	r2,zero,401fe28 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 401fde4:	040100b4 	movhi	r16,1026
 401fde8:	841f5504 	addi	r16,r16,32084
 401fdec:	e0bffc17 	ldw	r2,-16(fp)
 401fdf0:	01400304 	movi	r5,12
 401fdf4:	1009883a 	mov	r4,r2
 401fdf8:	400d3680 	call	400d368 <__mulsi3>
 401fdfc:	8085883a 	add	r2,r16,r2
 401fe00:	e0fffe17 	ldw	r3,-8(fp)
 401fe04:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 401fe08:	d0e5b617 	ldw	r3,-26920(gp)
 401fe0c:	e0bffc17 	ldw	r2,-16(fp)
 401fe10:	1880020e 	bge	r3,r2,401fe1c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 401fe14:	e0bffc17 	ldw	r2,-16(fp)
 401fe18:	d0a5b615 	stw	r2,-26920(gp)
      }
      rc = i;
 401fe1c:	e0bffc17 	ldw	r2,-16(fp)
 401fe20:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 401fe24:	00000606 	br	401fe40 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401fe28:	e0bffc17 	ldw	r2,-16(fp)
 401fe2c:	10800044 	addi	r2,r2,1
 401fe30:	e0bffc15 	stw	r2,-16(fp)
 401fe34:	e0bffc17 	ldw	r2,-16(fp)
 401fe38:	10800810 	cmplti	r2,r2,32
 401fe3c:	103fe01e 	bne	r2,zero,401fdc0 <__alt_data_end+0xfc01fdc0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 401fe40:	e0bffd17 	ldw	r2,-12(fp)
}
 401fe44:	e6ffff04 	addi	sp,fp,-4
 401fe48:	dfc00217 	ldw	ra,8(sp)
 401fe4c:	df000117 	ldw	fp,4(sp)
 401fe50:	dc000017 	ldw	r16,0(sp)
 401fe54:	dec00304 	addi	sp,sp,12
 401fe58:	f800283a 	ret

0401fe5c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 401fe5c:	defffe04 	addi	sp,sp,-8
 401fe60:	df000115 	stw	fp,4(sp)
 401fe64:	df000104 	addi	fp,sp,4
 401fe68:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 401fe6c:	e0bfff17 	ldw	r2,-4(fp)
 401fe70:	10bffe84 	addi	r2,r2,-6
 401fe74:	10c00428 	cmpgeui	r3,r2,16
 401fe78:	18001a1e 	bne	r3,zero,401fee4 <alt_exception_cause_generated_bad_addr+0x88>
 401fe7c:	100690ba 	slli	r3,r2,2
 401fe80:	008100b4 	movhi	r2,1026
 401fe84:	10bfa504 	addi	r2,r2,-364
 401fe88:	1885883a 	add	r2,r3,r2
 401fe8c:	10800017 	ldw	r2,0(r2)
 401fe90:	1000683a 	jmp	r2
 401fe94:	0401fed4 	movui	r16,2043
 401fe98:	0401fed4 	movui	r16,2043
 401fe9c:	0401fee4 	muli	r16,zero,2043
 401fea0:	0401fee4 	muli	r16,zero,2043
 401fea4:	0401fee4 	muli	r16,zero,2043
 401fea8:	0401fed4 	movui	r16,2043
 401feac:	0401fedc 	xori	r16,zero,2043
 401feb0:	0401fee4 	muli	r16,zero,2043
 401feb4:	0401fed4 	movui	r16,2043
 401feb8:	0401fed4 	movui	r16,2043
 401febc:	0401fee4 	muli	r16,zero,2043
 401fec0:	0401fed4 	movui	r16,2043
 401fec4:	0401fedc 	xori	r16,zero,2043
 401fec8:	0401fee4 	muli	r16,zero,2043
 401fecc:	0401fee4 	muli	r16,zero,2043
 401fed0:	0401fed4 	movui	r16,2043
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 401fed4:	00800044 	movi	r2,1
 401fed8:	00000306 	br	401fee8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 401fedc:	0005883a 	mov	r2,zero
 401fee0:	00000106 	br	401fee8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 401fee4:	0005883a 	mov	r2,zero
  }
}
 401fee8:	e037883a 	mov	sp,fp
 401feec:	df000017 	ldw	fp,0(sp)
 401fef0:	dec00104 	addi	sp,sp,4
 401fef4:	f800283a 	ret

0401fef8 <atexit>:
 401fef8:	200b883a 	mov	r5,r4
 401fefc:	000f883a 	mov	r7,zero
 401ff00:	000d883a 	mov	r6,zero
 401ff04:	0009883a 	mov	r4,zero
 401ff08:	401ffc01 	jmpi	401ffc0 <__register_exitproc>

0401ff0c <exit>:
 401ff0c:	defffe04 	addi	sp,sp,-8
 401ff10:	000b883a 	mov	r5,zero
 401ff14:	dc000015 	stw	r16,0(sp)
 401ff18:	dfc00115 	stw	ra,4(sp)
 401ff1c:	2021883a 	mov	r16,r4
 401ff20:	40200d80 	call	40200d8 <__call_exitprocs>
 401ff24:	008100f4 	movhi	r2,1027
 401ff28:	10a98704 	addi	r2,r2,-23012
 401ff2c:	11000017 	ldw	r4,0(r2)
 401ff30:	20800f17 	ldw	r2,60(r4)
 401ff34:	10000126 	beq	r2,zero,401ff3c <exit+0x30>
 401ff38:	103ee83a 	callr	r2
 401ff3c:	8009883a 	mov	r4,r16
 401ff40:	401b7a40 	call	401b7a4 <_exit>

0401ff44 <memcmp>:
 401ff44:	01c000c4 	movi	r7,3
 401ff48:	3980192e 	bgeu	r7,r6,401ffb0 <memcmp+0x6c>
 401ff4c:	2144b03a 	or	r2,r4,r5
 401ff50:	11c4703a 	and	r2,r2,r7
 401ff54:	10000f26 	beq	r2,zero,401ff94 <memcmp+0x50>
 401ff58:	20800003 	ldbu	r2,0(r4)
 401ff5c:	28c00003 	ldbu	r3,0(r5)
 401ff60:	10c0151e 	bne	r2,r3,401ffb8 <memcmp+0x74>
 401ff64:	31bfff84 	addi	r6,r6,-2
 401ff68:	01ffffc4 	movi	r7,-1
 401ff6c:	00000406 	br	401ff80 <memcmp+0x3c>
 401ff70:	20800003 	ldbu	r2,0(r4)
 401ff74:	28c00003 	ldbu	r3,0(r5)
 401ff78:	31bfffc4 	addi	r6,r6,-1
 401ff7c:	10c00e1e 	bne	r2,r3,401ffb8 <memcmp+0x74>
 401ff80:	21000044 	addi	r4,r4,1
 401ff84:	29400044 	addi	r5,r5,1
 401ff88:	31fff91e 	bne	r6,r7,401ff70 <__alt_data_end+0xfc01ff70>
 401ff8c:	0005883a 	mov	r2,zero
 401ff90:	f800283a 	ret
 401ff94:	20c00017 	ldw	r3,0(r4)
 401ff98:	28800017 	ldw	r2,0(r5)
 401ff9c:	18bfee1e 	bne	r3,r2,401ff58 <__alt_data_end+0xfc01ff58>
 401ffa0:	31bfff04 	addi	r6,r6,-4
 401ffa4:	21000104 	addi	r4,r4,4
 401ffa8:	29400104 	addi	r5,r5,4
 401ffac:	39bff936 	bltu	r7,r6,401ff94 <__alt_data_end+0xfc01ff94>
 401ffb0:	303fe91e 	bne	r6,zero,401ff58 <__alt_data_end+0xfc01ff58>
 401ffb4:	003ff506 	br	401ff8c <__alt_data_end+0xfc01ff8c>
 401ffb8:	10c5c83a 	sub	r2,r2,r3
 401ffbc:	f800283a 	ret

0401ffc0 <__register_exitproc>:
 401ffc0:	defffa04 	addi	sp,sp,-24
 401ffc4:	dc000315 	stw	r16,12(sp)
 401ffc8:	040100f4 	movhi	r16,1027
 401ffcc:	84298704 	addi	r16,r16,-23012
 401ffd0:	80c00017 	ldw	r3,0(r16)
 401ffd4:	dc400415 	stw	r17,16(sp)
 401ffd8:	dfc00515 	stw	ra,20(sp)
 401ffdc:	18805217 	ldw	r2,328(r3)
 401ffe0:	2023883a 	mov	r17,r4
 401ffe4:	10003726 	beq	r2,zero,40200c4 <__register_exitproc+0x104>
 401ffe8:	10c00117 	ldw	r3,4(r2)
 401ffec:	010007c4 	movi	r4,31
 401fff0:	20c00e16 	blt	r4,r3,402002c <__register_exitproc+0x6c>
 401fff4:	1a000044 	addi	r8,r3,1
 401fff8:	8800221e 	bne	r17,zero,4020084 <__register_exitproc+0xc4>
 401fffc:	18c00084 	addi	r3,r3,2
 4020000:	18c7883a 	add	r3,r3,r3
 4020004:	18c7883a 	add	r3,r3,r3
 4020008:	12000115 	stw	r8,4(r2)
 402000c:	10c7883a 	add	r3,r2,r3
 4020010:	19400015 	stw	r5,0(r3)
 4020014:	0005883a 	mov	r2,zero
 4020018:	dfc00517 	ldw	ra,20(sp)
 402001c:	dc400417 	ldw	r17,16(sp)
 4020020:	dc000317 	ldw	r16,12(sp)
 4020024:	dec00604 	addi	sp,sp,24
 4020028:	f800283a 	ret
 402002c:	00810074 	movhi	r2,1025
 4020030:	10b92a04 	addi	r2,r2,-7000
 4020034:	10002626 	beq	r2,zero,40200d0 <__register_exitproc+0x110>
 4020038:	01006404 	movi	r4,400
 402003c:	d9400015 	stw	r5,0(sp)
 4020040:	d9800115 	stw	r6,4(sp)
 4020044:	d9c00215 	stw	r7,8(sp)
 4020048:	400e4a80 	call	400e4a8 <malloc>
 402004c:	d9400017 	ldw	r5,0(sp)
 4020050:	d9800117 	ldw	r6,4(sp)
 4020054:	d9c00217 	ldw	r7,8(sp)
 4020058:	10001d26 	beq	r2,zero,40200d0 <__register_exitproc+0x110>
 402005c:	81000017 	ldw	r4,0(r16)
 4020060:	10000115 	stw	zero,4(r2)
 4020064:	02000044 	movi	r8,1
 4020068:	22405217 	ldw	r9,328(r4)
 402006c:	0007883a 	mov	r3,zero
 4020070:	12400015 	stw	r9,0(r2)
 4020074:	20805215 	stw	r2,328(r4)
 4020078:	10006215 	stw	zero,392(r2)
 402007c:	10006315 	stw	zero,396(r2)
 4020080:	883fde26 	beq	r17,zero,401fffc <__alt_data_end+0xfc01fffc>
 4020084:	18c9883a 	add	r4,r3,r3
 4020088:	2109883a 	add	r4,r4,r4
 402008c:	1109883a 	add	r4,r2,r4
 4020090:	21802215 	stw	r6,136(r4)
 4020094:	01800044 	movi	r6,1
 4020098:	12406217 	ldw	r9,392(r2)
 402009c:	30cc983a 	sll	r6,r6,r3
 40200a0:	4992b03a 	or	r9,r9,r6
 40200a4:	12406215 	stw	r9,392(r2)
 40200a8:	21c04215 	stw	r7,264(r4)
 40200ac:	01000084 	movi	r4,2
 40200b0:	893fd21e 	bne	r17,r4,401fffc <__alt_data_end+0xfc01fffc>
 40200b4:	11006317 	ldw	r4,396(r2)
 40200b8:	218cb03a 	or	r6,r4,r6
 40200bc:	11806315 	stw	r6,396(r2)
 40200c0:	003fce06 	br	401fffc <__alt_data_end+0xfc01fffc>
 40200c4:	18805304 	addi	r2,r3,332
 40200c8:	18805215 	stw	r2,328(r3)
 40200cc:	003fc606 	br	401ffe8 <__alt_data_end+0xfc01ffe8>
 40200d0:	00bfffc4 	movi	r2,-1
 40200d4:	003fd006 	br	4020018 <__alt_data_end+0xfc020018>

040200d8 <__call_exitprocs>:
 40200d8:	defff504 	addi	sp,sp,-44
 40200dc:	df000915 	stw	fp,36(sp)
 40200e0:	dd400615 	stw	r21,24(sp)
 40200e4:	dc800315 	stw	r18,12(sp)
 40200e8:	dfc00a15 	stw	ra,40(sp)
 40200ec:	ddc00815 	stw	r23,32(sp)
 40200f0:	dd800715 	stw	r22,28(sp)
 40200f4:	dd000515 	stw	r20,20(sp)
 40200f8:	dcc00415 	stw	r19,16(sp)
 40200fc:	dc400215 	stw	r17,8(sp)
 4020100:	dc000115 	stw	r16,4(sp)
 4020104:	d9000015 	stw	r4,0(sp)
 4020108:	2839883a 	mov	fp,r5
 402010c:	04800044 	movi	r18,1
 4020110:	057fffc4 	movi	r21,-1
 4020114:	008100f4 	movhi	r2,1027
 4020118:	10a98704 	addi	r2,r2,-23012
 402011c:	12000017 	ldw	r8,0(r2)
 4020120:	45005217 	ldw	r20,328(r8)
 4020124:	44c05204 	addi	r19,r8,328
 4020128:	a0001c26 	beq	r20,zero,402019c <__call_exitprocs+0xc4>
 402012c:	a0800117 	ldw	r2,4(r20)
 4020130:	15ffffc4 	addi	r23,r2,-1
 4020134:	b8000d16 	blt	r23,zero,402016c <__call_exitprocs+0x94>
 4020138:	14000044 	addi	r16,r2,1
 402013c:	8421883a 	add	r16,r16,r16
 4020140:	8421883a 	add	r16,r16,r16
 4020144:	84402004 	addi	r17,r16,128
 4020148:	a463883a 	add	r17,r20,r17
 402014c:	a421883a 	add	r16,r20,r16
 4020150:	e0001e26 	beq	fp,zero,40201cc <__call_exitprocs+0xf4>
 4020154:	80804017 	ldw	r2,256(r16)
 4020158:	e0801c26 	beq	fp,r2,40201cc <__call_exitprocs+0xf4>
 402015c:	bdffffc4 	addi	r23,r23,-1
 4020160:	843fff04 	addi	r16,r16,-4
 4020164:	8c7fff04 	addi	r17,r17,-4
 4020168:	bd7ff91e 	bne	r23,r21,4020150 <__alt_data_end+0xfc020150>
 402016c:	00810074 	movhi	r2,1025
 4020170:	10b92f04 	addi	r2,r2,-6980
 4020174:	10000926 	beq	r2,zero,402019c <__call_exitprocs+0xc4>
 4020178:	a0800117 	ldw	r2,4(r20)
 402017c:	1000301e 	bne	r2,zero,4020240 <__call_exitprocs+0x168>
 4020180:	a0800017 	ldw	r2,0(r20)
 4020184:	10003226 	beq	r2,zero,4020250 <__call_exitprocs+0x178>
 4020188:	a009883a 	mov	r4,r20
 402018c:	98800015 	stw	r2,0(r19)
 4020190:	400e4bc0 	call	400e4bc <free>
 4020194:	9d000017 	ldw	r20,0(r19)
 4020198:	a03fe41e 	bne	r20,zero,402012c <__alt_data_end+0xfc02012c>
 402019c:	dfc00a17 	ldw	ra,40(sp)
 40201a0:	df000917 	ldw	fp,36(sp)
 40201a4:	ddc00817 	ldw	r23,32(sp)
 40201a8:	dd800717 	ldw	r22,28(sp)
 40201ac:	dd400617 	ldw	r21,24(sp)
 40201b0:	dd000517 	ldw	r20,20(sp)
 40201b4:	dcc00417 	ldw	r19,16(sp)
 40201b8:	dc800317 	ldw	r18,12(sp)
 40201bc:	dc400217 	ldw	r17,8(sp)
 40201c0:	dc000117 	ldw	r16,4(sp)
 40201c4:	dec00b04 	addi	sp,sp,44
 40201c8:	f800283a 	ret
 40201cc:	a0800117 	ldw	r2,4(r20)
 40201d0:	80c00017 	ldw	r3,0(r16)
 40201d4:	10bfffc4 	addi	r2,r2,-1
 40201d8:	15c01426 	beq	r2,r23,402022c <__call_exitprocs+0x154>
 40201dc:	80000015 	stw	zero,0(r16)
 40201e0:	183fde26 	beq	r3,zero,402015c <__alt_data_end+0xfc02015c>
 40201e4:	95c8983a 	sll	r4,r18,r23
 40201e8:	a0806217 	ldw	r2,392(r20)
 40201ec:	a5800117 	ldw	r22,4(r20)
 40201f0:	2084703a 	and	r2,r4,r2
 40201f4:	10000b26 	beq	r2,zero,4020224 <__call_exitprocs+0x14c>
 40201f8:	a0806317 	ldw	r2,396(r20)
 40201fc:	2088703a 	and	r4,r4,r2
 4020200:	20000c1e 	bne	r4,zero,4020234 <__call_exitprocs+0x15c>
 4020204:	89400017 	ldw	r5,0(r17)
 4020208:	d9000017 	ldw	r4,0(sp)
 402020c:	183ee83a 	callr	r3
 4020210:	a0800117 	ldw	r2,4(r20)
 4020214:	15bfbf1e 	bne	r2,r22,4020114 <__alt_data_end+0xfc020114>
 4020218:	98800017 	ldw	r2,0(r19)
 402021c:	153fcf26 	beq	r2,r20,402015c <__alt_data_end+0xfc02015c>
 4020220:	003fbc06 	br	4020114 <__alt_data_end+0xfc020114>
 4020224:	183ee83a 	callr	r3
 4020228:	003ff906 	br	4020210 <__alt_data_end+0xfc020210>
 402022c:	a5c00115 	stw	r23,4(r20)
 4020230:	003feb06 	br	40201e0 <__alt_data_end+0xfc0201e0>
 4020234:	89000017 	ldw	r4,0(r17)
 4020238:	183ee83a 	callr	r3
 402023c:	003ff406 	br	4020210 <__alt_data_end+0xfc020210>
 4020240:	a0800017 	ldw	r2,0(r20)
 4020244:	a027883a 	mov	r19,r20
 4020248:	1029883a 	mov	r20,r2
 402024c:	003fb606 	br	4020128 <__alt_data_end+0xfc020128>
 4020250:	0005883a 	mov	r2,zero
 4020254:	003ffb06 	br	4020244 <__alt_data_end+0xfc020244>
 4020258:	01110bff 	0x1110bff
 402025c:	01010004 	movi	r4,1024
 4020260:	7f000105 	stb	fp,4(r15)
 4020264:	007d0000 	call	7d000 <__alt_mem_sdram-0x3f83000>
 4020268:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 402026c:	01883a00 	call	1883a0 <__alt_mem_sdram-0x3e77c60>
 4020270:	010d0bff 	0x10d0bff
 4020274:	01010002 	0x1010002
	...
 4020280:	010d0bff 	0x10d0bff
 4020284:	01010004 	movi	r4,1024
 4020288:	00000100 	call	10 <__alt_mem_sdram-0x3fffff0>
 402028c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 4020290:	0400a900 	call	400a90 <__alt_mem_sdram-0x3bff570>
 4020294:	0400d050 	cmplti	r16,zero,833
